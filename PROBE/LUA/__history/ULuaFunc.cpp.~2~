//---------------------------------------------------------------------------

#pragma hdrstop

#include "ULuaFunc.h"

//---------------------------------------------------------------------------
#pragma package(smart_init)

bool   stop 	= false;
bool   wait 	= false;
int	   debug	= 0;
int 	state	= STATE_STOP;;

extern Log 			console;
extern Analizator	analizator;
//==============================================================================

void  Wrap(String source, TStrings* receiver, String delimiters){

	enum TMode {lexem,delim};
	TMode mode	=	delim;
	receiver->Clear(); //?????????????

	String Lex;
	for(int i = 1; i <= source.Length(); i++){

		if(source.IsDelimiter(delimiters,i)){
			if(mode == lexem){
				receiver->Add(Lex);
				Lex = "";
			}
			mode = delim;
		}else{
			mode = lexem;
			Lex += source[i];
		}
	}
	if(mode == lexem){
		receiver->Add(Lex);
		Lex = "";
	}
};

//-----------------------------------------
HList	Wrap(String source){

	enum TMode {lexem,delim};
	TMode mode = delim;

	HList	list(true);
	list.Initialize();

	String Lex;
	for(int i = 1;i <= source.Length(); i++){
		if(source.IsDelimiter("/",i)){
			if(mode == lexem){
				list->Add(Lex);
				Lex = "";
			}
			mode = delim;
		}else{
			mode = lexem;
			Lex += source[i];
		}
	}
	if(mode == lexem){
		list->Add(Lex);
		Lex = "";
	}
	return list;
};

//-----------------------------------------
int	Return(lua_State*	lvm){

	stop = true;
	return lua_yield(lvm,0);
}

//-----------------------------------------
int	Pause(lua_State*	lvm){

	return lua_yield(lvm,0);
};

//-----------------------------------------
int	Message(lua_State*	lvm){

	String type;
	String message;
	try{
		int count = lua_gettop(lvm);
		if(count == 1){

			if(lua_isboolean(lvm,1)){

				bool a = lua_toboolean(lvm,1);
				if(a) 	message = "True";
				else	message	= "False";
			}else	message 	= lua_tostring(lvm,1);
			ShowMessage(message);

		}else if(count == 2){

			type 		= lua_tostring(lvm,2);
			message 	= lua_tostring(lvm,1);
			int t = 4;
			if(LowerCase(type) == "warning")		t = 0;
			else  if(LowerCase(type) == "error")	t = 1;
			else  if(LowerCase(type) == "inform")		t = 2;

			MessageDlg(message,TMsgDlgType(t),TMsgDlgButtons()<<mbOK,0);

		}

	}catch(...){;}

	Application->ProcessMessages();
	if(stop)	return Return(lvm);
	return 1;

};


//---------------------------------------------------------------------------
int USleep(lua_State*	lvm){

	unsigned t;
	int p = lua_tointeger(lvm,1);
	int a = p/50;
	int b = p - a*50;

	for(int i = 0; i < a; i++){

		Sleep(50);
		Application->ProcessMessages();
		if(stop)	return Return(lvm);

	}
	Sleep(b);
	return 1;
}

//==============================================================================
int 	relay		(lua_State*	lvm){

	String type;
	String message;
	try{
		int count = lua_gettop(lvm);
		if(count == 1){

			if(lua_isboolean(lvm,1)){

				bool a = lua_toboolean(lvm,1);
				if(a) 	message = "True";
				else	message	= "False";
			}else if(lua_isnumber(lvm,1)){

			}else{
				console<<"-- Error: Типы параметров не соответствует сигнатуре функции 'relay()'"<<endl;
				stop	= true;
			}

		}else{
			console<<"-- Error: Количество параметров не соответствует сигнатуре функции 'relay()'"<<endl;
			stop	= true;
		}

	}catch(...){;}

	Application->ProcessMessages();
	if(stop)	return Return(lvm);
	return 1;

};

