//---------------------------------------------------------------------------

#pragma hdrstop

#include "ULua.h"
extern 	HData		DReg;
extern 	UModules 	Modules;
extern 	WPage*		Page;
extern	TPanel*		LPnl;
extern	TPanel*		RPnl;
extern	TPanel*		BPnl;

extern bool			stop;
extern bool			wait;
extern int			debug;

bool	allow 	= true;
bool	allow1	= true;
bool	single	= true;

extern HGlobal*		Global;
//---------------------------------------------------------------------------
#pragma package(smart_init)
//---------------------------------------------------------------------------


//==============================================================================
ULua::ULua(){

	FLua = luaL_newstate();
	luaL_openlibs(FLua);

	lua_register(FLua,	"Pause",		&Pause);
	lua_register(FLua,	"Stop",			&Return);
	lua_register(FLua,	"Message",		&Message);
	lua_register(FLua,	"Sleep",		&USleep);

	lua_register(FLua,	"True",			&FTrue);
	lua_register(FLua,	"False",		&FFalse);
	lua_register(FLua,	"Request",		&Request);
	lua_register(FLua,	"Status",		&Stat);
	lua_register(FLua,	"Debug",		&Debug);


	lua_register(FLua,	"CreateForm", 	&FormCreate);
	lua_register(FLua,	"CloseForm", 	&FormClose);
	lua_register(FLua,	"FindForm", 	&FormFind);
	lua_register(FLua,	"ShowForm", 	&FormShow);
	lua_register(FLua,	"HideForm", 	&FormHide);
	lua_register(FLua,	"WidthForm", 	&FormWidth);
	lua_register(FLua,	"HeightForm", 	&FormHeight);

	lua_register(FLua,	"CreateSheet", 	&CreateSheet);
	lua_register(FLua,	"CloseSheet", 	&CloseSheet);
	lua_register(FLua,	"FormOnSheet", 	&FormOnSheet);
	lua_register(FLua,	"RenameSheet", 	&NameSheet);

	lua_register(FLua,	"SetVar", 		&VarSet);
	lua_register(FLua,	"GetVar", 		&VarGet);
	lua_register(FLua,	"CloseVar", 	&VarClose);

	lua_register(FLua,	"Set", 			&CommandSet);
	lua_register(FLua,	"Get", 			&CommandGet);

	lua_register(FLua,	"CreateObject", &ObjectCreate);
	lua_register(FLua,	"CloseObject", 	&ObjectClose);
	lua_register(FLua,	"FindObject", 	&ObjectFind);

	lua_register(FLua,	"SetData", 		&DataSet);
	lua_register(FLua,	"GetData", 		&DataGet);

	FState 	= 0;
	FObs	= new ULuaObs(this);
	Global->Data->Reg("System/State",FObs);

};

//-------------------------------------------
ULua::~ULua(){

	Stop();
	Global->Data->UnReg("System/State",FObs);
	delete FObs;
	lua_close(FLua);

};

//-------------------------------------------
void		ULua::SetScript(String script){

	FScript	= script;
};

//-------------------------------------------
void		ULua::SetState(int state){

	FState = state;    //???????????
};

//-------------------------------------------
String		ULua::GetScript(){

	return FScript;
};

//-------------------------------------------
int			ULua::GetState(){

	return FState;
};

//-------------------------------------------
void __fastcall ULua::Execute(String script){

	if(STOP != (*Global->Data)["System"]["State"])	Stop();
	debug	= 0;
	(*Global->Data)["System"]["Debug"].Int 		= debug;

	if(script != "")	FScript = script;

	luaL_loadstring(FLua,AnsiString(FScript).c_str());
	lua_pcall(FLua,0,LUA_MULTRET,0);
	Flua	= lua_newthread(FLua);
	lua_getglobal(Flua,"Main");

	FState 	= 1;
	stop	= false;

	(*Global->Data)["System"]["State"] = PROCEED;

	FResult = lua_resume(Flua,0);
	if(FResult == LUA_YIELD){
		FState = 2;
		(*Global->Data)["System"]["State"] = PAUSED;
		return;
	}else
	if(FResult != 0)	ShowMessage("Ошибка выполнения скрипта!");

	(*Global->Data)["System"]["State"] = STOP;
	FState = 0;


};

//--------------------------------------------
void __fastcall ULua::Suspend(){

	stop = true;
	if(PROCEED == (*Global->Data)["System"]["State"]){
		(*Global->Data)["System"]["State"] = PAUSED;
		FState = 2;
	}

};

//--------------------------------------------
void __fastcall ULua::Resume(){

	stop = false;
	if(PAUSED == (*Global->Data)["System"]["State"]){
		(*Global->Data)["System"]["State"] = PROCEED;
		FResult = lua_resume(Flua,0);
		if(FResult == LUA_YIELD){
			FState = 2;
			(*Global->Data)["System"]["State"] = PAUSED;
			return;
		}else
		if(FResult != 0)	ShowMessage("Ошибка выполнения скрипта!");

		(*Global->Data)["System"]["State"] = STOP;
		FState = 0;
	}
};

//--------------------------------------------
void __fastcall ULua::Stop(){

	stop = true;
	(*Global->Data)["System"]["State"] = STOP;
	FState = 0;
};

//--------------------------------------------
void __fastcall ULua::Build(){

};




