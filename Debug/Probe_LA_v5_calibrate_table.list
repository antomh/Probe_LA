
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c130  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800c240  0800c240  0001c240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c450  0800c450  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c450  0800c450  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c450  0800c450  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c450  0800c450  0001c450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c454  0800c454  0001c454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  200001f0  0800c648  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015b8  0800c648  000215b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb42  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a72  00000000  00000000  0003fd5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  000447d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  00045e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dcd6  00000000  00000000  00047308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc1a  00000000  00000000  00064fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097e35  00000000  00000000  00080bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118a2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006898  00000000  00000000  00118a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c228 	.word	0x0800c228

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800c228 	.word	0x0800c228

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_frsub>:
 8000628:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800062c:	e002      	b.n	8000634 <__addsf3>
 800062e:	bf00      	nop

08000630 <__aeabi_fsub>:
 8000630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000634 <__addsf3>:
 8000634:	0042      	lsls	r2, r0, #1
 8000636:	bf1f      	itttt	ne
 8000638:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800063c:	ea92 0f03 	teqne	r2, r3
 8000640:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000644:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000648:	d06a      	beq.n	8000720 <__addsf3+0xec>
 800064a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800064e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000652:	bfc1      	itttt	gt
 8000654:	18d2      	addgt	r2, r2, r3
 8000656:	4041      	eorgt	r1, r0
 8000658:	4048      	eorgt	r0, r1
 800065a:	4041      	eorgt	r1, r0
 800065c:	bfb8      	it	lt
 800065e:	425b      	neglt	r3, r3
 8000660:	2b19      	cmp	r3, #25
 8000662:	bf88      	it	hi
 8000664:	4770      	bxhi	lr
 8000666:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800066a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000672:	bf18      	it	ne
 8000674:	4240      	negne	r0, r0
 8000676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800067a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800067e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000682:	bf18      	it	ne
 8000684:	4249      	negne	r1, r1
 8000686:	ea92 0f03 	teq	r2, r3
 800068a:	d03f      	beq.n	800070c <__addsf3+0xd8>
 800068c:	f1a2 0201 	sub.w	r2, r2, #1
 8000690:	fa41 fc03 	asr.w	ip, r1, r3
 8000694:	eb10 000c 	adds.w	r0, r0, ip
 8000698:	f1c3 0320 	rsb	r3, r3, #32
 800069c:	fa01 f103 	lsl.w	r1, r1, r3
 80006a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a4:	d502      	bpl.n	80006ac <__addsf3+0x78>
 80006a6:	4249      	negs	r1, r1
 80006a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006b0:	d313      	bcc.n	80006da <__addsf3+0xa6>
 80006b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b6:	d306      	bcc.n	80006c6 <__addsf3+0x92>
 80006b8:	0840      	lsrs	r0, r0, #1
 80006ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80006be:	f102 0201 	add.w	r2, r2, #1
 80006c2:	2afe      	cmp	r2, #254	; 0xfe
 80006c4:	d251      	bcs.n	800076a <__addsf3+0x136>
 80006c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ce:	bf08      	it	eq
 80006d0:	f020 0001 	biceq.w	r0, r0, #1
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	4770      	bx	lr
 80006da:	0049      	lsls	r1, r1, #1
 80006dc:	eb40 0000 	adc.w	r0, r0, r0
 80006e0:	3a01      	subs	r2, #1
 80006e2:	bf28      	it	cs
 80006e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006e8:	d2ed      	bcs.n	80006c6 <__addsf3+0x92>
 80006ea:	fab0 fc80 	clz	ip, r0
 80006ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80006f2:	ebb2 020c 	subs.w	r2, r2, ip
 80006f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006fa:	bfaa      	itet	ge
 80006fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000700:	4252      	neglt	r2, r2
 8000702:	4318      	orrge	r0, r3
 8000704:	bfbc      	itt	lt
 8000706:	40d0      	lsrlt	r0, r2
 8000708:	4318      	orrlt	r0, r3
 800070a:	4770      	bx	lr
 800070c:	f092 0f00 	teq	r2, #0
 8000710:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000714:	bf06      	itte	eq
 8000716:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800071a:	3201      	addeq	r2, #1
 800071c:	3b01      	subne	r3, #1
 800071e:	e7b5      	b.n	800068c <__addsf3+0x58>
 8000720:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000724:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000728:	bf18      	it	ne
 800072a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800072e:	d021      	beq.n	8000774 <__addsf3+0x140>
 8000730:	ea92 0f03 	teq	r2, r3
 8000734:	d004      	beq.n	8000740 <__addsf3+0x10c>
 8000736:	f092 0f00 	teq	r2, #0
 800073a:	bf08      	it	eq
 800073c:	4608      	moveq	r0, r1
 800073e:	4770      	bx	lr
 8000740:	ea90 0f01 	teq	r0, r1
 8000744:	bf1c      	itt	ne
 8000746:	2000      	movne	r0, #0
 8000748:	4770      	bxne	lr
 800074a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800074e:	d104      	bne.n	800075a <__addsf3+0x126>
 8000750:	0040      	lsls	r0, r0, #1
 8000752:	bf28      	it	cs
 8000754:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000758:	4770      	bx	lr
 800075a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800075e:	bf3c      	itt	cc
 8000760:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000764:	4770      	bxcc	lr
 8000766:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800076a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800076e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000772:	4770      	bx	lr
 8000774:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000778:	bf16      	itet	ne
 800077a:	4608      	movne	r0, r1
 800077c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000780:	4601      	movne	r1, r0
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	bf06      	itte	eq
 8000786:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800078a:	ea90 0f01 	teqeq	r0, r1
 800078e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000792:	4770      	bx	lr

08000794 <__aeabi_ui2f>:
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	e004      	b.n	80007a4 <__aeabi_i2f+0x8>
 800079a:	bf00      	nop

0800079c <__aeabi_i2f>:
 800079c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	ea5f 0c00 	movs.w	ip, r0
 80007a8:	bf08      	it	eq
 80007aa:	4770      	bxeq	lr
 80007ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007b0:	4601      	mov	r1, r0
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	e01c      	b.n	80007f2 <__aeabi_l2f+0x2a>

080007b8 <__aeabi_ul2f>:
 80007b8:	ea50 0201 	orrs.w	r2, r0, r1
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e00a      	b.n	80007dc <__aeabi_l2f+0x14>
 80007c6:	bf00      	nop

080007c8 <__aeabi_l2f>:
 80007c8:	ea50 0201 	orrs.w	r2, r0, r1
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007d4:	d502      	bpl.n	80007dc <__aeabi_l2f+0x14>
 80007d6:	4240      	negs	r0, r0
 80007d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007dc:	ea5f 0c01 	movs.w	ip, r1
 80007e0:	bf02      	ittt	eq
 80007e2:	4684      	moveq	ip, r0
 80007e4:	4601      	moveq	r1, r0
 80007e6:	2000      	moveq	r0, #0
 80007e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ec:	bf08      	it	eq
 80007ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007f6:	fabc f28c 	clz	r2, ip
 80007fa:	3a08      	subs	r2, #8
 80007fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000800:	db10      	blt.n	8000824 <__aeabi_l2f+0x5c>
 8000802:	fa01 fc02 	lsl.w	ip, r1, r2
 8000806:	4463      	add	r3, ip
 8000808:	fa00 fc02 	lsl.w	ip, r0, r2
 800080c:	f1c2 0220 	rsb	r2, r2, #32
 8000810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000814:	fa20 f202 	lsr.w	r2, r0, r2
 8000818:	eb43 0002 	adc.w	r0, r3, r2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f102 0220 	add.w	r2, r2, #32
 8000828:	fa01 fc02 	lsl.w	ip, r1, r2
 800082c:	f1c2 0220 	rsb	r2, r2, #32
 8000830:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000834:	fa21 f202 	lsr.w	r2, r1, r2
 8000838:	eb43 0002 	adc.w	r0, r3, r2
 800083c:	bf08      	it	eq
 800083e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000842:	4770      	bx	lr

08000844 <__aeabi_fmul>:
 8000844:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000848:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800084c:	bf1e      	ittt	ne
 800084e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000852:	ea92 0f0c 	teqne	r2, ip
 8000856:	ea93 0f0c 	teqne	r3, ip
 800085a:	d06f      	beq.n	800093c <__aeabi_fmul+0xf8>
 800085c:	441a      	add	r2, r3
 800085e:	ea80 0c01 	eor.w	ip, r0, r1
 8000862:	0240      	lsls	r0, r0, #9
 8000864:	bf18      	it	ne
 8000866:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800086a:	d01e      	beq.n	80008aa <__aeabi_fmul+0x66>
 800086c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000870:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000874:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000878:	fba0 3101 	umull	r3, r1, r0, r1
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000884:	bf3e      	ittt	cc
 8000886:	0049      	lslcc	r1, r1, #1
 8000888:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800088c:	005b      	lslcc	r3, r3, #1
 800088e:	ea40 0001 	orr.w	r0, r0, r1
 8000892:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000896:	2afd      	cmp	r2, #253	; 0xfd
 8000898:	d81d      	bhi.n	80008d6 <__aeabi_fmul+0x92>
 800089a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	4770      	bx	lr
 80008aa:	f090 0f00 	teq	r0, #0
 80008ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008b2:	bf08      	it	eq
 80008b4:	0249      	lsleq	r1, r1, #9
 80008b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008be:	3a7f      	subs	r2, #127	; 0x7f
 80008c0:	bfc2      	ittt	gt
 80008c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ca:	4770      	bxgt	lr
 80008cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	3a01      	subs	r2, #1
 80008d6:	dc5d      	bgt.n	8000994 <__aeabi_fmul+0x150>
 80008d8:	f112 0f19 	cmn.w	r2, #25
 80008dc:	bfdc      	itt	le
 80008de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008e2:	4770      	bxle	lr
 80008e4:	f1c2 0200 	rsb	r2, r2, #0
 80008e8:	0041      	lsls	r1, r0, #1
 80008ea:	fa21 f102 	lsr.w	r1, r1, r2
 80008ee:	f1c2 0220 	rsb	r2, r2, #32
 80008f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008fa:	f140 0000 	adc.w	r0, r0, #0
 80008fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000902:	bf08      	it	eq
 8000904:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000908:	4770      	bx	lr
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000912:	bf02      	ittt	eq
 8000914:	0040      	lsleq	r0, r0, #1
 8000916:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800091a:	3a01      	subeq	r2, #1
 800091c:	d0f9      	beq.n	8000912 <__aeabi_fmul+0xce>
 800091e:	ea40 000c 	orr.w	r0, r0, ip
 8000922:	f093 0f00 	teq	r3, #0
 8000926:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092a:	bf02      	ittt	eq
 800092c:	0049      	lsleq	r1, r1, #1
 800092e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000932:	3b01      	subeq	r3, #1
 8000934:	d0f9      	beq.n	800092a <__aeabi_fmul+0xe6>
 8000936:	ea41 010c 	orr.w	r1, r1, ip
 800093a:	e78f      	b.n	800085c <__aeabi_fmul+0x18>
 800093c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000940:	ea92 0f0c 	teq	r2, ip
 8000944:	bf18      	it	ne
 8000946:	ea93 0f0c 	teqne	r3, ip
 800094a:	d00a      	beq.n	8000962 <__aeabi_fmul+0x11e>
 800094c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000950:	bf18      	it	ne
 8000952:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000956:	d1d8      	bne.n	800090a <__aeabi_fmul+0xc6>
 8000958:	ea80 0001 	eor.w	r0, r0, r1
 800095c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000960:	4770      	bx	lr
 8000962:	f090 0f00 	teq	r0, #0
 8000966:	bf17      	itett	ne
 8000968:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800096c:	4608      	moveq	r0, r1
 800096e:	f091 0f00 	teqne	r1, #0
 8000972:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000976:	d014      	beq.n	80009a2 <__aeabi_fmul+0x15e>
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	d101      	bne.n	8000982 <__aeabi_fmul+0x13e>
 800097e:	0242      	lsls	r2, r0, #9
 8000980:	d10f      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000982:	ea93 0f0c 	teq	r3, ip
 8000986:	d103      	bne.n	8000990 <__aeabi_fmul+0x14c>
 8000988:	024b      	lsls	r3, r1, #9
 800098a:	bf18      	it	ne
 800098c:	4608      	movne	r0, r1
 800098e:	d108      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bx	lr

080009ac <__aeabi_fdiv>:
 80009ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b4:	bf1e      	ittt	ne
 80009b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ba:	ea92 0f0c 	teqne	r2, ip
 80009be:	ea93 0f0c 	teqne	r3, ip
 80009c2:	d069      	beq.n	8000a98 <__aeabi_fdiv+0xec>
 80009c4:	eba2 0203 	sub.w	r2, r2, r3
 80009c8:	ea80 0c01 	eor.w	ip, r0, r1
 80009cc:	0249      	lsls	r1, r1, #9
 80009ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009d2:	d037      	beq.n	8000a44 <__aeabi_fdiv+0x98>
 80009d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e4:	428b      	cmp	r3, r1
 80009e6:	bf38      	it	cc
 80009e8:	005b      	lslcc	r3, r3, #1
 80009ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009f2:	428b      	cmp	r3, r1
 80009f4:	bf24      	itt	cs
 80009f6:	1a5b      	subcs	r3, r3, r1
 80009f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a00:	bf24      	itt	cs
 8000a02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a0e:	bf24      	itt	cs
 8000a10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a1c:	bf24      	itt	cs
 8000a1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	bf18      	it	ne
 8000a2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a2e:	d1e0      	bne.n	80009f2 <__aeabi_fdiv+0x46>
 8000a30:	2afd      	cmp	r2, #253	; 0xfd
 8000a32:	f63f af50 	bhi.w	80008d6 <__aeabi_fmul+0x92>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4c:	327f      	adds	r2, #127	; 0x7f
 8000a4e:	bfc2      	ittt	gt
 8000a50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a58:	4770      	bxgt	lr
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	3a01      	subs	r2, #1
 8000a64:	e737      	b.n	80008d6 <__aeabi_fmul+0x92>
 8000a66:	f092 0f00 	teq	r2, #0
 8000a6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0040      	lsleq	r0, r0, #1
 8000a72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a76:	3a01      	subeq	r2, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fdiv+0xc2>
 8000a7a:	ea40 000c 	orr.w	r0, r0, ip
 8000a7e:	f093 0f00 	teq	r3, #0
 8000a82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a86:	bf02      	ittt	eq
 8000a88:	0049      	lsleq	r1, r1, #1
 8000a8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a8e:	3b01      	subeq	r3, #1
 8000a90:	d0f9      	beq.n	8000a86 <__aeabi_fdiv+0xda>
 8000a92:	ea41 010c 	orr.w	r1, r1, ip
 8000a96:	e795      	b.n	80009c4 <__aeabi_fdiv+0x18>
 8000a98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a9c:	ea92 0f0c 	teq	r2, ip
 8000aa0:	d108      	bne.n	8000ab4 <__aeabi_fdiv+0x108>
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	f47f af7d 	bne.w	80009a2 <__aeabi_fmul+0x15e>
 8000aa8:	ea93 0f0c 	teq	r3, ip
 8000aac:	f47f af70 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	e776      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ab4:	ea93 0f0c 	teq	r3, ip
 8000ab8:	d104      	bne.n	8000ac4 <__aeabi_fdiv+0x118>
 8000aba:	024b      	lsls	r3, r1, #9
 8000abc:	f43f af4c 	beq.w	8000958 <__aeabi_fmul+0x114>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e76e      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ac4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ac8:	bf18      	it	ne
 8000aca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ace:	d1ca      	bne.n	8000a66 <__aeabi_fdiv+0xba>
 8000ad0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ad4:	f47f af5c 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ad8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000adc:	f47f af3c 	bne.w	8000958 <__aeabi_fmul+0x114>
 8000ae0:	e75f      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ae2:	bf00      	nop

08000ae4 <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2102      	movs	r1, #2
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <ToggleLDAC+0x1c>)
 8000aee:	f002 fdf0 	bl	80036d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2102      	movs	r1, #2
 8000af6:	4802      	ldr	r0, [pc, #8]	; (8000b00 <ToggleLDAC+0x1c>)
 8000af8:	f002 fdeb 	bl	80036d2 <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010800 	.word	0x40010800

08000b04 <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2110      	movs	r1, #16
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <SendSPI+0x34>)
 8000b16:	f002 fddc 	bl	80036d2 <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000b1a:	1cb9      	adds	r1, r7, #2
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2201      	movs	r2, #1
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f004 ff9d 	bl	8005a60 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <SendSPI+0x34>)
 8000b2c:	f002 fdd1 	bl	80036d2 <HAL_GPIO_WritePin>

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010800 	.word	0x40010800

08000b3c <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b4e:	d302      	bcc.n	8000b56 <DAC_AD5322_Ch1+0x1a>
 8000b50:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b54:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000b56:	2300      	movs	r3, #0
 8000b58:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000b5e:	2300      	movs	r3, #0
 8000b60:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000b62:	2300      	movs	r3, #0
 8000b64:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000b66:	8afb      	ldrh	r3, [r7, #22]
 8000b68:	03db      	lsls	r3, r3, #15
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	8abb      	ldrh	r3, [r7, #20]
 8000b6e:	039b      	lsls	r3, r3, #14
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	8a7b      	ldrh	r3, [r7, #18]
 8000b78:	035b      	lsls	r3, r3, #13
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	8a3b      	ldrh	r3, [r7, #16]
 8000b82:	031b      	lsls	r3, r3, #12
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000b94:	f023 030f 	bic.w	r3, r3, #15
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa8 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000bb4:	89bb      	ldrh	r3, [r7, #12]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffa3 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000bbe:	f7ff ff91 	bl	8000ae4 <ToggleLDAC>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bdc:	d302      	bcc.n	8000be4 <DAC_AD5322_Ch2+0x1a>
 8000bde:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000be2:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000be4:	2301      	movs	r3, #1
 8000be6:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000be8:	2301      	movs	r3, #1
 8000bea:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000bec:	2300      	movs	r3, #0
 8000bee:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	03db      	lsls	r3, r3, #15
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	8abb      	ldrh	r3, [r7, #20]
 8000bfc:	039b      	lsls	r3, r3, #14
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	8a7b      	ldrh	r3, [r7, #18]
 8000c06:	035b      	lsls	r3, r3, #13
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	8a3b      	ldrh	r3, [r7, #16]
 8000c10:	031b      	lsls	r3, r3, #12
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c22:	f023 030f 	bic.w	r3, r3, #15
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff61 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000c42:	89bb      	ldrh	r3, [r7, #12]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff5c 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000c4c:	f7ff ff4a 	bl	8000ae4 <ToggleLDAC>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c6e:	d302      	bcc.n	8000c76 <DAC_AD5322_Ch1Ch2+0x1e>
 8000c70:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c74:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000c76:	883b      	ldrh	r3, [r7, #0]
 8000c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c7c:	d302      	bcc.n	8000c84 <DAC_AD5322_Ch1Ch2+0x2c>
 8000c7e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c82:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000c84:	2300      	movs	r3, #0
 8000c86:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000c88:	2301      	movs	r3, #1
 8000c8a:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000c90:	2300      	movs	r3, #0
 8000c92:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000c94:	8afb      	ldrh	r3, [r7, #22]
 8000c96:	03db      	lsls	r3, r3, #15
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	8abb      	ldrh	r3, [r7, #20]
 8000c9c:	039b      	lsls	r3, r3, #14
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	8a7b      	ldrh	r3, [r7, #18]
 8000ca6:	035b      	lsls	r3, r3, #13
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	8a3b      	ldrh	r3, [r7, #16]
 8000cb0:	031b      	lsls	r3, r3, #12
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cbe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000cc2:	f023 030f 	bic.w	r3, r3, #15
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000cd8:	89bb      	ldrh	r3, [r7, #12]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff11 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000ce2:	89bb      	ldrh	r3, [r7, #12]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff0c 	bl	8000b04 <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000cec:	2301      	movs	r3, #1
 8000cee:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000cfc:	8afb      	ldrh	r3, [r7, #22]
 8000cfe:	03db      	lsls	r3, r3, #15
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	8abb      	ldrh	r3, [r7, #20]
 8000d04:	039b      	lsls	r3, r3, #14
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	8a7b      	ldrh	r3, [r7, #18]
 8000d0e:	035b      	lsls	r3, r3, #13
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	8a3b      	ldrh	r3, [r7, #16]
 8000d18:	031b      	lsls	r3, r3, #12
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000d40:	89bb      	ldrh	r3, [r7, #12]
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fedd 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000d4a:	89bb      	ldrh	r3, [r7, #12]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fed8 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000d54:	f7ff fec6 	bl	8000ae4 <ToggleLDAC>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <volt2dgt>:
// floor()
// Пример: 
// Следующий фрагмент кода выводит на экран «10»:
// printf("%f", floor(10.9));

uint16_t volt2dgt(Table_t *calibTable, int16_t volt){
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]

// TODO: Нужно ли учитывать Ктр? volt = volt*Ktr 
float count = (abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE;
 8000d6c:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <volt2dgt+0x10c>)
 8000d6e:	60fb      	str	r3, [r7, #12]
uint16_t y = (floor((count*abs(MIN_VOLT_MODE_12))/(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/abs(MIN_VOLT_MODE_12)*volt+(count*abs(MIN_VOLT_MODE_12))/(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 8000d70:	493f      	ldr	r1, [pc, #252]	; (8000e70 <volt2dgt+0x110>)
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f7ff fd66 	bl	8000844 <__aeabi_fmul>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	493e      	ldr	r1, [pc, #248]	; (8000e74 <volt2dgt+0x114>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe15 	bl	80009ac <__aeabi_fdiv>
 8000d82:	4603      	mov	r3, r0
 8000d84:	493a      	ldr	r1, [pc, #232]	; (8000e70 <volt2dgt+0x110>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fe10 	bl	80009ac <__aeabi_fdiv>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461c      	mov	r4, r3
 8000d90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fd01 	bl	800079c <__aeabi_i2f>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f7ff fd50 	bl	8000844 <__aeabi_fmul>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461c      	mov	r4, r3
 8000da8:	4931      	ldr	r1, [pc, #196]	; (8000e70 <volt2dgt+0x110>)
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f7ff fd4a 	bl	8000844 <__aeabi_fmul>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4930      	ldr	r1, [pc, #192]	; (8000e74 <volt2dgt+0x114>)
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fdf9 	bl	80009ac <__aeabi_fdiv>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	f7ff fc38 	bl	8000634 <__addsf3>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fb2e 	bl	8000428 <__aeabi_f2d>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f00b f9a8 	bl	800c128 <floor>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4610      	mov	r0, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	f7ff fc02 	bl	80005e8 <__aeabi_d2uiz>
 8000de4:	4603      	mov	r3, r0
 8000de6:	817b      	strh	r3, [r7, #10]
uint16_t CodeX = (((calibTable->dacValA_m12[y+1+1]-calibTable->dacValA_m12[y])/(((y+1+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12)-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))))*(volt-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))+calibTable->dacValA_m12[y+1];
 8000de8:	897b      	ldrh	r3, [r7, #10]
 8000dea:	3302      	adds	r3, #2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	3304      	adds	r3, #4
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	889b      	ldrh	r3, [r3, #4]
 8000df6:	4619      	mov	r1, r3
 8000df8:	897b      	ldrh	r3, [r7, #10]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	889b      	ldrh	r3, [r3, #4]
 8000e04:	1aca      	subs	r2, r1, r3
 8000e06:	897b      	ldrh	r3, [r7, #10]
 8000e08:	3302      	adds	r3, #2
 8000e0a:	21c8      	movs	r1, #200	; 0xc8
 8000e0c:	fb01 f303 	mul.w	r3, r1, r3
 8000e10:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e14:	3b08      	subs	r3, #8
 8000e16:	8979      	ldrh	r1, [r7, #10]
 8000e18:	3101      	adds	r1, #1
 8000e1a:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000e1e:	fb00 f101 	mul.w	r1, r0, r1
 8000e22:	440b      	add	r3, r1
 8000e24:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000e34:	897b      	ldrh	r3, [r7, #10]
 8000e36:	3301      	adds	r3, #1
 8000e38:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000e3c:	fb00 f303 	mul.w	r3, r0, r3
 8000e40:	440b      	add	r3, r1
 8000e42:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e46:	3b08      	subs	r3, #8
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	fb03 f302 	mul.w	r3, r3, r2
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	897b      	ldrh	r3, [r7, #10]
 8000e52:	3301      	adds	r3, #1
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	3304      	adds	r3, #4
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	440b      	add	r3, r1
 8000e5c:	889b      	ldrh	r3, [r3, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	813b      	strh	r3, [r7, #8]
	return CodeX;
 8000e62:	893b      	ldrh	r3, [r7, #8]





}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	42aa0000 	.word	0x42aa0000
 8000e70:	459c4000 	.word	0x459c4000
 8000e74:	4684d000 	.word	0x4684d000

08000e78 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e84:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d013      	beq.n	8000eb8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e94:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e98:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d00b      	beq.n	8000eb8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ea0:	e000      	b.n	8000ea4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ea2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ea4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f9      	beq.n	8000ea2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000eae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000eb8:	687b      	ldr	r3, [r7, #4]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <DWT_Init+0x24>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <DWT_Init+0x24>)
 8000ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ed2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <DWT_Init+0x28>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <DWT_Init+0x28>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	e000edf0 	.word	0xe000edf0
 8000eec:	e0001000 	.word	0xe0001000

08000ef0 <_write>:
static void MX_TIM4_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e009      	b.n	8000f16 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	60ba      	str	r2, [r7, #8]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ffb4 	bl	8000e78 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3301      	adds	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	dbf1      	blt.n	8000f02 <_write+0x12>
	}
	return len;
 8000f1e:	687b      	ldr	r3, [r7, #4]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <SetDacA>:
//	DAC_AD5322_Ch1Ch2(&hspi1,VDAC_A,VDAC_B);
//}
//--------------------------------------------------------------------------
union NVRAM DevNVRAM;

void SetDacA(int16_t da) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
	VDAC_A = volt2dgt(&(DevNVRAM.calibration_table), da);
 8000f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4808      	ldr	r0, [pc, #32]	; (8000f5c <SetDacA+0x34>)
 8000f3a:	f7ff ff11 	bl	8000d60 <volt2dgt>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <SetDacA+0x38>)
 8000f44:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <SetDacA+0x38>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <SetDacA+0x3c>)
 8000f4e:	f7ff fdf5 	bl	8000b3c <DAC_AD5322_Ch1>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200004b4 	.word	0x200004b4
 8000f60:	2000024c 	.word	0x2000024c
 8000f64:	2000097c 	.word	0x2000097c

08000f68 <SetDacB>:
void SetDacB(int16_t db) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table), db);
 8000f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f76:	4619      	mov	r1, r3
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <SetDacB+0x34>)
 8000f7a:	f7ff fef1 	bl	8000d60 <volt2dgt>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <SetDacB+0x38>)
 8000f84:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <SetDacB+0x38>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <SetDacB+0x3c>)
 8000f8e:	f7ff fe1c 	bl	8000bca <DAC_AD5322_Ch2>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200004b4 	.word	0x200004b4
 8000fa0:	2000024e 	.word	0x2000024e
 8000fa4:	2000097c 	.word	0x2000097c

08000fa8 <SetAllDAC>:
void SetAllDAC() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

	DAC_AD5322_Ch1Ch2(&hspi1,VDAC_A,VDAC_B);
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SetAllDAC+0x18>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <SetAllDAC+0x1c>)
 8000fb2:	8812      	ldrh	r2, [r2, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <SetAllDAC+0x20>)
 8000fb8:	f7ff fe4e 	bl	8000c58 <DAC_AD5322_Ch1Ch2>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000024c 	.word	0x2000024c
 8000fc4:	2000024e 	.word	0x2000024e
 8000fc8:	2000097c 	.word	0x2000097c

08000fcc <GetDacA>:
uint16_t GetDacA() {
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
	return VDAC_A;
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <GetDacA+0x10>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	2000024c 	.word	0x2000024c

08000fe0 <GetDacB>:
uint16_t GetDacB() {
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
	return VDAC_B;
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <GetDacB+0x10>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	2000024e 	.word	0x2000024e

08000ff4 <GetBtnRunState>:
uint32_t time_key3 = 0;

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState() {
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00) {
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <GetBtnRunState+0x7c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10b      	bne.n	8001018 <GetBtnRunState+0x24>
 8001000:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <GetBtnRunState+0x80>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d107      	bne.n	8001018 <GetBtnRunState+0x24>
		btn1_long_rd	 = 0;
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <GetBtnRunState+0x80>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
		btn1_short_rd	 = 0;
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <GetBtnRunState+0x7c>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001014:	2300      	movs	r3, #0
 8001016:	e026      	b.n	8001066 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00) {
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <GetBtnRunState+0x7c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d10b      	bne.n	8001038 <GetBtnRunState+0x44>
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <GetBtnRunState+0x80>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d107      	bne.n	8001038 <GetBtnRunState+0x44>
		btn1_long_rd 	= 0;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <GetBtnRunState+0x80>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
		btn1_short_rd 	= 0;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <GetBtnRunState+0x7c>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8001034:	2301      	movs	r3, #1
 8001036:	e016      	b.n	8001066 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01) {
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <GetBtnRunState+0x7c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10b      	bne.n	8001058 <GetBtnRunState+0x64>
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <GetBtnRunState+0x80>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d107      	bne.n	8001058 <GetBtnRunState+0x64>
		btn1_long_rd 	= 0;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <GetBtnRunState+0x80>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
		btn1_short_rd 	= 0;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <GetBtnRunState+0x7c>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001054:	2302      	movs	r3, #2
 8001056:	e006      	b.n	8001066 <GetBtnRunState+0x72>
	}

	btn1_long_rd 		= 0;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <GetBtnRunState+0x80>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
	btn1_short_rd	 	= 0;
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <GetBtnRunState+0x7c>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]

//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000259 	.word	0x20000259
 8001074:	20000258 	.word	0x20000258

08001078 <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState() {
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00) {
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <GetBtnUpState+0x7c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10b      	bne.n	800109c <GetBtnUpState+0x24>
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <GetBtnUpState+0x80>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d107      	bne.n	800109c <GetBtnUpState+0x24>
		btn2_long_rd	 = 0;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <GetBtnUpState+0x80>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
		btn2_short_rd	 = 0;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <GetBtnUpState+0x7c>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001098:	2300      	movs	r3, #0
 800109a:	e026      	b.n	80010ea <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00) {
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <GetBtnUpState+0x7c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10b      	bne.n	80010bc <GetBtnUpState+0x44>
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <GetBtnUpState+0x80>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d107      	bne.n	80010bc <GetBtnUpState+0x44>
		btn2_long_rd 	= 0;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <GetBtnUpState+0x80>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
		btn2_short_rd 	= 0;
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <GetBtnUpState+0x7c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e016      	b.n	80010ea <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01) {
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <GetBtnUpState+0x7c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10b      	bne.n	80010dc <GetBtnUpState+0x64>
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <GetBtnUpState+0x80>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d107      	bne.n	80010dc <GetBtnUpState+0x64>
		btn2_long_rd 	= 0;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <GetBtnUpState+0x80>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
		btn2_short_rd 	= 0;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <GetBtnUpState+0x7c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80010d8:	2302      	movs	r3, #2
 80010da:	e006      	b.n	80010ea <GetBtnUpState+0x72>
	}

	btn2_long_rd 		= 0;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <GetBtnUpState+0x80>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
	btn2_short_rd	 	= 0;
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <GetBtnUpState+0x7c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000261 	.word	0x20000261
 80010f8:	20000260 	.word	0x20000260

080010fc <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState() {
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00) {
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <GetBtnDownState+0x7c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d10b      	bne.n	8001120 <GetBtnDownState+0x24>
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <GetBtnDownState+0x80>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d107      	bne.n	8001120 <GetBtnDownState+0x24>
		btn3_long_rd	 = 0;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <GetBtnDownState+0x80>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
		btn3_short_rd	 = 0;
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <GetBtnDownState+0x7c>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
		return 0x00;
 800111c:	2300      	movs	r3, #0
 800111e:	e026      	b.n	800116e <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00) {
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <GetBtnDownState+0x7c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d10b      	bne.n	8001140 <GetBtnDownState+0x44>
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <GetBtnDownState+0x80>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d107      	bne.n	8001140 <GetBtnDownState+0x44>
		btn3_long_rd 	= 0;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <GetBtnDownState+0x80>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
		btn3_short_rd 	= 0;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <GetBtnDownState+0x7c>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
		return 0x01;
 800113c:	2301      	movs	r3, #1
 800113e:	e016      	b.n	800116e <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01) {
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <GetBtnDownState+0x7c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10b      	bne.n	8001160 <GetBtnDownState+0x64>
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <GetBtnDownState+0x80>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d107      	bne.n	8001160 <GetBtnDownState+0x64>
		btn3_long_rd 	= 0;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <GetBtnDownState+0x80>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
		btn3_short_rd 	= 0;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <GetBtnDownState+0x7c>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
		return 0x02;
 800115c:	2302      	movs	r3, #2
 800115e:	e006      	b.n	800116e <GetBtnDownState+0x72>
	}

	btn3_long_rd 		= 0;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <GetBtnDownState+0x80>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
	btn3_short_rd	 	= 0;
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <GetBtnDownState+0x7c>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000269 	.word	0x20000269
 800117c:	20000268 	.word	0x20000268

08001180 <EnableTIM3_PB4>:
volatile uint16_t g_vTIM3_PB4 = 0;
volatile uint16_t g_vTIM4_PB6 = 0;

char trans2_str[64] = {0,};
//--------------------------------------------------------------------------
void EnableTIM3_PB4(){
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
	 timWork = 1 ;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <EnableTIM3_PB4+0x14>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000026a 	.word	0x2000026a

08001198 <GetTIM3>:
uint16_t GetTIM3(){
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <GetTIM3+0x14>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000026c 	.word	0x2000026c

080011b0 <resValTIM3_PB4>:
void resValTIM3_PB4(){
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <resValTIM3_PB4+0x14>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	801a      	strh	r2, [r3, #0]
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	2000026c 	.word	0x2000026c

080011c8 <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6(){
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
	 timWork = 0 ;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <EnableTIM4_PB6+0x14>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	2000026a 	.word	0x2000026a

080011e0 <GetTIM4>:
uint16_t GetTIM4(){
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <GetTIM4+0x14>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	b29b      	uxth	r3, r3
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	2000026e 	.word	0x2000026e

080011f8 <resValTIM4_PB6>:
void resValTIM4_PB6(){
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <resValTIM4_PB6+0x14>)
 80011fe:	2200      	movs	r2, #0
 8001200:	801a      	strh	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	2000026e 	.word	0x2000026e

08001210 <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork) {
 8001218:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d027      	beq.n	8001272 <HAL_TIM_IC_CaptureCallback+0x62>
		if (htim->Instance == TIM3) {
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a29      	ldr	r2, [pc, #164]	; (80012cc <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d149      	bne.n	80012c0 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7f1b      	ldrb	r3, [r3, #28]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d145      	bne.n	80012c0 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8001234:	2100      	movs	r1, #0
 8001236:	4826      	ldr	r0, [pc, #152]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001238:	f005 f8e6 	bl	8006408 <HAL_TIM_ReadCapturedValue>
 800123c:	4603      	mov	r3, r0
 800123e:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 8001240:	2104      	movs	r1, #4
 8001242:	4823      	ldr	r0, [pc, #140]	; (80012d0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001244:	f005 f8e0 	bl	8006408 <HAL_TIM_ReadCapturedValue>
 8001248:	4603      	mov	r3, r0
 800124a:	81fb      	strh	r3, [r7, #14]
						TIM_CHANNEL_2);

				TIM3->CNT = 0;
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_TIM_IC_CaptureCallback+0xbc>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t) periodTIM3
						- (int16_t) pulseWidthTIM3;
 8001252:	8a3a      	ldrh	r2, [r7, #16]
 8001254:	89fb      	ldrh	r3, [r7, #14]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	b29b      	uxth	r3, r3
				int16_t deltaTIM3 = (int16_t) periodTIM3
 800125a:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 800125c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	bfb8      	it	lt
 8001264:	425b      	neglt	r3, r3
 8001266:	b29b      	uxth	r3, r3
 8001268:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 800126a:	89ba      	ldrh	r2, [r7, #12]
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800126e:	801a      	strh	r2, [r3, #0]

			}
		}
	}

}
 8001270:	e026      	b.n	80012c0 <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4) {
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d121      	bne.n	80012c0 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7f1b      	ldrb	r3, [r3, #28]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d11d      	bne.n	80012c0 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001284:	2100      	movs	r1, #0
 8001286:	4815      	ldr	r0, [pc, #84]	; (80012dc <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001288:	f005 f8be 	bl	8006408 <HAL_TIM_ReadCapturedValue>
 800128c:	4603      	mov	r3, r0
 800128e:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 8001290:	2104      	movs	r1, #4
 8001292:	4812      	ldr	r0, [pc, #72]	; (80012dc <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001294:	f005 f8b8 	bl	8006408 <HAL_TIM_ReadCapturedValue>
 8001298:	4603      	mov	r3, r0
 800129a:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
						- (int16_t) pulseWidthTIM4;
 80012a2:	8afa      	ldrh	r2, [r7, #22]
 80012a4:	8abb      	ldrh	r3, [r7, #20]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	b29b      	uxth	r3, r3
				int16_t deltaTIM4 = (int16_t) periodTIM4
 80012aa:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 80012ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bfb8      	it	lt
 80012b4:	425b      	neglt	r3, r3
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 80012ba:	8a7a      	ldrh	r2, [r7, #18]
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80012be:	801a      	strh	r2, [r3, #0]
}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000026a 	.word	0x2000026a
 80012cc:	40000400 	.word	0x40000400
 80012d0:	20000904 	.word	0x20000904
 80012d4:	2000026c 	.word	0x2000026c
 80012d8:	40000800 	.word	0x40000800
 80012dc:	200008b4 	.word	0x200008b4
 80012e0:	2000026e 	.word	0x2000026e

080012e4 <GetADC>:
/* USER CODE BEGIN 0 */
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC(){
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	return g_VADC;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <GetADC+0x14>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000270 	.word	0x20000270

080012fc <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) 				//check if the interrupt comes from ACD1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_ADC_ConvCpltCallback+0x28>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d106      	bne.n	800131c <HAL_ADC_ConvCpltCallback+0x20>
    {
    	g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001310:	f001 fa18 	bl	8002744 <HAL_ADC_GetValue>
 8001314:	4603      	mov	r3, r0
 8001316:	b29a      	uxth	r2, r3
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <HAL_ADC_ConvCpltCallback+0x30>)
 800131a:	801a      	strh	r2, [r3, #0]
    }
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40012400 	.word	0x40012400
 8001328:	2000094c 	.word	0x2000094c
 800132c:	20000270 	.word	0x20000270

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001336:	f000 fff1 	bl	800231c <HAL_Init>

  /* USER CODE BEGIN Init */
//--------------------------------------------------------------------------
#if DWT_INIT
	DWT_Init();
 800133a:	f7ff fdc3 	bl	8000ec4 <DWT_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800133e:	f000 fb11 	bl	8001964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001342:	f000 fcbb 	bl	8001cbc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001346:	f000 fbbd 	bl	8001ac4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800134a:	f008 feed 	bl	800a128 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800134e:	f000 fb67 	bl	8001a20 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001352:	f000 fbef 	bl	8001b34 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001356:	f000 fc4f 	bl	8001bf8 <MX_TIM4_Init>
  MX_CRC_Init();
 800135a:	f000 fb9f 	bl	8001a9c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  //**************************************************************************
#if  TEST_UID
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 800135e:	4b9f      	ldr	r3, [pc, #636]	; (80015dc <main+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	4b9e      	ldr	r3, [pc, #632]	; (80015e0 <main+0x2b0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	4b9d      	ldr	r3, [pc, #628]	; (80015e4 <main+0x2b4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a9c      	ldr	r2, [pc, #624]	; (80015e8 <main+0x2b8>)
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	9201      	str	r2, [sp, #4]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	499a      	ldr	r1, [pc, #616]	; (80015ec <main+0x2bc>)
 8001384:	489a      	ldr	r0, [pc, #616]	; (80015f0 <main+0x2c0>)
 8001386:	f009 fd81 	bl	800ae8c <siprintf>
	printf((uint8_t*)buffer);
 800138a:	4899      	ldr	r0, [pc, #612]	; (80015f0 <main+0x2c0>)
 800138c:	f009 fd66 	bl	800ae5c <iprintf>
#endif	/* TEST_UID */

	//**************************************************************************
#if	TEST_TIM_CAPTURE
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001390:	2100      	movs	r1, #0
 8001392:	4898      	ldr	r0, [pc, #608]	; (80015f4 <main+0x2c4>)
 8001394:	f004 fd96 	bl	8005ec4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001398:	2104      	movs	r1, #4
 800139a:	4896      	ldr	r0, [pc, #600]	; (80015f4 <main+0x2c4>)
 800139c:	f004 fd92 	bl	8005ec4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80013a0:	2100      	movs	r1, #0
 80013a2:	4895      	ldr	r0, [pc, #596]	; (80015f8 <main+0x2c8>)
 80013a4:	f004 fd8e 	bl	8005ec4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80013a8:	2104      	movs	r1, #4
 80013aa:	4893      	ldr	r0, [pc, #588]	; (80015f8 <main+0x2c8>)
 80013ac:	f004 fd8a 	bl	8005ec4 <HAL_TIM_IC_Start_IT>
#endif	/* TEST_TIM_CAPTURE */
//--------------------------------------------------------------------------
#if	TEST_DAC
	SetAllDAC();
 80013b0:	f7ff fdfa 	bl	8000fa8 <SetAllDAC>
#endif	/* TEST_DAC */
	//**************************************************************************
#if	TEST_ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 80013b4:	4891      	ldr	r0, [pc, #580]	; (80015fc <main+0x2cc>)
 80013b6:	f001 fc21 	bl	8002bfc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 80013ba:	4890      	ldr	r0, [pc, #576]	; (80015fc <main+0x2cc>)
 80013bc:	f001 f90c 	bl	80025d8 <HAL_ADC_Start_IT>
//	union NVRAM DevNVRAM;
////--------------------------------------------------------------------------

	static FLASH_EraseInitTypeDef EraseInitStruct; // структура для очистки флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 80013c0:	4b8f      	ldr	r3, [pc, #572]	; (8001600 <main+0x2d0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = FLASH_TABLE_START_ADDR; // адрес 127-ой страницы
 80013c6:	4b8e      	ldr	r3, [pc, #568]	; (8001600 <main+0x2d0>)
 80013c8:	4a8e      	ldr	r2, [pc, #568]	; (8001604 <main+0x2d4>)
 80013ca:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 0x01;               // кол-во страниц для стирания
 80013cc:	4b8c      	ldr	r3, [pc, #560]	; (8001600 <main+0x2d0>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	60da      	str	r2, [r3, #12]
	uint32_t l_Address;
	uint32_t l_Error;
	uint32_t l_Index;
//--------------------------------------------------------------------------
// Чтение DevNVRAM
	l_Address = FLASH_TABLE_START_ADDR;
 80013d2:	4b8c      	ldr	r3, [pc, #560]	; (8001604 <main+0x2d4>)
 80013d4:	617b      	str	r3, [r7, #20]
	l_Error = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
	l_Index = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80013de:	e00b      	b.n	80013f8 <main+0xc8>
		DevNVRAM.data32[l_Index] = *(__IO uint32_t*) l_Address;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4988      	ldr	r1, [pc, #544]	; (8001608 <main+0x2d8>)
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		l_Index = l_Index + 1;
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	3301      	adds	r3, #1
 80013f0:	613b      	str	r3, [r7, #16]
		l_Address = l_Address + 4;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3304      	adds	r3, #4
 80013f6:	617b      	str	r3, [r7, #20]
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	4a84      	ldr	r2, [pc, #528]	; (800160c <main+0x2dc>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d9ef      	bls.n	80013e0 <main+0xb0>
	}

//--------------------------------------------------------------------------
// если после чтения майджик кей не найден, то это первый запуск

	if (DevNVRAM.calibration_table.MagicNum != MAGIC_KEY_DEFINE) {
 8001400:	4b81      	ldr	r3, [pc, #516]	; (8001608 <main+0x2d8>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4a82      	ldr	r2, [pc, #520]	; (8001610 <main+0x2e0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	f000 80af 	beq.w	800156a <main+0x23a>
		// Подготовка
		// Заносим типовые значения
		memset(DevNVRAM.data32, 0, sizeof(DevNVRAM.data32));
 800140c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001410:	2100      	movs	r1, #0
 8001412:	487d      	ldr	r0, [pc, #500]	; (8001608 <main+0x2d8>)
 8001414:	f009 fd1a 	bl	800ae4c <memset>

		// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!

		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e00b      	b.n	8001436 <main+0x106>
			DevNVRAM.calibration_table.dacValA_m12[i] = i;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	b291      	uxth	r1, r2
 8001424:	4a78      	ldr	r2, [pc, #480]	; (8001608 <main+0x2d8>)
 8001426:	3304      	adds	r3, #4
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	460a      	mov	r2, r1
 800142e:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3301      	adds	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	2b57      	cmp	r3, #87	; 0x57
 800143a:	d9f0      	bls.n	800141e <main+0xee>
		}
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 800143c:	2300      	movs	r3, #0
 800143e:	73bb      	strb	r3, [r7, #14]
 8001440:	e00b      	b.n	800145a <main+0x12a>
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 8001442:	7bbb      	ldrb	r3, [r7, #14]
 8001444:	7bba      	ldrb	r2, [r7, #14]
 8001446:	b291      	uxth	r1, r2
 8001448:	4a6f      	ldr	r2, [pc, #444]	; (8001608 <main+0x2d8>)
 800144a:	335c      	adds	r3, #92	; 0x5c
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	460a      	mov	r2, r1
 8001452:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8001454:	7bbb      	ldrb	r3, [r7, #14]
 8001456:	3301      	adds	r3, #1
 8001458:	73bb      	strb	r3, [r7, #14]
 800145a:	7bbb      	ldrb	r3, [r7, #14]
 800145c:	2b57      	cmp	r3, #87	; 0x57
 800145e:	d9f0      	bls.n	8001442 <main+0x112>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 8001460:	2300      	movs	r3, #0
 8001462:	737b      	strb	r3, [r7, #13]
 8001464:	e00b      	b.n	800147e <main+0x14e>
			DevNVRAM.calibration_table.dacValA_m27[i] = i;
 8001466:	7b7b      	ldrb	r3, [r7, #13]
 8001468:	7b7a      	ldrb	r2, [r7, #13]
 800146a:	b291      	uxth	r1, r2
 800146c:	4a66      	ldr	r2, [pc, #408]	; (8001608 <main+0x2d8>)
 800146e:	33b4      	adds	r3, #180	; 0xb4
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	460a      	mov	r2, r1
 8001476:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 8001478:	7b7b      	ldrb	r3, [r7, #13]
 800147a:	3301      	adds	r3, #1
 800147c:	737b      	strb	r3, [r7, #13]
 800147e:	7b7b      	ldrb	r3, [r7, #13]
 8001480:	2ba2      	cmp	r3, #162	; 0xa2
 8001482:	d9f0      	bls.n	8001466 <main+0x136>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 8001484:	2300      	movs	r3, #0
 8001486:	733b      	strb	r3, [r7, #12]
 8001488:	e00b      	b.n	80014a2 <main+0x172>
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 800148a:	7b3b      	ldrb	r3, [r7, #12]
 800148c:	7b3a      	ldrb	r2, [r7, #12]
 800148e:	b291      	uxth	r1, r2
 8001490:	4a5d      	ldr	r2, [pc, #372]	; (8001608 <main+0x2d8>)
 8001492:	335c      	adds	r3, #92	; 0x5c
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	460a      	mov	r2, r1
 800149a:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 800149c:	7b3b      	ldrb	r3, [r7, #12]
 800149e:	3301      	adds	r3, #1
 80014a0:	733b      	strb	r3, [r7, #12]
 80014a2:	7b3b      	ldrb	r3, [r7, #12]
 80014a4:	2ba2      	cmp	r3, #162	; 0xa2
 80014a6:	d9f0      	bls.n	800148a <main+0x15a>
		}
		DevNVRAM.calibration_table.Hardwire = 0x06;
 80014a8:	4b57      	ldr	r3, [pc, #348]	; (8001608 <main+0x2d8>)
 80014aa:	2206      	movs	r2, #6
 80014ac:	801a      	strh	r2, [r3, #0]
		DevNVRAM.calibration_table.Firmware = 0x05;
 80014ae:	4b56      	ldr	r3, [pc, #344]	; (8001608 <main+0x2d8>)
 80014b0:	2205      	movs	r2, #5
 80014b2:	805a      	strh	r2, [r3, #2]
		DevNVRAM.calibration_table.SN 		= 0x1121001; //11 неделя + год + порядковый номер изготовления
 80014b4:	4b54      	ldr	r3, [pc, #336]	; (8001608 <main+0x2d8>)
 80014b6:	4a57      	ldr	r2, [pc, #348]	; (8001614 <main+0x2e4>)
 80014b8:	605a      	str	r2, [r3, #4]
		DevNVRAM.calibration_table.MagicNum = MAGIC_KEY_DEFINE;
 80014ba:	4b53      	ldr	r3, [pc, #332]	; (8001608 <main+0x2d8>)
 80014bc:	4a54      	ldr	r2, [pc, #336]	; (8001610 <main+0x2e0>)
 80014be:	609a      	str	r2, [r3, #8]

		DevNVRAM.sector.NWrite = 0;
 80014c0:	4b51      	ldr	r3, [pc, #324]	; (8001608 <main+0x2d8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
		DevNVRAM.sector.CheckSum = 0;//TODO: по какой то причине в этом проекте не работает CRC!!! у
 80014c8:	4b4f      	ldr	r3, [pc, #316]	; (8001608 <main+0x2d8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


//--------------------------------------------------------------------------
		//если после чтения майджик кей не найден, то это первый запуск записываем дефолтную таблицу
		l_Address = FLASH_TABLE_START_ADDR;
 80014d0:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <main+0x2d4>)
 80014d2:	617b      	str	r3, [r7, #20]
		l_Error = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	603b      	str	r3, [r7, #0]
		l_Index = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]

		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80014dc:	e010      	b.n	8001500 <main+0x1d0>
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t*) l_Address) {
 80014de:	4a4a      	ldr	r2, [pc, #296]	; (8001608 <main+0x2d8>)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d002      	beq.n	80014f4 <main+0x1c4>
				l_Error++;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	603b      	str	r3, [r7, #0]
			}
			l_Index = l_Index + 1;
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	3301      	adds	r3, #1
 80014f8:	613b      	str	r3, [r7, #16]
			l_Address = l_Address + 4;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3304      	adds	r3, #4
 80014fe:	617b      	str	r3, [r7, #20]
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	4a42      	ldr	r2, [pc, #264]	; (800160c <main+0x2dc>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d9ea      	bls.n	80014de <main+0x1ae>
		}

		if (l_Error > 0) { // конфигурация изменилась сохраняем
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d02d      	beq.n	800156a <main+0x23a>
			// Готовим к записи в память
			HAL_FLASH_Unlock();
 800150e:	f001 fdb5 	bl	800307c <HAL_FLASH_Unlock>
			// Очищаем страницу памяти
			HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8001512:	463b      	mov	r3, r7
 8001514:	4619      	mov	r1, r3
 8001516:	483a      	ldr	r0, [pc, #232]	; (8001600 <main+0x2d0>)
 8001518:	f001 fe98 	bl	800324c <HAL_FLASHEx_Erase>
			//Пишем данные в память
			l_Address = FLASH_TABLE_START_ADDR;
 800151c:	4b39      	ldr	r3, [pc, #228]	; (8001604 <main+0x2d4>)
 800151e:	617b      	str	r3, [r7, #20]
			l_Error = 0x00;
 8001520:	2300      	movs	r3, #0
 8001522:	603b      	str	r3, [r7, #0]
			l_Index = 0x00;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]

			while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001528:	e019      	b.n	800155e <main+0x22e>
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
						DevNVRAM.data32[l_Index]) != HAL_OK) {
 800152a:	4a37      	ldr	r2, [pc, #220]	; (8001608 <main+0x2d8>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8001532:	461a      	mov	r2, r3
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	6979      	ldr	r1, [r7, #20]
 800153a:	2002      	movs	r0, #2
 800153c:	f001 fd2e 	bl	8002f9c <HAL_FLASH_Program>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <main+0x21c>
					l_Error++;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	603b      	str	r3, [r7, #0]
				}

				l_Address = l_Address + 4;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3304      	adds	r3, #4
 8001550:	617b      	str	r3, [r7, #20]
				l_Index = l_Index + 1;
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	3301      	adds	r3, #1
 8001556:	613b      	str	r3, [r7, #16]
				HAL_Delay(10);
 8001558:	200a      	movs	r0, #10
 800155a:	f000 ff41 	bl	80023e0 <HAL_Delay>
			while (l_Address < FLASH_TABLE_STOP_ADDR) {
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	4a2a      	ldr	r2, [pc, #168]	; (800160c <main+0x2dc>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d9e1      	bls.n	800152a <main+0x1fa>
			}
			HAL_FLASH_Lock();
 8001566:	f001 fdaf 	bl	80030c8 <HAL_FLASH_Lock>
	// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!


// Циклически проверяем соотвествует ли информация в памяти массиву настроек?

	l_Address = FLASH_TABLE_START_ADDR;
 800156a:	4b26      	ldr	r3, [pc, #152]	; (8001604 <main+0x2d4>)
 800156c:	617b      	str	r3, [r7, #20]
	l_Error = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
	l_Index = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
	//Читаем и сравниваем
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001576:	e010      	b.n	800159a <main+0x26a>
		if (DevNVRAM.data32[l_Index] != *(__IO uint32_t*) l_Address) {
 8001578:	4a23      	ldr	r2, [pc, #140]	; (8001608 <main+0x2d8>)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d002      	beq.n	800158e <main+0x25e>
			l_Error++;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	603b      	str	r3, [r7, #0]
		}
		l_Index = l_Index + 1;
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	3301      	adds	r3, #1
 8001592:	613b      	str	r3, [r7, #16]
		l_Address = l_Address + 4;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3304      	adds	r3, #4
 8001598:	617b      	str	r3, [r7, #20]
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <main+0x2dc>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d9ea      	bls.n	8001578 <main+0x248>
	}

	if (l_Error > 0) { // конфигурация изменилась сохраняем
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d057      	beq.n	8001658 <main+0x328>
		// Готовим к записи в память
		HAL_FLASH_Unlock();
 80015a8:	f001 fd68 	bl	800307c <HAL_FLASH_Unlock>
		// Очищаем страницу памяти
		HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 80015ac:	463b      	mov	r3, r7
 80015ae:	4619      	mov	r1, r3
 80015b0:	4813      	ldr	r0, [pc, #76]	; (8001600 <main+0x2d0>)
 80015b2:	f001 fe4b 	bl	800324c <HAL_FLASHEx_Erase>
		//Пишем данные в память
		l_Address = FLASH_TABLE_START_ADDR;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <main+0x2d4>)
 80015b8:	617b      	str	r3, [r7, #20]
		l_Error = 0x00;
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]
		l_Index = 0x00;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]

		DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <main+0x2d8>)
 80015c4:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 80015c8:	3301      	adds	r3, #1
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <main+0x2d8>)
 80015cc:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		DevNVRAM.sector.CheckSum = 0;
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <main+0x2d8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80015d8:	e038      	b.n	800164c <main+0x31c>
 80015da:	bf00      	nop
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000004 	.word	0x20000004
 80015e4:	20000008 	.word	0x20000008
 80015e8:	2000000c 	.word	0x2000000c
 80015ec:	0800c240 	.word	0x0800c240
 80015f0:	2000020c 	.word	0x2000020c
 80015f4:	20000904 	.word	0x20000904
 80015f8:	200008b4 	.word	0x200008b4
 80015fc:	2000094c 	.word	0x2000094c
 8001600:	20000274 	.word	0x20000274
 8001604:	0801fc00 	.word	0x0801fc00
 8001608:	200004b4 	.word	0x200004b4
 800160c:	0801ffff 	.word	0x0801ffff
 8001610:	48151623 	.word	0x48151623
 8001614:	01121001 	.word	0x01121001
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
					DevNVRAM.data32[l_Index]) != HAL_OK) {
 8001618:	4aa0      	ldr	r2, [pc, #640]	; (800189c <main+0x56c>)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8001620:	461a      	mov	r2, r3
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	6979      	ldr	r1, [r7, #20]
 8001628:	2002      	movs	r0, #2
 800162a:	f001 fcb7 	bl	8002f9c <HAL_FLASH_Program>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <main+0x30a>
				l_Error++;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	603b      	str	r3, [r7, #0]
			}

			l_Address = l_Address + 4;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3304      	adds	r3, #4
 800163e:	617b      	str	r3, [r7, #20]
			l_Index = l_Index + 1;
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	3301      	adds	r3, #1
 8001644:	613b      	str	r3, [r7, #16]
			HAL_Delay(10);
 8001646:	200a      	movs	r0, #10
 8001648:	f000 feca 	bl	80023e0 <HAL_Delay>
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	4a94      	ldr	r2, [pc, #592]	; (80018a0 <main+0x570>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d9e1      	bls.n	8001618 <main+0x2e8>
		}
		HAL_FLASH_Lock();
 8001654:	f001 fd38 	bl	80030c8 <HAL_FLASH_Lock>
	}
	HAL_Delay(100);
 8001658:	2064      	movs	r0, #100	; 0x64
 800165a:	f000 fec1 	bl	80023e0 <HAL_Delay>
	while (1) {

//**************************************************************************
// Циклически проверяем соотвествует ли информация в памяти массиву настроек?

		l_Address = FLASH_TABLE_START_ADDR;
 800165e:	4b91      	ldr	r3, [pc, #580]	; (80018a4 <main+0x574>)
 8001660:	617b      	str	r3, [r7, #20]
		l_Error = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
		l_Index = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
		//Читаем и сравниваем
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 800166a:	e010      	b.n	800168e <main+0x35e>
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t*) l_Address) {
 800166c:	4a8b      	ldr	r2, [pc, #556]	; (800189c <main+0x56c>)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d002      	beq.n	8001682 <main+0x352>
				l_Error++;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	603b      	str	r3, [r7, #0]
			}
			l_Index = l_Index + 1;
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	3301      	adds	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
			l_Address = l_Address + 4;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3304      	adds	r3, #4
 800168c:	617b      	str	r3, [r7, #20]
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	4a83      	ldr	r2, [pc, #524]	; (80018a0 <main+0x570>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d9ea      	bls.n	800166c <main+0x33c>
		}

		if (l_Error > 0) { // конфигурация изменилась сохраняем
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d043      	beq.n	8001724 <main+0x3f4>
			printf("Ошибка чтения таблицы :%i", l_Error);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	4619      	mov	r1, r3
 80016a0:	4881      	ldr	r0, [pc, #516]	; (80018a8 <main+0x578>)
 80016a2:	f009 fbdb 	bl	800ae5c <iprintf>
			if (l_Error > 0) { // конфигурация изменилась сохраняем
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d038      	beq.n	800171e <main+0x3ee>
					// Готовим к записи в память
					HAL_FLASH_Unlock();
 80016ac:	f001 fce6 	bl	800307c <HAL_FLASH_Unlock>
					// Очищаем страницу памяти
					HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 80016b0:	463b      	mov	r3, r7
 80016b2:	4619      	mov	r1, r3
 80016b4:	487d      	ldr	r0, [pc, #500]	; (80018ac <main+0x57c>)
 80016b6:	f001 fdc9 	bl	800324c <HAL_FLASHEx_Erase>
					//Пишем данные в память
					l_Address = FLASH_TABLE_START_ADDR;
 80016ba:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <main+0x574>)
 80016bc:	617b      	str	r3, [r7, #20]
					l_Error = 0x00;
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
					l_Index = 0x00;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]

					DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 80016c6:	4b75      	ldr	r3, [pc, #468]	; (800189c <main+0x56c>)
 80016c8:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a73      	ldr	r2, [pc, #460]	; (800189c <main+0x56c>)
 80016d0:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
					DevNVRAM.sector.CheckSum = 0;
 80016d4:	4b71      	ldr	r3, [pc, #452]	; (800189c <main+0x56c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

					while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80016dc:	e019      	b.n	8001712 <main+0x3e2>
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
								DevNVRAM.data32[l_Index]) != HAL_OK) {
 80016de:	4a6f      	ldr	r2, [pc, #444]	; (800189c <main+0x56c>)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 80016e6:	461a      	mov	r2, r3
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	6979      	ldr	r1, [r7, #20]
 80016ee:	2002      	movs	r0, #2
 80016f0:	f001 fc54 	bl	8002f9c <HAL_FLASH_Program>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <main+0x3d0>
							l_Error++;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	603b      	str	r3, [r7, #0]
						}

						l_Address = l_Address + 4;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3304      	adds	r3, #4
 8001704:	617b      	str	r3, [r7, #20]
						l_Index = l_Index + 1;
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	3301      	adds	r3, #1
 800170a:	613b      	str	r3, [r7, #16]
						HAL_Delay(10);
 800170c:	200a      	movs	r0, #10
 800170e:	f000 fe67 	bl	80023e0 <HAL_Delay>
					while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	4a62      	ldr	r2, [pc, #392]	; (80018a0 <main+0x570>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d9e1      	bls.n	80016de <main+0x3ae>
					}
					HAL_FLASH_Lock();
 800171a:	f001 fcd5 	bl	80030c8 <HAL_FLASH_Lock>
				}
				HAL_Delay(100);
 800171e:	2064      	movs	r0, #100	; 0x64
 8001720:	f000 fe5e 	bl	80023e0 <HAL_Delay>
		}

//**************************************************************************
#if  TEST_READ_BTN

		uint32_t ms = HAL_GetTick();
 8001724:	f000 fe52 	bl	80023cc <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 800172a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172e:	4860      	ldr	r0, [pc, #384]	; (80018b0 <main+0x580>)
 8001730:	f001 ffb8 	bl	80036a4 <HAL_GPIO_ReadPin>
 8001734:	4603      	mov	r3, r0
 8001736:	71fb      	strb	r3, [r7, #7]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50) {
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d113      	bne.n	8001766 <main+0x436>
 800173e:	4b5d      	ldr	r3, [pc, #372]	; (80018b4 <main+0x584>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10f      	bne.n	8001766 <main+0x436>
 8001746:	4b5c      	ldr	r3, [pc, #368]	; (80018b8 <main+0x588>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b32      	cmp	r3, #50	; 0x32
 8001750:	d909      	bls.n	8001766 <main+0x436>
			short_state1 = 1;
 8001752:	4b58      	ldr	r3, [pc, #352]	; (80018b4 <main+0x584>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 8001758:	4b58      	ldr	r3, [pc, #352]	; (80018bc <main+0x58c>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 800175e:	4a56      	ldr	r2, [pc, #344]	; (80018b8 <main+0x588>)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e02e      	b.n	80017c4 <main+0x494>
		} else if (key1_state
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d111      	bne.n	8001790 <main+0x460>
				== 0&& !long_state1 && (ms - time_key1) > KEY_LONG_DELAY) {
 800176c:	4b53      	ldr	r3, [pc, #332]	; (80018bc <main+0x58c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10d      	bne.n	8001790 <main+0x460>
 8001774:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <main+0x588>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001780:	d906      	bls.n	8001790 <main+0x460>
			long_state1 = 1;
 8001782:	4b4e      	ldr	r3, [pc, #312]	; (80018bc <main+0x58c>)
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 8001788:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <main+0x590>)
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	e019      	b.n	80017c4 <main+0x494>

		} else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50) {
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d116      	bne.n	80017c4 <main+0x494>
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <main+0x584>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d012      	beq.n	80017c4 <main+0x494>
 800179e:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <main+0x588>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b32      	cmp	r3, #50	; 0x32
 80017a8:	d90c      	bls.n	80017c4 <main+0x494>
			short_state1 = 0;
 80017aa:	4b42      	ldr	r3, [pc, #264]	; (80018b4 <main+0x584>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 80017b0:	4a41      	ldr	r2, [pc, #260]	; (80018b8 <main+0x588>)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	6013      	str	r3, [r2, #0]

			if (!long_state1) {
 80017b6:	4b41      	ldr	r3, [pc, #260]	; (80018bc <main+0x58c>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <main+0x494>
				// действие на короткое нажатие
				btn1_short_rd = 1;
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <main+0x594>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 80017c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c8:	4839      	ldr	r0, [pc, #228]	; (80018b0 <main+0x580>)
 80017ca:	f001 ff6b 	bl	80036a4 <HAL_GPIO_ReadPin>
 80017ce:	4603      	mov	r3, r0
 80017d0:	71bb      	strb	r3, [r7, #6]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50) {
 80017d2:	79bb      	ldrb	r3, [r7, #6]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d113      	bne.n	8001800 <main+0x4d0>
 80017d8:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <main+0x598>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10f      	bne.n	8001800 <main+0x4d0>
 80017e0:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <main+0x59c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b32      	cmp	r3, #50	; 0x32
 80017ea:	d909      	bls.n	8001800 <main+0x4d0>
			short_state2 = 1;
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <main+0x598>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <main+0x5a0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 80017f8:	4a34      	ldr	r2, [pc, #208]	; (80018cc <main+0x59c>)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e02e      	b.n	800185e <main+0x52e>
		} else if (key2_state
 8001800:	79bb      	ldrb	r3, [r7, #6]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d111      	bne.n	800182a <main+0x4fa>
				== 0&& !long_state2 && (ms - time_key2) > KEY_LONG_DELAY) {
 8001806:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <main+0x5a0>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10d      	bne.n	800182a <main+0x4fa>
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <main+0x59c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800181a:	d906      	bls.n	800182a <main+0x4fa>
			long_state2 = 1;
 800181c:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <main+0x5a0>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 8001822:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <main+0x5a4>)
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e019      	b.n	800185e <main+0x52e>
		} else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50) {
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d116      	bne.n	800185e <main+0x52e>
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <main+0x598>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d012      	beq.n	800185e <main+0x52e>
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <main+0x59c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b32      	cmp	r3, #50	; 0x32
 8001842:	d90c      	bls.n	800185e <main+0x52e>
			short_state2 = 0;
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <main+0x598>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 800184a:	4a20      	ldr	r2, [pc, #128]	; (80018cc <main+0x59c>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	6013      	str	r3, [r2, #0]

			if (!long_state2) {
 8001850:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <main+0x5a0>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <main+0x52e>
				// действие на короткое нажатие
				btn2_short_rd = 1;
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <main+0x5a8>)
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 800185e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001862:	4813      	ldr	r0, [pc, #76]	; (80018b0 <main+0x580>)
 8001864:	f001 ff1e 	bl	80036a4 <HAL_GPIO_ReadPin>
 8001868:	4603      	mov	r3, r0
 800186a:	717b      	strb	r3, [r7, #5]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50) {
 800186c:	797b      	ldrb	r3, [r7, #5]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d13a      	bne.n	80018e8 <main+0x5b8>
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <main+0x5ac>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d136      	bne.n	80018e8 <main+0x5b8>
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <main+0x5b0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b32      	cmp	r3, #50	; 0x32
 8001884:	d930      	bls.n	80018e8 <main+0x5b8>
			short_state3 = 1;
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <main+0x5ac>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <main+0x5b4>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8001892:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <main+0x5b0>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e059      	b.n	800194e <main+0x61e>
 800189a:	bf00      	nop
 800189c:	200004b4 	.word	0x200004b4
 80018a0:	0801ffff 	.word	0x0801ffff
 80018a4:	0801fc00 	.word	0x0801fc00
 80018a8:	0800c254 	.word	0x0800c254
 80018ac:	20000274 	.word	0x20000274
 80018b0:	40010c00 	.word	0x40010c00
 80018b4:	20000250 	.word	0x20000250
 80018b8:	20000254 	.word	0x20000254
 80018bc:	20000251 	.word	0x20000251
 80018c0:	20000258 	.word	0x20000258
 80018c4:	20000259 	.word	0x20000259
 80018c8:	2000025a 	.word	0x2000025a
 80018cc:	2000025c 	.word	0x2000025c
 80018d0:	2000025b 	.word	0x2000025b
 80018d4:	20000260 	.word	0x20000260
 80018d8:	20000261 	.word	0x20000261
 80018dc:	20000262 	.word	0x20000262
 80018e0:	20000264 	.word	0x20000264
 80018e4:	20000263 	.word	0x20000263
		} else if (key3_state
 80018e8:	797b      	ldrb	r3, [r7, #5]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d111      	bne.n	8001912 <main+0x5e2>
				== 0&& !long_state3 && (ms - time_key3) > KEY_LONG_DELAY) {
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <main+0x620>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10d      	bne.n	8001912 <main+0x5e2>
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <main+0x624>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001902:	d906      	bls.n	8001912 <main+0x5e2>
			long_state3 = 1;
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <main+0x620>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <main+0x628>)
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	e01d      	b.n	800194e <main+0x61e>
		} else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50) {
 8001912:	797b      	ldrb	r3, [r7, #5]
 8001914:	2b01      	cmp	r3, #1
 8001916:	f47f aea2 	bne.w	800165e <main+0x32e>
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <main+0x62c>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f43f ae9d 	beq.w	800165e <main+0x32e>
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <main+0x624>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b32      	cmp	r3, #50	; 0x32
 800192e:	f67f ae96 	bls.w	800165e <main+0x32e>
			short_state3 = 0;
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <main+0x62c>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <main+0x624>)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	6013      	str	r3, [r2, #0]

			if (!long_state3) {
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <main+0x620>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f47f ae8b 	bne.w	800165e <main+0x32e>
				// действие на короткое нажатие
				btn3_short_rd = 1;
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <main+0x630>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
	while (1) {
 800194e:	e686      	b.n	800165e <main+0x32e>
 8001950:	20000263 	.word	0x20000263
 8001954:	20000264 	.word	0x20000264
 8001958:	20000268 	.word	0x20000268
 800195c:	20000262 	.word	0x20000262
 8001960:	20000269 	.word	0x20000269

08001964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b094      	sub	sp, #80	; 0x50
 8001968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196e:	2228      	movs	r2, #40	; 0x28
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f009 fa6a 	bl	800ae4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001994:	2301      	movs	r3, #1
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a2:	2301      	movs	r3, #1
 80019a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a6:	2302      	movs	r3, #2
 80019a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 fa4c 	bl	8004e58 <HAL_RCC_OscConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019c6:	f000 fa09 	bl	8001ddc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ca:	230f      	movs	r3, #15
 80019cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2102      	movs	r1, #2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fcb6 	bl	8005358 <HAL_RCC_ClockConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019f2:	f000 f9f3 	bl	8001ddc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80019f6:	2312      	movs	r3, #18
 80019f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019fe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 fe2c 	bl	8005664 <HAL_RCCEx_PeriphCLKConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001a12:	f000 f9e3 	bl	8001ddc <Error_Handler>
  }
}
 8001a16:	bf00      	nop
 8001a18:	3750      	adds	r7, #80	; 0x50
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <MX_ADC1_Init+0x74>)
 8001a32:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <MX_ADC1_Init+0x78>)
 8001a34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <MX_ADC1_Init+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <MX_ADC1_Init+0x74>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <MX_ADC1_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MX_ADC1_Init+0x74>)
 8001a4a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <MX_ADC1_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <MX_ADC1_Init+0x74>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a5c:	480d      	ldr	r0, [pc, #52]	; (8001a94 <MX_ADC1_Init+0x74>)
 8001a5e:	f000 fce3 	bl	8002428 <HAL_ADC_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a68:	f000 f9b8 	bl	8001ddc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001a74:	2302      	movs	r3, #2
 8001a76:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_ADC1_Init+0x74>)
 8001a7e:	f000 ff39 	bl	80028f4 <HAL_ADC_ConfigChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001a88:	f000 f9a8 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000094c 	.word	0x2000094c
 8001a98:	40012400 	.word	0x40012400

08001a9c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_CRC_Init+0x20>)
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <MX_CRC_Init+0x24>)
 8001aa4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_CRC_Init+0x20>)
 8001aa8:	f001 fa5b 	bl	8002f62 <HAL_CRC_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001ab2:	f000 f993 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200008fc 	.word	0x200008fc
 8001ac0:	40023000 	.word	0x40023000

08001ac4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <MX_SPI1_Init+0x68>)
 8001aca:	4a19      	ldr	r2, [pc, #100]	; (8001b30 <MX_SPI1_Init+0x6c>)
 8001acc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <MX_SPI1_Init+0x68>)
 8001ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <MX_SPI1_Init+0x68>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <MX_SPI1_Init+0x68>)
 8001ade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ae2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MX_SPI1_Init+0x68>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <MX_SPI1_Init+0x68>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_SPI1_Init+0x68>)
 8001af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_SPI1_Init+0x68>)
 8001afa:	2208      	movs	r2, #8
 8001afc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <MX_SPI1_Init+0x68>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_SPI1_Init+0x68>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <MX_SPI1_Init+0x68>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_SPI1_Init+0x68>)
 8001b12:	220a      	movs	r2, #10
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_SPI1_Init+0x68>)
 8001b18:	f003 ff1e 	bl	8005958 <HAL_SPI_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001b22:	f000 f95b 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000097c 	.word	0x2000097c
 8001b30:	40013000 	.word	0x40013000

08001b34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b44:	463b      	mov	r3, r7
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <MX_TIM3_Init+0xbc>)
 8001b52:	4a28      	ldr	r2, [pc, #160]	; (8001bf4 <MX_TIM3_Init+0xc0>)
 8001b54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <MX_TIM3_Init+0xbc>)
 8001b58:	2247      	movs	r2, #71	; 0x47
 8001b5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <MX_TIM3_Init+0xbc>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 8001b62:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <MX_TIM3_Init+0xbc>)
 8001b64:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001b68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6a:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <MX_TIM3_Init+0xbc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b70:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <MX_TIM3_Init+0xbc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001b76:	481e      	ldr	r0, [pc, #120]	; (8001bf0 <MX_TIM3_Init+0xbc>)
 8001b78:	f004 f954 	bl	8005e24 <HAL_TIM_IC_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001b82:	f000 f92b 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	4619      	mov	r1, r3
 8001b94:	4816      	ldr	r0, [pc, #88]	; (8001bf0 <MX_TIM3_Init+0xbc>)
 8001b96:	f004 fe33 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ba0:	f000 f91c 	bl	8001ddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <MX_TIM3_Init+0xbc>)
 8001bbc:	f004 fb90 	bl	80062e0 <HAL_TIM_IC_ConfigChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001bc6:	f000 f909 	bl	8001ddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001bd2:	463b      	mov	r3, r7
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_TIM3_Init+0xbc>)
 8001bda:	f004 fb81 	bl	80062e0 <HAL_TIM_IC_ConfigChannel>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001be4:	f000 f8fa 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000904 	.word	0x20000904
 8001bf4:	40000400 	.word	0x40000400

08001bf8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c08:	463b      	mov	r3, r7
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <MX_TIM4_Init+0xbc>)
 8001c16:	4a28      	ldr	r2, [pc, #160]	; (8001cb8 <MX_TIM4_Init+0xc0>)
 8001c18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <MX_TIM4_Init+0xbc>)
 8001c1c:	2247      	movs	r2, #71	; 0x47
 8001c1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <MX_TIM4_Init+0xbc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 8001c26:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <MX_TIM4_Init+0xbc>)
 8001c28:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001c2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <MX_TIM4_Init+0xbc>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <MX_TIM4_Init+0xbc>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001c3a:	481e      	ldr	r0, [pc, #120]	; (8001cb4 <MX_TIM4_Init+0xbc>)
 8001c3c:	f004 f8f2 	bl	8005e24 <HAL_TIM_IC_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001c46:	f000 f8c9 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	4619      	mov	r1, r3
 8001c58:	4816      	ldr	r0, [pc, #88]	; (8001cb4 <MX_TIM4_Init+0xbc>)
 8001c5a:	f004 fdd1 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c64:	f000 f8ba 	bl	8001ddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c78:	463b      	mov	r3, r7
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <MX_TIM4_Init+0xbc>)
 8001c80:	f004 fb2e 	bl	80062e0 <HAL_TIM_IC_ConfigChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001c8a:	f000 f8a7 	bl	8001ddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c92:	2302      	movs	r3, #2
 8001c94:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	2204      	movs	r2, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_TIM4_Init+0xbc>)
 8001c9e:	f004 fb1f 	bl	80062e0 <HAL_TIM_IC_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001ca8:	f000 f898 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200008b4 	.word	0x200008b4
 8001cb8:	40000800 	.word	0x40000800

08001cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc2:	f107 0310 	add.w	r3, r7, #16
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd0:	4b3e      	ldr	r3, [pc, #248]	; (8001dcc <MX_GPIO_Init+0x110>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a3d      	ldr	r2, [pc, #244]	; (8001dcc <MX_GPIO_Init+0x110>)
 8001cd6:	f043 0310 	orr.w	r3, r3, #16
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <MX_GPIO_Init+0x110>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce8:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <MX_GPIO_Init+0x110>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a37      	ldr	r2, [pc, #220]	; (8001dcc <MX_GPIO_Init+0x110>)
 8001cee:	f043 0320 	orr.w	r3, r3, #32
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b35      	ldr	r3, [pc, #212]	; (8001dcc <MX_GPIO_Init+0x110>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d00:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <MX_GPIO_Init+0x110>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	4a31      	ldr	r2, [pc, #196]	; (8001dcc <MX_GPIO_Init+0x110>)
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	6193      	str	r3, [r2, #24]
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <MX_GPIO_Init+0x110>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d18:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <MX_GPIO_Init+0x110>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a2b      	ldr	r2, [pc, #172]	; (8001dcc <MX_GPIO_Init+0x110>)
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <MX_GPIO_Init+0x110>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d36:	4826      	ldr	r0, [pc, #152]	; (8001dd0 <MX_GPIO_Init+0x114>)
 8001d38:	f001 fccb 	bl	80036d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f240 4112 	movw	r1, #1042	; 0x412
 8001d42:	4824      	ldr	r0, [pc, #144]	; (8001dd4 <MX_GPIO_Init+0x118>)
 8001d44:	f001 fcc5 	bl	80036d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4821      	ldr	r0, [pc, #132]	; (8001dd4 <MX_GPIO_Init+0x118>)
 8001d4e:	f001 fcc0 	bl	80036d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2302      	movs	r3, #2
 8001d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4819      	ldr	r0, [pc, #100]	; (8001dd0 <MX_GPIO_Init+0x114>)
 8001d6c:	f001 fb16 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 8001d70:	f240 4316 	movw	r3, #1046	; 0x416
 8001d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0310 	add.w	r3, r7, #16
 8001d86:	4619      	mov	r1, r3
 8001d88:	4812      	ldr	r0, [pc, #72]	; (8001dd4 <MX_GPIO_Init+0x118>)
 8001d8a:	f001 fb07 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	4619      	mov	r1, r3
 8001da2:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <MX_GPIO_Init+0x11c>)
 8001da4:	f001 fafa 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001da8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001dac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db6:	f107 0310 	add.w	r3, r7, #16
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <MX_GPIO_Init+0x11c>)
 8001dbe:	f001 faed 	bl	800339c <HAL_GPIO_Init>

}
 8001dc2:	bf00      	nop
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40011000 	.word	0x40011000
 8001dd4:	40010800 	.word	0x40010800
 8001dd8:	40010c00 	.word	0x40010c00

08001ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_MspInit+0x5c>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <HAL_MspInit+0x5c>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6193      	str	r3, [r2, #24]
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_MspInit+0x5c>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_MspInit+0x5c>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <HAL_MspInit+0x5c>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	61d3      	str	r3, [r2, #28]
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_MspInit+0x5c>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_MspInit+0x60>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_MspInit+0x60>)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010000 	.word	0x40010000

08001e4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_ADC_MspInit+0x7c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d129      	bne.n	8001ec0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_ADC_MspInit+0x80>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <HAL_ADC_MspInit+0x80>)
 8001e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e76:	6193      	str	r3, [r2, #24]
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_ADC_MspInit+0x80>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_ADC_MspInit+0x80>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a10      	ldr	r2, [pc, #64]	; (8001ecc <HAL_ADC_MspInit+0x80>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <HAL_ADC_MspInit+0x80>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4809      	ldr	r0, [pc, #36]	; (8001ed0 <HAL_ADC_MspInit+0x84>)
 8001eac:	f001 fa76 	bl	800339c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2012      	movs	r0, #18
 8001eb6:	f001 f81e 	bl	8002ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001eba:	2012      	movs	r0, #18
 8001ebc:	f001 f837 	bl	8002f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40012400 	.word	0x40012400
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010800 	.word	0x40010800

08001ed4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_CRC_MspInit+0x34>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10b      	bne.n	8001efe <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_CRC_MspInit+0x38>)
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <HAL_CRC_MspInit+0x38>)
 8001eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef0:	6153      	str	r3, [r2, #20]
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_CRC_MspInit+0x38>)
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	40023000 	.word	0x40023000
 8001f0c:	40021000 	.word	0x40021000

08001f10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <HAL_SPI_MspInit+0x70>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d123      	bne.n	8001f78 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_SPI_MspInit+0x74>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <HAL_SPI_MspInit+0x74>)
 8001f36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_SPI_MspInit+0x74>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f48:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_SPI_MspInit+0x74>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <HAL_SPI_MspInit+0x74>)
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_SPI_MspInit+0x74>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8001f60:	23a0      	movs	r3, #160	; 0xa0
 8001f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4619      	mov	r1, r3
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <HAL_SPI_MspInit+0x78>)
 8001f74:	f001 fa12 	bl	800339c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f78:	bf00      	nop
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40013000 	.word	0x40013000
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40010800 	.word	0x40010800

08001f8c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a3b      	ldr	r2, [pc, #236]	; (8002094 <HAL_TIM_IC_MspInit+0x108>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d13e      	bne.n	800202a <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fac:	4b3a      	ldr	r3, [pc, #232]	; (8002098 <HAL_TIM_IC_MspInit+0x10c>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4a39      	ldr	r2, [pc, #228]	; (8002098 <HAL_TIM_IC_MspInit+0x10c>)
 8001fb2:	f043 0302 	orr.w	r3, r3, #2
 8001fb6:	61d3      	str	r3, [r2, #28]
 8001fb8:	4b37      	ldr	r3, [pc, #220]	; (8002098 <HAL_TIM_IC_MspInit+0x10c>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc4:	4b34      	ldr	r3, [pc, #208]	; (8002098 <HAL_TIM_IC_MspInit+0x10c>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a33      	ldr	r2, [pc, #204]	; (8002098 <HAL_TIM_IC_MspInit+0x10c>)
 8001fca:	f043 0308 	orr.w	r3, r3, #8
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b31      	ldr	r3, [pc, #196]	; (8002098 <HAL_TIM_IC_MspInit+0x10c>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fdc:	2310      	movs	r3, #16
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	482b      	ldr	r0, [pc, #172]	; (800209c <HAL_TIM_IC_MspInit+0x110>)
 8001ff0:	f001 f9d4 	bl	800339c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <HAL_TIM_IC_MspInit+0x114>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002012:	4a23      	ldr	r2, [pc, #140]	; (80020a0 <HAL_TIM_IC_MspInit+0x114>)
 8002014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002016:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	201d      	movs	r0, #29
 800201e:	f000 ff6a 	bl	8002ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002022:	201d      	movs	r0, #29
 8002024:	f000 ff83 	bl	8002f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002028:	e030      	b.n	800208c <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <HAL_TIM_IC_MspInit+0x118>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d12b      	bne.n	800208c <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002034:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_TIM_IC_MspInit+0x10c>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	4a17      	ldr	r2, [pc, #92]	; (8002098 <HAL_TIM_IC_MspInit+0x10c>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	61d3      	str	r3, [r2, #28]
 8002040:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_TIM_IC_MspInit+0x10c>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_TIM_IC_MspInit+0x10c>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a11      	ldr	r2, [pc, #68]	; (8002098 <HAL_TIM_IC_MspInit+0x10c>)
 8002052:	f043 0308 	orr.w	r3, r3, #8
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <HAL_TIM_IC_MspInit+0x10c>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002064:	2340      	movs	r3, #64	; 0x40
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	4619      	mov	r1, r3
 8002076:	4809      	ldr	r0, [pc, #36]	; (800209c <HAL_TIM_IC_MspInit+0x110>)
 8002078:	f001 f990 	bl	800339c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	2100      	movs	r1, #0
 8002080:	201e      	movs	r0, #30
 8002082:	f000 ff38 	bl	8002ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002086:	201e      	movs	r0, #30
 8002088:	f000 ff51 	bl	8002f2e <HAL_NVIC_EnableIRQ>
}
 800208c:	bf00      	nop
 800208e:	3730      	adds	r7, #48	; 0x30
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40000400 	.word	0x40000400
 8002098:	40021000 	.word	0x40021000
 800209c:	40010c00 	.word	0x40010c00
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40000800 	.word	0x40000800

080020a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 80020b8:	4807      	ldr	r0, [pc, #28]	; (80020d8 <HardFault_Handler+0x24>)
 80020ba:	f008 fecf 	bl	800ae5c <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <HardFault_Handler+0x24>)
 80020c0:	f008 fecc 	bl	800ae5c <iprintf>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80020c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c8:	4804      	ldr	r0, [pc, #16]	; (80020dc <HardFault_Handler+0x28>)
 80020ca:	f001 fb1a 	bl	8003702 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 80020ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020d2:	f000 f985 	bl	80023e0 <HAL_Delay>
	  printf("HardFault_IRQn");
 80020d6:	e7f2      	b.n	80020be <HardFault_Handler+0xa>
 80020d8:	0800c2b4 	.word	0x0800c2b4
 80020dc:	40011000 	.word	0x40011000

080020e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <MemManage_Handler+0x4>

080020e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ea:	e7fe      	b.n	80020ea <BusFault_Handler+0x4>

080020ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <UsageFault_Handler+0x4>

080020f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800211a:	f000 f945 	bl	80023a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <ADC1_2_IRQHandler+0x10>)
 800212a:	f000 fb17 	bl	800275c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	2000094c 	.word	0x2000094c

08002138 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800213e:	f001 fc2a 	bl	8003996 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200012bc 	.word	0x200012bc

0800214c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <TIM3_IRQHandler+0x10>)
 8002152:	f003 ffbd 	bl	80060d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000904 	.word	0x20000904

08002160 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <TIM4_IRQHandler+0x10>)
 8002166:	f003 ffb3 	bl	80060d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200008b4 	.word	0x200008b4

08002174 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e00a      	b.n	800219c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002186:	f3af 8000 	nop.w
 800218a:	4601      	mov	r1, r0
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	60ba      	str	r2, [r7, #8]
 8002192:	b2ca      	uxtb	r2, r1
 8002194:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf0      	blt.n	8002186 <_read+0x12>
	}

return len;
 80021a4:	687b      	ldr	r3, [r7, #4]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_close>:
	}
	return len;
}

int _close(int file)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
	return -1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d4:	605a      	str	r2, [r3, #4]
	return 0;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <_isatty>:

int _isatty(int file)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
	return 1;
 80021ea:	2301      	movs	r3, #1
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
	return 0;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
	...

08002210 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <_sbrk+0x50>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <_sbrk+0x16>
		heap_end = &end;
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <_sbrk+0x50>)
 8002222:	4a10      	ldr	r2, [pc, #64]	; (8002264 <_sbrk+0x54>)
 8002224:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <_sbrk+0x50>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <_sbrk+0x50>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4413      	add	r3, r2
 8002234:	466a      	mov	r2, sp
 8002236:	4293      	cmp	r3, r2
 8002238:	d907      	bls.n	800224a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800223a:	f008 fdb5 	bl	800ada8 <__errno>
 800223e:	4603      	mov	r3, r0
 8002240:	220c      	movs	r2, #12
 8002242:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
 8002248:	e006      	b.n	8002258 <_sbrk+0x48>
	}

	heap_end += incr;
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <_sbrk+0x50>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	4a03      	ldr	r2, [pc, #12]	; (8002260 <_sbrk+0x50>)
 8002254:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002256:	68fb      	ldr	r3, [r7, #12]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000284 	.word	0x20000284
 8002264:	200015b8 	.word	0x200015b8

08002268 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800226c:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <SystemInit+0x5c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <SystemInit+0x5c>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <SystemInit+0x5c>)
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4911      	ldr	r1, [pc, #68]	; (80022c4 <SystemInit+0x5c>)
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <SystemInit+0x60>)
 8002280:	4013      	ands	r3, r2
 8002282:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <SystemInit+0x5c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <SystemInit+0x5c>)
 800228a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800228e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <SystemInit+0x5c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <SystemInit+0x5c>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <SystemInit+0x5c>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <SystemInit+0x5c>)
 80022a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80022aa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <SystemInit+0x5c>)
 80022ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80022b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <SystemInit+0x64>)
 80022b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	40021000 	.word	0x40021000
 80022c8:	f8ff0000 	.word	0xf8ff0000
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80022d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80022d2:	e003      	b.n	80022dc <LoopCopyDataInit>

080022d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80022d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80022d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80022da:	3104      	adds	r1, #4

080022dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80022dc:	480a      	ldr	r0, [pc, #40]	; (8002308 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80022e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80022e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80022e4:	d3f6      	bcc.n	80022d4 <CopyDataInit>
  ldr r2, =_sbss
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80022e8:	e002      	b.n	80022f0 <LoopFillZerobss>

080022ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80022ec:	f842 3b04 	str.w	r3, [r2], #4

080022f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80022f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80022f4:	d3f9      	bcc.n	80022ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022f6:	f7ff ffb7 	bl	8002268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022fa:	f008 fd5b 	bl	800adb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022fe:	f7ff f817 	bl	8001330 <main>
  bx lr
 8002302:	4770      	bx	lr
  ldr r3, =_sidata
 8002304:	0800c458 	.word	0x0800c458
  ldr r0, =_sdata
 8002308:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800230c:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 8002310:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8002314:	200015b8 	.word	0x200015b8

08002318 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002318:	e7fe      	b.n	8002318 <CAN1_RX1_IRQHandler>
	...

0800231c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_Init+0x28>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_Init+0x28>)
 8002326:	f043 0310 	orr.w	r3, r3, #16
 800232a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232c:	2003      	movs	r0, #3
 800232e:	f000 fdd7 	bl	8002ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002332:	2000      	movs	r0, #0
 8002334:	f000 f808 	bl	8002348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002338:	f7ff fd56 	bl	8001de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40022000 	.word	0x40022000

08002348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_InitTick+0x54>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_InitTick+0x58>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fdef 	bl	8002f4a <HAL_SYSTICK_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e00e      	b.n	8002394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d80a      	bhi.n	8002392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237c:	2200      	movs	r2, #0
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f000 fdb7 	bl	8002ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002388:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <HAL_InitTick+0x5c>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e000      	b.n	8002394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000010 	.word	0x20000010
 80023a0:	20000018 	.word	0x20000018
 80023a4:	20000014 	.word	0x20000014

080023a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_IncTick+0x1c>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_IncTick+0x20>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	4a03      	ldr	r2, [pc, #12]	; (80023c8 <HAL_IncTick+0x20>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	20000018 	.word	0x20000018
 80023c8:	200009d4 	.word	0x200009d4

080023cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return uwTick;
 80023d0:	4b02      	ldr	r3, [pc, #8]	; (80023dc <HAL_GetTick+0x10>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	200009d4 	.word	0x200009d4

080023e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff fff0 	bl	80023cc <HAL_GetTick>
 80023ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d005      	beq.n	8002406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_Delay+0x44>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002406:	bf00      	nop
 8002408:	f7ff ffe0 	bl	80023cc <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	429a      	cmp	r2, r3
 8002416:	d8f7      	bhi.n	8002408 <HAL_Delay+0x28>
  {
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000018 	.word	0x20000018

08002428 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0be      	b.n	80025c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fcf0 	bl	8001e4c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fb8b 	bl	8002b88 <ADC_ConversionStop_Disable>
 8002472:	4603      	mov	r3, r0
 8002474:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	f040 8099 	bne.w	80025b6 <HAL_ADC_Init+0x18e>
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 8095 	bne.w	80025b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002494:	f023 0302 	bic.w	r3, r3, #2
 8002498:	f043 0202 	orr.w	r2, r3, #2
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7b1b      	ldrb	r3, [r3, #12]
 80024ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c0:	d003      	beq.n	80024ca <HAL_ADC_Init+0xa2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d102      	bne.n	80024d0 <HAL_ADC_Init+0xa8>
 80024ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ce:	e000      	b.n	80024d2 <HAL_ADC_Init+0xaa>
 80024d0:	2300      	movs	r3, #0
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7d1b      	ldrb	r3, [r3, #20]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d119      	bne.n	8002514 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7b1b      	ldrb	r3, [r3, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	035a      	lsls	r2, r3, #13
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	e00b      	b.n	8002514 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	f043 0220 	orr.w	r2, r3, #32
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	430a      	orrs	r2, r1
 8002526:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <HAL_ADC_Init+0x1a8>)
 8002530:	4013      	ands	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	430b      	orrs	r3, r1
 800253a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002544:	d003      	beq.n	800254e <HAL_ADC_Init+0x126>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d104      	bne.n	8002558 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	3b01      	subs	r3, #1
 8002554:	051b      	lsls	r3, r3, #20
 8002556:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	430a      	orrs	r2, r1
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_ADC_Init+0x1ac>)
 8002574:	4013      	ands	r3, r2
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	429a      	cmp	r2, r3
 800257a:	d10b      	bne.n	8002594 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	f023 0303 	bic.w	r3, r3, #3
 800258a:	f043 0201 	orr.w	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002592:	e018      	b.n	80025c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	f023 0312 	bic.w	r3, r3, #18
 800259c:	f043 0210 	orr.w	r2, r3, #16
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025b4:	e007      	b.n	80025c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	f043 0210 	orr.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	ffe1f7fd 	.word	0xffe1f7fd
 80025d4:	ff1f0efe 	.word	0xff1f0efe

080025d8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_Start_IT+0x1a>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e0a0      	b.n	8002734 <HAL_ADC_Start_IT+0x15c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fa72 	bl	8002ae4 <ADC_Enable>
 8002600:	4603      	mov	r3, r0
 8002602:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f040 808f 	bne.w	800272a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a45      	ldr	r2, [pc, #276]	; (800273c <HAL_ADC_Start_IT+0x164>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d105      	bne.n	8002636 <HAL_ADC_Start_IT+0x5e>
 800262a:	4b45      	ldr	r3, [pc, #276]	; (8002740 <HAL_ADC_Start_IT+0x168>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d115      	bne.n	8002662 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264c:	2b00      	cmp	r3, #0
 800264e:	d026      	beq.n	800269e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002658:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002660:	e01d      	b.n	800269e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a33      	ldr	r2, [pc, #204]	; (8002740 <HAL_ADC_Start_IT+0x168>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d004      	beq.n	8002682 <HAL_ADC_Start_IT+0xaa>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a2f      	ldr	r2, [pc, #188]	; (800273c <HAL_ADC_Start_IT+0x164>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d10d      	bne.n	800269e <HAL_ADC_Start_IT+0xc6>
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <HAL_ADC_Start_IT+0x168>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268a:	2b00      	cmp	r3, #0
 800268c:	d007      	beq.n	800269e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002696:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d006      	beq.n	80026b8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	f023 0206 	bic.w	r2, r3, #6
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80026b6:	e002      	b.n	80026be <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f06f 0202 	mvn.w	r2, #2
 80026ce:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0220 	orr.w	r2, r2, #32
 80026de:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026ee:	d113      	bne.n	8002718 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026f4:	4a11      	ldr	r2, [pc, #68]	; (800273c <HAL_ADC_Start_IT+0x164>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d105      	bne.n	8002706 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_ADC_Start_IT+0x168>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002702:	2b00      	cmp	r3, #0
 8002704:	d108      	bne.n	8002718 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	e00c      	b.n	8002732 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	e003      	b.n	8002732 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40012800 	.word	0x40012800
 8002740:	40012400 	.word	0x40012400

08002744 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b20      	cmp	r3, #32
 8002770:	d140      	bne.n	80027f4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b02      	cmp	r3, #2
 800277e:	d139      	bne.n	80027f4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027a6:	d11d      	bne.n	80027e4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d119      	bne.n	80027e4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0220 	bic.w	r2, r2, #32
 80027be:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d105      	bne.n	80027e4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7fe fd89 	bl	80012fc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f06f 0212 	mvn.w	r2, #18
 80027f2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	2b80      	cmp	r3, #128	; 0x80
 8002800:	d14f      	bne.n	80028a2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b04      	cmp	r3, #4
 800280e:	d148      	bne.n	80028a2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002832:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002836:	d012      	beq.n	800285e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002842:	2b00      	cmp	r3, #0
 8002844:	d125      	bne.n	8002892 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002850:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002854:	d11d      	bne.n	8002892 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800285a:	2b00      	cmp	r3, #0
 800285c:	d119      	bne.n	8002892 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800286c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fa4e 	bl	8002d34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 020c 	mvn.w	r2, #12
 80028a0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d114      	bne.n	80028da <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d10d      	bne.n	80028da <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f809 	bl	80028e2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0201 	mvn.w	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x20>
 8002910:	2302      	movs	r3, #2
 8002912:	e0dc      	b.n	8002ace <HAL_ADC_ConfigChannel+0x1da>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b06      	cmp	r3, #6
 8002922:	d81c      	bhi.n	800295e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	3b05      	subs	r3, #5
 8002936:	221f      	movs	r2, #31
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	4019      	ands	r1, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	3b05      	subs	r3, #5
 8002950:	fa00 f203 	lsl.w	r2, r0, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	635a      	str	r2, [r3, #52]	; 0x34
 800295c:	e03c      	b.n	80029d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d81c      	bhi.n	80029a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	3b23      	subs	r3, #35	; 0x23
 8002978:	221f      	movs	r2, #31
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	4019      	ands	r1, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	3b23      	subs	r3, #35	; 0x23
 8002992:	fa00 f203 	lsl.w	r2, r0, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
 800299e:	e01b      	b.n	80029d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	3b41      	subs	r3, #65	; 0x41
 80029b2:	221f      	movs	r2, #31
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	4019      	ands	r1, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	3b41      	subs	r3, #65	; 0x41
 80029cc:	fa00 f203 	lsl.w	r2, r0, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b09      	cmp	r3, #9
 80029de:	d91c      	bls.n	8002a1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68d9      	ldr	r1, [r3, #12]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4613      	mov	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	3b1e      	subs	r3, #30
 80029f2:	2207      	movs	r2, #7
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	4019      	ands	r1, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6898      	ldr	r0, [r3, #8]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	3b1e      	subs	r3, #30
 8002a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	e019      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6919      	ldr	r1, [r3, #16]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	4019      	ands	r1, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	6898      	ldr	r0, [r3, #8]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	fa00 f203 	lsl.w	r2, r0, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d003      	beq.n	8002a5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a5a:	2b11      	cmp	r3, #17
 8002a5c:	d132      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d125      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d126      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a84:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	d11a      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <HAL_ADC_ConfigChannel+0x1e8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a13      	ldr	r2, [pc, #76]	; (8002ae0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	0c9a      	lsrs	r2, r3, #18
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aa4:	e002      	b.n	8002aac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f9      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x1b2>
 8002ab2:	e007      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	40012400 	.word	0x40012400
 8002adc:	20000010 	.word	0x20000010
 8002ae0:	431bde83 	.word	0x431bde83

08002ae4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d039      	beq.n	8002b76 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <ADC_Enable+0x9c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <ADC_Enable+0xa0>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	0c9b      	lsrs	r3, r3, #18
 8002b1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b20:	e002      	b.n	8002b28 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f9      	bne.n	8002b22 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b2e:	f7ff fc4d 	bl	80023cc <HAL_GetTick>
 8002b32:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b34:	e018      	b.n	8002b68 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b36:	f7ff fc49 	bl	80023cc <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d911      	bls.n	8002b68 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	f043 0210 	orr.w	r2, r3, #16
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e007      	b.n	8002b78 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d1df      	bne.n	8002b36 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000010 	.word	0x20000010
 8002b84:	431bde83 	.word	0x431bde83

08002b88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d127      	bne.n	8002bf2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bb2:	f7ff fc0b 	bl	80023cc <HAL_GetTick>
 8002bb6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bb8:	e014      	b.n	8002be4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bba:	f7ff fc07 	bl	80023cc <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d90d      	bls.n	8002be4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	f043 0210 	orr.w	r2, r3, #16
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	f043 0201 	orr.w	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e007      	b.n	8002bf4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d0e3      	beq.n	8002bba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_ADCEx_Calibration_Start+0x1e>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e086      	b.n	8002d28 <HAL_ADCEx_Calibration_Start+0x12c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ffb0 	bl	8002b88 <ADC_ConversionStop_Disable>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d175      	bne.n	8002d1e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c3a:	f023 0302 	bic.w	r3, r3, #2
 8002c3e:	f043 0202 	orr.w	r2, r3, #2
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002c46:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <HAL_ADCEx_Calibration_Start+0x134>)
 8002c48:	681c      	ldr	r4, [r3, #0]
 8002c4a:	2002      	movs	r0, #2
 8002c4c:	f002 fdc0 	bl	80057d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c50:	4603      	mov	r3, r0
 8002c52:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002c56:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002c58:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002c5a:	e002      	b.n	8002c62 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f9      	bne.n	8002c5c <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ff3b 	bl	8002ae4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0208 	orr.w	r2, r2, #8
 8002c7c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002c7e:	f7ff fba5 	bl	80023cc <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c84:	e014      	b.n	8002cb0 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c86:	f7ff fba1 	bl	80023cc <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b0a      	cmp	r3, #10
 8002c92:	d90d      	bls.n	8002cb0 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	f023 0312 	bic.w	r3, r3, #18
 8002c9c:	f043 0210 	orr.w	r2, r3, #16
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e03b      	b.n	8002d28 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e3      	bne.n	8002c86 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0204 	orr.w	r2, r2, #4
 8002ccc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002cce:	f7ff fb7d 	bl	80023cc <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002cd4:	e014      	b.n	8002d00 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002cd6:	f7ff fb79 	bl	80023cc <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b0a      	cmp	r3, #10
 8002ce2:	d90d      	bls.n	8002d00 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	f023 0312 	bic.w	r3, r3, #18
 8002cec:	f043 0210 	orr.w	r2, r3, #16
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e013      	b.n	8002d28 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e3      	bne.n	8002cd6 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	f023 0303 	bic.w	r3, r3, #3
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	371c      	adds	r7, #28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd90      	pop	{r4, r7, pc}
 8002d30:	20000010 	.word	0x20000010

08002d34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
	...

08002d48 <__NVIC_SetPriorityGrouping>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d64:	4013      	ands	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	60d3      	str	r3, [r2, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_GetPriorityGrouping>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <__NVIC_GetPriorityGrouping+0x18>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 0307 	and.w	r3, r3, #7
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_EnableIRQ>:
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	db0b      	blt.n	8002dd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4906      	ldr	r1, [pc, #24]	; (8002de0 <__NVIC_EnableIRQ+0x34>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2001      	movs	r0, #1
 8002dce:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <__NVIC_SetPriority>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	; (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	; (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <SysTick_Config>:
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eac:	d301      	bcc.n	8002eb2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e00f      	b.n	8002ed2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <SysTick_Config+0x40>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eba:	210f      	movs	r1, #15
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	f7ff ff90 	bl	8002de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <SysTick_Config+0x40>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eca:	4b04      	ldr	r3, [pc, #16]	; (8002edc <SysTick_Config+0x40>)
 8002ecc:	2207      	movs	r2, #7
 8002ece:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	e000e010 	.word	0xe000e010

08002ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ff2d 	bl	8002d48 <__NVIC_SetPriorityGrouping>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b086      	sub	sp, #24
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f08:	f7ff ff42 	bl	8002d90 <__NVIC_GetPriorityGrouping>
 8002f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	6978      	ldr	r0, [r7, #20]
 8002f14:	f7ff ff90 	bl	8002e38 <NVIC_EncodePriority>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff5f 	bl	8002de4 <__NVIC_SetPriority>
}
 8002f26:	bf00      	nop
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff35 	bl	8002dac <__NVIC_EnableIRQ>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ffa2 	bl	8002e9c <SysTick_Config>
 8002f58:	4603      	mov	r3, r0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e00e      	b.n	8002f92 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	795b      	ldrb	r3, [r3, #5]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7fe ffa5 	bl	8001ed4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002fb6:	4b2f      	ldr	r3, [pc, #188]	; (8003074 <HAL_FLASH_Program+0xd8>)
 8002fb8:	7e1b      	ldrb	r3, [r3, #24]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_FLASH_Program+0x26>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e054      	b.n	800306c <HAL_FLASH_Program+0xd0>
 8002fc2:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <HAL_FLASH_Program+0xd8>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002fc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fcc:	f000 f8a8 	bl	8003120 <FLASH_WaitForLastOperation>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d144      	bne.n	8003064 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d102      	bne.n	8002fe6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	757b      	strb	r3, [r7, #21]
 8002fe4:	e007      	b.n	8002ff6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d102      	bne.n	8002ff2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002fec:	2302      	movs	r3, #2
 8002fee:	757b      	strb	r3, [r7, #21]
 8002ff0:	e001      	b.n	8002ff6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002ff2:	2304      	movs	r3, #4
 8002ff4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75bb      	strb	r3, [r7, #22]
 8002ffa:	e02d      	b.n	8003058 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002ffc:	7dbb      	ldrb	r3, [r7, #22]
 8002ffe:	005a      	lsls	r2, r3, #1
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	eb02 0c03 	add.w	ip, r2, r3
 8003006:	7dbb      	ldrb	r3, [r7, #22]
 8003008:	0119      	lsls	r1, r3, #4
 800300a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800300e:	f1c1 0620 	rsb	r6, r1, #32
 8003012:	f1a1 0020 	sub.w	r0, r1, #32
 8003016:	fa22 f401 	lsr.w	r4, r2, r1
 800301a:	fa03 f606 	lsl.w	r6, r3, r6
 800301e:	4334      	orrs	r4, r6
 8003020:	fa23 f000 	lsr.w	r0, r3, r0
 8003024:	4304      	orrs	r4, r0
 8003026:	fa23 f501 	lsr.w	r5, r3, r1
 800302a:	b2a3      	uxth	r3, r4
 800302c:	4619      	mov	r1, r3
 800302e:	4660      	mov	r0, ip
 8003030:	f000 f85a 	bl	80030e8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003034:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003038:	f000 f872 	bl	8003120 <FLASH_WaitForLastOperation>
 800303c:	4603      	mov	r3, r0
 800303e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <HAL_FLASH_Program+0xdc>)
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	4a0c      	ldr	r2, [pc, #48]	; (8003078 <HAL_FLASH_Program+0xdc>)
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d107      	bne.n	8003062 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003052:	7dbb      	ldrb	r3, [r7, #22]
 8003054:	3301      	adds	r3, #1
 8003056:	75bb      	strb	r3, [r7, #22]
 8003058:	7dba      	ldrb	r2, [r7, #22]
 800305a:	7d7b      	ldrb	r3, [r7, #21]
 800305c:	429a      	cmp	r2, r3
 800305e:	d3cd      	bcc.n	8002ffc <HAL_FLASH_Program+0x60>
 8003060:	e000      	b.n	8003064 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003062:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <HAL_FLASH_Program+0xd8>)
 8003066:	2200      	movs	r2, #0
 8003068:	761a      	strb	r2, [r3, #24]

  return status;
 800306a:	7dfb      	ldrb	r3, [r7, #23]
}
 800306c:	4618      	mov	r0, r3
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003074:	200009d8 	.word	0x200009d8
 8003078:	40022000 	.word	0x40022000

0800307c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003086:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <HAL_FLASH_Unlock+0x40>)
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <HAL_FLASH_Unlock+0x40>)
 8003094:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_FLASH_Unlock+0x44>)
 8003096:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <HAL_FLASH_Unlock+0x40>)
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <HAL_FLASH_Unlock+0x48>)
 800309c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800309e:	4b07      	ldr	r3, [pc, #28]	; (80030bc <HAL_FLASH_Unlock+0x40>)
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80030ae:	79fb      	ldrb	r3, [r7, #7]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40022000 	.word	0x40022000
 80030c0:	45670123 	.word	0x45670123
 80030c4:	cdef89ab 	.word	0xcdef89ab

080030c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_FLASH_Lock+0x1c>)
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <HAL_FLASH_Lock+0x1c>)
 80030d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40022000 	.word	0x40022000

080030e8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <FLASH_Program_HalfWord+0x30>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <FLASH_Program_HalfWord+0x34>)
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	4a07      	ldr	r2, [pc, #28]	; (800311c <FLASH_Program_HalfWord+0x34>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	887a      	ldrh	r2, [r7, #2]
 800310a:	801a      	strh	r2, [r3, #0]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	200009d8 	.word	0x200009d8
 800311c:	40022000 	.word	0x40022000

08003120 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003128:	f7ff f950 	bl	80023cc <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800312e:	e010      	b.n	8003152 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d00c      	beq.n	8003152 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <FLASH_WaitForLastOperation+0x2e>
 800313e:	f7ff f945 	bl	80023cc <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	d201      	bcs.n	8003152 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e025      	b.n	800319e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <FLASH_WaitForLastOperation+0x88>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1e8      	bne.n	8003130 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800315e:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <FLASH_WaitForLastOperation+0x88>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800316a:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <FLASH_WaitForLastOperation+0x88>)
 800316c:	2220      	movs	r2, #32
 800316e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003170:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <FLASH_WaitForLastOperation+0x88>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10b      	bne.n	8003194 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800317c:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <FLASH_WaitForLastOperation+0x88>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003188:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <FLASH_WaitForLastOperation+0x88>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003194:	f000 f80a 	bl	80031ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40022000 	.word	0x40022000

080031ac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80031b6:	4b23      	ldr	r3, [pc, #140]	; (8003244 <FLASH_SetErrorCode+0x98>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80031c2:	4b21      	ldr	r3, [pc, #132]	; (8003248 <FLASH_SetErrorCode+0x9c>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f043 0302 	orr.w	r3, r3, #2
 80031ca:	4a1f      	ldr	r2, [pc, #124]	; (8003248 <FLASH_SetErrorCode+0x9c>)
 80031cc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f043 0310 	orr.w	r3, r3, #16
 80031d4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80031d6:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <FLASH_SetErrorCode+0x98>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <FLASH_SetErrorCode+0x9c>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	4a17      	ldr	r2, [pc, #92]	; (8003248 <FLASH_SetErrorCode+0x9c>)
 80031ec:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <FLASH_SetErrorCode+0x98>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <FLASH_SetErrorCode+0x9c>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	4a0f      	ldr	r2, [pc, #60]	; (8003248 <FLASH_SetErrorCode+0x9c>)
 800320c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <FLASH_SetErrorCode+0x98>)
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <FLASH_SetErrorCode+0x98>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f240 1201 	movw	r2, #257	; 0x101
 8003220:	4293      	cmp	r3, r2
 8003222:	d106      	bne.n	8003232 <FLASH_SetErrorCode+0x86>
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <FLASH_SetErrorCode+0x98>)
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <FLASH_SetErrorCode+0x98>)
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	61d3      	str	r3, [r2, #28]
}  
 8003230:	e002      	b.n	8003238 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003232:	4a04      	ldr	r2, [pc, #16]	; (8003244 <FLASH_SetErrorCode+0x98>)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	60d3      	str	r3, [r2, #12]
}  
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40022000 	.word	0x40022000
 8003248:	200009d8 	.word	0x200009d8

0800324c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800325e:	4b2f      	ldr	r3, [pc, #188]	; (800331c <HAL_FLASHEx_Erase+0xd0>)
 8003260:	7e1b      	ldrb	r3, [r3, #24]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_FLASHEx_Erase+0x1e>
 8003266:	2302      	movs	r3, #2
 8003268:	e053      	b.n	8003312 <HAL_FLASHEx_Erase+0xc6>
 800326a:	4b2c      	ldr	r3, [pc, #176]	; (800331c <HAL_FLASHEx_Erase+0xd0>)
 800326c:	2201      	movs	r2, #1
 800326e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d116      	bne.n	80032a6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003278:	f24c 3050 	movw	r0, #50000	; 0xc350
 800327c:	f7ff ff50 	bl	8003120 <FLASH_WaitForLastOperation>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d141      	bne.n	800330a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003286:	2001      	movs	r0, #1
 8003288:	f000 f84c 	bl	8003324 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800328c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003290:	f7ff ff46 	bl	8003120 <FLASH_WaitForLastOperation>
 8003294:	4603      	mov	r3, r0
 8003296:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_FLASHEx_Erase+0xd4>)
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	4a20      	ldr	r2, [pc, #128]	; (8003320 <HAL_FLASHEx_Erase+0xd4>)
 800329e:	f023 0304 	bic.w	r3, r3, #4
 80032a2:	6113      	str	r3, [r2, #16]
 80032a4:	e031      	b.n	800330a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80032a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032aa:	f7ff ff39 	bl	8003120 <FLASH_WaitForLastOperation>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d12a      	bne.n	800330a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f04f 32ff 	mov.w	r2, #4294967295
 80032ba:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	e019      	b.n	80032f8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80032c4:	68b8      	ldr	r0, [r7, #8]
 80032c6:	f000 f849 	bl	800335c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032ce:	f7ff ff27 	bl	8003120 <FLASH_WaitForLastOperation>
 80032d2:	4603      	mov	r3, r0
 80032d4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80032d6:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_FLASHEx_Erase+0xd4>)
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	4a11      	ldr	r2, [pc, #68]	; (8003320 <HAL_FLASHEx_Erase+0xd4>)
 80032dc:	f023 0302 	bic.w	r3, r3, #2
 80032e0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	601a      	str	r2, [r3, #0]
            break;
 80032ee:	e00c      	b.n	800330a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032f6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	029a      	lsls	r2, r3, #10
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	429a      	cmp	r2, r3
 8003308:	d3dc      	bcc.n	80032c4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800330a:	4b04      	ldr	r3, [pc, #16]	; (800331c <HAL_FLASHEx_Erase+0xd0>)
 800330c:	2200      	movs	r2, #0
 800330e:	761a      	strb	r2, [r3, #24]

  return status;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	200009d8 	.word	0x200009d8
 8003320:	40022000 	.word	0x40022000

08003324 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <FLASH_MassErase+0x30>)
 800332e:	2200      	movs	r2, #0
 8003330:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <FLASH_MassErase+0x34>)
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	4a08      	ldr	r2, [pc, #32]	; (8003358 <FLASH_MassErase+0x34>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <FLASH_MassErase+0x34>)
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	4a05      	ldr	r2, [pc, #20]	; (8003358 <FLASH_MassErase+0x34>)
 8003344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003348:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	200009d8 	.word	0x200009d8
 8003358:	40022000 	.word	0x40022000

0800335c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <FLASH_PageErase+0x38>)
 8003366:	2200      	movs	r2, #0
 8003368:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <FLASH_PageErase+0x3c>)
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <FLASH_PageErase+0x3c>)
 8003370:	f043 0302 	orr.w	r3, r3, #2
 8003374:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003376:	4a08      	ldr	r2, [pc, #32]	; (8003398 <FLASH_PageErase+0x3c>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <FLASH_PageErase+0x3c>)
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	4a05      	ldr	r2, [pc, #20]	; (8003398 <FLASH_PageErase+0x3c>)
 8003382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003386:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	200009d8 	.word	0x200009d8
 8003398:	40022000 	.word	0x40022000

0800339c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800339c:	b480      	push	{r7}
 800339e:	b08b      	sub	sp, #44	; 0x2c
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033aa:	2300      	movs	r3, #0
 80033ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ae:	e169      	b.n	8003684 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033b0:	2201      	movs	r2, #1
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	f040 8158 	bne.w	800367e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4a9a      	ldr	r2, [pc, #616]	; (800363c <HAL_GPIO_Init+0x2a0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d05e      	beq.n	8003496 <HAL_GPIO_Init+0xfa>
 80033d8:	4a98      	ldr	r2, [pc, #608]	; (800363c <HAL_GPIO_Init+0x2a0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d875      	bhi.n	80034ca <HAL_GPIO_Init+0x12e>
 80033de:	4a98      	ldr	r2, [pc, #608]	; (8003640 <HAL_GPIO_Init+0x2a4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d058      	beq.n	8003496 <HAL_GPIO_Init+0xfa>
 80033e4:	4a96      	ldr	r2, [pc, #600]	; (8003640 <HAL_GPIO_Init+0x2a4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d86f      	bhi.n	80034ca <HAL_GPIO_Init+0x12e>
 80033ea:	4a96      	ldr	r2, [pc, #600]	; (8003644 <HAL_GPIO_Init+0x2a8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d052      	beq.n	8003496 <HAL_GPIO_Init+0xfa>
 80033f0:	4a94      	ldr	r2, [pc, #592]	; (8003644 <HAL_GPIO_Init+0x2a8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d869      	bhi.n	80034ca <HAL_GPIO_Init+0x12e>
 80033f6:	4a94      	ldr	r2, [pc, #592]	; (8003648 <HAL_GPIO_Init+0x2ac>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d04c      	beq.n	8003496 <HAL_GPIO_Init+0xfa>
 80033fc:	4a92      	ldr	r2, [pc, #584]	; (8003648 <HAL_GPIO_Init+0x2ac>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d863      	bhi.n	80034ca <HAL_GPIO_Init+0x12e>
 8003402:	4a92      	ldr	r2, [pc, #584]	; (800364c <HAL_GPIO_Init+0x2b0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d046      	beq.n	8003496 <HAL_GPIO_Init+0xfa>
 8003408:	4a90      	ldr	r2, [pc, #576]	; (800364c <HAL_GPIO_Init+0x2b0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d85d      	bhi.n	80034ca <HAL_GPIO_Init+0x12e>
 800340e:	2b12      	cmp	r3, #18
 8003410:	d82a      	bhi.n	8003468 <HAL_GPIO_Init+0xcc>
 8003412:	2b12      	cmp	r3, #18
 8003414:	d859      	bhi.n	80034ca <HAL_GPIO_Init+0x12e>
 8003416:	a201      	add	r2, pc, #4	; (adr r2, 800341c <HAL_GPIO_Init+0x80>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	08003497 	.word	0x08003497
 8003420:	08003471 	.word	0x08003471
 8003424:	08003483 	.word	0x08003483
 8003428:	080034c5 	.word	0x080034c5
 800342c:	080034cb 	.word	0x080034cb
 8003430:	080034cb 	.word	0x080034cb
 8003434:	080034cb 	.word	0x080034cb
 8003438:	080034cb 	.word	0x080034cb
 800343c:	080034cb 	.word	0x080034cb
 8003440:	080034cb 	.word	0x080034cb
 8003444:	080034cb 	.word	0x080034cb
 8003448:	080034cb 	.word	0x080034cb
 800344c:	080034cb 	.word	0x080034cb
 8003450:	080034cb 	.word	0x080034cb
 8003454:	080034cb 	.word	0x080034cb
 8003458:	080034cb 	.word	0x080034cb
 800345c:	080034cb 	.word	0x080034cb
 8003460:	08003479 	.word	0x08003479
 8003464:	0800348d 	.word	0x0800348d
 8003468:	4a79      	ldr	r2, [pc, #484]	; (8003650 <HAL_GPIO_Init+0x2b4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800346e:	e02c      	b.n	80034ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	623b      	str	r3, [r7, #32]
          break;
 8003476:	e029      	b.n	80034cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	3304      	adds	r3, #4
 800347e:	623b      	str	r3, [r7, #32]
          break;
 8003480:	e024      	b.n	80034cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	3308      	adds	r3, #8
 8003488:	623b      	str	r3, [r7, #32]
          break;
 800348a:	e01f      	b.n	80034cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	330c      	adds	r3, #12
 8003492:	623b      	str	r3, [r7, #32]
          break;
 8003494:	e01a      	b.n	80034cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800349e:	2304      	movs	r3, #4
 80034a0:	623b      	str	r3, [r7, #32]
          break;
 80034a2:	e013      	b.n	80034cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d105      	bne.n	80034b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034ac:	2308      	movs	r3, #8
 80034ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	611a      	str	r2, [r3, #16]
          break;
 80034b6:	e009      	b.n	80034cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034b8:	2308      	movs	r3, #8
 80034ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	615a      	str	r2, [r3, #20]
          break;
 80034c2:	e003      	b.n	80034cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034c4:	2300      	movs	r3, #0
 80034c6:	623b      	str	r3, [r7, #32]
          break;
 80034c8:	e000      	b.n	80034cc <HAL_GPIO_Init+0x130>
          break;
 80034ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2bff      	cmp	r3, #255	; 0xff
 80034d0:	d801      	bhi.n	80034d6 <HAL_GPIO_Init+0x13a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	e001      	b.n	80034da <HAL_GPIO_Init+0x13e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3304      	adds	r3, #4
 80034da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2bff      	cmp	r3, #255	; 0xff
 80034e0:	d802      	bhi.n	80034e8 <HAL_GPIO_Init+0x14c>
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	e002      	b.n	80034ee <HAL_GPIO_Init+0x152>
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	3b08      	subs	r3, #8
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	210f      	movs	r1, #15
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	401a      	ands	r2, r3
 8003500:	6a39      	ldr	r1, [r7, #32]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	431a      	orrs	r2, r3
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80b1 	beq.w	800367e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800351c:	4b4d      	ldr	r3, [pc, #308]	; (8003654 <HAL_GPIO_Init+0x2b8>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	4a4c      	ldr	r2, [pc, #304]	; (8003654 <HAL_GPIO_Init+0x2b8>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	6193      	str	r3, [r2, #24]
 8003528:	4b4a      	ldr	r3, [pc, #296]	; (8003654 <HAL_GPIO_Init+0x2b8>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003534:	4a48      	ldr	r2, [pc, #288]	; (8003658 <HAL_GPIO_Init+0x2bc>)
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	3302      	adds	r3, #2
 800353c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003540:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	220f      	movs	r2, #15
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4013      	ands	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a40      	ldr	r2, [pc, #256]	; (800365c <HAL_GPIO_Init+0x2c0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d013      	beq.n	8003588 <HAL_GPIO_Init+0x1ec>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a3f      	ldr	r2, [pc, #252]	; (8003660 <HAL_GPIO_Init+0x2c4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00d      	beq.n	8003584 <HAL_GPIO_Init+0x1e8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a3e      	ldr	r2, [pc, #248]	; (8003664 <HAL_GPIO_Init+0x2c8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d007      	beq.n	8003580 <HAL_GPIO_Init+0x1e4>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a3d      	ldr	r2, [pc, #244]	; (8003668 <HAL_GPIO_Init+0x2cc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d101      	bne.n	800357c <HAL_GPIO_Init+0x1e0>
 8003578:	2303      	movs	r3, #3
 800357a:	e006      	b.n	800358a <HAL_GPIO_Init+0x1ee>
 800357c:	2304      	movs	r3, #4
 800357e:	e004      	b.n	800358a <HAL_GPIO_Init+0x1ee>
 8003580:	2302      	movs	r3, #2
 8003582:	e002      	b.n	800358a <HAL_GPIO_Init+0x1ee>
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <HAL_GPIO_Init+0x1ee>
 8003588:	2300      	movs	r3, #0
 800358a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358c:	f002 0203 	and.w	r2, r2, #3
 8003590:	0092      	lsls	r2, r2, #2
 8003592:	4093      	lsls	r3, r2
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800359a:	492f      	ldr	r1, [pc, #188]	; (8003658 <HAL_GPIO_Init+0x2bc>)
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	089b      	lsrs	r3, r3, #2
 80035a0:	3302      	adds	r3, #2
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035b4:	4b2d      	ldr	r3, [pc, #180]	; (800366c <HAL_GPIO_Init+0x2d0>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	492c      	ldr	r1, [pc, #176]	; (800366c <HAL_GPIO_Init+0x2d0>)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]
 80035c0:	e006      	b.n	80035d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_GPIO_Init+0x2d0>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	4928      	ldr	r1, [pc, #160]	; (800366c <HAL_GPIO_Init+0x2d0>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d006      	beq.n	80035ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035dc:	4b23      	ldr	r3, [pc, #140]	; (800366c <HAL_GPIO_Init+0x2d0>)
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	4922      	ldr	r1, [pc, #136]	; (800366c <HAL_GPIO_Init+0x2d0>)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
 80035e8:	e006      	b.n	80035f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <HAL_GPIO_Init+0x2d0>)
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	491e      	ldr	r1, [pc, #120]	; (800366c <HAL_GPIO_Init+0x2d0>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_GPIO_Init+0x2d0>)
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	4918      	ldr	r1, [pc, #96]	; (800366c <HAL_GPIO_Init+0x2d0>)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	608b      	str	r3, [r1, #8]
 8003610:	e006      	b.n	8003620 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003612:	4b16      	ldr	r3, [pc, #88]	; (800366c <HAL_GPIO_Init+0x2d0>)
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	43db      	mvns	r3, r3
 800361a:	4914      	ldr	r1, [pc, #80]	; (800366c <HAL_GPIO_Init+0x2d0>)
 800361c:	4013      	ands	r3, r2
 800361e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d021      	beq.n	8003670 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800362c:	4b0f      	ldr	r3, [pc, #60]	; (800366c <HAL_GPIO_Init+0x2d0>)
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	490e      	ldr	r1, [pc, #56]	; (800366c <HAL_GPIO_Init+0x2d0>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	60cb      	str	r3, [r1, #12]
 8003638:	e021      	b.n	800367e <HAL_GPIO_Init+0x2e2>
 800363a:	bf00      	nop
 800363c:	10320000 	.word	0x10320000
 8003640:	10310000 	.word	0x10310000
 8003644:	10220000 	.word	0x10220000
 8003648:	10210000 	.word	0x10210000
 800364c:	10120000 	.word	0x10120000
 8003650:	10110000 	.word	0x10110000
 8003654:	40021000 	.word	0x40021000
 8003658:	40010000 	.word	0x40010000
 800365c:	40010800 	.word	0x40010800
 8003660:	40010c00 	.word	0x40010c00
 8003664:	40011000 	.word	0x40011000
 8003668:	40011400 	.word	0x40011400
 800366c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <HAL_GPIO_Init+0x304>)
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	43db      	mvns	r3, r3
 8003678:	4909      	ldr	r1, [pc, #36]	; (80036a0 <HAL_GPIO_Init+0x304>)
 800367a:	4013      	ands	r3, r2
 800367c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	3301      	adds	r3, #1
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	fa22 f303 	lsr.w	r3, r2, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	f47f ae8e 	bne.w	80033b0 <HAL_GPIO_Init+0x14>
  }
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	372c      	adds	r7, #44	; 0x2c
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	40010400 	.word	0x40010400

080036a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	887b      	ldrh	r3, [r7, #2]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
 80036c0:	e001      	b.n	80036c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr

080036d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	460b      	mov	r3, r1
 80036dc:	807b      	strh	r3, [r7, #2]
 80036de:	4613      	mov	r3, r2
 80036e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036e2:	787b      	ldrb	r3, [r7, #1]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036e8:	887a      	ldrh	r2, [r7, #2]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036ee:	e003      	b.n	80036f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	041a      	lsls	r2, r3, #16
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	611a      	str	r2, [r3, #16]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003714:	887a      	ldrh	r2, [r7, #2]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4013      	ands	r3, r2
 800371a:	041a      	lsls	r2, r3, #16
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	43d9      	mvns	r1, r3
 8003720:	887b      	ldrh	r3, [r7, #2]
 8003722:	400b      	ands	r3, r1
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	611a      	str	r2, [r3, #16]
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	b08b      	sub	sp, #44	; 0x2c
 8003738:	af06      	add	r7, sp, #24
 800373a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e0fd      	b.n	8003942 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f007 f87a 	bl	800a854 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2203      	movs	r2, #3
 8003764:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f003 f8dd 	bl	800692c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	687e      	ldr	r6, [r7, #4]
 800377a:	466d      	mov	r5, sp
 800377c:	f106 0410 	add.w	r4, r6, #16
 8003780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	602b      	str	r3, [r5, #0]
 8003788:	1d33      	adds	r3, r6, #4
 800378a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800378c:	6838      	ldr	r0, [r7, #0]
 800378e:	f003 f8a7 	bl	80068e0 <USB_CoreInit>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0ce      	b.n	8003942 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 f8d8 	bl	8006960 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b0:	2300      	movs	r3, #0
 80037b2:	73fb      	strb	r3, [r7, #15]
 80037b4:	e04c      	b.n	8003850 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	440b      	add	r3, r1
 80037c6:	3301      	adds	r3, #1
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	440b      	add	r3, r1
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037e0:	7bfa      	ldrb	r2, [r7, #15]
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	b298      	uxth	r0, r3
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	440b      	add	r3, r1
 80037f2:	3336      	adds	r3, #54	; 0x36
 80037f4:	4602      	mov	r2, r0
 80037f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	440b      	add	r3, r1
 8003808:	3303      	adds	r3, #3
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800380e:	7bfa      	ldrb	r2, [r7, #15]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	440b      	add	r3, r1
 800381c:	3338      	adds	r3, #56	; 0x38
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003822:	7bfa      	ldrb	r2, [r7, #15]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	440b      	add	r3, r1
 8003830:	333c      	adds	r3, #60	; 0x3c
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	440b      	add	r3, r1
 8003844:	3340      	adds	r3, #64	; 0x40
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	3301      	adds	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	7bfa      	ldrb	r2, [r7, #15]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	429a      	cmp	r2, r3
 8003858:	d3ad      	bcc.n	80037b6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
 800385e:	e044      	b.n	80038ea <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	440b      	add	r3, r1
 800386e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003876:	7bfa      	ldrb	r2, [r7, #15]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	440b      	add	r3, r1
 8003884:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800388c:	7bfa      	ldrb	r2, [r7, #15]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	440b      	add	r3, r1
 800389a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038a2:	7bfa      	ldrb	r2, [r7, #15]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	440b      	add	r3, r1
 80038b0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	440b      	add	r3, r1
 80038c6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038ce:	7bfa      	ldrb	r2, [r7, #15]
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	440b      	add	r3, r1
 80038dc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	3301      	adds	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d3b5      	bcc.n	8003860 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	687e      	ldr	r6, [r7, #4]
 80038fc:	466d      	mov	r5, sp
 80038fe:	f106 0410 	add.w	r4, r6, #16
 8003902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	602b      	str	r3, [r5, #0]
 800390a:	1d33      	adds	r3, r6, #4
 800390c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800390e:	6838      	ldr	r0, [r7, #0]
 8003910:	f003 f832 	bl	8006978 <USB_DevInit>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e00d      	b.n	8003942 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f004 ffcc 	bl	80088d8 <USB_DevDisconnect>

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800394a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_PCD_Start+0x16>
 800395c:	2302      	movs	r3, #2
 800395e:	e016      	b.n	800398e <HAL_PCD_Start+0x44>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f002 ffc7 	bl	8006900 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003972:	2101      	movs	r1, #1
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f007 f9e0 	bl	800ad3a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f004 ffa0 	bl	80088c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b088      	sub	sp, #32
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f004 ffa2 	bl	80088ec <USB_ReadInterrupts>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b2:	d102      	bne.n	80039ba <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fb61 	bl	800407c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f004 ff94 	bl	80088ec <USB_ReadInterrupts>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ce:	d112      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039d8:	b29a      	uxth	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e2:	b292      	uxth	r2, r2
 80039e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f006 ffae 	bl	800a94a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80039ee:	2100      	movs	r1, #0
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f925 	bl	8003c40 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f004 ff76 	bl	80088ec <USB_ReadInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a0a:	d10b      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a1e:	b292      	uxth	r2, r2
 8003a20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f004 ff5f 	bl	80088ec <USB_ReadInterrupts>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a38:	d10b      	bne.n	8003a52 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a4c:	b292      	uxth	r2, r2
 8003a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f004 ff48 	bl	80088ec <USB_ReadInterrupts>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a66:	d126      	bne.n	8003ab6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0204 	bic.w	r2, r2, #4
 8003a7a:	b292      	uxth	r2, r2
 8003a7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0208 	bic.w	r2, r2, #8
 8003a92:	b292      	uxth	r2, r2
 8003a94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f006 ff8f 	bl	800a9bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ab0:	b292      	uxth	r2, r2
 8003ab2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f004 ff16 	bl	80088ec <USB_ReadInterrupts>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aca:	f040 8084 	bne.w	8003bd6 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003ace:	2300      	movs	r3, #0
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e011      	b.n	8003af8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	7ffb      	ldrb	r3, [r7, #31]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	441a      	add	r2, r3
 8003ae0:	7ffb      	ldrb	r3, [r7, #31]
 8003ae2:	8812      	ldrh	r2, [r2, #0]
 8003ae4:	b292      	uxth	r2, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	f107 0120 	add.w	r1, r7, #32
 8003aec:	440b      	add	r3, r1
 8003aee:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003af2:	7ffb      	ldrb	r3, [r7, #31]
 8003af4:	3301      	adds	r3, #1
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	7ffb      	ldrb	r3, [r7, #31]
 8003afa:	2b07      	cmp	r3, #7
 8003afc:	d9ea      	bls.n	8003ad4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0201 	orr.w	r2, r2, #1
 8003b10:	b292      	uxth	r2, r2
 8003b12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	b292      	uxth	r2, r2
 8003b2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003b2e:	bf00      	nop
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f6      	beq.n	8003b30 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b54:	b292      	uxth	r2, r2
 8003b56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e010      	b.n	8003b82 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003b60:	7ffb      	ldrb	r3, [r7, #31]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6812      	ldr	r2, [r2, #0]
 8003b66:	4611      	mov	r1, r2
 8003b68:	7ffa      	ldrb	r2, [r7, #31]
 8003b6a:	0092      	lsls	r2, r2, #2
 8003b6c:	440a      	add	r2, r1
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	f107 0120 	add.w	r1, r7, #32
 8003b74:	440b      	add	r3, r1
 8003b76:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003b7a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003b7c:	7ffb      	ldrb	r3, [r7, #31]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	7ffb      	ldrb	r3, [r7, #31]
 8003b84:	2b07      	cmp	r3, #7
 8003b86:	d9eb      	bls.n	8003b60 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0208 	orr.w	r2, r2, #8
 8003b9a:	b292      	uxth	r2, r2
 8003b9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb2:	b292      	uxth	r2, r2
 8003bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0204 	orr.w	r2, r2, #4
 8003bca:	b292      	uxth	r2, r2
 8003bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f006 fed9 	bl	800a988 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f004 fe86 	bl	80088ec <USB_ReadInterrupts>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bea:	d10e      	bne.n	8003c0a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bfe:	b292      	uxth	r2, r2
 8003c00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f006 fe92 	bl	800a92e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f004 fe6c 	bl	80088ec <USB_ReadInterrupts>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1e:	d10b      	bne.n	8003c38 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c32:	b292      	uxth	r2, r2
 8003c34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003c38:	bf00      	nop
 8003c3a:	3720      	adds	r7, #32
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_PCD_SetAddress+0x1a>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e013      	b.n	8003c82 <HAL_PCD_SetAddress+0x42>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f004 fe13 	bl	800889e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	4608      	mov	r0, r1
 8003c94:	4611      	mov	r1, r2
 8003c96:	461a      	mov	r2, r3
 8003c98:	4603      	mov	r3, r0
 8003c9a:	70fb      	strb	r3, [r7, #3]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	803b      	strh	r3, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	da0e      	bge.n	8003cce <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	705a      	strb	r2, [r3, #1]
 8003ccc:	e00e      	b.n	8003cec <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	f003 0207 	and.w	r2, r3, #7
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cf8:	883a      	ldrh	r2, [r7, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	78ba      	ldrb	r2, [r7, #2]
 8003d02:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	785b      	ldrb	r3, [r3, #1]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d004      	beq.n	8003d16 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d16:	78bb      	ldrb	r3, [r7, #2]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d102      	bne.n	8003d22 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_PCD_EP_Open+0xa6>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e00e      	b.n	8003d4e <HAL_PCD_EP_Open+0xc4>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68f9      	ldr	r1, [r7, #12]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f002 fe3a 	bl	80069b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003d4c:	7afb      	ldrb	r3, [r7, #11]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	da0e      	bge.n	8003d88 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	705a      	strb	r2, [r3, #1]
 8003d86:	e00e      	b.n	8003da6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	f003 0207 	and.w	r2, r3, #7
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_PCD_EP_Close+0x6a>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e00e      	b.n	8003dde <HAL_PCD_EP_Close+0x88>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68f9      	ldr	r1, [r7, #12]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f003 f95c 	bl	800708c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	460b      	mov	r3, r1
 8003df4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003df6:	7afb      	ldrb	r3, [r7, #11]
 8003df8:	f003 0207 	and.w	r2, r3, #7
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2200      	movs	r2, #0
 8003e24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e26:	7afb      	ldrb	r3, [r7, #11]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e32:	7afb      	ldrb	r3, [r7, #11]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d106      	bne.n	8003e4a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6979      	ldr	r1, [r7, #20]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f003 fb0e 	bl	8007464 <USB_EPStartXfer>
 8003e48:	e005      	b.n	8003e56 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6979      	ldr	r1, [r7, #20]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f003 fb07 	bl	8007464 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	f003 0207 	and.w	r2, r3, #7
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	440b      	add	r3, r1
 8003e7e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003e82:	681b      	ldr	r3, [r3, #0]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e9e:	7afb      	ldrb	r3, [r7, #11]
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eda:	7afb      	ldrb	r3, [r7, #11]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6979      	ldr	r1, [r7, #20]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f003 fab4 	bl	8007464 <USB_EPStartXfer>
 8003efc:	e005      	b.n	8003f0a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6979      	ldr	r1, [r7, #20]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f003 faad 	bl	8007464 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	f003 0207 	and.w	r2, r3, #7
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d901      	bls.n	8003f32 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e04c      	b.n	8003fcc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	da0e      	bge.n	8003f58 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	705a      	strb	r2, [r3, #1]
 8003f56:	e00c      	b.n	8003f72 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	4413      	add	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_PCD_EP_SetStall+0x7e>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e01c      	b.n	8003fcc <HAL_PCD_EP_SetStall+0xb8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68f9      	ldr	r1, [r7, #12]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f004 fb7f 	bl	80086a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d108      	bne.n	8003fc2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f004 fca4 	bl	800890a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	f003 020f 	and.w	r2, r3, #15
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d901      	bls.n	8003ff2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e040      	b.n	8004074 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	da0e      	bge.n	8004018 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	705a      	strb	r2, [r3, #1]
 8004016:	e00e      	b.n	8004036 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	f003 0207 	and.w	r2, r3, #7
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4413      	add	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	b2da      	uxtb	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_PCD_EP_ClrStall+0x82>
 8004052:	2302      	movs	r3, #2
 8004054:	e00e      	b.n	8004074 <HAL_PCD_EP_ClrStall+0xa0>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68f9      	ldr	r1, [r7, #12]
 8004064:	4618      	mov	r0, r3
 8004066:	f004 fb6d 	bl	8008744 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08e      	sub	sp, #56	; 0x38
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004084:	e2df      	b.n	8004646 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800408e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004090:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800409c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f040 8158 	bne.w	8004356 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80040a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d152      	bne.n	8004156 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80040bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c0:	81fb      	strh	r3, [r7, #14]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	89fb      	ldrh	r3, [r7, #14]
 80040c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3328      	adds	r3, #40	; 0x28
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	3302      	adds	r3, #2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	695a      	ldr	r2, [r3, #20]
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	441a      	add	r2, r3
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004114:	2100      	movs	r1, #0
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f006 fbef 	bl	800a8fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 828e 	beq.w	8004646 <PCD_EP_ISR_Handler+0x5ca>
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	f040 8289 	bne.w	8004646 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004140:	b2da      	uxtb	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	b292      	uxth	r2, r2
 8004148:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004154:	e277      	b.n	8004646 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004166:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800416c:	2b00      	cmp	r3, #0
 800416e:	d034      	beq.n	80041da <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004178:	b29b      	uxth	r3, r3
 800417a:	461a      	mov	r2, r3
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	3306      	adds	r3, #6
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f004 fbfb 	bl	80089aa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80041c0:	4013      	ands	r3, r2
 80041c2:	823b      	strh	r3, [r7, #16]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	8a3a      	ldrh	r2, [r7, #16]
 80041ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041ce:	b292      	uxth	r2, r2
 80041d0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f006 fb64 	bl	800a8a0 <HAL_PCD_SetupStageCallback>
 80041d8:	e235      	b.n	8004646 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80041da:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f280 8231 	bge.w	8004646 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80041f0:	4013      	ands	r3, r2
 80041f2:	83bb      	strh	r3, [r7, #28]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	8bba      	ldrh	r2, [r7, #28]
 80041fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041fe:	b292      	uxth	r2, r2
 8004200:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800420a:	b29b      	uxth	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	3306      	adds	r3, #6
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d019      	beq.n	800426a <PCD_EP_ISR_Handler+0x1ee>
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d015      	beq.n	800426a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	6959      	ldr	r1, [r3, #20]
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800424e:	b29b      	uxth	r3, r3
 8004250:	f004 fbab 	bl	80089aa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	441a      	add	r2, r3
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004262:	2100      	movs	r1, #0
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f006 fb2d 	bl	800a8c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004278:	b29b      	uxth	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	4413      	add	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d112      	bne.n	80042b8 <PCD_EP_ISR_Handler+0x23c>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800429c:	b29a      	uxth	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	801a      	strh	r2, [r3, #0]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	801a      	strh	r2, [r3, #0]
 80042b6:	e02f      	b.n	8004318 <PCD_EP_ISR_Handler+0x29c>
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b3e      	cmp	r3, #62	; 0x3e
 80042be:	d813      	bhi.n	80042e8 <PCD_EP_ISR_Handler+0x26c>
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	085b      	lsrs	r3, r3, #1
 80042c6:	633b      	str	r3, [r7, #48]	; 0x30
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <PCD_EP_ISR_Handler+0x25e>
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	3301      	adds	r3, #1
 80042d8:	633b      	str	r3, [r7, #48]	; 0x30
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	b29b      	uxth	r3, r3
 80042de:	029b      	lsls	r3, r3, #10
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	801a      	strh	r2, [r3, #0]
 80042e6:	e017      	b.n	8004318 <PCD_EP_ISR_Handler+0x29c>
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	633b      	str	r3, [r7, #48]	; 0x30
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <PCD_EP_ISR_Handler+0x286>
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	3b01      	subs	r3, #1
 8004300:	633b      	str	r3, [r7, #48]	; 0x30
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	b29b      	uxth	r3, r3
 8004306:	029b      	lsls	r3, r3, #10
 8004308:	b29b      	uxth	r3, r3
 800430a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004312:	b29a      	uxth	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b29b      	uxth	r3, r3
 8004320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004328:	827b      	strh	r3, [r7, #18]
 800432a:	8a7b      	ldrh	r3, [r7, #18]
 800432c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004330:	827b      	strh	r3, [r7, #18]
 8004332:	8a7b      	ldrh	r3, [r7, #18]
 8004334:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004338:	827b      	strh	r3, [r7, #18]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	8a7b      	ldrh	r3, [r7, #18]
 8004340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004350:	b29b      	uxth	r3, r3
 8004352:	8013      	strh	r3, [r2, #0]
 8004354:	e177      	b.n	8004646 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004368:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800436c:	2b00      	cmp	r3, #0
 800436e:	f280 80ea 	bge.w	8004546 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29a      	uxth	r2, r3
 8004384:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004388:	4013      	ands	r3, r2
 800438a:	853b      	strh	r3, [r7, #40]	; 0x28
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800439c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043a0:	b292      	uxth	r2, r2
 80043a2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80043a4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4413      	add	r3, r2
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	7b1b      	ldrb	r3, [r3, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d122      	bne.n	8004408 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4413      	add	r3, r2
 80043d6:	3306      	adds	r3, #6
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ea:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80043ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 8087 	beq.w	8004502 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	6959      	ldr	r1, [r3, #20]
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	88da      	ldrh	r2, [r3, #6]
 8004400:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004402:	f004 fad2 	bl	80089aa <USB_ReadPMA>
 8004406:	e07c      	b.n	8004502 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	78db      	ldrb	r3, [r3, #3]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d108      	bne.n	8004422 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004410:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004412:	461a      	mov	r2, r3
 8004414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f923 	bl	8004662 <HAL_PCD_EP_DB_Receive>
 800441c:	4603      	mov	r3, r0
 800441e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004420:	e06f      	b.n	8004502 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	b29b      	uxth	r3, r3
 8004434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443c:	847b      	strh	r3, [r7, #34]	; 0x22
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	441a      	add	r2, r3
 800444c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800444e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800445e:	b29b      	uxth	r3, r3
 8004460:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d021      	beq.n	80044c0 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004484:	b29b      	uxth	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4413      	add	r3, r2
 8004490:	3302      	adds	r3, #2
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044a4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80044a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02a      	beq.n	8004502 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	6959      	ldr	r1, [r3, #20]
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	891a      	ldrh	r2, [r3, #8]
 80044b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044ba:	f004 fa76 	bl	80089aa <USB_ReadPMA>
 80044be:	e020      	b.n	8004502 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4413      	add	r3, r2
 80044d4:	3306      	adds	r3, #6
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044e8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80044ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	6959      	ldr	r1, [r3, #20]
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	895a      	ldrh	r2, [r3, #10]
 80044fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044fe:	f004 fa54 	bl	80089aa <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	69da      	ldr	r2, [r3, #28]
 8004506:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004508:	441a      	add	r2, r3
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004514:	441a      	add	r2, r3
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d004      	beq.n	800452c <PCD_EP_ISR_Handler+0x4b0>
 8004522:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	429a      	cmp	r2, r3
 800452a:	d206      	bcs.n	800453a <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	4619      	mov	r1, r3
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f006 f9c6 	bl	800a8c4 <HAL_PCD_DataOutStageCallback>
 8004538:	e005      	b.n	8004546 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004540:	4618      	mov	r0, r3
 8004542:	f002 ff8f 	bl	8007464 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004546:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454c:	2b00      	cmp	r3, #0
 800454e:	d07a      	beq.n	8004646 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8004550:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	843b      	strh	r3, [r7, #32]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	441a      	add	r2, r3
 800458e:	8c3b      	ldrh	r3, [r7, #32]
 8004590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004598:	b29b      	uxth	r3, r3
 800459a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	78db      	ldrb	r3, [r3, #3]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d108      	bne.n	80045b6 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d146      	bne.n	800463a <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80045ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d141      	bne.n	800463a <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045be:	b29b      	uxth	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4413      	add	r3, r2
 80045ca:	3302      	adds	r3, #2
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045de:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	8bfb      	ldrh	r3, [r7, #30]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d906      	bls.n	80045f8 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	8bfb      	ldrh	r3, [r7, #30]
 80045f0:	1ad2      	subs	r2, r2, r3
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	619a      	str	r2, [r3, #24]
 80045f6:	e002      	b.n	80045fe <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	2200      	movs	r2, #0
 80045fc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	4619      	mov	r1, r3
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f006 f974 	bl	800a8fa <HAL_PCD_DataInStageCallback>
 8004612:	e018      	b.n	8004646 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	695a      	ldr	r2, [r3, #20]
 8004618:	8bfb      	ldrh	r3, [r7, #30]
 800461a:	441a      	add	r2, r3
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	69da      	ldr	r2, [r3, #28]
 8004624:	8bfb      	ldrh	r3, [r7, #30]
 8004626:	441a      	add	r2, r3
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004632:	4618      	mov	r0, r3
 8004634:	f002 ff16 	bl	8007464 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004638:	e005      	b.n	8004646 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800463a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800463c:	461a      	mov	r2, r3
 800463e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f91b 	bl	800487c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800464e:	b29b      	uxth	r3, r3
 8004650:	b21b      	sxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	f6ff ad17 	blt.w	8004086 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3738      	adds	r7, #56	; 0x38
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b088      	sub	sp, #32
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	4613      	mov	r3, r2
 800466e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d07e      	beq.n	8004778 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004682:	b29b      	uxth	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	3302      	adds	r3, #2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	699a      	ldr	r2, [r3, #24]
 80046a8:	8b7b      	ldrh	r3, [r7, #26]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d306      	bcc.n	80046bc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	8b7b      	ldrh	r3, [r7, #26]
 80046b4:	1ad2      	subs	r2, r2, r3
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	619a      	str	r2, [r3, #24]
 80046ba:	e002      	b.n	80046c2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2200      	movs	r2, #0
 80046c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d123      	bne.n	8004712 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e4:	833b      	strh	r3, [r7, #24]
 80046e6:	8b3b      	ldrh	r3, [r7, #24]
 80046e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046ec:	833b      	strh	r3, [r7, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	441a      	add	r2, r3
 80046fc:	8b3b      	ldrh	r3, [r7, #24]
 80046fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800470a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470e:	b29b      	uxth	r3, r3
 8004710:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01f      	beq.n	800475c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	82fb      	strh	r3, [r7, #22]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	441a      	add	r2, r3
 8004746:	8afb      	ldrh	r3, [r7, #22]
 8004748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800474c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004754:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004758:	b29b      	uxth	r3, r3
 800475a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800475c:	8b7b      	ldrh	r3, [r7, #26]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8087 	beq.w	8004872 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6959      	ldr	r1, [r3, #20]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	891a      	ldrh	r2, [r3, #8]
 8004770:	8b7b      	ldrh	r3, [r7, #26]
 8004772:	f004 f91a 	bl	80089aa <USB_ReadPMA>
 8004776:	e07c      	b.n	8004872 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004780:	b29b      	uxth	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	4413      	add	r3, r2
 800478c:	3306      	adds	r3, #6
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	8b7b      	ldrh	r3, [r7, #26]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d306      	bcc.n	80047ba <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	8b7b      	ldrh	r3, [r7, #26]
 80047b2:	1ad2      	subs	r2, r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	619a      	str	r2, [r3, #24]
 80047b8:	e002      	b.n	80047c0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2200      	movs	r2, #0
 80047be:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d123      	bne.n	8004810 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	83fb      	strh	r3, [r7, #30]
 80047e4:	8bfb      	ldrh	r3, [r7, #30]
 80047e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047ea:	83fb      	strh	r3, [r7, #30]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	8bfb      	ldrh	r3, [r7, #30]
 80047fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480c:	b29b      	uxth	r3, r3
 800480e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004810:	88fb      	ldrh	r3, [r7, #6]
 8004812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d11f      	bne.n	800485a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004834:	83bb      	strh	r3, [r7, #28]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	441a      	add	r2, r3
 8004844:	8bbb      	ldrh	r3, [r7, #28]
 8004846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800484a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004852:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004856:	b29b      	uxth	r3, r3
 8004858:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800485a:	8b7b      	ldrh	r3, [r7, #26]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	6959      	ldr	r1, [r3, #20]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	895a      	ldrh	r2, [r3, #10]
 800486c:	8b7b      	ldrh	r3, [r7, #26]
 800486e:	f004 f89c 	bl	80089aa <USB_ReadPMA>
    }
  }

  return count;
 8004872:	8b7b      	ldrh	r3, [r7, #26]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b094      	sub	sp, #80	; 0x50
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	4613      	mov	r3, r2
 8004888:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8138 	beq.w	8004b06 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800489e:	b29b      	uxth	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4413      	add	r3, r2
 80048aa:	3302      	adds	r3, #2
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d907      	bls.n	80048de <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048d6:	1ad2      	subs	r2, r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	619a      	str	r2, [r3, #24]
 80048dc:	e002      	b.n	80048e4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2200      	movs	r2, #0
 80048e2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d12c      	bne.n	8004946 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	4619      	mov	r1, r3
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f006 f801 	bl	800a8fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048f8:	88fb      	ldrh	r3, [r7, #6]
 80048fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 823a 	beq.w	8004d78 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491e:	82fb      	strh	r3, [r7, #22]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	441a      	add	r2, r3
 800492e:	8afb      	ldrh	r3, [r7, #22]
 8004930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004938:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800493c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004940:	b29b      	uxth	r3, r3
 8004942:	8013      	strh	r3, [r2, #0]
 8004944:	e218      	b.n	8004d78 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01f      	beq.n	8004990 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	441a      	add	r2, r3
 800497a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800497c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498c:	b29b      	uxth	r3, r3
 800498e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004996:	2b01      	cmp	r3, #1
 8004998:	f040 81ee 	bne.w	8004d78 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049a4:	441a      	add	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049b2:	441a      	add	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	6a1a      	ldr	r2, [r3, #32]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d309      	bcc.n	80049d8 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	6a1a      	ldr	r2, [r3, #32]
 80049ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d0:	1ad2      	subs	r2, r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	621a      	str	r2, [r3, #32]
 80049d6:	e015      	b.n	8004a04 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d107      	bne.n	80049f0 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80049e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049e4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049ee:	e009      	b.n	8004a04 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2200      	movs	r2, #0
 8004a02:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d155      	bne.n	8004ab8 <HAL_PCD_EP_DB_Transmit+0x23c>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	4413      	add	r3, r2
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	011a      	lsls	r2, r3, #4
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d112      	bne.n	8004a60 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	801a      	strh	r2, [r3, #0]
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	801a      	strh	r2, [r3, #0]
 8004a5e:	e047      	b.n	8004af0 <HAL_PCD_EP_DB_Transmit+0x274>
 8004a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a62:	2b3e      	cmp	r3, #62	; 0x3e
 8004a64:	d811      	bhi.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x20e>
 8004a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a68:	085b      	lsrs	r3, r3, #1
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_PCD_EP_DB_Transmit+0x200>
 8004a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a78:	3301      	adds	r3, #1
 8004a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	029b      	lsls	r3, r3, #10
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	801a      	strh	r2, [r3, #0]
 8004a88:	e032      	b.n	8004af0 <HAL_PCD_EP_DB_Transmit+0x274>
 8004a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <HAL_PCD_EP_DB_Transmit+0x224>
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	029b      	lsls	r3, r3, #10
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	801a      	strh	r2, [r3, #0]
 8004ab6:	e01b      	b.n	8004af0 <HAL_PCD_EP_DB_Transmit+0x274>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d117      	bne.n	8004af0 <HAL_PCD_EP_DB_Transmit+0x274>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	4413      	add	r3, r2
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	011a      	lsls	r2, r3, #4
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ae6:	623b      	str	r3, [r7, #32]
 8004ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	6959      	ldr	r1, [r3, #20]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	891a      	ldrh	r2, [r3, #8]
 8004afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f003 ff0e 	bl	8008920 <USB_WritePMA>
 8004b04:	e138      	b.n	8004d78 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	461a      	mov	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4413      	add	r3, r2
 8004b1a:	3306      	adds	r3, #6
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b2e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d307      	bcc.n	8004b4e <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b46:	1ad2      	subs	r2, r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	619a      	str	r2, [r3, #24]
 8004b4c:	e002      	b.n	8004b54 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2200      	movs	r2, #0
 8004b52:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d12e      	bne.n	8004bba <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	4619      	mov	r1, r3
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f005 fec9 	bl	800a8fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 8102 	bne.w	8004d78 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	441a      	add	r2, r3
 8004ba0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	8013      	strh	r3, [r2, #0]
 8004bb8:	e0de      	b.n	8004d78 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d11f      	bne.n	8004c04 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	867b      	strh	r3, [r7, #50]	; 0x32
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	f040 80b4 	bne.w	8004d78 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	695a      	ldr	r2, [r3, #20]
 8004c14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c18:	441a      	add	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	69da      	ldr	r2, [r3, #28]
 8004c22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c26:	441a      	add	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	6a1a      	ldr	r2, [r3, #32]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d309      	bcc.n	8004c4c <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6a1a      	ldr	r2, [r3, #32]
 8004c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c44:	1ad2      	subs	r2, r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	621a      	str	r2, [r3, #32]
 8004c4a:	e015      	b.n	8004c78 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d107      	bne.n	8004c64 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8004c54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c58:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004c62:	e009      	b.n	8004c78 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	785b      	ldrb	r3, [r3, #1]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d155      	bne.n	8004d32 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	4413      	add	r3, r2
 8004c9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	011a      	lsls	r2, r3, #4
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
 8004cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d112      	bne.n	8004cda <HAL_PCD_EP_DB_Transmit+0x45e>
 8004cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd6:	801a      	strh	r2, [r3, #0]
 8004cd8:	e044      	b.n	8004d64 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cdc:	2b3e      	cmp	r3, #62	; 0x3e
 8004cde:	d811      	bhi.n	8004d04 <HAL_PCD_EP_DB_Transmit+0x488>
 8004ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	029b      	lsls	r3, r3, #10
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d00:	801a      	strh	r2, [r3, #0]
 8004d02:	e02f      	b.n	8004d64 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d102      	bne.n	8004d1a <HAL_PCD_EP_DB_Transmit+0x49e>
 8004d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d16:	3b01      	subs	r3, #1
 8004d18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	029b      	lsls	r3, r3, #10
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2e:	801a      	strh	r2, [r3, #0]
 8004d30:	e018      	b.n	8004d64 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	785b      	ldrb	r3, [r3, #1]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d114      	bne.n	8004d64 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d48:	4413      	add	r3, r2
 8004d4a:	643b      	str	r3, [r7, #64]	; 0x40
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	011a      	lsls	r2, r3, #4
 8004d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d54:	4413      	add	r3, r2
 8004d56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d62:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6959      	ldr	r1, [r3, #20]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	895a      	ldrh	r2, [r3, #10]
 8004d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f003 fdd4 	bl	8008920 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d92:	82bb      	strh	r3, [r7, #20]
 8004d94:	8abb      	ldrh	r3, [r7, #20]
 8004d96:	f083 0310 	eor.w	r3, r3, #16
 8004d9a:	82bb      	strh	r3, [r7, #20]
 8004d9c:	8abb      	ldrh	r3, [r7, #20]
 8004d9e:	f083 0320 	eor.w	r3, r3, #32
 8004da2:	82bb      	strh	r3, [r7, #20]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	441a      	add	r2, r3
 8004db2:	8abb      	ldrh	r3, [r7, #20]
 8004db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3750      	adds	r7, #80	; 0x50
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b087      	sub	sp, #28
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	607b      	str	r3, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	817b      	strh	r3, [r7, #10]
 8004de0:	4613      	mov	r3, r2
 8004de2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004de4:	897b      	ldrh	r3, [r7, #10]
 8004de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00b      	beq.n	8004e08 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004df0:	897b      	ldrh	r3, [r7, #10]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	e009      	b.n	8004e1c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e08:	897a      	ldrh	r2, [r7, #10]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4413      	add	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004e1c:	893b      	ldrh	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d107      	bne.n	8004e32 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2200      	movs	r2, #0
 8004e26:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	80da      	strh	r2, [r3, #6]
 8004e30:	e00b      	b.n	8004e4a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2201      	movs	r2, #1
 8004e36:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	0c1b      	lsrs	r3, r3, #16
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr
	...

08004e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e26c      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 8087 	beq.w	8004f86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e78:	4b92      	ldr	r3, [pc, #584]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d00c      	beq.n	8004e9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e84:	4b8f      	ldr	r3, [pc, #572]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 030c 	and.w	r3, r3, #12
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d112      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x5e>
 8004e90:	4b8c      	ldr	r3, [pc, #560]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9c:	d10b      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e9e:	4b89      	ldr	r3, [pc, #548]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d06c      	beq.n	8004f84 <HAL_RCC_OscConfig+0x12c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d168      	bne.n	8004f84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e246      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ebe:	d106      	bne.n	8004ece <HAL_RCC_OscConfig+0x76>
 8004ec0:	4b80      	ldr	r3, [pc, #512]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a7f      	ldr	r2, [pc, #508]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	e02e      	b.n	8004f2c <HAL_RCC_OscConfig+0xd4>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x98>
 8004ed6:	4b7b      	ldr	r3, [pc, #492]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a7a      	ldr	r2, [pc, #488]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	4b78      	ldr	r3, [pc, #480]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a77      	ldr	r2, [pc, #476]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e01d      	b.n	8004f2c <HAL_RCC_OscConfig+0xd4>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCC_OscConfig+0xbc>
 8004efa:	4b72      	ldr	r3, [pc, #456]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a71      	ldr	r2, [pc, #452]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	4b6f      	ldr	r3, [pc, #444]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a6e      	ldr	r2, [pc, #440]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e00b      	b.n	8004f2c <HAL_RCC_OscConfig+0xd4>
 8004f14:	4b6b      	ldr	r3, [pc, #428]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a6a      	ldr	r2, [pc, #424]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	4b68      	ldr	r3, [pc, #416]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a67      	ldr	r2, [pc, #412]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d013      	beq.n	8004f5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fd fa4a 	bl	80023cc <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f3c:	f7fd fa46 	bl	80023cc <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	; 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e1fa      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	4b5d      	ldr	r3, [pc, #372]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0xe4>
 8004f5a:	e014      	b.n	8004f86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5c:	f7fd fa36 	bl	80023cc <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f64:	f7fd fa32 	bl	80023cc <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b64      	cmp	r3, #100	; 0x64
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e1e6      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	4b53      	ldr	r3, [pc, #332]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f0      	bne.n	8004f64 <HAL_RCC_OscConfig+0x10c>
 8004f82:	e000      	b.n	8004f86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d063      	beq.n	800505a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f92:	4b4c      	ldr	r3, [pc, #304]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f003 030c 	and.w	r3, r3, #12
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f9e:	4b49      	ldr	r3, [pc, #292]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d11c      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x18c>
 8004faa:	4b46      	ldr	r3, [pc, #280]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d116      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fb6:	4b43      	ldr	r3, [pc, #268]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <HAL_RCC_OscConfig+0x176>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d001      	beq.n	8004fce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e1ba      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fce:	4b3d      	ldr	r3, [pc, #244]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4939      	ldr	r1, [pc, #228]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe2:	e03a      	b.n	800505a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d020      	beq.n	800502e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fec:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <HAL_RCC_OscConfig+0x270>)
 8004fee:	2201      	movs	r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff2:	f7fd f9eb 	bl	80023cc <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ffa:	f7fd f9e7 	bl	80023cc <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e19b      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500c:	4b2d      	ldr	r3, [pc, #180]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f0      	beq.n	8004ffa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005018:	4b2a      	ldr	r3, [pc, #168]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4927      	ldr	r1, [pc, #156]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8005028:	4313      	orrs	r3, r2
 800502a:	600b      	str	r3, [r1, #0]
 800502c:	e015      	b.n	800505a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800502e:	4b26      	ldr	r3, [pc, #152]	; (80050c8 <HAL_RCC_OscConfig+0x270>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005034:	f7fd f9ca 	bl	80023cc <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800503c:	f7fd f9c6 	bl	80023cc <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e17a      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504e:	4b1d      	ldr	r3, [pc, #116]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d03a      	beq.n	80050dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d019      	beq.n	80050a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800506e:	4b17      	ldr	r3, [pc, #92]	; (80050cc <HAL_RCC_OscConfig+0x274>)
 8005070:	2201      	movs	r2, #1
 8005072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005074:	f7fd f9aa 	bl	80023cc <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800507c:	f7fd f9a6 	bl	80023cc <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e15a      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508e:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <HAL_RCC_OscConfig+0x26c>)
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800509a:	2001      	movs	r0, #1
 800509c:	f000 fac4 	bl	8005628 <RCC_Delay>
 80050a0:	e01c      	b.n	80050dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a2:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <HAL_RCC_OscConfig+0x274>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a8:	f7fd f990 	bl	80023cc <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ae:	e00f      	b.n	80050d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b0:	f7fd f98c 	bl	80023cc <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d908      	bls.n	80050d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e140      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
 80050c2:	bf00      	nop
 80050c4:	40021000 	.word	0x40021000
 80050c8:	42420000 	.word	0x42420000
 80050cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d0:	4b9e      	ldr	r3, [pc, #632]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e9      	bne.n	80050b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 80a6 	beq.w	8005236 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ea:	2300      	movs	r3, #0
 80050ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ee:	4b97      	ldr	r3, [pc, #604]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10d      	bne.n	8005116 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fa:	4b94      	ldr	r3, [pc, #592]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	4a93      	ldr	r2, [pc, #588]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 8005100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005104:	61d3      	str	r3, [r2, #28]
 8005106:	4b91      	ldr	r3, [pc, #580]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005112:	2301      	movs	r3, #1
 8005114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005116:	4b8e      	ldr	r3, [pc, #568]	; (8005350 <HAL_RCC_OscConfig+0x4f8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d118      	bne.n	8005154 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005122:	4b8b      	ldr	r3, [pc, #556]	; (8005350 <HAL_RCC_OscConfig+0x4f8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a8a      	ldr	r2, [pc, #552]	; (8005350 <HAL_RCC_OscConfig+0x4f8>)
 8005128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800512e:	f7fd f94d 	bl	80023cc <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005136:	f7fd f949 	bl	80023cc <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b64      	cmp	r3, #100	; 0x64
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e0fd      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005148:	4b81      	ldr	r3, [pc, #516]	; (8005350 <HAL_RCC_OscConfig+0x4f8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0f0      	beq.n	8005136 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d106      	bne.n	800516a <HAL_RCC_OscConfig+0x312>
 800515c:	4b7b      	ldr	r3, [pc, #492]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	4a7a      	ldr	r2, [pc, #488]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	6213      	str	r3, [r2, #32]
 8005168:	e02d      	b.n	80051c6 <HAL_RCC_OscConfig+0x36e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10c      	bne.n	800518c <HAL_RCC_OscConfig+0x334>
 8005172:	4b76      	ldr	r3, [pc, #472]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	4a75      	ldr	r2, [pc, #468]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 8005178:	f023 0301 	bic.w	r3, r3, #1
 800517c:	6213      	str	r3, [r2, #32]
 800517e:	4b73      	ldr	r3, [pc, #460]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	4a72      	ldr	r2, [pc, #456]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 8005184:	f023 0304 	bic.w	r3, r3, #4
 8005188:	6213      	str	r3, [r2, #32]
 800518a:	e01c      	b.n	80051c6 <HAL_RCC_OscConfig+0x36e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2b05      	cmp	r3, #5
 8005192:	d10c      	bne.n	80051ae <HAL_RCC_OscConfig+0x356>
 8005194:	4b6d      	ldr	r3, [pc, #436]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	4a6c      	ldr	r2, [pc, #432]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 800519a:	f043 0304 	orr.w	r3, r3, #4
 800519e:	6213      	str	r3, [r2, #32]
 80051a0:	4b6a      	ldr	r3, [pc, #424]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	4a69      	ldr	r2, [pc, #420]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	6213      	str	r3, [r2, #32]
 80051ac:	e00b      	b.n	80051c6 <HAL_RCC_OscConfig+0x36e>
 80051ae:	4b67      	ldr	r3, [pc, #412]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	4a66      	ldr	r2, [pc, #408]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 80051b4:	f023 0301 	bic.w	r3, r3, #1
 80051b8:	6213      	str	r3, [r2, #32]
 80051ba:	4b64      	ldr	r3, [pc, #400]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	4a63      	ldr	r2, [pc, #396]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 80051c0:	f023 0304 	bic.w	r3, r3, #4
 80051c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d015      	beq.n	80051fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ce:	f7fd f8fd 	bl	80023cc <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d4:	e00a      	b.n	80051ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d6:	f7fd f8f9 	bl	80023cc <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e0ab      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ec:	4b57      	ldr	r3, [pc, #348]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0ee      	beq.n	80051d6 <HAL_RCC_OscConfig+0x37e>
 80051f8:	e014      	b.n	8005224 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fa:	f7fd f8e7 	bl	80023cc <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005200:	e00a      	b.n	8005218 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005202:	f7fd f8e3 	bl	80023cc <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005210:	4293      	cmp	r3, r2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e095      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005218:	4b4c      	ldr	r3, [pc, #304]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1ee      	bne.n	8005202 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005224:	7dfb      	ldrb	r3, [r7, #23]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d105      	bne.n	8005236 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800522a:	4b48      	ldr	r3, [pc, #288]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	4a47      	ldr	r2, [pc, #284]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 8005230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005234:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8081 	beq.w	8005342 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005240:	4b42      	ldr	r3, [pc, #264]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 030c 	and.w	r3, r3, #12
 8005248:	2b08      	cmp	r3, #8
 800524a:	d061      	beq.n	8005310 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d146      	bne.n	80052e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005254:	4b3f      	ldr	r3, [pc, #252]	; (8005354 <HAL_RCC_OscConfig+0x4fc>)
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525a:	f7fd f8b7 	bl	80023cc <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005262:	f7fd f8b3 	bl	80023cc <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e067      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005274:	4b35      	ldr	r3, [pc, #212]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f0      	bne.n	8005262 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005288:	d108      	bne.n	800529c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800528a:	4b30      	ldr	r3, [pc, #192]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	492d      	ldr	r1, [pc, #180]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 8005298:	4313      	orrs	r3, r2
 800529a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800529c:	4b2b      	ldr	r3, [pc, #172]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a19      	ldr	r1, [r3, #32]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	430b      	orrs	r3, r1
 80052ae:	4927      	ldr	r1, [pc, #156]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b4:	4b27      	ldr	r3, [pc, #156]	; (8005354 <HAL_RCC_OscConfig+0x4fc>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ba:	f7fd f887 	bl	80023cc <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c2:	f7fd f883 	bl	80023cc <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e037      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052d4:	4b1d      	ldr	r3, [pc, #116]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0x46a>
 80052e0:	e02f      	b.n	8005342 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e2:	4b1c      	ldr	r3, [pc, #112]	; (8005354 <HAL_RCC_OscConfig+0x4fc>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e8:	f7fd f870 	bl	80023cc <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f0:	f7fd f86c 	bl	80023cc <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e020      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005302:	4b12      	ldr	r3, [pc, #72]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x498>
 800530e:	e018      	b.n	8005342 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e013      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <HAL_RCC_OscConfig+0x4f4>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	429a      	cmp	r2, r3
 800532e:	d106      	bne.n	800533e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533a:	429a      	cmp	r2, r3
 800533c:	d001      	beq.n	8005342 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40021000 	.word	0x40021000
 8005350:	40007000 	.word	0x40007000
 8005354:	42420060 	.word	0x42420060

08005358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0d0      	b.n	800550e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800536c:	4b6a      	ldr	r3, [pc, #424]	; (8005518 <HAL_RCC_ClockConfig+0x1c0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d910      	bls.n	800539c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b67      	ldr	r3, [pc, #412]	; (8005518 <HAL_RCC_ClockConfig+0x1c0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 0207 	bic.w	r2, r3, #7
 8005382:	4965      	ldr	r1, [pc, #404]	; (8005518 <HAL_RCC_ClockConfig+0x1c0>)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	4313      	orrs	r3, r2
 8005388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538a:	4b63      	ldr	r3, [pc, #396]	; (8005518 <HAL_RCC_ClockConfig+0x1c0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d001      	beq.n	800539c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e0b8      	b.n	800550e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d020      	beq.n	80053ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053b4:	4b59      	ldr	r3, [pc, #356]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	4a58      	ldr	r2, [pc, #352]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 80053ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d005      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053cc:	4b53      	ldr	r3, [pc, #332]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	4a52      	ldr	r2, [pc, #328]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 80053d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80053d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d8:	4b50      	ldr	r3, [pc, #320]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	494d      	ldr	r1, [pc, #308]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d040      	beq.n	8005478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d107      	bne.n	800540e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fe:	4b47      	ldr	r3, [pc, #284]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d115      	bne.n	8005436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e07f      	b.n	800550e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d107      	bne.n	8005426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005416:	4b41      	ldr	r3, [pc, #260]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e073      	b.n	800550e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005426:	4b3d      	ldr	r3, [pc, #244]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e06b      	b.n	800550e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005436:	4b39      	ldr	r3, [pc, #228]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f023 0203 	bic.w	r2, r3, #3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4936      	ldr	r1, [pc, #216]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 8005444:	4313      	orrs	r3, r2
 8005446:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005448:	f7fc ffc0 	bl	80023cc <HAL_GetTick>
 800544c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544e:	e00a      	b.n	8005466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005450:	f7fc ffbc 	bl	80023cc <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	f241 3288 	movw	r2, #5000	; 0x1388
 800545e:	4293      	cmp	r3, r2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e053      	b.n	800550e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005466:	4b2d      	ldr	r3, [pc, #180]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f003 020c 	and.w	r2, r3, #12
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	429a      	cmp	r2, r3
 8005476:	d1eb      	bne.n	8005450 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005478:	4b27      	ldr	r3, [pc, #156]	; (8005518 <HAL_RCC_ClockConfig+0x1c0>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d210      	bcs.n	80054a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005486:	4b24      	ldr	r3, [pc, #144]	; (8005518 <HAL_RCC_ClockConfig+0x1c0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f023 0207 	bic.w	r2, r3, #7
 800548e:	4922      	ldr	r1, [pc, #136]	; (8005518 <HAL_RCC_ClockConfig+0x1c0>)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	4313      	orrs	r3, r2
 8005494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005496:	4b20      	ldr	r3, [pc, #128]	; (8005518 <HAL_RCC_ClockConfig+0x1c0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d001      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e032      	b.n	800550e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d008      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054b4:	4b19      	ldr	r3, [pc, #100]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	4916      	ldr	r1, [pc, #88]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054d2:	4b12      	ldr	r3, [pc, #72]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	490e      	ldr	r1, [pc, #56]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054e6:	f000 f821 	bl	800552c <HAL_RCC_GetSysClockFreq>
 80054ea:	4602      	mov	r2, r0
 80054ec:	4b0b      	ldr	r3, [pc, #44]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	091b      	lsrs	r3, r3, #4
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	490a      	ldr	r1, [pc, #40]	; (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80054f8:	5ccb      	ldrb	r3, [r1, r3]
 80054fa:	fa22 f303 	lsr.w	r3, r2, r3
 80054fe:	4a09      	ldr	r2, [pc, #36]	; (8005524 <HAL_RCC_ClockConfig+0x1cc>)
 8005500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005502:	4b09      	ldr	r3, [pc, #36]	; (8005528 <HAL_RCC_ClockConfig+0x1d0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f7fc ff1e 	bl	8002348 <HAL_InitTick>

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40022000 	.word	0x40022000
 800551c:	40021000 	.word	0x40021000
 8005520:	0800c378 	.word	0x0800c378
 8005524:	20000010 	.word	0x20000010
 8005528:	20000014 	.word	0x20000014

0800552c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800552c:	b490      	push	{r4, r7}
 800552e:	b08a      	sub	sp, #40	; 0x28
 8005530:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005532:	4b2a      	ldr	r3, [pc, #168]	; (80055dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005534:	1d3c      	adds	r4, r7, #4
 8005536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800553c:	f240 2301 	movw	r3, #513	; 0x201
 8005540:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	2300      	movs	r3, #0
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	2300      	movs	r3, #0
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005556:	4b22      	ldr	r3, [pc, #136]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	2b04      	cmp	r3, #4
 8005564:	d002      	beq.n	800556c <HAL_RCC_GetSysClockFreq+0x40>
 8005566:	2b08      	cmp	r3, #8
 8005568:	d003      	beq.n	8005572 <HAL_RCC_GetSysClockFreq+0x46>
 800556a:	e02d      	b.n	80055c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800556c:	4b1d      	ldr	r3, [pc, #116]	; (80055e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800556e:	623b      	str	r3, [r7, #32]
      break;
 8005570:	e02d      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	0c9b      	lsrs	r3, r3, #18
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800557e:	4413      	add	r3, r2
 8005580:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005584:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d013      	beq.n	80055b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005590:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	0c5b      	lsrs	r3, r3, #17
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800559e:	4413      	add	r3, r2
 80055a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80055a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	4a0e      	ldr	r2, [pc, #56]	; (80055e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055aa:	fb02 f203 	mul.w	r2, r2, r3
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
 80055b6:	e004      	b.n	80055c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	4a0b      	ldr	r2, [pc, #44]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055bc:	fb02 f303 	mul.w	r3, r2, r3
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	623b      	str	r3, [r7, #32]
      break;
 80055c6:	e002      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055c8:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ca:	623b      	str	r3, [r7, #32]
      break;
 80055cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ce:	6a3b      	ldr	r3, [r7, #32]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3728      	adds	r7, #40	; 0x28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc90      	pop	{r4, r7}
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	0800c2c4 	.word	0x0800c2c4
 80055e0:	40021000 	.word	0x40021000
 80055e4:	007a1200 	.word	0x007a1200
 80055e8:	003d0900 	.word	0x003d0900

080055ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055f0:	4b02      	ldr	r3, [pc, #8]	; (80055fc <HAL_RCC_GetHCLKFreq+0x10>)
 80055f2:	681b      	ldr	r3, [r3, #0]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr
 80055fc:	20000010 	.word	0x20000010

08005600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005604:	f7ff fff2 	bl	80055ec <HAL_RCC_GetHCLKFreq>
 8005608:	4602      	mov	r2, r0
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	0adb      	lsrs	r3, r3, #11
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	4903      	ldr	r1, [pc, #12]	; (8005624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005616:	5ccb      	ldrb	r3, [r1, r3]
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800561c:	4618      	mov	r0, r3
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40021000 	.word	0x40021000
 8005624:	0800c388 	.word	0x0800c388

08005628 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005630:	4b0a      	ldr	r3, [pc, #40]	; (800565c <RCC_Delay+0x34>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <RCC_Delay+0x38>)
 8005636:	fba2 2303 	umull	r2, r3, r2, r3
 800563a:	0a5b      	lsrs	r3, r3, #9
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	fb02 f303 	mul.w	r3, r2, r3
 8005642:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005644:	bf00      	nop
  }
  while (Delay --);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1e5a      	subs	r2, r3, #1
 800564a:	60fa      	str	r2, [r7, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f9      	bne.n	8005644 <RCC_Delay+0x1c>
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr
 800565c:	20000010 	.word	0x20000010
 8005660:	10624dd3 	.word	0x10624dd3

08005664 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d07d      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005680:	2300      	movs	r3, #0
 8005682:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005684:	4b4f      	ldr	r3, [pc, #316]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10d      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005690:	4b4c      	ldr	r3, [pc, #304]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	4a4b      	ldr	r2, [pc, #300]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569a:	61d3      	str	r3, [r2, #28]
 800569c:	4b49      	ldr	r3, [pc, #292]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ac:	4b46      	ldr	r3, [pc, #280]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d118      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b8:	4b43      	ldr	r3, [pc, #268]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a42      	ldr	r2, [pc, #264]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c4:	f7fc fe82 	bl	80023cc <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ca:	e008      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056cc:	f7fc fe7e 	bl	80023cc <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b64      	cmp	r3, #100	; 0x64
 80056d8:	d901      	bls.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e06d      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056de:	4b3a      	ldr	r3, [pc, #232]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056ea:	4b36      	ldr	r3, [pc, #216]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d02e      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	429a      	cmp	r2, r3
 8005706:	d027      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005708:	4b2e      	ldr	r3, [pc, #184]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005710:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005712:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005718:	4b2c      	ldr	r3, [pc, #176]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800571e:	4a29      	ldr	r2, [pc, #164]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d014      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572e:	f7fc fe4d 	bl	80023cc <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005734:	e00a      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005736:	f7fc fe49 	bl	80023cc <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f241 3288 	movw	r2, #5000	; 0x1388
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e036      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574c:	4b1d      	ldr	r3, [pc, #116]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0ee      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005758:	4b1a      	ldr	r3, [pc, #104]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4917      	ldr	r1, [pc, #92]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005766:	4313      	orrs	r3, r2
 8005768:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800576a:	7dfb      	ldrb	r3, [r7, #23]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d105      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005770:	4b14      	ldr	r3, [pc, #80]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800577a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d008      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005788:	4b0e      	ldr	r3, [pc, #56]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	490b      	ldr	r1, [pc, #44]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005796:	4313      	orrs	r3, r2
 8005798:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0310 	and.w	r3, r3, #16
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d008      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057a6:	4b07      	ldr	r3, [pc, #28]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	4904      	ldr	r1, [pc, #16]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40021000 	.word	0x40021000
 80057c8:	40007000 	.word	0x40007000
 80057cc:	42420440 	.word	0x42420440

080057d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80057d0:	b590      	push	{r4, r7, lr}
 80057d2:	b08d      	sub	sp, #52	; 0x34
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80057d8:	4b5a      	ldr	r3, [pc, #360]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80057da:	f107 040c 	add.w	r4, r7, #12
 80057de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80057e4:	f240 2301 	movw	r3, #513	; 0x201
 80057e8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
 80057ee:	2300      	movs	r3, #0
 80057f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f2:	2300      	movs	r3, #0
 80057f4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61fb      	str	r3, [r7, #28]
 80057fa:	2300      	movs	r3, #0
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b10      	cmp	r3, #16
 8005802:	d00a      	beq.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b10      	cmp	r3, #16
 8005808:	f200 8091 	bhi.w	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d04c      	beq.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d07c      	beq.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005818:	e089      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800581a:	4b4b      	ldr	r3, [pc, #300]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005820:	4b49      	ldr	r3, [pc, #292]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8082 	beq.w	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	0c9b      	lsrs	r3, r3, #18
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800583a:	4413      	add	r3, r2
 800583c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005840:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d018      	beq.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800584c:	4b3e      	ldr	r3, [pc, #248]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	0c5b      	lsrs	r3, r3, #17
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800585a:	4413      	add	r3, r2
 800585c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00d      	beq.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800586c:	4a37      	ldr	r2, [pc, #220]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	fbb2 f2f3 	udiv	r2, r2, r3
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	fb02 f303 	mul.w	r3, r2, r3
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587c:	e004      	b.n	8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	4a33      	ldr	r2, [pc, #204]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005888:	4b2f      	ldr	r3, [pc, #188]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005894:	d102      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800589a:	e04a      	b.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	4a2c      	ldr	r2, [pc, #176]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80058a2:	fba2 2303 	umull	r2, r3, r2, r3
 80058a6:	085b      	lsrs	r3, r3, #1
 80058a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80058aa:	e042      	b.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80058ac:	4b26      	ldr	r3, [pc, #152]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058bc:	d108      	bne.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80058c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ce:	e01f      	b.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058da:	d109      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80058dc:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80058e8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80058ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ee:	e00f      	b.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058fa:	d11c      	bne.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80058fc:	4b12      	ldr	r3, [pc, #72]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d016      	beq.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8005908:	f24f 4324 	movw	r3, #62500	; 0xf424
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800590e:	e012      	b.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005910:	e011      	b.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005912:	f7ff fe75 	bl	8005600 <HAL_RCC_GetPCLK2Freq>
 8005916:	4602      	mov	r2, r0
 8005918:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	0b9b      	lsrs	r3, r3, #14
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	3301      	adds	r3, #1
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	fbb2 f3f3 	udiv	r3, r2, r3
 800592a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800592c:	e004      	b.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800592e:	bf00      	nop
 8005930:	e002      	b.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005936:	bf00      	nop
    }
  }
  return (frequency);
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800593a:	4618      	mov	r0, r3
 800593c:	3734      	adds	r7, #52	; 0x34
 800593e:	46bd      	mov	sp, r7
 8005940:	bd90      	pop	{r4, r7, pc}
 8005942:	bf00      	nop
 8005944:	0800c2d4 	.word	0x0800c2d4
 8005948:	40021000 	.word	0x40021000
 800594c:	007a1200 	.word	0x007a1200
 8005950:	003d0900 	.word	0x003d0900
 8005954:	aaaaaaab 	.word	0xaaaaaaab

08005958 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e076      	b.n	8005a58 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	2b00      	cmp	r3, #0
 8005970:	d108      	bne.n	8005984 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800597a:	d009      	beq.n	8005990 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	61da      	str	r2, [r3, #28]
 8005982:	e005      	b.n	8005990 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fc fab0 	bl	8001f10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a14:	ea42 0103 	orr.w	r1, r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	0c1a      	lsrs	r2, r3, #16
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f002 0204 	and.w	r2, r2, #4
 8005a36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69da      	ldr	r2, [r3, #28]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b088      	sub	sp, #32
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d101      	bne.n	8005a82 <HAL_SPI_Transmit+0x22>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e126      	b.n	8005cd0 <HAL_SPI_Transmit+0x270>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a8a:	f7fc fc9f 	bl	80023cc <HAL_GetTick>
 8005a8e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a90:	88fb      	ldrh	r3, [r7, #6]
 8005a92:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d002      	beq.n	8005aa6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005aa4:	e10b      	b.n	8005cbe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <HAL_SPI_Transmit+0x52>
 8005aac:	88fb      	ldrh	r3, [r7, #6]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ab6:	e102      	b.n	8005cbe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2203      	movs	r2, #3
 8005abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	88fa      	ldrh	r2, [r7, #6]
 8005ad0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	88fa      	ldrh	r2, [r7, #6]
 8005ad6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afe:	d10f      	bne.n	8005b20 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2a:	2b40      	cmp	r3, #64	; 0x40
 8005b2c:	d007      	beq.n	8005b3e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b46:	d14b      	bne.n	8005be0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_SPI_Transmit+0xf6>
 8005b50:	8afb      	ldrh	r3, [r7, #22]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d13e      	bne.n	8005bd4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	881a      	ldrh	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	1c9a      	adds	r2, r3, #2
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b7a:	e02b      	b.n	8005bd4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d112      	bne.n	8005bb0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8e:	881a      	ldrh	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	1c9a      	adds	r2, r3, #2
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bae:	e011      	b.n	8005bd4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bb0:	f7fc fc0c 	bl	80023cc <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d803      	bhi.n	8005bc8 <HAL_SPI_Transmit+0x168>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	d102      	bne.n	8005bce <HAL_SPI_Transmit+0x16e>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bd2:	e074      	b.n	8005cbe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1ce      	bne.n	8005b7c <HAL_SPI_Transmit+0x11c>
 8005bde:	e04c      	b.n	8005c7a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <HAL_SPI_Transmit+0x18e>
 8005be8:	8afb      	ldrh	r3, [r7, #22]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d140      	bne.n	8005c70 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	7812      	ldrb	r2, [r2, #0]
 8005bfa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c14:	e02c      	b.n	8005c70 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d113      	bne.n	8005c4c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	330c      	adds	r3, #12
 8005c2e:	7812      	ldrb	r2, [r2, #0]
 8005c30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c4a:	e011      	b.n	8005c70 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c4c:	f7fc fbbe 	bl	80023cc <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d803      	bhi.n	8005c64 <HAL_SPI_Transmit+0x204>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	d102      	bne.n	8005c6a <HAL_SPI_Transmit+0x20a>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d102      	bne.n	8005c70 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c6e:	e026      	b.n	8005cbe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1cd      	bne.n	8005c16 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f8b2 	bl	8005de8 <SPI_EndRxTxTransaction>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c98:	2300      	movs	r3, #0
 8005c9a:	613b      	str	r3, [r7, #16]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	613b      	str	r3, [r7, #16]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	77fb      	strb	r3, [r7, #31]
 8005cba:	e000      	b.n	8005cbe <HAL_SPI_Transmit+0x25e>
  }

error:
 8005cbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cce:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3720      	adds	r7, #32
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ce8:	f7fc fb70 	bl	80023cc <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cf8:	f7fc fb68 	bl	80023cc <HAL_GetTick>
 8005cfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cfe:	4b39      	ldr	r3, [pc, #228]	; (8005de4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	015b      	lsls	r3, r3, #5
 8005d04:	0d1b      	lsrs	r3, r3, #20
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	fb02 f303 	mul.w	r3, r2, r3
 8005d0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d0e:	e054      	b.n	8005dba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d16:	d050      	beq.n	8005dba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d18:	f7fc fb58 	bl	80023cc <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d902      	bls.n	8005d2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d13d      	bne.n	8005daa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d46:	d111      	bne.n	8005d6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d50:	d004      	beq.n	8005d5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5a:	d107      	bne.n	8005d6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d74:	d10f      	bne.n	8005d96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e017      	b.n	8005dda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	bf0c      	ite	eq
 8005dca:	2301      	moveq	r3, #1
 8005dcc:	2300      	movne	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d19b      	bne.n	8005d10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000010 	.word	0x20000010

08005de8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af02      	add	r7, sp, #8
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2180      	movs	r1, #128	; 0x80
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f7ff ff6a 	bl	8005cd8 <SPI_WaitFlagStateUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0e:	f043 0220 	orr.w	r2, r3, #32
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e000      	b.n	8005e1c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e041      	b.n	8005eba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fc f89e 	bl	8001f8c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	4619      	mov	r1, r3
 8005e62:	4610      	mov	r0, r2
 8005e64:	f000 fb38 	bl	80064d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d104      	bne.n	8005ede <HAL_TIM_IC_Start_IT+0x1a>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	e013      	b.n	8005f06 <HAL_TIM_IC_Start_IT+0x42>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d104      	bne.n	8005eee <HAL_TIM_IC_Start_IT+0x2a>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	e00b      	b.n	8005f06 <HAL_TIM_IC_Start_IT+0x42>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d104      	bne.n	8005efe <HAL_TIM_IC_Start_IT+0x3a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	e003      	b.n	8005f06 <HAL_TIM_IC_Start_IT+0x42>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d104      	bne.n	8005f18 <HAL_TIM_IC_Start_IT+0x54>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	e013      	b.n	8005f40 <HAL_TIM_IC_Start_IT+0x7c>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d104      	bne.n	8005f28 <HAL_TIM_IC_Start_IT+0x64>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	e00b      	b.n	8005f40 <HAL_TIM_IC_Start_IT+0x7c>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d104      	bne.n	8005f38 <HAL_TIM_IC_Start_IT+0x74>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	e003      	b.n	8005f40 <HAL_TIM_IC_Start_IT+0x7c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d102      	bne.n	8005f4e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f48:	7bbb      	ldrb	r3, [r7, #14]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d001      	beq.n	8005f52 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e0b3      	b.n	80060ba <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d104      	bne.n	8005f62 <HAL_TIM_IC_Start_IT+0x9e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f60:	e013      	b.n	8005f8a <HAL_TIM_IC_Start_IT+0xc6>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d104      	bne.n	8005f72 <HAL_TIM_IC_Start_IT+0xae>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f70:	e00b      	b.n	8005f8a <HAL_TIM_IC_Start_IT+0xc6>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d104      	bne.n	8005f82 <HAL_TIM_IC_Start_IT+0xbe>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f80:	e003      	b.n	8005f8a <HAL_TIM_IC_Start_IT+0xc6>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2202      	movs	r2, #2
 8005f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <HAL_TIM_IC_Start_IT+0xd6>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f98:	e013      	b.n	8005fc2 <HAL_TIM_IC_Start_IT+0xfe>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d104      	bne.n	8005faa <HAL_TIM_IC_Start_IT+0xe6>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fa8:	e00b      	b.n	8005fc2 <HAL_TIM_IC_Start_IT+0xfe>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d104      	bne.n	8005fba <HAL_TIM_IC_Start_IT+0xf6>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fb8:	e003      	b.n	8005fc2 <HAL_TIM_IC_Start_IT+0xfe>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b0c      	cmp	r3, #12
 8005fc6:	d841      	bhi.n	800604c <HAL_TIM_IC_Start_IT+0x188>
 8005fc8:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <HAL_TIM_IC_Start_IT+0x10c>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	08006005 	.word	0x08006005
 8005fd4:	0800604d 	.word	0x0800604d
 8005fd8:	0800604d 	.word	0x0800604d
 8005fdc:	0800604d 	.word	0x0800604d
 8005fe0:	08006017 	.word	0x08006017
 8005fe4:	0800604d 	.word	0x0800604d
 8005fe8:	0800604d 	.word	0x0800604d
 8005fec:	0800604d 	.word	0x0800604d
 8005ff0:	08006029 	.word	0x08006029
 8005ff4:	0800604d 	.word	0x0800604d
 8005ff8:	0800604d 	.word	0x0800604d
 8005ffc:	0800604d 	.word	0x0800604d
 8006000:	0800603b 	.word	0x0800603b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0202 	orr.w	r2, r2, #2
 8006012:	60da      	str	r2, [r3, #12]
      break;
 8006014:	e01b      	b.n	800604e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0204 	orr.w	r2, r2, #4
 8006024:	60da      	str	r2, [r3, #12]
      break;
 8006026:	e012      	b.n	800604e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0208 	orr.w	r2, r2, #8
 8006036:	60da      	str	r2, [r3, #12]
      break;
 8006038:	e009      	b.n	800604e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0210 	orr.w	r2, r2, #16
 8006048:	60da      	str	r2, [r3, #12]
      break;
 800604a:	e000      	b.n	800604e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800604c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2201      	movs	r2, #1
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fbad 	bl	80067b6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a18      	ldr	r2, [pc, #96]	; (80060c4 <HAL_TIM_IC_Start_IT+0x200>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00e      	beq.n	8006084 <HAL_TIM_IC_Start_IT+0x1c0>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606e:	d009      	beq.n	8006084 <HAL_TIM_IC_Start_IT+0x1c0>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a14      	ldr	r2, [pc, #80]	; (80060c8 <HAL_TIM_IC_Start_IT+0x204>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d004      	beq.n	8006084 <HAL_TIM_IC_Start_IT+0x1c0>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a13      	ldr	r2, [pc, #76]	; (80060cc <HAL_TIM_IC_Start_IT+0x208>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d111      	bne.n	80060a8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b06      	cmp	r3, #6
 8006094:	d010      	beq.n	80060b8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0201 	orr.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a6:	e007      	b.n	80060b8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0201 	orr.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40012c00 	.word	0x40012c00
 80060c8:	40000400 	.word	0x40000400
 80060cc:	40000800 	.word	0x40000800

080060d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d122      	bne.n	800612c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d11b      	bne.n	800612c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0202 	mvn.w	r2, #2
 80060fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fb f87c 	bl	8001210 <HAL_TIM_IC_CaptureCallback>
 8006118:	e005      	b.n	8006126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f9c1 	bl	80064a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f9c7 	bl	80064b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b04      	cmp	r3, #4
 8006138:	d122      	bne.n	8006180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b04      	cmp	r3, #4
 8006146:	d11b      	bne.n	8006180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0204 	mvn.w	r2, #4
 8006150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2202      	movs	r2, #2
 8006156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fb f852 	bl	8001210 <HAL_TIM_IC_CaptureCallback>
 800616c:	e005      	b.n	800617a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f997 	bl	80064a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f99d 	bl	80064b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b08      	cmp	r3, #8
 800618c:	d122      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b08      	cmp	r3, #8
 800619a:	d11b      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0208 	mvn.w	r2, #8
 80061a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2204      	movs	r2, #4
 80061aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7fb f828 	bl	8001210 <HAL_TIM_IC_CaptureCallback>
 80061c0:	e005      	b.n	80061ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f96d 	bl	80064a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f973 	bl	80064b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	2b10      	cmp	r3, #16
 80061e0:	d122      	bne.n	8006228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d11b      	bne.n	8006228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0210 	mvn.w	r2, #16
 80061f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2208      	movs	r2, #8
 80061fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fa fffe 	bl	8001210 <HAL_TIM_IC_CaptureCallback>
 8006214:	e005      	b.n	8006222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f943 	bl	80064a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f949 	bl	80064b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b01      	cmp	r3, #1
 8006234:	d10e      	bne.n	8006254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b01      	cmp	r3, #1
 8006242:	d107      	bne.n	8006254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0201 	mvn.w	r2, #1
 800624c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f91e 	bl	8006490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625e:	2b80      	cmp	r3, #128	; 0x80
 8006260:	d10e      	bne.n	8006280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626c:	2b80      	cmp	r3, #128	; 0x80
 800626e:	d107      	bne.n	8006280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fb27 	bl	80068ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628a:	2b40      	cmp	r3, #64	; 0x40
 800628c:	d10e      	bne.n	80062ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006298:	2b40      	cmp	r3, #64	; 0x40
 800629a:	d107      	bne.n	80062ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f90d 	bl	80064c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d10e      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d107      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0220 	mvn.w	r2, #32
 80062d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 faf2 	bl	80068bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_TIM_IC_ConfigChannel+0x1a>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e082      	b.n	8006400 <HAL_TIM_IC_ConfigChannel+0x120>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d11b      	bne.n	8006340 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6819      	ldr	r1, [r3, #0]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f000 f940 	bl	800659c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 020c 	bic.w	r2, r2, #12
 800632a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6999      	ldr	r1, [r3, #24]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	619a      	str	r2, [r3, #24]
 800633e:	e05a      	b.n	80063f6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b04      	cmp	r3, #4
 8006344:	d11c      	bne.n	8006380 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	6819      	ldr	r1, [r3, #0]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f000 f97b 	bl	8006650 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699a      	ldr	r2, [r3, #24]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006368:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6999      	ldr	r1, [r3, #24]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	021a      	lsls	r2, r3, #8
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	619a      	str	r2, [r3, #24]
 800637e:	e03a      	b.n	80063f6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b08      	cmp	r3, #8
 8006384:	d11b      	bne.n	80063be <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6819      	ldr	r1, [r3, #0]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f000 f997 	bl	80066c8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 020c 	bic.w	r2, r2, #12
 80063a8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69d9      	ldr	r1, [r3, #28]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	61da      	str	r2, [r3, #28]
 80063bc:	e01b      	b.n	80063f6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	6819      	ldr	r1, [r3, #0]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f000 f9b6 	bl	800673e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80063e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69d9      	ldr	r1, [r3, #28]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	021a      	lsls	r2, r3, #8
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b0c      	cmp	r3, #12
 800641a:	d831      	bhi.n	8006480 <HAL_TIM_ReadCapturedValue+0x78>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <HAL_TIM_ReadCapturedValue+0x1c>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006459 	.word	0x08006459
 8006428:	08006481 	.word	0x08006481
 800642c:	08006481 	.word	0x08006481
 8006430:	08006481 	.word	0x08006481
 8006434:	08006463 	.word	0x08006463
 8006438:	08006481 	.word	0x08006481
 800643c:	08006481 	.word	0x08006481
 8006440:	08006481 	.word	0x08006481
 8006444:	0800646d 	.word	0x0800646d
 8006448:	08006481 	.word	0x08006481
 800644c:	08006481 	.word	0x08006481
 8006450:	08006481 	.word	0x08006481
 8006454:	08006477 	.word	0x08006477
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645e:	60fb      	str	r3, [r7, #12]

      break;
 8006460:	e00f      	b.n	8006482 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	60fb      	str	r3, [r7, #12]

      break;
 800646a:	e00a      	b.n	8006482 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	60fb      	str	r3, [r7, #12]

      break;
 8006474:	e005      	b.n	8006482 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	60fb      	str	r3, [r7, #12]

      break;
 800647e:	e000      	b.n	8006482 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006480:	bf00      	nop
  }

  return tmpreg;
 8006482:	68fb      	ldr	r3, [r7, #12]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	bc80      	pop	{r7}
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop

08006490 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr

080064a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bc80      	pop	{r7}
 80064c4:	4770      	bx	lr

080064c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr

080064d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a29      	ldr	r2, [pc, #164]	; (8006590 <TIM_Base_SetConfig+0xb8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00b      	beq.n	8006508 <TIM_Base_SetConfig+0x30>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f6:	d007      	beq.n	8006508 <TIM_Base_SetConfig+0x30>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a26      	ldr	r2, [pc, #152]	; (8006594 <TIM_Base_SetConfig+0xbc>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d003      	beq.n	8006508 <TIM_Base_SetConfig+0x30>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a25      	ldr	r2, [pc, #148]	; (8006598 <TIM_Base_SetConfig+0xc0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d108      	bne.n	800651a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a1c      	ldr	r2, [pc, #112]	; (8006590 <TIM_Base_SetConfig+0xb8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d00b      	beq.n	800653a <TIM_Base_SetConfig+0x62>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006528:	d007      	beq.n	800653a <TIM_Base_SetConfig+0x62>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a19      	ldr	r2, [pc, #100]	; (8006594 <TIM_Base_SetConfig+0xbc>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d003      	beq.n	800653a <TIM_Base_SetConfig+0x62>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a18      	ldr	r2, [pc, #96]	; (8006598 <TIM_Base_SetConfig+0xc0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d108      	bne.n	800654c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a07      	ldr	r2, [pc, #28]	; (8006590 <TIM_Base_SetConfig+0xb8>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d103      	bne.n	8006580 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	615a      	str	r2, [r3, #20]
}
 8006586:	bf00      	nop
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	bc80      	pop	{r7}
 800658e:	4770      	bx	lr
 8006590:	40012c00 	.word	0x40012c00
 8006594:	40000400 	.word	0x40000400
 8006598:	40000800 	.word	0x40000800

0800659c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f023 0201 	bic.w	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4a1f      	ldr	r2, [pc, #124]	; (8006644 <TIM_TI1_SetConfig+0xa8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00b      	beq.n	80065e2 <TIM_TI1_SetConfig+0x46>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d0:	d007      	beq.n	80065e2 <TIM_TI1_SetConfig+0x46>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4a1c      	ldr	r2, [pc, #112]	; (8006648 <TIM_TI1_SetConfig+0xac>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d003      	beq.n	80065e2 <TIM_TI1_SetConfig+0x46>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4a1b      	ldr	r2, [pc, #108]	; (800664c <TIM_TI1_SetConfig+0xb0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d101      	bne.n	80065e6 <TIM_TI1_SetConfig+0x4a>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <TIM_TI1_SetConfig+0x4c>
 80065e6:	2300      	movs	r3, #0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f023 0303 	bic.w	r3, r3, #3
 80065f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	e003      	b.n	8006606 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f043 0301 	orr.w	r3, r3, #1
 8006604:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800660c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	b2db      	uxtb	r3, r3
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f023 030a 	bic.w	r3, r3, #10
 8006620:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f003 030a 	and.w	r3, r3, #10
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	621a      	str	r2, [r3, #32]
}
 800663a:	bf00      	nop
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	bc80      	pop	{r7}
 8006642:	4770      	bx	lr
 8006644:	40012c00 	.word	0x40012c00
 8006648:	40000400 	.word	0x40000400
 800664c:	40000800 	.word	0x40000800

08006650 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f023 0210 	bic.w	r2, r3, #16
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800667c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800668e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	031b      	lsls	r3, r3, #12
 8006694:	b29b      	uxth	r3, r3
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4313      	orrs	r3, r2
 800669a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr

080066c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f023 0303 	bic.w	r3, r3, #3
 80066f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006704:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	b2db      	uxtb	r3, r3
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006718:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	621a      	str	r2, [r3, #32]
}
 8006734:	bf00      	nop
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr

0800673e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800673e:	b480      	push	{r7}
 8006740:	b087      	sub	sp, #28
 8006742:	af00      	add	r7, sp, #0
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	607a      	str	r2, [r7, #4]
 800674a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800676a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800677c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	031b      	lsls	r3, r3, #12
 8006782:	b29b      	uxth	r3, r3
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006790:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	031b      	lsls	r3, r3, #12
 8006796:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	621a      	str	r2, [r3, #32]
}
 80067ac:	bf00      	nop
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr

080067b6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b087      	sub	sp, #28
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f003 031f 	and.w	r3, r3, #31
 80067c8:	2201      	movs	r2, #1
 80067ca:	fa02 f303 	lsl.w	r3, r2, r3
 80067ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a1a      	ldr	r2, [r3, #32]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	43db      	mvns	r3, r3
 80067d8:	401a      	ands	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a1a      	ldr	r2, [r3, #32]
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f003 031f 	and.w	r3, r3, #31
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	fa01 f303 	lsl.w	r3, r1, r3
 80067ee:	431a      	orrs	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	621a      	str	r2, [r3, #32]
}
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bc80      	pop	{r7}
 80067fc:	4770      	bx	lr
	...

08006800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006814:	2302      	movs	r3, #2
 8006816:	e046      	b.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a16      	ldr	r2, [pc, #88]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006864:	d009      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a12      	ldr	r2, [pc, #72]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a10      	ldr	r2, [pc, #64]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d10c      	bne.n	8006894 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	4313      	orrs	r3, r2
 800688a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr
 80068b0:	40012c00 	.word	0x40012c00
 80068b4:	40000400 	.word	0x40000400
 80068b8:	40000800 	.word	0x40000800

080068bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bc80      	pop	{r7}
 80068cc:	4770      	bx	lr

080068ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	bc80      	pop	{r7}
 80068de:	4770      	bx	lr

080068e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80068e0:	b084      	sub	sp, #16
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	f107 0014 	add.w	r0, r7, #20
 80068ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	b004      	add	sp, #16
 80068fe:	4770      	bx	lr

08006900 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006910:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006914:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	b29a      	uxth	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr

0800692c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006934:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006938:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	b29b      	uxth	r3, r3
 8006946:	43db      	mvns	r3, r3
 8006948:	b29b      	uxth	r3, r3
 800694a:	4013      	ands	r3, r2
 800694c:	b29a      	uxth	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	bc80      	pop	{r7}
 800695e:	4770      	bx	lr

08006960 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	bc80      	pop	{r7}
 8006976:	4770      	bx	lr

08006978 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006978:	b084      	sub	sp, #16
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	f107 0014 	add.w	r0, r7, #20
 8006986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	b004      	add	sp, #16
 80069b6:	4770      	bx	lr

080069b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b09b      	sub	sp, #108	; 0x6c
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80069da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	78db      	ldrb	r3, [r3, #3]
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d81f      	bhi.n	8006a2a <USB_ActivateEndpoint+0x72>
 80069ea:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <USB_ActivateEndpoint+0x38>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a01 	.word	0x08006a01
 80069f4:	08006a1d 	.word	0x08006a1d
 80069f8:	08006a33 	.word	0x08006a33
 80069fc:	08006a0f 	.word	0x08006a0f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006a00:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a08:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006a0c:	e012      	b.n	8006a34 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006a0e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006a12:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006a16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006a1a:	e00b      	b.n	8006a34 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006a1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006a20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a24:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006a28:	e004      	b.n	8006a34 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006a30:	e000      	b.n	8006a34 <USB_ActivateEndpoint+0x7c>
      break;
 8006a32:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	441a      	add	r2, r3
 8006a3e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	4313      	orrs	r3, r2
 8006a76:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	441a      	add	r2, r3
 8006a84:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	7b1b      	ldrb	r3, [r3, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f040 8149 	bne.w	8006d38 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	785b      	ldrb	r3, [r3, #1]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 8084 	beq.w	8006bb8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	461a      	mov	r2, r3
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	011a      	lsls	r2, r3, #4
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	88db      	ldrh	r3, [r3, #6]
 8006ad8:	085b      	lsrs	r3, r3, #1
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	81fb      	strh	r3, [r7, #14]
 8006af2:	89fb      	ldrh	r3, [r7, #14]
 8006af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d01b      	beq.n	8006b34 <USB_ActivateEndpoint+0x17c>
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b12:	81bb      	strh	r3, [r7, #12]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	441a      	add	r2, r3
 8006b1e:	89bb      	ldrh	r3, [r7, #12]
 8006b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	78db      	ldrb	r3, [r3, #3]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d020      	beq.n	8006b7e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b52:	813b      	strh	r3, [r7, #8]
 8006b54:	893b      	ldrh	r3, [r7, #8]
 8006b56:	f083 0320 	eor.w	r3, r3, #32
 8006b5a:	813b      	strh	r3, [r7, #8]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	441a      	add	r2, r3
 8006b66:	893b      	ldrh	r3, [r7, #8]
 8006b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	8013      	strh	r3, [r2, #0]
 8006b7c:	e27f      	b.n	800707e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b94:	817b      	strh	r3, [r7, #10]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	441a      	add	r2, r3
 8006ba0:	897b      	ldrh	r3, [r7, #10]
 8006ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	8013      	strh	r3, [r2, #0]
 8006bb6:	e262      	b.n	800707e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	4413      	add	r3, r2
 8006bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	011a      	lsls	r2, r3, #4
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	88db      	ldrh	r3, [r3, #6]
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	4413      	add	r3, r2
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	011a      	lsls	r2, r3, #4
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	4413      	add	r3, r2
 8006c0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c0e:	623b      	str	r3, [r7, #32]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d112      	bne.n	8006c3e <USB_ActivateEndpoint+0x286>
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	801a      	strh	r2, [r3, #0]
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	801a      	strh	r2, [r3, #0]
 8006c3c:	e02f      	b.n	8006c9e <USB_ActivateEndpoint+0x2e6>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b3e      	cmp	r3, #62	; 0x3e
 8006c44:	d813      	bhi.n	8006c6e <USB_ActivateEndpoint+0x2b6>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	085b      	lsrs	r3, r3, #1
 8006c4c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <USB_ActivateEndpoint+0x2a8>
 8006c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	663b      	str	r3, [r7, #96]	; 0x60
 8006c60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	029b      	lsls	r3, r3, #10
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	801a      	strh	r2, [r3, #0]
 8006c6c:	e017      	b.n	8006c9e <USB_ActivateEndpoint+0x2e6>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	663b      	str	r3, [r7, #96]	; 0x60
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f003 031f 	and.w	r3, r3, #31
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d102      	bne.n	8006c88 <USB_ActivateEndpoint+0x2d0>
 8006c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c84:	3b01      	subs	r3, #1
 8006c86:	663b      	str	r3, [r7, #96]	; 0x60
 8006c88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	029b      	lsls	r3, r3, #10
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	83fb      	strh	r3, [r7, #30]
 8006cac:	8bfb      	ldrh	r3, [r7, #30]
 8006cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d01b      	beq.n	8006cee <USB_ActivateEndpoint+0x336>
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ccc:	83bb      	strh	r3, [r7, #28]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	441a      	add	r2, r3
 8006cd8:	8bbb      	ldrh	r3, [r7, #28]
 8006cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d04:	837b      	strh	r3, [r7, #26]
 8006d06:	8b7b      	ldrh	r3, [r7, #26]
 8006d08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d0c:	837b      	strh	r3, [r7, #26]
 8006d0e:	8b7b      	ldrh	r3, [r7, #26]
 8006d10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d14:	837b      	strh	r3, [r7, #26]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	441a      	add	r2, r3
 8006d20:	8b7b      	ldrh	r3, [r7, #26]
 8006d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	8013      	strh	r3, [r2, #0]
 8006d36:	e1a2      	b.n	800707e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	441a      	add	r2, r3
 8006d5c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d68:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	461a      	mov	r2, r3
 8006d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d84:	4413      	add	r3, r2
 8006d86:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	011a      	lsls	r2, r3, #4
 8006d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d96:	657b      	str	r3, [r7, #84]	; 0x54
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	891b      	ldrh	r3, [r3, #8]
 8006d9c:	085b      	lsrs	r3, r3, #1
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006da6:	801a      	strh	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	653b      	str	r3, [r7, #80]	; 0x50
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db8:	4413      	add	r3, r2
 8006dba:	653b      	str	r3, [r7, #80]	; 0x50
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	011a      	lsls	r2, r3, #4
 8006dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	895b      	ldrh	r3, [r3, #10]
 8006dd0:	085b      	lsrs	r3, r3, #1
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dda:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f040 8091 	bne.w	8006f08 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006df4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d01b      	beq.n	8006e36 <USB_ActivateEndpoint+0x47e>
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e14:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	441a      	add	r2, r3
 8006e20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	873b      	strh	r3, [r7, #56]	; 0x38
 8006e44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01b      	beq.n	8006e86 <USB_ActivateEndpoint+0x4ce>
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	441a      	add	r2, r3
 8006e70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006e9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ea0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ea4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006ea6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ea8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006eac:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	441a      	add	r2, r3
 8006eb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee4:	867b      	strh	r3, [r7, #50]	; 0x32
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	441a      	add	r2, r3
 8006ef0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	8013      	strh	r3, [r2, #0]
 8006f06:	e0ba      	b.n	800707e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006f18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01d      	beq.n	8006f60 <USB_ActivateEndpoint+0x5a8>
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	441a      	add	r2, r3
 8006f48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006f70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01d      	beq.n	8006fb8 <USB_ActivateEndpoint+0x600>
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	441a      	add	r2, r3
 8006fa0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	78db      	ldrb	r3, [r3, #3]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d024      	beq.n	800700a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006fda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006fde:	f083 0320 	eor.w	r3, r3, #32
 8006fe2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	441a      	add	r2, r3
 8006ff0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007004:	b29b      	uxth	r3, r3
 8007006:	8013      	strh	r3, [r2, #0]
 8007008:	e01d      	b.n	8007046 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007020:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	441a      	add	r2, r3
 800702e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800703a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800703e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007042:	b29b      	uxth	r3, r3
 8007044:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	441a      	add	r2, r3
 8007068:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800706a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707a:	b29b      	uxth	r3, r3
 800707c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800707e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007082:	4618      	mov	r0, r3
 8007084:	376c      	adds	r7, #108	; 0x6c
 8007086:	46bd      	mov	sp, r7
 8007088:	bc80      	pop	{r7}
 800708a:	4770      	bx	lr

0800708c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800708c:	b480      	push	{r7}
 800708e:	b08d      	sub	sp, #52	; 0x34
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	7b1b      	ldrb	r3, [r3, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	f040 808e 	bne.w	80071bc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	785b      	ldrb	r3, [r3, #1]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d044      	beq.n	8007132 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	81bb      	strh	r3, [r7, #12]
 80070b6:	89bb      	ldrh	r3, [r7, #12]
 80070b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01b      	beq.n	80070f8 <USB_DeactivateEndpoint+0x6c>
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d6:	817b      	strh	r3, [r7, #10]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	441a      	add	r2, r3
 80070e2:	897b      	ldrh	r3, [r7, #10]
 80070e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	b29b      	uxth	r3, r3
 8007106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800710e:	813b      	strh	r3, [r7, #8]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	441a      	add	r2, r3
 800711a:	893b      	ldrh	r3, [r7, #8]
 800711c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800712c:	b29b      	uxth	r3, r3
 800712e:	8013      	strh	r3, [r2, #0]
 8007130:	e192      	b.n	8007458 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	827b      	strh	r3, [r7, #18]
 8007140:	8a7b      	ldrh	r3, [r7, #18]
 8007142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d01b      	beq.n	8007182 <USB_DeactivateEndpoint+0xf6>
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800715c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007160:	823b      	strh	r3, [r7, #16]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	441a      	add	r2, r3
 800716c:	8a3b      	ldrh	r3, [r7, #16]
 800716e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007176:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800717a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800717e:	b29b      	uxth	r3, r3
 8007180:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b29b      	uxth	r3, r3
 8007190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007198:	81fb      	strh	r3, [r7, #14]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	441a      	add	r2, r3
 80071a4:	89fb      	ldrh	r3, [r7, #14]
 80071a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	8013      	strh	r3, [r2, #0]
 80071ba:	e14d      	b.n	8007458 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	785b      	ldrb	r3, [r3, #1]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f040 80a5 	bne.w	8007310 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	843b      	strh	r3, [r7, #32]
 80071d4:	8c3b      	ldrh	r3, [r7, #32]
 80071d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d01b      	beq.n	8007216 <USB_DeactivateEndpoint+0x18a>
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f4:	83fb      	strh	r3, [r7, #30]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	441a      	add	r2, r3
 8007200:	8bfb      	ldrh	r3, [r7, #30]
 8007202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800720a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800720e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007212:	b29b      	uxth	r3, r3
 8007214:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	83bb      	strh	r3, [r7, #28]
 8007224:	8bbb      	ldrh	r3, [r7, #28]
 8007226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	d01b      	beq.n	8007266 <USB_DeactivateEndpoint+0x1da>
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	b29b      	uxth	r3, r3
 800723c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007244:	837b      	strh	r3, [r7, #26]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	441a      	add	r2, r3
 8007250:	8b7b      	ldrh	r3, [r7, #26]
 8007252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800725a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800725e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007262:	b29b      	uxth	r3, r3
 8007264:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727c:	833b      	strh	r3, [r7, #24]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	441a      	add	r2, r3
 8007288:	8b3b      	ldrh	r3, [r7, #24]
 800728a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800728e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007296:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800729a:	b29b      	uxth	r3, r3
 800729c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b4:	82fb      	strh	r3, [r7, #22]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	441a      	add	r2, r3
 80072c0:	8afb      	ldrh	r3, [r7, #22]
 80072c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ec:	82bb      	strh	r3, [r7, #20]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	441a      	add	r2, r3
 80072f8:	8abb      	ldrh	r3, [r7, #20]
 80072fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730a:	b29b      	uxth	r3, r3
 800730c:	8013      	strh	r3, [r2, #0]
 800730e:	e0a3      	b.n	8007458 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800731e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d01b      	beq.n	8007360 <USB_DeactivateEndpoint+0x2d4>
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	b29b      	uxth	r3, r3
 8007336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800733a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	441a      	add	r2, r3
 800734a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800734c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800735c:	b29b      	uxth	r3, r3
 800735e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800736e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01b      	beq.n	80073b0 <USB_DeactivateEndpoint+0x324>
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	b29b      	uxth	r3, r3
 8007386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800738a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	441a      	add	r2, r3
 800739a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800739c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	b29b      	uxth	r3, r3
 80073be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	441a      	add	r2, r3
 80073d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	441a      	add	r2, r3
 800740a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800740c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800741c:	b29b      	uxth	r3, r3
 800741e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	b29b      	uxth	r3, r3
 800742e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007436:	847b      	strh	r3, [r7, #34]	; 0x22
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	441a      	add	r2, r3
 8007442:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800744c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007454:	b29b      	uxth	r3, r3
 8007456:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3734      	adds	r7, #52	; 0x34
 800745e:	46bd      	mov	sp, r7
 8007460:	bc80      	pop	{r7}
 8007462:	4770      	bx	lr

08007464 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b0c4      	sub	sp, #272	; 0x110
 8007468:	af00      	add	r7, sp, #0
 800746a:	1d3b      	adds	r3, r7, #4
 800746c:	6018      	str	r0, [r3, #0]
 800746e:	463b      	mov	r3, r7
 8007470:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007472:	463b      	mov	r3, r7
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	785b      	ldrb	r3, [r3, #1]
 8007478:	2b01      	cmp	r3, #1
 800747a:	f040 8557 	bne.w	8007f2c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800747e:	463b      	mov	r3, r7
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	699a      	ldr	r2, [r3, #24]
 8007484:	463b      	mov	r3, r7
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	429a      	cmp	r2, r3
 800748c:	d905      	bls.n	800749a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800748e:	463b      	mov	r3, r7
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007498:	e004      	b.n	80074a4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800749a:	463b      	mov	r3, r7
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80074a4:	463b      	mov	r3, r7
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	7b1b      	ldrb	r3, [r3, #12]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d12c      	bne.n	8007508 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80074ae:	463b      	mov	r3, r7
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6959      	ldr	r1, [r3, #20]
 80074b4:	463b      	mov	r3, r7
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	88da      	ldrh	r2, [r3, #6]
 80074ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074be:	b29b      	uxth	r3, r3
 80074c0:	1d38      	adds	r0, r7, #4
 80074c2:	6800      	ldr	r0, [r0, #0]
 80074c4:	f001 fa2c 	bl	8008920 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80074c8:	1d3b      	adds	r3, r7, #4
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	617b      	str	r3, [r7, #20]
 80074ce:	1d3b      	adds	r3, r7, #4
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	4413      	add	r3, r2
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	463b      	mov	r3, r7
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	011a      	lsls	r2, r3, #4
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	4413      	add	r3, r2
 80074ec:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80074f0:	f107 0310 	add.w	r3, r7, #16
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	f107 0310 	add.w	r3, r7, #16
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	801a      	strh	r2, [r3, #0]
 8007504:	f000 bcdd 	b.w	8007ec2 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007508:	463b      	mov	r3, r7
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	78db      	ldrb	r3, [r3, #3]
 800750e:	2b02      	cmp	r3, #2
 8007510:	f040 8347 	bne.w	8007ba2 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007514:	463b      	mov	r3, r7
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6a1a      	ldr	r2, [r3, #32]
 800751a:	463b      	mov	r3, r7
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	429a      	cmp	r2, r3
 8007522:	f240 82eb 	bls.w	8007afc <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007526:	1d3b      	adds	r3, r7, #4
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	463b      	mov	r3, r7
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800753c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007540:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8007544:	1d3b      	adds	r3, r7, #4
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	463b      	mov	r3, r7
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	441a      	add	r2, r3
 8007552:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800755a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800755e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007566:	b29b      	uxth	r3, r3
 8007568:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800756a:	463b      	mov	r3, r7
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a1a      	ldr	r2, [r3, #32]
 8007570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007574:	1ad2      	subs	r2, r2, r3
 8007576:	463b      	mov	r3, r7
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800757c:	1d3b      	adds	r3, r7, #4
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	463b      	mov	r3, r7
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29b      	uxth	r3, r3
 800758e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 8159 	beq.w	800784a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007598:	1d3b      	adds	r3, r7, #4
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	637b      	str	r3, [r7, #52]	; 0x34
 800759e:	463b      	mov	r3, r7
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d164      	bne.n	8007672 <USB_EPStartXfer+0x20e>
 80075a8:	1d3b      	adds	r3, r7, #4
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ae:	1d3b      	adds	r3, r7, #4
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	461a      	mov	r2, r3
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	4413      	add	r3, r2
 80075be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075c0:	463b      	mov	r3, r7
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	011a      	lsls	r2, r3, #4
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	4413      	add	r3, r2
 80075cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d112      	bne.n	8007600 <USB_EPStartXfer+0x19c>
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	801a      	strh	r2, [r3, #0]
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fc:	801a      	strh	r2, [r3, #0]
 80075fe:	e054      	b.n	80076aa <USB_EPStartXfer+0x246>
 8007600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007604:	2b3e      	cmp	r3, #62	; 0x3e
 8007606:	d817      	bhi.n	8007638 <USB_EPStartXfer+0x1d4>
 8007608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800760c:	085b      	lsrs	r3, r3, #1
 800760e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d004      	beq.n	8007628 <USB_EPStartXfer+0x1c4>
 800761e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007622:	3301      	adds	r3, #1
 8007624:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762c:	b29b      	uxth	r3, r3
 800762e:	029b      	lsls	r3, r3, #10
 8007630:	b29a      	uxth	r2, r3
 8007632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	e038      	b.n	80076aa <USB_EPStartXfer+0x246>
 8007638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800763c:	095b      	lsrs	r3, r3, #5
 800763e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007646:	f003 031f 	and.w	r3, r3, #31
 800764a:	2b00      	cmp	r3, #0
 800764c:	d104      	bne.n	8007658 <USB_EPStartXfer+0x1f4>
 800764e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007652:	3b01      	subs	r3, #1
 8007654:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800765c:	b29b      	uxth	r3, r3
 800765e:	029b      	lsls	r3, r3, #10
 8007660:	b29b      	uxth	r3, r3
 8007662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800766a:	b29a      	uxth	r2, r3
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	801a      	strh	r2, [r3, #0]
 8007670:	e01b      	b.n	80076aa <USB_EPStartXfer+0x246>
 8007672:	463b      	mov	r3, r7
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	785b      	ldrb	r3, [r3, #1]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d116      	bne.n	80076aa <USB_EPStartXfer+0x246>
 800767c:	1d3b      	adds	r3, r7, #4
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007684:	b29b      	uxth	r3, r3
 8007686:	461a      	mov	r2, r3
 8007688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768a:	4413      	add	r3, r2
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
 800768e:	463b      	mov	r3, r7
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	011a      	lsls	r2, r3, #4
 8007696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007698:	4413      	add	r3, r2
 800769a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800769e:	633b      	str	r3, [r7, #48]	; 0x30
 80076a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80076aa:	463b      	mov	r3, r7
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	895b      	ldrh	r3, [r3, #10]
 80076b0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076b4:	463b      	mov	r3, r7
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6959      	ldr	r1, [r3, #20]
 80076ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076be:	b29b      	uxth	r3, r3
 80076c0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80076c4:	1d38      	adds	r0, r7, #4
 80076c6:	6800      	ldr	r0, [r0, #0]
 80076c8:	f001 f92a 	bl	8008920 <USB_WritePMA>
            ep->xfer_buff += len;
 80076cc:	463b      	mov	r3, r7
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695a      	ldr	r2, [r3, #20]
 80076d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076d6:	441a      	add	r2, r3
 80076d8:	463b      	mov	r3, r7
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80076de:	463b      	mov	r3, r7
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6a1a      	ldr	r2, [r3, #32]
 80076e4:	463b      	mov	r3, r7
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d909      	bls.n	8007702 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80076ee:	463b      	mov	r3, r7
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6a1a      	ldr	r2, [r3, #32]
 80076f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076f8:	1ad2      	subs	r2, r2, r3
 80076fa:	463b      	mov	r3, r7
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	621a      	str	r2, [r3, #32]
 8007700:	e008      	b.n	8007714 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007702:	463b      	mov	r3, r7
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800770c:	463b      	mov	r3, r7
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2200      	movs	r2, #0
 8007712:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007714:	463b      	mov	r3, r7
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d164      	bne.n	80077e8 <USB_EPStartXfer+0x384>
 800771e:	1d3b      	adds	r3, r7, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	61fb      	str	r3, [r7, #28]
 8007724:	1d3b      	adds	r3, r7, #4
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800772c:	b29b      	uxth	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	4413      	add	r3, r2
 8007734:	61fb      	str	r3, [r7, #28]
 8007736:	463b      	mov	r3, r7
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	011a      	lsls	r2, r3, #4
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	4413      	add	r3, r2
 8007742:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007746:	61bb      	str	r3, [r7, #24]
 8007748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800774c:	2b00      	cmp	r3, #0
 800774e:	d112      	bne.n	8007776 <USB_EPStartXfer+0x312>
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	b29b      	uxth	r3, r3
 8007756:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800775a:	b29a      	uxth	r2, r3
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	801a      	strh	r2, [r3, #0]
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800776a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800776e:	b29a      	uxth	r2, r3
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	801a      	strh	r2, [r3, #0]
 8007774:	e057      	b.n	8007826 <USB_EPStartXfer+0x3c2>
 8007776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800777a:	2b3e      	cmp	r3, #62	; 0x3e
 800777c:	d817      	bhi.n	80077ae <USB_EPStartXfer+0x34a>
 800777e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007782:	085b      	lsrs	r3, r3, #1
 8007784:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d004      	beq.n	800779e <USB_EPStartXfer+0x33a>
 8007794:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007798:	3301      	adds	r3, #1
 800779a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800779e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	029b      	lsls	r3, r3, #10
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	801a      	strh	r2, [r3, #0]
 80077ac:	e03b      	b.n	8007826 <USB_EPStartXfer+0x3c2>
 80077ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077b2:	095b      	lsrs	r3, r3, #5
 80077b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077bc:	f003 031f 	and.w	r3, r3, #31
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d104      	bne.n	80077ce <USB_EPStartXfer+0x36a>
 80077c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077c8:	3b01      	subs	r3, #1
 80077ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	029b      	lsls	r3, r3, #10
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	801a      	strh	r2, [r3, #0]
 80077e6:	e01e      	b.n	8007826 <USB_EPStartXfer+0x3c2>
 80077e8:	463b      	mov	r3, r7
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d119      	bne.n	8007826 <USB_EPStartXfer+0x3c2>
 80077f2:	1d3b      	adds	r3, r7, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
 80077f8:	1d3b      	adds	r3, r7, #4
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007800:	b29b      	uxth	r3, r3
 8007802:	461a      	mov	r2, r3
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	4413      	add	r3, r2
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
 800780a:	463b      	mov	r3, r7
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	011a      	lsls	r2, r3, #4
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	4413      	add	r3, r2
 8007816:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800781a:	623b      	str	r3, [r7, #32]
 800781c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007820:	b29a      	uxth	r2, r3
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007826:	463b      	mov	r3, r7
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	891b      	ldrh	r3, [r3, #8]
 800782c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007830:	463b      	mov	r3, r7
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6959      	ldr	r1, [r3, #20]
 8007836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800783a:	b29b      	uxth	r3, r3
 800783c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007840:	1d38      	adds	r0, r7, #4
 8007842:	6800      	ldr	r0, [r0, #0]
 8007844:	f001 f86c 	bl	8008920 <USB_WritePMA>
 8007848:	e33b      	b.n	8007ec2 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800784a:	463b      	mov	r3, r7
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	785b      	ldrb	r3, [r3, #1]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d164      	bne.n	800791e <USB_EPStartXfer+0x4ba>
 8007854:	1d3b      	adds	r3, r7, #4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	64fb      	str	r3, [r7, #76]	; 0x4c
 800785a:	1d3b      	adds	r3, r7, #4
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007862:	b29b      	uxth	r3, r3
 8007864:	461a      	mov	r2, r3
 8007866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007868:	4413      	add	r3, r2
 800786a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800786c:	463b      	mov	r3, r7
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	011a      	lsls	r2, r3, #4
 8007874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007876:	4413      	add	r3, r2
 8007878:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800787c:	64bb      	str	r3, [r7, #72]	; 0x48
 800787e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d112      	bne.n	80078ac <USB_EPStartXfer+0x448>
 8007886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	b29b      	uxth	r3, r3
 800788c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007890:	b29a      	uxth	r2, r3
 8007892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007894:	801a      	strh	r2, [r3, #0]
 8007896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29b      	uxth	r3, r3
 800789c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078a8:	801a      	strh	r2, [r3, #0]
 80078aa:	e057      	b.n	800795c <USB_EPStartXfer+0x4f8>
 80078ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078b0:	2b3e      	cmp	r3, #62	; 0x3e
 80078b2:	d817      	bhi.n	80078e4 <USB_EPStartXfer+0x480>
 80078b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078b8:	085b      	lsrs	r3, r3, #1
 80078ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d004      	beq.n	80078d4 <USB_EPStartXfer+0x470>
 80078ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078ce:	3301      	adds	r3, #1
 80078d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078d8:	b29b      	uxth	r3, r3
 80078da:	029b      	lsls	r3, r3, #10
 80078dc:	b29a      	uxth	r2, r3
 80078de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078e0:	801a      	strh	r2, [r3, #0]
 80078e2:	e03b      	b.n	800795c <USB_EPStartXfer+0x4f8>
 80078e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078e8:	095b      	lsrs	r3, r3, #5
 80078ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078f2:	f003 031f 	and.w	r3, r3, #31
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d104      	bne.n	8007904 <USB_EPStartXfer+0x4a0>
 80078fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078fe:	3b01      	subs	r3, #1
 8007900:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007908:	b29b      	uxth	r3, r3
 800790a:	029b      	lsls	r3, r3, #10
 800790c:	b29b      	uxth	r3, r3
 800790e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007916:	b29a      	uxth	r2, r3
 8007918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800791a:	801a      	strh	r2, [r3, #0]
 800791c:	e01e      	b.n	800795c <USB_EPStartXfer+0x4f8>
 800791e:	463b      	mov	r3, r7
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	785b      	ldrb	r3, [r3, #1]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d119      	bne.n	800795c <USB_EPStartXfer+0x4f8>
 8007928:	1d3b      	adds	r3, r7, #4
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	657b      	str	r3, [r7, #84]	; 0x54
 800792e:	1d3b      	adds	r3, r7, #4
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007936:	b29b      	uxth	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800793c:	4413      	add	r3, r2
 800793e:	657b      	str	r3, [r7, #84]	; 0x54
 8007940:	463b      	mov	r3, r7
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	011a      	lsls	r2, r3, #4
 8007948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800794a:	4413      	add	r3, r2
 800794c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007950:	653b      	str	r3, [r7, #80]	; 0x50
 8007952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007956:	b29a      	uxth	r2, r3
 8007958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800795a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800795c:	463b      	mov	r3, r7
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	891b      	ldrh	r3, [r3, #8]
 8007962:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007966:	463b      	mov	r3, r7
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6959      	ldr	r1, [r3, #20]
 800796c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007970:	b29b      	uxth	r3, r3
 8007972:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007976:	1d38      	adds	r0, r7, #4
 8007978:	6800      	ldr	r0, [r0, #0]
 800797a:	f000 ffd1 	bl	8008920 <USB_WritePMA>
            ep->xfer_buff += len;
 800797e:	463b      	mov	r3, r7
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	695a      	ldr	r2, [r3, #20]
 8007984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007988:	441a      	add	r2, r3
 800798a:	463b      	mov	r3, r7
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007990:	463b      	mov	r3, r7
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6a1a      	ldr	r2, [r3, #32]
 8007996:	463b      	mov	r3, r7
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	429a      	cmp	r2, r3
 800799e:	d909      	bls.n	80079b4 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80079a0:	463b      	mov	r3, r7
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6a1a      	ldr	r2, [r3, #32]
 80079a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079aa:	1ad2      	subs	r2, r2, r3
 80079ac:	463b      	mov	r3, r7
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	621a      	str	r2, [r3, #32]
 80079b2:	e008      	b.n	80079c6 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80079b4:	463b      	mov	r3, r7
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80079be:	463b      	mov	r3, r7
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2200      	movs	r2, #0
 80079c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079c6:	1d3b      	adds	r3, r7, #4
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	647b      	str	r3, [r7, #68]	; 0x44
 80079cc:	463b      	mov	r3, r7
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	785b      	ldrb	r3, [r3, #1]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d164      	bne.n	8007aa0 <USB_EPStartXfer+0x63c>
 80079d6:	1d3b      	adds	r3, r7, #4
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079dc:	1d3b      	adds	r3, r7, #4
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	461a      	mov	r2, r3
 80079e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ea:	4413      	add	r3, r2
 80079ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079ee:	463b      	mov	r3, r7
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	011a      	lsls	r2, r3, #4
 80079f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f8:	4413      	add	r3, r2
 80079fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d112      	bne.n	8007a2e <USB_EPStartXfer+0x5ca>
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a16:	801a      	strh	r2, [r3, #0]
 8007a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2a:	801a      	strh	r2, [r3, #0]
 8007a2c:	e054      	b.n	8007ad8 <USB_EPStartXfer+0x674>
 8007a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a32:	2b3e      	cmp	r3, #62	; 0x3e
 8007a34:	d817      	bhi.n	8007a66 <USB_EPStartXfer+0x602>
 8007a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a3a:	085b      	lsrs	r3, r3, #1
 8007a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <USB_EPStartXfer+0x5f2>
 8007a4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a50:	3301      	adds	r3, #1
 8007a52:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	029b      	lsls	r3, r3, #10
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a62:	801a      	strh	r2, [r3, #0]
 8007a64:	e038      	b.n	8007ad8 <USB_EPStartXfer+0x674>
 8007a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a6a:	095b      	lsrs	r3, r3, #5
 8007a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a74:	f003 031f 	and.w	r3, r3, #31
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d104      	bne.n	8007a86 <USB_EPStartXfer+0x622>
 8007a7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a80:	3b01      	subs	r3, #1
 8007a82:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	029b      	lsls	r3, r3, #10
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9c:	801a      	strh	r2, [r3, #0]
 8007a9e:	e01b      	b.n	8007ad8 <USB_EPStartXfer+0x674>
 8007aa0:	463b      	mov	r3, r7
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	785b      	ldrb	r3, [r3, #1]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d116      	bne.n	8007ad8 <USB_EPStartXfer+0x674>
 8007aaa:	1d3b      	adds	r3, r7, #4
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ab8:	4413      	add	r3, r2
 8007aba:	647b      	str	r3, [r7, #68]	; 0x44
 8007abc:	463b      	mov	r3, r7
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	011a      	lsls	r2, r3, #4
 8007ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007acc:	643b      	str	r3, [r7, #64]	; 0x40
 8007ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007ad8:	463b      	mov	r3, r7
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	895b      	ldrh	r3, [r3, #10]
 8007ade:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ae2:	463b      	mov	r3, r7
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6959      	ldr	r1, [r3, #20]
 8007ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007af2:	1d38      	adds	r0, r7, #4
 8007af4:	6800      	ldr	r0, [r0, #0]
 8007af6:	f000 ff13 	bl	8008920 <USB_WritePMA>
 8007afa:	e1e2      	b.n	8007ec2 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007afc:	463b      	mov	r3, r7
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007b06:	1d3b      	adds	r3, r7, #4
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	463b      	mov	r3, r7
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b20:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007b24:	1d3b      	adds	r3, r7, #4
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	463b      	mov	r3, r7
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	441a      	add	r2, r3
 8007b32:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007b4a:	1d3b      	adds	r3, r7, #4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	663b      	str	r3, [r7, #96]	; 0x60
 8007b50:	1d3b      	adds	r3, r7, #4
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b5e:	4413      	add	r3, r2
 8007b60:	663b      	str	r3, [r7, #96]	; 0x60
 8007b62:	463b      	mov	r3, r7
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	011a      	lsls	r2, r3, #4
 8007b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b7e:	463b      	mov	r3, r7
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	891b      	ldrh	r3, [r3, #8]
 8007b84:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b88:	463b      	mov	r3, r7
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6959      	ldr	r1, [r3, #20]
 8007b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007b98:	1d38      	adds	r0, r7, #4
 8007b9a:	6800      	ldr	r0, [r0, #0]
 8007b9c:	f000 fec0 	bl	8008920 <USB_WritePMA>
 8007ba0:	e18f      	b.n	8007ec2 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007ba2:	1d3b      	adds	r3, r7, #4
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 808f 	beq.w	8007cdc <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007bbe:	1d3b      	adds	r3, r7, #4
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bc4:	463b      	mov	r3, r7
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d164      	bne.n	8007c98 <USB_EPStartXfer+0x834>
 8007bce:	1d3b      	adds	r3, r7, #4
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	673b      	str	r3, [r7, #112]	; 0x70
 8007bd4:	1d3b      	adds	r3, r7, #4
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	461a      	mov	r2, r3
 8007be0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007be2:	4413      	add	r3, r2
 8007be4:	673b      	str	r3, [r7, #112]	; 0x70
 8007be6:	463b      	mov	r3, r7
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	011a      	lsls	r2, r3, #4
 8007bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d112      	bne.n	8007c26 <USB_EPStartXfer+0x7c2>
 8007c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0e:	801a      	strh	r2, [r3, #0]
 8007c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c22:	801a      	strh	r2, [r3, #0]
 8007c24:	e054      	b.n	8007cd0 <USB_EPStartXfer+0x86c>
 8007c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c2a:	2b3e      	cmp	r3, #62	; 0x3e
 8007c2c:	d817      	bhi.n	8007c5e <USB_EPStartXfer+0x7fa>
 8007c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c32:	085b      	lsrs	r3, r3, #1
 8007c34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d004      	beq.n	8007c4e <USB_EPStartXfer+0x7ea>
 8007c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c48:	3301      	adds	r3, #1
 8007c4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	029b      	lsls	r3, r3, #10
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5a:	801a      	strh	r2, [r3, #0]
 8007c5c:	e038      	b.n	8007cd0 <USB_EPStartXfer+0x86c>
 8007c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c62:	095b      	lsrs	r3, r3, #5
 8007c64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c6c:	f003 031f 	and.w	r3, r3, #31
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d104      	bne.n	8007c7e <USB_EPStartXfer+0x81a>
 8007c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	029b      	lsls	r3, r3, #10
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c94:	801a      	strh	r2, [r3, #0]
 8007c96:	e01b      	b.n	8007cd0 <USB_EPStartXfer+0x86c>
 8007c98:	463b      	mov	r3, r7
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	785b      	ldrb	r3, [r3, #1]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d116      	bne.n	8007cd0 <USB_EPStartXfer+0x86c>
 8007ca2:	1d3b      	adds	r3, r7, #4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	461a      	mov	r2, r3
 8007cae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cb0:	4413      	add	r3, r2
 8007cb2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cb4:	463b      	mov	r3, r7
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	011a      	lsls	r2, r3, #4
 8007cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cc4:	677b      	str	r3, [r7, #116]	; 0x74
 8007cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007cd0:	463b      	mov	r3, r7
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	895b      	ldrh	r3, [r3, #10]
 8007cd6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8007cda:	e097      	b.n	8007e0c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007cdc:	463b      	mov	r3, r7
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	785b      	ldrb	r3, [r3, #1]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d168      	bne.n	8007db8 <USB_EPStartXfer+0x954>
 8007ce6:	1d3b      	adds	r3, r7, #4
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cee:	1d3b      	adds	r3, r7, #4
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cfe:	4413      	add	r3, r2
 8007d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d04:	463b      	mov	r3, r7
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	011a      	lsls	r2, r3, #4
 8007d0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d10:	4413      	add	r3, r2
 8007d12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d112      	bne.n	8007d46 <USB_EPStartXfer+0x8e2>
 8007d20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d2e:	801a      	strh	r2, [r3, #0]
 8007d30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d42:	801a      	strh	r2, [r3, #0]
 8007d44:	e05d      	b.n	8007e02 <USB_EPStartXfer+0x99e>
 8007d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d4a:	2b3e      	cmp	r3, #62	; 0x3e
 8007d4c:	d817      	bhi.n	8007d7e <USB_EPStartXfer+0x91a>
 8007d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d52:	085b      	lsrs	r3, r3, #1
 8007d54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <USB_EPStartXfer+0x90a>
 8007d64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007d68:	3301      	adds	r3, #1
 8007d6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007d6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	029b      	lsls	r3, r3, #10
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d7a:	801a      	strh	r2, [r3, #0]
 8007d7c:	e041      	b.n	8007e02 <USB_EPStartXfer+0x99e>
 8007d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d8c:	f003 031f 	and.w	r3, r3, #31
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d104      	bne.n	8007d9e <USB_EPStartXfer+0x93a>
 8007d94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007d9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	029b      	lsls	r3, r3, #10
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007db4:	801a      	strh	r2, [r3, #0]
 8007db6:	e024      	b.n	8007e02 <USB_EPStartXfer+0x99e>
 8007db8:	463b      	mov	r3, r7
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d11f      	bne.n	8007e02 <USB_EPStartXfer+0x99e>
 8007dc2:	1d3b      	adds	r3, r7, #4
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dca:	1d3b      	adds	r3, r7, #4
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dda:	4413      	add	r3, r2
 8007ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007de0:	463b      	mov	r3, r7
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	011a      	lsls	r2, r3, #4
 8007de8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dec:	4413      	add	r3, r2
 8007dee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e00:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e02:	463b      	mov	r3, r7
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	891b      	ldrh	r3, [r3, #8]
 8007e08:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e0c:	463b      	mov	r3, r7
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6959      	ldr	r1, [r3, #20]
 8007e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007e1c:	1d38      	adds	r0, r7, #4
 8007e1e:	6800      	ldr	r0, [r0, #0]
 8007e20:	f000 fd7e 	bl	8008920 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007e24:	463b      	mov	r3, r7
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	785b      	ldrb	r3, [r3, #1]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d122      	bne.n	8007e74 <USB_EPStartXfer+0xa10>
 8007e2e:	1d3b      	adds	r3, r7, #4
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	463b      	mov	r3, r7
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e48:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007e4c:	1d3b      	adds	r3, r7, #4
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	463b      	mov	r3, r7
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	441a      	add	r2, r3
 8007e5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	8013      	strh	r3, [r2, #0]
 8007e72:	e026      	b.n	8007ec2 <USB_EPStartXfer+0xa5e>
 8007e74:	463b      	mov	r3, r7
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	785b      	ldrb	r3, [r3, #1]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d121      	bne.n	8007ec2 <USB_EPStartXfer+0xa5e>
 8007e7e:	1d3b      	adds	r3, r7, #4
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	463b      	mov	r3, r7
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e98:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007e9c:	1d3b      	adds	r3, r7, #4
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	441a      	add	r2, r3
 8007eaa:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8007eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007ec2:	1d3b      	adds	r3, r7, #4
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	463b      	mov	r3, r7
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f107 020e 	add.w	r2, r7, #14
 8007ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ee0:	8013      	strh	r3, [r2, #0]
 8007ee2:	f107 030e 	add.w	r3, r7, #14
 8007ee6:	f107 020e 	add.w	r2, r7, #14
 8007eea:	8812      	ldrh	r2, [r2, #0]
 8007eec:	f082 0210 	eor.w	r2, r2, #16
 8007ef0:	801a      	strh	r2, [r3, #0]
 8007ef2:	f107 030e 	add.w	r3, r7, #14
 8007ef6:	f107 020e 	add.w	r2, r7, #14
 8007efa:	8812      	ldrh	r2, [r2, #0]
 8007efc:	f082 0220 	eor.w	r2, r2, #32
 8007f00:	801a      	strh	r2, [r3, #0]
 8007f02:	1d3b      	adds	r3, r7, #4
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	463b      	mov	r3, r7
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	441a      	add	r2, r3
 8007f10:	f107 030e 	add.w	r3, r7, #14
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	8013      	strh	r3, [r2, #0]
 8007f2a:	e3b5      	b.n	8008698 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007f2c:	463b      	mov	r3, r7
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	7b1b      	ldrb	r3, [r3, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f040 8090 	bne.w	8008058 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007f38:	463b      	mov	r3, r7
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	463b      	mov	r3, r7
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d90e      	bls.n	8007f66 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8007f48:	463b      	mov	r3, r7
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8007f52:	463b      	mov	r3, r7
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699a      	ldr	r2, [r3, #24]
 8007f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f5c:	1ad2      	subs	r2, r2, r3
 8007f5e:	463b      	mov	r3, r7
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	619a      	str	r2, [r3, #24]
 8007f64:	e008      	b.n	8007f78 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8007f66:	463b      	mov	r3, r7
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8007f70:	463b      	mov	r3, r7
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2200      	movs	r2, #0
 8007f76:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007f78:	1d3b      	adds	r3, r7, #4
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f80:	1d3b      	adds	r3, r7, #4
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f90:	4413      	add	r3, r2
 8007f92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f96:	463b      	mov	r3, r7
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	011a      	lsls	r2, r3, #4
 8007f9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d116      	bne.n	8007fe2 <USB_EPStartXfer+0xb7e>
 8007fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fc6:	801a      	strh	r2, [r3, #0]
 8007fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007fde:	801a      	strh	r2, [r3, #0]
 8007fe0:	e32c      	b.n	800863c <USB_EPStartXfer+0x11d8>
 8007fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fe6:	2b3e      	cmp	r3, #62	; 0x3e
 8007fe8:	d818      	bhi.n	800801c <USB_EPStartXfer+0xbb8>
 8007fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d004      	beq.n	800800a <USB_EPStartXfer+0xba6>
 8008000:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008004:	3301      	adds	r3, #1
 8008006:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800800a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800800e:	b29b      	uxth	r3, r3
 8008010:	029b      	lsls	r3, r3, #10
 8008012:	b29a      	uxth	r2, r3
 8008014:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008018:	801a      	strh	r2, [r3, #0]
 800801a:	e30f      	b.n	800863c <USB_EPStartXfer+0x11d8>
 800801c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008020:	095b      	lsrs	r3, r3, #5
 8008022:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800802a:	f003 031f 	and.w	r3, r3, #31
 800802e:	2b00      	cmp	r3, #0
 8008030:	d104      	bne.n	800803c <USB_EPStartXfer+0xbd8>
 8008032:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008036:	3b01      	subs	r3, #1
 8008038:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800803c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008040:	b29b      	uxth	r3, r3
 8008042:	029b      	lsls	r3, r3, #10
 8008044:	b29b      	uxth	r3, r3
 8008046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800804a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800804e:	b29a      	uxth	r2, r3
 8008050:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008054:	801a      	strh	r2, [r3, #0]
 8008056:	e2f1      	b.n	800863c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008058:	463b      	mov	r3, r7
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	78db      	ldrb	r3, [r3, #3]
 800805e:	2b02      	cmp	r3, #2
 8008060:	f040 818f 	bne.w	8008382 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008064:	463b      	mov	r3, r7
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	785b      	ldrb	r3, [r3, #1]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d175      	bne.n	800815a <USB_EPStartXfer+0xcf6>
 800806e:	1d3b      	adds	r3, r7, #4
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008076:	1d3b      	adds	r3, r7, #4
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800807e:	b29b      	uxth	r3, r3
 8008080:	461a      	mov	r2, r3
 8008082:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008086:	4413      	add	r3, r2
 8008088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800808c:	463b      	mov	r3, r7
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	011a      	lsls	r2, r3, #4
 8008094:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008098:	4413      	add	r3, r2
 800809a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800809e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80080a2:	463b      	mov	r3, r7
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d116      	bne.n	80080da <USB_EPStartXfer+0xc76>
 80080ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080be:	801a      	strh	r2, [r3, #0]
 80080c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080d6:	801a      	strh	r2, [r3, #0]
 80080d8:	e065      	b.n	80081a6 <USB_EPStartXfer+0xd42>
 80080da:	463b      	mov	r3, r7
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	2b3e      	cmp	r3, #62	; 0x3e
 80080e2:	d81a      	bhi.n	800811a <USB_EPStartXfer+0xcb6>
 80080e4:	463b      	mov	r3, r7
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	085b      	lsrs	r3, r3, #1
 80080ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80080f0:	463b      	mov	r3, r7
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d004      	beq.n	8008108 <USB_EPStartXfer+0xca4>
 80080fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008102:	3301      	adds	r3, #1
 8008104:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008108:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800810c:	b29b      	uxth	r3, r3
 800810e:	029b      	lsls	r3, r3, #10
 8008110:	b29a      	uxth	r2, r3
 8008112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008116:	801a      	strh	r2, [r3, #0]
 8008118:	e045      	b.n	80081a6 <USB_EPStartXfer+0xd42>
 800811a:	463b      	mov	r3, r7
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	095b      	lsrs	r3, r3, #5
 8008122:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008126:	463b      	mov	r3, r7
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	f003 031f 	and.w	r3, r3, #31
 8008130:	2b00      	cmp	r3, #0
 8008132:	d104      	bne.n	800813e <USB_EPStartXfer+0xcda>
 8008134:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008138:	3b01      	subs	r3, #1
 800813a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800813e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008142:	b29b      	uxth	r3, r3
 8008144:	029b      	lsls	r3, r3, #10
 8008146:	b29b      	uxth	r3, r3
 8008148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800814c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008150:	b29a      	uxth	r2, r3
 8008152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008156:	801a      	strh	r2, [r3, #0]
 8008158:	e025      	b.n	80081a6 <USB_EPStartXfer+0xd42>
 800815a:	463b      	mov	r3, r7
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d120      	bne.n	80081a6 <USB_EPStartXfer+0xd42>
 8008164:	1d3b      	adds	r3, r7, #4
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800816c:	1d3b      	adds	r3, r7, #4
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008174:	b29b      	uxth	r3, r3
 8008176:	461a      	mov	r2, r3
 8008178:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800817c:	4413      	add	r3, r2
 800817e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008182:	463b      	mov	r3, r7
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	011a      	lsls	r2, r3, #4
 800818a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800818e:	4413      	add	r3, r2
 8008190:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008198:	463b      	mov	r3, r7
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	b29a      	uxth	r2, r3
 80081a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80081a4:	801a      	strh	r2, [r3, #0]
 80081a6:	1d3b      	adds	r3, r7, #4
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80081ae:	463b      	mov	r3, r7
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d175      	bne.n	80082a4 <USB_EPStartXfer+0xe40>
 80081b8:	1d3b      	adds	r3, r7, #4
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80081c0:	1d3b      	adds	r3, r7, #4
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	461a      	mov	r2, r3
 80081cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081d0:	4413      	add	r3, r2
 80081d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80081d6:	463b      	mov	r3, r7
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	011a      	lsls	r2, r3, #4
 80081de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081e2:	4413      	add	r3, r2
 80081e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80081ec:	463b      	mov	r3, r7
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d116      	bne.n	8008224 <USB_EPStartXfer+0xdc0>
 80081f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008202:	b29a      	uxth	r2, r3
 8008204:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008208:	801a      	strh	r2, [r3, #0]
 800820a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	b29b      	uxth	r3, r3
 8008212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800821a:	b29a      	uxth	r2, r3
 800821c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008220:	801a      	strh	r2, [r3, #0]
 8008222:	e061      	b.n	80082e8 <USB_EPStartXfer+0xe84>
 8008224:	463b      	mov	r3, r7
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	2b3e      	cmp	r3, #62	; 0x3e
 800822c:	d81a      	bhi.n	8008264 <USB_EPStartXfer+0xe00>
 800822e:	463b      	mov	r3, r7
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	085b      	lsrs	r3, r3, #1
 8008236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800823a:	463b      	mov	r3, r7
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d004      	beq.n	8008252 <USB_EPStartXfer+0xdee>
 8008248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800824c:	3301      	adds	r3, #1
 800824e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008256:	b29b      	uxth	r3, r3
 8008258:	029b      	lsls	r3, r3, #10
 800825a:	b29a      	uxth	r2, r3
 800825c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008260:	801a      	strh	r2, [r3, #0]
 8008262:	e041      	b.n	80082e8 <USB_EPStartXfer+0xe84>
 8008264:	463b      	mov	r3, r7
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	095b      	lsrs	r3, r3, #5
 800826c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008270:	463b      	mov	r3, r7
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 031f 	and.w	r3, r3, #31
 800827a:	2b00      	cmp	r3, #0
 800827c:	d104      	bne.n	8008288 <USB_EPStartXfer+0xe24>
 800827e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008282:	3b01      	subs	r3, #1
 8008284:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800828c:	b29b      	uxth	r3, r3
 800828e:	029b      	lsls	r3, r3, #10
 8008290:	b29b      	uxth	r3, r3
 8008292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800829a:	b29a      	uxth	r2, r3
 800829c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082a0:	801a      	strh	r2, [r3, #0]
 80082a2:	e021      	b.n	80082e8 <USB_EPStartXfer+0xe84>
 80082a4:	463b      	mov	r3, r7
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	785b      	ldrb	r3, [r3, #1]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d11c      	bne.n	80082e8 <USB_EPStartXfer+0xe84>
 80082ae:	1d3b      	adds	r3, r7, #4
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	461a      	mov	r2, r3
 80082ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082be:	4413      	add	r3, r2
 80082c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082c4:	463b      	mov	r3, r7
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	011a      	lsls	r2, r3, #4
 80082cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082d0:	4413      	add	r3, r2
 80082d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80082da:	463b      	mov	r3, r7
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80082e6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80082e8:	463b      	mov	r3, r7
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f000 81a4 	beq.w	800863c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80082f4:	1d3b      	adds	r3, r7, #4
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	463b      	mov	r3, r7
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008308:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800830c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d005      	beq.n	8008320 <USB_EPStartXfer+0xebc>
 8008314:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10d      	bne.n	800833c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008320:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008328:	2b00      	cmp	r3, #0
 800832a:	f040 8187 	bne.w	800863c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800832e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	f040 8180 	bne.w	800863c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800833c:	1d3b      	adds	r3, r7, #4
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	463b      	mov	r3, r7
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	b29b      	uxth	r3, r3
 800834e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008356:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800835a:	1d3b      	adds	r3, r7, #4
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	463b      	mov	r3, r7
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	441a      	add	r2, r3
 8008368:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800836c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008378:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800837c:	b29b      	uxth	r3, r3
 800837e:	8013      	strh	r3, [r2, #0]
 8008380:	e15c      	b.n	800863c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008382:	463b      	mov	r3, r7
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	78db      	ldrb	r3, [r3, #3]
 8008388:	2b01      	cmp	r3, #1
 800838a:	f040 8155 	bne.w	8008638 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800838e:	463b      	mov	r3, r7
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	699a      	ldr	r2, [r3, #24]
 8008394:	463b      	mov	r3, r7
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	429a      	cmp	r2, r3
 800839c:	d90e      	bls.n	80083bc <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800839e:	463b      	mov	r3, r7
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80083a8:	463b      	mov	r3, r7
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083b2:	1ad2      	subs	r2, r2, r3
 80083b4:	463b      	mov	r3, r7
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	619a      	str	r2, [r3, #24]
 80083ba:	e008      	b.n	80083ce <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80083bc:	463b      	mov	r3, r7
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80083c6:	463b      	mov	r3, r7
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2200      	movs	r2, #0
 80083cc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80083ce:	463b      	mov	r3, r7
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	785b      	ldrb	r3, [r3, #1]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d16f      	bne.n	80084b8 <USB_EPStartXfer+0x1054>
 80083d8:	1d3b      	adds	r3, r7, #4
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083e0:	1d3b      	adds	r3, r7, #4
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	461a      	mov	r2, r3
 80083ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80083f0:	4413      	add	r3, r2
 80083f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083f6:	463b      	mov	r3, r7
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	011a      	lsls	r2, r3, #4
 80083fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008402:	4413      	add	r3, r2
 8008404:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008408:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800840c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008410:	2b00      	cmp	r3, #0
 8008412:	d116      	bne.n	8008442 <USB_EPStartXfer+0xfde>
 8008414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008420:	b29a      	uxth	r2, r3
 8008422:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008426:	801a      	strh	r2, [r3, #0]
 8008428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008438:	b29a      	uxth	r2, r3
 800843a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800843e:	801a      	strh	r2, [r3, #0]
 8008440:	e05f      	b.n	8008502 <USB_EPStartXfer+0x109e>
 8008442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008446:	2b3e      	cmp	r3, #62	; 0x3e
 8008448:	d818      	bhi.n	800847c <USB_EPStartXfer+0x1018>
 800844a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800844e:	085b      	lsrs	r3, r3, #1
 8008450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	d004      	beq.n	800846a <USB_EPStartXfer+0x1006>
 8008460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008464:	3301      	adds	r3, #1
 8008466:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800846a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800846e:	b29b      	uxth	r3, r3
 8008470:	029b      	lsls	r3, r3, #10
 8008472:	b29a      	uxth	r2, r3
 8008474:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008478:	801a      	strh	r2, [r3, #0]
 800847a:	e042      	b.n	8008502 <USB_EPStartXfer+0x109e>
 800847c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008480:	095b      	lsrs	r3, r3, #5
 8008482:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800848a:	f003 031f 	and.w	r3, r3, #31
 800848e:	2b00      	cmp	r3, #0
 8008490:	d104      	bne.n	800849c <USB_EPStartXfer+0x1038>
 8008492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008496:	3b01      	subs	r3, #1
 8008498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800849c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	029b      	lsls	r3, r3, #10
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80084b4:	801a      	strh	r2, [r3, #0]
 80084b6:	e024      	b.n	8008502 <USB_EPStartXfer+0x109e>
 80084b8:	463b      	mov	r3, r7
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	785b      	ldrb	r3, [r3, #1]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d11f      	bne.n	8008502 <USB_EPStartXfer+0x109e>
 80084c2:	1d3b      	adds	r3, r7, #4
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80084ca:	1d3b      	adds	r3, r7, #4
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	461a      	mov	r2, r3
 80084d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084da:	4413      	add	r3, r2
 80084dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80084e0:	463b      	mov	r3, r7
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	011a      	lsls	r2, r3, #4
 80084e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084ec:	4413      	add	r3, r2
 80084ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008500:	801a      	strh	r2, [r3, #0]
 8008502:	1d3b      	adds	r3, r7, #4
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800850a:	463b      	mov	r3, r7
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	785b      	ldrb	r3, [r3, #1]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d16f      	bne.n	80085f4 <USB_EPStartXfer+0x1190>
 8008514:	1d3b      	adds	r3, r7, #4
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800851c:	1d3b      	adds	r3, r7, #4
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008524:	b29b      	uxth	r3, r3
 8008526:	461a      	mov	r2, r3
 8008528:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800852c:	4413      	add	r3, r2
 800852e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008532:	463b      	mov	r3, r7
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	011a      	lsls	r2, r3, #4
 800853a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800853e:	4413      	add	r3, r2
 8008540:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008544:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800854c:	2b00      	cmp	r3, #0
 800854e:	d116      	bne.n	800857e <USB_EPStartXfer+0x111a>
 8008550:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	b29b      	uxth	r3, r3
 8008558:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800855c:	b29a      	uxth	r2, r3
 800855e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008562:	801a      	strh	r2, [r3, #0]
 8008564:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	b29b      	uxth	r3, r3
 800856c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008574:	b29a      	uxth	r2, r3
 8008576:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800857a:	801a      	strh	r2, [r3, #0]
 800857c:	e05e      	b.n	800863c <USB_EPStartXfer+0x11d8>
 800857e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008582:	2b3e      	cmp	r3, #62	; 0x3e
 8008584:	d818      	bhi.n	80085b8 <USB_EPStartXfer+0x1154>
 8008586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800858a:	085b      	lsrs	r3, r3, #1
 800858c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d004      	beq.n	80085a6 <USB_EPStartXfer+0x1142>
 800859c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085a0:	3301      	adds	r3, #1
 80085a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80085a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	029b      	lsls	r3, r3, #10
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80085b4:	801a      	strh	r2, [r3, #0]
 80085b6:	e041      	b.n	800863c <USB_EPStartXfer+0x11d8>
 80085b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085bc:	095b      	lsrs	r3, r3, #5
 80085be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80085c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085c6:	f003 031f 	and.w	r3, r3, #31
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d104      	bne.n	80085d8 <USB_EPStartXfer+0x1174>
 80085ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085d2:	3b01      	subs	r3, #1
 80085d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80085d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085dc:	b29b      	uxth	r3, r3
 80085de:	029b      	lsls	r3, r3, #10
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80085f0:	801a      	strh	r2, [r3, #0]
 80085f2:	e023      	b.n	800863c <USB_EPStartXfer+0x11d8>
 80085f4:	463b      	mov	r3, r7
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	785b      	ldrb	r3, [r3, #1]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d11e      	bne.n	800863c <USB_EPStartXfer+0x11d8>
 80085fe:	1d3b      	adds	r3, r7, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008606:	b29b      	uxth	r3, r3
 8008608:	461a      	mov	r2, r3
 800860a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800860e:	4413      	add	r3, r2
 8008610:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008614:	463b      	mov	r3, r7
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	011a      	lsls	r2, r3, #4
 800861c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008620:	4413      	add	r3, r2
 8008622:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008626:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800862a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800862e:	b29a      	uxth	r2, r3
 8008630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008634:	801a      	strh	r2, [r3, #0]
 8008636:	e001      	b.n	800863c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e02e      	b.n	800869a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800863c:	1d3b      	adds	r3, r7, #4
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	463b      	mov	r3, r7
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	881b      	ldrh	r3, [r3, #0]
 800864c:	b29b      	uxth	r3, r3
 800864e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008656:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800865a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800865e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008662:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008666:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800866a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800866e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008672:	1d3b      	adds	r3, r7, #4
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	463b      	mov	r3, r7
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	441a      	add	r2, r3
 8008680:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800868c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008694:	b29b      	uxth	r3, r3
 8008696:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	785b      	ldrb	r3, [r3, #1]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d020      	beq.n	80086f8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086cc:	81bb      	strh	r3, [r7, #12]
 80086ce:	89bb      	ldrh	r3, [r7, #12]
 80086d0:	f083 0310 	eor.w	r3, r3, #16
 80086d4:	81bb      	strh	r3, [r7, #12]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	441a      	add	r2, r3
 80086e0:	89bb      	ldrh	r3, [r7, #12]
 80086e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	8013      	strh	r3, [r2, #0]
 80086f6:	e01f      	b.n	8008738 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	881b      	ldrh	r3, [r3, #0]
 8008704:	b29b      	uxth	r3, r3
 8008706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800870a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870e:	81fb      	strh	r3, [r7, #14]
 8008710:	89fb      	ldrh	r3, [r7, #14]
 8008712:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008716:	81fb      	strh	r3, [r7, #14]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	441a      	add	r2, r3
 8008722:	89fb      	ldrh	r3, [r7, #14]
 8008724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800872c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008734:	b29b      	uxth	r3, r3
 8008736:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	bc80      	pop	{r7}
 8008742:	4770      	bx	lr

08008744 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	7b1b      	ldrb	r3, [r3, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	f040 809d 	bne.w	8008892 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	785b      	ldrb	r3, [r3, #1]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d04c      	beq.n	80087fa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	823b      	strh	r3, [r7, #16]
 800876e:	8a3b      	ldrh	r3, [r7, #16]
 8008770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01b      	beq.n	80087b0 <USB_EPClearStall+0x6c>
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	b29b      	uxth	r3, r3
 8008786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878e:	81fb      	strh	r3, [r7, #14]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	441a      	add	r2, r3
 800879a:	89fb      	ldrh	r3, [r7, #14]
 800879c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	78db      	ldrb	r3, [r3, #3]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d06c      	beq.n	8008892 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ce:	81bb      	strh	r3, [r7, #12]
 80087d0:	89bb      	ldrh	r3, [r7, #12]
 80087d2:	f083 0320 	eor.w	r3, r3, #32
 80087d6:	81bb      	strh	r3, [r7, #12]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	441a      	add	r2, r3
 80087e2:	89bb      	ldrh	r3, [r7, #12]
 80087e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	8013      	strh	r3, [r2, #0]
 80087f8:	e04b      	b.n	8008892 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	82fb      	strh	r3, [r7, #22]
 8008808:	8afb      	ldrh	r3, [r7, #22]
 800880a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d01b      	beq.n	800884a <USB_EPClearStall+0x106>
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	b29b      	uxth	r3, r3
 8008820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008828:	82bb      	strh	r3, [r7, #20]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	441a      	add	r2, r3
 8008834:	8abb      	ldrh	r3, [r7, #20]
 8008836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800883a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800883e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008846:	b29b      	uxth	r3, r3
 8008848:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	b29b      	uxth	r3, r3
 8008858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800885c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008860:	827b      	strh	r3, [r7, #18]
 8008862:	8a7b      	ldrh	r3, [r7, #18]
 8008864:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008868:	827b      	strh	r3, [r7, #18]
 800886a:	8a7b      	ldrh	r3, [r7, #18]
 800886c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008870:	827b      	strh	r3, [r7, #18]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	441a      	add	r2, r3
 800887c:	8a7b      	ldrh	r3, [r7, #18]
 800887e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800888a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800888e:	b29b      	uxth	r3, r3
 8008890:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	371c      	adds	r7, #28
 8008898:	46bd      	mov	sp, r7
 800889a:	bc80      	pop	{r7}
 800889c:	4770      	bx	lr

0800889e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800889e:	b480      	push	{r7}
 80088a0:	b083      	sub	sp, #12
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	460b      	mov	r3, r1
 80088a8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80088aa:	78fb      	ldrb	r3, [r7, #3]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d103      	bne.n	80088b8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2280      	movs	r2, #128	; 0x80
 80088b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	bc80      	pop	{r7}
 80088c2:	4770      	bx	lr

080088c4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bc80      	pop	{r7}
 80088d6:	4770      	bx	lr

080088d8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bc80      	pop	{r7}
 80088ea:	4770      	bx	lr

080088ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80088fe:	68fb      	ldr	r3, [r7, #12]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	bc80      	pop	{r7}
 8008908:	4770      	bx	lr

0800890a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800890a:	b480      	push	{r7}
 800890c:	b083      	sub	sp, #12
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	bc80      	pop	{r7}
 800891e:	4770      	bx	lr

08008920 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008920:	b480      	push	{r7}
 8008922:	b08d      	sub	sp, #52	; 0x34
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	4611      	mov	r1, r2
 800892c:	461a      	mov	r2, r3
 800892e:	460b      	mov	r3, r1
 8008930:	80fb      	strh	r3, [r7, #6]
 8008932:	4613      	mov	r3, r2
 8008934:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008936:	88bb      	ldrh	r3, [r7, #4]
 8008938:	3301      	adds	r3, #1
 800893a:	085b      	lsrs	r3, r3, #1
 800893c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008946:	88fb      	ldrh	r3, [r7, #6]
 8008948:	005a      	lsls	r2, r3, #1
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	4413      	add	r3, r2
 800894e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008952:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008958:	e01e      	b.n	8008998 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	3301      	adds	r3, #1
 8008964:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	b29b      	uxth	r3, r3
 800896c:	021b      	lsls	r3, r3, #8
 800896e:	b29b      	uxth	r3, r3
 8008970:	461a      	mov	r2, r3
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	4313      	orrs	r3, r2
 8008976:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	b29a      	uxth	r2, r3
 800897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	3302      	adds	r3, #2
 8008984:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008988:	3302      	adds	r3, #2
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	3301      	adds	r3, #1
 8008990:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008994:	3b01      	subs	r3, #1
 8008996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1dd      	bne.n	800895a <USB_WritePMA+0x3a>
  }
}
 800899e:	bf00      	nop
 80089a0:	bf00      	nop
 80089a2:	3734      	adds	r7, #52	; 0x34
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bc80      	pop	{r7}
 80089a8:	4770      	bx	lr

080089aa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b08b      	sub	sp, #44	; 0x2c
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	4611      	mov	r1, r2
 80089b6:	461a      	mov	r2, r3
 80089b8:	460b      	mov	r3, r1
 80089ba:	80fb      	strh	r3, [r7, #6]
 80089bc:	4613      	mov	r3, r2
 80089be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80089c0:	88bb      	ldrh	r3, [r7, #4]
 80089c2:	085b      	lsrs	r3, r3, #1
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089d0:	88fb      	ldrh	r3, [r7, #6]
 80089d2:	005a      	lsls	r2, r3, #1
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089dc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
 80089e2:	e01b      	b.n	8008a1c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80089ec:	6a3b      	ldr	r3, [r7, #32]
 80089ee:	3302      	adds	r3, #2
 80089f0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	3301      	adds	r3, #1
 80089fe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	0a1b      	lsrs	r3, r3, #8
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	3302      	adds	r3, #2
 8008a14:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e0      	bne.n	80089e4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008a22:	88bb      	ldrh	r3, [r7, #4]
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d007      	beq.n	8008a3e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	701a      	strb	r2, [r3, #0]
  }
}
 8008a3e:	bf00      	nop
 8008a40:	372c      	adds	r7, #44	; 0x2c
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bc80      	pop	{r7}
 8008a46:	4770      	bx	lr

08008a48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	7c1b      	ldrb	r3, [r3, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d115      	bne.n	8008a8c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a64:	2202      	movs	r2, #2
 8008a66:	2181      	movs	r1, #129	; 0x81
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f002 f82a 	bl	800aac2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a78:	2202      	movs	r2, #2
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f002 f820 	bl	800aac2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008a8a:	e012      	b.n	8008ab2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a8c:	2340      	movs	r3, #64	; 0x40
 8008a8e:	2202      	movs	r2, #2
 8008a90:	2181      	movs	r1, #129	; 0x81
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f002 f815 	bl	800aac2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a9e:	2340      	movs	r3, #64	; 0x40
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	2101      	movs	r1, #1
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f002 f80c 	bl	800aac2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2201      	movs	r2, #1
 8008aae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ab2:	2308      	movs	r3, #8
 8008ab4:	2203      	movs	r2, #3
 8008ab6:	2182      	movs	r1, #130	; 0x82
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f002 f802 	bl	800aac2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ac4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008ac8:	f002 f922 	bl	800ad10 <USBD_static_malloc>
 8008acc:	4602      	mov	r2, r0
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d102      	bne.n	8008ae4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	73fb      	strb	r3, [r7, #15]
 8008ae2:	e026      	b.n	8008b32 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aea:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	7c1b      	ldrb	r3, [r3, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d109      	bne.n	8008b22 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b18:	2101      	movs	r1, #1
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f002 f8c2 	bl	800aca4 <USBD_LL_PrepareReceive>
 8008b20:	e007      	b.n	8008b32 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b28:	2340      	movs	r3, #64	; 0x40
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f002 f8b9 	bl	800aca4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008b4c:	2181      	movs	r1, #129	; 0x81
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 ffdd 	bl	800ab0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 ffd6 	bl	800ab0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008b6a:	2182      	movs	r1, #130	; 0x82
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 ffce 	bl	800ab0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00e      	beq.n	8008ba0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b92:	4618      	mov	r0, r3
 8008b94:	f002 f8c8 	bl	800ad28 <USBD_static_free>
    pdev->pClassData = NULL;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b086      	sub	sp, #24
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bba:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d039      	beq.n	8008c48 <USBD_CDC_Setup+0x9e>
 8008bd4:	2b20      	cmp	r3, #32
 8008bd6:	d17f      	bne.n	8008cd8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	88db      	ldrh	r3, [r3, #6]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d029      	beq.n	8008c34 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	b25b      	sxtb	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	da11      	bge.n	8008c0e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008bf6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	88d2      	ldrh	r2, [r2, #6]
 8008bfc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008bfe:	6939      	ldr	r1, [r7, #16]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	88db      	ldrh	r3, [r3, #6]
 8008c04:	461a      	mov	r2, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f001 fa09 	bl	800a01e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008c0c:	e06b      	b.n	8008ce6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	785a      	ldrb	r2, [r3, #1]
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	88db      	ldrh	r3, [r3, #6]
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008c24:	6939      	ldr	r1, [r7, #16]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	88db      	ldrh	r3, [r3, #6]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 fa24 	bl	800a07a <USBD_CtlPrepareRx>
      break;
 8008c32:	e058      	b.n	8008ce6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	7850      	ldrb	r0, [r2, #1]
 8008c40:	2200      	movs	r2, #0
 8008c42:	6839      	ldr	r1, [r7, #0]
 8008c44:	4798      	blx	r3
      break;
 8008c46:	e04e      	b.n	8008ce6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	2b0b      	cmp	r3, #11
 8008c4e:	d02e      	beq.n	8008cae <USBD_CDC_Setup+0x104>
 8008c50:	2b0b      	cmp	r3, #11
 8008c52:	dc38      	bgt.n	8008cc6 <USBD_CDC_Setup+0x11c>
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <USBD_CDC_Setup+0xb4>
 8008c58:	2b0a      	cmp	r3, #10
 8008c5a:	d014      	beq.n	8008c86 <USBD_CDC_Setup+0xdc>
 8008c5c:	e033      	b.n	8008cc6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d107      	bne.n	8008c78 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008c68:	f107 030c 	add.w	r3, r7, #12
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f001 f9d4 	bl	800a01e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c76:	e02e      	b.n	8008cd6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 f965 	bl	8009f4a <USBD_CtlError>
            ret = USBD_FAIL;
 8008c80:	2302      	movs	r3, #2
 8008c82:	75fb      	strb	r3, [r7, #23]
          break;
 8008c84:	e027      	b.n	8008cd6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d107      	bne.n	8008ca0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c90:	f107 030f 	add.w	r3, r7, #15
 8008c94:	2201      	movs	r2, #1
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 f9c0 	bl	800a01e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c9e:	e01a      	b.n	8008cd6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 f951 	bl	8009f4a <USBD_CtlError>
            ret = USBD_FAIL;
 8008ca8:	2302      	movs	r3, #2
 8008caa:	75fb      	strb	r3, [r7, #23]
          break;
 8008cac:	e013      	b.n	8008cd6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d00d      	beq.n	8008cd4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f001 f945 	bl	8009f4a <USBD_CtlError>
            ret = USBD_FAIL;
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008cc4:	e006      	b.n	8008cd4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 f93e 	bl	8009f4a <USBD_CtlError>
          ret = USBD_FAIL;
 8008cce:	2302      	movs	r3, #2
 8008cd0:	75fb      	strb	r3, [r7, #23]
          break;
 8008cd2:	e000      	b.n	8008cd6 <USBD_CDC_Setup+0x12c>
          break;
 8008cd4:	bf00      	nop
      }
      break;
 8008cd6:	e006      	b.n	8008ce6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 f935 	bl	8009f4a <USBD_CtlError>
      ret = USBD_FAIL;
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ce4:	bf00      	nop
  }

  return ret;
 8008ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d02:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d0a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d03a      	beq.n	8008d8c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008d16:	78fa      	ldrb	r2, [r7, #3]
 8008d18:	6879      	ldr	r1, [r7, #4]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	440b      	add	r3, r1
 8008d24:	331c      	adds	r3, #28
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d029      	beq.n	8008d80 <USBD_CDC_DataIn+0x90>
 8008d2c:	78fa      	ldrb	r2, [r7, #3]
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	4613      	mov	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4413      	add	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	440b      	add	r3, r1
 8008d3a:	331c      	adds	r3, #28
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	78f9      	ldrb	r1, [r7, #3]
 8008d40:	68b8      	ldr	r0, [r7, #8]
 8008d42:	460b      	mov	r3, r1
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	440b      	add	r3, r1
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	4403      	add	r3, r0
 8008d4c:	3338      	adds	r3, #56	; 0x38
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d54:	fb03 f301 	mul.w	r3, r3, r1
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d110      	bne.n	8008d80 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	6879      	ldr	r1, [r7, #4]
 8008d62:	4613      	mov	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	331c      	adds	r3, #28
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d72:	78f9      	ldrb	r1, [r7, #3]
 8008d74:	2300      	movs	r3, #0
 8008d76:	2200      	movs	r2, #0
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 ff70 	bl	800ac5e <USBD_LL_Transmit>
 8008d7e:	e003      	b.n	8008d88 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	e000      	b.n	8008d8e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008d8c:	2302      	movs	r3, #2
  }
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	460b      	mov	r3, r1
 8008da0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f001 ff9b 	bl	800acea <USBD_LL_GetRxDataSize>
 8008db4:	4602      	mov	r2, r0
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00d      	beq.n	8008de2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008dda:	4611      	mov	r1, r2
 8008ddc:	4798      	blx	r3

    return USBD_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	e000      	b.n	8008de4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008de2:	2302      	movs	r3, #2
  }
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d015      	beq.n	8008e32 <USBD_CDC_EP0_RxReady+0x46>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e0c:	2bff      	cmp	r3, #255	; 0xff
 8008e0e:	d010      	beq.n	8008e32 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008e1e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e26:	b292      	uxth	r2, r2
 8008e28:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	22ff      	movs	r2, #255	; 0xff
 8008e2e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2243      	movs	r2, #67	; 0x43
 8008e48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008e4a:	4b03      	ldr	r3, [pc, #12]	; (8008e58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bc80      	pop	{r7}
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	200000a4 	.word	0x200000a4

08008e5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2243      	movs	r2, #67	; 0x43
 8008e68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008e6a:	4b03      	ldr	r3, [pc, #12]	; (8008e78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bc80      	pop	{r7}
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	20000060 	.word	0x20000060

08008e7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2243      	movs	r2, #67	; 0x43
 8008e88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008e8a:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bc80      	pop	{r7}
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	200000e8 	.word	0x200000e8

08008e9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	220a      	movs	r2, #10
 8008ea8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008eaa:	4b03      	ldr	r3, [pc, #12]	; (8008eb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bc80      	pop	{r7}
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	2000001c 	.word	0x2000001c

08008ebc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d005      	beq.n	8008edc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bc80      	pop	{r7}
 8008ee6:	4770      	bx	lr

08008ee8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008efc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f06:	88fa      	ldrh	r2, [r7, #6]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	371c      	adds	r7, #28
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bc80      	pop	{r7}
 8008f18:	4770      	bx	lr

08008f1a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f2a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bc80      	pop	{r7}
 8008f3e:	4770      	bx	lr

08008f40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d01c      	beq.n	8008f94 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d115      	bne.n	8008f90 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	2181      	movs	r1, #129	; 0x81
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 fe69 	bl	800ac5e <USBD_LL_Transmit>

      return USBD_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e002      	b.n	8008f96 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e000      	b.n	8008f96 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008f94:	2302      	movs	r3, #2
  }
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d017      	beq.n	8008fe8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	7c1b      	ldrb	r3, [r3, #16]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d109      	bne.n	8008fd4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fca:	2101      	movs	r1, #1
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f001 fe69 	bl	800aca4 <USBD_LL_PrepareReceive>
 8008fd2:	e007      	b.n	8008fe4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fda:	2340      	movs	r3, #64	; 0x40
 8008fdc:	2101      	movs	r1, #1
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f001 fe60 	bl	800aca4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	e000      	b.n	8008fea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008fe8:	2302      	movs	r3, #2
  }
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	60f8      	str	r0, [r7, #12]
 8008ffa:	60b9      	str	r1, [r7, #8]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009006:	2302      	movs	r3, #2
 8009008:	e01a      	b.n	8009040 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	79fa      	ldrb	r2, [r7, #7]
 8009036:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f001 fccd 	bl	800a9d8 <USBD_LL_Init>

  return USBD_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d006      	beq.n	800906a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	73fb      	strb	r3, [r7, #15]
 8009068:	e001      	b.n	800906e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800906a:	2302      	movs	r3, #2
 800906c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800906e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	bc80      	pop	{r7}
 8009078:	4770      	bx	lr

0800907a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b082      	sub	sp, #8
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f001 fd02 	bl	800aa8c <USBD_LL_Start>

  return USBD_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bc80      	pop	{r7}
 80090a4:	4770      	bx	lr

080090a6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	460b      	mov	r3, r1
 80090b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80090b2:	2302      	movs	r3, #2
 80090b4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00c      	beq.n	80090da <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	78fa      	ldrb	r2, [r7, #3]
 80090ca:	4611      	mov	r1, r2
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	4798      	blx	r3
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80090da:	7bfb      	ldrb	r3, [r7, #15]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	78fa      	ldrb	r2, [r7, #3]
 80090fa:	4611      	mov	r1, r2
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	4798      	blx	r3

  return USBD_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	4618      	mov	r0, r3
 800911e:	f000 fed8 	bl	8009ed2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2201      	movs	r2, #1
 8009126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009130:	461a      	mov	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800913e:	f003 031f 	and.w	r3, r3, #31
 8009142:	2b02      	cmp	r3, #2
 8009144:	d016      	beq.n	8009174 <USBD_LL_SetupStage+0x6a>
 8009146:	2b02      	cmp	r3, #2
 8009148:	d81c      	bhi.n	8009184 <USBD_LL_SetupStage+0x7a>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d002      	beq.n	8009154 <USBD_LL_SetupStage+0x4a>
 800914e:	2b01      	cmp	r3, #1
 8009150:	d008      	beq.n	8009164 <USBD_LL_SetupStage+0x5a>
 8009152:	e017      	b.n	8009184 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f9cb 	bl	80094f8 <USBD_StdDevReq>
      break;
 8009162:	e01a      	b.n	800919a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fa2d 	bl	80095cc <USBD_StdItfReq>
      break;
 8009172:	e012      	b.n	800919a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fa6d 	bl	800965c <USBD_StdEPReq>
      break;
 8009182:	e00a      	b.n	800919a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800918a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800918e:	b2db      	uxtb	r3, r3
 8009190:	4619      	mov	r1, r3
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f001 fcda 	bl	800ab4c <USBD_LL_StallEP>
      break;
 8009198:	bf00      	nop
  }

  return USBD_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	460b      	mov	r3, r1
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80091b2:	7afb      	ldrb	r3, [r7, #11]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d14b      	bne.n	8009250 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80091be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d134      	bne.n	8009234 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	68da      	ldr	r2, [r3, #12]
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d919      	bls.n	800920a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	68da      	ldr	r2, [r3, #12]
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	1ad2      	subs	r2, r2, r3
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d203      	bcs.n	80091f8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	e002      	b.n	80091fe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	461a      	mov	r2, r3
 8009200:	6879      	ldr	r1, [r7, #4]
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 ff57 	bl	800a0b6 <USBD_CtlContinueRx>
 8009208:	e038      	b.n	800927c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800921c:	2b03      	cmp	r3, #3
 800921e:	d105      	bne.n	800922c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 ff54 	bl	800a0da <USBD_CtlSendStatus>
 8009232:	e023      	b.n	800927c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800923a:	2b05      	cmp	r3, #5
 800923c:	d11e      	bne.n	800927c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009246:	2100      	movs	r1, #0
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f001 fc7f 	bl	800ab4c <USBD_LL_StallEP>
 800924e:	e015      	b.n	800927c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00d      	beq.n	8009278 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009262:	2b03      	cmp	r3, #3
 8009264:	d108      	bne.n	8009278 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	7afa      	ldrb	r2, [r7, #11]
 8009270:	4611      	mov	r1, r2
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	4798      	blx	r3
 8009276:	e001      	b.n	800927c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009278:	2302      	movs	r3, #2
 800927a:	e000      	b.n	800927e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3718      	adds	r7, #24
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b086      	sub	sp, #24
 800928a:	af00      	add	r7, sp, #0
 800928c:	60f8      	str	r0, [r7, #12]
 800928e:	460b      	mov	r3, r1
 8009290:	607a      	str	r2, [r7, #4]
 8009292:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009294:	7afb      	ldrb	r3, [r7, #11]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d17f      	bne.n	800939a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	3314      	adds	r3, #20
 800929e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d15c      	bne.n	8009364 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	68da      	ldr	r2, [r3, #12]
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d915      	bls.n	80092e2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	1ad2      	subs	r2, r2, r3
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	461a      	mov	r2, r3
 80092cc:	6879      	ldr	r1, [r7, #4]
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 fec1 	bl	800a056 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092d4:	2300      	movs	r3, #0
 80092d6:	2200      	movs	r2, #0
 80092d8:	2100      	movs	r1, #0
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f001 fce2 	bl	800aca4 <USBD_LL_PrepareReceive>
 80092e0:	e04e      	b.n	8009380 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	6912      	ldr	r2, [r2, #16]
 80092ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80092ee:	fb02 f201 	mul.w	r2, r2, r1
 80092f2:	1a9b      	subs	r3, r3, r2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d11c      	bne.n	8009332 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	689a      	ldr	r2, [r3, #8]
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009300:	429a      	cmp	r2, r3
 8009302:	d316      	bcc.n	8009332 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	689a      	ldr	r2, [r3, #8]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800930e:	429a      	cmp	r2, r3
 8009310:	d20f      	bcs.n	8009332 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009312:	2200      	movs	r2, #0
 8009314:	2100      	movs	r1, #0
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 fe9d 	bl	800a056 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009324:	2300      	movs	r3, #0
 8009326:	2200      	movs	r2, #0
 8009328:	2100      	movs	r1, #0
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f001 fcba 	bl	800aca4 <USBD_LL_PrepareReceive>
 8009330:	e026      	b.n	8009380 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00a      	beq.n	8009354 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009344:	2b03      	cmp	r3, #3
 8009346:	d105      	bne.n	8009354 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009354:	2180      	movs	r1, #128	; 0x80
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f001 fbf8 	bl	800ab4c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 fecf 	bl	800a100 <USBD_CtlReceiveStatus>
 8009362:	e00d      	b.n	8009380 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800936a:	2b04      	cmp	r3, #4
 800936c:	d004      	beq.n	8009378 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009374:	2b00      	cmp	r3, #0
 8009376:	d103      	bne.n	8009380 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009378:	2180      	movs	r1, #128	; 0x80
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f001 fbe6 	bl	800ab4c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009386:	2b01      	cmp	r3, #1
 8009388:	d11d      	bne.n	80093c6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f7ff fe81 	bl	8009092 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009398:	e015      	b.n	80093c6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00d      	beq.n	80093c2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80093ac:	2b03      	cmp	r3, #3
 80093ae:	d108      	bne.n	80093c2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	7afa      	ldrb	r2, [r7, #11]
 80093ba:	4611      	mov	r1, r2
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	4798      	blx	r3
 80093c0:	e001      	b.n	80093c6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80093c2:	2302      	movs	r3, #2
 80093c4:	e000      	b.n	80093c8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093d8:	2340      	movs	r3, #64	; 0x40
 80093da:	2200      	movs	r2, #0
 80093dc:	2100      	movs	r1, #0
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f001 fb6f 	bl	800aac2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2240      	movs	r2, #64	; 0x40
 80093f0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093f4:	2340      	movs	r3, #64	; 0x40
 80093f6:	2200      	movs	r2, #0
 80093f8:	2180      	movs	r1, #128	; 0x80
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f001 fb61 	bl	800aac2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2240      	movs	r2, #64	; 0x40
 800940a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009430:	2b00      	cmp	r3, #0
 8009432:	d009      	beq.n	8009448 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	6852      	ldr	r2, [r2, #4]
 8009440:	b2d2      	uxtb	r2, r2
 8009442:	4611      	mov	r1, r2
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	4798      	blx	r3
  }

  return USBD_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009452:	b480      	push	{r7}
 8009454:	b083      	sub	sp, #12
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	460b      	mov	r3, r1
 800945c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	78fa      	ldrb	r2, [r7, #3]
 8009462:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	370c      	adds	r7, #12
 800946a:	46bd      	mov	sp, r7
 800946c:	bc80      	pop	{r7}
 800946e:	4770      	bx	lr

08009470 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2204      	movs	r2, #4
 8009488:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	370c      	adds	r7, #12
 8009492:	46bd      	mov	sp, r7
 8009494:	bc80      	pop	{r7}
 8009496:	4770      	bx	lr

08009498 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a6:	2b04      	cmp	r3, #4
 80094a8:	d105      	bne.n	80094b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	bc80      	pop	{r7}
 80094c0:	4770      	bx	lr

080094c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	d10b      	bne.n	80094ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094da:	69db      	ldr	r3, [r3, #28]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d005      	beq.n	80094ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e6:	69db      	ldr	r3, [r3, #28]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800950e:	2b40      	cmp	r3, #64	; 0x40
 8009510:	d005      	beq.n	800951e <USBD_StdDevReq+0x26>
 8009512:	2b40      	cmp	r3, #64	; 0x40
 8009514:	d84f      	bhi.n	80095b6 <USBD_StdDevReq+0xbe>
 8009516:	2b00      	cmp	r3, #0
 8009518:	d009      	beq.n	800952e <USBD_StdDevReq+0x36>
 800951a:	2b20      	cmp	r3, #32
 800951c:	d14b      	bne.n	80095b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	4798      	blx	r3
      break;
 800952c:	e048      	b.n	80095c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	785b      	ldrb	r3, [r3, #1]
 8009532:	2b09      	cmp	r3, #9
 8009534:	d839      	bhi.n	80095aa <USBD_StdDevReq+0xb2>
 8009536:	a201      	add	r2, pc, #4	; (adr r2, 800953c <USBD_StdDevReq+0x44>)
 8009538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953c:	0800958d 	.word	0x0800958d
 8009540:	080095a1 	.word	0x080095a1
 8009544:	080095ab 	.word	0x080095ab
 8009548:	08009597 	.word	0x08009597
 800954c:	080095ab 	.word	0x080095ab
 8009550:	0800956f 	.word	0x0800956f
 8009554:	08009565 	.word	0x08009565
 8009558:	080095ab 	.word	0x080095ab
 800955c:	08009583 	.word	0x08009583
 8009560:	08009579 	.word	0x08009579
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f9dc 	bl	8009924 <USBD_GetDescriptor>
          break;
 800956c:	e022      	b.n	80095b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fb3f 	bl	8009bf4 <USBD_SetAddress>
          break;
 8009576:	e01d      	b.n	80095b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fb7e 	bl	8009c7c <USBD_SetConfig>
          break;
 8009580:	e018      	b.n	80095b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fc07 	bl	8009d98 <USBD_GetConfig>
          break;
 800958a:	e013      	b.n	80095b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800958c:	6839      	ldr	r1, [r7, #0]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fc37 	bl	8009e02 <USBD_GetStatus>
          break;
 8009594:	e00e      	b.n	80095b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fc65 	bl	8009e68 <USBD_SetFeature>
          break;
 800959e:	e009      	b.n	80095b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fc74 	bl	8009e90 <USBD_ClrFeature>
          break;
 80095a8:	e004      	b.n	80095b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fccc 	bl	8009f4a <USBD_CtlError>
          break;
 80095b2:	bf00      	nop
      }
      break;
 80095b4:	e004      	b.n	80095c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fcc6 	bl	8009f4a <USBD_CtlError>
      break;
 80095be:	bf00      	nop
  }

  return ret;
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop

080095cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095e2:	2b40      	cmp	r3, #64	; 0x40
 80095e4:	d005      	beq.n	80095f2 <USBD_StdItfReq+0x26>
 80095e6:	2b40      	cmp	r3, #64	; 0x40
 80095e8:	d82e      	bhi.n	8009648 <USBD_StdItfReq+0x7c>
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <USBD_StdItfReq+0x26>
 80095ee:	2b20      	cmp	r3, #32
 80095f0:	d12a      	bne.n	8009648 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f8:	3b01      	subs	r3, #1
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d81d      	bhi.n	800963a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	889b      	ldrh	r3, [r3, #4]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b01      	cmp	r3, #1
 8009606:	d813      	bhi.n	8009630 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	4798      	blx	r3
 8009616:	4603      	mov	r3, r0
 8009618:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	88db      	ldrh	r3, [r3, #6]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d110      	bne.n	8009644 <USBD_StdItfReq+0x78>
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10d      	bne.n	8009644 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fd56 	bl	800a0da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800962e:	e009      	b.n	8009644 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009630:	6839      	ldr	r1, [r7, #0]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fc89 	bl	8009f4a <USBD_CtlError>
          break;
 8009638:	e004      	b.n	8009644 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fc84 	bl	8009f4a <USBD_CtlError>
          break;
 8009642:	e000      	b.n	8009646 <USBD_StdItfReq+0x7a>
          break;
 8009644:	bf00      	nop
      }
      break;
 8009646:	e004      	b.n	8009652 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fc7d 	bl	8009f4a <USBD_CtlError>
      break;
 8009650:	bf00      	nop
  }

  return USBD_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	889b      	ldrh	r3, [r3, #4]
 800966e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009678:	2b40      	cmp	r3, #64	; 0x40
 800967a:	d007      	beq.n	800968c <USBD_StdEPReq+0x30>
 800967c:	2b40      	cmp	r3, #64	; 0x40
 800967e:	f200 8146 	bhi.w	800990e <USBD_StdEPReq+0x2b2>
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00a      	beq.n	800969c <USBD_StdEPReq+0x40>
 8009686:	2b20      	cmp	r3, #32
 8009688:	f040 8141 	bne.w	800990e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	4798      	blx	r3
      break;
 800969a:	e13d      	b.n	8009918 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096a4:	2b20      	cmp	r3, #32
 80096a6:	d10a      	bne.n	80096be <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
 80096b6:	4603      	mov	r3, r0
 80096b8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	e12d      	b.n	800991a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	785b      	ldrb	r3, [r3, #1]
 80096c2:	2b03      	cmp	r3, #3
 80096c4:	d007      	beq.n	80096d6 <USBD_StdEPReq+0x7a>
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	f300 811b 	bgt.w	8009902 <USBD_StdEPReq+0x2a6>
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d072      	beq.n	80097b6 <USBD_StdEPReq+0x15a>
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d03a      	beq.n	800974a <USBD_StdEPReq+0xee>
 80096d4:	e115      	b.n	8009902 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d002      	beq.n	80096e6 <USBD_StdEPReq+0x8a>
 80096e0:	2b03      	cmp	r3, #3
 80096e2:	d015      	beq.n	8009710 <USBD_StdEPReq+0xb4>
 80096e4:	e02b      	b.n	800973e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00c      	beq.n	8009706 <USBD_StdEPReq+0xaa>
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
 80096ee:	2b80      	cmp	r3, #128	; 0x80
 80096f0:	d009      	beq.n	8009706 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80096f2:	7bbb      	ldrb	r3, [r7, #14]
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f001 fa28 	bl	800ab4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80096fc:	2180      	movs	r1, #128	; 0x80
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 fa24 	bl	800ab4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009704:	e020      	b.n	8009748 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fc1e 	bl	8009f4a <USBD_CtlError>
              break;
 800970e:	e01b      	b.n	8009748 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	885b      	ldrh	r3, [r3, #2]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10e      	bne.n	8009736 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00b      	beq.n	8009736 <USBD_StdEPReq+0xda>
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	2b80      	cmp	r3, #128	; 0x80
 8009722:	d008      	beq.n	8009736 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	88db      	ldrh	r3, [r3, #6]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d104      	bne.n	8009736 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800972c:	7bbb      	ldrb	r3, [r7, #14]
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f001 fa0b 	bl	800ab4c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fccf 	bl	800a0da <USBD_CtlSendStatus>

              break;
 800973c:	e004      	b.n	8009748 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 fc02 	bl	8009f4a <USBD_CtlError>
              break;
 8009746:	bf00      	nop
          }
          break;
 8009748:	e0e0      	b.n	800990c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009750:	2b02      	cmp	r3, #2
 8009752:	d002      	beq.n	800975a <USBD_StdEPReq+0xfe>
 8009754:	2b03      	cmp	r3, #3
 8009756:	d015      	beq.n	8009784 <USBD_StdEPReq+0x128>
 8009758:	e026      	b.n	80097a8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800975a:	7bbb      	ldrb	r3, [r7, #14]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00c      	beq.n	800977a <USBD_StdEPReq+0x11e>
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	2b80      	cmp	r3, #128	; 0x80
 8009764:	d009      	beq.n	800977a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009766:	7bbb      	ldrb	r3, [r7, #14]
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f001 f9ee 	bl	800ab4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009770:	2180      	movs	r1, #128	; 0x80
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 f9ea 	bl	800ab4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009778:	e01c      	b.n	80097b4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fbe4 	bl	8009f4a <USBD_CtlError>
              break;
 8009782:	e017      	b.n	80097b4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	885b      	ldrh	r3, [r3, #2]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d112      	bne.n	80097b2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800978c:	7bbb      	ldrb	r3, [r7, #14]
 800978e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009792:	2b00      	cmp	r3, #0
 8009794:	d004      	beq.n	80097a0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009796:	7bbb      	ldrb	r3, [r7, #14]
 8009798:	4619      	mov	r1, r3
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f001 f9f5 	bl	800ab8a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fc9a 	bl	800a0da <USBD_CtlSendStatus>
              }
              break;
 80097a6:	e004      	b.n	80097b2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fbcd 	bl	8009f4a <USBD_CtlError>
              break;
 80097b0:	e000      	b.n	80097b4 <USBD_StdEPReq+0x158>
              break;
 80097b2:	bf00      	nop
          }
          break;
 80097b4:	e0aa      	b.n	800990c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097bc:	2b02      	cmp	r3, #2
 80097be:	d002      	beq.n	80097c6 <USBD_StdEPReq+0x16a>
 80097c0:	2b03      	cmp	r3, #3
 80097c2:	d032      	beq.n	800982a <USBD_StdEPReq+0x1ce>
 80097c4:	e097      	b.n	80098f6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097c6:	7bbb      	ldrb	r3, [r7, #14]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d007      	beq.n	80097dc <USBD_StdEPReq+0x180>
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
 80097ce:	2b80      	cmp	r3, #128	; 0x80
 80097d0:	d004      	beq.n	80097dc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fbb8 	bl	8009f4a <USBD_CtlError>
                break;
 80097da:	e091      	b.n	8009900 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	da0b      	bge.n	80097fc <USBD_StdEPReq+0x1a0>
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	3310      	adds	r3, #16
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	4413      	add	r3, r2
 80097f8:	3304      	adds	r3, #4
 80097fa:	e00b      	b.n	8009814 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	4413      	add	r3, r2
 8009812:	3304      	adds	r3, #4
 8009814:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2200      	movs	r2, #0
 800981a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2202      	movs	r2, #2
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fbfb 	bl	800a01e <USBD_CtlSendData>
              break;
 8009828:	e06a      	b.n	8009900 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800982a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800982e:	2b00      	cmp	r3, #0
 8009830:	da11      	bge.n	8009856 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	f003 020f 	and.w	r2, r3, #15
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	4613      	mov	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	440b      	add	r3, r1
 8009844:	3318      	adds	r3, #24
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d117      	bne.n	800987c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fb7b 	bl	8009f4a <USBD_CtlError>
                  break;
 8009854:	e054      	b.n	8009900 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009856:	7bbb      	ldrb	r3, [r7, #14]
 8009858:	f003 020f 	and.w	r2, r3, #15
 800985c:	6879      	ldr	r1, [r7, #4]
 800985e:	4613      	mov	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	440b      	add	r3, r1
 8009868:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d104      	bne.n	800987c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fb68 	bl	8009f4a <USBD_CtlError>
                  break;
 800987a:	e041      	b.n	8009900 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800987c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009880:	2b00      	cmp	r3, #0
 8009882:	da0b      	bge.n	800989c <USBD_StdEPReq+0x240>
 8009884:	7bbb      	ldrb	r3, [r7, #14]
 8009886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800988a:	4613      	mov	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4413      	add	r3, r2
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	3310      	adds	r3, #16
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	4413      	add	r3, r2
 8009898:	3304      	adds	r3, #4
 800989a:	e00b      	b.n	80098b4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800989c:	7bbb      	ldrb	r3, [r7, #14]
 800989e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098a2:	4613      	mov	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	4413      	add	r3, r2
 80098b2:	3304      	adds	r3, #4
 80098b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098b6:	7bbb      	ldrb	r3, [r7, #14]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d002      	beq.n	80098c2 <USBD_StdEPReq+0x266>
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
 80098be:	2b80      	cmp	r3, #128	; 0x80
 80098c0:	d103      	bne.n	80098ca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	e00e      	b.n	80098e8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 f97a 	bl	800abc8 <USBD_LL_IsStallEP>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2201      	movs	r2, #1
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	e002      	b.n	80098e8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2202      	movs	r2, #2
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fb95 	bl	800a01e <USBD_CtlSendData>
              break;
 80098f4:	e004      	b.n	8009900 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fb26 	bl	8009f4a <USBD_CtlError>
              break;
 80098fe:	bf00      	nop
          }
          break;
 8009900:	e004      	b.n	800990c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009902:	6839      	ldr	r1, [r7, #0]
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fb20 	bl	8009f4a <USBD_CtlError>
          break;
 800990a:	bf00      	nop
      }
      break;
 800990c:	e004      	b.n	8009918 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800990e:	6839      	ldr	r1, [r7, #0]
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fb1a 	bl	8009f4a <USBD_CtlError>
      break;
 8009916:	bf00      	nop
  }

  return ret;
 8009918:	7bfb      	ldrb	r3, [r7, #15]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
	...

08009924 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800992e:	2300      	movs	r3, #0
 8009930:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	885b      	ldrh	r3, [r3, #2]
 800993e:	0a1b      	lsrs	r3, r3, #8
 8009940:	b29b      	uxth	r3, r3
 8009942:	3b01      	subs	r3, #1
 8009944:	2b06      	cmp	r3, #6
 8009946:	f200 8128 	bhi.w	8009b9a <USBD_GetDescriptor+0x276>
 800994a:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <USBD_GetDescriptor+0x2c>)
 800994c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009950:	0800996d 	.word	0x0800996d
 8009954:	08009985 	.word	0x08009985
 8009958:	080099c5 	.word	0x080099c5
 800995c:	08009b9b 	.word	0x08009b9b
 8009960:	08009b9b 	.word	0x08009b9b
 8009964:	08009b3b 	.word	0x08009b3b
 8009968:	08009b67 	.word	0x08009b67
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	7c12      	ldrb	r2, [r2, #16]
 8009978:	f107 0108 	add.w	r1, r7, #8
 800997c:	4610      	mov	r0, r2
 800997e:	4798      	blx	r3
 8009980:	60f8      	str	r0, [r7, #12]
      break;
 8009982:	e112      	b.n	8009baa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	7c1b      	ldrb	r3, [r3, #16]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10d      	bne.n	80099a8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009994:	f107 0208 	add.w	r2, r7, #8
 8009998:	4610      	mov	r0, r2
 800999a:	4798      	blx	r3
 800999c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3301      	adds	r3, #1
 80099a2:	2202      	movs	r2, #2
 80099a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80099a6:	e100      	b.n	8009baa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b0:	f107 0208 	add.w	r2, r7, #8
 80099b4:	4610      	mov	r0, r2
 80099b6:	4798      	blx	r3
 80099b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3301      	adds	r3, #1
 80099be:	2202      	movs	r2, #2
 80099c0:	701a      	strb	r2, [r3, #0]
      break;
 80099c2:	e0f2      	b.n	8009baa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	885b      	ldrh	r3, [r3, #2]
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b05      	cmp	r3, #5
 80099cc:	f200 80ac 	bhi.w	8009b28 <USBD_GetDescriptor+0x204>
 80099d0:	a201      	add	r2, pc, #4	; (adr r2, 80099d8 <USBD_GetDescriptor+0xb4>)
 80099d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d6:	bf00      	nop
 80099d8:	080099f1 	.word	0x080099f1
 80099dc:	08009a25 	.word	0x08009a25
 80099e0:	08009a59 	.word	0x08009a59
 80099e4:	08009a8d 	.word	0x08009a8d
 80099e8:	08009ac1 	.word	0x08009ac1
 80099ec:	08009af5 	.word	0x08009af5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00b      	beq.n	8009a14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	7c12      	ldrb	r2, [r2, #16]
 8009a08:	f107 0108 	add.w	r1, r7, #8
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4798      	blx	r3
 8009a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a12:	e091      	b.n	8009b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fa97 	bl	8009f4a <USBD_CtlError>
            err++;
 8009a1c:	7afb      	ldrb	r3, [r7, #11]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	72fb      	strb	r3, [r7, #11]
          break;
 8009a22:	e089      	b.n	8009b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00b      	beq.n	8009a48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	7c12      	ldrb	r2, [r2, #16]
 8009a3c:	f107 0108 	add.w	r1, r7, #8
 8009a40:	4610      	mov	r0, r2
 8009a42:	4798      	blx	r3
 8009a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a46:	e077      	b.n	8009b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fa7d 	bl	8009f4a <USBD_CtlError>
            err++;
 8009a50:	7afb      	ldrb	r3, [r7, #11]
 8009a52:	3301      	adds	r3, #1
 8009a54:	72fb      	strb	r3, [r7, #11]
          break;
 8009a56:	e06f      	b.n	8009b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00b      	beq.n	8009a7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	7c12      	ldrb	r2, [r2, #16]
 8009a70:	f107 0108 	add.w	r1, r7, #8
 8009a74:	4610      	mov	r0, r2
 8009a76:	4798      	blx	r3
 8009a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a7a:	e05d      	b.n	8009b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fa63 	bl	8009f4a <USBD_CtlError>
            err++;
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	3301      	adds	r3, #1
 8009a88:	72fb      	strb	r3, [r7, #11]
          break;
 8009a8a:	e055      	b.n	8009b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00b      	beq.n	8009ab0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	7c12      	ldrb	r2, [r2, #16]
 8009aa4:	f107 0108 	add.w	r1, r7, #8
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	4798      	blx	r3
 8009aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aae:	e043      	b.n	8009b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fa49 	bl	8009f4a <USBD_CtlError>
            err++;
 8009ab8:	7afb      	ldrb	r3, [r7, #11]
 8009aba:	3301      	adds	r3, #1
 8009abc:	72fb      	strb	r3, [r7, #11]
          break;
 8009abe:	e03b      	b.n	8009b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00b      	beq.n	8009ae4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	7c12      	ldrb	r2, [r2, #16]
 8009ad8:	f107 0108 	add.w	r1, r7, #8
 8009adc:	4610      	mov	r0, r2
 8009ade:	4798      	blx	r3
 8009ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ae2:	e029      	b.n	8009b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fa2f 	bl	8009f4a <USBD_CtlError>
            err++;
 8009aec:	7afb      	ldrb	r3, [r7, #11]
 8009aee:	3301      	adds	r3, #1
 8009af0:	72fb      	strb	r3, [r7, #11]
          break;
 8009af2:	e021      	b.n	8009b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00b      	beq.n	8009b18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	7c12      	ldrb	r2, [r2, #16]
 8009b0c:	f107 0108 	add.w	r1, r7, #8
 8009b10:	4610      	mov	r0, r2
 8009b12:	4798      	blx	r3
 8009b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b16:	e00f      	b.n	8009b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fa15 	bl	8009f4a <USBD_CtlError>
            err++;
 8009b20:	7afb      	ldrb	r3, [r7, #11]
 8009b22:	3301      	adds	r3, #1
 8009b24:	72fb      	strb	r3, [r7, #11]
          break;
 8009b26:	e007      	b.n	8009b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 fa0d 	bl	8009f4a <USBD_CtlError>
          err++;
 8009b30:	7afb      	ldrb	r3, [r7, #11]
 8009b32:	3301      	adds	r3, #1
 8009b34:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009b36:	e038      	b.n	8009baa <USBD_GetDescriptor+0x286>
 8009b38:	e037      	b.n	8009baa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	7c1b      	ldrb	r3, [r3, #16]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d109      	bne.n	8009b56 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b4a:	f107 0208 	add.w	r2, r7, #8
 8009b4e:	4610      	mov	r0, r2
 8009b50:	4798      	blx	r3
 8009b52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b54:	e029      	b.n	8009baa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f9f6 	bl	8009f4a <USBD_CtlError>
        err++;
 8009b5e:	7afb      	ldrb	r3, [r7, #11]
 8009b60:	3301      	adds	r3, #1
 8009b62:	72fb      	strb	r3, [r7, #11]
      break;
 8009b64:	e021      	b.n	8009baa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	7c1b      	ldrb	r3, [r3, #16]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10d      	bne.n	8009b8a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b76:	f107 0208 	add.w	r2, r7, #8
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	4798      	blx	r3
 8009b7e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	3301      	adds	r3, #1
 8009b84:	2207      	movs	r2, #7
 8009b86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b88:	e00f      	b.n	8009baa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f9dc 	bl	8009f4a <USBD_CtlError>
        err++;
 8009b92:	7afb      	ldrb	r3, [r7, #11]
 8009b94:	3301      	adds	r3, #1
 8009b96:	72fb      	strb	r3, [r7, #11]
      break;
 8009b98:	e007      	b.n	8009baa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f9d4 	bl	8009f4a <USBD_CtlError>
      err++;
 8009ba2:	7afb      	ldrb	r3, [r7, #11]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	72fb      	strb	r3, [r7, #11]
      break;
 8009ba8:	bf00      	nop
  }

  if (err != 0U)
 8009baa:	7afb      	ldrb	r3, [r7, #11]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d11c      	bne.n	8009bea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009bb0:	893b      	ldrh	r3, [r7, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d011      	beq.n	8009bda <USBD_GetDescriptor+0x2b6>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	88db      	ldrh	r3, [r3, #6]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00d      	beq.n	8009bda <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	88da      	ldrh	r2, [r3, #6]
 8009bc2:	893b      	ldrh	r3, [r7, #8]
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	bf28      	it	cs
 8009bc8:	4613      	movcs	r3, r2
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bce:	893b      	ldrh	r3, [r7, #8]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	68f9      	ldr	r1, [r7, #12]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fa22 	bl	800a01e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	88db      	ldrh	r3, [r3, #6]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d104      	bne.n	8009bec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fa79 	bl	800a0da <USBD_CtlSendStatus>
 8009be8:	e000      	b.n	8009bec <USBD_GetDescriptor+0x2c8>
    return;
 8009bea:	bf00      	nop
    }
  }
}
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop

08009bf4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	889b      	ldrh	r3, [r3, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d130      	bne.n	8009c68 <USBD_SetAddress+0x74>
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	88db      	ldrh	r3, [r3, #6]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d12c      	bne.n	8009c68 <USBD_SetAddress+0x74>
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	885b      	ldrh	r3, [r3, #2]
 8009c12:	2b7f      	cmp	r3, #127	; 0x7f
 8009c14:	d828      	bhi.n	8009c68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	885b      	ldrh	r3, [r3, #2]
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d104      	bne.n	8009c36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f98b 	bl	8009f4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c34:	e01d      	b.n	8009c72 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	7bfa      	ldrb	r2, [r7, #15]
 8009c3a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c3e:	7bfb      	ldrb	r3, [r7, #15]
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 ffec 	bl	800ac20 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fa46 	bl	800a0da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d004      	beq.n	8009c5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2202      	movs	r2, #2
 8009c58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c5c:	e009      	b.n	8009c72 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c66:	e004      	b.n	8009c72 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f96d 	bl	8009f4a <USBD_CtlError>
  }
}
 8009c70:	bf00      	nop
 8009c72:	bf00      	nop
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	885b      	ldrh	r3, [r3, #2]
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	4b41      	ldr	r3, [pc, #260]	; (8009d94 <USBD_SetConfig+0x118>)
 8009c8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c90:	4b40      	ldr	r3, [pc, #256]	; (8009d94 <USBD_SetConfig+0x118>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d904      	bls.n	8009ca2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f955 	bl	8009f4a <USBD_CtlError>
 8009ca0:	e075      	b.n	8009d8e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d002      	beq.n	8009cb2 <USBD_SetConfig+0x36>
 8009cac:	2b03      	cmp	r3, #3
 8009cae:	d023      	beq.n	8009cf8 <USBD_SetConfig+0x7c>
 8009cb0:	e062      	b.n	8009d78 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009cb2:	4b38      	ldr	r3, [pc, #224]	; (8009d94 <USBD_SetConfig+0x118>)
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d01a      	beq.n	8009cf0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009cba:	4b36      	ldr	r3, [pc, #216]	; (8009d94 <USBD_SetConfig+0x118>)
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2203      	movs	r2, #3
 8009cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ccc:	4b31      	ldr	r3, [pc, #196]	; (8009d94 <USBD_SetConfig+0x118>)
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff f9e7 	bl	80090a6 <USBD_SetClassConfig>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d104      	bne.n	8009ce8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f932 	bl	8009f4a <USBD_CtlError>
            return;
 8009ce6:	e052      	b.n	8009d8e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f9f6 	bl	800a0da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009cee:	e04e      	b.n	8009d8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f9f2 	bl	800a0da <USBD_CtlSendStatus>
        break;
 8009cf6:	e04a      	b.n	8009d8e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009cf8:	4b26      	ldr	r3, [pc, #152]	; (8009d94 <USBD_SetConfig+0x118>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d112      	bne.n	8009d26 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2202      	movs	r2, #2
 8009d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009d08:	4b22      	ldr	r3, [pc, #136]	; (8009d94 <USBD_SetConfig+0x118>)
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009d12:	4b20      	ldr	r3, [pc, #128]	; (8009d94 <USBD_SetConfig+0x118>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f7ff f9e3 	bl	80090e4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f9db 	bl	800a0da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009d24:	e033      	b.n	8009d8e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009d26:	4b1b      	ldr	r3, [pc, #108]	; (8009d94 <USBD_SetConfig+0x118>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d01d      	beq.n	8009d70 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f7ff f9d1 	bl	80090e4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009d42:	4b14      	ldr	r3, [pc, #80]	; (8009d94 <USBD_SetConfig+0x118>)
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	461a      	mov	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009d4c:	4b11      	ldr	r3, [pc, #68]	; (8009d94 <USBD_SetConfig+0x118>)
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff f9a7 	bl	80090a6 <USBD_SetClassConfig>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d104      	bne.n	8009d68 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f8f2 	bl	8009f4a <USBD_CtlError>
            return;
 8009d66:	e012      	b.n	8009d8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f9b6 	bl	800a0da <USBD_CtlSendStatus>
        break;
 8009d6e:	e00e      	b.n	8009d8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f9b2 	bl	800a0da <USBD_CtlSendStatus>
        break;
 8009d76:	e00a      	b.n	8009d8e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f8e5 	bl	8009f4a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009d80:	4b04      	ldr	r3, [pc, #16]	; (8009d94 <USBD_SetConfig+0x118>)
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7ff f9ac 	bl	80090e4 <USBD_ClrClassConfig>
        break;
 8009d8c:	bf00      	nop
    }
  }
}
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	20000288 	.word	0x20000288

08009d98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	88db      	ldrh	r3, [r3, #6]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d004      	beq.n	8009db4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f8cc 	bl	8009f4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009db2:	e022      	b.n	8009dfa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	dc02      	bgt.n	8009dc4 <USBD_GetConfig+0x2c>
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	dc03      	bgt.n	8009dca <USBD_GetConfig+0x32>
 8009dc2:	e015      	b.n	8009df0 <USBD_GetConfig+0x58>
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	d00b      	beq.n	8009de0 <USBD_GetConfig+0x48>
 8009dc8:	e012      	b.n	8009df0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f920 	bl	800a01e <USBD_CtlSendData>
        break;
 8009dde:	e00c      	b.n	8009dfa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3304      	adds	r3, #4
 8009de4:	2201      	movs	r2, #1
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f918 	bl	800a01e <USBD_CtlSendData>
        break;
 8009dee:	e004      	b.n	8009dfa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f8a9 	bl	8009f4a <USBD_CtlError>
        break;
 8009df8:	bf00      	nop
}
 8009dfa:	bf00      	nop
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b082      	sub	sp, #8
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e12:	3b01      	subs	r3, #1
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d81e      	bhi.n	8009e56 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	88db      	ldrh	r3, [r3, #6]
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d004      	beq.n	8009e2a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f891 	bl	8009f4a <USBD_CtlError>
        break;
 8009e28:	e01a      	b.n	8009e60 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d005      	beq.n	8009e46 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	f043 0202 	orr.w	r2, r3, #2
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	330c      	adds	r3, #12
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f8e5 	bl	800a01e <USBD_CtlSendData>
      break;
 8009e54:	e004      	b.n	8009e60 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f876 	bl	8009f4a <USBD_CtlError>
      break;
 8009e5e:	bf00      	nop
  }
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	885b      	ldrh	r3, [r3, #2]
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d106      	bne.n	8009e88 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f929 	bl	800a0da <USBD_CtlSendStatus>
  }
}
 8009e88:	bf00      	nop
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d80b      	bhi.n	8009ebe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	885b      	ldrh	r3, [r3, #2]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d10c      	bne.n	8009ec8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f90f 	bl	800a0da <USBD_CtlSendStatus>
      }
      break;
 8009ebc:	e004      	b.n	8009ec8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f842 	bl	8009f4a <USBD_CtlError>
      break;
 8009ec6:	e000      	b.n	8009eca <USBD_ClrFeature+0x3a>
      break;
 8009ec8:	bf00      	nop
  }
}
 8009eca:	bf00      	nop
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b083      	sub	sp, #12
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	781a      	ldrb	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	785a      	ldrb	r2, [r3, #1]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	3302      	adds	r3, #2
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	b29a      	uxth	r2, r3
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	3303      	adds	r3, #3
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	021b      	lsls	r3, r3, #8
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	4413      	add	r3, r2
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	3305      	adds	r3, #5
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	021b      	lsls	r3, r3, #8
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	4413      	add	r3, r2
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	3306      	adds	r3, #6
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	3307      	adds	r3, #7
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	021b      	lsls	r3, r3, #8
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	4413      	add	r3, r2
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	80da      	strh	r2, [r3, #6]

}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bc80      	pop	{r7}
 8009f48:	4770      	bx	lr

08009f4a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b082      	sub	sp, #8
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009f54:	2180      	movs	r1, #128	; 0x80
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 fdf8 	bl	800ab4c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fdf4 	bl	800ab4c <USBD_LL_StallEP>
}
 8009f64:	bf00      	nop
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d032      	beq.n	8009fe8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f000 f834 	bl	8009ff0 <USBD_GetLen>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	005b      	lsls	r3, r3, #1
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
 8009f98:	1c5a      	adds	r2, r3, #1
 8009f9a:	75fa      	strb	r2, [r7, #23]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	7812      	ldrb	r2, [r2, #0]
 8009fa6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009fa8:	7dfb      	ldrb	r3, [r7, #23]
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	75fa      	strb	r2, [r7, #23]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	2203      	movs	r2, #3
 8009fb6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009fb8:	e012      	b.n	8009fe0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	1c5a      	adds	r2, r3, #1
 8009fbe:	60fa      	str	r2, [r7, #12]
 8009fc0:	7dfa      	ldrb	r2, [r7, #23]
 8009fc2:	1c51      	adds	r1, r2, #1
 8009fc4:	75f9      	strb	r1, [r7, #23]
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	440a      	add	r2, r1
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009fd0:	7dfb      	ldrb	r3, [r7, #23]
 8009fd2:	1c5a      	adds	r2, r3, #1
 8009fd4:	75fa      	strb	r2, [r7, #23]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	4413      	add	r3, r2
 8009fdc:	2200      	movs	r2, #0
 8009fde:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1e8      	bne.n	8009fba <USBD_GetString+0x4e>
    }
  }
}
 8009fe8:	bf00      	nop
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009ffc:	e005      	b.n	800a00a <USBD_GetLen+0x1a>
  {
    len++;
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	3301      	adds	r3, #1
 800a002:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3301      	adds	r3, #1
 800a008:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1f5      	bne.n	8009ffe <USBD_GetLen+0xe>
  }

  return len;
 800a012:	7bfb      	ldrb	r3, [r7, #15]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	bc80      	pop	{r7}
 800a01c:	4770      	bx	lr

0800a01e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	60b9      	str	r1, [r7, #8]
 800a028:	4613      	mov	r3, r2
 800a02a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2202      	movs	r2, #2
 800a030:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a034:	88fa      	ldrh	r2, [r7, #6]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a03a:	88fa      	ldrh	r2, [r7, #6]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a040:	88fb      	ldrh	r3, [r7, #6]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	2100      	movs	r1, #0
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f000 fe09 	bl	800ac5e <USBD_LL_Transmit>

  return USBD_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	60f8      	str	r0, [r7, #12]
 800a05e:	60b9      	str	r1, [r7, #8]
 800a060:	4613      	mov	r3, r2
 800a062:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a064:	88fb      	ldrh	r3, [r7, #6]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	2100      	movs	r1, #0
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f000 fdf7 	bl	800ac5e <USBD_LL_Transmit>

  return USBD_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	4613      	mov	r3, r2
 800a086:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2203      	movs	r2, #3
 800a08c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a090:	88fa      	ldrh	r2, [r7, #6]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a098:	88fa      	ldrh	r2, [r7, #6]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0a0:	88fb      	ldrh	r3, [r7, #6]
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 fdfc 	bl	800aca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	60f8      	str	r0, [r7, #12]
 800a0be:	60b9      	str	r1, [r7, #8]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0c4:	88fb      	ldrh	r3, [r7, #6]
 800a0c6:	68ba      	ldr	r2, [r7, #8]
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 fdea 	bl	800aca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b082      	sub	sp, #8
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2204      	movs	r2, #4
 800a0e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fdb4 	bl	800ac5e <USBD_LL_Transmit>

  return USBD_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2205      	movs	r2, #5
 800a10c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a110:	2300      	movs	r3, #0
 800a112:	2200      	movs	r2, #0
 800a114:	2100      	movs	r1, #0
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fdc4 	bl	800aca4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3708      	adds	r7, #8
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a12c:	2200      	movs	r2, #0
 800a12e:	4912      	ldr	r1, [pc, #72]	; (800a178 <MX_USB_DEVICE_Init+0x50>)
 800a130:	4812      	ldr	r0, [pc, #72]	; (800a17c <MX_USB_DEVICE_Init+0x54>)
 800a132:	f7fe ff5e 	bl	8008ff2 <USBD_Init>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a13c:	f7f7 fe4e 	bl	8001ddc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a140:	490f      	ldr	r1, [pc, #60]	; (800a180 <MX_USB_DEVICE_Init+0x58>)
 800a142:	480e      	ldr	r0, [pc, #56]	; (800a17c <MX_USB_DEVICE_Init+0x54>)
 800a144:	f7fe ff80 	bl	8009048 <USBD_RegisterClass>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d001      	beq.n	800a152 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a14e:	f7f7 fe45 	bl	8001ddc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a152:	490c      	ldr	r1, [pc, #48]	; (800a184 <MX_USB_DEVICE_Init+0x5c>)
 800a154:	4809      	ldr	r0, [pc, #36]	; (800a17c <MX_USB_DEVICE_Init+0x54>)
 800a156:	f7fe feb1 	bl	8008ebc <USBD_CDC_RegisterInterface>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a160:	f7f7 fe3c 	bl	8001ddc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a164:	4805      	ldr	r0, [pc, #20]	; (800a17c <MX_USB_DEVICE_Init+0x54>)
 800a166:	f7fe ff88 	bl	800907a <USBD_Start>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a170:	f7f7 fe34 	bl	8001ddc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a174:	bf00      	nop
 800a176:	bd80      	pop	{r7, pc}
 800a178:	2000013c 	.word	0x2000013c
 800a17c:	200009f8 	.word	0x200009f8
 800a180:	20000028 	.word	0x20000028
 800a184:	2000012c 	.word	0x2000012c

0800a188 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a18c:	2200      	movs	r2, #0
 800a18e:	4905      	ldr	r1, [pc, #20]	; (800a1a4 <CDC_Init_FS+0x1c>)
 800a190:	4805      	ldr	r0, [pc, #20]	; (800a1a8 <CDC_Init_FS+0x20>)
 800a192:	f7fe fea9 	bl	8008ee8 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a196:	4905      	ldr	r1, [pc, #20]	; (800a1ac <CDC_Init_FS+0x24>)
 800a198:	4803      	ldr	r0, [pc, #12]	; (800a1a8 <CDC_Init_FS+0x20>)
 800a19a:	f7fe febe 	bl	8008f1a <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800a19e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	20000ebc 	.word	0x20000ebc
 800a1a8:	200009f8 	.word	0x200009f8
 800a1ac:	20000cbc 	.word	0x20000cbc

0800a1b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800a1b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bc80      	pop	{r7}
 800a1bc:	4770      	bx	lr
	...

0800a1c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	6039      	str	r1, [r7, #0]
 800a1ca:	71fb      	strb	r3, [r7, #7]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 800a1d0:	79fb      	ldrb	r3, [r7, #7]
 800a1d2:	2b23      	cmp	r3, #35	; 0x23
 800a1d4:	d84a      	bhi.n	800a26c <CDC_Control_FS+0xac>
 800a1d6:	a201      	add	r2, pc, #4	; (adr r2, 800a1dc <CDC_Control_FS+0x1c>)
 800a1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1dc:	0800a26d 	.word	0x0800a26d
 800a1e0:	0800a26d 	.word	0x0800a26d
 800a1e4:	0800a26d 	.word	0x0800a26d
 800a1e8:	0800a26d 	.word	0x0800a26d
 800a1ec:	0800a26d 	.word	0x0800a26d
 800a1f0:	0800a26d 	.word	0x0800a26d
 800a1f4:	0800a26d 	.word	0x0800a26d
 800a1f8:	0800a26d 	.word	0x0800a26d
 800a1fc:	0800a26d 	.word	0x0800a26d
 800a200:	0800a26d 	.word	0x0800a26d
 800a204:	0800a26d 	.word	0x0800a26d
 800a208:	0800a26d 	.word	0x0800a26d
 800a20c:	0800a26d 	.word	0x0800a26d
 800a210:	0800a26d 	.word	0x0800a26d
 800a214:	0800a26d 	.word	0x0800a26d
 800a218:	0800a26d 	.word	0x0800a26d
 800a21c:	0800a26d 	.word	0x0800a26d
 800a220:	0800a26d 	.word	0x0800a26d
 800a224:	0800a26d 	.word	0x0800a26d
 800a228:	0800a26d 	.word	0x0800a26d
 800a22c:	0800a26d 	.word	0x0800a26d
 800a230:	0800a26d 	.word	0x0800a26d
 800a234:	0800a26d 	.word	0x0800a26d
 800a238:	0800a26d 	.word	0x0800a26d
 800a23c:	0800a26d 	.word	0x0800a26d
 800a240:	0800a26d 	.word	0x0800a26d
 800a244:	0800a26d 	.word	0x0800a26d
 800a248:	0800a26d 	.word	0x0800a26d
 800a24c:	0800a26d 	.word	0x0800a26d
 800a250:	0800a26d 	.word	0x0800a26d
 800a254:	0800a26d 	.word	0x0800a26d
 800a258:	0800a26d 	.word	0x0800a26d
 800a25c:	0800a26d 	.word	0x0800a26d
 800a260:	0800a26d 	.word	0x0800a26d
 800a264:	0800a26d 	.word	0x0800a26d
 800a268:	0800a26d 	.word	0x0800a26d
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800a26c:	bf00      	nop
	}

	return (USBD_OK);
 800a26e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a270:	4618      	mov	r0, r3
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	bc80      	pop	{r7}
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop

0800a27c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a27c:	b590      	push	{r4, r7, lr}
 800a27e:	b089      	sub	sp, #36	; 0x24
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a286:	6879      	ldr	r1, [r7, #4]
 800a288:	48b0      	ldr	r0, [pc, #704]	; (800a54c <CDC_Receive_FS+0x2d0>)
 800a28a:	f7fe fe46 	bl	8008f1a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a28e:	48af      	ldr	r0, [pc, #700]	; (800a54c <CDC_Receive_FS+0x2d0>)
 800a290:	f7fe fe85 	bl	8008f9e <USBD_CDC_ReceivePacket>

	if (*Len < 1)	return (USBD_OK);
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d101      	bne.n	800a2a0 <CDC_Receive_FS+0x24>
 800a29c:	2300      	movs	r3, #0
 800a29e:	e19c      	b.n	800a5da <CDC_Receive_FS+0x35e>

//--------------------------------------------------------------------------

	uint16_t tVal16;
	uint8_t cmd	= Buf[0];
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	77fb      	strb	r3, [r7, #31]

//--------------------------------------------------------------------------


	// Relay:1 - 12V	[0x01 - 0x01]
	if (cmd == 0x01) {
 800a2a6:	7ffb      	ldrb	r3, [r7, #31]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d15b      	bne.n	800a364 <CDC_Receive_FS+0xe8>
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00)) {
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d94b      	bls.n	800a34c <CDC_Receive_FS+0xd0>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d004      	beq.n	800a2c8 <CDC_Receive_FS+0x4c>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d141      	bne.n	800a34c <CDC_Receive_FS+0xd0>
			if (Buf[1] == 0x01) {
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d11b      	bne.n	800a30a <CDC_Receive_FS+0x8e>
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	2104      	movs	r1, #4
 800a2d6:	489e      	ldr	r0, [pc, #632]	; (800a550 <CDC_Receive_FS+0x2d4>)
 800a2d8:	f7f9 f9fb 	bl	80036d2 <HAL_GPIO_WritePin>
				RelayState = 0x01;
 800a2dc:	4b9d      	ldr	r3, [pc, #628]	; (800a554 <CDC_Receive_FS+0x2d8>)
 800a2de:	2201      	movs	r2, #1
 800a2e0:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 800a2e2:	4b9c      	ldr	r3, [pc, #624]	; (800a554 <CDC_Receive_FS+0x2d8>)
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	489b      	ldr	r0, [pc, #620]	; (800a558 <CDC_Receive_FS+0x2dc>)
 800a2ea:	f000 fdb7 	bl	800ae5c <iprintf>
				SetAllDAC();
 800a2ee:	f7f6 fe5b 	bl	8000fa8 <SetAllDAC>

				UserTxBufferFS[0]	= cmd;
 800a2f2:	4a9a      	ldr	r2, [pc, #616]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a2f4:	7ffb      	ldrb	r3, [r7, #31]
 800a2f6:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1]	= 0x00;	// успешно
 800a2f8:	4b98      	ldr	r3, [pc, #608]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800a2fe:	2102      	movs	r1, #2
 800a300:	4896      	ldr	r0, [pc, #600]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a302:	f000 f973 	bl	800a5ec <CDC_Transmit_FS>
				return (USBD_OK);
 800a306:	2300      	movs	r3, #0
 800a308:	e167      	b.n	800a5da <CDC_Receive_FS+0x35e>

			} else if (Buf[1] == 0x00) {
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	3301      	adds	r3, #1
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d11b      	bne.n	800a34c <CDC_Receive_FS+0xd0>
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800a314:	2200      	movs	r2, #0
 800a316:	2104      	movs	r1, #4
 800a318:	488d      	ldr	r0, [pc, #564]	; (800a550 <CDC_Receive_FS+0x2d4>)
 800a31a:	f7f9 f9da 	bl	80036d2 <HAL_GPIO_WritePin>
				RelayState = 0x00;
 800a31e:	4b8d      	ldr	r3, [pc, #564]	; (800a554 <CDC_Receive_FS+0x2d8>)
 800a320:	2200      	movs	r2, #0
 800a322:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800a324:	4b8b      	ldr	r3, [pc, #556]	; (800a554 <CDC_Receive_FS+0x2d8>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	4619      	mov	r1, r3
 800a32a:	488d      	ldr	r0, [pc, #564]	; (800a560 <CDC_Receive_FS+0x2e4>)
 800a32c:	f000 fd96 	bl	800ae5c <iprintf>
				SetAllDAC();
 800a330:	f7f6 fe3a 	bl	8000fa8 <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800a334:	4a89      	ldr	r2, [pc, #548]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a336:	7ffb      	ldrb	r3, [r7, #31]
 800a338:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x00;	// успешно
 800a33a:	4b88      	ldr	r3, [pc, #544]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800a340:	2102      	movs	r1, #2
 800a342:	4886      	ldr	r0, [pc, #536]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a344:	f000 f952 	bl	800a5ec <CDC_Transmit_FS>
				return (USBD_OK);
 800a348:	2300      	movs	r3, #0
 800a34a:	e146      	b.n	800a5da <CDC_Receive_FS+0x35e>
			}
		}

		UserTxBufferFS[0] = cmd;
 800a34c:	4a83      	ldr	r2, [pc, #524]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a34e:	7ffb      	ldrb	r3, [r7, #31]
 800a350:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;	// ошибка
 800a352:	4b82      	ldr	r3, [pc, #520]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a354:	2201      	movs	r2, #1
 800a356:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800a358:	2102      	movs	r1, #2
 800a35a:	4880      	ldr	r0, [pc, #512]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a35c:	f000 f946 	bl	800a5ec <CDC_Transmit_FS>
		return (USBD_OK);
 800a360:	2300      	movs	r3, #0
 800a362:	e13a      	b.n	800a5da <CDC_Receive_FS+0x35e>

//--------------------------------------------------------------------------
	// DA:4095
	} else if (cmd == 0x02) {
 800a364:	7ffb      	ldrb	r3, [r7, #31]
 800a366:	2b02      	cmp	r3, #2
 800a368:	d12e      	bne.n	800a3c8 <CDC_Receive_FS+0x14c>
		if (*Len >= 3) {
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d91e      	bls.n	800a3b0 <CDC_Receive_FS+0x134>
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 800a372:	f7f6 ff1d 	bl	80011b0 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 800a376:	f7f6 ff3f 	bl	80011f8 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	3301      	adds	r3, #1
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	b29b      	uxth	r3, r3
 800a382:	83bb      	strh	r3, [r7, #28]
			SetDacA(tVal16);
 800a384:	8bbb      	ldrh	r3, [r7, #28]
 800a386:	b21b      	sxth	r3, r3
 800a388:	4618      	mov	r0, r3
 800a38a:	f7f6 fdcd 	bl	8000f28 <SetDacA>
//			SetDacA(tVal16);

			printf("DacA: %d\n", tVal16);
 800a38e:	8bbb      	ldrh	r3, [r7, #28]
 800a390:	4619      	mov	r1, r3
 800a392:	4874      	ldr	r0, [pc, #464]	; (800a564 <CDC_Receive_FS+0x2e8>)
 800a394:	f000 fd62 	bl	800ae5c <iprintf>
			UserTxBufferFS[0] = cmd;
 800a398:	4a70      	ldr	r2, [pc, #448]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a39a:	7ffb      	ldrb	r3, [r7, #31]
 800a39c:	7013      	strb	r3, [r2, #0]
			UserTxBufferFS[1] = 0x00;	// успешно
 800a39e:	4b6f      	ldr	r3, [pc, #444]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 800a3a4:	2102      	movs	r1, #2
 800a3a6:	486d      	ldr	r0, [pc, #436]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a3a8:	f000 f920 	bl	800a5ec <CDC_Transmit_FS>
			return (USBD_OK);
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	e114      	b.n	800a5da <CDC_Receive_FS+0x35e>
		}

		UserTxBufferFS[0] = cmd;
 800a3b0:	4a6a      	ldr	r2, [pc, #424]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a3b2:	7ffb      	ldrb	r3, [r7, #31]
 800a3b4:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;		// ошибка
 800a3b6:	4b69      	ldr	r3, [pc, #420]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800a3bc:	2102      	movs	r1, #2
 800a3be:	4867      	ldr	r0, [pc, #412]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a3c0:	f000 f914 	bl	800a5ec <CDC_Transmit_FS>
		return (USBD_OK);
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	e108      	b.n	800a5da <CDC_Receive_FS+0x35e>
//--------------------------------------------------------------------------
	// DB:4095
	} else if (cmd == 0x03) {
 800a3c8:	7ffb      	ldrb	r3, [r7, #31]
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	d12e      	bne.n	800a42c <CDC_Receive_FS+0x1b0>
		if (*Len >= 3) {
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d91e      	bls.n	800a414 <CDC_Receive_FS+0x198>
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 800a3d6:	f7f6 feeb 	bl	80011b0 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 800a3da:	f7f6 ff0d 	bl	80011f8 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	83bb      	strh	r3, [r7, #28]
			SetDacB(tVal16);
 800a3e8:	8bbb      	ldrh	r3, [r7, #28]
 800a3ea:	b21b      	sxth	r3, r3
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7f6 fdbb 	bl	8000f68 <SetDacB>

			UserTxBufferFS[0] = cmd;
 800a3f2:	4a5a      	ldr	r2, [pc, #360]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a3f4:	7ffb      	ldrb	r3, [r7, #31]
 800a3f6:	7013      	strb	r3, [r2, #0]
			UserTxBufferFS[1] = 0x00;	// успешно
 800a3f8:	4b58      	ldr	r3, [pc, #352]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n",tVal16);
 800a3fe:	8bbb      	ldrh	r3, [r7, #28]
 800a400:	4619      	mov	r1, r3
 800a402:	4859      	ldr	r0, [pc, #356]	; (800a568 <CDC_Receive_FS+0x2ec>)
 800a404:	f000 fd2a 	bl	800ae5c <iprintf>


			CDC_Transmit_FS(UserTxBufferFS, 2);
 800a408:	2102      	movs	r1, #2
 800a40a:	4854      	ldr	r0, [pc, #336]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a40c:	f000 f8ee 	bl	800a5ec <CDC_Transmit_FS>
			return (USBD_OK);
 800a410:	2300      	movs	r3, #0
 800a412:	e0e2      	b.n	800a5da <CDC_Receive_FS+0x35e>
		}

		UserTxBufferFS[0] = cmd;
 800a414:	4a51      	ldr	r2, [pc, #324]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a416:	7ffb      	ldrb	r3, [r7, #31]
 800a418:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;		// ошибка
 800a41a:	4b50      	ldr	r3, [pc, #320]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a41c:	2201      	movs	r2, #1
 800a41e:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800a420:	2102      	movs	r1, #2
 800a422:	484e      	ldr	r0, [pc, #312]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a424:	f000 f8e2 	bl	800a5ec <CDC_Transmit_FS>
		return (USBD_OK);
 800a428:	2300      	movs	r3, #0
 800a42a:	e0d6      	b.n	800a5da <CDC_Receive_FS+0x35e>
//--------------------------------------------------------------------------
	// ADC?
	} else if (cmd == 0x04) {
 800a42c:	7ffb      	ldrb	r3, [r7, #31]
 800a42e:	2b04      	cmp	r3, #4
 800a430:	d10f      	bne.n	800a452 <CDC_Receive_FS+0x1d6>
		tVal16 = GetADC();
 800a432:	f7f6 ff57 	bl	80012e4 <GetADC>
 800a436:	4603      	mov	r3, r0
 800a438:	83bb      	strh	r3, [r7, #28]
		UserTxBufferFS[0] = cmd;
 800a43a:	4a48      	ldr	r2, [pc, #288]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a43c:	7ffb      	ldrb	r3, [r7, #31]
 800a43e:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 800a440:	4a4a      	ldr	r2, [pc, #296]	; (800a56c <CDC_Receive_FS+0x2f0>)
 800a442:	8bbb      	ldrh	r3, [r7, #28]
 800a444:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 800a446:	2103      	movs	r1, #3
 800a448:	4844      	ldr	r0, [pc, #272]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a44a:	f000 f8cf 	bl	800a5ec <CDC_Transmit_FS>
		return (USBD_OK);
 800a44e:	2300      	movs	r3, #0
 800a450:	e0c3      	b.n	800a5da <CDC_Receive_FS+0x35e>
//--------------------------------------------------------------------------
	// Relay?DA?DB?
	} else if (cmd == 0x05) {
 800a452:	7ffb      	ldrb	r3, [r7, #31]
 800a454:	2b05      	cmp	r3, #5
 800a456:	d11a      	bne.n	800a48e <CDC_Receive_FS+0x212>
		UserTxBufferFS[0] = cmd;
 800a458:	4a40      	ldr	r2, [pc, #256]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a45a:	7ffb      	ldrb	r3, [r7, #31]
 800a45c:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = RelayState;
 800a45e:	4b3d      	ldr	r3, [pc, #244]	; (800a554 <CDC_Receive_FS+0x2d8>)
 800a460:	781a      	ldrb	r2, [r3, #0]
 800a462:	4b3e      	ldr	r3, [pc, #248]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a464:	705a      	strb	r2, [r3, #1]

		tVal16 = GetDacA();
 800a466:	f7f6 fdb1 	bl	8000fcc <GetDacA>
 800a46a:	4603      	mov	r3, r0
 800a46c:	83bb      	strh	r3, [r7, #28]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 800a46e:	4a40      	ldr	r2, [pc, #256]	; (800a570 <CDC_Receive_FS+0x2f4>)
 800a470:	8bbb      	ldrh	r3, [r7, #28]
 800a472:	8013      	strh	r3, [r2, #0]

		tVal16 = GetDacB();
 800a474:	f7f6 fdb4 	bl	8000fe0 <GetDacB>
 800a478:	4603      	mov	r3, r0
 800a47a:	83bb      	strh	r3, [r7, #28]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 800a47c:	4a3d      	ldr	r2, [pc, #244]	; (800a574 <CDC_Receive_FS+0x2f8>)
 800a47e:	8bbb      	ldrh	r3, [r7, #28]
 800a480:	8013      	strh	r3, [r2, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 800a482:	2106      	movs	r1, #6
 800a484:	4835      	ldr	r0, [pc, #212]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a486:	f000 f8b1 	bl	800a5ec <CDC_Transmit_FS>
		return (USBD_OK);
 800a48a:	2300      	movs	r3, #0
 800a48c:	e0a5      	b.n	800a5da <CDC_Receive_FS+0x35e>
//--------------------------------------------------------------------------
	// Btn?
	} else if (cmd == 0x06) {
 800a48e:	7ffb      	ldrb	r3, [r7, #31]
 800a490:	2b06      	cmp	r3, #6
 800a492:	d11a      	bne.n	800a4ca <CDC_Receive_FS+0x24e>
		UserTxBufferFS[0] = cmd;
 800a494:	4a31      	ldr	r2, [pc, #196]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a496:	7ffb      	ldrb	r3, [r7, #31]
 800a498:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 800a49a:	f7f6 fdab 	bl	8000ff4 <GetBtnRunState>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	4b2e      	ldr	r3, [pc, #184]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a4a4:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 800a4a6:	f7f6 fde7 	bl	8001078 <GetBtnUpState>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	4b2b      	ldr	r3, [pc, #172]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a4b0:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 800a4b2:	f7f6 fe23 	bl	80010fc <GetBtnDownState>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	4b28      	ldr	r3, [pc, #160]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a4bc:	70da      	strb	r2, [r3, #3]

		CDC_Transmit_FS(UserTxBufferFS, 4);
 800a4be:	2104      	movs	r1, #4
 800a4c0:	4826      	ldr	r0, [pc, #152]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a4c2:	f000 f893 	bl	800a5ec <CDC_Transmit_FS>
		return (USBD_OK);
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	e087      	b.n	800a5da <CDC_Receive_FS+0x35e>
	// ID? 
	} else if (cmd == 0x07) {
 800a4ca:	7ffb      	ldrb	r3, [r7, #31]
 800a4cc:	2b07      	cmp	r3, #7
 800a4ce:	d157      	bne.n	800a580 <CDC_Receive_FS+0x304>
//		char sstr[] = "SN";
//		strcat(str,sstr);
////		itoa(sstr,str,16);
//		itoa(SN_DEFINE,str+2,16);

		char str[9]={0,};
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	613b      	str	r3, [r7, #16]
 800a4d4:	f107 0314 	add.w	r3, r7, #20
 800a4d8:	2200      	movs	r2, #0
 800a4da:	601a      	str	r2, [r3, #0]
 800a4dc:	711a      	strb	r2, [r3, #4]
		memcpy(str, "SN", strlen("SN"));
 800a4de:	f107 0310 	add.w	r3, r7, #16
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	4924      	ldr	r1, [pc, #144]	; (800a578 <CDC_Receive_FS+0x2fc>)
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 fca2 	bl	800ae30 <memcpy>
		itoa(SN_DEFINE,str+2,16);
 800a4ec:	f107 0310 	add.w	r3, r7, #16
 800a4f0:	3302      	adds	r3, #2
 800a4f2:	2210      	movs	r2, #16
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	4821      	ldr	r0, [pc, #132]	; (800a57c <CDC_Receive_FS+0x300>)
 800a4f8:	f000 fc98 	bl	800ae2c <itoa>



		UserTxBufferFS[0] = cmd;
 800a4fc:	4a17      	ldr	r2, [pc, #92]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a4fe:	7ffb      	ldrb	r3, [r7, #31]
 800a500:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = strlen(str);
 800a502:	f107 0310 	add.w	r3, r7, #16
 800a506:	4618      	mov	r0, r3
 800a508:	f7f5 fe22 	bl	8000150 <strlen>
 800a50c:	4603      	mov	r3, r0
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	4b12      	ldr	r3, [pc, #72]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a512:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 800a514:	4c16      	ldr	r4, [pc, #88]	; (800a570 <CDC_Receive_FS+0x2f4>)
 800a516:	f107 0310 	add.w	r3, r7, #16
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7f5 fe18 	bl	8000150 <strlen>
 800a520:	4602      	mov	r2, r0
 800a522:	f107 0310 	add.w	r3, r7, #16
 800a526:	4619      	mov	r1, r3
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 fc81 	bl	800ae30 <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 800a52e:	f107 0310 	add.w	r3, r7, #16
 800a532:	4618      	mov	r0, r3
 800a534:	f7f5 fe0c 	bl	8000150 <strlen>
 800a538:	4603      	mov	r3, r0
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	3302      	adds	r3, #2
 800a53e:	b29b      	uxth	r3, r3
 800a540:	4619      	mov	r1, r3
 800a542:	4806      	ldr	r0, [pc, #24]	; (800a55c <CDC_Receive_FS+0x2e0>)
 800a544:	f000 f852 	bl	800a5ec <CDC_Transmit_FS>
		return (USBD_OK);
 800a548:	2300      	movs	r3, #0
 800a54a:	e046      	b.n	800a5da <CDC_Receive_FS+0x35e>
 800a54c:	200009f8 	.word	0x200009f8
 800a550:	40010800 	.word	0x40010800
 800a554:	20000289 	.word	0x20000289
 800a558:	0800c2e4 	.word	0x0800c2e4
 800a55c:	20000ebc 	.word	0x20000ebc
 800a560:	0800c2fc 	.word	0x0800c2fc
 800a564:	0800c314 	.word	0x0800c314
 800a568:	0800c320 	.word	0x0800c320
 800a56c:	20000ebd 	.word	0x20000ebd
 800a570:	20000ebe 	.word	0x20000ebe
 800a574:	20000ec0 	.word	0x20000ec0
 800a578:	0800c32c 	.word	0x0800c32c
 800a57c:	01121001 	.word	0x01121001
	 * до того момента пока на выходах компараторов не появится 1.
	 * Т.е. каждый раз когда мы меняем входной код - мы запрашиваем контроллер щупа о состоянии выходов компаратора.
	 */

	// inHL?
	} else if (cmd == 0x08) {
 800a580:	7ffb      	ldrb	r3, [r7, #31]
 800a582:	2b08      	cmp	r3, #8
 800a584:	d112      	bne.n	800a5ac <CDC_Receive_FS+0x330>
		EnableTIM3_PB4();
 800a586:	f7f6 fdfb 	bl	8001180 <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 800a58a:	f7f6 fe05 	bl	8001198 <GetTIM3>
 800a58e:	4603      	mov	r3, r0
 800a590:	b29b      	uxth	r3, r3
 800a592:	81fb      	strh	r3, [r7, #14]
		UserTxBufferFS[0] = cmd;
 800a594:	4a13      	ldr	r2, [pc, #76]	; (800a5e4 <CDC_Receive_FS+0x368>)
 800a596:	7ffb      	ldrb	r3, [r7, #31]
 800a598:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS+1,&temp,sizeof(uint16_t));
 800a59a:	4a13      	ldr	r2, [pc, #76]	; (800a5e8 <CDC_Receive_FS+0x36c>)
 800a59c:	89fb      	ldrh	r3, [r7, #14]
 800a59e:	8013      	strh	r3, [r2, #0]
//	    for(int i = 0;i >= 10; i++ ){
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//			HAL_Delay(250);
//		}

		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800a5a0:	2103      	movs	r1, #3
 800a5a2:	4810      	ldr	r0, [pc, #64]	; (800a5e4 <CDC_Receive_FS+0x368>)
 800a5a4:	f000 f822 	bl	800a5ec <CDC_Transmit_FS>
		return (USBD_OK);
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	e016      	b.n	800a5da <CDC_Receive_FS+0x35e>

	// inLL?
	} else if (cmd == 0x09) {
 800a5ac:	7ffb      	ldrb	r3, [r7, #31]
 800a5ae:	2b09      	cmp	r3, #9
 800a5b0:	d112      	bne.n	800a5d8 <CDC_Receive_FS+0x35c>
		EnableTIM4_PB6();
 800a5b2:	f7f6 fe09 	bl	80011c8 <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 800a5b6:	f7f6 fe13 	bl	80011e0 <GetTIM4>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	81bb      	strh	r3, [r7, #12]
		UserTxBufferFS[0] = cmd;
 800a5c0:	4a08      	ldr	r2, [pc, #32]	; (800a5e4 <CDC_Receive_FS+0x368>)
 800a5c2:	7ffb      	ldrb	r3, [r7, #31]
 800a5c4:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS+1,&temp,sizeof(uint16_t));
 800a5c6:	4a08      	ldr	r2, [pc, #32]	; (800a5e8 <CDC_Receive_FS+0x36c>)
 800a5c8:	89bb      	ldrh	r3, [r7, #12]
 800a5ca:	8013      	strh	r3, [r2, #0]



		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800a5cc:	2103      	movs	r1, #3
 800a5ce:	4805      	ldr	r0, [pc, #20]	; (800a5e4 <CDC_Receive_FS+0x368>)
 800a5d0:	f000 f80c 	bl	800a5ec <CDC_Transmit_FS>
		return (USBD_OK);
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	e000      	b.n	800a5da <CDC_Receive_FS+0x35e>
	}

//--------------------------------------------------------------------------
	return (USBD_OK);
 800a5d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3724      	adds	r7, #36	; 0x24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd90      	pop	{r4, r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20000ebc 	.word	0x20000ebc
 800a5e8:	20000ebd 	.word	0x20000ebd

0800a5ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 800a5fc:	4b0d      	ldr	r3, [pc, #52]	; (800a634 <CDC_Transmit_FS+0x48>)
 800a5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a602:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0) {
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d001      	beq.n	800a612 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800a60e:	2301      	movs	r3, #1
 800a610:	e00b      	b.n	800a62a <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a612:	887b      	ldrh	r3, [r7, #2]
 800a614:	461a      	mov	r2, r3
 800a616:	6879      	ldr	r1, [r7, #4]
 800a618:	4806      	ldr	r0, [pc, #24]	; (800a634 <CDC_Transmit_FS+0x48>)
 800a61a:	f7fe fc65 	bl	8008ee8 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a61e:	4805      	ldr	r0, [pc, #20]	; (800a634 <CDC_Transmit_FS+0x48>)
 800a620:	f7fe fc8e 	bl	8008f40 <USBD_CDC_TransmitPacket>
 800a624:	4603      	mov	r3, r0
 800a626:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a628:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	200009f8 	.word	0x200009f8

0800a638 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	6039      	str	r1, [r7, #0]
 800a642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	2212      	movs	r2, #18
 800a648:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a64a:	4b03      	ldr	r3, [pc, #12]	; (800a658 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	bc80      	pop	{r7}
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	20000158 	.word	0x20000158

0800a65c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	4603      	mov	r3, r0
 800a664:	6039      	str	r1, [r7, #0]
 800a666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	2204      	movs	r2, #4
 800a66c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a66e:	4b03      	ldr	r3, [pc, #12]	; (800a67c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a670:	4618      	mov	r0, r3
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	bc80      	pop	{r7}
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	2000016c 	.word	0x2000016c

0800a680 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	4603      	mov	r3, r0
 800a688:	6039      	str	r1, [r7, #0]
 800a68a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a68c:	79fb      	ldrb	r3, [r7, #7]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d105      	bne.n	800a69e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	4907      	ldr	r1, [pc, #28]	; (800a6b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a696:	4808      	ldr	r0, [pc, #32]	; (800a6b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a698:	f7ff fc68 	bl	8009f6c <USBD_GetString>
 800a69c:	e004      	b.n	800a6a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	4904      	ldr	r1, [pc, #16]	; (800a6b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a6a2:	4805      	ldr	r0, [pc, #20]	; (800a6b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a6a4:	f7ff fc62 	bl	8009f6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6a8:	4b02      	ldr	r3, [pc, #8]	; (800a6b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	200010bc 	.word	0x200010bc
 800a6b8:	0800c330 	.word	0x0800c330

0800a6bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	6039      	str	r1, [r7, #0]
 800a6c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a6c8:	683a      	ldr	r2, [r7, #0]
 800a6ca:	4904      	ldr	r1, [pc, #16]	; (800a6dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a6cc:	4804      	ldr	r0, [pc, #16]	; (800a6e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a6ce:	f7ff fc4d 	bl	8009f6c <USBD_GetString>
  return USBD_StrDesc;
 800a6d2:	4b02      	ldr	r3, [pc, #8]	; (800a6dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	200010bc 	.word	0x200010bc
 800a6e0:	0800c348 	.word	0x0800c348

0800a6e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	6039      	str	r1, [r7, #0]
 800a6ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	221a      	movs	r2, #26
 800a6f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a6f6:	f000 f843 	bl	800a780 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a6fa:	4b02      	ldr	r3, [pc, #8]	; (800a704 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	20000170 	.word	0x20000170

0800a708 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	4603      	mov	r3, r0
 800a710:	6039      	str	r1, [r7, #0]
 800a712:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d105      	bne.n	800a726 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	4907      	ldr	r1, [pc, #28]	; (800a73c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a71e:	4808      	ldr	r0, [pc, #32]	; (800a740 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a720:	f7ff fc24 	bl	8009f6c <USBD_GetString>
 800a724:	e004      	b.n	800a730 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	4904      	ldr	r1, [pc, #16]	; (800a73c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a72a:	4805      	ldr	r0, [pc, #20]	; (800a740 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a72c:	f7ff fc1e 	bl	8009f6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a730:	4b02      	ldr	r3, [pc, #8]	; (800a73c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a732:	4618      	mov	r0, r3
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	200010bc 	.word	0x200010bc
 800a740:	0800c35c 	.word	0x0800c35c

0800a744 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	4603      	mov	r3, r0
 800a74c:	6039      	str	r1, [r7, #0]
 800a74e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a750:	79fb      	ldrb	r3, [r7, #7]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d105      	bne.n	800a762 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	4907      	ldr	r1, [pc, #28]	; (800a778 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a75a:	4808      	ldr	r0, [pc, #32]	; (800a77c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a75c:	f7ff fc06 	bl	8009f6c <USBD_GetString>
 800a760:	e004      	b.n	800a76c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	4904      	ldr	r1, [pc, #16]	; (800a778 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a766:	4805      	ldr	r0, [pc, #20]	; (800a77c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a768:	f7ff fc00 	bl	8009f6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a76c:	4b02      	ldr	r3, [pc, #8]	; (800a778 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	200010bc 	.word	0x200010bc
 800a77c:	0800c368 	.word	0x0800c368

0800a780 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a786:	4b0f      	ldr	r3, [pc, #60]	; (800a7c4 <Get_SerialNum+0x44>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a78c:	4b0e      	ldr	r3, [pc, #56]	; (800a7c8 <Get_SerialNum+0x48>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a792:	4b0e      	ldr	r3, [pc, #56]	; (800a7cc <Get_SerialNum+0x4c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4413      	add	r3, r2
 800a79e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d009      	beq.n	800a7ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a7a6:	2208      	movs	r2, #8
 800a7a8:	4909      	ldr	r1, [pc, #36]	; (800a7d0 <Get_SerialNum+0x50>)
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f000 f814 	bl	800a7d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a7b0:	2204      	movs	r2, #4
 800a7b2:	4908      	ldr	r1, [pc, #32]	; (800a7d4 <Get_SerialNum+0x54>)
 800a7b4:	68b8      	ldr	r0, [r7, #8]
 800a7b6:	f000 f80f 	bl	800a7d8 <IntToUnicode>
  }
}
 800a7ba:	bf00      	nop
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	1ffff7e8 	.word	0x1ffff7e8
 800a7c8:	1ffff7ec 	.word	0x1ffff7ec
 800a7cc:	1ffff7f0 	.word	0x1ffff7f0
 800a7d0:	20000172 	.word	0x20000172
 800a7d4:	20000182 	.word	0x20000182

0800a7d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b087      	sub	sp, #28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	75fb      	strb	r3, [r7, #23]
 800a7ee:	e027      	b.n	800a840 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	0f1b      	lsrs	r3, r3, #28
 800a7f4:	2b09      	cmp	r3, #9
 800a7f6:	d80b      	bhi.n	800a810 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	0f1b      	lsrs	r3, r3, #28
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	7dfb      	ldrb	r3, [r7, #23]
 800a800:	005b      	lsls	r3, r3, #1
 800a802:	4619      	mov	r1, r3
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	440b      	add	r3, r1
 800a808:	3230      	adds	r2, #48	; 0x30
 800a80a:	b2d2      	uxtb	r2, r2
 800a80c:	701a      	strb	r2, [r3, #0]
 800a80e:	e00a      	b.n	800a826 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	0f1b      	lsrs	r3, r3, #28
 800a814:	b2da      	uxtb	r2, r3
 800a816:	7dfb      	ldrb	r3, [r7, #23]
 800a818:	005b      	lsls	r3, r3, #1
 800a81a:	4619      	mov	r1, r3
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	440b      	add	r3, r1
 800a820:	3237      	adds	r2, #55	; 0x37
 800a822:	b2d2      	uxtb	r2, r2
 800a824:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	011b      	lsls	r3, r3, #4
 800a82a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a82c:	7dfb      	ldrb	r3, [r7, #23]
 800a82e:	005b      	lsls	r3, r3, #1
 800a830:	3301      	adds	r3, #1
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	4413      	add	r3, r2
 800a836:	2200      	movs	r2, #0
 800a838:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
 800a83c:	3301      	adds	r3, #1
 800a83e:	75fb      	strb	r3, [r7, #23]
 800a840:	7dfa      	ldrb	r2, [r7, #23]
 800a842:	79fb      	ldrb	r3, [r7, #7]
 800a844:	429a      	cmp	r2, r3
 800a846:	d3d3      	bcc.n	800a7f0 <IntToUnicode+0x18>
  }
}
 800a848:	bf00      	nop
 800a84a:	bf00      	nop
 800a84c:	371c      	adds	r7, #28
 800a84e:	46bd      	mov	sp, r7
 800a850:	bc80      	pop	{r7}
 800a852:	4770      	bx	lr

0800a854 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a0d      	ldr	r2, [pc, #52]	; (800a898 <HAL_PCD_MspInit+0x44>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d113      	bne.n	800a88e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a866:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <HAL_PCD_MspInit+0x48>)
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	4a0c      	ldr	r2, [pc, #48]	; (800a89c <HAL_PCD_MspInit+0x48>)
 800a86c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a870:	61d3      	str	r3, [r2, #28]
 800a872:	4b0a      	ldr	r3, [pc, #40]	; (800a89c <HAL_PCD_MspInit+0x48>)
 800a874:	69db      	ldr	r3, [r3, #28]
 800a876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a87e:	2200      	movs	r2, #0
 800a880:	2100      	movs	r1, #0
 800a882:	2014      	movs	r0, #20
 800a884:	f7f8 fb37 	bl	8002ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a888:	2014      	movs	r0, #20
 800a88a:	f7f8 fb50 	bl	8002f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a88e:	bf00      	nop
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	40005c00 	.word	0x40005c00
 800a89c:	40021000 	.word	0x40021000

0800a8a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	f7fe fc27 	bl	800910a <USBD_LL_SetupStage>
}
 800a8bc:	bf00      	nop
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a8d6:	78fa      	ldrb	r2, [r7, #3]
 800a8d8:	6879      	ldr	r1, [r7, #4]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4413      	add	r3, r2
 800a8e0:	00db      	lsls	r3, r3, #3
 800a8e2:	440b      	add	r3, r1
 800a8e4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	78fb      	ldrb	r3, [r7, #3]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	f7fe fc59 	bl	80091a4 <USBD_LL_DataOutStage>
}
 800a8f2:	bf00      	nop
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b082      	sub	sp, #8
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	460b      	mov	r3, r1
 800a904:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a90c:	78fa      	ldrb	r2, [r7, #3]
 800a90e:	6879      	ldr	r1, [r7, #4]
 800a910:	4613      	mov	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	440b      	add	r3, r1
 800a91a:	333c      	adds	r3, #60	; 0x3c
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	78fb      	ldrb	r3, [r7, #3]
 800a920:	4619      	mov	r1, r3
 800a922:	f7fe fcb0 	bl	8009286 <USBD_LL_DataInStage>
}
 800a926:	bf00      	nop
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b082      	sub	sp, #8
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7fe fdc0 	bl	80094c2 <USBD_LL_SOF>
}
 800a942:	bf00      	nop
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b084      	sub	sp, #16
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a952:	2301      	movs	r3, #1
 800a954:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d001      	beq.n	800a962 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a95e:	f7f7 fa3d 	bl	8001ddc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a968:	7bfa      	ldrb	r2, [r7, #15]
 800a96a:	4611      	mov	r1, r2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fe fd70 	bl	8009452 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a978:	4618      	mov	r0, r3
 800a97a:	f7fe fd29 	bl	80093d0 <USBD_LL_Reset>
}
 800a97e:	bf00      	nop
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
	...

0800a988 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a996:	4618      	mov	r0, r3
 800a998:	f7fe fd6a 	bl	8009470 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d005      	beq.n	800a9b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9a4:	4b04      	ldr	r3, [pc, #16]	; (800a9b8 <HAL_PCD_SuspendCallback+0x30>)
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	4a03      	ldr	r2, [pc, #12]	; (800a9b8 <HAL_PCD_SuspendCallback+0x30>)
 800a9aa:	f043 0306 	orr.w	r3, r3, #6
 800a9ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a9b0:	bf00      	nop
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	e000ed00 	.word	0xe000ed00

0800a9bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fe fd64 	bl	8009498 <USBD_LL_Resume>
}
 800a9d0:	bf00      	nop
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a9e0:	4a28      	ldr	r2, [pc, #160]	; (800aa84 <USBD_LL_Init+0xac>)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a26      	ldr	r2, [pc, #152]	; (800aa84 <USBD_LL_Init+0xac>)
 800a9ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a9f0:	4b24      	ldr	r3, [pc, #144]	; (800aa84 <USBD_LL_Init+0xac>)
 800a9f2:	4a25      	ldr	r2, [pc, #148]	; (800aa88 <USBD_LL_Init+0xb0>)
 800a9f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a9f6:	4b23      	ldr	r3, [pc, #140]	; (800aa84 <USBD_LL_Init+0xac>)
 800a9f8:	2208      	movs	r2, #8
 800a9fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a9fc:	4b21      	ldr	r3, [pc, #132]	; (800aa84 <USBD_LL_Init+0xac>)
 800a9fe:	2202      	movs	r2, #2
 800aa00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aa02:	4b20      	ldr	r3, [pc, #128]	; (800aa84 <USBD_LL_Init+0xac>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800aa08:	4b1e      	ldr	r3, [pc, #120]	; (800aa84 <USBD_LL_Init+0xac>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aa0e:	4b1d      	ldr	r3, [pc, #116]	; (800aa84 <USBD_LL_Init+0xac>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aa14:	481b      	ldr	r0, [pc, #108]	; (800aa84 <USBD_LL_Init+0xac>)
 800aa16:	f7f8 fe8d 	bl	8003734 <HAL_PCD_Init>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d001      	beq.n	800aa24 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800aa20:	f7f7 f9dc 	bl	8001ddc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa2a:	2318      	movs	r3, #24
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	2100      	movs	r1, #0
 800aa30:	f7fa f9cf 	bl	8004dd2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa3a:	2358      	movs	r3, #88	; 0x58
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	2180      	movs	r1, #128	; 0x80
 800aa40:	f7fa f9c7 	bl	8004dd2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa4a:	23c0      	movs	r3, #192	; 0xc0
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	2181      	movs	r1, #129	; 0x81
 800aa50:	f7fa f9bf 	bl	8004dd2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800aa5e:	2200      	movs	r2, #0
 800aa60:	2101      	movs	r1, #1
 800aa62:	f7fa f9b6 	bl	8004dd2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa70:	2200      	movs	r2, #0
 800aa72:	2182      	movs	r1, #130	; 0x82
 800aa74:	f7fa f9ad 	bl	8004dd2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	200012bc 	.word	0x200012bc
 800aa88:	40005c00 	.word	0x40005c00

0800aa8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7f8 ff51 	bl	800394a <HAL_PCD_Start>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaac:	7bfb      	ldrb	r3, [r7, #15]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 f94e 	bl	800ad50 <USBD_Get_USB_Status>
 800aab4:	4603      	mov	r3, r0
 800aab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aab8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	4608      	mov	r0, r1
 800aacc:	4611      	mov	r1, r2
 800aace:	461a      	mov	r2, r3
 800aad0:	4603      	mov	r3, r0
 800aad2:	70fb      	strb	r3, [r7, #3]
 800aad4:	460b      	mov	r3, r1
 800aad6:	70bb      	strb	r3, [r7, #2]
 800aad8:	4613      	mov	r3, r2
 800aada:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aaea:	78bb      	ldrb	r3, [r7, #2]
 800aaec:	883a      	ldrh	r2, [r7, #0]
 800aaee:	78f9      	ldrb	r1, [r7, #3]
 800aaf0:	f7f9 f8cb 	bl	8003c8a <HAL_PCD_EP_Open>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaf8:	7bfb      	ldrb	r3, [r7, #15]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 f928 	bl	800ad50 <USBD_Get_USB_Status>
 800ab00:	4603      	mov	r3, r0
 800ab02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b084      	sub	sp, #16
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
 800ab16:	460b      	mov	r3, r1
 800ab18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab28:	78fa      	ldrb	r2, [r7, #3]
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7f9 f912 	bl	8003d56 <HAL_PCD_EP_Close>
 800ab32:	4603      	mov	r3, r0
 800ab34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f000 f909 	bl	800ad50 <USBD_Get_USB_Status>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab66:	78fa      	ldrb	r2, [r7, #3]
 800ab68:	4611      	mov	r1, r2
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7f9 f9d2 	bl	8003f14 <HAL_PCD_EP_SetStall>
 800ab70:	4603      	mov	r3, r0
 800ab72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 f8ea 	bl	800ad50 <USBD_Get_USB_Status>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	460b      	mov	r3, r1
 800ab94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aba4:	78fa      	ldrb	r2, [r7, #3]
 800aba6:	4611      	mov	r1, r2
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7f9 fa13 	bl	8003fd4 <HAL_PCD_EP_ClrStall>
 800abae:	4603      	mov	r3, r0
 800abb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abb2:	7bfb      	ldrb	r3, [r7, #15]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 f8cb 	bl	800ad50 <USBD_Get_USB_Status>
 800abba:	4603      	mov	r3, r0
 800abbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800abdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	da0c      	bge.n	800abfe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800abe4:	78fb      	ldrb	r3, [r7, #3]
 800abe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abea:	68f9      	ldr	r1, [r7, #12]
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	4613      	mov	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	00db      	lsls	r3, r3, #3
 800abf6:	440b      	add	r3, r1
 800abf8:	3302      	adds	r3, #2
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	e00b      	b.n	800ac16 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800abfe:	78fb      	ldrb	r3, [r7, #3]
 800ac00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac04:	68f9      	ldr	r1, [r7, #12]
 800ac06:	4613      	mov	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	00db      	lsls	r3, r3, #3
 800ac0e:	440b      	add	r3, r1
 800ac10:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ac14:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bc80      	pop	{r7}
 800ac1e:	4770      	bx	lr

0800ac20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac3a:	78fa      	ldrb	r2, [r7, #3]
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7f8 fffe 	bl	8003c40 <HAL_PCD_SetAddress>
 800ac44:	4603      	mov	r3, r0
 800ac46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 f880 	bl	800ad50 <USBD_Get_USB_Status>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b086      	sub	sp, #24
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	60f8      	str	r0, [r7, #12]
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	72fb      	strb	r3, [r7, #11]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac80:	893b      	ldrh	r3, [r7, #8]
 800ac82:	7af9      	ldrb	r1, [r7, #11]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	f7f9 f902 	bl	8003e8e <HAL_PCD_EP_Transmit>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 f85d 	bl	800ad50 <USBD_Get_USB_Status>
 800ac96:	4603      	mov	r3, r0
 800ac98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac9a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3718      	adds	r7, #24
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	607a      	str	r2, [r7, #4]
 800acae:	461a      	mov	r2, r3
 800acb0:	460b      	mov	r3, r1
 800acb2:	72fb      	strb	r3, [r7, #11]
 800acb4:	4613      	mov	r3, r2
 800acb6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acc6:	893b      	ldrh	r3, [r7, #8]
 800acc8:	7af9      	ldrb	r1, [r7, #11]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	f7f9 f88b 	bl	8003de6 <HAL_PCD_EP_Receive>
 800acd0:	4603      	mov	r3, r0
 800acd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd4:	7dfb      	ldrb	r3, [r7, #23]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f83a 	bl	800ad50 <USBD_Get_USB_Status>
 800acdc:	4603      	mov	r3, r0
 800acde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ace0:	7dbb      	ldrb	r3, [r7, #22]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3718      	adds	r7, #24
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b082      	sub	sp, #8
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	460b      	mov	r3, r1
 800acf4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acfc:	78fa      	ldrb	r2, [r7, #3]
 800acfe:	4611      	mov	r1, r2
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7f9 f8ad 	bl	8003e60 <HAL_PCD_EP_GetRxCount>
 800ad06:	4603      	mov	r3, r0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ad18:	4b02      	ldr	r3, [pc, #8]	; (800ad24 <USBD_static_malloc+0x14>)
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bc80      	pop	{r7}
 800ad22:	4770      	bx	lr
 800ad24:	2000028c 	.word	0x2000028c

0800ad28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]

}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bc80      	pop	{r7}
 800ad38:	4770      	bx	lr

0800ad3a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b083      	sub	sp, #12
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
 800ad42:	460b      	mov	r3, r1
 800ad44:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ad46:	bf00      	nop
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bc80      	pop	{r7}
 800ad4e:	4770      	bx	lr

0800ad50 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	4603      	mov	r3, r0
 800ad58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad5e:	79fb      	ldrb	r3, [r7, #7]
 800ad60:	2b03      	cmp	r3, #3
 800ad62:	d817      	bhi.n	800ad94 <USBD_Get_USB_Status+0x44>
 800ad64:	a201      	add	r2, pc, #4	; (adr r2, 800ad6c <USBD_Get_USB_Status+0x1c>)
 800ad66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad6a:	bf00      	nop
 800ad6c:	0800ad7d 	.word	0x0800ad7d
 800ad70:	0800ad83 	.word	0x0800ad83
 800ad74:	0800ad89 	.word	0x0800ad89
 800ad78:	0800ad8f 	.word	0x0800ad8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad80:	e00b      	b.n	800ad9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad82:	2302      	movs	r3, #2
 800ad84:	73fb      	strb	r3, [r7, #15]
    break;
 800ad86:	e008      	b.n	800ad9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad8c:	e005      	b.n	800ad9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad8e:	2302      	movs	r3, #2
 800ad90:	73fb      	strb	r3, [r7, #15]
    break;
 800ad92:	e002      	b.n	800ad9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ad94:	2302      	movs	r3, #2
 800ad96:	73fb      	strb	r3, [r7, #15]
    break;
 800ad98:	bf00      	nop
  }
  return usb_status;
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bc80      	pop	{r7}
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop

0800ada8 <__errno>:
 800ada8:	4b01      	ldr	r3, [pc, #4]	; (800adb0 <__errno+0x8>)
 800adaa:	6818      	ldr	r0, [r3, #0]
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	2000018c 	.word	0x2000018c

0800adb4 <__libc_init_array>:
 800adb4:	b570      	push	{r4, r5, r6, lr}
 800adb6:	2600      	movs	r6, #0
 800adb8:	4d0c      	ldr	r5, [pc, #48]	; (800adec <__libc_init_array+0x38>)
 800adba:	4c0d      	ldr	r4, [pc, #52]	; (800adf0 <__libc_init_array+0x3c>)
 800adbc:	1b64      	subs	r4, r4, r5
 800adbe:	10a4      	asrs	r4, r4, #2
 800adc0:	42a6      	cmp	r6, r4
 800adc2:	d109      	bne.n	800add8 <__libc_init_array+0x24>
 800adc4:	f001 fa30 	bl	800c228 <_init>
 800adc8:	2600      	movs	r6, #0
 800adca:	4d0a      	ldr	r5, [pc, #40]	; (800adf4 <__libc_init_array+0x40>)
 800adcc:	4c0a      	ldr	r4, [pc, #40]	; (800adf8 <__libc_init_array+0x44>)
 800adce:	1b64      	subs	r4, r4, r5
 800add0:	10a4      	asrs	r4, r4, #2
 800add2:	42a6      	cmp	r6, r4
 800add4:	d105      	bne.n	800ade2 <__libc_init_array+0x2e>
 800add6:	bd70      	pop	{r4, r5, r6, pc}
 800add8:	f855 3b04 	ldr.w	r3, [r5], #4
 800addc:	4798      	blx	r3
 800adde:	3601      	adds	r6, #1
 800ade0:	e7ee      	b.n	800adc0 <__libc_init_array+0xc>
 800ade2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ade6:	4798      	blx	r3
 800ade8:	3601      	adds	r6, #1
 800adea:	e7f2      	b.n	800add2 <__libc_init_array+0x1e>
 800adec:	0800c450 	.word	0x0800c450
 800adf0:	0800c450 	.word	0x0800c450
 800adf4:	0800c450 	.word	0x0800c450
 800adf8:	0800c454 	.word	0x0800c454

0800adfc <__itoa>:
 800adfc:	1e93      	subs	r3, r2, #2
 800adfe:	2b22      	cmp	r3, #34	; 0x22
 800ae00:	b510      	push	{r4, lr}
 800ae02:	460c      	mov	r4, r1
 800ae04:	d904      	bls.n	800ae10 <__itoa+0x14>
 800ae06:	2300      	movs	r3, #0
 800ae08:	461c      	mov	r4, r3
 800ae0a:	700b      	strb	r3, [r1, #0]
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	bd10      	pop	{r4, pc}
 800ae10:	2a0a      	cmp	r2, #10
 800ae12:	d109      	bne.n	800ae28 <__itoa+0x2c>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	da07      	bge.n	800ae28 <__itoa+0x2c>
 800ae18:	232d      	movs	r3, #45	; 0x2d
 800ae1a:	700b      	strb	r3, [r1, #0]
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	4240      	negs	r0, r0
 800ae20:	4421      	add	r1, r4
 800ae22:	f000 f853 	bl	800aecc <__utoa>
 800ae26:	e7f1      	b.n	800ae0c <__itoa+0x10>
 800ae28:	2100      	movs	r1, #0
 800ae2a:	e7f9      	b.n	800ae20 <__itoa+0x24>

0800ae2c <itoa>:
 800ae2c:	f7ff bfe6 	b.w	800adfc <__itoa>

0800ae30 <memcpy>:
 800ae30:	440a      	add	r2, r1
 800ae32:	4291      	cmp	r1, r2
 800ae34:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae38:	d100      	bne.n	800ae3c <memcpy+0xc>
 800ae3a:	4770      	bx	lr
 800ae3c:	b510      	push	{r4, lr}
 800ae3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae42:	4291      	cmp	r1, r2
 800ae44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae48:	d1f9      	bne.n	800ae3e <memcpy+0xe>
 800ae4a:	bd10      	pop	{r4, pc}

0800ae4c <memset>:
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	4402      	add	r2, r0
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d100      	bne.n	800ae56 <memset+0xa>
 800ae54:	4770      	bx	lr
 800ae56:	f803 1b01 	strb.w	r1, [r3], #1
 800ae5a:	e7f9      	b.n	800ae50 <memset+0x4>

0800ae5c <iprintf>:
 800ae5c:	b40f      	push	{r0, r1, r2, r3}
 800ae5e:	4b0a      	ldr	r3, [pc, #40]	; (800ae88 <iprintf+0x2c>)
 800ae60:	b513      	push	{r0, r1, r4, lr}
 800ae62:	681c      	ldr	r4, [r3, #0]
 800ae64:	b124      	cbz	r4, 800ae70 <iprintf+0x14>
 800ae66:	69a3      	ldr	r3, [r4, #24]
 800ae68:	b913      	cbnz	r3, 800ae70 <iprintf+0x14>
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 f8c8 	bl	800b000 <__sinit>
 800ae70:	ab05      	add	r3, sp, #20
 800ae72:	4620      	mov	r0, r4
 800ae74:	9a04      	ldr	r2, [sp, #16]
 800ae76:	68a1      	ldr	r1, [r4, #8]
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	f000 fb3f 	bl	800b4fc <_vfiprintf_r>
 800ae7e:	b002      	add	sp, #8
 800ae80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae84:	b004      	add	sp, #16
 800ae86:	4770      	bx	lr
 800ae88:	2000018c 	.word	0x2000018c

0800ae8c <siprintf>:
 800ae8c:	b40e      	push	{r1, r2, r3}
 800ae8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae92:	b500      	push	{lr}
 800ae94:	b09c      	sub	sp, #112	; 0x70
 800ae96:	ab1d      	add	r3, sp, #116	; 0x74
 800ae98:	9002      	str	r0, [sp, #8]
 800ae9a:	9006      	str	r0, [sp, #24]
 800ae9c:	9107      	str	r1, [sp, #28]
 800ae9e:	9104      	str	r1, [sp, #16]
 800aea0:	4808      	ldr	r0, [pc, #32]	; (800aec4 <siprintf+0x38>)
 800aea2:	4909      	ldr	r1, [pc, #36]	; (800aec8 <siprintf+0x3c>)
 800aea4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aea8:	9105      	str	r1, [sp, #20]
 800aeaa:	6800      	ldr	r0, [r0, #0]
 800aeac:	a902      	add	r1, sp, #8
 800aeae:	9301      	str	r3, [sp, #4]
 800aeb0:	f000 f9fc 	bl	800b2ac <_svfiprintf_r>
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	9b02      	ldr	r3, [sp, #8]
 800aeb8:	701a      	strb	r2, [r3, #0]
 800aeba:	b01c      	add	sp, #112	; 0x70
 800aebc:	f85d eb04 	ldr.w	lr, [sp], #4
 800aec0:	b003      	add	sp, #12
 800aec2:	4770      	bx	lr
 800aec4:	2000018c 	.word	0x2000018c
 800aec8:	ffff0208 	.word	0xffff0208

0800aecc <__utoa>:
 800aecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aece:	b08b      	sub	sp, #44	; 0x2c
 800aed0:	4605      	mov	r5, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	466e      	mov	r6, sp
 800aed6:	4c1d      	ldr	r4, [pc, #116]	; (800af4c <__utoa+0x80>)
 800aed8:	f104 0c20 	add.w	ip, r4, #32
 800aedc:	4637      	mov	r7, r6
 800aede:	6820      	ldr	r0, [r4, #0]
 800aee0:	6861      	ldr	r1, [r4, #4]
 800aee2:	3408      	adds	r4, #8
 800aee4:	c703      	stmia	r7!, {r0, r1}
 800aee6:	4564      	cmp	r4, ip
 800aee8:	463e      	mov	r6, r7
 800aeea:	d1f7      	bne.n	800aedc <__utoa+0x10>
 800aeec:	7921      	ldrb	r1, [r4, #4]
 800aeee:	6820      	ldr	r0, [r4, #0]
 800aef0:	7139      	strb	r1, [r7, #4]
 800aef2:	1e91      	subs	r1, r2, #2
 800aef4:	2922      	cmp	r1, #34	; 0x22
 800aef6:	6038      	str	r0, [r7, #0]
 800aef8:	f04f 0100 	mov.w	r1, #0
 800aefc:	d904      	bls.n	800af08 <__utoa+0x3c>
 800aefe:	7019      	strb	r1, [r3, #0]
 800af00:	460b      	mov	r3, r1
 800af02:	4618      	mov	r0, r3
 800af04:	b00b      	add	sp, #44	; 0x2c
 800af06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af08:	1e58      	subs	r0, r3, #1
 800af0a:	4684      	mov	ip, r0
 800af0c:	fbb5 f7f2 	udiv	r7, r5, r2
 800af10:	fb02 5617 	mls	r6, r2, r7, r5
 800af14:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800af18:	4476      	add	r6, lr
 800af1a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800af1e:	460c      	mov	r4, r1
 800af20:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800af24:	462e      	mov	r6, r5
 800af26:	42b2      	cmp	r2, r6
 800af28:	463d      	mov	r5, r7
 800af2a:	f101 0101 	add.w	r1, r1, #1
 800af2e:	d9ed      	bls.n	800af0c <__utoa+0x40>
 800af30:	2200      	movs	r2, #0
 800af32:	545a      	strb	r2, [r3, r1]
 800af34:	1919      	adds	r1, r3, r4
 800af36:	1aa5      	subs	r5, r4, r2
 800af38:	42aa      	cmp	r2, r5
 800af3a:	dae2      	bge.n	800af02 <__utoa+0x36>
 800af3c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800af40:	780e      	ldrb	r6, [r1, #0]
 800af42:	3201      	adds	r2, #1
 800af44:	7006      	strb	r6, [r0, #0]
 800af46:	f801 5901 	strb.w	r5, [r1], #-1
 800af4a:	e7f4      	b.n	800af36 <__utoa+0x6a>
 800af4c:	0800c394 	.word	0x0800c394

0800af50 <std>:
 800af50:	2300      	movs	r3, #0
 800af52:	b510      	push	{r4, lr}
 800af54:	4604      	mov	r4, r0
 800af56:	e9c0 3300 	strd	r3, r3, [r0]
 800af5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af5e:	6083      	str	r3, [r0, #8]
 800af60:	8181      	strh	r1, [r0, #12]
 800af62:	6643      	str	r3, [r0, #100]	; 0x64
 800af64:	81c2      	strh	r2, [r0, #14]
 800af66:	6183      	str	r3, [r0, #24]
 800af68:	4619      	mov	r1, r3
 800af6a:	2208      	movs	r2, #8
 800af6c:	305c      	adds	r0, #92	; 0x5c
 800af6e:	f7ff ff6d 	bl	800ae4c <memset>
 800af72:	4b05      	ldr	r3, [pc, #20]	; (800af88 <std+0x38>)
 800af74:	6224      	str	r4, [r4, #32]
 800af76:	6263      	str	r3, [r4, #36]	; 0x24
 800af78:	4b04      	ldr	r3, [pc, #16]	; (800af8c <std+0x3c>)
 800af7a:	62a3      	str	r3, [r4, #40]	; 0x28
 800af7c:	4b04      	ldr	r3, [pc, #16]	; (800af90 <std+0x40>)
 800af7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af80:	4b04      	ldr	r3, [pc, #16]	; (800af94 <std+0x44>)
 800af82:	6323      	str	r3, [r4, #48]	; 0x30
 800af84:	bd10      	pop	{r4, pc}
 800af86:	bf00      	nop
 800af88:	0800baa9 	.word	0x0800baa9
 800af8c:	0800bacb 	.word	0x0800bacb
 800af90:	0800bb03 	.word	0x0800bb03
 800af94:	0800bb27 	.word	0x0800bb27

0800af98 <_cleanup_r>:
 800af98:	4901      	ldr	r1, [pc, #4]	; (800afa0 <_cleanup_r+0x8>)
 800af9a:	f000 b8af 	b.w	800b0fc <_fwalk_reent>
 800af9e:	bf00      	nop
 800afa0:	0800be01 	.word	0x0800be01

0800afa4 <__sfmoreglue>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	2568      	movs	r5, #104	; 0x68
 800afa8:	1e4a      	subs	r2, r1, #1
 800afaa:	4355      	muls	r5, r2
 800afac:	460e      	mov	r6, r1
 800afae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afb2:	f000 f8c5 	bl	800b140 <_malloc_r>
 800afb6:	4604      	mov	r4, r0
 800afb8:	b140      	cbz	r0, 800afcc <__sfmoreglue+0x28>
 800afba:	2100      	movs	r1, #0
 800afbc:	e9c0 1600 	strd	r1, r6, [r0]
 800afc0:	300c      	adds	r0, #12
 800afc2:	60a0      	str	r0, [r4, #8]
 800afc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800afc8:	f7ff ff40 	bl	800ae4c <memset>
 800afcc:	4620      	mov	r0, r4
 800afce:	bd70      	pop	{r4, r5, r6, pc}

0800afd0 <__sfp_lock_acquire>:
 800afd0:	4801      	ldr	r0, [pc, #4]	; (800afd8 <__sfp_lock_acquire+0x8>)
 800afd2:	f000 b8b3 	b.w	800b13c <__retarget_lock_acquire_recursive>
 800afd6:	bf00      	nop
 800afd8:	200015b0 	.word	0x200015b0

0800afdc <__sfp_lock_release>:
 800afdc:	4801      	ldr	r0, [pc, #4]	; (800afe4 <__sfp_lock_release+0x8>)
 800afde:	f000 b8ae 	b.w	800b13e <__retarget_lock_release_recursive>
 800afe2:	bf00      	nop
 800afe4:	200015b0 	.word	0x200015b0

0800afe8 <__sinit_lock_acquire>:
 800afe8:	4801      	ldr	r0, [pc, #4]	; (800aff0 <__sinit_lock_acquire+0x8>)
 800afea:	f000 b8a7 	b.w	800b13c <__retarget_lock_acquire_recursive>
 800afee:	bf00      	nop
 800aff0:	200015ab 	.word	0x200015ab

0800aff4 <__sinit_lock_release>:
 800aff4:	4801      	ldr	r0, [pc, #4]	; (800affc <__sinit_lock_release+0x8>)
 800aff6:	f000 b8a2 	b.w	800b13e <__retarget_lock_release_recursive>
 800affa:	bf00      	nop
 800affc:	200015ab 	.word	0x200015ab

0800b000 <__sinit>:
 800b000:	b510      	push	{r4, lr}
 800b002:	4604      	mov	r4, r0
 800b004:	f7ff fff0 	bl	800afe8 <__sinit_lock_acquire>
 800b008:	69a3      	ldr	r3, [r4, #24]
 800b00a:	b11b      	cbz	r3, 800b014 <__sinit+0x14>
 800b00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b010:	f7ff bff0 	b.w	800aff4 <__sinit_lock_release>
 800b014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b018:	6523      	str	r3, [r4, #80]	; 0x50
 800b01a:	4b13      	ldr	r3, [pc, #76]	; (800b068 <__sinit+0x68>)
 800b01c:	4a13      	ldr	r2, [pc, #76]	; (800b06c <__sinit+0x6c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	62a2      	str	r2, [r4, #40]	; 0x28
 800b022:	42a3      	cmp	r3, r4
 800b024:	bf08      	it	eq
 800b026:	2301      	moveq	r3, #1
 800b028:	4620      	mov	r0, r4
 800b02a:	bf08      	it	eq
 800b02c:	61a3      	streq	r3, [r4, #24]
 800b02e:	f000 f81f 	bl	800b070 <__sfp>
 800b032:	6060      	str	r0, [r4, #4]
 800b034:	4620      	mov	r0, r4
 800b036:	f000 f81b 	bl	800b070 <__sfp>
 800b03a:	60a0      	str	r0, [r4, #8]
 800b03c:	4620      	mov	r0, r4
 800b03e:	f000 f817 	bl	800b070 <__sfp>
 800b042:	2200      	movs	r2, #0
 800b044:	2104      	movs	r1, #4
 800b046:	60e0      	str	r0, [r4, #12]
 800b048:	6860      	ldr	r0, [r4, #4]
 800b04a:	f7ff ff81 	bl	800af50 <std>
 800b04e:	2201      	movs	r2, #1
 800b050:	2109      	movs	r1, #9
 800b052:	68a0      	ldr	r0, [r4, #8]
 800b054:	f7ff ff7c 	bl	800af50 <std>
 800b058:	2202      	movs	r2, #2
 800b05a:	2112      	movs	r1, #18
 800b05c:	68e0      	ldr	r0, [r4, #12]
 800b05e:	f7ff ff77 	bl	800af50 <std>
 800b062:	2301      	movs	r3, #1
 800b064:	61a3      	str	r3, [r4, #24]
 800b066:	e7d1      	b.n	800b00c <__sinit+0xc>
 800b068:	0800c390 	.word	0x0800c390
 800b06c:	0800af99 	.word	0x0800af99

0800b070 <__sfp>:
 800b070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b072:	4607      	mov	r7, r0
 800b074:	f7ff ffac 	bl	800afd0 <__sfp_lock_acquire>
 800b078:	4b1e      	ldr	r3, [pc, #120]	; (800b0f4 <__sfp+0x84>)
 800b07a:	681e      	ldr	r6, [r3, #0]
 800b07c:	69b3      	ldr	r3, [r6, #24]
 800b07e:	b913      	cbnz	r3, 800b086 <__sfp+0x16>
 800b080:	4630      	mov	r0, r6
 800b082:	f7ff ffbd 	bl	800b000 <__sinit>
 800b086:	3648      	adds	r6, #72	; 0x48
 800b088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	d503      	bpl.n	800b098 <__sfp+0x28>
 800b090:	6833      	ldr	r3, [r6, #0]
 800b092:	b30b      	cbz	r3, 800b0d8 <__sfp+0x68>
 800b094:	6836      	ldr	r6, [r6, #0]
 800b096:	e7f7      	b.n	800b088 <__sfp+0x18>
 800b098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b09c:	b9d5      	cbnz	r5, 800b0d4 <__sfp+0x64>
 800b09e:	4b16      	ldr	r3, [pc, #88]	; (800b0f8 <__sfp+0x88>)
 800b0a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0a4:	60e3      	str	r3, [r4, #12]
 800b0a6:	6665      	str	r5, [r4, #100]	; 0x64
 800b0a8:	f000 f847 	bl	800b13a <__retarget_lock_init_recursive>
 800b0ac:	f7ff ff96 	bl	800afdc <__sfp_lock_release>
 800b0b0:	2208      	movs	r2, #8
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0bc:	6025      	str	r5, [r4, #0]
 800b0be:	61a5      	str	r5, [r4, #24]
 800b0c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0c4:	f7ff fec2 	bl	800ae4c <memset>
 800b0c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b0cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0d4:	3468      	adds	r4, #104	; 0x68
 800b0d6:	e7d9      	b.n	800b08c <__sfp+0x1c>
 800b0d8:	2104      	movs	r1, #4
 800b0da:	4638      	mov	r0, r7
 800b0dc:	f7ff ff62 	bl	800afa4 <__sfmoreglue>
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	6030      	str	r0, [r6, #0]
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d1d5      	bne.n	800b094 <__sfp+0x24>
 800b0e8:	f7ff ff78 	bl	800afdc <__sfp_lock_release>
 800b0ec:	230c      	movs	r3, #12
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	e7ee      	b.n	800b0d0 <__sfp+0x60>
 800b0f2:	bf00      	nop
 800b0f4:	0800c390 	.word	0x0800c390
 800b0f8:	ffff0001 	.word	0xffff0001

0800b0fc <_fwalk_reent>:
 800b0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b100:	4606      	mov	r6, r0
 800b102:	4688      	mov	r8, r1
 800b104:	2700      	movs	r7, #0
 800b106:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b10a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b10e:	f1b9 0901 	subs.w	r9, r9, #1
 800b112:	d505      	bpl.n	800b120 <_fwalk_reent+0x24>
 800b114:	6824      	ldr	r4, [r4, #0]
 800b116:	2c00      	cmp	r4, #0
 800b118:	d1f7      	bne.n	800b10a <_fwalk_reent+0xe>
 800b11a:	4638      	mov	r0, r7
 800b11c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b120:	89ab      	ldrh	r3, [r5, #12]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d907      	bls.n	800b136 <_fwalk_reent+0x3a>
 800b126:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b12a:	3301      	adds	r3, #1
 800b12c:	d003      	beq.n	800b136 <_fwalk_reent+0x3a>
 800b12e:	4629      	mov	r1, r5
 800b130:	4630      	mov	r0, r6
 800b132:	47c0      	blx	r8
 800b134:	4307      	orrs	r7, r0
 800b136:	3568      	adds	r5, #104	; 0x68
 800b138:	e7e9      	b.n	800b10e <_fwalk_reent+0x12>

0800b13a <__retarget_lock_init_recursive>:
 800b13a:	4770      	bx	lr

0800b13c <__retarget_lock_acquire_recursive>:
 800b13c:	4770      	bx	lr

0800b13e <__retarget_lock_release_recursive>:
 800b13e:	4770      	bx	lr

0800b140 <_malloc_r>:
 800b140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b142:	1ccd      	adds	r5, r1, #3
 800b144:	f025 0503 	bic.w	r5, r5, #3
 800b148:	3508      	adds	r5, #8
 800b14a:	2d0c      	cmp	r5, #12
 800b14c:	bf38      	it	cc
 800b14e:	250c      	movcc	r5, #12
 800b150:	2d00      	cmp	r5, #0
 800b152:	4606      	mov	r6, r0
 800b154:	db01      	blt.n	800b15a <_malloc_r+0x1a>
 800b156:	42a9      	cmp	r1, r5
 800b158:	d903      	bls.n	800b162 <_malloc_r+0x22>
 800b15a:	230c      	movs	r3, #12
 800b15c:	6033      	str	r3, [r6, #0]
 800b15e:	2000      	movs	r0, #0
 800b160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b162:	f000 ff27 	bl	800bfb4 <__malloc_lock>
 800b166:	4921      	ldr	r1, [pc, #132]	; (800b1ec <_malloc_r+0xac>)
 800b168:	680a      	ldr	r2, [r1, #0]
 800b16a:	4614      	mov	r4, r2
 800b16c:	b99c      	cbnz	r4, 800b196 <_malloc_r+0x56>
 800b16e:	4f20      	ldr	r7, [pc, #128]	; (800b1f0 <_malloc_r+0xb0>)
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	b923      	cbnz	r3, 800b17e <_malloc_r+0x3e>
 800b174:	4621      	mov	r1, r4
 800b176:	4630      	mov	r0, r6
 800b178:	f000 fc86 	bl	800ba88 <_sbrk_r>
 800b17c:	6038      	str	r0, [r7, #0]
 800b17e:	4629      	mov	r1, r5
 800b180:	4630      	mov	r0, r6
 800b182:	f000 fc81 	bl	800ba88 <_sbrk_r>
 800b186:	1c43      	adds	r3, r0, #1
 800b188:	d123      	bne.n	800b1d2 <_malloc_r+0x92>
 800b18a:	230c      	movs	r3, #12
 800b18c:	4630      	mov	r0, r6
 800b18e:	6033      	str	r3, [r6, #0]
 800b190:	f000 ff16 	bl	800bfc0 <__malloc_unlock>
 800b194:	e7e3      	b.n	800b15e <_malloc_r+0x1e>
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	1b5b      	subs	r3, r3, r5
 800b19a:	d417      	bmi.n	800b1cc <_malloc_r+0x8c>
 800b19c:	2b0b      	cmp	r3, #11
 800b19e:	d903      	bls.n	800b1a8 <_malloc_r+0x68>
 800b1a0:	6023      	str	r3, [r4, #0]
 800b1a2:	441c      	add	r4, r3
 800b1a4:	6025      	str	r5, [r4, #0]
 800b1a6:	e004      	b.n	800b1b2 <_malloc_r+0x72>
 800b1a8:	6863      	ldr	r3, [r4, #4]
 800b1aa:	42a2      	cmp	r2, r4
 800b1ac:	bf0c      	ite	eq
 800b1ae:	600b      	streq	r3, [r1, #0]
 800b1b0:	6053      	strne	r3, [r2, #4]
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f000 ff04 	bl	800bfc0 <__malloc_unlock>
 800b1b8:	f104 000b 	add.w	r0, r4, #11
 800b1bc:	1d23      	adds	r3, r4, #4
 800b1be:	f020 0007 	bic.w	r0, r0, #7
 800b1c2:	1ac2      	subs	r2, r0, r3
 800b1c4:	d0cc      	beq.n	800b160 <_malloc_r+0x20>
 800b1c6:	1a1b      	subs	r3, r3, r0
 800b1c8:	50a3      	str	r3, [r4, r2]
 800b1ca:	e7c9      	b.n	800b160 <_malloc_r+0x20>
 800b1cc:	4622      	mov	r2, r4
 800b1ce:	6864      	ldr	r4, [r4, #4]
 800b1d0:	e7cc      	b.n	800b16c <_malloc_r+0x2c>
 800b1d2:	1cc4      	adds	r4, r0, #3
 800b1d4:	f024 0403 	bic.w	r4, r4, #3
 800b1d8:	42a0      	cmp	r0, r4
 800b1da:	d0e3      	beq.n	800b1a4 <_malloc_r+0x64>
 800b1dc:	1a21      	subs	r1, r4, r0
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f000 fc52 	bl	800ba88 <_sbrk_r>
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	d1dd      	bne.n	800b1a4 <_malloc_r+0x64>
 800b1e8:	e7cf      	b.n	800b18a <_malloc_r+0x4a>
 800b1ea:	bf00      	nop
 800b1ec:	200004ac 	.word	0x200004ac
 800b1f0:	200004b0 	.word	0x200004b0

0800b1f4 <__ssputs_r>:
 800b1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f8:	688e      	ldr	r6, [r1, #8]
 800b1fa:	4682      	mov	sl, r0
 800b1fc:	429e      	cmp	r6, r3
 800b1fe:	460c      	mov	r4, r1
 800b200:	4690      	mov	r8, r2
 800b202:	461f      	mov	r7, r3
 800b204:	d838      	bhi.n	800b278 <__ssputs_r+0x84>
 800b206:	898a      	ldrh	r2, [r1, #12]
 800b208:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b20c:	d032      	beq.n	800b274 <__ssputs_r+0x80>
 800b20e:	6825      	ldr	r5, [r4, #0]
 800b210:	6909      	ldr	r1, [r1, #16]
 800b212:	3301      	adds	r3, #1
 800b214:	eba5 0901 	sub.w	r9, r5, r1
 800b218:	6965      	ldr	r5, [r4, #20]
 800b21a:	444b      	add	r3, r9
 800b21c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b220:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b224:	106d      	asrs	r5, r5, #1
 800b226:	429d      	cmp	r5, r3
 800b228:	bf38      	it	cc
 800b22a:	461d      	movcc	r5, r3
 800b22c:	0553      	lsls	r3, r2, #21
 800b22e:	d531      	bpl.n	800b294 <__ssputs_r+0xa0>
 800b230:	4629      	mov	r1, r5
 800b232:	f7ff ff85 	bl	800b140 <_malloc_r>
 800b236:	4606      	mov	r6, r0
 800b238:	b950      	cbnz	r0, 800b250 <__ssputs_r+0x5c>
 800b23a:	230c      	movs	r3, #12
 800b23c:	f04f 30ff 	mov.w	r0, #4294967295
 800b240:	f8ca 3000 	str.w	r3, [sl]
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b24a:	81a3      	strh	r3, [r4, #12]
 800b24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b250:	464a      	mov	r2, r9
 800b252:	6921      	ldr	r1, [r4, #16]
 800b254:	f7ff fdec 	bl	800ae30 <memcpy>
 800b258:	89a3      	ldrh	r3, [r4, #12]
 800b25a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b25e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b262:	81a3      	strh	r3, [r4, #12]
 800b264:	6126      	str	r6, [r4, #16]
 800b266:	444e      	add	r6, r9
 800b268:	6026      	str	r6, [r4, #0]
 800b26a:	463e      	mov	r6, r7
 800b26c:	6165      	str	r5, [r4, #20]
 800b26e:	eba5 0509 	sub.w	r5, r5, r9
 800b272:	60a5      	str	r5, [r4, #8]
 800b274:	42be      	cmp	r6, r7
 800b276:	d900      	bls.n	800b27a <__ssputs_r+0x86>
 800b278:	463e      	mov	r6, r7
 800b27a:	4632      	mov	r2, r6
 800b27c:	4641      	mov	r1, r8
 800b27e:	6820      	ldr	r0, [r4, #0]
 800b280:	f000 fe7e 	bl	800bf80 <memmove>
 800b284:	68a3      	ldr	r3, [r4, #8]
 800b286:	6822      	ldr	r2, [r4, #0]
 800b288:	1b9b      	subs	r3, r3, r6
 800b28a:	4432      	add	r2, r6
 800b28c:	2000      	movs	r0, #0
 800b28e:	60a3      	str	r3, [r4, #8]
 800b290:	6022      	str	r2, [r4, #0]
 800b292:	e7db      	b.n	800b24c <__ssputs_r+0x58>
 800b294:	462a      	mov	r2, r5
 800b296:	f000 fee5 	bl	800c064 <_realloc_r>
 800b29a:	4606      	mov	r6, r0
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d1e1      	bne.n	800b264 <__ssputs_r+0x70>
 800b2a0:	4650      	mov	r0, sl
 800b2a2:	6921      	ldr	r1, [r4, #16]
 800b2a4:	f000 fe92 	bl	800bfcc <_free_r>
 800b2a8:	e7c7      	b.n	800b23a <__ssputs_r+0x46>
	...

0800b2ac <_svfiprintf_r>:
 800b2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b0:	4698      	mov	r8, r3
 800b2b2:	898b      	ldrh	r3, [r1, #12]
 800b2b4:	4607      	mov	r7, r0
 800b2b6:	061b      	lsls	r3, r3, #24
 800b2b8:	460d      	mov	r5, r1
 800b2ba:	4614      	mov	r4, r2
 800b2bc:	b09d      	sub	sp, #116	; 0x74
 800b2be:	d50e      	bpl.n	800b2de <_svfiprintf_r+0x32>
 800b2c0:	690b      	ldr	r3, [r1, #16]
 800b2c2:	b963      	cbnz	r3, 800b2de <_svfiprintf_r+0x32>
 800b2c4:	2140      	movs	r1, #64	; 0x40
 800b2c6:	f7ff ff3b 	bl	800b140 <_malloc_r>
 800b2ca:	6028      	str	r0, [r5, #0]
 800b2cc:	6128      	str	r0, [r5, #16]
 800b2ce:	b920      	cbnz	r0, 800b2da <_svfiprintf_r+0x2e>
 800b2d0:	230c      	movs	r3, #12
 800b2d2:	603b      	str	r3, [r7, #0]
 800b2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d8:	e0d1      	b.n	800b47e <_svfiprintf_r+0x1d2>
 800b2da:	2340      	movs	r3, #64	; 0x40
 800b2dc:	616b      	str	r3, [r5, #20]
 800b2de:	2300      	movs	r3, #0
 800b2e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e2:	2320      	movs	r3, #32
 800b2e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2e8:	2330      	movs	r3, #48	; 0x30
 800b2ea:	f04f 0901 	mov.w	r9, #1
 800b2ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b498 <_svfiprintf_r+0x1ec>
 800b2f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2fa:	4623      	mov	r3, r4
 800b2fc:	469a      	mov	sl, r3
 800b2fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b302:	b10a      	cbz	r2, 800b308 <_svfiprintf_r+0x5c>
 800b304:	2a25      	cmp	r2, #37	; 0x25
 800b306:	d1f9      	bne.n	800b2fc <_svfiprintf_r+0x50>
 800b308:	ebba 0b04 	subs.w	fp, sl, r4
 800b30c:	d00b      	beq.n	800b326 <_svfiprintf_r+0x7a>
 800b30e:	465b      	mov	r3, fp
 800b310:	4622      	mov	r2, r4
 800b312:	4629      	mov	r1, r5
 800b314:	4638      	mov	r0, r7
 800b316:	f7ff ff6d 	bl	800b1f4 <__ssputs_r>
 800b31a:	3001      	adds	r0, #1
 800b31c:	f000 80aa 	beq.w	800b474 <_svfiprintf_r+0x1c8>
 800b320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b322:	445a      	add	r2, fp
 800b324:	9209      	str	r2, [sp, #36]	; 0x24
 800b326:	f89a 3000 	ldrb.w	r3, [sl]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 80a2 	beq.w	800b474 <_svfiprintf_r+0x1c8>
 800b330:	2300      	movs	r3, #0
 800b332:	f04f 32ff 	mov.w	r2, #4294967295
 800b336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b33a:	f10a 0a01 	add.w	sl, sl, #1
 800b33e:	9304      	str	r3, [sp, #16]
 800b340:	9307      	str	r3, [sp, #28]
 800b342:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b346:	931a      	str	r3, [sp, #104]	; 0x68
 800b348:	4654      	mov	r4, sl
 800b34a:	2205      	movs	r2, #5
 800b34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b350:	4851      	ldr	r0, [pc, #324]	; (800b498 <_svfiprintf_r+0x1ec>)
 800b352:	f000 fe07 	bl	800bf64 <memchr>
 800b356:	9a04      	ldr	r2, [sp, #16]
 800b358:	b9d8      	cbnz	r0, 800b392 <_svfiprintf_r+0xe6>
 800b35a:	06d0      	lsls	r0, r2, #27
 800b35c:	bf44      	itt	mi
 800b35e:	2320      	movmi	r3, #32
 800b360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b364:	0711      	lsls	r1, r2, #28
 800b366:	bf44      	itt	mi
 800b368:	232b      	movmi	r3, #43	; 0x2b
 800b36a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b36e:	f89a 3000 	ldrb.w	r3, [sl]
 800b372:	2b2a      	cmp	r3, #42	; 0x2a
 800b374:	d015      	beq.n	800b3a2 <_svfiprintf_r+0xf6>
 800b376:	4654      	mov	r4, sl
 800b378:	2000      	movs	r0, #0
 800b37a:	f04f 0c0a 	mov.w	ip, #10
 800b37e:	9a07      	ldr	r2, [sp, #28]
 800b380:	4621      	mov	r1, r4
 800b382:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b386:	3b30      	subs	r3, #48	; 0x30
 800b388:	2b09      	cmp	r3, #9
 800b38a:	d94e      	bls.n	800b42a <_svfiprintf_r+0x17e>
 800b38c:	b1b0      	cbz	r0, 800b3bc <_svfiprintf_r+0x110>
 800b38e:	9207      	str	r2, [sp, #28]
 800b390:	e014      	b.n	800b3bc <_svfiprintf_r+0x110>
 800b392:	eba0 0308 	sub.w	r3, r0, r8
 800b396:	fa09 f303 	lsl.w	r3, r9, r3
 800b39a:	4313      	orrs	r3, r2
 800b39c:	46a2      	mov	sl, r4
 800b39e:	9304      	str	r3, [sp, #16]
 800b3a0:	e7d2      	b.n	800b348 <_svfiprintf_r+0x9c>
 800b3a2:	9b03      	ldr	r3, [sp, #12]
 800b3a4:	1d19      	adds	r1, r3, #4
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	9103      	str	r1, [sp, #12]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	bfbb      	ittet	lt
 800b3ae:	425b      	neglt	r3, r3
 800b3b0:	f042 0202 	orrlt.w	r2, r2, #2
 800b3b4:	9307      	strge	r3, [sp, #28]
 800b3b6:	9307      	strlt	r3, [sp, #28]
 800b3b8:	bfb8      	it	lt
 800b3ba:	9204      	strlt	r2, [sp, #16]
 800b3bc:	7823      	ldrb	r3, [r4, #0]
 800b3be:	2b2e      	cmp	r3, #46	; 0x2e
 800b3c0:	d10c      	bne.n	800b3dc <_svfiprintf_r+0x130>
 800b3c2:	7863      	ldrb	r3, [r4, #1]
 800b3c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b3c6:	d135      	bne.n	800b434 <_svfiprintf_r+0x188>
 800b3c8:	9b03      	ldr	r3, [sp, #12]
 800b3ca:	3402      	adds	r4, #2
 800b3cc:	1d1a      	adds	r2, r3, #4
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	9203      	str	r2, [sp, #12]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	bfb8      	it	lt
 800b3d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3da:	9305      	str	r3, [sp, #20]
 800b3dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b4a8 <_svfiprintf_r+0x1fc>
 800b3e0:	2203      	movs	r2, #3
 800b3e2:	4650      	mov	r0, sl
 800b3e4:	7821      	ldrb	r1, [r4, #0]
 800b3e6:	f000 fdbd 	bl	800bf64 <memchr>
 800b3ea:	b140      	cbz	r0, 800b3fe <_svfiprintf_r+0x152>
 800b3ec:	2340      	movs	r3, #64	; 0x40
 800b3ee:	eba0 000a 	sub.w	r0, r0, sl
 800b3f2:	fa03 f000 	lsl.w	r0, r3, r0
 800b3f6:	9b04      	ldr	r3, [sp, #16]
 800b3f8:	3401      	adds	r4, #1
 800b3fa:	4303      	orrs	r3, r0
 800b3fc:	9304      	str	r3, [sp, #16]
 800b3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b402:	2206      	movs	r2, #6
 800b404:	4825      	ldr	r0, [pc, #148]	; (800b49c <_svfiprintf_r+0x1f0>)
 800b406:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b40a:	f000 fdab 	bl	800bf64 <memchr>
 800b40e:	2800      	cmp	r0, #0
 800b410:	d038      	beq.n	800b484 <_svfiprintf_r+0x1d8>
 800b412:	4b23      	ldr	r3, [pc, #140]	; (800b4a0 <_svfiprintf_r+0x1f4>)
 800b414:	bb1b      	cbnz	r3, 800b45e <_svfiprintf_r+0x1b2>
 800b416:	9b03      	ldr	r3, [sp, #12]
 800b418:	3307      	adds	r3, #7
 800b41a:	f023 0307 	bic.w	r3, r3, #7
 800b41e:	3308      	adds	r3, #8
 800b420:	9303      	str	r3, [sp, #12]
 800b422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b424:	4433      	add	r3, r6
 800b426:	9309      	str	r3, [sp, #36]	; 0x24
 800b428:	e767      	b.n	800b2fa <_svfiprintf_r+0x4e>
 800b42a:	460c      	mov	r4, r1
 800b42c:	2001      	movs	r0, #1
 800b42e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b432:	e7a5      	b.n	800b380 <_svfiprintf_r+0xd4>
 800b434:	2300      	movs	r3, #0
 800b436:	f04f 0c0a 	mov.w	ip, #10
 800b43a:	4619      	mov	r1, r3
 800b43c:	3401      	adds	r4, #1
 800b43e:	9305      	str	r3, [sp, #20]
 800b440:	4620      	mov	r0, r4
 800b442:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b446:	3a30      	subs	r2, #48	; 0x30
 800b448:	2a09      	cmp	r2, #9
 800b44a:	d903      	bls.n	800b454 <_svfiprintf_r+0x1a8>
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d0c5      	beq.n	800b3dc <_svfiprintf_r+0x130>
 800b450:	9105      	str	r1, [sp, #20]
 800b452:	e7c3      	b.n	800b3dc <_svfiprintf_r+0x130>
 800b454:	4604      	mov	r4, r0
 800b456:	2301      	movs	r3, #1
 800b458:	fb0c 2101 	mla	r1, ip, r1, r2
 800b45c:	e7f0      	b.n	800b440 <_svfiprintf_r+0x194>
 800b45e:	ab03      	add	r3, sp, #12
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	462a      	mov	r2, r5
 800b464:	4638      	mov	r0, r7
 800b466:	4b0f      	ldr	r3, [pc, #60]	; (800b4a4 <_svfiprintf_r+0x1f8>)
 800b468:	a904      	add	r1, sp, #16
 800b46a:	f3af 8000 	nop.w
 800b46e:	1c42      	adds	r2, r0, #1
 800b470:	4606      	mov	r6, r0
 800b472:	d1d6      	bne.n	800b422 <_svfiprintf_r+0x176>
 800b474:	89ab      	ldrh	r3, [r5, #12]
 800b476:	065b      	lsls	r3, r3, #25
 800b478:	f53f af2c 	bmi.w	800b2d4 <_svfiprintf_r+0x28>
 800b47c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b47e:	b01d      	add	sp, #116	; 0x74
 800b480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b484:	ab03      	add	r3, sp, #12
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	462a      	mov	r2, r5
 800b48a:	4638      	mov	r0, r7
 800b48c:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <_svfiprintf_r+0x1f8>)
 800b48e:	a904      	add	r1, sp, #16
 800b490:	f000 f9d4 	bl	800b83c <_printf_i>
 800b494:	e7eb      	b.n	800b46e <_svfiprintf_r+0x1c2>
 800b496:	bf00      	nop
 800b498:	0800c41c 	.word	0x0800c41c
 800b49c:	0800c426 	.word	0x0800c426
 800b4a0:	00000000 	.word	0x00000000
 800b4a4:	0800b1f5 	.word	0x0800b1f5
 800b4a8:	0800c422 	.word	0x0800c422

0800b4ac <__sfputc_r>:
 800b4ac:	6893      	ldr	r3, [r2, #8]
 800b4ae:	b410      	push	{r4}
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	6093      	str	r3, [r2, #8]
 800b4b6:	da07      	bge.n	800b4c8 <__sfputc_r+0x1c>
 800b4b8:	6994      	ldr	r4, [r2, #24]
 800b4ba:	42a3      	cmp	r3, r4
 800b4bc:	db01      	blt.n	800b4c2 <__sfputc_r+0x16>
 800b4be:	290a      	cmp	r1, #10
 800b4c0:	d102      	bne.n	800b4c8 <__sfputc_r+0x1c>
 800b4c2:	bc10      	pop	{r4}
 800b4c4:	f000 bb34 	b.w	800bb30 <__swbuf_r>
 800b4c8:	6813      	ldr	r3, [r2, #0]
 800b4ca:	1c58      	adds	r0, r3, #1
 800b4cc:	6010      	str	r0, [r2, #0]
 800b4ce:	7019      	strb	r1, [r3, #0]
 800b4d0:	4608      	mov	r0, r1
 800b4d2:	bc10      	pop	{r4}
 800b4d4:	4770      	bx	lr

0800b4d6 <__sfputs_r>:
 800b4d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d8:	4606      	mov	r6, r0
 800b4da:	460f      	mov	r7, r1
 800b4dc:	4614      	mov	r4, r2
 800b4de:	18d5      	adds	r5, r2, r3
 800b4e0:	42ac      	cmp	r4, r5
 800b4e2:	d101      	bne.n	800b4e8 <__sfputs_r+0x12>
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	e007      	b.n	800b4f8 <__sfputs_r+0x22>
 800b4e8:	463a      	mov	r2, r7
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f0:	f7ff ffdc 	bl	800b4ac <__sfputc_r>
 800b4f4:	1c43      	adds	r3, r0, #1
 800b4f6:	d1f3      	bne.n	800b4e0 <__sfputs_r+0xa>
 800b4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4fc <_vfiprintf_r>:
 800b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	460d      	mov	r5, r1
 800b502:	4614      	mov	r4, r2
 800b504:	4698      	mov	r8, r3
 800b506:	4606      	mov	r6, r0
 800b508:	b09d      	sub	sp, #116	; 0x74
 800b50a:	b118      	cbz	r0, 800b514 <_vfiprintf_r+0x18>
 800b50c:	6983      	ldr	r3, [r0, #24]
 800b50e:	b90b      	cbnz	r3, 800b514 <_vfiprintf_r+0x18>
 800b510:	f7ff fd76 	bl	800b000 <__sinit>
 800b514:	4b89      	ldr	r3, [pc, #548]	; (800b73c <_vfiprintf_r+0x240>)
 800b516:	429d      	cmp	r5, r3
 800b518:	d11b      	bne.n	800b552 <_vfiprintf_r+0x56>
 800b51a:	6875      	ldr	r5, [r6, #4]
 800b51c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b51e:	07d9      	lsls	r1, r3, #31
 800b520:	d405      	bmi.n	800b52e <_vfiprintf_r+0x32>
 800b522:	89ab      	ldrh	r3, [r5, #12]
 800b524:	059a      	lsls	r2, r3, #22
 800b526:	d402      	bmi.n	800b52e <_vfiprintf_r+0x32>
 800b528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b52a:	f7ff fe07 	bl	800b13c <__retarget_lock_acquire_recursive>
 800b52e:	89ab      	ldrh	r3, [r5, #12]
 800b530:	071b      	lsls	r3, r3, #28
 800b532:	d501      	bpl.n	800b538 <_vfiprintf_r+0x3c>
 800b534:	692b      	ldr	r3, [r5, #16]
 800b536:	b9eb      	cbnz	r3, 800b574 <_vfiprintf_r+0x78>
 800b538:	4629      	mov	r1, r5
 800b53a:	4630      	mov	r0, r6
 800b53c:	f000 fb5c 	bl	800bbf8 <__swsetup_r>
 800b540:	b1c0      	cbz	r0, 800b574 <_vfiprintf_r+0x78>
 800b542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b544:	07dc      	lsls	r4, r3, #31
 800b546:	d50e      	bpl.n	800b566 <_vfiprintf_r+0x6a>
 800b548:	f04f 30ff 	mov.w	r0, #4294967295
 800b54c:	b01d      	add	sp, #116	; 0x74
 800b54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b552:	4b7b      	ldr	r3, [pc, #492]	; (800b740 <_vfiprintf_r+0x244>)
 800b554:	429d      	cmp	r5, r3
 800b556:	d101      	bne.n	800b55c <_vfiprintf_r+0x60>
 800b558:	68b5      	ldr	r5, [r6, #8]
 800b55a:	e7df      	b.n	800b51c <_vfiprintf_r+0x20>
 800b55c:	4b79      	ldr	r3, [pc, #484]	; (800b744 <_vfiprintf_r+0x248>)
 800b55e:	429d      	cmp	r5, r3
 800b560:	bf08      	it	eq
 800b562:	68f5      	ldreq	r5, [r6, #12]
 800b564:	e7da      	b.n	800b51c <_vfiprintf_r+0x20>
 800b566:	89ab      	ldrh	r3, [r5, #12]
 800b568:	0598      	lsls	r0, r3, #22
 800b56a:	d4ed      	bmi.n	800b548 <_vfiprintf_r+0x4c>
 800b56c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b56e:	f7ff fde6 	bl	800b13e <__retarget_lock_release_recursive>
 800b572:	e7e9      	b.n	800b548 <_vfiprintf_r+0x4c>
 800b574:	2300      	movs	r3, #0
 800b576:	9309      	str	r3, [sp, #36]	; 0x24
 800b578:	2320      	movs	r3, #32
 800b57a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b57e:	2330      	movs	r3, #48	; 0x30
 800b580:	f04f 0901 	mov.w	r9, #1
 800b584:	f8cd 800c 	str.w	r8, [sp, #12]
 800b588:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b748 <_vfiprintf_r+0x24c>
 800b58c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b590:	4623      	mov	r3, r4
 800b592:	469a      	mov	sl, r3
 800b594:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b598:	b10a      	cbz	r2, 800b59e <_vfiprintf_r+0xa2>
 800b59a:	2a25      	cmp	r2, #37	; 0x25
 800b59c:	d1f9      	bne.n	800b592 <_vfiprintf_r+0x96>
 800b59e:	ebba 0b04 	subs.w	fp, sl, r4
 800b5a2:	d00b      	beq.n	800b5bc <_vfiprintf_r+0xc0>
 800b5a4:	465b      	mov	r3, fp
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	f7ff ff93 	bl	800b4d6 <__sfputs_r>
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	f000 80aa 	beq.w	800b70a <_vfiprintf_r+0x20e>
 800b5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5b8:	445a      	add	r2, fp
 800b5ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 80a2 	beq.w	800b70a <_vfiprintf_r+0x20e>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5d0:	f10a 0a01 	add.w	sl, sl, #1
 800b5d4:	9304      	str	r3, [sp, #16]
 800b5d6:	9307      	str	r3, [sp, #28]
 800b5d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5dc:	931a      	str	r3, [sp, #104]	; 0x68
 800b5de:	4654      	mov	r4, sl
 800b5e0:	2205      	movs	r2, #5
 800b5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5e6:	4858      	ldr	r0, [pc, #352]	; (800b748 <_vfiprintf_r+0x24c>)
 800b5e8:	f000 fcbc 	bl	800bf64 <memchr>
 800b5ec:	9a04      	ldr	r2, [sp, #16]
 800b5ee:	b9d8      	cbnz	r0, 800b628 <_vfiprintf_r+0x12c>
 800b5f0:	06d1      	lsls	r1, r2, #27
 800b5f2:	bf44      	itt	mi
 800b5f4:	2320      	movmi	r3, #32
 800b5f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5fa:	0713      	lsls	r3, r2, #28
 800b5fc:	bf44      	itt	mi
 800b5fe:	232b      	movmi	r3, #43	; 0x2b
 800b600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b604:	f89a 3000 	ldrb.w	r3, [sl]
 800b608:	2b2a      	cmp	r3, #42	; 0x2a
 800b60a:	d015      	beq.n	800b638 <_vfiprintf_r+0x13c>
 800b60c:	4654      	mov	r4, sl
 800b60e:	2000      	movs	r0, #0
 800b610:	f04f 0c0a 	mov.w	ip, #10
 800b614:	9a07      	ldr	r2, [sp, #28]
 800b616:	4621      	mov	r1, r4
 800b618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b61c:	3b30      	subs	r3, #48	; 0x30
 800b61e:	2b09      	cmp	r3, #9
 800b620:	d94e      	bls.n	800b6c0 <_vfiprintf_r+0x1c4>
 800b622:	b1b0      	cbz	r0, 800b652 <_vfiprintf_r+0x156>
 800b624:	9207      	str	r2, [sp, #28]
 800b626:	e014      	b.n	800b652 <_vfiprintf_r+0x156>
 800b628:	eba0 0308 	sub.w	r3, r0, r8
 800b62c:	fa09 f303 	lsl.w	r3, r9, r3
 800b630:	4313      	orrs	r3, r2
 800b632:	46a2      	mov	sl, r4
 800b634:	9304      	str	r3, [sp, #16]
 800b636:	e7d2      	b.n	800b5de <_vfiprintf_r+0xe2>
 800b638:	9b03      	ldr	r3, [sp, #12]
 800b63a:	1d19      	adds	r1, r3, #4
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	9103      	str	r1, [sp, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	bfbb      	ittet	lt
 800b644:	425b      	neglt	r3, r3
 800b646:	f042 0202 	orrlt.w	r2, r2, #2
 800b64a:	9307      	strge	r3, [sp, #28]
 800b64c:	9307      	strlt	r3, [sp, #28]
 800b64e:	bfb8      	it	lt
 800b650:	9204      	strlt	r2, [sp, #16]
 800b652:	7823      	ldrb	r3, [r4, #0]
 800b654:	2b2e      	cmp	r3, #46	; 0x2e
 800b656:	d10c      	bne.n	800b672 <_vfiprintf_r+0x176>
 800b658:	7863      	ldrb	r3, [r4, #1]
 800b65a:	2b2a      	cmp	r3, #42	; 0x2a
 800b65c:	d135      	bne.n	800b6ca <_vfiprintf_r+0x1ce>
 800b65e:	9b03      	ldr	r3, [sp, #12]
 800b660:	3402      	adds	r4, #2
 800b662:	1d1a      	adds	r2, r3, #4
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	9203      	str	r2, [sp, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	bfb8      	it	lt
 800b66c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b670:	9305      	str	r3, [sp, #20]
 800b672:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b758 <_vfiprintf_r+0x25c>
 800b676:	2203      	movs	r2, #3
 800b678:	4650      	mov	r0, sl
 800b67a:	7821      	ldrb	r1, [r4, #0]
 800b67c:	f000 fc72 	bl	800bf64 <memchr>
 800b680:	b140      	cbz	r0, 800b694 <_vfiprintf_r+0x198>
 800b682:	2340      	movs	r3, #64	; 0x40
 800b684:	eba0 000a 	sub.w	r0, r0, sl
 800b688:	fa03 f000 	lsl.w	r0, r3, r0
 800b68c:	9b04      	ldr	r3, [sp, #16]
 800b68e:	3401      	adds	r4, #1
 800b690:	4303      	orrs	r3, r0
 800b692:	9304      	str	r3, [sp, #16]
 800b694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b698:	2206      	movs	r2, #6
 800b69a:	482c      	ldr	r0, [pc, #176]	; (800b74c <_vfiprintf_r+0x250>)
 800b69c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6a0:	f000 fc60 	bl	800bf64 <memchr>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d03f      	beq.n	800b728 <_vfiprintf_r+0x22c>
 800b6a8:	4b29      	ldr	r3, [pc, #164]	; (800b750 <_vfiprintf_r+0x254>)
 800b6aa:	bb1b      	cbnz	r3, 800b6f4 <_vfiprintf_r+0x1f8>
 800b6ac:	9b03      	ldr	r3, [sp, #12]
 800b6ae:	3307      	adds	r3, #7
 800b6b0:	f023 0307 	bic.w	r3, r3, #7
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	9303      	str	r3, [sp, #12]
 800b6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ba:	443b      	add	r3, r7
 800b6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b6be:	e767      	b.n	800b590 <_vfiprintf_r+0x94>
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	2001      	movs	r0, #1
 800b6c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6c8:	e7a5      	b.n	800b616 <_vfiprintf_r+0x11a>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f04f 0c0a 	mov.w	ip, #10
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	3401      	adds	r4, #1
 800b6d4:	9305      	str	r3, [sp, #20]
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6dc:	3a30      	subs	r2, #48	; 0x30
 800b6de:	2a09      	cmp	r2, #9
 800b6e0:	d903      	bls.n	800b6ea <_vfiprintf_r+0x1ee>
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d0c5      	beq.n	800b672 <_vfiprintf_r+0x176>
 800b6e6:	9105      	str	r1, [sp, #20]
 800b6e8:	e7c3      	b.n	800b672 <_vfiprintf_r+0x176>
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6f2:	e7f0      	b.n	800b6d6 <_vfiprintf_r+0x1da>
 800b6f4:	ab03      	add	r3, sp, #12
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	462a      	mov	r2, r5
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	4b15      	ldr	r3, [pc, #84]	; (800b754 <_vfiprintf_r+0x258>)
 800b6fe:	a904      	add	r1, sp, #16
 800b700:	f3af 8000 	nop.w
 800b704:	4607      	mov	r7, r0
 800b706:	1c78      	adds	r0, r7, #1
 800b708:	d1d6      	bne.n	800b6b8 <_vfiprintf_r+0x1bc>
 800b70a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b70c:	07d9      	lsls	r1, r3, #31
 800b70e:	d405      	bmi.n	800b71c <_vfiprintf_r+0x220>
 800b710:	89ab      	ldrh	r3, [r5, #12]
 800b712:	059a      	lsls	r2, r3, #22
 800b714:	d402      	bmi.n	800b71c <_vfiprintf_r+0x220>
 800b716:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b718:	f7ff fd11 	bl	800b13e <__retarget_lock_release_recursive>
 800b71c:	89ab      	ldrh	r3, [r5, #12]
 800b71e:	065b      	lsls	r3, r3, #25
 800b720:	f53f af12 	bmi.w	800b548 <_vfiprintf_r+0x4c>
 800b724:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b726:	e711      	b.n	800b54c <_vfiprintf_r+0x50>
 800b728:	ab03      	add	r3, sp, #12
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	462a      	mov	r2, r5
 800b72e:	4630      	mov	r0, r6
 800b730:	4b08      	ldr	r3, [pc, #32]	; (800b754 <_vfiprintf_r+0x258>)
 800b732:	a904      	add	r1, sp, #16
 800b734:	f000 f882 	bl	800b83c <_printf_i>
 800b738:	e7e4      	b.n	800b704 <_vfiprintf_r+0x208>
 800b73a:	bf00      	nop
 800b73c:	0800c3dc 	.word	0x0800c3dc
 800b740:	0800c3fc 	.word	0x0800c3fc
 800b744:	0800c3bc 	.word	0x0800c3bc
 800b748:	0800c41c 	.word	0x0800c41c
 800b74c:	0800c426 	.word	0x0800c426
 800b750:	00000000 	.word	0x00000000
 800b754:	0800b4d7 	.word	0x0800b4d7
 800b758:	0800c422 	.word	0x0800c422

0800b75c <_printf_common>:
 800b75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b760:	4616      	mov	r6, r2
 800b762:	4699      	mov	r9, r3
 800b764:	688a      	ldr	r2, [r1, #8]
 800b766:	690b      	ldr	r3, [r1, #16]
 800b768:	4607      	mov	r7, r0
 800b76a:	4293      	cmp	r3, r2
 800b76c:	bfb8      	it	lt
 800b76e:	4613      	movlt	r3, r2
 800b770:	6033      	str	r3, [r6, #0]
 800b772:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b776:	460c      	mov	r4, r1
 800b778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b77c:	b10a      	cbz	r2, 800b782 <_printf_common+0x26>
 800b77e:	3301      	adds	r3, #1
 800b780:	6033      	str	r3, [r6, #0]
 800b782:	6823      	ldr	r3, [r4, #0]
 800b784:	0699      	lsls	r1, r3, #26
 800b786:	bf42      	ittt	mi
 800b788:	6833      	ldrmi	r3, [r6, #0]
 800b78a:	3302      	addmi	r3, #2
 800b78c:	6033      	strmi	r3, [r6, #0]
 800b78e:	6825      	ldr	r5, [r4, #0]
 800b790:	f015 0506 	ands.w	r5, r5, #6
 800b794:	d106      	bne.n	800b7a4 <_printf_common+0x48>
 800b796:	f104 0a19 	add.w	sl, r4, #25
 800b79a:	68e3      	ldr	r3, [r4, #12]
 800b79c:	6832      	ldr	r2, [r6, #0]
 800b79e:	1a9b      	subs	r3, r3, r2
 800b7a0:	42ab      	cmp	r3, r5
 800b7a2:	dc28      	bgt.n	800b7f6 <_printf_common+0x9a>
 800b7a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7a8:	1e13      	subs	r3, r2, #0
 800b7aa:	6822      	ldr	r2, [r4, #0]
 800b7ac:	bf18      	it	ne
 800b7ae:	2301      	movne	r3, #1
 800b7b0:	0692      	lsls	r2, r2, #26
 800b7b2:	d42d      	bmi.n	800b810 <_printf_common+0xb4>
 800b7b4:	4649      	mov	r1, r9
 800b7b6:	4638      	mov	r0, r7
 800b7b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7bc:	47c0      	blx	r8
 800b7be:	3001      	adds	r0, #1
 800b7c0:	d020      	beq.n	800b804 <_printf_common+0xa8>
 800b7c2:	6823      	ldr	r3, [r4, #0]
 800b7c4:	68e5      	ldr	r5, [r4, #12]
 800b7c6:	f003 0306 	and.w	r3, r3, #6
 800b7ca:	2b04      	cmp	r3, #4
 800b7cc:	bf18      	it	ne
 800b7ce:	2500      	movne	r5, #0
 800b7d0:	6832      	ldr	r2, [r6, #0]
 800b7d2:	f04f 0600 	mov.w	r6, #0
 800b7d6:	68a3      	ldr	r3, [r4, #8]
 800b7d8:	bf08      	it	eq
 800b7da:	1aad      	subeq	r5, r5, r2
 800b7dc:	6922      	ldr	r2, [r4, #16]
 800b7de:	bf08      	it	eq
 800b7e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	bfc4      	itt	gt
 800b7e8:	1a9b      	subgt	r3, r3, r2
 800b7ea:	18ed      	addgt	r5, r5, r3
 800b7ec:	341a      	adds	r4, #26
 800b7ee:	42b5      	cmp	r5, r6
 800b7f0:	d11a      	bne.n	800b828 <_printf_common+0xcc>
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	e008      	b.n	800b808 <_printf_common+0xac>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	4652      	mov	r2, sl
 800b7fa:	4649      	mov	r1, r9
 800b7fc:	4638      	mov	r0, r7
 800b7fe:	47c0      	blx	r8
 800b800:	3001      	adds	r0, #1
 800b802:	d103      	bne.n	800b80c <_printf_common+0xb0>
 800b804:	f04f 30ff 	mov.w	r0, #4294967295
 800b808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b80c:	3501      	adds	r5, #1
 800b80e:	e7c4      	b.n	800b79a <_printf_common+0x3e>
 800b810:	2030      	movs	r0, #48	; 0x30
 800b812:	18e1      	adds	r1, r4, r3
 800b814:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b818:	1c5a      	adds	r2, r3, #1
 800b81a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b81e:	4422      	add	r2, r4
 800b820:	3302      	adds	r3, #2
 800b822:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b826:	e7c5      	b.n	800b7b4 <_printf_common+0x58>
 800b828:	2301      	movs	r3, #1
 800b82a:	4622      	mov	r2, r4
 800b82c:	4649      	mov	r1, r9
 800b82e:	4638      	mov	r0, r7
 800b830:	47c0      	blx	r8
 800b832:	3001      	adds	r0, #1
 800b834:	d0e6      	beq.n	800b804 <_printf_common+0xa8>
 800b836:	3601      	adds	r6, #1
 800b838:	e7d9      	b.n	800b7ee <_printf_common+0x92>
	...

0800b83c <_printf_i>:
 800b83c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b840:	460c      	mov	r4, r1
 800b842:	7e27      	ldrb	r7, [r4, #24]
 800b844:	4691      	mov	r9, r2
 800b846:	2f78      	cmp	r7, #120	; 0x78
 800b848:	4680      	mov	r8, r0
 800b84a:	469a      	mov	sl, r3
 800b84c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b84e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b852:	d807      	bhi.n	800b864 <_printf_i+0x28>
 800b854:	2f62      	cmp	r7, #98	; 0x62
 800b856:	d80a      	bhi.n	800b86e <_printf_i+0x32>
 800b858:	2f00      	cmp	r7, #0
 800b85a:	f000 80d9 	beq.w	800ba10 <_printf_i+0x1d4>
 800b85e:	2f58      	cmp	r7, #88	; 0x58
 800b860:	f000 80a4 	beq.w	800b9ac <_printf_i+0x170>
 800b864:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b86c:	e03a      	b.n	800b8e4 <_printf_i+0xa8>
 800b86e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b872:	2b15      	cmp	r3, #21
 800b874:	d8f6      	bhi.n	800b864 <_printf_i+0x28>
 800b876:	a001      	add	r0, pc, #4	; (adr r0, 800b87c <_printf_i+0x40>)
 800b878:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b87c:	0800b8d5 	.word	0x0800b8d5
 800b880:	0800b8e9 	.word	0x0800b8e9
 800b884:	0800b865 	.word	0x0800b865
 800b888:	0800b865 	.word	0x0800b865
 800b88c:	0800b865 	.word	0x0800b865
 800b890:	0800b865 	.word	0x0800b865
 800b894:	0800b8e9 	.word	0x0800b8e9
 800b898:	0800b865 	.word	0x0800b865
 800b89c:	0800b865 	.word	0x0800b865
 800b8a0:	0800b865 	.word	0x0800b865
 800b8a4:	0800b865 	.word	0x0800b865
 800b8a8:	0800b9f7 	.word	0x0800b9f7
 800b8ac:	0800b919 	.word	0x0800b919
 800b8b0:	0800b9d9 	.word	0x0800b9d9
 800b8b4:	0800b865 	.word	0x0800b865
 800b8b8:	0800b865 	.word	0x0800b865
 800b8bc:	0800ba19 	.word	0x0800ba19
 800b8c0:	0800b865 	.word	0x0800b865
 800b8c4:	0800b919 	.word	0x0800b919
 800b8c8:	0800b865 	.word	0x0800b865
 800b8cc:	0800b865 	.word	0x0800b865
 800b8d0:	0800b9e1 	.word	0x0800b9e1
 800b8d4:	680b      	ldr	r3, [r1, #0]
 800b8d6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b8da:	1d1a      	adds	r2, r3, #4
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	600a      	str	r2, [r1, #0]
 800b8e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e0a4      	b.n	800ba32 <_printf_i+0x1f6>
 800b8e8:	6825      	ldr	r5, [r4, #0]
 800b8ea:	6808      	ldr	r0, [r1, #0]
 800b8ec:	062e      	lsls	r6, r5, #24
 800b8ee:	f100 0304 	add.w	r3, r0, #4
 800b8f2:	d50a      	bpl.n	800b90a <_printf_i+0xce>
 800b8f4:	6805      	ldr	r5, [r0, #0]
 800b8f6:	600b      	str	r3, [r1, #0]
 800b8f8:	2d00      	cmp	r5, #0
 800b8fa:	da03      	bge.n	800b904 <_printf_i+0xc8>
 800b8fc:	232d      	movs	r3, #45	; 0x2d
 800b8fe:	426d      	negs	r5, r5
 800b900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b904:	230a      	movs	r3, #10
 800b906:	485e      	ldr	r0, [pc, #376]	; (800ba80 <_printf_i+0x244>)
 800b908:	e019      	b.n	800b93e <_printf_i+0x102>
 800b90a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b90e:	6805      	ldr	r5, [r0, #0]
 800b910:	600b      	str	r3, [r1, #0]
 800b912:	bf18      	it	ne
 800b914:	b22d      	sxthne	r5, r5
 800b916:	e7ef      	b.n	800b8f8 <_printf_i+0xbc>
 800b918:	680b      	ldr	r3, [r1, #0]
 800b91a:	6825      	ldr	r5, [r4, #0]
 800b91c:	1d18      	adds	r0, r3, #4
 800b91e:	6008      	str	r0, [r1, #0]
 800b920:	0628      	lsls	r0, r5, #24
 800b922:	d501      	bpl.n	800b928 <_printf_i+0xec>
 800b924:	681d      	ldr	r5, [r3, #0]
 800b926:	e002      	b.n	800b92e <_printf_i+0xf2>
 800b928:	0669      	lsls	r1, r5, #25
 800b92a:	d5fb      	bpl.n	800b924 <_printf_i+0xe8>
 800b92c:	881d      	ldrh	r5, [r3, #0]
 800b92e:	2f6f      	cmp	r7, #111	; 0x6f
 800b930:	bf0c      	ite	eq
 800b932:	2308      	moveq	r3, #8
 800b934:	230a      	movne	r3, #10
 800b936:	4852      	ldr	r0, [pc, #328]	; (800ba80 <_printf_i+0x244>)
 800b938:	2100      	movs	r1, #0
 800b93a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b93e:	6866      	ldr	r6, [r4, #4]
 800b940:	2e00      	cmp	r6, #0
 800b942:	bfa8      	it	ge
 800b944:	6821      	ldrge	r1, [r4, #0]
 800b946:	60a6      	str	r6, [r4, #8]
 800b948:	bfa4      	itt	ge
 800b94a:	f021 0104 	bicge.w	r1, r1, #4
 800b94e:	6021      	strge	r1, [r4, #0]
 800b950:	b90d      	cbnz	r5, 800b956 <_printf_i+0x11a>
 800b952:	2e00      	cmp	r6, #0
 800b954:	d04d      	beq.n	800b9f2 <_printf_i+0x1b6>
 800b956:	4616      	mov	r6, r2
 800b958:	fbb5 f1f3 	udiv	r1, r5, r3
 800b95c:	fb03 5711 	mls	r7, r3, r1, r5
 800b960:	5dc7      	ldrb	r7, [r0, r7]
 800b962:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b966:	462f      	mov	r7, r5
 800b968:	42bb      	cmp	r3, r7
 800b96a:	460d      	mov	r5, r1
 800b96c:	d9f4      	bls.n	800b958 <_printf_i+0x11c>
 800b96e:	2b08      	cmp	r3, #8
 800b970:	d10b      	bne.n	800b98a <_printf_i+0x14e>
 800b972:	6823      	ldr	r3, [r4, #0]
 800b974:	07df      	lsls	r7, r3, #31
 800b976:	d508      	bpl.n	800b98a <_printf_i+0x14e>
 800b978:	6923      	ldr	r3, [r4, #16]
 800b97a:	6861      	ldr	r1, [r4, #4]
 800b97c:	4299      	cmp	r1, r3
 800b97e:	bfde      	ittt	le
 800b980:	2330      	movle	r3, #48	; 0x30
 800b982:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b986:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b98a:	1b92      	subs	r2, r2, r6
 800b98c:	6122      	str	r2, [r4, #16]
 800b98e:	464b      	mov	r3, r9
 800b990:	4621      	mov	r1, r4
 800b992:	4640      	mov	r0, r8
 800b994:	f8cd a000 	str.w	sl, [sp]
 800b998:	aa03      	add	r2, sp, #12
 800b99a:	f7ff fedf 	bl	800b75c <_printf_common>
 800b99e:	3001      	adds	r0, #1
 800b9a0:	d14c      	bne.n	800ba3c <_printf_i+0x200>
 800b9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a6:	b004      	add	sp, #16
 800b9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ac:	4834      	ldr	r0, [pc, #208]	; (800ba80 <_printf_i+0x244>)
 800b9ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b9b2:	680e      	ldr	r6, [r1, #0]
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	f856 5b04 	ldr.w	r5, [r6], #4
 800b9ba:	061f      	lsls	r7, r3, #24
 800b9bc:	600e      	str	r6, [r1, #0]
 800b9be:	d514      	bpl.n	800b9ea <_printf_i+0x1ae>
 800b9c0:	07d9      	lsls	r1, r3, #31
 800b9c2:	bf44      	itt	mi
 800b9c4:	f043 0320 	orrmi.w	r3, r3, #32
 800b9c8:	6023      	strmi	r3, [r4, #0]
 800b9ca:	b91d      	cbnz	r5, 800b9d4 <_printf_i+0x198>
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	f023 0320 	bic.w	r3, r3, #32
 800b9d2:	6023      	str	r3, [r4, #0]
 800b9d4:	2310      	movs	r3, #16
 800b9d6:	e7af      	b.n	800b938 <_printf_i+0xfc>
 800b9d8:	6823      	ldr	r3, [r4, #0]
 800b9da:	f043 0320 	orr.w	r3, r3, #32
 800b9de:	6023      	str	r3, [r4, #0]
 800b9e0:	2378      	movs	r3, #120	; 0x78
 800b9e2:	4828      	ldr	r0, [pc, #160]	; (800ba84 <_printf_i+0x248>)
 800b9e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9e8:	e7e3      	b.n	800b9b2 <_printf_i+0x176>
 800b9ea:	065e      	lsls	r6, r3, #25
 800b9ec:	bf48      	it	mi
 800b9ee:	b2ad      	uxthmi	r5, r5
 800b9f0:	e7e6      	b.n	800b9c0 <_printf_i+0x184>
 800b9f2:	4616      	mov	r6, r2
 800b9f4:	e7bb      	b.n	800b96e <_printf_i+0x132>
 800b9f6:	680b      	ldr	r3, [r1, #0]
 800b9f8:	6826      	ldr	r6, [r4, #0]
 800b9fa:	1d1d      	adds	r5, r3, #4
 800b9fc:	6960      	ldr	r0, [r4, #20]
 800b9fe:	600d      	str	r5, [r1, #0]
 800ba00:	0635      	lsls	r5, r6, #24
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	d501      	bpl.n	800ba0a <_printf_i+0x1ce>
 800ba06:	6018      	str	r0, [r3, #0]
 800ba08:	e002      	b.n	800ba10 <_printf_i+0x1d4>
 800ba0a:	0671      	lsls	r1, r6, #25
 800ba0c:	d5fb      	bpl.n	800ba06 <_printf_i+0x1ca>
 800ba0e:	8018      	strh	r0, [r3, #0]
 800ba10:	2300      	movs	r3, #0
 800ba12:	4616      	mov	r6, r2
 800ba14:	6123      	str	r3, [r4, #16]
 800ba16:	e7ba      	b.n	800b98e <_printf_i+0x152>
 800ba18:	680b      	ldr	r3, [r1, #0]
 800ba1a:	1d1a      	adds	r2, r3, #4
 800ba1c:	600a      	str	r2, [r1, #0]
 800ba1e:	681e      	ldr	r6, [r3, #0]
 800ba20:	2100      	movs	r1, #0
 800ba22:	4630      	mov	r0, r6
 800ba24:	6862      	ldr	r2, [r4, #4]
 800ba26:	f000 fa9d 	bl	800bf64 <memchr>
 800ba2a:	b108      	cbz	r0, 800ba30 <_printf_i+0x1f4>
 800ba2c:	1b80      	subs	r0, r0, r6
 800ba2e:	6060      	str	r0, [r4, #4]
 800ba30:	6863      	ldr	r3, [r4, #4]
 800ba32:	6123      	str	r3, [r4, #16]
 800ba34:	2300      	movs	r3, #0
 800ba36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba3a:	e7a8      	b.n	800b98e <_printf_i+0x152>
 800ba3c:	4632      	mov	r2, r6
 800ba3e:	4649      	mov	r1, r9
 800ba40:	4640      	mov	r0, r8
 800ba42:	6923      	ldr	r3, [r4, #16]
 800ba44:	47d0      	blx	sl
 800ba46:	3001      	adds	r0, #1
 800ba48:	d0ab      	beq.n	800b9a2 <_printf_i+0x166>
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	079b      	lsls	r3, r3, #30
 800ba4e:	d413      	bmi.n	800ba78 <_printf_i+0x23c>
 800ba50:	68e0      	ldr	r0, [r4, #12]
 800ba52:	9b03      	ldr	r3, [sp, #12]
 800ba54:	4298      	cmp	r0, r3
 800ba56:	bfb8      	it	lt
 800ba58:	4618      	movlt	r0, r3
 800ba5a:	e7a4      	b.n	800b9a6 <_printf_i+0x16a>
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	4632      	mov	r2, r6
 800ba60:	4649      	mov	r1, r9
 800ba62:	4640      	mov	r0, r8
 800ba64:	47d0      	blx	sl
 800ba66:	3001      	adds	r0, #1
 800ba68:	d09b      	beq.n	800b9a2 <_printf_i+0x166>
 800ba6a:	3501      	adds	r5, #1
 800ba6c:	68e3      	ldr	r3, [r4, #12]
 800ba6e:	9903      	ldr	r1, [sp, #12]
 800ba70:	1a5b      	subs	r3, r3, r1
 800ba72:	42ab      	cmp	r3, r5
 800ba74:	dcf2      	bgt.n	800ba5c <_printf_i+0x220>
 800ba76:	e7eb      	b.n	800ba50 <_printf_i+0x214>
 800ba78:	2500      	movs	r5, #0
 800ba7a:	f104 0619 	add.w	r6, r4, #25
 800ba7e:	e7f5      	b.n	800ba6c <_printf_i+0x230>
 800ba80:	0800c42d 	.word	0x0800c42d
 800ba84:	0800c43e 	.word	0x0800c43e

0800ba88 <_sbrk_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	4d05      	ldr	r5, [pc, #20]	; (800baa4 <_sbrk_r+0x1c>)
 800ba8e:	4604      	mov	r4, r0
 800ba90:	4608      	mov	r0, r1
 800ba92:	602b      	str	r3, [r5, #0]
 800ba94:	f7f6 fbbc 	bl	8002210 <_sbrk>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	d102      	bne.n	800baa2 <_sbrk_r+0x1a>
 800ba9c:	682b      	ldr	r3, [r5, #0]
 800ba9e:	b103      	cbz	r3, 800baa2 <_sbrk_r+0x1a>
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	bd38      	pop	{r3, r4, r5, pc}
 800baa4:	200015b4 	.word	0x200015b4

0800baa8 <__sread>:
 800baa8:	b510      	push	{r4, lr}
 800baaa:	460c      	mov	r4, r1
 800baac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bab0:	f000 fafe 	bl	800c0b0 <_read_r>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	bfab      	itete	ge
 800bab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800baba:	89a3      	ldrhlt	r3, [r4, #12]
 800babc:	181b      	addge	r3, r3, r0
 800babe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bac2:	bfac      	ite	ge
 800bac4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bac6:	81a3      	strhlt	r3, [r4, #12]
 800bac8:	bd10      	pop	{r4, pc}

0800baca <__swrite>:
 800baca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bace:	461f      	mov	r7, r3
 800bad0:	898b      	ldrh	r3, [r1, #12]
 800bad2:	4605      	mov	r5, r0
 800bad4:	05db      	lsls	r3, r3, #23
 800bad6:	460c      	mov	r4, r1
 800bad8:	4616      	mov	r6, r2
 800bada:	d505      	bpl.n	800bae8 <__swrite+0x1e>
 800badc:	2302      	movs	r3, #2
 800bade:	2200      	movs	r2, #0
 800bae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bae4:	f000 f9c8 	bl	800be78 <_lseek_r>
 800bae8:	89a3      	ldrh	r3, [r4, #12]
 800baea:	4632      	mov	r2, r6
 800baec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800baf0:	81a3      	strh	r3, [r4, #12]
 800baf2:	4628      	mov	r0, r5
 800baf4:	463b      	mov	r3, r7
 800baf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bafa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bafe:	f000 b869 	b.w	800bbd4 <_write_r>

0800bb02 <__sseek>:
 800bb02:	b510      	push	{r4, lr}
 800bb04:	460c      	mov	r4, r1
 800bb06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb0a:	f000 f9b5 	bl	800be78 <_lseek_r>
 800bb0e:	1c43      	adds	r3, r0, #1
 800bb10:	89a3      	ldrh	r3, [r4, #12]
 800bb12:	bf15      	itete	ne
 800bb14:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb1e:	81a3      	strheq	r3, [r4, #12]
 800bb20:	bf18      	it	ne
 800bb22:	81a3      	strhne	r3, [r4, #12]
 800bb24:	bd10      	pop	{r4, pc}

0800bb26 <__sclose>:
 800bb26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb2a:	f000 b8d3 	b.w	800bcd4 <_close_r>
	...

0800bb30 <__swbuf_r>:
 800bb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb32:	460e      	mov	r6, r1
 800bb34:	4614      	mov	r4, r2
 800bb36:	4605      	mov	r5, r0
 800bb38:	b118      	cbz	r0, 800bb42 <__swbuf_r+0x12>
 800bb3a:	6983      	ldr	r3, [r0, #24]
 800bb3c:	b90b      	cbnz	r3, 800bb42 <__swbuf_r+0x12>
 800bb3e:	f7ff fa5f 	bl	800b000 <__sinit>
 800bb42:	4b21      	ldr	r3, [pc, #132]	; (800bbc8 <__swbuf_r+0x98>)
 800bb44:	429c      	cmp	r4, r3
 800bb46:	d12b      	bne.n	800bba0 <__swbuf_r+0x70>
 800bb48:	686c      	ldr	r4, [r5, #4]
 800bb4a:	69a3      	ldr	r3, [r4, #24]
 800bb4c:	60a3      	str	r3, [r4, #8]
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	071a      	lsls	r2, r3, #28
 800bb52:	d52f      	bpl.n	800bbb4 <__swbuf_r+0x84>
 800bb54:	6923      	ldr	r3, [r4, #16]
 800bb56:	b36b      	cbz	r3, 800bbb4 <__swbuf_r+0x84>
 800bb58:	6923      	ldr	r3, [r4, #16]
 800bb5a:	6820      	ldr	r0, [r4, #0]
 800bb5c:	b2f6      	uxtb	r6, r6
 800bb5e:	1ac0      	subs	r0, r0, r3
 800bb60:	6963      	ldr	r3, [r4, #20]
 800bb62:	4637      	mov	r7, r6
 800bb64:	4283      	cmp	r3, r0
 800bb66:	dc04      	bgt.n	800bb72 <__swbuf_r+0x42>
 800bb68:	4621      	mov	r1, r4
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	f000 f948 	bl	800be00 <_fflush_r>
 800bb70:	bb30      	cbnz	r0, 800bbc0 <__swbuf_r+0x90>
 800bb72:	68a3      	ldr	r3, [r4, #8]
 800bb74:	3001      	adds	r0, #1
 800bb76:	3b01      	subs	r3, #1
 800bb78:	60a3      	str	r3, [r4, #8]
 800bb7a:	6823      	ldr	r3, [r4, #0]
 800bb7c:	1c5a      	adds	r2, r3, #1
 800bb7e:	6022      	str	r2, [r4, #0]
 800bb80:	701e      	strb	r6, [r3, #0]
 800bb82:	6963      	ldr	r3, [r4, #20]
 800bb84:	4283      	cmp	r3, r0
 800bb86:	d004      	beq.n	800bb92 <__swbuf_r+0x62>
 800bb88:	89a3      	ldrh	r3, [r4, #12]
 800bb8a:	07db      	lsls	r3, r3, #31
 800bb8c:	d506      	bpl.n	800bb9c <__swbuf_r+0x6c>
 800bb8e:	2e0a      	cmp	r6, #10
 800bb90:	d104      	bne.n	800bb9c <__swbuf_r+0x6c>
 800bb92:	4621      	mov	r1, r4
 800bb94:	4628      	mov	r0, r5
 800bb96:	f000 f933 	bl	800be00 <_fflush_r>
 800bb9a:	b988      	cbnz	r0, 800bbc0 <__swbuf_r+0x90>
 800bb9c:	4638      	mov	r0, r7
 800bb9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba0:	4b0a      	ldr	r3, [pc, #40]	; (800bbcc <__swbuf_r+0x9c>)
 800bba2:	429c      	cmp	r4, r3
 800bba4:	d101      	bne.n	800bbaa <__swbuf_r+0x7a>
 800bba6:	68ac      	ldr	r4, [r5, #8]
 800bba8:	e7cf      	b.n	800bb4a <__swbuf_r+0x1a>
 800bbaa:	4b09      	ldr	r3, [pc, #36]	; (800bbd0 <__swbuf_r+0xa0>)
 800bbac:	429c      	cmp	r4, r3
 800bbae:	bf08      	it	eq
 800bbb0:	68ec      	ldreq	r4, [r5, #12]
 800bbb2:	e7ca      	b.n	800bb4a <__swbuf_r+0x1a>
 800bbb4:	4621      	mov	r1, r4
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f000 f81e 	bl	800bbf8 <__swsetup_r>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d0cb      	beq.n	800bb58 <__swbuf_r+0x28>
 800bbc0:	f04f 37ff 	mov.w	r7, #4294967295
 800bbc4:	e7ea      	b.n	800bb9c <__swbuf_r+0x6c>
 800bbc6:	bf00      	nop
 800bbc8:	0800c3dc 	.word	0x0800c3dc
 800bbcc:	0800c3fc 	.word	0x0800c3fc
 800bbd0:	0800c3bc 	.word	0x0800c3bc

0800bbd4 <_write_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	4608      	mov	r0, r1
 800bbda:	4611      	mov	r1, r2
 800bbdc:	2200      	movs	r2, #0
 800bbde:	4d05      	ldr	r5, [pc, #20]	; (800bbf4 <_write_r+0x20>)
 800bbe0:	602a      	str	r2, [r5, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	f7f5 f984 	bl	8000ef0 <_write>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	d102      	bne.n	800bbf2 <_write_r+0x1e>
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	b103      	cbz	r3, 800bbf2 <_write_r+0x1e>
 800bbf0:	6023      	str	r3, [r4, #0]
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	200015b4 	.word	0x200015b4

0800bbf8 <__swsetup_r>:
 800bbf8:	4b32      	ldr	r3, [pc, #200]	; (800bcc4 <__swsetup_r+0xcc>)
 800bbfa:	b570      	push	{r4, r5, r6, lr}
 800bbfc:	681d      	ldr	r5, [r3, #0]
 800bbfe:	4606      	mov	r6, r0
 800bc00:	460c      	mov	r4, r1
 800bc02:	b125      	cbz	r5, 800bc0e <__swsetup_r+0x16>
 800bc04:	69ab      	ldr	r3, [r5, #24]
 800bc06:	b913      	cbnz	r3, 800bc0e <__swsetup_r+0x16>
 800bc08:	4628      	mov	r0, r5
 800bc0a:	f7ff f9f9 	bl	800b000 <__sinit>
 800bc0e:	4b2e      	ldr	r3, [pc, #184]	; (800bcc8 <__swsetup_r+0xd0>)
 800bc10:	429c      	cmp	r4, r3
 800bc12:	d10f      	bne.n	800bc34 <__swsetup_r+0x3c>
 800bc14:	686c      	ldr	r4, [r5, #4]
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc1c:	0719      	lsls	r1, r3, #28
 800bc1e:	d42c      	bmi.n	800bc7a <__swsetup_r+0x82>
 800bc20:	06dd      	lsls	r5, r3, #27
 800bc22:	d411      	bmi.n	800bc48 <__swsetup_r+0x50>
 800bc24:	2309      	movs	r3, #9
 800bc26:	6033      	str	r3, [r6, #0]
 800bc28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc30:	81a3      	strh	r3, [r4, #12]
 800bc32:	e03e      	b.n	800bcb2 <__swsetup_r+0xba>
 800bc34:	4b25      	ldr	r3, [pc, #148]	; (800bccc <__swsetup_r+0xd4>)
 800bc36:	429c      	cmp	r4, r3
 800bc38:	d101      	bne.n	800bc3e <__swsetup_r+0x46>
 800bc3a:	68ac      	ldr	r4, [r5, #8]
 800bc3c:	e7eb      	b.n	800bc16 <__swsetup_r+0x1e>
 800bc3e:	4b24      	ldr	r3, [pc, #144]	; (800bcd0 <__swsetup_r+0xd8>)
 800bc40:	429c      	cmp	r4, r3
 800bc42:	bf08      	it	eq
 800bc44:	68ec      	ldreq	r4, [r5, #12]
 800bc46:	e7e6      	b.n	800bc16 <__swsetup_r+0x1e>
 800bc48:	0758      	lsls	r0, r3, #29
 800bc4a:	d512      	bpl.n	800bc72 <__swsetup_r+0x7a>
 800bc4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc4e:	b141      	cbz	r1, 800bc62 <__swsetup_r+0x6a>
 800bc50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc54:	4299      	cmp	r1, r3
 800bc56:	d002      	beq.n	800bc5e <__swsetup_r+0x66>
 800bc58:	4630      	mov	r0, r6
 800bc5a:	f000 f9b7 	bl	800bfcc <_free_r>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	6363      	str	r3, [r4, #52]	; 0x34
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc68:	81a3      	strh	r3, [r4, #12]
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	6063      	str	r3, [r4, #4]
 800bc6e:	6923      	ldr	r3, [r4, #16]
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	89a3      	ldrh	r3, [r4, #12]
 800bc74:	f043 0308 	orr.w	r3, r3, #8
 800bc78:	81a3      	strh	r3, [r4, #12]
 800bc7a:	6923      	ldr	r3, [r4, #16]
 800bc7c:	b94b      	cbnz	r3, 800bc92 <__swsetup_r+0x9a>
 800bc7e:	89a3      	ldrh	r3, [r4, #12]
 800bc80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc88:	d003      	beq.n	800bc92 <__swsetup_r+0x9a>
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	f000 f929 	bl	800bee4 <__smakebuf_r>
 800bc92:	89a0      	ldrh	r0, [r4, #12]
 800bc94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc98:	f010 0301 	ands.w	r3, r0, #1
 800bc9c:	d00a      	beq.n	800bcb4 <__swsetup_r+0xbc>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	60a3      	str	r3, [r4, #8]
 800bca2:	6963      	ldr	r3, [r4, #20]
 800bca4:	425b      	negs	r3, r3
 800bca6:	61a3      	str	r3, [r4, #24]
 800bca8:	6923      	ldr	r3, [r4, #16]
 800bcaa:	b943      	cbnz	r3, 800bcbe <__swsetup_r+0xc6>
 800bcac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcb0:	d1ba      	bne.n	800bc28 <__swsetup_r+0x30>
 800bcb2:	bd70      	pop	{r4, r5, r6, pc}
 800bcb4:	0781      	lsls	r1, r0, #30
 800bcb6:	bf58      	it	pl
 800bcb8:	6963      	ldrpl	r3, [r4, #20]
 800bcba:	60a3      	str	r3, [r4, #8]
 800bcbc:	e7f4      	b.n	800bca8 <__swsetup_r+0xb0>
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	e7f7      	b.n	800bcb2 <__swsetup_r+0xba>
 800bcc2:	bf00      	nop
 800bcc4:	2000018c 	.word	0x2000018c
 800bcc8:	0800c3dc 	.word	0x0800c3dc
 800bccc:	0800c3fc 	.word	0x0800c3fc
 800bcd0:	0800c3bc 	.word	0x0800c3bc

0800bcd4 <_close_r>:
 800bcd4:	b538      	push	{r3, r4, r5, lr}
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	4d05      	ldr	r5, [pc, #20]	; (800bcf0 <_close_r+0x1c>)
 800bcda:	4604      	mov	r4, r0
 800bcdc:	4608      	mov	r0, r1
 800bcde:	602b      	str	r3, [r5, #0]
 800bce0:	f7f6 fa65 	bl	80021ae <_close>
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	d102      	bne.n	800bcee <_close_r+0x1a>
 800bce8:	682b      	ldr	r3, [r5, #0]
 800bcea:	b103      	cbz	r3, 800bcee <_close_r+0x1a>
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	bd38      	pop	{r3, r4, r5, pc}
 800bcf0:	200015b4 	.word	0x200015b4

0800bcf4 <__sflush_r>:
 800bcf4:	898a      	ldrh	r2, [r1, #12]
 800bcf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfa:	4605      	mov	r5, r0
 800bcfc:	0710      	lsls	r0, r2, #28
 800bcfe:	460c      	mov	r4, r1
 800bd00:	d458      	bmi.n	800bdb4 <__sflush_r+0xc0>
 800bd02:	684b      	ldr	r3, [r1, #4]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	dc05      	bgt.n	800bd14 <__sflush_r+0x20>
 800bd08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	dc02      	bgt.n	800bd14 <__sflush_r+0x20>
 800bd0e:	2000      	movs	r0, #0
 800bd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd16:	2e00      	cmp	r6, #0
 800bd18:	d0f9      	beq.n	800bd0e <__sflush_r+0x1a>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd20:	682f      	ldr	r7, [r5, #0]
 800bd22:	602b      	str	r3, [r5, #0]
 800bd24:	d032      	beq.n	800bd8c <__sflush_r+0x98>
 800bd26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd28:	89a3      	ldrh	r3, [r4, #12]
 800bd2a:	075a      	lsls	r2, r3, #29
 800bd2c:	d505      	bpl.n	800bd3a <__sflush_r+0x46>
 800bd2e:	6863      	ldr	r3, [r4, #4]
 800bd30:	1ac0      	subs	r0, r0, r3
 800bd32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd34:	b10b      	cbz	r3, 800bd3a <__sflush_r+0x46>
 800bd36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd38:	1ac0      	subs	r0, r0, r3
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd40:	4628      	mov	r0, r5
 800bd42:	6a21      	ldr	r1, [r4, #32]
 800bd44:	47b0      	blx	r6
 800bd46:	1c43      	adds	r3, r0, #1
 800bd48:	89a3      	ldrh	r3, [r4, #12]
 800bd4a:	d106      	bne.n	800bd5a <__sflush_r+0x66>
 800bd4c:	6829      	ldr	r1, [r5, #0]
 800bd4e:	291d      	cmp	r1, #29
 800bd50:	d82c      	bhi.n	800bdac <__sflush_r+0xb8>
 800bd52:	4a2a      	ldr	r2, [pc, #168]	; (800bdfc <__sflush_r+0x108>)
 800bd54:	40ca      	lsrs	r2, r1
 800bd56:	07d6      	lsls	r6, r2, #31
 800bd58:	d528      	bpl.n	800bdac <__sflush_r+0xb8>
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	6062      	str	r2, [r4, #4]
 800bd5e:	6922      	ldr	r2, [r4, #16]
 800bd60:	04d9      	lsls	r1, r3, #19
 800bd62:	6022      	str	r2, [r4, #0]
 800bd64:	d504      	bpl.n	800bd70 <__sflush_r+0x7c>
 800bd66:	1c42      	adds	r2, r0, #1
 800bd68:	d101      	bne.n	800bd6e <__sflush_r+0x7a>
 800bd6a:	682b      	ldr	r3, [r5, #0]
 800bd6c:	b903      	cbnz	r3, 800bd70 <__sflush_r+0x7c>
 800bd6e:	6560      	str	r0, [r4, #84]	; 0x54
 800bd70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd72:	602f      	str	r7, [r5, #0]
 800bd74:	2900      	cmp	r1, #0
 800bd76:	d0ca      	beq.n	800bd0e <__sflush_r+0x1a>
 800bd78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd7c:	4299      	cmp	r1, r3
 800bd7e:	d002      	beq.n	800bd86 <__sflush_r+0x92>
 800bd80:	4628      	mov	r0, r5
 800bd82:	f000 f923 	bl	800bfcc <_free_r>
 800bd86:	2000      	movs	r0, #0
 800bd88:	6360      	str	r0, [r4, #52]	; 0x34
 800bd8a:	e7c1      	b.n	800bd10 <__sflush_r+0x1c>
 800bd8c:	6a21      	ldr	r1, [r4, #32]
 800bd8e:	2301      	movs	r3, #1
 800bd90:	4628      	mov	r0, r5
 800bd92:	47b0      	blx	r6
 800bd94:	1c41      	adds	r1, r0, #1
 800bd96:	d1c7      	bne.n	800bd28 <__sflush_r+0x34>
 800bd98:	682b      	ldr	r3, [r5, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d0c4      	beq.n	800bd28 <__sflush_r+0x34>
 800bd9e:	2b1d      	cmp	r3, #29
 800bda0:	d001      	beq.n	800bda6 <__sflush_r+0xb2>
 800bda2:	2b16      	cmp	r3, #22
 800bda4:	d101      	bne.n	800bdaa <__sflush_r+0xb6>
 800bda6:	602f      	str	r7, [r5, #0]
 800bda8:	e7b1      	b.n	800bd0e <__sflush_r+0x1a>
 800bdaa:	89a3      	ldrh	r3, [r4, #12]
 800bdac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb0:	81a3      	strh	r3, [r4, #12]
 800bdb2:	e7ad      	b.n	800bd10 <__sflush_r+0x1c>
 800bdb4:	690f      	ldr	r7, [r1, #16]
 800bdb6:	2f00      	cmp	r7, #0
 800bdb8:	d0a9      	beq.n	800bd0e <__sflush_r+0x1a>
 800bdba:	0793      	lsls	r3, r2, #30
 800bdbc:	bf18      	it	ne
 800bdbe:	2300      	movne	r3, #0
 800bdc0:	680e      	ldr	r6, [r1, #0]
 800bdc2:	bf08      	it	eq
 800bdc4:	694b      	ldreq	r3, [r1, #20]
 800bdc6:	eba6 0807 	sub.w	r8, r6, r7
 800bdca:	600f      	str	r7, [r1, #0]
 800bdcc:	608b      	str	r3, [r1, #8]
 800bdce:	f1b8 0f00 	cmp.w	r8, #0
 800bdd2:	dd9c      	ble.n	800bd0e <__sflush_r+0x1a>
 800bdd4:	4643      	mov	r3, r8
 800bdd6:	463a      	mov	r2, r7
 800bdd8:	4628      	mov	r0, r5
 800bdda:	6a21      	ldr	r1, [r4, #32]
 800bddc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bdde:	47b0      	blx	r6
 800bde0:	2800      	cmp	r0, #0
 800bde2:	dc06      	bgt.n	800bdf2 <__sflush_r+0xfe>
 800bde4:	89a3      	ldrh	r3, [r4, #12]
 800bde6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdee:	81a3      	strh	r3, [r4, #12]
 800bdf0:	e78e      	b.n	800bd10 <__sflush_r+0x1c>
 800bdf2:	4407      	add	r7, r0
 800bdf4:	eba8 0800 	sub.w	r8, r8, r0
 800bdf8:	e7e9      	b.n	800bdce <__sflush_r+0xda>
 800bdfa:	bf00      	nop
 800bdfc:	20400001 	.word	0x20400001

0800be00 <_fflush_r>:
 800be00:	b538      	push	{r3, r4, r5, lr}
 800be02:	690b      	ldr	r3, [r1, #16]
 800be04:	4605      	mov	r5, r0
 800be06:	460c      	mov	r4, r1
 800be08:	b913      	cbnz	r3, 800be10 <_fflush_r+0x10>
 800be0a:	2500      	movs	r5, #0
 800be0c:	4628      	mov	r0, r5
 800be0e:	bd38      	pop	{r3, r4, r5, pc}
 800be10:	b118      	cbz	r0, 800be1a <_fflush_r+0x1a>
 800be12:	6983      	ldr	r3, [r0, #24]
 800be14:	b90b      	cbnz	r3, 800be1a <_fflush_r+0x1a>
 800be16:	f7ff f8f3 	bl	800b000 <__sinit>
 800be1a:	4b14      	ldr	r3, [pc, #80]	; (800be6c <_fflush_r+0x6c>)
 800be1c:	429c      	cmp	r4, r3
 800be1e:	d11b      	bne.n	800be58 <_fflush_r+0x58>
 800be20:	686c      	ldr	r4, [r5, #4]
 800be22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d0ef      	beq.n	800be0a <_fflush_r+0xa>
 800be2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be2c:	07d0      	lsls	r0, r2, #31
 800be2e:	d404      	bmi.n	800be3a <_fflush_r+0x3a>
 800be30:	0599      	lsls	r1, r3, #22
 800be32:	d402      	bmi.n	800be3a <_fflush_r+0x3a>
 800be34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be36:	f7ff f981 	bl	800b13c <__retarget_lock_acquire_recursive>
 800be3a:	4628      	mov	r0, r5
 800be3c:	4621      	mov	r1, r4
 800be3e:	f7ff ff59 	bl	800bcf4 <__sflush_r>
 800be42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be44:	4605      	mov	r5, r0
 800be46:	07da      	lsls	r2, r3, #31
 800be48:	d4e0      	bmi.n	800be0c <_fflush_r+0xc>
 800be4a:	89a3      	ldrh	r3, [r4, #12]
 800be4c:	059b      	lsls	r3, r3, #22
 800be4e:	d4dd      	bmi.n	800be0c <_fflush_r+0xc>
 800be50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be52:	f7ff f974 	bl	800b13e <__retarget_lock_release_recursive>
 800be56:	e7d9      	b.n	800be0c <_fflush_r+0xc>
 800be58:	4b05      	ldr	r3, [pc, #20]	; (800be70 <_fflush_r+0x70>)
 800be5a:	429c      	cmp	r4, r3
 800be5c:	d101      	bne.n	800be62 <_fflush_r+0x62>
 800be5e:	68ac      	ldr	r4, [r5, #8]
 800be60:	e7df      	b.n	800be22 <_fflush_r+0x22>
 800be62:	4b04      	ldr	r3, [pc, #16]	; (800be74 <_fflush_r+0x74>)
 800be64:	429c      	cmp	r4, r3
 800be66:	bf08      	it	eq
 800be68:	68ec      	ldreq	r4, [r5, #12]
 800be6a:	e7da      	b.n	800be22 <_fflush_r+0x22>
 800be6c:	0800c3dc 	.word	0x0800c3dc
 800be70:	0800c3fc 	.word	0x0800c3fc
 800be74:	0800c3bc 	.word	0x0800c3bc

0800be78 <_lseek_r>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	4604      	mov	r4, r0
 800be7c:	4608      	mov	r0, r1
 800be7e:	4611      	mov	r1, r2
 800be80:	2200      	movs	r2, #0
 800be82:	4d05      	ldr	r5, [pc, #20]	; (800be98 <_lseek_r+0x20>)
 800be84:	602a      	str	r2, [r5, #0]
 800be86:	461a      	mov	r2, r3
 800be88:	f7f6 f9b5 	bl	80021f6 <_lseek>
 800be8c:	1c43      	adds	r3, r0, #1
 800be8e:	d102      	bne.n	800be96 <_lseek_r+0x1e>
 800be90:	682b      	ldr	r3, [r5, #0]
 800be92:	b103      	cbz	r3, 800be96 <_lseek_r+0x1e>
 800be94:	6023      	str	r3, [r4, #0]
 800be96:	bd38      	pop	{r3, r4, r5, pc}
 800be98:	200015b4 	.word	0x200015b4

0800be9c <__swhatbuf_r>:
 800be9c:	b570      	push	{r4, r5, r6, lr}
 800be9e:	460e      	mov	r6, r1
 800bea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea4:	4614      	mov	r4, r2
 800bea6:	2900      	cmp	r1, #0
 800bea8:	461d      	mov	r5, r3
 800beaa:	b096      	sub	sp, #88	; 0x58
 800beac:	da07      	bge.n	800bebe <__swhatbuf_r+0x22>
 800beae:	2300      	movs	r3, #0
 800beb0:	602b      	str	r3, [r5, #0]
 800beb2:	89b3      	ldrh	r3, [r6, #12]
 800beb4:	061a      	lsls	r2, r3, #24
 800beb6:	d410      	bmi.n	800beda <__swhatbuf_r+0x3e>
 800beb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bebc:	e00e      	b.n	800bedc <__swhatbuf_r+0x40>
 800bebe:	466a      	mov	r2, sp
 800bec0:	f000 f908 	bl	800c0d4 <_fstat_r>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	dbf2      	blt.n	800beae <__swhatbuf_r+0x12>
 800bec8:	9a01      	ldr	r2, [sp, #4]
 800beca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bece:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bed2:	425a      	negs	r2, r3
 800bed4:	415a      	adcs	r2, r3
 800bed6:	602a      	str	r2, [r5, #0]
 800bed8:	e7ee      	b.n	800beb8 <__swhatbuf_r+0x1c>
 800beda:	2340      	movs	r3, #64	; 0x40
 800bedc:	2000      	movs	r0, #0
 800bede:	6023      	str	r3, [r4, #0]
 800bee0:	b016      	add	sp, #88	; 0x58
 800bee2:	bd70      	pop	{r4, r5, r6, pc}

0800bee4 <__smakebuf_r>:
 800bee4:	898b      	ldrh	r3, [r1, #12]
 800bee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bee8:	079d      	lsls	r5, r3, #30
 800beea:	4606      	mov	r6, r0
 800beec:	460c      	mov	r4, r1
 800beee:	d507      	bpl.n	800bf00 <__smakebuf_r+0x1c>
 800bef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bef4:	6023      	str	r3, [r4, #0]
 800bef6:	6123      	str	r3, [r4, #16]
 800bef8:	2301      	movs	r3, #1
 800befa:	6163      	str	r3, [r4, #20]
 800befc:	b002      	add	sp, #8
 800befe:	bd70      	pop	{r4, r5, r6, pc}
 800bf00:	466a      	mov	r2, sp
 800bf02:	ab01      	add	r3, sp, #4
 800bf04:	f7ff ffca 	bl	800be9c <__swhatbuf_r>
 800bf08:	9900      	ldr	r1, [sp, #0]
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	f7ff f917 	bl	800b140 <_malloc_r>
 800bf12:	b948      	cbnz	r0, 800bf28 <__smakebuf_r+0x44>
 800bf14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf18:	059a      	lsls	r2, r3, #22
 800bf1a:	d4ef      	bmi.n	800befc <__smakebuf_r+0x18>
 800bf1c:	f023 0303 	bic.w	r3, r3, #3
 800bf20:	f043 0302 	orr.w	r3, r3, #2
 800bf24:	81a3      	strh	r3, [r4, #12]
 800bf26:	e7e3      	b.n	800bef0 <__smakebuf_r+0xc>
 800bf28:	4b0d      	ldr	r3, [pc, #52]	; (800bf60 <__smakebuf_r+0x7c>)
 800bf2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf2c:	89a3      	ldrh	r3, [r4, #12]
 800bf2e:	6020      	str	r0, [r4, #0]
 800bf30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf34:	81a3      	strh	r3, [r4, #12]
 800bf36:	9b00      	ldr	r3, [sp, #0]
 800bf38:	6120      	str	r0, [r4, #16]
 800bf3a:	6163      	str	r3, [r4, #20]
 800bf3c:	9b01      	ldr	r3, [sp, #4]
 800bf3e:	b15b      	cbz	r3, 800bf58 <__smakebuf_r+0x74>
 800bf40:	4630      	mov	r0, r6
 800bf42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf46:	f000 f8d7 	bl	800c0f8 <_isatty_r>
 800bf4a:	b128      	cbz	r0, 800bf58 <__smakebuf_r+0x74>
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	f023 0303 	bic.w	r3, r3, #3
 800bf52:	f043 0301 	orr.w	r3, r3, #1
 800bf56:	81a3      	strh	r3, [r4, #12]
 800bf58:	89a0      	ldrh	r0, [r4, #12]
 800bf5a:	4305      	orrs	r5, r0
 800bf5c:	81a5      	strh	r5, [r4, #12]
 800bf5e:	e7cd      	b.n	800befc <__smakebuf_r+0x18>
 800bf60:	0800af99 	.word	0x0800af99

0800bf64 <memchr>:
 800bf64:	4603      	mov	r3, r0
 800bf66:	b510      	push	{r4, lr}
 800bf68:	b2c9      	uxtb	r1, r1
 800bf6a:	4402      	add	r2, r0
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	4618      	mov	r0, r3
 800bf70:	d101      	bne.n	800bf76 <memchr+0x12>
 800bf72:	2000      	movs	r0, #0
 800bf74:	e003      	b.n	800bf7e <memchr+0x1a>
 800bf76:	7804      	ldrb	r4, [r0, #0]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	428c      	cmp	r4, r1
 800bf7c:	d1f6      	bne.n	800bf6c <memchr+0x8>
 800bf7e:	bd10      	pop	{r4, pc}

0800bf80 <memmove>:
 800bf80:	4288      	cmp	r0, r1
 800bf82:	b510      	push	{r4, lr}
 800bf84:	eb01 0402 	add.w	r4, r1, r2
 800bf88:	d902      	bls.n	800bf90 <memmove+0x10>
 800bf8a:	4284      	cmp	r4, r0
 800bf8c:	4623      	mov	r3, r4
 800bf8e:	d807      	bhi.n	800bfa0 <memmove+0x20>
 800bf90:	1e43      	subs	r3, r0, #1
 800bf92:	42a1      	cmp	r1, r4
 800bf94:	d008      	beq.n	800bfa8 <memmove+0x28>
 800bf96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf9e:	e7f8      	b.n	800bf92 <memmove+0x12>
 800bfa0:	4601      	mov	r1, r0
 800bfa2:	4402      	add	r2, r0
 800bfa4:	428a      	cmp	r2, r1
 800bfa6:	d100      	bne.n	800bfaa <memmove+0x2a>
 800bfa8:	bd10      	pop	{r4, pc}
 800bfaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfb2:	e7f7      	b.n	800bfa4 <memmove+0x24>

0800bfb4 <__malloc_lock>:
 800bfb4:	4801      	ldr	r0, [pc, #4]	; (800bfbc <__malloc_lock+0x8>)
 800bfb6:	f7ff b8c1 	b.w	800b13c <__retarget_lock_acquire_recursive>
 800bfba:	bf00      	nop
 800bfbc:	200015ac 	.word	0x200015ac

0800bfc0 <__malloc_unlock>:
 800bfc0:	4801      	ldr	r0, [pc, #4]	; (800bfc8 <__malloc_unlock+0x8>)
 800bfc2:	f7ff b8bc 	b.w	800b13e <__retarget_lock_release_recursive>
 800bfc6:	bf00      	nop
 800bfc8:	200015ac 	.word	0x200015ac

0800bfcc <_free_r>:
 800bfcc:	b538      	push	{r3, r4, r5, lr}
 800bfce:	4605      	mov	r5, r0
 800bfd0:	2900      	cmp	r1, #0
 800bfd2:	d043      	beq.n	800c05c <_free_r+0x90>
 800bfd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfd8:	1f0c      	subs	r4, r1, #4
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	bfb8      	it	lt
 800bfde:	18e4      	addlt	r4, r4, r3
 800bfe0:	f7ff ffe8 	bl	800bfb4 <__malloc_lock>
 800bfe4:	4a1e      	ldr	r2, [pc, #120]	; (800c060 <_free_r+0x94>)
 800bfe6:	6813      	ldr	r3, [r2, #0]
 800bfe8:	4610      	mov	r0, r2
 800bfea:	b933      	cbnz	r3, 800bffa <_free_r+0x2e>
 800bfec:	6063      	str	r3, [r4, #4]
 800bfee:	6014      	str	r4, [r2, #0]
 800bff0:	4628      	mov	r0, r5
 800bff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bff6:	f7ff bfe3 	b.w	800bfc0 <__malloc_unlock>
 800bffa:	42a3      	cmp	r3, r4
 800bffc:	d90a      	bls.n	800c014 <_free_r+0x48>
 800bffe:	6821      	ldr	r1, [r4, #0]
 800c000:	1862      	adds	r2, r4, r1
 800c002:	4293      	cmp	r3, r2
 800c004:	bf01      	itttt	eq
 800c006:	681a      	ldreq	r2, [r3, #0]
 800c008:	685b      	ldreq	r3, [r3, #4]
 800c00a:	1852      	addeq	r2, r2, r1
 800c00c:	6022      	streq	r2, [r4, #0]
 800c00e:	6063      	str	r3, [r4, #4]
 800c010:	6004      	str	r4, [r0, #0]
 800c012:	e7ed      	b.n	800bff0 <_free_r+0x24>
 800c014:	461a      	mov	r2, r3
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	b10b      	cbz	r3, 800c01e <_free_r+0x52>
 800c01a:	42a3      	cmp	r3, r4
 800c01c:	d9fa      	bls.n	800c014 <_free_r+0x48>
 800c01e:	6811      	ldr	r1, [r2, #0]
 800c020:	1850      	adds	r0, r2, r1
 800c022:	42a0      	cmp	r0, r4
 800c024:	d10b      	bne.n	800c03e <_free_r+0x72>
 800c026:	6820      	ldr	r0, [r4, #0]
 800c028:	4401      	add	r1, r0
 800c02a:	1850      	adds	r0, r2, r1
 800c02c:	4283      	cmp	r3, r0
 800c02e:	6011      	str	r1, [r2, #0]
 800c030:	d1de      	bne.n	800bff0 <_free_r+0x24>
 800c032:	6818      	ldr	r0, [r3, #0]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	4401      	add	r1, r0
 800c038:	6011      	str	r1, [r2, #0]
 800c03a:	6053      	str	r3, [r2, #4]
 800c03c:	e7d8      	b.n	800bff0 <_free_r+0x24>
 800c03e:	d902      	bls.n	800c046 <_free_r+0x7a>
 800c040:	230c      	movs	r3, #12
 800c042:	602b      	str	r3, [r5, #0]
 800c044:	e7d4      	b.n	800bff0 <_free_r+0x24>
 800c046:	6820      	ldr	r0, [r4, #0]
 800c048:	1821      	adds	r1, r4, r0
 800c04a:	428b      	cmp	r3, r1
 800c04c:	bf01      	itttt	eq
 800c04e:	6819      	ldreq	r1, [r3, #0]
 800c050:	685b      	ldreq	r3, [r3, #4]
 800c052:	1809      	addeq	r1, r1, r0
 800c054:	6021      	streq	r1, [r4, #0]
 800c056:	6063      	str	r3, [r4, #4]
 800c058:	6054      	str	r4, [r2, #4]
 800c05a:	e7c9      	b.n	800bff0 <_free_r+0x24>
 800c05c:	bd38      	pop	{r3, r4, r5, pc}
 800c05e:	bf00      	nop
 800c060:	200004ac 	.word	0x200004ac

0800c064 <_realloc_r>:
 800c064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c066:	4607      	mov	r7, r0
 800c068:	4614      	mov	r4, r2
 800c06a:	460e      	mov	r6, r1
 800c06c:	b921      	cbnz	r1, 800c078 <_realloc_r+0x14>
 800c06e:	4611      	mov	r1, r2
 800c070:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c074:	f7ff b864 	b.w	800b140 <_malloc_r>
 800c078:	b922      	cbnz	r2, 800c084 <_realloc_r+0x20>
 800c07a:	f7ff ffa7 	bl	800bfcc <_free_r>
 800c07e:	4625      	mov	r5, r4
 800c080:	4628      	mov	r0, r5
 800c082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c084:	f000 f848 	bl	800c118 <_malloc_usable_size_r>
 800c088:	42a0      	cmp	r0, r4
 800c08a:	d20f      	bcs.n	800c0ac <_realloc_r+0x48>
 800c08c:	4621      	mov	r1, r4
 800c08e:	4638      	mov	r0, r7
 800c090:	f7ff f856 	bl	800b140 <_malloc_r>
 800c094:	4605      	mov	r5, r0
 800c096:	2800      	cmp	r0, #0
 800c098:	d0f2      	beq.n	800c080 <_realloc_r+0x1c>
 800c09a:	4631      	mov	r1, r6
 800c09c:	4622      	mov	r2, r4
 800c09e:	f7fe fec7 	bl	800ae30 <memcpy>
 800c0a2:	4631      	mov	r1, r6
 800c0a4:	4638      	mov	r0, r7
 800c0a6:	f7ff ff91 	bl	800bfcc <_free_r>
 800c0aa:	e7e9      	b.n	800c080 <_realloc_r+0x1c>
 800c0ac:	4635      	mov	r5, r6
 800c0ae:	e7e7      	b.n	800c080 <_realloc_r+0x1c>

0800c0b0 <_read_r>:
 800c0b0:	b538      	push	{r3, r4, r5, lr}
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	4608      	mov	r0, r1
 800c0b6:	4611      	mov	r1, r2
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	4d05      	ldr	r5, [pc, #20]	; (800c0d0 <_read_r+0x20>)
 800c0bc:	602a      	str	r2, [r5, #0]
 800c0be:	461a      	mov	r2, r3
 800c0c0:	f7f6 f858 	bl	8002174 <_read>
 800c0c4:	1c43      	adds	r3, r0, #1
 800c0c6:	d102      	bne.n	800c0ce <_read_r+0x1e>
 800c0c8:	682b      	ldr	r3, [r5, #0]
 800c0ca:	b103      	cbz	r3, 800c0ce <_read_r+0x1e>
 800c0cc:	6023      	str	r3, [r4, #0]
 800c0ce:	bd38      	pop	{r3, r4, r5, pc}
 800c0d0:	200015b4 	.word	0x200015b4

0800c0d4 <_fstat_r>:
 800c0d4:	b538      	push	{r3, r4, r5, lr}
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	4d06      	ldr	r5, [pc, #24]	; (800c0f4 <_fstat_r+0x20>)
 800c0da:	4604      	mov	r4, r0
 800c0dc:	4608      	mov	r0, r1
 800c0de:	4611      	mov	r1, r2
 800c0e0:	602b      	str	r3, [r5, #0]
 800c0e2:	f7f6 f86f 	bl	80021c4 <_fstat>
 800c0e6:	1c43      	adds	r3, r0, #1
 800c0e8:	d102      	bne.n	800c0f0 <_fstat_r+0x1c>
 800c0ea:	682b      	ldr	r3, [r5, #0]
 800c0ec:	b103      	cbz	r3, 800c0f0 <_fstat_r+0x1c>
 800c0ee:	6023      	str	r3, [r4, #0]
 800c0f0:	bd38      	pop	{r3, r4, r5, pc}
 800c0f2:	bf00      	nop
 800c0f4:	200015b4 	.word	0x200015b4

0800c0f8 <_isatty_r>:
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	4d05      	ldr	r5, [pc, #20]	; (800c114 <_isatty_r+0x1c>)
 800c0fe:	4604      	mov	r4, r0
 800c100:	4608      	mov	r0, r1
 800c102:	602b      	str	r3, [r5, #0]
 800c104:	f7f6 f86d 	bl	80021e2 <_isatty>
 800c108:	1c43      	adds	r3, r0, #1
 800c10a:	d102      	bne.n	800c112 <_isatty_r+0x1a>
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	b103      	cbz	r3, 800c112 <_isatty_r+0x1a>
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	bd38      	pop	{r3, r4, r5, pc}
 800c114:	200015b4 	.word	0x200015b4

0800c118 <_malloc_usable_size_r>:
 800c118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c11c:	1f18      	subs	r0, r3, #4
 800c11e:	2b00      	cmp	r3, #0
 800c120:	bfbc      	itt	lt
 800c122:	580b      	ldrlt	r3, [r1, r0]
 800c124:	18c0      	addlt	r0, r0, r3
 800c126:	4770      	bx	lr

0800c128 <floor>:
 800c128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c12c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c130:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c134:	2e13      	cmp	r6, #19
 800c136:	4602      	mov	r2, r0
 800c138:	460b      	mov	r3, r1
 800c13a:	4607      	mov	r7, r0
 800c13c:	460c      	mov	r4, r1
 800c13e:	4605      	mov	r5, r0
 800c140:	dc34      	bgt.n	800c1ac <floor+0x84>
 800c142:	2e00      	cmp	r6, #0
 800c144:	da15      	bge.n	800c172 <floor+0x4a>
 800c146:	a334      	add	r3, pc, #208	; (adr r3, 800c218 <floor+0xf0>)
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	f7f4 f80e 	bl	800016c <__adddf3>
 800c150:	2200      	movs	r2, #0
 800c152:	2300      	movs	r3, #0
 800c154:	f7f4 fa3e 	bl	80005d4 <__aeabi_dcmpgt>
 800c158:	b140      	cbz	r0, 800c16c <floor+0x44>
 800c15a:	2c00      	cmp	r4, #0
 800c15c:	da59      	bge.n	800c212 <floor+0xea>
 800c15e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c162:	ea57 0503 	orrs.w	r5, r7, r3
 800c166:	d001      	beq.n	800c16c <floor+0x44>
 800c168:	2500      	movs	r5, #0
 800c16a:	4c2d      	ldr	r4, [pc, #180]	; (800c220 <floor+0xf8>)
 800c16c:	4623      	mov	r3, r4
 800c16e:	462f      	mov	r7, r5
 800c170:	e025      	b.n	800c1be <floor+0x96>
 800c172:	4a2c      	ldr	r2, [pc, #176]	; (800c224 <floor+0xfc>)
 800c174:	fa42 f806 	asr.w	r8, r2, r6
 800c178:	ea01 0208 	and.w	r2, r1, r8
 800c17c:	4302      	orrs	r2, r0
 800c17e:	d01e      	beq.n	800c1be <floor+0x96>
 800c180:	a325      	add	r3, pc, #148	; (adr r3, 800c218 <floor+0xf0>)
 800c182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c186:	f7f3 fff1 	bl	800016c <__adddf3>
 800c18a:	2200      	movs	r2, #0
 800c18c:	2300      	movs	r3, #0
 800c18e:	f7f4 fa21 	bl	80005d4 <__aeabi_dcmpgt>
 800c192:	2800      	cmp	r0, #0
 800c194:	d0ea      	beq.n	800c16c <floor+0x44>
 800c196:	2c00      	cmp	r4, #0
 800c198:	bfbe      	ittt	lt
 800c19a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c19e:	fa43 f606 	asrlt.w	r6, r3, r6
 800c1a2:	19a4      	addlt	r4, r4, r6
 800c1a4:	2500      	movs	r5, #0
 800c1a6:	ea24 0408 	bic.w	r4, r4, r8
 800c1aa:	e7df      	b.n	800c16c <floor+0x44>
 800c1ac:	2e33      	cmp	r6, #51	; 0x33
 800c1ae:	dd0a      	ble.n	800c1c6 <floor+0x9e>
 800c1b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c1b4:	d103      	bne.n	800c1be <floor+0x96>
 800c1b6:	f7f3 ffd9 	bl	800016c <__adddf3>
 800c1ba:	4607      	mov	r7, r0
 800c1bc:	460b      	mov	r3, r1
 800c1be:	4638      	mov	r0, r7
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ca:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c1ce:	fa22 f808 	lsr.w	r8, r2, r8
 800c1d2:	ea18 0f00 	tst.w	r8, r0
 800c1d6:	d0f2      	beq.n	800c1be <floor+0x96>
 800c1d8:	a30f      	add	r3, pc, #60	; (adr r3, 800c218 <floor+0xf0>)
 800c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1de:	f7f3 ffc5 	bl	800016c <__adddf3>
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	f7f4 f9f5 	bl	80005d4 <__aeabi_dcmpgt>
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d0be      	beq.n	800c16c <floor+0x44>
 800c1ee:	2c00      	cmp	r4, #0
 800c1f0:	da02      	bge.n	800c1f8 <floor+0xd0>
 800c1f2:	2e14      	cmp	r6, #20
 800c1f4:	d103      	bne.n	800c1fe <floor+0xd6>
 800c1f6:	3401      	adds	r4, #1
 800c1f8:	ea25 0508 	bic.w	r5, r5, r8
 800c1fc:	e7b6      	b.n	800c16c <floor+0x44>
 800c1fe:	2301      	movs	r3, #1
 800c200:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c204:	fa03 f606 	lsl.w	r6, r3, r6
 800c208:	4435      	add	r5, r6
 800c20a:	42bd      	cmp	r5, r7
 800c20c:	bf38      	it	cc
 800c20e:	18e4      	addcc	r4, r4, r3
 800c210:	e7f2      	b.n	800c1f8 <floor+0xd0>
 800c212:	2500      	movs	r5, #0
 800c214:	462c      	mov	r4, r5
 800c216:	e7a9      	b.n	800c16c <floor+0x44>
 800c218:	8800759c 	.word	0x8800759c
 800c21c:	7e37e43c 	.word	0x7e37e43c
 800c220:	bff00000 	.word	0xbff00000
 800c224:	000fffff 	.word	0x000fffff

0800c228 <_init>:
 800c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22a:	bf00      	nop
 800c22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c22e:	bc08      	pop	{r3}
 800c230:	469e      	mov	lr, r3
 800c232:	4770      	bx	lr

0800c234 <_fini>:
 800c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c236:	bf00      	nop
 800c238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c23a:	bc08      	pop	{r3}
 800c23c:	469e      	mov	lr, r3
 800c23e:	4770      	bx	lr
