
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800c5f8  0800c5f8  0001c5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c810  0800c810  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800c810  0800c810  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c810  0800c810  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c810  0800c810  0001c810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c814  0800c814  0001c814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800c818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b8  20000208  0800ca1c  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015c0  0800ca1c  000215c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc3f  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a57  00000000  00000000  0003fe6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  000448c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  00045f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd5e  00000000  00000000  00047460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be65  00000000  00000000  000651be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097ef0  00000000  00000000  00081023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118f13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006958  00000000  00000000  00118f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c5e0 	.word	0x0800c5e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800c5e0 	.word	0x0800c5e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_frsub>:
 8000628:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800062c:	e002      	b.n	8000634 <__addsf3>
 800062e:	bf00      	nop

08000630 <__aeabi_fsub>:
 8000630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000634 <__addsf3>:
 8000634:	0042      	lsls	r2, r0, #1
 8000636:	bf1f      	itttt	ne
 8000638:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800063c:	ea92 0f03 	teqne	r2, r3
 8000640:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000644:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000648:	d06a      	beq.n	8000720 <__addsf3+0xec>
 800064a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800064e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000652:	bfc1      	itttt	gt
 8000654:	18d2      	addgt	r2, r2, r3
 8000656:	4041      	eorgt	r1, r0
 8000658:	4048      	eorgt	r0, r1
 800065a:	4041      	eorgt	r1, r0
 800065c:	bfb8      	it	lt
 800065e:	425b      	neglt	r3, r3
 8000660:	2b19      	cmp	r3, #25
 8000662:	bf88      	it	hi
 8000664:	4770      	bxhi	lr
 8000666:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800066a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000672:	bf18      	it	ne
 8000674:	4240      	negne	r0, r0
 8000676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800067a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800067e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000682:	bf18      	it	ne
 8000684:	4249      	negne	r1, r1
 8000686:	ea92 0f03 	teq	r2, r3
 800068a:	d03f      	beq.n	800070c <__addsf3+0xd8>
 800068c:	f1a2 0201 	sub.w	r2, r2, #1
 8000690:	fa41 fc03 	asr.w	ip, r1, r3
 8000694:	eb10 000c 	adds.w	r0, r0, ip
 8000698:	f1c3 0320 	rsb	r3, r3, #32
 800069c:	fa01 f103 	lsl.w	r1, r1, r3
 80006a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a4:	d502      	bpl.n	80006ac <__addsf3+0x78>
 80006a6:	4249      	negs	r1, r1
 80006a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006b0:	d313      	bcc.n	80006da <__addsf3+0xa6>
 80006b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b6:	d306      	bcc.n	80006c6 <__addsf3+0x92>
 80006b8:	0840      	lsrs	r0, r0, #1
 80006ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80006be:	f102 0201 	add.w	r2, r2, #1
 80006c2:	2afe      	cmp	r2, #254	; 0xfe
 80006c4:	d251      	bcs.n	800076a <__addsf3+0x136>
 80006c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ce:	bf08      	it	eq
 80006d0:	f020 0001 	biceq.w	r0, r0, #1
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	4770      	bx	lr
 80006da:	0049      	lsls	r1, r1, #1
 80006dc:	eb40 0000 	adc.w	r0, r0, r0
 80006e0:	3a01      	subs	r2, #1
 80006e2:	bf28      	it	cs
 80006e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006e8:	d2ed      	bcs.n	80006c6 <__addsf3+0x92>
 80006ea:	fab0 fc80 	clz	ip, r0
 80006ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80006f2:	ebb2 020c 	subs.w	r2, r2, ip
 80006f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006fa:	bfaa      	itet	ge
 80006fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000700:	4252      	neglt	r2, r2
 8000702:	4318      	orrge	r0, r3
 8000704:	bfbc      	itt	lt
 8000706:	40d0      	lsrlt	r0, r2
 8000708:	4318      	orrlt	r0, r3
 800070a:	4770      	bx	lr
 800070c:	f092 0f00 	teq	r2, #0
 8000710:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000714:	bf06      	itte	eq
 8000716:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800071a:	3201      	addeq	r2, #1
 800071c:	3b01      	subne	r3, #1
 800071e:	e7b5      	b.n	800068c <__addsf3+0x58>
 8000720:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000724:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000728:	bf18      	it	ne
 800072a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800072e:	d021      	beq.n	8000774 <__addsf3+0x140>
 8000730:	ea92 0f03 	teq	r2, r3
 8000734:	d004      	beq.n	8000740 <__addsf3+0x10c>
 8000736:	f092 0f00 	teq	r2, #0
 800073a:	bf08      	it	eq
 800073c:	4608      	moveq	r0, r1
 800073e:	4770      	bx	lr
 8000740:	ea90 0f01 	teq	r0, r1
 8000744:	bf1c      	itt	ne
 8000746:	2000      	movne	r0, #0
 8000748:	4770      	bxne	lr
 800074a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800074e:	d104      	bne.n	800075a <__addsf3+0x126>
 8000750:	0040      	lsls	r0, r0, #1
 8000752:	bf28      	it	cs
 8000754:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000758:	4770      	bx	lr
 800075a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800075e:	bf3c      	itt	cc
 8000760:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000764:	4770      	bxcc	lr
 8000766:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800076a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800076e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000772:	4770      	bx	lr
 8000774:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000778:	bf16      	itet	ne
 800077a:	4608      	movne	r0, r1
 800077c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000780:	4601      	movne	r1, r0
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	bf06      	itte	eq
 8000786:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800078a:	ea90 0f01 	teqeq	r0, r1
 800078e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000792:	4770      	bx	lr

08000794 <__aeabi_ui2f>:
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	e004      	b.n	80007a4 <__aeabi_i2f+0x8>
 800079a:	bf00      	nop

0800079c <__aeabi_i2f>:
 800079c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	ea5f 0c00 	movs.w	ip, r0
 80007a8:	bf08      	it	eq
 80007aa:	4770      	bxeq	lr
 80007ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007b0:	4601      	mov	r1, r0
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	e01c      	b.n	80007f2 <__aeabi_l2f+0x2a>

080007b8 <__aeabi_ul2f>:
 80007b8:	ea50 0201 	orrs.w	r2, r0, r1
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e00a      	b.n	80007dc <__aeabi_l2f+0x14>
 80007c6:	bf00      	nop

080007c8 <__aeabi_l2f>:
 80007c8:	ea50 0201 	orrs.w	r2, r0, r1
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007d4:	d502      	bpl.n	80007dc <__aeabi_l2f+0x14>
 80007d6:	4240      	negs	r0, r0
 80007d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007dc:	ea5f 0c01 	movs.w	ip, r1
 80007e0:	bf02      	ittt	eq
 80007e2:	4684      	moveq	ip, r0
 80007e4:	4601      	moveq	r1, r0
 80007e6:	2000      	moveq	r0, #0
 80007e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ec:	bf08      	it	eq
 80007ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007f6:	fabc f28c 	clz	r2, ip
 80007fa:	3a08      	subs	r2, #8
 80007fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000800:	db10      	blt.n	8000824 <__aeabi_l2f+0x5c>
 8000802:	fa01 fc02 	lsl.w	ip, r1, r2
 8000806:	4463      	add	r3, ip
 8000808:	fa00 fc02 	lsl.w	ip, r0, r2
 800080c:	f1c2 0220 	rsb	r2, r2, #32
 8000810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000814:	fa20 f202 	lsr.w	r2, r0, r2
 8000818:	eb43 0002 	adc.w	r0, r3, r2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f102 0220 	add.w	r2, r2, #32
 8000828:	fa01 fc02 	lsl.w	ip, r1, r2
 800082c:	f1c2 0220 	rsb	r2, r2, #32
 8000830:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000834:	fa21 f202 	lsr.w	r2, r1, r2
 8000838:	eb43 0002 	adc.w	r0, r3, r2
 800083c:	bf08      	it	eq
 800083e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000842:	4770      	bx	lr

08000844 <__aeabi_fmul>:
 8000844:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000848:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800084c:	bf1e      	ittt	ne
 800084e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000852:	ea92 0f0c 	teqne	r2, ip
 8000856:	ea93 0f0c 	teqne	r3, ip
 800085a:	d06f      	beq.n	800093c <__aeabi_fmul+0xf8>
 800085c:	441a      	add	r2, r3
 800085e:	ea80 0c01 	eor.w	ip, r0, r1
 8000862:	0240      	lsls	r0, r0, #9
 8000864:	bf18      	it	ne
 8000866:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800086a:	d01e      	beq.n	80008aa <__aeabi_fmul+0x66>
 800086c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000870:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000874:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000878:	fba0 3101 	umull	r3, r1, r0, r1
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000884:	bf3e      	ittt	cc
 8000886:	0049      	lslcc	r1, r1, #1
 8000888:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800088c:	005b      	lslcc	r3, r3, #1
 800088e:	ea40 0001 	orr.w	r0, r0, r1
 8000892:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000896:	2afd      	cmp	r2, #253	; 0xfd
 8000898:	d81d      	bhi.n	80008d6 <__aeabi_fmul+0x92>
 800089a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	4770      	bx	lr
 80008aa:	f090 0f00 	teq	r0, #0
 80008ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008b2:	bf08      	it	eq
 80008b4:	0249      	lsleq	r1, r1, #9
 80008b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008be:	3a7f      	subs	r2, #127	; 0x7f
 80008c0:	bfc2      	ittt	gt
 80008c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ca:	4770      	bxgt	lr
 80008cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	3a01      	subs	r2, #1
 80008d6:	dc5d      	bgt.n	8000994 <__aeabi_fmul+0x150>
 80008d8:	f112 0f19 	cmn.w	r2, #25
 80008dc:	bfdc      	itt	le
 80008de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008e2:	4770      	bxle	lr
 80008e4:	f1c2 0200 	rsb	r2, r2, #0
 80008e8:	0041      	lsls	r1, r0, #1
 80008ea:	fa21 f102 	lsr.w	r1, r1, r2
 80008ee:	f1c2 0220 	rsb	r2, r2, #32
 80008f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008fa:	f140 0000 	adc.w	r0, r0, #0
 80008fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000902:	bf08      	it	eq
 8000904:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000908:	4770      	bx	lr
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000912:	bf02      	ittt	eq
 8000914:	0040      	lsleq	r0, r0, #1
 8000916:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800091a:	3a01      	subeq	r2, #1
 800091c:	d0f9      	beq.n	8000912 <__aeabi_fmul+0xce>
 800091e:	ea40 000c 	orr.w	r0, r0, ip
 8000922:	f093 0f00 	teq	r3, #0
 8000926:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092a:	bf02      	ittt	eq
 800092c:	0049      	lsleq	r1, r1, #1
 800092e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000932:	3b01      	subeq	r3, #1
 8000934:	d0f9      	beq.n	800092a <__aeabi_fmul+0xe6>
 8000936:	ea41 010c 	orr.w	r1, r1, ip
 800093a:	e78f      	b.n	800085c <__aeabi_fmul+0x18>
 800093c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000940:	ea92 0f0c 	teq	r2, ip
 8000944:	bf18      	it	ne
 8000946:	ea93 0f0c 	teqne	r3, ip
 800094a:	d00a      	beq.n	8000962 <__aeabi_fmul+0x11e>
 800094c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000950:	bf18      	it	ne
 8000952:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000956:	d1d8      	bne.n	800090a <__aeabi_fmul+0xc6>
 8000958:	ea80 0001 	eor.w	r0, r0, r1
 800095c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000960:	4770      	bx	lr
 8000962:	f090 0f00 	teq	r0, #0
 8000966:	bf17      	itett	ne
 8000968:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800096c:	4608      	moveq	r0, r1
 800096e:	f091 0f00 	teqne	r1, #0
 8000972:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000976:	d014      	beq.n	80009a2 <__aeabi_fmul+0x15e>
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	d101      	bne.n	8000982 <__aeabi_fmul+0x13e>
 800097e:	0242      	lsls	r2, r0, #9
 8000980:	d10f      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000982:	ea93 0f0c 	teq	r3, ip
 8000986:	d103      	bne.n	8000990 <__aeabi_fmul+0x14c>
 8000988:	024b      	lsls	r3, r1, #9
 800098a:	bf18      	it	ne
 800098c:	4608      	movne	r0, r1
 800098e:	d108      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bx	lr

080009ac <__aeabi_fdiv>:
 80009ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b4:	bf1e      	ittt	ne
 80009b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ba:	ea92 0f0c 	teqne	r2, ip
 80009be:	ea93 0f0c 	teqne	r3, ip
 80009c2:	d069      	beq.n	8000a98 <__aeabi_fdiv+0xec>
 80009c4:	eba2 0203 	sub.w	r2, r2, r3
 80009c8:	ea80 0c01 	eor.w	ip, r0, r1
 80009cc:	0249      	lsls	r1, r1, #9
 80009ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009d2:	d037      	beq.n	8000a44 <__aeabi_fdiv+0x98>
 80009d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e4:	428b      	cmp	r3, r1
 80009e6:	bf38      	it	cc
 80009e8:	005b      	lslcc	r3, r3, #1
 80009ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009f2:	428b      	cmp	r3, r1
 80009f4:	bf24      	itt	cs
 80009f6:	1a5b      	subcs	r3, r3, r1
 80009f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a00:	bf24      	itt	cs
 8000a02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a0e:	bf24      	itt	cs
 8000a10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a1c:	bf24      	itt	cs
 8000a1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	bf18      	it	ne
 8000a2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a2e:	d1e0      	bne.n	80009f2 <__aeabi_fdiv+0x46>
 8000a30:	2afd      	cmp	r2, #253	; 0xfd
 8000a32:	f63f af50 	bhi.w	80008d6 <__aeabi_fmul+0x92>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4c:	327f      	adds	r2, #127	; 0x7f
 8000a4e:	bfc2      	ittt	gt
 8000a50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a58:	4770      	bxgt	lr
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	3a01      	subs	r2, #1
 8000a64:	e737      	b.n	80008d6 <__aeabi_fmul+0x92>
 8000a66:	f092 0f00 	teq	r2, #0
 8000a6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0040      	lsleq	r0, r0, #1
 8000a72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a76:	3a01      	subeq	r2, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fdiv+0xc2>
 8000a7a:	ea40 000c 	orr.w	r0, r0, ip
 8000a7e:	f093 0f00 	teq	r3, #0
 8000a82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a86:	bf02      	ittt	eq
 8000a88:	0049      	lsleq	r1, r1, #1
 8000a8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a8e:	3b01      	subeq	r3, #1
 8000a90:	d0f9      	beq.n	8000a86 <__aeabi_fdiv+0xda>
 8000a92:	ea41 010c 	orr.w	r1, r1, ip
 8000a96:	e795      	b.n	80009c4 <__aeabi_fdiv+0x18>
 8000a98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a9c:	ea92 0f0c 	teq	r2, ip
 8000aa0:	d108      	bne.n	8000ab4 <__aeabi_fdiv+0x108>
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	f47f af7d 	bne.w	80009a2 <__aeabi_fmul+0x15e>
 8000aa8:	ea93 0f0c 	teq	r3, ip
 8000aac:	f47f af70 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	e776      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ab4:	ea93 0f0c 	teq	r3, ip
 8000ab8:	d104      	bne.n	8000ac4 <__aeabi_fdiv+0x118>
 8000aba:	024b      	lsls	r3, r1, #9
 8000abc:	f43f af4c 	beq.w	8000958 <__aeabi_fmul+0x114>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e76e      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ac4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ac8:	bf18      	it	ne
 8000aca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ace:	d1ca      	bne.n	8000a66 <__aeabi_fdiv+0xba>
 8000ad0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ad4:	f47f af5c 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ad8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000adc:	f47f af3c 	bne.w	8000958 <__aeabi_fmul+0x114>
 8000ae0:	e75f      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ae2:	bf00      	nop

08000ae4 <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2102      	movs	r1, #2
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <ToggleLDAC+0x1c>)
 8000aee:	f003 f986 	bl	8003dfe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2102      	movs	r1, #2
 8000af6:	4802      	ldr	r0, [pc, #8]	; (8000b00 <ToggleLDAC+0x1c>)
 8000af8:	f003 f981 	bl	8003dfe <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010800 	.word	0x40010800

08000b04 <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2110      	movs	r1, #16
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <SendSPI+0x34>)
 8000b16:	f003 f972 	bl	8003dfe <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000b1a:	1cb9      	adds	r1, r7, #2
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2201      	movs	r2, #1
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f005 fb19 	bl	8006158 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <SendSPI+0x34>)
 8000b2c:	f003 f967 	bl	8003dfe <HAL_GPIO_WritePin>

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010800 	.word	0x40010800

08000b3c <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b4e:	d302      	bcc.n	8000b56 <DAC_AD5322_Ch1+0x1a>
 8000b50:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b54:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000b56:	2300      	movs	r3, #0
 8000b58:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000b5e:	2300      	movs	r3, #0
 8000b60:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000b62:	2300      	movs	r3, #0
 8000b64:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000b66:	8afb      	ldrh	r3, [r7, #22]
 8000b68:	03db      	lsls	r3, r3, #15
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	8abb      	ldrh	r3, [r7, #20]
 8000b6e:	039b      	lsls	r3, r3, #14
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	8a7b      	ldrh	r3, [r7, #18]
 8000b78:	035b      	lsls	r3, r3, #13
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	8a3b      	ldrh	r3, [r7, #16]
 8000b82:	031b      	lsls	r3, r3, #12
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000b94:	f023 030f 	bic.w	r3, r3, #15
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa8 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000bb4:	89bb      	ldrh	r3, [r7, #12]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffa3 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000bbe:	f7ff ff91 	bl	8000ae4 <ToggleLDAC>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bdc:	d302      	bcc.n	8000be4 <DAC_AD5322_Ch2+0x1a>
 8000bde:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000be2:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000be4:	2301      	movs	r3, #1
 8000be6:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000be8:	2301      	movs	r3, #1
 8000bea:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000bec:	2300      	movs	r3, #0
 8000bee:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	03db      	lsls	r3, r3, #15
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	8abb      	ldrh	r3, [r7, #20]
 8000bfc:	039b      	lsls	r3, r3, #14
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	8a7b      	ldrh	r3, [r7, #18]
 8000c06:	035b      	lsls	r3, r3, #13
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	8a3b      	ldrh	r3, [r7, #16]
 8000c10:	031b      	lsls	r3, r3, #12
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c22:	f023 030f 	bic.w	r3, r3, #15
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff61 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000c42:	89bb      	ldrh	r3, [r7, #12]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff5c 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000c4c:	f7ff ff4a 	bl	8000ae4 <ToggleLDAC>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c6e:	d302      	bcc.n	8000c76 <DAC_AD5322_Ch1Ch2+0x1e>
 8000c70:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c74:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000c76:	883b      	ldrh	r3, [r7, #0]
 8000c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c7c:	d302      	bcc.n	8000c84 <DAC_AD5322_Ch1Ch2+0x2c>
 8000c7e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c82:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000c84:	2300      	movs	r3, #0
 8000c86:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000c88:	2301      	movs	r3, #1
 8000c8a:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000c90:	2300      	movs	r3, #0
 8000c92:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000c94:	8afb      	ldrh	r3, [r7, #22]
 8000c96:	03db      	lsls	r3, r3, #15
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	8abb      	ldrh	r3, [r7, #20]
 8000c9c:	039b      	lsls	r3, r3, #14
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	8a7b      	ldrh	r3, [r7, #18]
 8000ca6:	035b      	lsls	r3, r3, #13
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	8a3b      	ldrh	r3, [r7, #16]
 8000cb0:	031b      	lsls	r3, r3, #12
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cbe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000cc2:	f023 030f 	bic.w	r3, r3, #15
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000cd8:	89bb      	ldrh	r3, [r7, #12]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff11 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000ce2:	89bb      	ldrh	r3, [r7, #12]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff0c 	bl	8000b04 <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000cec:	2301      	movs	r3, #1
 8000cee:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000cfc:	8afb      	ldrh	r3, [r7, #22]
 8000cfe:	03db      	lsls	r3, r3, #15
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	8abb      	ldrh	r3, [r7, #20]
 8000d04:	039b      	lsls	r3, r3, #14
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	8a7b      	ldrh	r3, [r7, #18]
 8000d0e:	035b      	lsls	r3, r3, #13
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	8a3b      	ldrh	r3, [r7, #16]
 8000d18:	031b      	lsls	r3, r3, #12
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000d40:	89bb      	ldrh	r3, [r7, #12]
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fedd 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000d4a:	89bb      	ldrh	r3, [r7, #12]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fed8 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000d54:	f7ff fec6 	bl	8000ae4 <ToggleLDAC>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <volt2dgt>:
// floor()
// Пример: 
// Следующий фрагмент кода выводит на экран «10»:
// printf("%f", floor(10.9));

uint16_t volt2dgt(Table_t *calibTable, int16_t volt){
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]

// TODO: Нужно ли учитывать Ктр? volt = volt*Ktr 
float count = ( abs(MIN_VOLT_MODE_12) + abs(MAX_VOLT_MODE_12) ) / STEP_CALIBRATE;
 8000d6c:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <volt2dgt+0x10c>)
 8000d6e:	60fb      	str	r3, [r7, #12]
uint16_t y = ( floor( (count*abs(MIN_VOLT_MODE_12)) /
 8000d70:	493f      	ldr	r1, [pc, #252]	; (8000e70 <volt2dgt+0x110>)
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f7ff fd66 	bl	8000844 <__aeabi_fmul>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	493e      	ldr	r1, [pc, #248]	; (8000e74 <volt2dgt+0x114>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe15 	bl	80009ac <__aeabi_fdiv>
 8000d82:	4603      	mov	r3, r0
               (abs(MIN_VOLT_MODE_12) + abs(MAX_VOLT_MODE_12)) /
 8000d84:	493a      	ldr	r1, [pc, #232]	; (8000e70 <volt2dgt+0x110>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fe10 	bl	80009ac <__aeabi_fdiv>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461c      	mov	r4, r3
               abs(MIN_VOLT_MODE_12)*volt
 8000d90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fd01 	bl	800079c <__aeabi_i2f>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f7ff fd50 	bl	8000844 <__aeabi_fmul>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461c      	mov	r4, r3
               +
               (count*abs(MIN_VOLT_MODE_12)) /
 8000da8:	4931      	ldr	r1, [pc, #196]	; (8000e70 <volt2dgt+0x110>)
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f7ff fd4a 	bl	8000844 <__aeabi_fmul>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4930      	ldr	r1, [pc, #192]	; (8000e74 <volt2dgt+0x114>)
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fdf9 	bl	80009ac <__aeabi_fdiv>
 8000dba:	4603      	mov	r3, r0
               +
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	f7ff fc38 	bl	8000634 <__addsf3>
 8000dc4:	4603      	mov	r3, r0
uint16_t y = ( floor( (count*abs(MIN_VOLT_MODE_12)) /
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fb2e 	bl	8000428 <__aeabi_f2d>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f00b fb84 	bl	800c4e0 <floor>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4610      	mov	r0, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	f7ff fc02 	bl	80005e8 <__aeabi_d2uiz>
 8000de4:	4603      	mov	r3, r0
 8000de6:	817b      	strh	r3, [r7, #10]
               (abs(MIN_VOLT_MODE_12) + abs(MAX_VOLT_MODE_12) ) ) ); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
uint16_t CodeX = (((calibTable->dacValA_m12[y+1+1]-calibTable->dacValA_m12[y])/(((y+1+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12)-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))))*(volt-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))+calibTable->dacValA_m12[y+1];
 8000de8:	897b      	ldrh	r3, [r7, #10]
 8000dea:	3302      	adds	r3, #2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	3304      	adds	r3, #4
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	889b      	ldrh	r3, [r3, #4]
 8000df6:	4619      	mov	r1, r3
 8000df8:	897b      	ldrh	r3, [r7, #10]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	889b      	ldrh	r3, [r3, #4]
 8000e04:	1aca      	subs	r2, r1, r3
 8000e06:	897b      	ldrh	r3, [r7, #10]
 8000e08:	3302      	adds	r3, #2
 8000e0a:	21c8      	movs	r1, #200	; 0xc8
 8000e0c:	fb01 f303 	mul.w	r3, r1, r3
 8000e10:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e14:	3b08      	subs	r3, #8
 8000e16:	8979      	ldrh	r1, [r7, #10]
 8000e18:	3101      	adds	r1, #1
 8000e1a:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000e1e:	fb00 f101 	mul.w	r1, r0, r1
 8000e22:	440b      	add	r3, r1
 8000e24:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000e34:	897b      	ldrh	r3, [r7, #10]
 8000e36:	3301      	adds	r3, #1
 8000e38:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000e3c:	fb00 f303 	mul.w	r3, r0, r3
 8000e40:	440b      	add	r3, r1
 8000e42:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e46:	3b08      	subs	r3, #8
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	fb03 f302 	mul.w	r3, r3, r2
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	897b      	ldrh	r3, [r7, #10]
 8000e52:	3301      	adds	r3, #1
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	3304      	adds	r3, #4
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	440b      	add	r3, r1
 8000e5c:	889b      	ldrh	r3, [r3, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	813b      	strh	r3, [r7, #8]
	return CodeX;
 8000e62:	893b      	ldrh	r3, [r7, #8]





}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	42aa0000 	.word	0x42aa0000
 8000e70:	459c4000 	.word	0x459c4000
 8000e74:	4684d000 	.word	0x4684d000

08000e78 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e84:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d013      	beq.n	8000eb8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e94:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e98:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d00b      	beq.n	8000eb8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ea0:	e000      	b.n	8000ea4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ea2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ea4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f9      	beq.n	8000ea2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000eae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000eb8:	687b      	ldr	r3, [r7, #4]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <DWT_Init+0x24>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <DWT_Init+0x24>)
 8000ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ed2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <DWT_Init+0x28>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <DWT_Init+0x28>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	e000edf0 	.word	0xe000edf0
 8000eec:	e0001000 	.word	0xe0001000

08000ef0 <_write>:
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e009      	b.n	8000f16 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	60ba      	str	r2, [r7, #8]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ffb4 	bl	8000e78 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3301      	adds	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	dbf1      	blt.n	8000f02 <_write+0x12>
	}
	return len;
 8000f1e:	687b      	ldr	r3, [r7, #4]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <writeTableInFlash>:

union NVRAM DevNVRAM;
bool changeTableFlag = false; // TODO тестовый флаг для записи в while
//--------------------------------------------------------------------------

void writeTableInFlash() { // FIXME:Запись в память не работает
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
     * Что такое l_Error? Обязательно ли это условие там? Так как функция должна выполнять одну
     * единственную задачу, может, сделать функцию чисто записи во флеш безо всяких проверок?
     * Также было установлено, что CubeIDE не точно отображает содержимое флеша -> лучше смотреть
     * с помощью CubeProgrammer или STM32 ST-LINK Utility
     * */
	volatile uint32_t l_Address = FLASH_TABLE_START_ADDR;
 8000f2e:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <writeTableInFlash+0xd4>)
 8000f30:	60bb      	str	r3, [r7, #8]
	uint32_t l_Error = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
	uint32_t l_Index = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
	//Читаем и сравниваем
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8000f3a:	e010      	b.n	8000f5e <writeTableInFlash+0x36>
		if ( DevNVRAM.data32[l_Index] != *(uint32_t *)l_Address )
 8000f3c:	4a30      	ldr	r2, [pc, #192]	; (8001000 <writeTableInFlash+0xd8>)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d002      	beq.n	8000f52 <writeTableInFlash+0x2a>
			l_Error++;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	607b      	str	r3, [r7, #4]
		l_Index = l_Index + 1;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3301      	adds	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
		l_Address = l_Address + 4;
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	60bb      	str	r3, [r7, #8]
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	4a28      	ldr	r2, [pc, #160]	; (8001004 <writeTableInFlash+0xdc>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d9ea      	bls.n	8000f3c <writeTableInFlash+0x14>
	}
	// конфигурация изменилась сохраняем
	printf("Ошибка чтения таблицы :%lu", l_Error);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4827      	ldr	r0, [pc, #156]	; (8001008 <writeTableInFlash+0xe0>)
 8000f6c:	f00a f952 	bl	800b214 <iprintf>
	if (l_Error > 0) {
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d03e      	beq.n	8000ff4 <writeTableInFlash+0xcc>
		// конфигурация изменилась сохраняем
		// Готовим к записи в память
		HAL_FLASH_Unlock();
 8000f76:	f002 fc17 	bl	80037a8 <HAL_FLASH_Unlock>
		// Очищаем страницу памяти
		if ( HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error) != HAL_OK )
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4823      	ldr	r0, [pc, #140]	; (800100c <writeTableInFlash+0xe4>)
 8000f80:	f002 fcfa 	bl	8003978 <HAL_FLASHEx_Erase>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <writeTableInFlash+0x68>
		{
		    printf("ERASE error");
 8000f8a:	4821      	ldr	r0, [pc, #132]	; (8001010 <writeTableInFlash+0xe8>)
 8000f8c:	f00a f942 	bl	800b214 <iprintf>
		}
		//Пишем данные в память
		l_Address = FLASH_TABLE_START_ADDR;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <writeTableInFlash+0xd4>)
 8000f92:	60bb      	str	r3, [r7, #8]
		l_Error = 0x00;
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
		l_Index = 0x00;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
		DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <writeTableInFlash+0xd8>)
 8000f9e:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4a16      	ldr	r2, [pc, #88]	; (8001000 <writeTableInFlash+0xd8>)
 8000fa6:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <writeTableInFlash+0xd8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8000fb2:	e019      	b.n	8000fe8 <writeTableInFlash+0xc0>
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8000fb4:	68b9      	ldr	r1, [r7, #8]
			        DevNVRAM.data32[l_Index]) != HAL_OK)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <writeTableInFlash+0xd8>)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f002 fb7f 	bl	80036c8 <HAL_FLASH_Program>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <writeTableInFlash+0xae>
			    l_Error++;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
			l_Address = l_Address + 4;
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	60bb      	str	r3, [r7, #8]
			l_Index = l_Index + 1;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
			HAL_Delay(10);
 8000fe2:	200a      	movs	r0, #10
 8000fe4:	f001 fd92 	bl	8002b0c <HAL_Delay>
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4a06      	ldr	r2, [pc, #24]	; (8001004 <writeTableInFlash+0xdc>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d9e1      	bls.n	8000fb4 <writeTableInFlash+0x8c>
		}
		HAL_FLASH_Lock();
 8000ff0:	f002 fc00 	bl	80037f4 <HAL_FLASH_Lock>
	}
//	HAL_Delay(100);
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	0801fc00 	.word	0x0801fc00
 8001000:	200004bc 	.word	0x200004bc
 8001004:	0801ffff 	.word	0x0801ffff
 8001008:	0800c5f8 	.word	0x0800c5f8
 800100c:	20000010 	.word	0x20000010
 8001010:	0800c628 	.word	0x0800c628

08001014 <SetDacA>:
uint16_t VDAC_A = 0;
uint16_t VDAC_B = 0;
// Новая реализация. для приема значений в напряжениях, с поиском по структуре DevNVRAM выгруженной из памяти.
//TODO: Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
void SetDacA(int16_t da)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
	VDAC_A = volt2dgt(&(DevNVRAM.calibration_table), da);
 800101e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001022:	4619      	mov	r1, r3
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <SetDacA+0x34>)
 8001026:	f7ff fe9b 	bl	8000d60 <volt2dgt>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <SetDacA+0x38>)
 8001030:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <SetDacA+0x38>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <SetDacA+0x3c>)
 800103a:	f7ff fd7f 	bl	8000b3c <DAC_AD5322_Ch1>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200004bc 	.word	0x200004bc
 800104c:	20000266 	.word	0x20000266
 8001050:	20000984 	.word	0x20000984

08001054 <SetDacB>:
void SetDacB(int16_t db) //BUG: Не работает. Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table), db);
 800105e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001062:	4619      	mov	r1, r3
 8001064:	4808      	ldr	r0, [pc, #32]	; (8001088 <SetDacB+0x34>)
 8001066:	f7ff fe7b 	bl	8000d60 <volt2dgt>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <SetDacB+0x38>)
 8001070:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <SetDacB+0x38>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <SetDacB+0x3c>)
 800107a:	f7ff fda6 	bl	8000bca <DAC_AD5322_Ch2>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200004bc 	.word	0x200004bc
 800108c:	20000268 	.word	0x20000268
 8001090:	20000984 	.word	0x20000984

08001094 <SetAllDAC>:
void SetAllDAC()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <SetAllDAC+0x18>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <SetAllDAC+0x1c>)
 800109e:	8812      	ldrh	r2, [r2, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	4804      	ldr	r0, [pc, #16]	; (80010b4 <SetAllDAC+0x20>)
 80010a4:	f7ff fdd8 	bl	8000c58 <DAC_AD5322_Ch1Ch2>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000266 	.word	0x20000266
 80010b0:	20000268 	.word	0x20000268
 80010b4:	20000984 	.word	0x20000984

080010b8 <GetDacA>:
uint16_t GetDacA()
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
	return VDAC_A;
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <GetDacA+0x10>)
 80010be:	881b      	ldrh	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	20000266 	.word	0x20000266

080010cc <GetDacB>:
uint16_t GetDacB()
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
	return VDAC_B;
 80010d0:	4b02      	ldr	r3, [pc, #8]	; (80010dc <GetDacB+0x10>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	20000268 	.word	0x20000268

080010e0 <GetBtnRunState>:

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState()
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00)
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <GetBtnRunState+0x7c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10b      	bne.n	8001104 <GetBtnRunState+0x24>
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <GetBtnRunState+0x80>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d107      	bne.n	8001104 <GetBtnRunState+0x24>
	{
		btn1_long_rd = 0;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <GetBtnRunState+0x80>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <GetBtnRunState+0x7c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001100:	2300      	movs	r3, #0
 8001102:	e026      	b.n	8001152 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00)
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <GetBtnRunState+0x7c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d10b      	bne.n	8001124 <GetBtnRunState+0x44>
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <GetBtnRunState+0x80>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d107      	bne.n	8001124 <GetBtnRunState+0x44>
	{
		btn1_long_rd = 0;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <GetBtnRunState+0x80>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <GetBtnRunState+0x7c>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8001120:	2301      	movs	r3, #1
 8001122:	e016      	b.n	8001152 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01)
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <GetBtnRunState+0x7c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10b      	bne.n	8001144 <GetBtnRunState+0x64>
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <GetBtnRunState+0x80>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d107      	bne.n	8001144 <GetBtnRunState+0x64>
	{
		btn1_long_rd = 0;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <GetBtnRunState+0x80>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <GetBtnRunState+0x7c>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001140:	2302      	movs	r3, #2
 8001142:	e006      	b.n	8001152 <GetBtnRunState+0x72>
	}

	btn1_long_rd = 0;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <GetBtnRunState+0x80>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
	btn1_short_rd = 0;
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <GetBtnRunState+0x7c>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]

	//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
	//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
	//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000271 	.word	0x20000271
 8001160:	20000270 	.word	0x20000270

08001164 <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState()
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00)
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <GetBtnUpState+0x7c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10b      	bne.n	8001188 <GetBtnUpState+0x24>
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <GetBtnUpState+0x80>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d107      	bne.n	8001188 <GetBtnUpState+0x24>
	{
		btn2_long_rd = 0;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <GetBtnUpState+0x80>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <GetBtnUpState+0x7c>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001184:	2300      	movs	r3, #0
 8001186:	e026      	b.n	80011d6 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00)
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <GetBtnUpState+0x7c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d10b      	bne.n	80011a8 <GetBtnUpState+0x44>
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <GetBtnUpState+0x80>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d107      	bne.n	80011a8 <GetBtnUpState+0x44>
	{
		btn2_long_rd = 0;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <GetBtnUpState+0x80>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <GetBtnUpState+0x7c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e016      	b.n	80011d6 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01)
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <GetBtnUpState+0x7c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10b      	bne.n	80011c8 <GetBtnUpState+0x64>
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <GetBtnUpState+0x80>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d107      	bne.n	80011c8 <GetBtnUpState+0x64>
	{
		btn2_long_rd = 0;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <GetBtnUpState+0x80>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <GetBtnUpState+0x7c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80011c4:	2302      	movs	r3, #2
 80011c6:	e006      	b.n	80011d6 <GetBtnUpState+0x72>
	}

	btn2_long_rd = 0;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <GetBtnUpState+0x80>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
	btn2_short_rd = 0;
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <GetBtnUpState+0x7c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
	//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
	//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
	//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000279 	.word	0x20000279
 80011e4:	20000278 	.word	0x20000278

080011e8 <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState()
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00)
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <GetBtnDownState+0x7c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10b      	bne.n	800120c <GetBtnDownState+0x24>
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <GetBtnDownState+0x80>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d107      	bne.n	800120c <GetBtnDownState+0x24>
	{
		btn3_long_rd = 0;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <GetBtnDownState+0x80>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <GetBtnDownState+0x7c>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001208:	2300      	movs	r3, #0
 800120a:	e026      	b.n	800125a <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00)
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <GetBtnDownState+0x7c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d10b      	bne.n	800122c <GetBtnDownState+0x44>
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <GetBtnDownState+0x80>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d107      	bne.n	800122c <GetBtnDownState+0x44>
	{
		btn3_long_rd = 0;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <GetBtnDownState+0x80>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <GetBtnDownState+0x7c>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8001228:	2301      	movs	r3, #1
 800122a:	e016      	b.n	800125a <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01)
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <GetBtnDownState+0x7c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10b      	bne.n	800124c <GetBtnDownState+0x64>
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <GetBtnDownState+0x80>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d107      	bne.n	800124c <GetBtnDownState+0x64>
	{
		btn3_long_rd = 0;
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <GetBtnDownState+0x80>)
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <GetBtnDownState+0x7c>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001248:	2302      	movs	r3, #2
 800124a:	e006      	b.n	800125a <GetBtnDownState+0x72>
	}

	btn3_long_rd = 0;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <GetBtnDownState+0x80>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
	btn3_short_rd = 0;
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <GetBtnDownState+0x7c>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
	//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
	//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
	//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000281 	.word	0x20000281
 8001268:	20000280 	.word	0x20000280

0800126c <EnableTIM3_PB4>:
// char trans2_str[64] = {
// 	0,
// };
//--------------------------------------------------------------------------
void EnableTIM3_PB4()
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	timWork = 1;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <EnableTIM3_PB4+0x14>)
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000282 	.word	0x20000282

08001284 <GetTIM3>:
uint16_t GetTIM3()
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <GetTIM3+0x14>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000284 	.word	0x20000284

0800129c <resValTIM3_PB4>:
void resValTIM3_PB4()
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <resValTIM3_PB4+0x14>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	801a      	strh	r2, [r3, #0]
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000284 	.word	0x20000284

080012b4 <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6()
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
	timWork = 0;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <EnableTIM4_PB6+0x14>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000282 	.word	0x20000282

080012cc <GetTIM4>:
uint16_t GetTIM4()
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <GetTIM4+0x14>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	b29b      	uxth	r3, r3
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000286 	.word	0x20000286

080012e4 <resValTIM4_PB6>:
void resValTIM4_PB6()
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <resValTIM4_PB6+0x14>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	801a      	strh	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000286 	.word	0x20000286

080012fc <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork)
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d027      	beq.n	800135e <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Instance == TIM3)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a29      	ldr	r2, [pc, #164]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d149      	bne.n	80013ac <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7f1b      	ldrb	r3, [r3, #28]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d145      	bne.n	80013ac <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8001320:	2100      	movs	r1, #0
 8001322:	4826      	ldr	r0, [pc, #152]	; (80013bc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001324:	f005 fbec 	bl	8006b00 <HAL_TIM_ReadCapturedValue>
 8001328:	4603      	mov	r3, r0
 800132a:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 800132c:	2104      	movs	r1, #4
 800132e:	4823      	ldr	r0, [pc, #140]	; (80013bc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001330:	f005 fbe6 	bl	8006b00 <HAL_TIM_ReadCapturedValue>
 8001334:	4603      	mov	r3, r0
 8001336:	81fb      	strh	r3, [r7, #14]
														   TIM_CHANNEL_2);

				TIM3->CNT = 0;
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 800133e:	8a3a      	ldrh	r2, [r7, #16]
 8001340:	89fb      	ldrh	r3, [r7, #14]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 8001348:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	bfb8      	it	lt
 8001350:	425b      	neglt	r3, r3
 8001352:	b29b      	uxth	r3, r3
 8001354:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 8001356:	89ba      	ldrh	r2, [r7, #12]
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800135a:	801a      	strh	r2, [r3, #0]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
				g_vTIM4_PB6 = deltaTIM4;
			}
		}
	}
}
 800135c:	e026      	b.n	80013ac <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a18      	ldr	r2, [pc, #96]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d121      	bne.n	80013ac <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7f1b      	ldrb	r3, [r3, #28]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d11d      	bne.n	80013ac <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001370:	2100      	movs	r1, #0
 8001372:	4815      	ldr	r0, [pc, #84]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001374:	f005 fbc4 	bl	8006b00 <HAL_TIM_ReadCapturedValue>
 8001378:	4603      	mov	r3, r0
 800137a:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 800137c:	2104      	movs	r1, #4
 800137e:	4812      	ldr	r0, [pc, #72]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001380:	f005 fbbe 	bl	8006b00 <HAL_TIM_ReadCapturedValue>
 8001384:	4603      	mov	r3, r0
 8001386:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
				int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 800138e:	8afa      	ldrh	r2, [r7, #22]
 8001390:	8abb      	ldrh	r3, [r7, #20]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	b29b      	uxth	r3, r3
 8001396:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 8001398:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800139c:	2b00      	cmp	r3, #0
 800139e:	bfb8      	it	lt
 80013a0:	425b      	neglt	r3, r3
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 80013a6:	8a7a      	ldrh	r2, [r7, #18]
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_TIM_IC_CaptureCallback+0xd0>)
 80013aa:	801a      	strh	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000282 	.word	0x20000282
 80013b8:	40000400 	.word	0x40000400
 80013bc:	2000090c 	.word	0x2000090c
 80013c0:	20000284 	.word	0x20000284
 80013c4:	40000800 	.word	0x40000800
 80013c8:	200008bc 	.word	0x200008bc
 80013cc:	20000286 	.word	0x20000286

080013d0 <GetADC>:
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC()
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	return g_VADC;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <GetADC+0x14>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	b29b      	uxth	r3, r3
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000288 	.word	0x20000288

080013e8 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a06      	ldr	r2, [pc, #24]	; (8001410 <HAL_ADC_ConvCpltCallback+0x28>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d106      	bne.n	8001408 <HAL_ADC_ConvCpltCallback+0x20>
	{
		g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <HAL_ADC_ConvCpltCallback+0x2c>)
 80013fc:	f001 fd38 	bl	8002e70 <HAL_ADC_GetValue>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <HAL_ADC_ConvCpltCallback+0x30>)
 8001406:	801a      	strh	r2, [r3, #0]
	}
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40012400 	.word	0x40012400
 8001414:	20000954 	.word	0x20000954
 8001418:	20000288 	.word	0x20000288

0800141c <runCommands>:
	Калибровка 
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.
	--------------------------------------------------------------------------*/
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8001422:	af00      	add	r7, sp, #0
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	6018      	str	r0, [r3, #0]
 8001428:	463b      	mov	r3, r7
 800142a:	6019      	str	r1, [r3, #0]
	if (*Len < 1)
 800142c:	463b      	mov	r3, r7
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8400 	beq.w	8001c38 <runCommands+0x81c>

	//--------------------------------------------------------------------------

	uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];
	uint16_t tVal16;
	uint8_t cmd = Buf[0];
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	//--------------------------------------------------------------------------
	if 		(cmd == 0x01)	// Relay:1 - 12V	[0x01 - 0x01]
 8001442:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001446:	2b01      	cmp	r3, #1
 8001448:	d16c      	bne.n	8001524 <runCommands+0x108>
	{
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00))
 800144a:	463b      	mov	r3, r7
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d957      	bls.n	8001504 <runCommands+0xe8>
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d005      	beq.n	800146c <runCommands+0x50>
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d14b      	bne.n	8001504 <runCommands+0xe8>
		{
			if (Buf[1] == 0x01)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d11f      	bne.n	80014b8 <runCommands+0x9c>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	2104      	movs	r1, #4
 800147c:	48cb      	ldr	r0, [pc, #812]	; (80017ac <runCommands+0x390>)
 800147e:	f002 fcbe 	bl	8003dfe <HAL_GPIO_WritePin>
				RelayState = m12;
 8001482:	4bcb      	ldr	r3, [pc, #812]	; (80017b0 <runCommands+0x394>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 8001488:	4bc9      	ldr	r3, [pc, #804]	; (80017b0 <runCommands+0x394>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	48c9      	ldr	r0, [pc, #804]	; (80017b4 <runCommands+0x398>)
 8001490:	f009 fec0 	bl	800b214 <iprintf>
				SetAllDAC();
 8001494:	f7ff fdfe 	bl	8001094 <SetAllDAC>
				UserTxBufferFS[0] = cmd;
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80014a0:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	2200      	movs	r2, #0
 80014a8:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	2102      	movs	r1, #2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f009 fa77 	bl	800a9a4 <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 80014b6:	e3c4      	b.n	8001c42 <runCommands+0x826>
			}
			else if (Buf[1] == 0x00)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d11f      	bne.n	8001504 <runCommands+0xe8>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2104      	movs	r1, #4
 80014c8:	48b8      	ldr	r0, [pc, #736]	; (80017ac <runCommands+0x390>)
 80014ca:	f002 fc98 	bl	8003dfe <HAL_GPIO_WritePin>
				RelayState = m27;
 80014ce:	4bb8      	ldr	r3, [pc, #736]	; (80017b0 <runCommands+0x394>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 80014d4:	4bb6      	ldr	r3, [pc, #728]	; (80017b0 <runCommands+0x394>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	48b7      	ldr	r0, [pc, #732]	; (80017b8 <runCommands+0x39c>)
 80014dc:	f009 fe9a 	bl	800b214 <iprintf>
				SetAllDAC();
 80014e0:	f7ff fdd8 	bl	8001094 <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 80014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e8:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80014ec:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 80014ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f2:	2200      	movs	r2, #0
 80014f4:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 80014f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fa:	2102      	movs	r1, #2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f009 fa51 	bl	800a9a4 <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 8001502:	e39e      	b.n	8001c42 <runCommands+0x826>
			}
		}

		UserTxBufferFS[0] = cmd;
 8001504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001508:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800150c:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	2201      	movs	r2, #1
 8001514:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	2102      	movs	r1, #2
 800151c:	4618      	mov	r0, r3
 800151e:	f009 fa41 	bl	800a9a4 <CDC_Transmit_FS>
		return;
 8001522:	e38e      	b.n	8001c42 <runCommands+0x826>

		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x02)	// DA:4095
 8001524:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001528:	2b02      	cmp	r3, #2
 800152a:	d13e      	bne.n	80015aa <runCommands+0x18e>
	{
		if (*Len >= 3)
 800152c:	463b      	mov	r3, r7
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d929      	bls.n	800158a <runCommands+0x16e>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8001536:	f7ff feb1 	bl	800129c <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 800153a:	f7ff fed3 	bl	80012e4 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	b29a      	uxth	r2, r3
 8001548:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800154c:	801a      	strh	r2, [r3, #0]
			SetDacA(tVal16);
 800154e:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	b21b      	sxth	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fd5c 	bl	8001014 <SetDacA>
			//			SetDacA(tVal16);

			printf("DacA: %d\n", tVal16);
 800155c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	4619      	mov	r1, r3
 8001564:	4895      	ldr	r0, [pc, #596]	; (80017bc <runCommands+0x3a0>)
 8001566:	f009 fe55 	bl	800b214 <iprintf>
			UserTxBufferFS[0] = cmd;
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001572:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	2200      	movs	r2, #0
 800157a:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	2102      	movs	r1, #2
 8001582:	4618      	mov	r0, r3
 8001584:	f009 fa0e 	bl	800a9a4 <CDC_Transmit_FS>
			return;
 8001588:	e35b      	b.n	8001c42 <runCommands+0x826>
		}

		UserTxBufferFS[0] = cmd;
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001592:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	2201      	movs	r2, #1
 800159a:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	2102      	movs	r1, #2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f009 f9fe 	bl	800a9a4 <CDC_Transmit_FS>
		return;
 80015a8:	e34b      	b.n	8001c42 <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x03)	// DB:4095
 80015aa:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d13e      	bne.n	8001630 <runCommands+0x214>
	{
		if (*Len >= 3)
 80015b2:	463b      	mov	r3, r7
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d929      	bls.n	8001610 <runCommands+0x1f4>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 80015bc:	f7ff fe6e 	bl	800129c <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 80015c0:	f7ff fe90 	bl	80012e4 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80015d2:	801a      	strh	r2, [r3, #0]
			SetDacB(tVal16);
 80015d4:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	b21b      	sxth	r3, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fd39 	bl	8001054 <SetDacB>

			UserTxBufferFS[0] = cmd;
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80015ea:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	2200      	movs	r2, #0
 80015f2:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n", tVal16);
 80015f4:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4870      	ldr	r0, [pc, #448]	; (80017c0 <runCommands+0x3a4>)
 80015fe:	f009 fe09 	bl	800b214 <iprintf>

			CDC_Transmit_FS(UserTxBufferFS, 2);
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	2102      	movs	r1, #2
 8001608:	4618      	mov	r0, r3
 800160a:	f009 f9cb 	bl	800a9a4 <CDC_Transmit_FS>
			return;
 800160e:	e318      	b.n	8001c42 <runCommands+0x826>
		}

		UserTxBufferFS[0] = cmd;
 8001610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001614:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001618:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161e:	2201      	movs	r2, #1
 8001620:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	2102      	movs	r1, #2
 8001628:	4618      	mov	r0, r3
 800162a:	f009 f9bb 	bl	800a9a4 <CDC_Transmit_FS>
		return;
 800162e:	e308      	b.n	8001c42 <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x04)	// ADC?
 8001630:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001634:	2b04      	cmp	r3, #4
 8001636:	d119      	bne.n	800166c <runCommands+0x250>
	{
		tVal16 = GetADC();
 8001638:	f7ff feca 	bl	80013d0 <GetADC>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001644:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800164e:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	3301      	adds	r3, #1
 8001656:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800165a:	8812      	ldrh	r2, [r2, #0]
 800165c:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 800165e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001662:	2103      	movs	r1, #3
 8001664:	4618      	mov	r0, r3
 8001666:	f009 f99d 	bl	800a9a4 <CDC_Transmit_FS>
		return;
 800166a:	e2ea      	b.n	8001c42 <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x05)	// Relay?DA?DB?
 800166c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001670:	2b05      	cmp	r3, #5
 8001672:	d12d      	bne.n	80016d0 <runCommands+0x2b4>
	{
		UserTxBufferFS[0] = cmd;
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800167c:	701a      	strb	r2, [r3, #0]
		#if TEST_RELAY
		UserTxBufferFS[1] = RelayState;
 800167e:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <runCommands+0x394>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001688:	705a      	strb	r2, [r3, #1]
		#endif /* TEST_RELAY */

		tVal16 = GetDacA();
 800168a:	f7ff fd15 	bl	80010b8 <GetDacA>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001696:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	3302      	adds	r3, #2
 800169e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80016a2:	8812      	ldrh	r2, [r2, #0]
 80016a4:	801a      	strh	r2, [r3, #0]

		tVal16 = GetDacB();
 80016a6:	f7ff fd11 	bl	80010cc <GetDacB>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80016b2:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	3304      	adds	r3, #4
 80016ba:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80016be:	8812      	ldrh	r2, [r2, #0]
 80016c0:	801a      	strh	r2, [r3, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 80016c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c6:	2106      	movs	r1, #6
 80016c8:	4618      	mov	r0, r3
 80016ca:	f009 f96b 	bl	800a9a4 <CDC_Transmit_FS>
		return;
 80016ce:	e2b8      	b.n	8001c42 <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x06)	// Btn?
 80016d0:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80016d4:	2b06      	cmp	r3, #6
 80016d6:	d120      	bne.n	800171a <runCommands+0x2fe>
	{
		UserTxBufferFS[0] = cmd;
 80016d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016dc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80016e0:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 80016e2:	f7ff fcfd 	bl	80010e0 <GetBtnRunState>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 80016f0:	f7ff fd38 	bl	8001164 <GetBtnUpState>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fc:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 80016fe:	f7ff fd73 	bl	80011e8 <GetBtnDownState>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	70da      	strb	r2, [r3, #3]
		CDC_Transmit_FS(UserTxBufferFS, 4);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	2104      	movs	r1, #4
 8001712:	4618      	mov	r0, r3
 8001714:	f009 f946 	bl	800a9a4 <CDC_Transmit_FS>
		return;
 8001718:	e293      	b.n	8001c42 <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x07)	// ID?
 800171a:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800171e:	2b07      	cmp	r3, #7
 8001720:	d154      	bne.n	80017cc <runCommands+0x3b0>
	{
		char str[9] = {
 8001722:	f107 0318 	add.w	r3, r7, #24
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	3304      	adds	r3, #4
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	711a      	strb	r2, [r3, #4]
			0,
		};
		memcpy(str, "SN", strlen("SN"));
 8001732:	f107 0318 	add.w	r3, r7, #24
 8001736:	2202      	movs	r2, #2
 8001738:	4922      	ldr	r1, [pc, #136]	; (80017c4 <runCommands+0x3a8>)
 800173a:	4618      	mov	r0, r3
 800173c:	f009 fd54 	bl	800b1e8 <memcpy>
		itoa(SN_DEFINE, str + 2, 16);
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	3302      	adds	r3, #2
 8001746:	2210      	movs	r2, #16
 8001748:	4619      	mov	r1, r3
 800174a:	481f      	ldr	r0, [pc, #124]	; (80017c8 <runCommands+0x3ac>)
 800174c:	f009 fd4a 	bl	800b1e4 <itoa>

		UserTxBufferFS[0] = cmd;
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001758:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = strlen(str);
 800175a:	f107 0318 	add.w	r3, r7, #24
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fcf6 	bl	8000150 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	b2da      	uxtb	r2, r3
 8001768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176c:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 800176e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001772:	3402      	adds	r4, #2
 8001774:	f107 0318 	add.w	r3, r7, #24
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fce9 	bl	8000150 <strlen>
 800177e:	4602      	mov	r2, r0
 8001780:	f107 0318 	add.w	r3, r7, #24
 8001784:	4619      	mov	r1, r3
 8001786:	4620      	mov	r0, r4
 8001788:	f009 fd2e 	bl	800b1e8 <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 800178c:	f107 0318 	add.w	r3, r7, #24
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fcdd 	bl	8000150 <strlen>
 8001796:	4603      	mov	r3, r0
 8001798:	b29b      	uxth	r3, r3
 800179a:	3302      	adds	r3, #2
 800179c:	b29a      	uxth	r2, r3
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f009 f8fd 	bl	800a9a4 <CDC_Transmit_FS>
 80017aa:	e24a      	b.n	8001c42 <runCommands+0x826>
 80017ac:	40010800 	.word	0x40010800
 80017b0:	20000020 	.word	0x20000020
 80017b4:	0800c634 	.word	0x0800c634
 80017b8:	0800c64c 	.word	0x0800c64c
 80017bc:	0800c664 	.word	0x0800c664
 80017c0:	0800c670 	.word	0x0800c670
 80017c4:	0800c67c 	.word	0x0800c67c
 80017c8:	01121001 	.word	0x01121001
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.*/
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x08)	// Калибровка TIM inHL?
 80017cc:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d11b      	bne.n	800180c <runCommands+0x3f0>
	{
		EnableTIM3_PB4();
 80017d4:	f7ff fd4a 	bl	800126c <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 80017d8:	f7ff fd54 	bl	8001284 <GetTIM3>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	f107 0316 	add.w	r3, r7, #22
 80017e4:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 80017e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ea:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80017ee:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 80017f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f4:	3301      	adds	r3, #1
 80017f6:	f107 0216 	add.w	r2, r7, #22
 80017fa:	8812      	ldrh	r2, [r2, #0]
 80017fc:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 80017fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001802:	2103      	movs	r1, #3
 8001804:	4618      	mov	r0, r3
 8001806:	f009 f8cd 	bl	800a9a4 <CDC_Transmit_FS>
 800180a:	e21a      	b.n	8001c42 <runCommands+0x826>
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x09)	// Калибровка TIM inLL?
 800180c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001810:	2b09      	cmp	r3, #9
 8001812:	d11b      	bne.n	800184c <runCommands+0x430>
	{
		EnableTIM4_PB6();
 8001814:	f7ff fd4e 	bl	80012b4 <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 8001818:	f7ff fd58 	bl	80012cc <GetTIM4>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800182e:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	3301      	adds	r3, #1
 8001836:	f107 0214 	add.w	r2, r7, #20
 800183a:	8812      	ldrh	r2, [r2, #0]
 800183c:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800183e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001842:	2103      	movs	r1, #3
 8001844:	4618      	mov	r0, r3
 8001846:	f009 f8ad 	bl	800a9a4 <CDC_Transmit_FS>
 800184a:	e1fa      	b.n	8001c42 <runCommands+0x826>
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0A)	// TODO: Прием калибровочной таблицы [0x0A][1-4][offset][count][data] 	answer: [0x0A]+[1-4]+[offset]+[count]+[status] (0x00 - сработал; 0x01 - не сработал)
 800184c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001850:	2b0a      	cmp	r3, #10
 8001852:	f040 81ad 	bne.w	8001bb0 <runCommands+0x794>
	{
		//Прием калибровочной таблицы [0x0A][1-4][offset][count][data]
		//FIXME: За одну посылку можно получить максимум 64 byte. Нужно организовать пакетную передачу
		uint16_t tOffset, tCount, tData;
		if (*Len >= 2 && Buf[1] >= 0x00 && Buf[1] <= 0x03)
 8001856:	463b      	mov	r3, r7
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	f240 8197 	bls.w	8001b90 <runCommands+0x774>
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b03      	cmp	r3, #3
 800186c:	f200 8190 	bhi.w	8001b90 <runCommands+0x774>
		{
			if 		(Buf[1] == 0x00)	//А_m12
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d15f      	bne.n	800193c <runCommands+0x520>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3302      	adds	r3, #2
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	b29a      	uxth	r2, r3
 8001886:	f107 0312 	add.w	r3, r7, #18
 800188a:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	3304      	adds	r3, #4
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	b29a      	uxth	r2, r3
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 80018a2:	e01f      	b.n	80018e4 <runCommands+0x4c8>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 80018a4:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	3306      	adds	r3, #6
 80018ac:	1d3a      	adds	r2, r7, #4
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	f107 030e 	add.w	r3, r7, #14
 80018ba:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m12[i + tOffset] = tData;
 80018bc:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 80018c0:	f107 0212 	add.w	r2, r7, #18
 80018c4:	8812      	ldrh	r2, [r2, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	f107 020e 	add.w	r2, r7, #14
 80018cc:	8811      	ldrh	r1, [r2, #0]
 80018ce:	4acf      	ldr	r2, [pc, #828]	; (8001c0c <runCommands+0x7f0>)
 80018d0:	3304      	adds	r3, #4
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	460a      	mov	r2, r1
 80018d8:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 80018da:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 80018de:	3301      	adds	r3, #1
 80018e0:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	f8b7 222e 	ldrh.w	r2, [r7, #558]	; 0x22e
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d3d8      	bcc.n	80018a4 <runCommands+0x488>
				}

				changeTableFlag = true;
 80018f2:	4bc7      	ldr	r3, [pc, #796]	; (8001c10 <runCommands+0x7f4>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 80018f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001900:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	2201      	movs	r2, #1
 8001908:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2			->4
 800190a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190e:	3302      	adds	r3, #2
 8001910:	f107 0212 	add.w	r2, r7, #18
 8001914:	8812      	ldrh	r2, [r2, #0]
 8001916:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	3304      	adds	r3, #4
 800191e:	f107 0210 	add.w	r2, r7, #16
 8001922:	8812      	ldrh	r2, [r2, #0]
 8001924:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1		->7
 8001926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192a:	2200      	movs	r2, #0
 800192c:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 800192e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001932:	2101      	movs	r1, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f009 f835 	bl	800a9a4 <CDC_Transmit_FS>
				return;
 800193a:	e182      	b.n	8001c42 <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x01)	//B_m12
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d15c      	bne.n	8001a02 <runCommands+0x5e6>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3302      	adds	r3, #2
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	b29a      	uxth	r2, r3
 8001952:	f107 0312 	add.w	r3, r7, #18
 8001956:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3304      	adds	r3, #4
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	b29a      	uxth	r2, r3
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001968:	2300      	movs	r3, #0
 800196a:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 800196e:	e01f      	b.n	80019b0 <runCommands+0x594>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001970:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	3306      	adds	r3, #6
 8001978:	1d3a      	adds	r2, r7, #4
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	4413      	add	r3, r2
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	b29a      	uxth	r2, r3
 8001982:	f107 030e 	add.w	r3, r7, #14
 8001986:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m12[i + tOffset] = tData;
 8001988:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 800198c:	f107 0212 	add.w	r2, r7, #18
 8001990:	8812      	ldrh	r2, [r2, #0]
 8001992:	4413      	add	r3, r2
 8001994:	f107 020e 	add.w	r2, r7, #14
 8001998:	8811      	ldrh	r1, [r2, #0]
 800199a:	4a9c      	ldr	r2, [pc, #624]	; (8001c0c <runCommands+0x7f0>)
 800199c:	335c      	adds	r3, #92	; 0x5c
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	460a      	mov	r2, r1
 80019a4:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 80019a6:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 80019aa:	3301      	adds	r3, #1
 80019ac:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d3d8      	bcc.n	8001970 <runCommands+0x554>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 80019be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c2:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80019c6:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	2201      	movs	r2, #1
 80019ce:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 80019d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d4:	3302      	adds	r3, #2
 80019d6:	f107 0212 	add.w	r2, r7, #18
 80019da:	8812      	ldrh	r2, [r2, #0]
 80019dc:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	3304      	adds	r3, #4
 80019e4:	f107 0210 	add.w	r2, r7, #16
 80019e8:	8812      	ldrh	r2, [r2, #0]
 80019ea:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	2200      	movs	r2, #0
 80019f2:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	2101      	movs	r1, #1
 80019fa:	4618      	mov	r0, r3
 80019fc:	f008 ffd2 	bl	800a9a4 <CDC_Transmit_FS>
				return;
 8001a00:	e11f      	b.n	8001c42 <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x02)	//A_m27
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3301      	adds	r3, #1
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d15c      	bne.n	8001ac8 <runCommands+0x6ac>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3302      	adds	r3, #2
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f107 0312 	add.w	r3, r7, #18
 8001a1c:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3304      	adds	r3, #4
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8001a34:	e01f      	b.n	8001a76 <runCommands+0x65a>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001a36:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	3306      	adds	r3, #6
 8001a3e:	1d3a      	adds	r2, r7, #4
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	f107 030e 	add.w	r3, r7, #14
 8001a4c:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m27[i + tOffset] = tData;
 8001a4e:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001a52:	f107 0212 	add.w	r2, r7, #18
 8001a56:	8812      	ldrh	r2, [r2, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f107 020e 	add.w	r2, r7, #14
 8001a5e:	8811      	ldrh	r1, [r2, #0]
 8001a60:	4a6a      	ldr	r2, [pc, #424]	; (8001c0c <runCommands+0x7f0>)
 8001a62:	33b4      	adds	r3, #180	; 0xb4
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	460a      	mov	r2, r1
 8001a6a:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8001a6c:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001a70:	3301      	adds	r3, #1
 8001a72:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	f8b7 222a 	ldrh.w	r2, [r7, #554]	; 0x22a
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d3d8      	bcc.n	8001a36 <runCommands+0x61a>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001a8c:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a92:	2201      	movs	r2, #1
 8001a94:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8001a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	f107 0212 	add.w	r2, r7, #18
 8001aa0:	8812      	ldrh	r2, [r2, #0]
 8001aa2:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	f107 0210 	add.w	r2, r7, #16
 8001aae:	8812      	ldrh	r2, [r2, #0]
 8001ab0:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abe:	2101      	movs	r1, #1
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f008 ff6f 	bl	800a9a4 <CDC_Transmit_FS>
				return;
 8001ac6:	e0bc      	b.n	8001c42 <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x03)	//B_m27
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d15d      	bne.n	8001b90 <runCommands+0x774>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3302      	adds	r3, #2
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	f107 0312 	add.w	r3, r7, #18
 8001ae2:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8001afa:	e020      	b.n	8001b3e <runCommands+0x722>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001afc:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	3306      	adds	r3, #6
 8001b04:	1d3a      	adds	r2, r7, #4
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	4413      	add	r3, r2
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	f107 030e 	add.w	r3, r7, #14
 8001b12:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m27[i + tOffset] = tData;
 8001b14:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001b18:	f107 0212 	add.w	r2, r7, #18
 8001b1c:	8812      	ldrh	r2, [r2, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	f107 020e 	add.w	r2, r7, #14
 8001b24:	8811      	ldrh	r1, [r2, #0]
 8001b26:	4a39      	ldr	r2, [pc, #228]	; (8001c0c <runCommands+0x7f0>)
 8001b28:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	460a      	mov	r2, r1
 8001b32:	805a      	strh	r2, [r3, #2]
				for (uint16_t i = 0; i < tCount; i++)
 8001b34:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001b38:	3301      	adds	r3, #1
 8001b3a:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d3d7      	bcc.n	8001afc <runCommands+0x6e0>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b50:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001b54:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	3302      	adds	r3, #2
 8001b64:	f107 0212 	add.w	r2, r7, #18
 8001b68:	8812      	ldrh	r2, [r2, #0]
 8001b6a:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b70:	3304      	adds	r3, #4
 8001b72:	f107 0210 	add.w	r2, r7, #16
 8001b76:	8812      	ldrh	r2, [r2, #0]
 8001b78:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7e:	2200      	movs	r2, #0
 8001b80:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b86:	2101      	movs	r1, #1
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f008 ff0b 	bl	800a9a4 <CDC_Transmit_FS>
				return;
 8001b8e:	e058      	b.n	8001c42 <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
		}
		UserTxBufferFS[0] = cmd;
 8001b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b94:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001b98:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f008 fefb 	bl	800a9a4 <CDC_Transmit_FS>
		return;
 8001bae:	e048      	b.n	8001c42 <runCommands+0x826>
		//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0B)	// TODO: Отправка CRC 1-4 таблицы [0x0B][1-4][CRC(1-4)]	answer:
 8001bb0:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001bb4:	2b0b      	cmp	r3, #11
 8001bb6:	d041      	beq.n	8001c3c <runCommands+0x820>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0C)	// TODO: Прием длины калибровочной таблицы [0x0C][Длина][???]
 8001bb8:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	d03f      	beq.n	8001c40 <runCommands+0x824>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0D)	// TODO: Запись во флеш калибровочной таблицы [0x0D] data: 1B (0x00 - успешно; 0x01 - ошибка при записи)	answer: 0x0D + 1B status
 8001bc0:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001bc4:	2b0d      	cmp	r3, #13
 8001bc6:	d13c      	bne.n	8001c42 <runCommands+0x826>
	{
		if (*Len >= 2 && (Buf[1] == 0x02))
 8001bc8:	463b      	mov	r3, r7
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d922      	bls.n	8001c18 <runCommands+0x7fc>
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d11c      	bne.n	8001c18 <runCommands+0x7fc>
		{
			//TODO: Функция записи фо флеш. FIXME: не работает запись фо флеш!
			 changeTableFlag = true;
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <runCommands+0x7f4>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
			// writeTableInFlash();
			printf("changeTableFlag = true!");
 8001be4:	480b      	ldr	r0, [pc, #44]	; (8001c14 <runCommands+0x7f8>)
 8001be6:	f009 fb15 	bl	800b214 <iprintf>
			UserTxBufferFS[0] = cmd;
 8001bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bee:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001bf2:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8001bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	705a      	strb	r2, [r3, #1]
			CDC_Transmit_FS(UserTxBufferFS, 2);
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	2102      	movs	r1, #2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f008 fece 	bl	800a9a4 <CDC_Transmit_FS>
			return;
 8001c08:	e01b      	b.n	8001c42 <runCommands+0x826>
 8001c0a:	bf00      	nop
 8001c0c:	200004bc 	.word	0x200004bc
 8001c10:	20000264 	.word	0x20000264
 8001c14:	0800c680 	.word	0x0800c680
		}
 		
		//--------------------------------------------------------------------------
		UserTxBufferFS[0] = cmd;
 8001c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001c20:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c26:	2201      	movs	r2, #1
 8001c28:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	2102      	movs	r1, #2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f008 feb7 	bl	800a9a4 <CDC_Transmit_FS>
		return;
 8001c36:	e004      	b.n	8001c42 <runCommands+0x826>
		return;
 8001c38:	bf00      	nop
 8001c3a:	e002      	b.n	8001c42 <runCommands+0x826>
		return;
 8001c3c:	bf00      	nop
 8001c3e:	e000      	b.n	8001c42 <runCommands+0x826>
		return;
 8001c40:	bf00      	nop
		//--------------------------------------------------------------------------
	}
//-------------------------------------------------------------------------
	
}
 8001c42:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	bf00      	nop

08001c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c52:	f000 fef9 	bl	8002a48 <HAL_Init>

  /* USER CODE BEGIN Init */
//--------------------------------------------------------------------------
#if DWT_INIT
	DWT_Init();
 8001c56:	f7ff f935 	bl	8000ec4 <DWT_Init>
	//--------------------------------------------------------------------------

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c5a:	f000 f9f5 	bl	8002048 <SystemClock_Config>
//-------------------------------------------------------------------------

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c5e:	f000 fb9f 	bl	80023a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c62:	f000 faa1 	bl	80021a8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001c66:	f008 fddb 	bl	800a820 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001c6a:	f000 fa4b 	bl	8002104 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001c6e:	f000 fad3 	bl	8002218 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c72:	f000 fb33 	bl	80022dc <MX_TIM4_Init>
  MX_CRC_Init();
 8001c76:	f000 fa83 	bl	8002180 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	//**************************************************************************
#if TEST_UID
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 8001c7a:	4b99      	ldr	r3, [pc, #612]	; (8001ee0 <main+0x294>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	4b98      	ldr	r3, [pc, #608]	; (8001ee4 <main+0x298>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	4b97      	ldr	r3, [pc, #604]	; (8001ee8 <main+0x29c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a96      	ldr	r2, [pc, #600]	; (8001eec <main+0x2a0>)
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	9201      	str	r2, [sp, #4]
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	460a      	mov	r2, r1
 8001c9e:	4994      	ldr	r1, [pc, #592]	; (8001ef0 <main+0x2a4>)
 8001ca0:	4894      	ldr	r0, [pc, #592]	; (8001ef4 <main+0x2a8>)
 8001ca2:	f009 facf 	bl	800b244 <siprintf>
	printf(buffer);
 8001ca6:	4893      	ldr	r0, [pc, #588]	; (8001ef4 <main+0x2a8>)
 8001ca8:	f009 fab4 	bl	800b214 <iprintf>
#endif /* TEST_UID */

	//**************************************************************************
#if TEST_TIM_CAPTURE
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001cac:	2100      	movs	r1, #0
 8001cae:	4892      	ldr	r0, [pc, #584]	; (8001ef8 <main+0x2ac>)
 8001cb0:	f004 fc84 	bl	80065bc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001cb4:	2104      	movs	r1, #4
 8001cb6:	4890      	ldr	r0, [pc, #576]	; (8001ef8 <main+0x2ac>)
 8001cb8:	f004 fc80 	bl	80065bc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	488f      	ldr	r0, [pc, #572]	; (8001efc <main+0x2b0>)
 8001cc0:	f004 fc7c 	bl	80065bc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	488d      	ldr	r0, [pc, #564]	; (8001efc <main+0x2b0>)
 8001cc8:	f004 fc78 	bl	80065bc <HAL_TIM_IC_Start_IT>
#endif /* TEST_TIM_CAPTURE */
//--------------------------------------------------------------------------
#if TEST_DAC
	SetAllDAC();
 8001ccc:	f7ff f9e2 	bl	8001094 <SetAllDAC>
#endif /* TEST_DAC */
	   //**************************************************************************
#if TEST_ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001cd0:	488b      	ldr	r0, [pc, #556]	; (8001f00 <main+0x2b4>)
 8001cd2:	f001 fb29 	bl	8003328 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 8001cd6:	488a      	ldr	r0, [pc, #552]	; (8001f00 <main+0x2b4>)
 8001cd8:	f001 f814 	bl	8002d04 <HAL_ADC_Start_IT>

#endif /* TEST_ADC */
//**************************************************************************
#if TEST_FLASH_TABLE
	writeTableInFlash();
 8001cdc:	f7ff f924 	bl	8000f28 <writeTableInFlash>
	// Чтение DevNVRAM
    volatile uint32_t l_Address = FLASH_TABLE_START_ADDR;
 8001ce0:	4b88      	ldr	r3, [pc, #544]	; (8001f04 <main+0x2b8>)
 8001ce2:	607b      	str	r3, [r7, #4]
    uint32_t l_Error = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	603b      	str	r3, [r7, #0]
    uint32_t l_Index = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
    // TODO: Надо по запросе какая версия калиброчной табцы высылать значения дефолтной таблице...
    //--------------------------------------------------------------------------
*/
#endif /* TEST_FLASH_TABLE */

	uint32_t timme = 0; // для таймера в 10 сек
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// Циклически проверяем соотвествует ли информация в памяти массиву настроек?
		if ((HAL_GetTick() - timme) > 10000) // интервал  10сек
 8001cf0:	f000 ff02 	bl	8002af8 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d96a      	bls.n	8001dd8 <main+0x18c>
		{
#if TEST_FLASH_TABLE

			if (changeTableFlag)
 8001d02:	4b81      	ldr	r3, [pc, #516]	; (8001f08 <main+0x2bc>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d063      	beq.n	8001dd2 <main+0x186>
			{
				changeTableFlag = false;
 8001d0a:	4b7f      	ldr	r3, [pc, #508]	; (8001f08 <main+0x2bc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
				printf("write");
 8001d10:	487e      	ldr	r0, [pc, #504]	; (8001f0c <main+0x2c0>)
 8001d12:	f009 fa7f 	bl	800b214 <iprintf>
				// Циклически проверяем соотвествует ли информация в памяти массиву настроек?

				l_Address = FLASH_TABLE_START_ADDR;
 8001d16:	4b7b      	ldr	r3, [pc, #492]	; (8001f04 <main+0x2b8>)
 8001d18:	607b      	str	r3, [r7, #4]
				l_Error = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	603b      	str	r3, [r7, #0]
				l_Index = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
				//Читаем и сравниваем
				while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001d22:	e010      	b.n	8001d46 <main+0xfa>
				{
					if (DevNVRAM.data32[l_Index] != *(__IO uint32_t *)l_Address)
 8001d24:	4a7a      	ldr	r2, [pc, #488]	; (8001f10 <main+0x2c4>)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d002      	beq.n	8001d3a <main+0xee>
					{
						l_Error++;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	603b      	str	r3, [r7, #0]
					}
					l_Index = l_Index + 1;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
					l_Address = l_Address + 4;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3304      	adds	r3, #4
 8001d44:	607b      	str	r3, [r7, #4]
				while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a72      	ldr	r2, [pc, #456]	; (8001f14 <main+0x2c8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d9ea      	bls.n	8001d24 <main+0xd8>
				}

				if (l_Error > 0)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d038      	beq.n	8001dc6 <main+0x17a>
				{ // конфигурация изменилась сохраняем
					// Готовим к записи в память
					HAL_FLASH_Unlock();
 8001d54:	f001 fd28 	bl	80037a8 <HAL_FLASH_Unlock>
					// Очищаем страницу памяти
					HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8001d58:	463b      	mov	r3, r7
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	486e      	ldr	r0, [pc, #440]	; (8001f18 <main+0x2cc>)
 8001d5e:	f001 fe0b 	bl	8003978 <HAL_FLASHEx_Erase>
					//Пишем данные в память
					l_Address = FLASH_TABLE_START_ADDR;
 8001d62:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <main+0x2b8>)
 8001d64:	607b      	str	r3, [r7, #4]
					l_Error = 0x00;
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
					l_Index = 0x00;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]

					DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8001d6e:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <main+0x2c4>)
 8001d70:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8001d74:	3301      	adds	r3, #1
 8001d76:	4a66      	ldr	r2, [pc, #408]	; (8001f10 <main+0x2c4>)
 8001d78:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
					DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));
 8001d7c:	4b64      	ldr	r3, [pc, #400]	; (8001f10 <main+0x2c4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

					while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001d84:	e019      	b.n	8001dba <main+0x16e>
					{
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8001d86:	6879      	ldr	r1, [r7, #4]
											  DevNVRAM.data32[l_Index]) != HAL_OK)
 8001d88:	4a61      	ldr	r2, [pc, #388]	; (8001f10 <main+0x2c4>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8001d90:	461a      	mov	r2, r3
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	2002      	movs	r0, #2
 8001d98:	f001 fc96 	bl	80036c8 <HAL_FLASH_Program>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <main+0x15c>
						{
							l_Error++;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	603b      	str	r3, [r7, #0]
						}

						l_Address = l_Address + 4;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3304      	adds	r3, #4
 8001dac:	607b      	str	r3, [r7, #4]
						l_Index = l_Index + 1;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
						HAL_Delay(10);
 8001db4:	200a      	movs	r0, #10
 8001db6:	f000 fea9 	bl	8002b0c <HAL_Delay>
					while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a55      	ldr	r2, [pc, #340]	; (8001f14 <main+0x2c8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d9e1      	bls.n	8001d86 <main+0x13a>
					}
					HAL_FLASH_Lock();
 8001dc2:	f001 fd17 	bl	80037f4 <HAL_FLASH_Lock>
				}
				HAL_Delay(100);
 8001dc6:	2064      	movs	r0, #100	; 0x64
 8001dc8:	f000 fea0 	bl	8002b0c <HAL_Delay>
				//--------------------------------------------------------------------------
				printf("flash done");
 8001dcc:	4853      	ldr	r0, [pc, #332]	; (8001f1c <main+0x2d0>)
 8001dce:	f009 fa21 	bl	800b214 <iprintf>
			}
#endif /* TEST_FLASH_TABLE */
			timme = HAL_GetTick();
 8001dd2:	f000 fe91 	bl	8002af8 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]
		}

//**************************************************************************
#if TEST_READ_BTN //TODO: данная реализация плохо отрабатывает! TODO: Нужно переделать на EXTI+TIM

		uint32_t ms = HAL_GetTick();
 8001dd8:	f000 fe8e 	bl	8002af8 <HAL_GetTick>
 8001ddc:	60f8      	str	r0, [r7, #12]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 8001dde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001de2:	484f      	ldr	r0, [pc, #316]	; (8001f20 <main+0x2d4>)
 8001de4:	f001 fff4 	bl	8003dd0 <HAL_GPIO_ReadPin>
 8001de8:	4603      	mov	r3, r0
 8001dea:	72fb      	strb	r3, [r7, #11]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 8001dec:	7afb      	ldrb	r3, [r7, #11]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d113      	bne.n	8001e1a <main+0x1ce>
 8001df2:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <main+0x2d8>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10f      	bne.n	8001e1a <main+0x1ce>
 8001dfa:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <main+0x2dc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b32      	cmp	r3, #50	; 0x32
 8001e04:	d909      	bls.n	8001e1a <main+0x1ce>
		{
			short_state1 = 1;
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <main+0x2d8>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 8001e0c:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <main+0x2e0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8001e12:	4a45      	ldr	r2, [pc, #276]	; (8001f28 <main+0x2dc>)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	e02e      	b.n	8001e78 <main+0x22c>
		}
		else if (key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 8001e1a:	7afb      	ldrb	r3, [r7, #11]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d111      	bne.n	8001e44 <main+0x1f8>
 8001e20:	4b42      	ldr	r3, [pc, #264]	; (8001f2c <main+0x2e0>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10d      	bne.n	8001e44 <main+0x1f8>
 8001e28:	4b3f      	ldr	r3, [pc, #252]	; (8001f28 <main+0x2dc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e34:	d906      	bls.n	8001e44 <main+0x1f8>
		{
			long_state1 = 1;
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <main+0x2e0>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 8001e3c:	4b3c      	ldr	r3, [pc, #240]	; (8001f30 <main+0x2e4>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e019      	b.n	8001e78 <main+0x22c>
		}
		else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 8001e44:	7afb      	ldrb	r3, [r7, #11]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d116      	bne.n	8001e78 <main+0x22c>
 8001e4a:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <main+0x2d8>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d012      	beq.n	8001e78 <main+0x22c>
 8001e52:	4b35      	ldr	r3, [pc, #212]	; (8001f28 <main+0x2dc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b32      	cmp	r3, #50	; 0x32
 8001e5c:	d90c      	bls.n	8001e78 <main+0x22c>
		{
			short_state1 = 0;
 8001e5e:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <main+0x2d8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8001e64:	4a30      	ldr	r2, [pc, #192]	; (8001f28 <main+0x2dc>)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6013      	str	r3, [r2, #0]

			if (!long_state1)
 8001e6a:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <main+0x2e0>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <main+0x22c>
			{
				// действие на короткое нажатие
				btn1_short_rd = 1;
 8001e72:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <main+0x2e8>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 8001e78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e7c:	4828      	ldr	r0, [pc, #160]	; (8001f20 <main+0x2d4>)
 8001e7e:	f001 ffa7 	bl	8003dd0 <HAL_GPIO_ReadPin>
 8001e82:	4603      	mov	r3, r0
 8001e84:	72bb      	strb	r3, [r7, #10]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 8001e86:	7abb      	ldrb	r3, [r7, #10]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d113      	bne.n	8001eb4 <main+0x268>
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <main+0x2ec>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10f      	bne.n	8001eb4 <main+0x268>
 8001e94:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <main+0x2f0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b32      	cmp	r3, #50	; 0x32
 8001e9e:	d909      	bls.n	8001eb4 <main+0x268>
		{
			short_state2 = 1;
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <main+0x2ec>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <main+0x2f4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8001eac:	4a23      	ldr	r2, [pc, #140]	; (8001f3c <main+0x2f0>)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e063      	b.n	8001f7c <main+0x330>
		}
		else if (key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 8001eb4:	7abb      	ldrb	r3, [r7, #10]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d146      	bne.n	8001f48 <main+0x2fc>
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <main+0x2f4>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d142      	bne.n	8001f48 <main+0x2fc>
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <main+0x2f0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ece:	d93b      	bls.n	8001f48 <main+0x2fc>
		{
			long_state2 = 1;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <main+0x2f4>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <main+0x2f8>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e04e      	b.n	8001f7c <main+0x330>
 8001ede:	bf00      	nop
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	20000004 	.word	0x20000004
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	2000000c 	.word	0x2000000c
 8001ef0:	0800c698 	.word	0x0800c698
 8001ef4:	20000224 	.word	0x20000224
 8001ef8:	2000090c 	.word	0x2000090c
 8001efc:	200008bc 	.word	0x200008bc
 8001f00:	20000954 	.word	0x20000954
 8001f04:	0801fc00 	.word	0x0801fc00
 8001f08:	20000264 	.word	0x20000264
 8001f0c:	0800c6ac 	.word	0x0800c6ac
 8001f10:	200004bc 	.word	0x200004bc
 8001f14:	0801ffff 	.word	0x0801ffff
 8001f18:	20000010 	.word	0x20000010
 8001f1c:	0800c6b4 	.word	0x0800c6b4
 8001f20:	40010c00 	.word	0x40010c00
 8001f24:	2000026a 	.word	0x2000026a
 8001f28:	2000026c 	.word	0x2000026c
 8001f2c:	2000026b 	.word	0x2000026b
 8001f30:	20000270 	.word	0x20000270
 8001f34:	20000271 	.word	0x20000271
 8001f38:	20000272 	.word	0x20000272
 8001f3c:	20000274 	.word	0x20000274
 8001f40:	20000273 	.word	0x20000273
 8001f44:	20000278 	.word	0x20000278
		}
		else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 8001f48:	7abb      	ldrb	r3, [r7, #10]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d116      	bne.n	8001f7c <main+0x330>
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <main+0x3d4>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d012      	beq.n	8001f7c <main+0x330>
 8001f56:	4b33      	ldr	r3, [pc, #204]	; (8002024 <main+0x3d8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b32      	cmp	r3, #50	; 0x32
 8001f60:	d90c      	bls.n	8001f7c <main+0x330>
		{
			short_state2 = 0;
 8001f62:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <main+0x3d4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8001f68:	4a2e      	ldr	r2, [pc, #184]	; (8002024 <main+0x3d8>)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6013      	str	r3, [r2, #0]

			if (!long_state2)
 8001f6e:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <main+0x3dc>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <main+0x330>
			{
				// действие на короткое нажатие
				btn2_short_rd = 1;
 8001f76:	4b2d      	ldr	r3, [pc, #180]	; (800202c <main+0x3e0>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 8001f7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f80:	482b      	ldr	r0, [pc, #172]	; (8002030 <main+0x3e4>)
 8001f82:	f001 ff25 	bl	8003dd0 <HAL_GPIO_ReadPin>
 8001f86:	4603      	mov	r3, r0
 8001f88:	727b      	strb	r3, [r7, #9]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 8001f8a:	7a7b      	ldrb	r3, [r7, #9]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d113      	bne.n	8001fb8 <main+0x36c>
 8001f90:	4b28      	ldr	r3, [pc, #160]	; (8002034 <main+0x3e8>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10f      	bne.n	8001fb8 <main+0x36c>
 8001f98:	4b27      	ldr	r3, [pc, #156]	; (8002038 <main+0x3ec>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b32      	cmp	r3, #50	; 0x32
 8001fa2:	d909      	bls.n	8001fb8 <main+0x36c>
		{
			short_state3 = 1;
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <main+0x3e8>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <main+0x3f0>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8001fb0:	4a21      	ldr	r2, [pc, #132]	; (8002038 <main+0x3ec>)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e032      	b.n	800201e <main+0x3d2>
		}
		else if (key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 8001fb8:	7a7b      	ldrb	r3, [r7, #9]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d111      	bne.n	8001fe2 <main+0x396>
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	; (800203c <main+0x3f0>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10d      	bne.n	8001fe2 <main+0x396>
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <main+0x3ec>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fd2:	d906      	bls.n	8001fe2 <main+0x396>
		{
			long_state3 = 1;
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <main+0x3f0>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 8001fda:	4b19      	ldr	r3, [pc, #100]	; (8002040 <main+0x3f4>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	e01d      	b.n	800201e <main+0x3d2>
		}
		else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 8001fe2:	7a7b      	ldrb	r3, [r7, #9]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	f47f ae83 	bne.w	8001cf0 <main+0xa4>
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <main+0x3e8>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f43f ae7e 	beq.w	8001cf0 <main+0xa4>
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <main+0x3ec>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b32      	cmp	r3, #50	; 0x32
 8001ffe:	f67f ae77 	bls.w	8001cf0 <main+0xa4>
		{
			short_state3 = 0;
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <main+0x3e8>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8002008:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <main+0x3ec>)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6013      	str	r3, [r2, #0]

			if (!long_state3)
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <main+0x3f0>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	f47f ae6c 	bne.w	8001cf0 <main+0xa4>
			{
				// действие на короткое нажатие
				btn3_short_rd = 1;
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <main+0x3f8>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
	{
 800201e:	e667      	b.n	8001cf0 <main+0xa4>
 8002020:	20000272 	.word	0x20000272
 8002024:	20000274 	.word	0x20000274
 8002028:	20000273 	.word	0x20000273
 800202c:	20000279 	.word	0x20000279
 8002030:	40010c00 	.word	0x40010c00
 8002034:	2000027a 	.word	0x2000027a
 8002038:	2000027c 	.word	0x2000027c
 800203c:	2000027b 	.word	0x2000027b
 8002040:	20000280 	.word	0x20000280
 8002044:	20000281 	.word	0x20000281

08002048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b094      	sub	sp, #80	; 0x50
 800204c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800204e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002052:	2228      	movs	r2, #40	; 0x28
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f009 f8d4 	bl	800b204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002078:	2301      	movs	r3, #1
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800207c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002082:	2300      	movs	r3, #0
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002086:	2301      	movs	r3, #1
 8002088:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800208a:	2302      	movs	r3, #2
 800208c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800208e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002092:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002094:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002098:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800209a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fa56 	bl	8005550 <HAL_RCC_OscConfig>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80020aa:	f000 fa2f 	bl	800250c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ae:	230f      	movs	r3, #15
 80020b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	2102      	movs	r1, #2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 fcc0 	bl	8005a50 <HAL_RCC_ClockConfig>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80020d6:	f000 fa19 	bl	800250c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80020da:	2312      	movs	r3, #18
 80020dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80020de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fe36 	bl	8005d5c <HAL_RCCEx_PeriphCLKConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80020f6:	f000 fa09 	bl	800250c <Error_Handler>
  }
}
 80020fa:	bf00      	nop
 80020fc:	3750      	adds	r7, #80	; 0x50
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002114:	4b18      	ldr	r3, [pc, #96]	; (8002178 <MX_ADC1_Init+0x74>)
 8002116:	4a19      	ldr	r2, [pc, #100]	; (800217c <MX_ADC1_Init+0x78>)
 8002118:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <MX_ADC1_Init+0x74>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002120:	4b15      	ldr	r3, [pc, #84]	; (8002178 <MX_ADC1_Init+0x74>)
 8002122:	2201      	movs	r2, #1
 8002124:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002126:	4b14      	ldr	r3, [pc, #80]	; (8002178 <MX_ADC1_Init+0x74>)
 8002128:	2200      	movs	r2, #0
 800212a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <MX_ADC1_Init+0x74>)
 800212e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002132:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <MX_ADC1_Init+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <MX_ADC1_Init+0x74>)
 800213c:	2201      	movs	r2, #1
 800213e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002140:	480d      	ldr	r0, [pc, #52]	; (8002178 <MX_ADC1_Init+0x74>)
 8002142:	f000 fd07 	bl	8002b54 <HAL_ADC_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800214c:	f000 f9de 	bl	800250c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002150:	2303      	movs	r3, #3
 8002152:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002154:	2301      	movs	r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002158:	2302      	movs	r3, #2
 800215a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	4619      	mov	r1, r3
 8002160:	4805      	ldr	r0, [pc, #20]	; (8002178 <MX_ADC1_Init+0x74>)
 8002162:	f000 ff5d 	bl	8003020 <HAL_ADC_ConfigChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800216c:	f000 f9ce 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000954 	.word	0x20000954
 800217c:	40012400 	.word	0x40012400

08002180 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_CRC_Init+0x20>)
 8002186:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <MX_CRC_Init+0x24>)
 8002188:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <MX_CRC_Init+0x20>)
 800218c:	f001 fa7f 	bl	800368e <HAL_CRC_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002196:	f000 f9b9 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000904 	.word	0x20000904
 80021a4:	40023000 	.word	0x40023000

080021a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <MX_SPI1_Init+0x68>)
 80021ae:	4a19      	ldr	r2, [pc, #100]	; (8002214 <MX_SPI1_Init+0x6c>)
 80021b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021b2:	4b17      	ldr	r3, [pc, #92]	; (8002210 <MX_SPI1_Init+0x68>)
 80021b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <MX_SPI1_Init+0x68>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <MX_SPI1_Init+0x68>)
 80021c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <MX_SPI1_Init+0x68>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <MX_SPI1_Init+0x68>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <MX_SPI1_Init+0x68>)
 80021d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <MX_SPI1_Init+0x68>)
 80021de:	2208      	movs	r2, #8
 80021e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <MX_SPI1_Init+0x68>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <MX_SPI1_Init+0x68>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <MX_SPI1_Init+0x68>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <MX_SPI1_Init+0x68>)
 80021f6:	220a      	movs	r2, #10
 80021f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <MX_SPI1_Init+0x68>)
 80021fc:	f003 ff28 	bl	8006050 <HAL_SPI_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002206:	f000 f981 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000984 	.word	0x20000984
 8002214:	40013000 	.word	0x40013000

08002218 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800221e:	f107 0310 	add.w	r3, r7, #16
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002228:	463b      	mov	r3, r7
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <MX_TIM3_Init+0xbc>)
 8002236:	4a28      	ldr	r2, [pc, #160]	; (80022d8 <MX_TIM3_Init+0xc0>)
 8002238:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <MX_TIM3_Init+0xbc>)
 800223c:	2247      	movs	r2, #71	; 0x47
 800223e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <MX_TIM3_Init+0xbc>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 8002246:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <MX_TIM3_Init+0xbc>)
 8002248:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 800224c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224e:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <MX_TIM3_Init+0xbc>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <MX_TIM3_Init+0xbc>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800225a:	481e      	ldr	r0, [pc, #120]	; (80022d4 <MX_TIM3_Init+0xbc>)
 800225c:	f004 f95e 	bl	800651c <HAL_TIM_IC_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002266:	f000 f951 	bl	800250c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002272:	f107 0310 	add.w	r3, r7, #16
 8002276:	4619      	mov	r1, r3
 8002278:	4816      	ldr	r0, [pc, #88]	; (80022d4 <MX_TIM3_Init+0xbc>)
 800227a:	f004 fe3d 	bl	8006ef8 <HAL_TIMEx_MasterConfigSynchronization>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002284:	f000 f942 	bl	800250c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002288:	2300      	movs	r3, #0
 800228a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800228c:	2301      	movs	r3, #1
 800228e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002298:	463b      	mov	r3, r7
 800229a:	2200      	movs	r2, #0
 800229c:	4619      	mov	r1, r3
 800229e:	480d      	ldr	r0, [pc, #52]	; (80022d4 <MX_TIM3_Init+0xbc>)
 80022a0:	f004 fb9a 	bl	80069d8 <HAL_TIM_IC_ConfigChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80022aa:	f000 f92f 	bl	800250c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80022ae:	2302      	movs	r3, #2
 80022b0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80022b2:	2302      	movs	r3, #2
 80022b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022b6:	463b      	mov	r3, r7
 80022b8:	2204      	movs	r2, #4
 80022ba:	4619      	mov	r1, r3
 80022bc:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_TIM3_Init+0xbc>)
 80022be:	f004 fb8b 	bl	80069d8 <HAL_TIM_IC_ConfigChannel>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80022c8:	f000 f920 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022cc:	bf00      	nop
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	2000090c 	.word	0x2000090c
 80022d8:	40000400 	.word	0x40000400

080022dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e2:	f107 0310 	add.w	r3, r7, #16
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022ec:	463b      	mov	r3, r7
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <MX_TIM4_Init+0xbc>)
 80022fa:	4a28      	ldr	r2, [pc, #160]	; (800239c <MX_TIM4_Init+0xc0>)
 80022fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <MX_TIM4_Init+0xbc>)
 8002300:	2247      	movs	r2, #71	; 0x47
 8002302:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <MX_TIM4_Init+0xbc>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 800230a:	4b23      	ldr	r3, [pc, #140]	; (8002398 <MX_TIM4_Init+0xbc>)
 800230c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8002310:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <MX_TIM4_Init+0xbc>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002318:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <MX_TIM4_Init+0xbc>)
 800231a:	2200      	movs	r2, #0
 800231c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800231e:	481e      	ldr	r0, [pc, #120]	; (8002398 <MX_TIM4_Init+0xbc>)
 8002320:	f004 f8fc 	bl	800651c <HAL_TIM_IC_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800232a:	f000 f8ef 	bl	800250c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	4619      	mov	r1, r3
 800233c:	4816      	ldr	r0, [pc, #88]	; (8002398 <MX_TIM4_Init+0xbc>)
 800233e:	f004 fddb 	bl	8006ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002348:	f000 f8e0 	bl	800250c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800234c:	2300      	movs	r3, #0
 800234e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002350:	2301      	movs	r3, #1
 8002352:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800235c:	463b      	mov	r3, r7
 800235e:	2200      	movs	r2, #0
 8002360:	4619      	mov	r1, r3
 8002362:	480d      	ldr	r0, [pc, #52]	; (8002398 <MX_TIM4_Init+0xbc>)
 8002364:	f004 fb38 	bl	80069d8 <HAL_TIM_IC_ConfigChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800236e:	f000 f8cd 	bl	800250c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002372:	2302      	movs	r3, #2
 8002374:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002376:	2302      	movs	r3, #2
 8002378:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800237a:	463b      	mov	r3, r7
 800237c:	2204      	movs	r2, #4
 800237e:	4619      	mov	r1, r3
 8002380:	4805      	ldr	r0, [pc, #20]	; (8002398 <MX_TIM4_Init+0xbc>)
 8002382:	f004 fb29 	bl	80069d8 <HAL_TIM_IC_ConfigChannel>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800238c:	f000 f8be 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200008bc 	.word	0x200008bc
 800239c:	40000800 	.word	0x40000800

080023a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b4:	4b51      	ldr	r3, [pc, #324]	; (80024fc <MX_GPIO_Init+0x15c>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	4a50      	ldr	r2, [pc, #320]	; (80024fc <MX_GPIO_Init+0x15c>)
 80023ba:	f043 0310 	orr.w	r3, r3, #16
 80023be:	6193      	str	r3, [r2, #24]
 80023c0:	4b4e      	ldr	r3, [pc, #312]	; (80024fc <MX_GPIO_Init+0x15c>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023cc:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <MX_GPIO_Init+0x15c>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	4a4a      	ldr	r2, [pc, #296]	; (80024fc <MX_GPIO_Init+0x15c>)
 80023d2:	f043 0320 	orr.w	r3, r3, #32
 80023d6:	6193      	str	r3, [r2, #24]
 80023d8:	4b48      	ldr	r3, [pc, #288]	; (80024fc <MX_GPIO_Init+0x15c>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e4:	4b45      	ldr	r3, [pc, #276]	; (80024fc <MX_GPIO_Init+0x15c>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	4a44      	ldr	r2, [pc, #272]	; (80024fc <MX_GPIO_Init+0x15c>)
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	6193      	str	r3, [r2, #24]
 80023f0:	4b42      	ldr	r3, [pc, #264]	; (80024fc <MX_GPIO_Init+0x15c>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fc:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <MX_GPIO_Init+0x15c>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4a3e      	ldr	r2, [pc, #248]	; (80024fc <MX_GPIO_Init+0x15c>)
 8002402:	f043 0308 	orr.w	r3, r3, #8
 8002406:	6193      	str	r3, [r2, #24]
 8002408:	4b3c      	ldr	r3, [pc, #240]	; (80024fc <MX_GPIO_Init+0x15c>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	687b      	ldr	r3, [r7, #4]


  // reset USB DP (D+)
  // инициализируем пин DP как выход
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241a:	2301      	movs	r3, #1
 800241c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2302      	movs	r3, #2
 8002420:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4619      	mov	r1, r3
 8002428:	4835      	ldr	r0, [pc, #212]	; (8002500 <MX_GPIO_Init+0x160>)
 800242a:	f001 fb4d 	bl	8003ac8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // прижимаем DP к "земле"
 800242e:	2200      	movs	r2, #0
 8002430:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002434:	4832      	ldr	r0, [pc, #200]	; (8002500 <MX_GPIO_Init+0x160>)
 8002436:	f001 fce2 	bl	8003dfe <HAL_GPIO_WritePin>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 800243a:	2300      	movs	r3, #0
 800243c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800243e:	e002      	b.n	8002446 <MX_GPIO_Init+0xa6>
 8002440:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002442:	3301      	adds	r3, #1
 8002444:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002446:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002448:	f242 720f 	movw	r2, #9999	; 0x270f
 800244c:	4293      	cmp	r3, r2
 800244e:	d9f7      	bls.n	8002440 <MX_GPIO_Init+0xa0>

  // переинициализируем пин для работы с USB
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4619      	mov	r1, r3
 800245e:	4828      	ldr	r0, [pc, #160]	; (8002500 <MX_GPIO_Init+0x160>)
 8002460:	f001 fb32 	bl	8003ac8 <HAL_GPIO_Init>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 8002464:	2300      	movs	r3, #0
 8002466:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002468:	e002      	b.n	8002470 <MX_GPIO_Init+0xd0>
 800246a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800246c:	3301      	adds	r3, #1
 800246e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002472:	f242 720f 	movw	r2, #9999	; 0x270f
 8002476:	4293      	cmp	r3, r2
 8002478:	d9f7      	bls.n	800246a <MX_GPIO_Init+0xca>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800247a:	2200      	movs	r2, #0
 800247c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002480:	4820      	ldr	r0, [pc, #128]	; (8002504 <MX_GPIO_Init+0x164>)
 8002482:	f001 fcbc 	bl	8003dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8002486:	2200      	movs	r2, #0
 8002488:	f240 4112 	movw	r1, #1042	; 0x412
 800248c:	481c      	ldr	r0, [pc, #112]	; (8002500 <MX_GPIO_Init+0x160>)
 800248e:	f001 fcb6 	bl	8003dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8002492:	2201      	movs	r2, #1
 8002494:	2104      	movs	r1, #4
 8002496:	481a      	ldr	r0, [pc, #104]	; (8002500 <MX_GPIO_Init+0x160>)
 8002498:	f001 fcb1 	bl	8003dfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800249c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a2:	2301      	movs	r3, #1
 80024a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	2302      	movs	r3, #2
 80024ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	4813      	ldr	r0, [pc, #76]	; (8002504 <MX_GPIO_Init+0x164>)
 80024b6:	f001 fb07 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 80024ba:	f240 4316 	movw	r3, #1046	; 0x416
 80024be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c0:	2301      	movs	r3, #1
 80024c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	2302      	movs	r3, #2
 80024ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	4619      	mov	r1, r3
 80024d2:	480b      	ldr	r0, [pc, #44]	; (8002500 <MX_GPIO_Init+0x160>)
 80024d4:	f001 faf8 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80024d8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80024dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e6:	f107 0314 	add.w	r3, r7, #20
 80024ea:	4619      	mov	r1, r3
 80024ec:	4806      	ldr	r0, [pc, #24]	; (8002508 <MX_GPIO_Init+0x168>)
 80024ee:	f001 faeb 	bl	8003ac8 <HAL_GPIO_Init>

}
 80024f2:	bf00      	nop
 80024f4:	3728      	adds	r7, #40	; 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	40010800 	.word	0x40010800
 8002504:	40011000 	.word	0x40011000
 8002508:	40010c00 	.word	0x40010c00

0800250c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_MspInit+0x5c>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	4a14      	ldr	r2, [pc, #80]	; (8002574 <HAL_MspInit+0x5c>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6193      	str	r3, [r2, #24]
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_MspInit+0x5c>)
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_MspInit+0x5c>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <HAL_MspInit+0x5c>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002540:	61d3      	str	r3, [r2, #28]
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_MspInit+0x5c>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_MspInit+0x60>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <HAL_MspInit+0x60>)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	40021000 	.word	0x40021000
 8002578:	40010000 	.word	0x40010000

0800257c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <HAL_ADC_MspInit+0x7c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d129      	bne.n	80025f0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800259c:	4b17      	ldr	r3, [pc, #92]	; (80025fc <HAL_ADC_MspInit+0x80>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4a16      	ldr	r2, [pc, #88]	; (80025fc <HAL_ADC_MspInit+0x80>)
 80025a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a6:	6193      	str	r3, [r2, #24]
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <HAL_ADC_MspInit+0x80>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <HAL_ADC_MspInit+0x80>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a10      	ldr	r2, [pc, #64]	; (80025fc <HAL_ADC_MspInit+0x80>)
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	6193      	str	r3, [r2, #24]
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <HAL_ADC_MspInit+0x80>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025cc:	2308      	movs	r3, #8
 80025ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025d0:	2303      	movs	r3, #3
 80025d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d4:	f107 0310 	add.w	r3, r7, #16
 80025d8:	4619      	mov	r1, r3
 80025da:	4809      	ldr	r0, [pc, #36]	; (8002600 <HAL_ADC_MspInit+0x84>)
 80025dc:	f001 fa74 	bl	8003ac8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2100      	movs	r1, #0
 80025e4:	2012      	movs	r0, #18
 80025e6:	f001 f81c 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80025ea:	2012      	movs	r0, #18
 80025ec:	f001 f835 	bl	800365a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025f0:	bf00      	nop
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40012400 	.word	0x40012400
 80025fc:	40021000 	.word	0x40021000
 8002600:	40010800 	.word	0x40010800

08002604 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a09      	ldr	r2, [pc, #36]	; (8002638 <HAL_CRC_MspInit+0x34>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10b      	bne.n	800262e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_CRC_MspInit+0x38>)
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	4a08      	ldr	r2, [pc, #32]	; (800263c <HAL_CRC_MspInit+0x38>)
 800261c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002620:	6153      	str	r3, [r2, #20]
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_CRC_MspInit+0x38>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	40023000 	.word	0x40023000
 800263c:	40021000 	.word	0x40021000

08002640 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0310 	add.w	r3, r7, #16
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <HAL_SPI_MspInit+0x70>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d123      	bne.n	80026a8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002660:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <HAL_SPI_MspInit+0x74>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <HAL_SPI_MspInit+0x74>)
 8002666:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800266a:	6193      	str	r3, [r2, #24]
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_SPI_MspInit+0x74>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_SPI_MspInit+0x74>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <HAL_SPI_MspInit+0x74>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_SPI_MspInit+0x74>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8002690:	23a0      	movs	r3, #160	; 0xa0
 8002692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4619      	mov	r1, r3
 80026a2:	4805      	ldr	r0, [pc, #20]	; (80026b8 <HAL_SPI_MspInit+0x78>)
 80026a4:	f001 fa10 	bl	8003ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026a8:	bf00      	nop
 80026aa:	3720      	adds	r7, #32
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40013000 	.word	0x40013000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40010800 	.word	0x40010800

080026bc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	; 0x30
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a3b      	ldr	r2, [pc, #236]	; (80027c4 <HAL_TIM_IC_MspInit+0x108>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d13e      	bne.n	800275a <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026dc:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <HAL_TIM_IC_MspInit+0x10c>)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	4a39      	ldr	r2, [pc, #228]	; (80027c8 <HAL_TIM_IC_MspInit+0x10c>)
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	61d3      	str	r3, [r2, #28]
 80026e8:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <HAL_TIM_IC_MspInit+0x10c>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f4:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <HAL_TIM_IC_MspInit+0x10c>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4a33      	ldr	r2, [pc, #204]	; (80027c8 <HAL_TIM_IC_MspInit+0x10c>)
 80026fa:	f043 0308 	orr.w	r3, r3, #8
 80026fe:	6193      	str	r3, [r2, #24]
 8002700:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <HAL_TIM_IC_MspInit+0x10c>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800270c:	2310      	movs	r3, #16
 800270e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002710:	2300      	movs	r3, #0
 8002712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002718:	f107 031c 	add.w	r3, r7, #28
 800271c:	4619      	mov	r1, r3
 800271e:	482b      	ldr	r0, [pc, #172]	; (80027cc <HAL_TIM_IC_MspInit+0x110>)
 8002720:	f001 f9d2 	bl	8003ac8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002724:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <HAL_TIM_IC_MspInit+0x114>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002742:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <HAL_TIM_IC_MspInit+0x114>)
 8002744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002746:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002748:	2200      	movs	r2, #0
 800274a:	2100      	movs	r1, #0
 800274c:	201d      	movs	r0, #29
 800274e:	f000 ff68 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002752:	201d      	movs	r0, #29
 8002754:	f000 ff81 	bl	800365a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002758:	e030      	b.n	80027bc <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_TIM_IC_MspInit+0x118>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d12b      	bne.n	80027bc <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002764:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_TIM_IC_MspInit+0x10c>)
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_TIM_IC_MspInit+0x10c>)
 800276a:	f043 0304 	orr.w	r3, r3, #4
 800276e:	61d3      	str	r3, [r2, #28]
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_TIM_IC_MspInit+0x10c>)
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_TIM_IC_MspInit+0x10c>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <HAL_TIM_IC_MspInit+0x10c>)
 8002782:	f043 0308 	orr.w	r3, r3, #8
 8002786:	6193      	str	r3, [r2, #24]
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <HAL_TIM_IC_MspInit+0x10c>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002794:	2340      	movs	r3, #64	; 0x40
 8002796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002798:	2300      	movs	r3, #0
 800279a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	4619      	mov	r1, r3
 80027a6:	4809      	ldr	r0, [pc, #36]	; (80027cc <HAL_TIM_IC_MspInit+0x110>)
 80027a8:	f001 f98e 	bl	8003ac8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2100      	movs	r1, #0
 80027b0:	201e      	movs	r0, #30
 80027b2:	f000 ff36 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027b6:	201e      	movs	r0, #30
 80027b8:	f000 ff4f 	bl	800365a <HAL_NVIC_EnableIRQ>
}
 80027bc:	bf00      	nop
 80027be:	3730      	adds	r7, #48	; 0x30
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40000400 	.word	0x40000400
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40010c00 	.word	0x40010c00
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40000800 	.word	0x40000800

080027d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 80027e8:	4806      	ldr	r0, [pc, #24]	; (8002804 <HardFault_Handler+0x20>)
 80027ea:	f008 fd13 	bl	800b214 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 80027ee:	4805      	ldr	r0, [pc, #20]	; (8002804 <HardFault_Handler+0x20>)
 80027f0:	f008 fd10 	bl	800b214 <iprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80027f4:	2200      	movs	r2, #0
 80027f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027fa:	4803      	ldr	r0, [pc, #12]	; (8002808 <HardFault_Handler+0x24>)
 80027fc:	f001 faff 	bl	8003dfe <HAL_GPIO_WritePin>
	  printf("HardFault_IRQn");
 8002800:	e7f5      	b.n	80027ee <HardFault_Handler+0xa>
 8002802:	bf00      	nop
 8002804:	0800c6c0 	.word	0x0800c6c0
 8002808:	40011000 	.word	0x40011000

0800280c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002810:	e7fe      	b.n	8002810 <MemManage_Handler+0x4>

08002812 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002816:	e7fe      	b.n	8002816 <BusFault_Handler+0x4>

08002818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800281c:	e7fe      	b.n	800281c <UsageFault_Handler+0x4>

0800281e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002846:	f000 f945 	bl	8002ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002854:	4802      	ldr	r0, [pc, #8]	; (8002860 <ADC1_2_IRQHandler+0x10>)
 8002856:	f000 fb17 	bl	8002e88 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000954 	.word	0x20000954

08002864 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002868:	4802      	ldr	r0, [pc, #8]	; (8002874 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800286a:	f001 fc11 	bl	8004090 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200012c4 	.word	0x200012c4

08002878 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <TIM3_IRQHandler+0x10>)
 800287e:	f003 ffa3 	bl	80067c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2000090c 	.word	0x2000090c

0800288c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <TIM4_IRQHandler+0x10>)
 8002892:	f003 ff99 	bl	80067c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200008bc 	.word	0x200008bc

080028a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	e00a      	b.n	80028c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028b2:	f3af 8000 	nop.w
 80028b6:	4601      	mov	r1, r0
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	60ba      	str	r2, [r7, #8]
 80028be:	b2ca      	uxtb	r2, r1
 80028c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	3301      	adds	r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	dbf0      	blt.n	80028b2 <_read+0x12>
	}

return len;
 80028d0:	687b      	ldr	r3, [r7, #4]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <_close>:
	}
	return len;
}

int _close(int file)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
	return -1;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002900:	605a      	str	r2, [r3, #4]
	return 0;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr

0800290e <_isatty>:

int _isatty(int file)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
	return 1;
 8002916:	2301      	movs	r3, #1
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
	return 0;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
	...

0800293c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <_sbrk+0x50>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <_sbrk+0x16>
		heap_end = &end;
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <_sbrk+0x50>)
 800294e:	4a10      	ldr	r2, [pc, #64]	; (8002990 <_sbrk+0x54>)
 8002950:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <_sbrk+0x50>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <_sbrk+0x50>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4413      	add	r3, r2
 8002960:	466a      	mov	r2, sp
 8002962:	4293      	cmp	r3, r2
 8002964:	d907      	bls.n	8002976 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002966:	f008 fbfb 	bl	800b160 <__errno>
 800296a:	4603      	mov	r3, r0
 800296c:	220c      	movs	r2, #12
 800296e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002970:	f04f 33ff 	mov.w	r3, #4294967295
 8002974:	e006      	b.n	8002984 <_sbrk+0x48>
	}

	heap_end += incr;
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <_sbrk+0x50>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	4a03      	ldr	r2, [pc, #12]	; (800298c <_sbrk+0x50>)
 8002980:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002982:	68fb      	ldr	r3, [r7, #12]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	2000028c 	.word	0x2000028c
 8002990:	200015c0 	.word	0x200015c0

08002994 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002998:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <SystemInit+0x5c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a14      	ldr	r2, [pc, #80]	; (80029f0 <SystemInit+0x5c>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <SystemInit+0x5c>)
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	4911      	ldr	r1, [pc, #68]	; (80029f0 <SystemInit+0x5c>)
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <SystemInit+0x60>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80029b0:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <SystemInit+0x5c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <SystemInit+0x5c>)
 80029b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <SystemInit+0x5c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <SystemInit+0x5c>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <SystemInit+0x5c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <SystemInit+0x5c>)
 80029d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80029d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <SystemInit+0x5c>)
 80029da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80029de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <SystemInit+0x64>)
 80029e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	40021000 	.word	0x40021000
 80029f4:	f8ff0000 	.word	0xf8ff0000
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80029fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80029fe:	e003      	b.n	8002a08 <LoopCopyDataInit>

08002a00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a06:	3104      	adds	r1, #4

08002a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a08:	480a      	ldr	r0, [pc, #40]	; (8002a34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a10:	d3f6      	bcc.n	8002a00 <CopyDataInit>
  ldr r2, =_sbss
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a14:	e002      	b.n	8002a1c <LoopFillZerobss>

08002a16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a18:	f842 3b04 	str.w	r3, [r2], #4

08002a1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a20:	d3f9      	bcc.n	8002a16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a22:	f7ff ffb7 	bl	8002994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a26:	f008 fba1 	bl	800b16c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a2a:	f7ff f90f 	bl	8001c4c <main>
  bx lr
 8002a2e:	4770      	bx	lr
  ldr r3, =_sidata
 8002a30:	0800c818 	.word	0x0800c818
  ldr r0, =_sdata
 8002a34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a38:	20000204 	.word	0x20000204
  ldr r2, =_sbss
 8002a3c:	20000208 	.word	0x20000208
  ldr r3, = _ebss
 8002a40:	200015c0 	.word	0x200015c0

08002a44 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a44:	e7fe      	b.n	8002a44 <CAN1_RX1_IRQHandler>
	...

08002a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <HAL_Init+0x28>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a07      	ldr	r2, [pc, #28]	; (8002a70 <HAL_Init+0x28>)
 8002a52:	f043 0310 	orr.w	r3, r3, #16
 8002a56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a58:	2003      	movs	r0, #3
 8002a5a:	f000 fdd7 	bl	800360c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f000 f808 	bl	8002a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a64:	f7ff fd58 	bl	8002518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40022000 	.word	0x40022000

08002a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_InitTick+0x54>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_InitTick+0x58>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fdef 	bl	8003676 <HAL_SYSTICK_Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e00e      	b.n	8002ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b0f      	cmp	r3, #15
 8002aa6:	d80a      	bhi.n	8002abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab0:	f000 fdb7 	bl	8003622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab4:	4a06      	ldr	r2, [pc, #24]	; (8002ad0 <HAL_InitTick+0x5c>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	e000      	b.n	8002ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000024 	.word	0x20000024
 8002acc:	2000002c 	.word	0x2000002c
 8002ad0:	20000028 	.word	0x20000028

08002ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_IncTick+0x1c>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_IncTick+0x20>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	4a03      	ldr	r2, [pc, #12]	; (8002af4 <HAL_IncTick+0x20>)
 8002ae6:	6013      	str	r3, [r2, #0]
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	2000002c 	.word	0x2000002c
 8002af4:	200009dc 	.word	0x200009dc

08002af8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return uwTick;
 8002afc:	4b02      	ldr	r3, [pc, #8]	; (8002b08 <HAL_GetTick+0x10>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	200009dc 	.word	0x200009dc

08002b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b14:	f7ff fff0 	bl	8002af8 <HAL_GetTick>
 8002b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d005      	beq.n	8002b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <HAL_Delay+0x44>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b32:	bf00      	nop
 8002b34:	f7ff ffe0 	bl	8002af8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d8f7      	bhi.n	8002b34 <HAL_Delay+0x28>
  {
  }
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	2000002c 	.word	0x2000002c

08002b54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0be      	b.n	8002cf4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff fcf2 	bl	800257c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fb8b 	bl	80032b4 <ADC_ConversionStop_Disable>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f040 8099 	bne.w	8002ce2 <HAL_ADC_Init+0x18e>
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f040 8095 	bne.w	8002ce2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bc0:	f023 0302 	bic.w	r3, r3, #2
 8002bc4:	f043 0202 	orr.w	r2, r3, #2
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bd4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7b1b      	ldrb	r3, [r3, #12]
 8002bda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bdc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bec:	d003      	beq.n	8002bf6 <HAL_ADC_Init+0xa2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d102      	bne.n	8002bfc <HAL_ADC_Init+0xa8>
 8002bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bfa:	e000      	b.n	8002bfe <HAL_ADC_Init+0xaa>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7d1b      	ldrb	r3, [r3, #20]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d119      	bne.n	8002c40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7b1b      	ldrb	r3, [r3, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d109      	bne.n	8002c28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	035a      	lsls	r2, r3, #13
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	e00b      	b.n	8002c40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	f043 0220 	orr.w	r2, r3, #32
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <HAL_ADC_Init+0x1a8>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c70:	d003      	beq.n	8002c7a <HAL_ADC_Init+0x126>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d104      	bne.n	8002c84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	051b      	lsls	r3, r3, #20
 8002c82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_ADC_Init+0x1ac>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	f043 0201 	orr.w	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cbe:	e018      	b.n	8002cf2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	f023 0312 	bic.w	r3, r3, #18
 8002cc8:	f043 0210 	orr.w	r2, r3, #16
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ce0:	e007      	b.n	8002cf2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	f043 0210 	orr.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	ffe1f7fd 	.word	0xffe1f7fd
 8002d00:	ff1f0efe 	.word	0xff1f0efe

08002d04 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_Start_IT+0x1a>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e0a0      	b.n	8002e60 <HAL_ADC_Start_IT+0x15c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fa72 	bl	8003210 <ADC_Enable>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 808f 	bne.w	8002e56 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d40:	f023 0301 	bic.w	r3, r3, #1
 8002d44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a45      	ldr	r2, [pc, #276]	; (8002e68 <HAL_ADC_Start_IT+0x164>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d105      	bne.n	8002d62 <HAL_ADC_Start_IT+0x5e>
 8002d56:	4b45      	ldr	r3, [pc, #276]	; (8002e6c <HAL_ADC_Start_IT+0x168>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d115      	bne.n	8002d8e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d026      	beq.n	8002dca <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d8c:	e01d      	b.n	8002dca <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a33      	ldr	r2, [pc, #204]	; (8002e6c <HAL_ADC_Start_IT+0x168>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d004      	beq.n	8002dae <HAL_ADC_Start_IT+0xaa>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a2f      	ldr	r2, [pc, #188]	; (8002e68 <HAL_ADC_Start_IT+0x164>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d10d      	bne.n	8002dca <HAL_ADC_Start_IT+0xc6>
 8002dae:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <HAL_ADC_Start_IT+0x168>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d006      	beq.n	8002de4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	f023 0206 	bic.w	r2, r3, #6
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002de2:	e002      	b.n	8002dea <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f06f 0202 	mvn.w	r2, #2
 8002dfa:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0220 	orr.w	r2, r2, #32
 8002e0a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e1a:	d113      	bne.n	8002e44 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e20:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <HAL_ADC_Start_IT+0x164>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d105      	bne.n	8002e32 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e26:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_ADC_Start_IT+0x168>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d108      	bne.n	8002e44 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	e00c      	b.n	8002e5e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	e003      	b.n	8002e5e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40012800 	.word	0x40012800
 8002e6c:	40012400 	.word	0x40012400

08002e70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d140      	bne.n	8002f20 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d139      	bne.n	8002f20 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ece:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ed2:	d11d      	bne.n	8002f10 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d119      	bne.n	8002f10 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0220 	bic.w	r2, r2, #32
 8002eea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d105      	bne.n	8002f10 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7fe fa69 	bl	80013e8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f06f 0212 	mvn.w	r2, #18
 8002f1e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	2b80      	cmp	r3, #128	; 0x80
 8002f2c:	d14f      	bne.n	8002fce <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d148      	bne.n	8002fce <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002f5e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002f62:	d012      	beq.n	8002f8a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d125      	bne.n	8002fbe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002f7c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f80:	d11d      	bne.n	8002fbe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d119      	bne.n	8002fbe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f98:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	f043 0201 	orr.w	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fa4e 	bl	8003460 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 020c 	mvn.w	r2, #12
 8002fcc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d114      	bne.n	8003006 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d10d      	bne.n	8003006 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f809 	bl	800300e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0201 	mvn.w	r2, #1
 8003004:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x20>
 800303c:	2302      	movs	r3, #2
 800303e:	e0dc      	b.n	80031fa <HAL_ADC_ConfigChannel+0x1da>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b06      	cmp	r3, #6
 800304e:	d81c      	bhi.n	800308a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	3b05      	subs	r3, #5
 8003062:	221f      	movs	r2, #31
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	4019      	ands	r1, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	3b05      	subs	r3, #5
 800307c:	fa00 f203 	lsl.w	r2, r0, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	635a      	str	r2, [r3, #52]	; 0x34
 8003088:	e03c      	b.n	8003104 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b0c      	cmp	r3, #12
 8003090:	d81c      	bhi.n	80030cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	3b23      	subs	r3, #35	; 0x23
 80030a4:	221f      	movs	r2, #31
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	4019      	ands	r1, r3
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	3b23      	subs	r3, #35	; 0x23
 80030be:	fa00 f203 	lsl.w	r2, r0, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	631a      	str	r2, [r3, #48]	; 0x30
 80030ca:	e01b      	b.n	8003104 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	3b41      	subs	r3, #65	; 0x41
 80030de:	221f      	movs	r2, #31
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	4019      	ands	r1, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	3b41      	subs	r3, #65	; 0x41
 80030f8:	fa00 f203 	lsl.w	r2, r0, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b09      	cmp	r3, #9
 800310a:	d91c      	bls.n	8003146 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68d9      	ldr	r1, [r3, #12]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4613      	mov	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	3b1e      	subs	r3, #30
 800311e:	2207      	movs	r2, #7
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	4019      	ands	r1, r3
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	6898      	ldr	r0, [r3, #8]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	3b1e      	subs	r3, #30
 8003138:	fa00 f203 	lsl.w	r2, r0, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]
 8003144:	e019      	b.n	800317a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6919      	ldr	r1, [r3, #16]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	2207      	movs	r2, #7
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	4019      	ands	r1, r3
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	6898      	ldr	r0, [r3, #8]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	fa00 f203 	lsl.w	r2, r0, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b10      	cmp	r3, #16
 8003180:	d003      	beq.n	800318a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003186:	2b11      	cmp	r3, #17
 8003188:	d132      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <HAL_ADC_ConfigChannel+0x1e4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d125      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d126      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031b0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b10      	cmp	r3, #16
 80031b8:	d11a      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <HAL_ADC_ConfigChannel+0x1e8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a13      	ldr	r2, [pc, #76]	; (800320c <HAL_ADC_ConfigChannel+0x1ec>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	0c9a      	lsrs	r2, r3, #18
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031d0:	e002      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f9      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x1b2>
 80031de:	e007      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	f043 0220 	orr.w	r2, r3, #32
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	40012400 	.word	0x40012400
 8003208:	20000024 	.word	0x20000024
 800320c:	431bde83 	.word	0x431bde83

08003210 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d039      	beq.n	80032a2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0201 	orr.w	r2, r2, #1
 800323c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800323e:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <ADC_Enable+0x9c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <ADC_Enable+0xa0>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	0c9b      	lsrs	r3, r3, #18
 800324a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800324c:	e002      	b.n	8003254 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3b01      	subs	r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f9      	bne.n	800324e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800325a:	f7ff fc4d 	bl	8002af8 <HAL_GetTick>
 800325e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003260:	e018      	b.n	8003294 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003262:	f7ff fc49 	bl	8002af8 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d911      	bls.n	8003294 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	f043 0210 	orr.w	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e007      	b.n	80032a4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d1df      	bne.n	8003262 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000024 	.word	0x20000024
 80032b0:	431bde83 	.word	0x431bde83

080032b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d127      	bne.n	800331e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032de:	f7ff fc0b 	bl	8002af8 <HAL_GetTick>
 80032e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032e4:	e014      	b.n	8003310 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032e6:	f7ff fc07 	bl	8002af8 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d90d      	bls.n	8003310 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	f043 0210 	orr.w	r2, r3, #16
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	f043 0201 	orr.w	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e007      	b.n	8003320 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d0e3      	beq.n	80032e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_ADCEx_Calibration_Start+0x1e>
 8003342:	2302      	movs	r3, #2
 8003344:	e086      	b.n	8003454 <HAL_ADCEx_Calibration_Start+0x12c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ffb0 	bl	80032b4 <ADC_ConversionStop_Disable>
 8003354:	4603      	mov	r3, r0
 8003356:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003358:	7dfb      	ldrb	r3, [r7, #23]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d175      	bne.n	800344a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003366:	f023 0302 	bic.w	r3, r3, #2
 800336a:	f043 0202 	orr.w	r2, r3, #2
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003372:	4b3a      	ldr	r3, [pc, #232]	; (800345c <HAL_ADCEx_Calibration_Start+0x134>)
 8003374:	681c      	ldr	r4, [r3, #0]
 8003376:	2002      	movs	r0, #2
 8003378:	f002 fda6 	bl	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq>
 800337c:	4603      	mov	r3, r0
 800337e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003382:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003384:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003386:	e002      	b.n	800338e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3b01      	subs	r3, #1
 800338c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f9      	bne.n	8003388 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff3b 	bl	8003210 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0208 	orr.w	r2, r2, #8
 80033a8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80033aa:	f7ff fba5 	bl	8002af8 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80033b0:	e014      	b.n	80033dc <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80033b2:	f7ff fba1 	bl	8002af8 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b0a      	cmp	r3, #10
 80033be:	d90d      	bls.n	80033dc <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	f023 0312 	bic.w	r3, r3, #18
 80033c8:	f043 0210 	orr.w	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e03b      	b.n	8003454 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e3      	bne.n	80033b2 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0204 	orr.w	r2, r2, #4
 80033f8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80033fa:	f7ff fb7d 	bl	8002af8 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003400:	e014      	b.n	800342c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003402:	f7ff fb79 	bl	8002af8 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b0a      	cmp	r3, #10
 800340e:	d90d      	bls.n	800342c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	f023 0312 	bic.w	r3, r3, #18
 8003418:	f043 0210 	orr.w	r2, r3, #16
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e013      	b.n	8003454 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e3      	bne.n	8003402 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	f023 0303 	bic.w	r3, r3, #3
 8003442:	f043 0201 	orr.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003452:	7dfb      	ldrb	r3, [r7, #23]
}
 8003454:	4618      	mov	r0, r3
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd90      	pop	{r4, r7, pc}
 800345c:	20000024 	.word	0x20000024

08003460 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr
	...

08003474 <__NVIC_SetPriorityGrouping>:
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003490:	4013      	ands	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800349c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a6:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	60d3      	str	r3, [r2, #12]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <__NVIC_GetPriorityGrouping>:
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <__NVIC_GetPriorityGrouping+0x18>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	f003 0307 	and.w	r3, r3, #7
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <__NVIC_EnableIRQ>:
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	db0b      	blt.n	8003502 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	4906      	ldr	r1, [pc, #24]	; (800350c <__NVIC_EnableIRQ+0x34>)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	2001      	movs	r0, #1
 80034fa:	fa00 f202 	lsl.w	r2, r0, r2
 80034fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	e000e100 	.word	0xe000e100

08003510 <__NVIC_SetPriority>:
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	6039      	str	r1, [r7, #0]
 800351a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	2b00      	cmp	r3, #0
 8003522:	db0a      	blt.n	800353a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	b2da      	uxtb	r2, r3
 8003528:	490c      	ldr	r1, [pc, #48]	; (800355c <__NVIC_SetPriority+0x4c>)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	440b      	add	r3, r1
 8003534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003538:	e00a      	b.n	8003550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4908      	ldr	r1, [pc, #32]	; (8003560 <__NVIC_SetPriority+0x50>)
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	3b04      	subs	r3, #4
 8003548:	0112      	lsls	r2, r2, #4
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	440b      	add	r3, r1
 800354e:	761a      	strb	r2, [r3, #24]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	e000e100 	.word	0xe000e100
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <NVIC_EncodePriority>:
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f1c3 0307 	rsb	r3, r3, #7
 800357e:	2b04      	cmp	r3, #4
 8003580:	bf28      	it	cs
 8003582:	2304      	movcs	r3, #4
 8003584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3304      	adds	r3, #4
 800358a:	2b06      	cmp	r3, #6
 800358c:	d902      	bls.n	8003594 <NVIC_EncodePriority+0x30>
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3b03      	subs	r3, #3
 8003592:	e000      	b.n	8003596 <NVIC_EncodePriority+0x32>
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003598:	f04f 32ff 	mov.w	r2, #4294967295
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43da      	mvns	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	401a      	ands	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ac:	f04f 31ff 	mov.w	r1, #4294967295
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	43d9      	mvns	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	4313      	orrs	r3, r2
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3724      	adds	r7, #36	; 0x24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <SysTick_Config>:
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035d8:	d301      	bcc.n	80035de <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80035da:	2301      	movs	r3, #1
 80035dc:	e00f      	b.n	80035fe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035de:	4a0a      	ldr	r2, [pc, #40]	; (8003608 <SysTick_Config+0x40>)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035e6:	210f      	movs	r1, #15
 80035e8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ec:	f7ff ff90 	bl	8003510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <SysTick_Config+0x40>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035f6:	4b04      	ldr	r3, [pc, #16]	; (8003608 <SysTick_Config+0x40>)
 80035f8:	2207      	movs	r2, #7
 80035fa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	e000e010 	.word	0xe000e010

0800360c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff ff2d 	bl	8003474 <__NVIC_SetPriorityGrouping>
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003622:	b580      	push	{r7, lr}
 8003624:	b086      	sub	sp, #24
 8003626:	af00      	add	r7, sp, #0
 8003628:	4603      	mov	r3, r0
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003634:	f7ff ff42 	bl	80034bc <__NVIC_GetPriorityGrouping>
 8003638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	6978      	ldr	r0, [r7, #20]
 8003640:	f7ff ff90 	bl	8003564 <NVIC_EncodePriority>
 8003644:	4602      	mov	r2, r0
 8003646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364a:	4611      	mov	r1, r2
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff ff5f 	bl	8003510 <__NVIC_SetPriority>
}
 8003652:	bf00      	nop
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	4603      	mov	r3, r0
 8003662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff35 	bl	80034d8 <__NVIC_EnableIRQ>
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff ffa2 	bl	80035c8 <SysTick_Config>
 8003684:	4603      	mov	r3, r0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e00e      	b.n	80036be <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	795b      	ldrb	r3, [r3, #5]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d105      	bne.n	80036b6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7fe ffa7 	bl	8002604 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80036c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80036e2:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <HAL_FLASH_Program+0xd8>)
 80036e4:	7e1b      	ldrb	r3, [r3, #24]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_FLASH_Program+0x26>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e054      	b.n	8003798 <HAL_FLASH_Program+0xd0>
 80036ee:	4b2c      	ldr	r3, [pc, #176]	; (80037a0 <HAL_FLASH_Program+0xd8>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80036f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80036f8:	f000 f8a8 	bl	800384c <FLASH_WaitForLastOperation>
 80036fc:	4603      	mov	r3, r0
 80036fe:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d144      	bne.n	8003790 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d102      	bne.n	8003712 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800370c:	2301      	movs	r3, #1
 800370e:	757b      	strb	r3, [r7, #21]
 8003710:	e007      	b.n	8003722 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d102      	bne.n	800371e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003718:	2302      	movs	r3, #2
 800371a:	757b      	strb	r3, [r7, #21]
 800371c:	e001      	b.n	8003722 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800371e:	2304      	movs	r3, #4
 8003720:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003722:	2300      	movs	r3, #0
 8003724:	75bb      	strb	r3, [r7, #22]
 8003726:	e02d      	b.n	8003784 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003728:	7dbb      	ldrb	r3, [r7, #22]
 800372a:	005a      	lsls	r2, r3, #1
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	eb02 0c03 	add.w	ip, r2, r3
 8003732:	7dbb      	ldrb	r3, [r7, #22]
 8003734:	0119      	lsls	r1, r3, #4
 8003736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800373a:	f1c1 0620 	rsb	r6, r1, #32
 800373e:	f1a1 0020 	sub.w	r0, r1, #32
 8003742:	fa22 f401 	lsr.w	r4, r2, r1
 8003746:	fa03 f606 	lsl.w	r6, r3, r6
 800374a:	4334      	orrs	r4, r6
 800374c:	fa23 f000 	lsr.w	r0, r3, r0
 8003750:	4304      	orrs	r4, r0
 8003752:	fa23 f501 	lsr.w	r5, r3, r1
 8003756:	b2a3      	uxth	r3, r4
 8003758:	4619      	mov	r1, r3
 800375a:	4660      	mov	r0, ip
 800375c:	f000 f85a 	bl	8003814 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003760:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003764:	f000 f872 	bl	800384c <FLASH_WaitForLastOperation>
 8003768:	4603      	mov	r3, r0
 800376a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800376c:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_FLASH_Program+0xdc>)
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	4a0c      	ldr	r2, [pc, #48]	; (80037a4 <HAL_FLASH_Program+0xdc>)
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d107      	bne.n	800378e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800377e:	7dbb      	ldrb	r3, [r7, #22]
 8003780:	3301      	adds	r3, #1
 8003782:	75bb      	strb	r3, [r7, #22]
 8003784:	7dba      	ldrb	r2, [r7, #22]
 8003786:	7d7b      	ldrb	r3, [r7, #21]
 8003788:	429a      	cmp	r2, r3
 800378a:	d3cd      	bcc.n	8003728 <HAL_FLASH_Program+0x60>
 800378c:	e000      	b.n	8003790 <HAL_FLASH_Program+0xc8>
      {
        break;
 800378e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_FLASH_Program+0xd8>)
 8003792:	2200      	movs	r2, #0
 8003794:	761a      	strb	r2, [r3, #24]

  return status;
 8003796:	7dfb      	ldrb	r3, [r7, #23]
}
 8003798:	4618      	mov	r0, r3
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037a0:	200009e0 	.word	0x200009e0
 80037a4:	40022000 	.word	0x40022000

080037a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80037b2:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <HAL_FLASH_Unlock+0x40>)
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00d      	beq.n	80037da <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_FLASH_Unlock+0x40>)
 80037c0:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <HAL_FLASH_Unlock+0x44>)
 80037c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <HAL_FLASH_Unlock+0x40>)
 80037c6:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <HAL_FLASH_Unlock+0x48>)
 80037c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <HAL_FLASH_Unlock+0x40>)
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80037da:	79fb      	ldrb	r3, [r7, #7]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40022000 	.word	0x40022000
 80037ec:	45670123 	.word	0x45670123
 80037f0:	cdef89ab 	.word	0xcdef89ab

080037f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_FLASH_Lock+0x1c>)
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	4a04      	ldr	r2, [pc, #16]	; (8003810 <HAL_FLASH_Lock+0x1c>)
 80037fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003802:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40022000 	.word	0x40022000

08003814 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003820:	4b08      	ldr	r3, [pc, #32]	; (8003844 <FLASH_Program_HalfWord+0x30>)
 8003822:	2200      	movs	r2, #0
 8003824:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <FLASH_Program_HalfWord+0x34>)
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	4a07      	ldr	r2, [pc, #28]	; (8003848 <FLASH_Program_HalfWord+0x34>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	887a      	ldrh	r2, [r7, #2]
 8003836:	801a      	strh	r2, [r3, #0]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	200009e0 	.word	0x200009e0
 8003848:	40022000 	.word	0x40022000

0800384c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003854:	f7ff f950 	bl	8002af8 <HAL_GetTick>
 8003858:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800385a:	e010      	b.n	800387e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003862:	d00c      	beq.n	800387e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <FLASH_WaitForLastOperation+0x2e>
 800386a:	f7ff f945 	bl	8002af8 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	429a      	cmp	r2, r3
 8003878:	d201      	bcs.n	800387e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e025      	b.n	80038ca <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800387e:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <FLASH_WaitForLastOperation+0x88>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e8      	bne.n	800385c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <FLASH_WaitForLastOperation+0x88>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003896:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <FLASH_WaitForLastOperation+0x88>)
 8003898:	2220      	movs	r2, #32
 800389a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800389c:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <FLASH_WaitForLastOperation+0x88>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <FLASH_WaitForLastOperation+0x88>)
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d105      	bne.n	80038c0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80038b4:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <FLASH_WaitForLastOperation+0x88>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80038c0:	f000 f80a 	bl	80038d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40022000 	.word	0x40022000

080038d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80038e2:	4b23      	ldr	r3, [pc, #140]	; (8003970 <FLASH_SetErrorCode+0x98>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80038ee:	4b21      	ldr	r3, [pc, #132]	; (8003974 <FLASH_SetErrorCode+0x9c>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f043 0302 	orr.w	r3, r3, #2
 80038f6:	4a1f      	ldr	r2, [pc, #124]	; (8003974 <FLASH_SetErrorCode+0x9c>)
 80038f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f043 0310 	orr.w	r3, r3, #16
 8003900:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003902:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <FLASH_SetErrorCode+0x98>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800390e:	4b19      	ldr	r3, [pc, #100]	; (8003974 <FLASH_SetErrorCode+0x9c>)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	4a17      	ldr	r2, [pc, #92]	; (8003974 <FLASH_SetErrorCode+0x9c>)
 8003918:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003922:	4b13      	ldr	r3, [pc, #76]	; (8003970 <FLASH_SetErrorCode+0x98>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <FLASH_SetErrorCode+0x9c>)
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f043 0304 	orr.w	r3, r3, #4
 8003936:	4a0f      	ldr	r2, [pc, #60]	; (8003974 <FLASH_SetErrorCode+0x9c>)
 8003938:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800393a:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <FLASH_SetErrorCode+0x98>)
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	4a0c      	ldr	r2, [pc, #48]	; (8003970 <FLASH_SetErrorCode+0x98>)
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f240 1201 	movw	r2, #257	; 0x101
 800394c:	4293      	cmp	r3, r2
 800394e:	d106      	bne.n	800395e <FLASH_SetErrorCode+0x86>
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <FLASH_SetErrorCode+0x98>)
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	4a06      	ldr	r2, [pc, #24]	; (8003970 <FLASH_SetErrorCode+0x98>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	61d3      	str	r3, [r2, #28]
}  
 800395c:	e002      	b.n	8003964 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800395e:	4a04      	ldr	r2, [pc, #16]	; (8003970 <FLASH_SetErrorCode+0x98>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	60d3      	str	r3, [r2, #12]
}  
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40022000 	.word	0x40022000
 8003974:	200009e0 	.word	0x200009e0

08003978 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800398a:	4b2f      	ldr	r3, [pc, #188]	; (8003a48 <HAL_FLASHEx_Erase+0xd0>)
 800398c:	7e1b      	ldrb	r3, [r3, #24]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_FLASHEx_Erase+0x1e>
 8003992:	2302      	movs	r3, #2
 8003994:	e053      	b.n	8003a3e <HAL_FLASHEx_Erase+0xc6>
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <HAL_FLASHEx_Erase+0xd0>)
 8003998:	2201      	movs	r2, #1
 800399a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d116      	bne.n	80039d2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80039a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039a8:	f7ff ff50 	bl	800384c <FLASH_WaitForLastOperation>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d141      	bne.n	8003a36 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80039b2:	2001      	movs	r0, #1
 80039b4:	f000 f84c 	bl	8003a50 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039bc:	f7ff ff46 	bl	800384c <FLASH_WaitForLastOperation>
 80039c0:	4603      	mov	r3, r0
 80039c2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80039c4:	4b21      	ldr	r3, [pc, #132]	; (8003a4c <HAL_FLASHEx_Erase+0xd4>)
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	4a20      	ldr	r2, [pc, #128]	; (8003a4c <HAL_FLASHEx_Erase+0xd4>)
 80039ca:	f023 0304 	bic.w	r3, r3, #4
 80039ce:	6113      	str	r3, [r2, #16]
 80039d0:	e031      	b.n	8003a36 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80039d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039d6:	f7ff ff39 	bl	800384c <FLASH_WaitForLastOperation>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d12a      	bne.n	8003a36 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	f04f 32ff 	mov.w	r2, #4294967295
 80039e6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	e019      	b.n	8003a24 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80039f0:	68b8      	ldr	r0, [r7, #8]
 80039f2:	f000 f849 	bl	8003a88 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039fa:	f7ff ff27 	bl	800384c <FLASH_WaitForLastOperation>
 80039fe:	4603      	mov	r3, r0
 8003a00:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003a02:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_FLASHEx_Erase+0xd4>)
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <HAL_FLASHEx_Erase+0xd4>)
 8003a08:	f023 0302 	bic.w	r3, r3, #2
 8003a0c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	601a      	str	r2, [r3, #0]
            break;
 8003a1a:	e00c      	b.n	8003a36 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a22:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	029a      	lsls	r2, r3, #10
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d3dc      	bcc.n	80039f0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a36:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <HAL_FLASHEx_Erase+0xd0>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	761a      	strb	r2, [r3, #24]

  return status;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200009e0 	.word	0x200009e0
 8003a4c:	40022000 	.word	0x40022000

08003a50 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <FLASH_MassErase+0x30>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <FLASH_MassErase+0x34>)
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <FLASH_MassErase+0x34>)
 8003a64:	f043 0304 	orr.w	r3, r3, #4
 8003a68:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <FLASH_MassErase+0x34>)
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <FLASH_MassErase+0x34>)
 8003a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a74:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr
 8003a80:	200009e0 	.word	0x200009e0
 8003a84:	40022000 	.word	0x40022000

08003a88 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <FLASH_PageErase+0x38>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <FLASH_PageErase+0x3c>)
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <FLASH_PageErase+0x3c>)
 8003a9c:	f043 0302 	orr.w	r3, r3, #2
 8003aa0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003aa2:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <FLASH_PageErase+0x3c>)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <FLASH_PageErase+0x3c>)
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	4a05      	ldr	r2, [pc, #20]	; (8003ac4 <FLASH_PageErase+0x3c>)
 8003aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	200009e0 	.word	0x200009e0
 8003ac4:	40022000 	.word	0x40022000

08003ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b08b      	sub	sp, #44	; 0x2c
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ada:	e169      	b.n	8003db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003adc:	2201      	movs	r2, #1
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	f040 8158 	bne.w	8003daa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4a9a      	ldr	r2, [pc, #616]	; (8003d68 <HAL_GPIO_Init+0x2a0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d05e      	beq.n	8003bc2 <HAL_GPIO_Init+0xfa>
 8003b04:	4a98      	ldr	r2, [pc, #608]	; (8003d68 <HAL_GPIO_Init+0x2a0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d875      	bhi.n	8003bf6 <HAL_GPIO_Init+0x12e>
 8003b0a:	4a98      	ldr	r2, [pc, #608]	; (8003d6c <HAL_GPIO_Init+0x2a4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d058      	beq.n	8003bc2 <HAL_GPIO_Init+0xfa>
 8003b10:	4a96      	ldr	r2, [pc, #600]	; (8003d6c <HAL_GPIO_Init+0x2a4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d86f      	bhi.n	8003bf6 <HAL_GPIO_Init+0x12e>
 8003b16:	4a96      	ldr	r2, [pc, #600]	; (8003d70 <HAL_GPIO_Init+0x2a8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d052      	beq.n	8003bc2 <HAL_GPIO_Init+0xfa>
 8003b1c:	4a94      	ldr	r2, [pc, #592]	; (8003d70 <HAL_GPIO_Init+0x2a8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d869      	bhi.n	8003bf6 <HAL_GPIO_Init+0x12e>
 8003b22:	4a94      	ldr	r2, [pc, #592]	; (8003d74 <HAL_GPIO_Init+0x2ac>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d04c      	beq.n	8003bc2 <HAL_GPIO_Init+0xfa>
 8003b28:	4a92      	ldr	r2, [pc, #584]	; (8003d74 <HAL_GPIO_Init+0x2ac>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d863      	bhi.n	8003bf6 <HAL_GPIO_Init+0x12e>
 8003b2e:	4a92      	ldr	r2, [pc, #584]	; (8003d78 <HAL_GPIO_Init+0x2b0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d046      	beq.n	8003bc2 <HAL_GPIO_Init+0xfa>
 8003b34:	4a90      	ldr	r2, [pc, #576]	; (8003d78 <HAL_GPIO_Init+0x2b0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d85d      	bhi.n	8003bf6 <HAL_GPIO_Init+0x12e>
 8003b3a:	2b12      	cmp	r3, #18
 8003b3c:	d82a      	bhi.n	8003b94 <HAL_GPIO_Init+0xcc>
 8003b3e:	2b12      	cmp	r3, #18
 8003b40:	d859      	bhi.n	8003bf6 <HAL_GPIO_Init+0x12e>
 8003b42:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <HAL_GPIO_Init+0x80>)
 8003b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b48:	08003bc3 	.word	0x08003bc3
 8003b4c:	08003b9d 	.word	0x08003b9d
 8003b50:	08003baf 	.word	0x08003baf
 8003b54:	08003bf1 	.word	0x08003bf1
 8003b58:	08003bf7 	.word	0x08003bf7
 8003b5c:	08003bf7 	.word	0x08003bf7
 8003b60:	08003bf7 	.word	0x08003bf7
 8003b64:	08003bf7 	.word	0x08003bf7
 8003b68:	08003bf7 	.word	0x08003bf7
 8003b6c:	08003bf7 	.word	0x08003bf7
 8003b70:	08003bf7 	.word	0x08003bf7
 8003b74:	08003bf7 	.word	0x08003bf7
 8003b78:	08003bf7 	.word	0x08003bf7
 8003b7c:	08003bf7 	.word	0x08003bf7
 8003b80:	08003bf7 	.word	0x08003bf7
 8003b84:	08003bf7 	.word	0x08003bf7
 8003b88:	08003bf7 	.word	0x08003bf7
 8003b8c:	08003ba5 	.word	0x08003ba5
 8003b90:	08003bb9 	.word	0x08003bb9
 8003b94:	4a79      	ldr	r2, [pc, #484]	; (8003d7c <HAL_GPIO_Init+0x2b4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b9a:	e02c      	b.n	8003bf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	623b      	str	r3, [r7, #32]
          break;
 8003ba2:	e029      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	623b      	str	r3, [r7, #32]
          break;
 8003bac:	e024      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	623b      	str	r3, [r7, #32]
          break;
 8003bb6:	e01f      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	623b      	str	r3, [r7, #32]
          break;
 8003bc0:	e01a      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003bca:	2304      	movs	r3, #4
 8003bcc:	623b      	str	r3, [r7, #32]
          break;
 8003bce:	e013      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d105      	bne.n	8003be4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bd8:	2308      	movs	r3, #8
 8003bda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	611a      	str	r2, [r3, #16]
          break;
 8003be2:	e009      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003be4:	2308      	movs	r3, #8
 8003be6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	615a      	str	r2, [r3, #20]
          break;
 8003bee:	e003      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	623b      	str	r3, [r7, #32]
          break;
 8003bf4:	e000      	b.n	8003bf8 <HAL_GPIO_Init+0x130>
          break;
 8003bf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2bff      	cmp	r3, #255	; 0xff
 8003bfc:	d801      	bhi.n	8003c02 <HAL_GPIO_Init+0x13a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	e001      	b.n	8003c06 <HAL_GPIO_Init+0x13e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3304      	adds	r3, #4
 8003c06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	2bff      	cmp	r3, #255	; 0xff
 8003c0c:	d802      	bhi.n	8003c14 <HAL_GPIO_Init+0x14c>
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	e002      	b.n	8003c1a <HAL_GPIO_Init+0x152>
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	3b08      	subs	r3, #8
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	210f      	movs	r1, #15
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	6a39      	ldr	r1, [r7, #32]
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	fa01 f303 	lsl.w	r3, r1, r3
 8003c34:	431a      	orrs	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80b1 	beq.w	8003daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c48:	4b4d      	ldr	r3, [pc, #308]	; (8003d80 <HAL_GPIO_Init+0x2b8>)
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	4a4c      	ldr	r2, [pc, #304]	; (8003d80 <HAL_GPIO_Init+0x2b8>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6193      	str	r3, [r2, #24]
 8003c54:	4b4a      	ldr	r3, [pc, #296]	; (8003d80 <HAL_GPIO_Init+0x2b8>)
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c60:	4a48      	ldr	r2, [pc, #288]	; (8003d84 <HAL_GPIO_Init+0x2bc>)
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	089b      	lsrs	r3, r3, #2
 8003c66:	3302      	adds	r3, #2
 8003c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	220f      	movs	r2, #15
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4013      	ands	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a40      	ldr	r2, [pc, #256]	; (8003d88 <HAL_GPIO_Init+0x2c0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <HAL_GPIO_Init+0x1ec>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a3f      	ldr	r2, [pc, #252]	; (8003d8c <HAL_GPIO_Init+0x2c4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00d      	beq.n	8003cb0 <HAL_GPIO_Init+0x1e8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a3e      	ldr	r2, [pc, #248]	; (8003d90 <HAL_GPIO_Init+0x2c8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d007      	beq.n	8003cac <HAL_GPIO_Init+0x1e4>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a3d      	ldr	r2, [pc, #244]	; (8003d94 <HAL_GPIO_Init+0x2cc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d101      	bne.n	8003ca8 <HAL_GPIO_Init+0x1e0>
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e006      	b.n	8003cb6 <HAL_GPIO_Init+0x1ee>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	e004      	b.n	8003cb6 <HAL_GPIO_Init+0x1ee>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e002      	b.n	8003cb6 <HAL_GPIO_Init+0x1ee>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <HAL_GPIO_Init+0x1ee>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	f002 0203 	and.w	r2, r2, #3
 8003cbc:	0092      	lsls	r2, r2, #2
 8003cbe:	4093      	lsls	r3, r2
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003cc6:	492f      	ldr	r1, [pc, #188]	; (8003d84 <HAL_GPIO_Init+0x2bc>)
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	3302      	adds	r3, #2
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d006      	beq.n	8003cee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ce0:	4b2d      	ldr	r3, [pc, #180]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	492c      	ldr	r1, [pc, #176]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
 8003cec:	e006      	b.n	8003cfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cee:	4b2a      	ldr	r3, [pc, #168]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	4928      	ldr	r1, [pc, #160]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d006      	beq.n	8003d16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d08:	4b23      	ldr	r3, [pc, #140]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	4922      	ldr	r1, [pc, #136]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
 8003d14:	e006      	b.n	8003d24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d16:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	491e      	ldr	r1, [pc, #120]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d30:	4b19      	ldr	r3, [pc, #100]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	4918      	ldr	r1, [pc, #96]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	608b      	str	r3, [r1, #8]
 8003d3c:	e006      	b.n	8003d4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d3e:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	4914      	ldr	r1, [pc, #80]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d021      	beq.n	8003d9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	490e      	ldr	r1, [pc, #56]	; (8003d98 <HAL_GPIO_Init+0x2d0>)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60cb      	str	r3, [r1, #12]
 8003d64:	e021      	b.n	8003daa <HAL_GPIO_Init+0x2e2>
 8003d66:	bf00      	nop
 8003d68:	10320000 	.word	0x10320000
 8003d6c:	10310000 	.word	0x10310000
 8003d70:	10220000 	.word	0x10220000
 8003d74:	10210000 	.word	0x10210000
 8003d78:	10120000 	.word	0x10120000
 8003d7c:	10110000 	.word	0x10110000
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40010800 	.word	0x40010800
 8003d8c:	40010c00 	.word	0x40010c00
 8003d90:	40011000 	.word	0x40011000
 8003d94:	40011400 	.word	0x40011400
 8003d98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	43db      	mvns	r3, r3
 8003da4:	4909      	ldr	r1, [pc, #36]	; (8003dcc <HAL_GPIO_Init+0x304>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	3301      	adds	r3, #1
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f47f ae8e 	bne.w	8003adc <HAL_GPIO_Init+0x14>
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	372c      	adds	r7, #44	; 0x2c
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	40010400 	.word	0x40010400

08003dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	887b      	ldrh	r3, [r7, #2]
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
 8003dec:	e001      	b.n	8003df2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr

08003dfe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	807b      	strh	r3, [r7, #2]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e0e:	787b      	ldrb	r3, [r7, #1]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e14:	887a      	ldrh	r2, [r7, #2]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e1a:	e003      	b.n	8003e24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e1c:	887b      	ldrh	r3, [r7, #2]
 8003e1e:	041a      	lsls	r2, r3, #16
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	611a      	str	r2, [r3, #16]
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e30:	b08b      	sub	sp, #44	; 0x2c
 8003e32:	af06      	add	r7, sp, #24
 8003e34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0fd      	b.n	800403c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d106      	bne.n	8003e5a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f006 fed9 	bl	800ac0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f003 f8dc 	bl	8007024 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	687e      	ldr	r6, [r7, #4]
 8003e74:	466d      	mov	r5, sp
 8003e76:	f106 0410 	add.w	r4, r6, #16
 8003e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	602b      	str	r3, [r5, #0]
 8003e82:	1d33      	adds	r3, r6, #4
 8003e84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e86:	6838      	ldr	r0, [r7, #0]
 8003e88:	f003 f8a6 	bl	8006fd8 <USB_CoreInit>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e0ce      	b.n	800403c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f003 f8d7 	bl	8007058 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
 8003eae:	e04c      	b.n	8003f4a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	440b      	add	r3, r1
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	440b      	add	r3, r1
 8003ed6:	7bfa      	ldrb	r2, [r7, #15]
 8003ed8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003eda:	7bfa      	ldrb	r2, [r7, #15]
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	b298      	uxth	r0, r3
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	440b      	add	r3, r1
 8003eec:	3336      	adds	r3, #54	; 0x36
 8003eee:	4602      	mov	r2, r0
 8003ef0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	440b      	add	r3, r1
 8003f02:	3303      	adds	r3, #3
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f08:	7bfa      	ldrb	r2, [r7, #15]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	440b      	add	r3, r1
 8003f16:	3338      	adds	r3, #56	; 0x38
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	440b      	add	r3, r1
 8003f2a:	333c      	adds	r3, #60	; 0x3c
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	440b      	add	r3, r1
 8003f3e:	3340      	adds	r3, #64	; 0x40
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	3301      	adds	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d3ad      	bcc.n	8003eb0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f54:	2300      	movs	r3, #0
 8003f56:	73fb      	strb	r3, [r7, #15]
 8003f58:	e044      	b.n	8003fe4 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f5a:	7bfa      	ldrb	r2, [r7, #15]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	440b      	add	r3, r1
 8003f68:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f70:	7bfa      	ldrb	r2, [r7, #15]
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	440b      	add	r3, r1
 8003f7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f82:	7bfa      	ldrb	r2, [r7, #15]
 8003f84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f86:	7bfa      	ldrb	r2, [r7, #15]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	440b      	add	r3, r1
 8003f94:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	440b      	add	r3, r1
 8003faa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fb2:	7bfa      	ldrb	r2, [r7, #15]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	440b      	add	r3, r1
 8003fc0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	440b      	add	r3, r1
 8003fd6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
 8003fe4:	7bfa      	ldrb	r2, [r7, #15]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d3b5      	bcc.n	8003f5a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	687e      	ldr	r6, [r7, #4]
 8003ff6:	466d      	mov	r5, sp
 8003ff8:	f106 0410 	add.w	r4, r6, #16
 8003ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	602b      	str	r3, [r5, #0]
 8004004:	1d33      	adds	r3, r6, #4
 8004006:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004008:	6838      	ldr	r0, [r7, #0]
 800400a:	f003 f831 	bl	8007070 <USB_DevInit>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e00d      	b.n	800403c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f004 ffcb 	bl	8008fd0 <USB_DevDisconnect>

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004044 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_PCD_Start+0x16>
 8004056:	2302      	movs	r3, #2
 8004058:	e016      	b.n	8004088 <HAL_PCD_Start+0x44>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f002 ffc6 	bl	8006ff8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800406c:	2101      	movs	r1, #1
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f007 f83f 	bl	800b0f2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f004 ff9f 	bl	8008fbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f004 ffa1 	bl	8008fe4 <USB_ReadInterrupts>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ac:	d102      	bne.n	80040b4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fb61 	bl	8004776 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f004 ff93 	bl	8008fe4 <USB_ReadInterrupts>
 80040be:	4603      	mov	r3, r0
 80040c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c8:	d112      	bne.n	80040f0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040dc:	b292      	uxth	r2, r2
 80040de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f006 fe0d 	bl	800ad02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80040e8:	2100      	movs	r1, #0
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f925 	bl	800433a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f004 ff75 	bl	8008fe4 <USB_ReadInterrupts>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004104:	d10b      	bne.n	800411e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800410e:	b29a      	uxth	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004118:	b292      	uxth	r2, r2
 800411a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f004 ff5e 	bl	8008fe4 <USB_ReadInterrupts>
 8004128:	4603      	mov	r3, r0
 800412a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800412e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004132:	d10b      	bne.n	800414c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800413c:	b29a      	uxth	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004146:	b292      	uxth	r2, r2
 8004148:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f004 ff47 	bl	8008fe4 <USB_ReadInterrupts>
 8004156:	4603      	mov	r3, r0
 8004158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800415c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004160:	d126      	bne.n	80041b0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0204 	bic.w	r2, r2, #4
 8004174:	b292      	uxth	r2, r2
 8004176:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0208 	bic.w	r2, r2, #8
 800418c:	b292      	uxth	r2, r2
 800418e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f006 fdee 	bl	800ad74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041aa:	b292      	uxth	r2, r2
 80041ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f004 ff15 	bl	8008fe4 <USB_ReadInterrupts>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c4:	f040 8084 	bne.w	80042d0 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80041c8:	2300      	movs	r3, #0
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e011      	b.n	80041f2 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	7ffb      	ldrb	r3, [r7, #31]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	441a      	add	r2, r3
 80041da:	7ffb      	ldrb	r3, [r7, #31]
 80041dc:	8812      	ldrh	r2, [r2, #0]
 80041de:	b292      	uxth	r2, r2
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	f107 0120 	add.w	r1, r7, #32
 80041e6:	440b      	add	r3, r1
 80041e8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80041ec:	7ffb      	ldrb	r3, [r7, #31]
 80041ee:	3301      	adds	r3, #1
 80041f0:	77fb      	strb	r3, [r7, #31]
 80041f2:	7ffb      	ldrb	r3, [r7, #31]
 80041f4:	2b07      	cmp	r3, #7
 80041f6:	d9ea      	bls.n	80041ce <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004200:	b29a      	uxth	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	b292      	uxth	r2, r2
 800420c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0201 	bic.w	r2, r2, #1
 8004222:	b292      	uxth	r2, r2
 8004224:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004228:	bf00      	nop
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004232:	b29b      	uxth	r3, r3
 8004234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f6      	beq.n	800422a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800424e:	b292      	uxth	r2, r2
 8004250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004254:	2300      	movs	r3, #0
 8004256:	77fb      	strb	r3, [r7, #31]
 8004258:	e010      	b.n	800427c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800425a:	7ffb      	ldrb	r3, [r7, #31]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	4611      	mov	r1, r2
 8004262:	7ffa      	ldrb	r2, [r7, #31]
 8004264:	0092      	lsls	r2, r2, #2
 8004266:	440a      	add	r2, r1
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	f107 0120 	add.w	r1, r7, #32
 800426e:	440b      	add	r3, r1
 8004270:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004274:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004276:	7ffb      	ldrb	r3, [r7, #31]
 8004278:	3301      	adds	r3, #1
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	7ffb      	ldrb	r3, [r7, #31]
 800427e:	2b07      	cmp	r3, #7
 8004280:	d9eb      	bls.n	800425a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800428a:	b29a      	uxth	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0208 	orr.w	r2, r2, #8
 8004294:	b292      	uxth	r2, r2
 8004296:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ac:	b292      	uxth	r2, r2
 80042ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0204 	orr.w	r2, r2, #4
 80042c4:	b292      	uxth	r2, r2
 80042c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f006 fd38 	bl	800ad40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f004 fe85 	bl	8008fe4 <USB_ReadInterrupts>
 80042da:	4603      	mov	r3, r0
 80042dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e4:	d10e      	bne.n	8004304 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042f8:	b292      	uxth	r2, r2
 80042fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f006 fcf1 	bl	800ace6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f004 fe6b 	bl	8008fe4 <USB_ReadInterrupts>
 800430e:	4603      	mov	r3, r0
 8004310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004318:	d10b      	bne.n	8004332 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004322:	b29a      	uxth	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800432c:	b292      	uxth	r2, r2
 800432e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004332:	bf00      	nop
 8004334:	3720      	adds	r7, #32
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	460b      	mov	r3, r1
 8004344:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_PCD_SetAddress+0x1a>
 8004350:	2302      	movs	r3, #2
 8004352:	e013      	b.n	800437c <HAL_PCD_SetAddress+0x42>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	78fa      	ldrb	r2, [r7, #3]
 800436a:	4611      	mov	r1, r2
 800436c:	4618      	mov	r0, r3
 800436e:	f004 fe12 	bl	8008f96 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	4608      	mov	r0, r1
 800438e:	4611      	mov	r1, r2
 8004390:	461a      	mov	r2, r3
 8004392:	4603      	mov	r3, r0
 8004394:	70fb      	strb	r3, [r7, #3]
 8004396:	460b      	mov	r3, r1
 8004398:	803b      	strh	r3, [r7, #0]
 800439a:	4613      	mov	r3, r2
 800439c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	da0e      	bge.n	80043c8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4413      	add	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	705a      	strb	r2, [r3, #1]
 80043c6:	e00e      	b.n	80043e6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	f003 0207 	and.w	r2, r3, #7
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	4413      	add	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043f2:	883a      	ldrh	r2, [r7, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	78ba      	ldrb	r2, [r7, #2]
 80043fc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	785b      	ldrb	r3, [r3, #1]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004410:	78bb      	ldrb	r3, [r7, #2]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d102      	bne.n	800441c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_PCD_EP_Open+0xa6>
 8004426:	2302      	movs	r3, #2
 8004428:	e00e      	b.n	8004448 <HAL_PCD_EP_Open+0xc4>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68f9      	ldr	r1, [r7, #12]
 8004438:	4618      	mov	r0, r3
 800443a:	f002 fe39 	bl	80070b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004446:	7afb      	ldrb	r3, [r7, #11]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800445c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004460:	2b00      	cmp	r3, #0
 8004462:	da0e      	bge.n	8004482 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	4413      	add	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	705a      	strb	r2, [r3, #1]
 8004480:	e00e      	b.n	80044a0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	f003 0207 	and.w	r2, r3, #7
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	4413      	add	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_PCD_EP_Close+0x6a>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e00e      	b.n	80044d8 <HAL_PCD_EP_Close+0x88>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68f9      	ldr	r1, [r7, #12]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f003 f95b 	bl	8007784 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	460b      	mov	r3, r1
 80044ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044f0:	7afb      	ldrb	r3, [r7, #11]
 80044f2:	f003 0207 	and.w	r2, r3, #7
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4413      	add	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2200      	movs	r2, #0
 8004518:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004520:	7afb      	ldrb	r3, [r7, #11]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	b2da      	uxtb	r2, r3
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800452c:	7afb      	ldrb	r3, [r7, #11]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6979      	ldr	r1, [r7, #20]
 800453c:	4618      	mov	r0, r3
 800453e:	f003 fb0d 	bl	8007b5c <USB_EPStartXfer>
 8004542:	e005      	b.n	8004550 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6979      	ldr	r1, [r7, #20]
 800454a:	4618      	mov	r0, r3
 800454c:	f003 fb06 	bl	8007b5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	460b      	mov	r3, r1
 8004564:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	f003 0207 	and.w	r2, r3, #7
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	440b      	add	r3, r1
 8004578:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800457c:	681b      	ldr	r3, [r3, #0]
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	607a      	str	r2, [r7, #4]
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	460b      	mov	r3, r1
 8004596:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004598:	7afb      	ldrb	r3, [r7, #11]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2200      	movs	r2, #0
 80045cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2201      	movs	r2, #1
 80045d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045d4:	7afb      	ldrb	r3, [r7, #11]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045e0:	7afb      	ldrb	r3, [r7, #11]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6979      	ldr	r1, [r7, #20]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f003 fab3 	bl	8007b5c <USB_EPStartXfer>
 80045f6:	e005      	b.n	8004604 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6979      	ldr	r1, [r7, #20]
 80045fe:	4618      	mov	r0, r3
 8004600:	f003 faac 	bl	8007b5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	f003 0207 	and.w	r2, r3, #7
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	429a      	cmp	r2, r3
 8004626:	d901      	bls.n	800462c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e04c      	b.n	80046c6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800462c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004630:	2b00      	cmp	r3, #0
 8004632:	da0e      	bge.n	8004652 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	4413      	add	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	705a      	strb	r2, [r3, #1]
 8004650:	e00c      	b.n	800466c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	4413      	add	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	b2da      	uxtb	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_PCD_EP_SetStall+0x7e>
 8004688:	2302      	movs	r3, #2
 800468a:	e01c      	b.n	80046c6 <HAL_PCD_EP_SetStall+0xb8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68f9      	ldr	r1, [r7, #12]
 800469a:	4618      	mov	r0, r3
 800469c:	f004 fb7e 	bl	8008d9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d108      	bne.n	80046bc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80046b4:	4619      	mov	r1, r3
 80046b6:	4610      	mov	r0, r2
 80046b8:	f004 fca3 	bl	8009002 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	f003 020f 	and.w	r2, r3, #15
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d901      	bls.n	80046ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e040      	b.n	800476e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	da0e      	bge.n	8004712 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	4613      	mov	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	4413      	add	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	705a      	strb	r2, [r3, #1]
 8004710:	e00e      	b.n	8004730 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	f003 0207 	and.w	r2, r3, #7
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4413      	add	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	b2da      	uxtb	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_PCD_EP_ClrStall+0x82>
 800474c:	2302      	movs	r3, #2
 800474e:	e00e      	b.n	800476e <HAL_PCD_EP_ClrStall+0xa0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68f9      	ldr	r1, [r7, #12]
 800475e:	4618      	mov	r0, r3
 8004760:	f004 fb6c 	bl	8008e3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b08e      	sub	sp, #56	; 0x38
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800477e:	e2df      	b.n	8004d40 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004788:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800478a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004796:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800479a:	2b00      	cmp	r3, #0
 800479c:	f040 8158 	bne.w	8004a50 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80047a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d152      	bne.n	8004850 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	81fb      	strh	r3, [r7, #14]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	89fb      	ldrh	r3, [r7, #14]
 80047c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3328      	adds	r3, #40	; 0x28
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047dc:	b29b      	uxth	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	4413      	add	r3, r2
 80047e8:	3302      	adds	r3, #2
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	441a      	add	r2, r3
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800480e:	2100      	movs	r1, #0
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f006 fa4e 	bl	800acb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 828e 	beq.w	8004d40 <PCD_EP_ISR_Handler+0x5ca>
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f040 8289 	bne.w	8004d40 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800483a:	b2da      	uxtb	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	b292      	uxth	r2, r2
 8004842:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800484e:	e277      	b.n	8004d40 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004860:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004866:	2b00      	cmp	r3, #0
 8004868:	d034      	beq.n	80048d4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004872:	b29b      	uxth	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	3306      	adds	r3, #6
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f004 fbfa 	bl	80090a2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80048ba:	4013      	ands	r3, r2
 80048bc:	823b      	strh	r3, [r7, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	8a3a      	ldrh	r2, [r7, #16]
 80048c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048c8:	b292      	uxth	r2, r2
 80048ca:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f006 f9c3 	bl	800ac58 <HAL_PCD_SetupStageCallback>
 80048d2:	e235      	b.n	8004d40 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048d4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f280 8231 	bge.w	8004d40 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80048ea:	4013      	ands	r3, r2
 80048ec:	83bb      	strh	r3, [r7, #28]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	8bba      	ldrh	r2, [r7, #28]
 80048f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048f8:	b292      	uxth	r2, r2
 80048fa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004904:	b29b      	uxth	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	4413      	add	r3, r2
 8004910:	3306      	adds	r3, #6
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d019      	beq.n	8004964 <PCD_EP_ISR_Handler+0x1ee>
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d015      	beq.n	8004964 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	6959      	ldr	r1, [r3, #20]
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004948:	b29b      	uxth	r3, r3
 800494a:	f004 fbaa 	bl	80090a2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	441a      	add	r2, r3
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800495c:	2100      	movs	r1, #0
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f006 f98c 	bl	800ac7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	4413      	add	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d112      	bne.n	80049b2 <PCD_EP_ISR_Handler+0x23c>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004996:	b29a      	uxth	r2, r3
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	801a      	strh	r2, [r3, #0]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	801a      	strh	r2, [r3, #0]
 80049b0:	e02f      	b.n	8004a12 <PCD_EP_ISR_Handler+0x29c>
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b3e      	cmp	r3, #62	; 0x3e
 80049b8:	d813      	bhi.n	80049e2 <PCD_EP_ISR_Handler+0x26c>
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	633b      	str	r3, [r7, #48]	; 0x30
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <PCD_EP_ISR_Handler+0x25e>
 80049ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d0:	3301      	adds	r3, #1
 80049d2:	633b      	str	r3, [r7, #48]	; 0x30
 80049d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	029b      	lsls	r3, r3, #10
 80049da:	b29a      	uxth	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	801a      	strh	r2, [r3, #0]
 80049e0:	e017      	b.n	8004a12 <PCD_EP_ISR_Handler+0x29c>
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	633b      	str	r3, [r7, #48]	; 0x30
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 031f 	and.w	r3, r3, #31
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d102      	bne.n	80049fc <PCD_EP_ISR_Handler+0x286>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	3b01      	subs	r3, #1
 80049fa:	633b      	str	r3, [r7, #48]	; 0x30
 80049fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	029b      	lsls	r3, r3, #10
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	827b      	strh	r3, [r7, #18]
 8004a24:	8a7b      	ldrh	r3, [r7, #18]
 8004a26:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a2a:	827b      	strh	r3, [r7, #18]
 8004a2c:	8a7b      	ldrh	r3, [r7, #18]
 8004a2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a32:	827b      	strh	r3, [r7, #18]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	8a7b      	ldrh	r3, [r7, #18]
 8004a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	8013      	strh	r3, [r2, #0]
 8004a4e:	e177      	b.n	8004d40 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a62:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f280 80ea 	bge.w	8004c40 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a82:	4013      	ands	r3, r2
 8004a84:	853b      	strh	r3, [r7, #40]	; 0x28
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004a96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a9a:	b292      	uxth	r2, r2
 8004a9c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004a9e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	7b1b      	ldrb	r3, [r3, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d122      	bne.n	8004b02 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	4413      	add	r3, r2
 8004ad0:	3306      	adds	r3, #6
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ae4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004ae6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8087 	beq.w	8004bfc <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	6959      	ldr	r1, [r3, #20]
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	88da      	ldrh	r2, [r3, #6]
 8004afa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004afc:	f004 fad1 	bl	80090a2 <USB_ReadPMA>
 8004b00:	e07c      	b.n	8004bfc <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	78db      	ldrb	r3, [r3, #3]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d108      	bne.n	8004b1c <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004b0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f923 	bl	8004d5c <HAL_PCD_EP_DB_Receive>
 8004b16:	4603      	mov	r3, r0
 8004b18:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b1a:	e06f      	b.n	8004bfc <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	441a      	add	r2, r3
 8004b46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d021      	beq.n	8004bba <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4413      	add	r3, r2
 8004b8a:	3302      	adds	r3, #2
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6812      	ldr	r2, [r2, #0]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b9e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004ba0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d02a      	beq.n	8004bfc <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	6959      	ldr	r1, [r3, #20]
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	891a      	ldrh	r2, [r3, #8]
 8004bb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bb4:	f004 fa75 	bl	80090a2 <USB_ReadPMA>
 8004bb8:	e020      	b.n	8004bfc <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4413      	add	r3, r2
 8004bce:	3306      	adds	r3, #6
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004be2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004be4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d008      	beq.n	8004bfc <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	6959      	ldr	r1, [r3, #20]
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	895a      	ldrh	r2, [r3, #10]
 8004bf6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bf8:	f004 fa53 	bl	80090a2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c02:	441a      	add	r2, r3
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c0e:	441a      	add	r2, r3
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d004      	beq.n	8004c26 <PCD_EP_ISR_Handler+0x4b0>
 8004c1c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d206      	bcs.n	8004c34 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f006 f825 	bl	800ac7c <HAL_PCD_DataOutStageCallback>
 8004c32:	e005      	b.n	8004c40 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f002 ff8e 	bl	8007b5c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004c40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d07a      	beq.n	8004d40 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8004c4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c78:	843b      	strh	r3, [r7, #32]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	441a      	add	r2, r3
 8004c88:	8c3b      	ldrh	r3, [r7, #32]
 8004c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	78db      	ldrb	r3, [r3, #3]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d108      	bne.n	8004cb0 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d146      	bne.n	8004d34 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004ca6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d141      	bne.n	8004d34 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cd8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	8bfb      	ldrh	r3, [r7, #30]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d906      	bls.n	8004cf2 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	699a      	ldr	r2, [r3, #24]
 8004ce8:	8bfb      	ldrh	r3, [r7, #30]
 8004cea:	1ad2      	subs	r2, r2, r3
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	619a      	str	r2, [r3, #24]
 8004cf0:	e002      	b.n	8004cf8 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	4619      	mov	r1, r3
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f005 ffd3 	bl	800acb2 <HAL_PCD_DataInStageCallback>
 8004d0c:	e018      	b.n	8004d40 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	695a      	ldr	r2, [r3, #20]
 8004d12:	8bfb      	ldrh	r3, [r7, #30]
 8004d14:	441a      	add	r2, r3
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	69da      	ldr	r2, [r3, #28]
 8004d1e:	8bfb      	ldrh	r3, [r7, #30]
 8004d20:	441a      	add	r2, r3
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f002 ff15 	bl	8007b5c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004d32:	e005      	b.n	8004d40 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004d34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d36:	461a      	mov	r2, r3
 8004d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f91b 	bl	8004f76 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	b21b      	sxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f6ff ad17 	blt.w	8004780 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3738      	adds	r7, #56	; 0x38
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d07e      	beq.n	8004e72 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	4413      	add	r3, r2
 8004d88:	3302      	adds	r3, #2
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d9c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	8b7b      	ldrh	r3, [r7, #26]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d306      	bcc.n	8004db6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	699a      	ldr	r2, [r3, #24]
 8004dac:	8b7b      	ldrh	r3, [r7, #26]
 8004dae:	1ad2      	subs	r2, r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	619a      	str	r2, [r3, #24]
 8004db4:	e002      	b.n	8004dbc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2200      	movs	r2, #0
 8004dba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d123      	bne.n	8004e0c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	833b      	strh	r3, [r7, #24]
 8004de0:	8b3b      	ldrh	r3, [r7, #24]
 8004de2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004de6:	833b      	strh	r3, [r7, #24]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	441a      	add	r2, r3
 8004df6:	8b3b      	ldrh	r3, [r7, #24]
 8004df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e0c:	88fb      	ldrh	r3, [r7, #6]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01f      	beq.n	8004e56 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e30:	82fb      	strh	r3, [r7, #22]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	441a      	add	r2, r3
 8004e40:	8afb      	ldrh	r3, [r7, #22]
 8004e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e56:	8b7b      	ldrh	r3, [r7, #26]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8087 	beq.w	8004f6c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6959      	ldr	r1, [r3, #20]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	891a      	ldrh	r2, [r3, #8]
 8004e6a:	8b7b      	ldrh	r3, [r7, #26]
 8004e6c:	f004 f919 	bl	80090a2 <USB_ReadPMA>
 8004e70:	e07c      	b.n	8004f6c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	4413      	add	r3, r2
 8004e86:	3306      	adds	r3, #6
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e9a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	699a      	ldr	r2, [r3, #24]
 8004ea0:	8b7b      	ldrh	r3, [r7, #26]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d306      	bcc.n	8004eb4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	8b7b      	ldrh	r3, [r7, #26]
 8004eac:	1ad2      	subs	r2, r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	619a      	str	r2, [r3, #24]
 8004eb2:	e002      	b.n	8004eba <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d123      	bne.n	8004f0a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004edc:	83fb      	strh	r3, [r7, #30]
 8004ede:	8bfb      	ldrh	r3, [r7, #30]
 8004ee0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ee4:	83fb      	strh	r3, [r7, #30]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	441a      	add	r2, r3
 8004ef4:	8bfb      	ldrh	r3, [r7, #30]
 8004ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d11f      	bne.n	8004f54 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	83bb      	strh	r3, [r7, #28]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	8bbb      	ldrh	r3, [r7, #28]
 8004f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f54:	8b7b      	ldrh	r3, [r7, #26]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d008      	beq.n	8004f6c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6959      	ldr	r1, [r3, #20]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	895a      	ldrh	r2, [r3, #10]
 8004f66:	8b7b      	ldrh	r3, [r7, #26]
 8004f68:	f004 f89b 	bl	80090a2 <USB_ReadPMA>
    }
  }

  return count;
 8004f6c:	8b7b      	ldrh	r3, [r7, #26]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b094      	sub	sp, #80	; 0x50
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	4613      	mov	r3, r2
 8004f82:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f84:	88fb      	ldrh	r3, [r7, #6]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8138 	beq.w	8005200 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	3302      	adds	r3, #2
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	699a      	ldr	r2, [r3, #24]
 8004fc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d907      	bls.n	8004fd8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	699a      	ldr	r2, [r3, #24]
 8004fcc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004fd0:	1ad2      	subs	r2, r2, r3
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	619a      	str	r2, [r3, #24]
 8004fd6:	e002      	b.n	8004fde <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d12c      	bne.n	8005040 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	4619      	mov	r1, r3
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f005 fe60 	bl	800acb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 823a 	beq.w	8005472 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005018:	82fb      	strh	r3, [r7, #22]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	8afb      	ldrh	r3, [r7, #22]
 800502a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005032:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503a:	b29b      	uxth	r3, r3
 800503c:	8013      	strh	r3, [r2, #0]
 800503e:	e218      	b.n	8005472 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01f      	beq.n	800508a <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005064:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	441a      	add	r2, r3
 8005074:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800507a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800507e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005086:	b29b      	uxth	r3, r3
 8005088:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005090:	2b01      	cmp	r3, #1
 8005092:	f040 81ee 	bne.w	8005472 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800509e:	441a      	add	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80050ac:	441a      	add	r2, r3
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6a1a      	ldr	r2, [r3, #32]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d309      	bcc.n	80050d2 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6a1a      	ldr	r2, [r3, #32]
 80050c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ca:	1ad2      	subs	r2, r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	621a      	str	r2, [r3, #32]
 80050d0:	e015      	b.n	80050fe <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d107      	bne.n	80050ea <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80050da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80050de:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80050e8:	e009      	b.n	80050fe <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2200      	movs	r2, #0
 80050fc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d155      	bne.n	80051b2 <HAL_PCD_EP_DB_Transmit+0x23c>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005114:	b29b      	uxth	r3, r3
 8005116:	461a      	mov	r2, r3
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	4413      	add	r3, r2
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	011a      	lsls	r2, r3, #4
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	4413      	add	r3, r2
 8005128:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005130:	2b00      	cmp	r3, #0
 8005132:	d112      	bne.n	800515a <HAL_PCD_EP_DB_Transmit+0x1e4>
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800513e:	b29a      	uxth	r2, r3
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	801a      	strh	r2, [r3, #0]
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800514e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005152:	b29a      	uxth	r2, r3
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	801a      	strh	r2, [r3, #0]
 8005158:	e047      	b.n	80051ea <HAL_PCD_EP_DB_Transmit+0x274>
 800515a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800515c:	2b3e      	cmp	r3, #62	; 0x3e
 800515e:	d811      	bhi.n	8005184 <HAL_PCD_EP_DB_Transmit+0x20e>
 8005160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005162:	085b      	lsrs	r3, r3, #1
 8005164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_PCD_EP_DB_Transmit+0x200>
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	3301      	adds	r3, #1
 8005174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	b29b      	uxth	r3, r3
 800517a:	029b      	lsls	r3, r3, #10
 800517c:	b29a      	uxth	r2, r3
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	e032      	b.n	80051ea <HAL_PCD_EP_DB_Transmit+0x274>
 8005184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800518a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800518c:	f003 031f 	and.w	r3, r3, #31
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <HAL_PCD_EP_DB_Transmit+0x224>
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	3b01      	subs	r3, #1
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	b29b      	uxth	r3, r3
 800519e:	029b      	lsls	r3, r3, #10
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	801a      	strh	r2, [r3, #0]
 80051b0:	e01b      	b.n	80051ea <HAL_PCD_EP_DB_Transmit+0x274>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	785b      	ldrb	r3, [r3, #1]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d117      	bne.n	80051ea <HAL_PCD_EP_DB_Transmit+0x274>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	4413      	add	r3, r2
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	011a      	lsls	r2, r3, #4
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	4413      	add	r3, r2
 80051dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051e0:	623b      	str	r3, [r7, #32]
 80051e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	6959      	ldr	r1, [r3, #20]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	891a      	ldrh	r2, [r3, #8]
 80051f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	f003 ff0d 	bl	8009018 <USB_WritePMA>
 80051fe:	e138      	b.n	8005472 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005208:	b29b      	uxth	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4413      	add	r3, r2
 8005214:	3306      	adds	r3, #6
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005228:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	699a      	ldr	r2, [r3, #24]
 8005230:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005234:	429a      	cmp	r2, r3
 8005236:	d307      	bcc.n	8005248 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	699a      	ldr	r2, [r3, #24]
 800523c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005240:	1ad2      	subs	r2, r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	619a      	str	r2, [r3, #24]
 8005246:	e002      	b.n	800524e <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2200      	movs	r2, #0
 800524c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d12e      	bne.n	80052b4 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	4619      	mov	r1, r3
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f005 fd28 	bl	800acb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005268:	2b00      	cmp	r3, #0
 800526a:	f040 8102 	bne.w	8005472 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	b29b      	uxth	r3, r3
 8005280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005288:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	441a      	add	r2, r3
 800529a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800529e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	8013      	strh	r3, [r2, #0]
 80052b2:	e0de      	b.n	8005472 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80052b4:	88fb      	ldrh	r3, [r7, #6]
 80052b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d11f      	bne.n	80052fe <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d8:	867b      	strh	r3, [r7, #50]	; 0x32
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005304:	2b01      	cmp	r3, #1
 8005306:	f040 80b4 	bne.w	8005472 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	695a      	ldr	r2, [r3, #20]
 800530e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005312:	441a      	add	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005320:	441a      	add	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	6a1a      	ldr	r2, [r3, #32]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	429a      	cmp	r2, r3
 8005330:	d309      	bcc.n	8005346 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533e:	1ad2      	subs	r2, r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	621a      	str	r2, [r3, #32]
 8005344:	e015      	b.n	8005372 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d107      	bne.n	800535e <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 800534e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005352:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800535c:	e009      	b.n	8005372 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2200      	movs	r2, #0
 8005368:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	643b      	str	r3, [r7, #64]	; 0x40
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d155      	bne.n	800542c <HAL_PCD_EP_DB_Transmit+0x4b6>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800538e:	b29b      	uxth	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005394:	4413      	add	r3, r2
 8005396:	63bb      	str	r3, [r7, #56]	; 0x38
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	011a      	lsls	r2, r3, #4
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	4413      	add	r3, r2
 80053a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053a6:	637b      	str	r3, [r7, #52]	; 0x34
 80053a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d112      	bne.n	80053d4 <HAL_PCD_EP_DB_Transmit+0x45e>
 80053ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053bc:	801a      	strh	r2, [r3, #0]
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	e044      	b.n	800545e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80053d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d6:	2b3e      	cmp	r3, #62	; 0x3e
 80053d8:	d811      	bhi.n	80053fe <HAL_PCD_EP_DB_Transmit+0x488>
 80053da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_PCD_EP_DB_Transmit+0x47a>
 80053ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ec:	3301      	adds	r3, #1
 80053ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	029b      	lsls	r3, r3, #10
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fa:	801a      	strh	r2, [r3, #0]
 80053fc:	e02f      	b.n	800545e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80053fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <HAL_PCD_EP_DB_Transmit+0x49e>
 800540e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005410:	3b01      	subs	r3, #1
 8005412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005416:	b29b      	uxth	r3, r3
 8005418:	029b      	lsls	r3, r3, #10
 800541a:	b29b      	uxth	r3, r3
 800541c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005424:	b29a      	uxth	r2, r3
 8005426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005428:	801a      	strh	r2, [r3, #0]
 800542a:	e018      	b.n	800545e <HAL_PCD_EP_DB_Transmit+0x4e8>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d114      	bne.n	800545e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800543c:	b29b      	uxth	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005442:	4413      	add	r3, r2
 8005444:	643b      	str	r3, [r7, #64]	; 0x40
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	011a      	lsls	r2, r3, #4
 800544c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544e:	4413      	add	r3, r2
 8005450:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005458:	b29a      	uxth	r2, r3
 800545a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	6959      	ldr	r1, [r3, #20]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	895a      	ldrh	r2, [r3, #10]
 800546a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800546c:	b29b      	uxth	r3, r3
 800546e:	f003 fdd3 	bl	8009018 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800548c:	82bb      	strh	r3, [r7, #20]
 800548e:	8abb      	ldrh	r3, [r7, #20]
 8005490:	f083 0310 	eor.w	r3, r3, #16
 8005494:	82bb      	strh	r3, [r7, #20]
 8005496:	8abb      	ldrh	r3, [r7, #20]
 8005498:	f083 0320 	eor.w	r3, r3, #32
 800549c:	82bb      	strh	r3, [r7, #20]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	441a      	add	r2, r3
 80054ac:	8abb      	ldrh	r3, [r7, #20]
 80054ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054be:	b29b      	uxth	r3, r3
 80054c0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3750      	adds	r7, #80	; 0x50
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	607b      	str	r3, [r7, #4]
 80054d6:	460b      	mov	r3, r1
 80054d8:	817b      	strh	r3, [r7, #10]
 80054da:	4613      	mov	r3, r2
 80054dc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80054de:	897b      	ldrh	r3, [r7, #10]
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00b      	beq.n	8005502 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054ea:	897b      	ldrh	r3, [r7, #10]
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e009      	b.n	8005516 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005502:	897a      	ldrh	r2, [r7, #10]
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005516:	893b      	ldrh	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d107      	bne.n	800552c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2200      	movs	r2, #0
 8005520:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	b29a      	uxth	r2, r3
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	80da      	strh	r2, [r3, #6]
 800552a:	e00b      	b.n	8005544 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2201      	movs	r2, #1
 8005530:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	b29a      	uxth	r2, r3
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	b29a      	uxth	r2, r3
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr

08005550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e26c      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 8087 	beq.w	800567e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005570:	4b92      	ldr	r3, [pc, #584]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 030c 	and.w	r3, r3, #12
 8005578:	2b04      	cmp	r3, #4
 800557a:	d00c      	beq.n	8005596 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800557c:	4b8f      	ldr	r3, [pc, #572]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f003 030c 	and.w	r3, r3, #12
 8005584:	2b08      	cmp	r3, #8
 8005586:	d112      	bne.n	80055ae <HAL_RCC_OscConfig+0x5e>
 8005588:	4b8c      	ldr	r3, [pc, #560]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005594:	d10b      	bne.n	80055ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005596:	4b89      	ldr	r3, [pc, #548]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d06c      	beq.n	800567c <HAL_RCC_OscConfig+0x12c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d168      	bne.n	800567c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e246      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b6:	d106      	bne.n	80055c6 <HAL_RCC_OscConfig+0x76>
 80055b8:	4b80      	ldr	r3, [pc, #512]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a7f      	ldr	r2, [pc, #508]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	e02e      	b.n	8005624 <HAL_RCC_OscConfig+0xd4>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10c      	bne.n	80055e8 <HAL_RCC_OscConfig+0x98>
 80055ce:	4b7b      	ldr	r3, [pc, #492]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a7a      	ldr	r2, [pc, #488]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	4b78      	ldr	r3, [pc, #480]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a77      	ldr	r2, [pc, #476]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	e01d      	b.n	8005624 <HAL_RCC_OscConfig+0xd4>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055f0:	d10c      	bne.n	800560c <HAL_RCC_OscConfig+0xbc>
 80055f2:	4b72      	ldr	r3, [pc, #456]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a71      	ldr	r2, [pc, #452]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 80055f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	4b6f      	ldr	r3, [pc, #444]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a6e      	ldr	r2, [pc, #440]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	e00b      	b.n	8005624 <HAL_RCC_OscConfig+0xd4>
 800560c:	4b6b      	ldr	r3, [pc, #428]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a6a      	ldr	r2, [pc, #424]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	4b68      	ldr	r3, [pc, #416]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a67      	ldr	r2, [pc, #412]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 800561e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005622:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d013      	beq.n	8005654 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562c:	f7fd fa64 	bl	8002af8 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005634:	f7fd fa60 	bl	8002af8 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b64      	cmp	r3, #100	; 0x64
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e1fa      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005646:	4b5d      	ldr	r3, [pc, #372]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f0      	beq.n	8005634 <HAL_RCC_OscConfig+0xe4>
 8005652:	e014      	b.n	800567e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7fd fa50 	bl	8002af8 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800565c:	f7fd fa4c 	bl	8002af8 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	; 0x64
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e1e6      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800566e:	4b53      	ldr	r3, [pc, #332]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x10c>
 800567a:	e000      	b.n	800567e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800567c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d063      	beq.n	8005752 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800568a:	4b4c      	ldr	r3, [pc, #304]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f003 030c 	and.w	r3, r3, #12
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005696:	4b49      	ldr	r3, [pc, #292]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f003 030c 	and.w	r3, r3, #12
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d11c      	bne.n	80056dc <HAL_RCC_OscConfig+0x18c>
 80056a2:	4b46      	ldr	r3, [pc, #280]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d116      	bne.n	80056dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ae:	4b43      	ldr	r3, [pc, #268]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d005      	beq.n	80056c6 <HAL_RCC_OscConfig+0x176>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d001      	beq.n	80056c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e1ba      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c6:	4b3d      	ldr	r3, [pc, #244]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	4939      	ldr	r1, [pc, #228]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056da:	e03a      	b.n	8005752 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d020      	beq.n	8005726 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056e4:	4b36      	ldr	r3, [pc, #216]	; (80057c0 <HAL_RCC_OscConfig+0x270>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ea:	f7fd fa05 	bl	8002af8 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f2:	f7fd fa01 	bl	8002af8 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e19b      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005704:	4b2d      	ldr	r3, [pc, #180]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f0      	beq.n	80056f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005710:	4b2a      	ldr	r3, [pc, #168]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	4927      	ldr	r1, [pc, #156]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005720:	4313      	orrs	r3, r2
 8005722:	600b      	str	r3, [r1, #0]
 8005724:	e015      	b.n	8005752 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005726:	4b26      	ldr	r3, [pc, #152]	; (80057c0 <HAL_RCC_OscConfig+0x270>)
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572c:	f7fd f9e4 	bl	8002af8 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005734:	f7fd f9e0 	bl	8002af8 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e17a      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005746:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f0      	bne.n	8005734 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d03a      	beq.n	80057d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d019      	beq.n	800579a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005766:	4b17      	ldr	r3, [pc, #92]	; (80057c4 <HAL_RCC_OscConfig+0x274>)
 8005768:	2201      	movs	r2, #1
 800576a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800576c:	f7fd f9c4 	bl	8002af8 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005774:	f7fd f9c0 	bl	8002af8 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e15a      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005786:	4b0d      	ldr	r3, [pc, #52]	; (80057bc <HAL_RCC_OscConfig+0x26c>)
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0f0      	beq.n	8005774 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005792:	2001      	movs	r0, #1
 8005794:	f000 fac4 	bl	8005d20 <RCC_Delay>
 8005798:	e01c      	b.n	80057d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800579a:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <HAL_RCC_OscConfig+0x274>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a0:	f7fd f9aa 	bl	8002af8 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057a6:	e00f      	b.n	80057c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a8:	f7fd f9a6 	bl	8002af8 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d908      	bls.n	80057c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e140      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
 80057ba:	bf00      	nop
 80057bc:	40021000 	.word	0x40021000
 80057c0:	42420000 	.word	0x42420000
 80057c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c8:	4b9e      	ldr	r3, [pc, #632]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e9      	bne.n	80057a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 80a6 	beq.w	800592e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057e2:	2300      	movs	r3, #0
 80057e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057e6:	4b97      	ldr	r3, [pc, #604]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10d      	bne.n	800580e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057f2:	4b94      	ldr	r3, [pc, #592]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	4a93      	ldr	r2, [pc, #588]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 80057f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057fc:	61d3      	str	r3, [r2, #28]
 80057fe:	4b91      	ldr	r3, [pc, #580]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005806:	60bb      	str	r3, [r7, #8]
 8005808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800580a:	2301      	movs	r3, #1
 800580c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580e:	4b8e      	ldr	r3, [pc, #568]	; (8005a48 <HAL_RCC_OscConfig+0x4f8>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d118      	bne.n	800584c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800581a:	4b8b      	ldr	r3, [pc, #556]	; (8005a48 <HAL_RCC_OscConfig+0x4f8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a8a      	ldr	r2, [pc, #552]	; (8005a48 <HAL_RCC_OscConfig+0x4f8>)
 8005820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005826:	f7fd f967 	bl	8002af8 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582e:	f7fd f963 	bl	8002af8 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b64      	cmp	r3, #100	; 0x64
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e0fd      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005840:	4b81      	ldr	r3, [pc, #516]	; (8005a48 <HAL_RCC_OscConfig+0x4f8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d106      	bne.n	8005862 <HAL_RCC_OscConfig+0x312>
 8005854:	4b7b      	ldr	r3, [pc, #492]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	4a7a      	ldr	r2, [pc, #488]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	6213      	str	r3, [r2, #32]
 8005860:	e02d      	b.n	80058be <HAL_RCC_OscConfig+0x36e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10c      	bne.n	8005884 <HAL_RCC_OscConfig+0x334>
 800586a:	4b76      	ldr	r3, [pc, #472]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	4a75      	ldr	r2, [pc, #468]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	6213      	str	r3, [r2, #32]
 8005876:	4b73      	ldr	r3, [pc, #460]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	4a72      	ldr	r2, [pc, #456]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 800587c:	f023 0304 	bic.w	r3, r3, #4
 8005880:	6213      	str	r3, [r2, #32]
 8005882:	e01c      	b.n	80058be <HAL_RCC_OscConfig+0x36e>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b05      	cmp	r3, #5
 800588a:	d10c      	bne.n	80058a6 <HAL_RCC_OscConfig+0x356>
 800588c:	4b6d      	ldr	r3, [pc, #436]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	4a6c      	ldr	r2, [pc, #432]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 8005892:	f043 0304 	orr.w	r3, r3, #4
 8005896:	6213      	str	r3, [r2, #32]
 8005898:	4b6a      	ldr	r3, [pc, #424]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	4a69      	ldr	r2, [pc, #420]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	6213      	str	r3, [r2, #32]
 80058a4:	e00b      	b.n	80058be <HAL_RCC_OscConfig+0x36e>
 80058a6:	4b67      	ldr	r3, [pc, #412]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	4a66      	ldr	r2, [pc, #408]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	6213      	str	r3, [r2, #32]
 80058b2:	4b64      	ldr	r3, [pc, #400]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	4a63      	ldr	r2, [pc, #396]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 80058b8:	f023 0304 	bic.w	r3, r3, #4
 80058bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d015      	beq.n	80058f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058c6:	f7fd f917 	bl	8002af8 <HAL_GetTick>
 80058ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058cc:	e00a      	b.n	80058e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ce:	f7fd f913 	bl	8002af8 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058dc:	4293      	cmp	r3, r2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e0ab      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e4:	4b57      	ldr	r3, [pc, #348]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ee      	beq.n	80058ce <HAL_RCC_OscConfig+0x37e>
 80058f0:	e014      	b.n	800591c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f2:	f7fd f901 	bl	8002af8 <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fa:	f7fd f8fd 	bl	8002af8 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f241 3288 	movw	r2, #5000	; 0x1388
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e095      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005910:	4b4c      	ldr	r3, [pc, #304]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1ee      	bne.n	80058fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800591c:	7dfb      	ldrb	r3, [r7, #23]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d105      	bne.n	800592e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005922:	4b48      	ldr	r3, [pc, #288]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	4a47      	ldr	r2, [pc, #284]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 8005928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800592c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 8081 	beq.w	8005a3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005938:	4b42      	ldr	r3, [pc, #264]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f003 030c 	and.w	r3, r3, #12
 8005940:	2b08      	cmp	r3, #8
 8005942:	d061      	beq.n	8005a08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d146      	bne.n	80059da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594c:	4b3f      	ldr	r3, [pc, #252]	; (8005a4c <HAL_RCC_OscConfig+0x4fc>)
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005952:	f7fd f8d1 	bl	8002af8 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800595a:	f7fd f8cd 	bl	8002af8 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e067      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800596c:	4b35      	ldr	r3, [pc, #212]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1f0      	bne.n	800595a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005980:	d108      	bne.n	8005994 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005982:	4b30      	ldr	r3, [pc, #192]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	492d      	ldr	r1, [pc, #180]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 8005990:	4313      	orrs	r3, r2
 8005992:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005994:	4b2b      	ldr	r3, [pc, #172]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a19      	ldr	r1, [r3, #32]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	430b      	orrs	r3, r1
 80059a6:	4927      	ldr	r1, [pc, #156]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059ac:	4b27      	ldr	r3, [pc, #156]	; (8005a4c <HAL_RCC_OscConfig+0x4fc>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b2:	f7fd f8a1 	bl	8002af8 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059b8:	e008      	b.n	80059cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ba:	f7fd f89d 	bl	8002af8 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d901      	bls.n	80059cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e037      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059cc:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0f0      	beq.n	80059ba <HAL_RCC_OscConfig+0x46a>
 80059d8:	e02f      	b.n	8005a3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059da:	4b1c      	ldr	r3, [pc, #112]	; (8005a4c <HAL_RCC_OscConfig+0x4fc>)
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e0:	f7fd f88a 	bl	8002af8 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e8:	f7fd f886 	bl	8002af8 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e020      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059fa:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1f0      	bne.n	80059e8 <HAL_RCC_OscConfig+0x498>
 8005a06:	e018      	b.n	8005a3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e013      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a14:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <HAL_RCC_OscConfig+0x4f4>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d106      	bne.n	8005a36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d001      	beq.n	8005a3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40021000 	.word	0x40021000
 8005a48:	40007000 	.word	0x40007000
 8005a4c:	42420060 	.word	0x42420060

08005a50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e0d0      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a64:	4b6a      	ldr	r3, [pc, #424]	; (8005c10 <HAL_RCC_ClockConfig+0x1c0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d910      	bls.n	8005a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a72:	4b67      	ldr	r3, [pc, #412]	; (8005c10 <HAL_RCC_ClockConfig+0x1c0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f023 0207 	bic.w	r2, r3, #7
 8005a7a:	4965      	ldr	r1, [pc, #404]	; (8005c10 <HAL_RCC_ClockConfig+0x1c0>)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a82:	4b63      	ldr	r3, [pc, #396]	; (8005c10 <HAL_RCC_ClockConfig+0x1c0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e0b8      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d020      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aac:	4b59      	ldr	r3, [pc, #356]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	4a58      	ldr	r2, [pc, #352]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ab6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d005      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ac4:	4b53      	ldr	r3, [pc, #332]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	4a52      	ldr	r2, [pc, #328]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005aca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005ace:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad0:	4b50      	ldr	r3, [pc, #320]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	494d      	ldr	r1, [pc, #308]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d040      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d107      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af6:	4b47      	ldr	r3, [pc, #284]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d115      	bne.n	8005b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e07f      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d107      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b0e:	4b41      	ldr	r3, [pc, #260]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e073      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b1e:	4b3d      	ldr	r3, [pc, #244]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e06b      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b2e:	4b39      	ldr	r3, [pc, #228]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f023 0203 	bic.w	r2, r3, #3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	4936      	ldr	r1, [pc, #216]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b40:	f7fc ffda 	bl	8002af8 <HAL_GetTick>
 8005b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b46:	e00a      	b.n	8005b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b48:	f7fc ffd6 	bl	8002af8 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e053      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b5e:	4b2d      	ldr	r3, [pc, #180]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f003 020c 	and.w	r2, r3, #12
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d1eb      	bne.n	8005b48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b70:	4b27      	ldr	r3, [pc, #156]	; (8005c10 <HAL_RCC_ClockConfig+0x1c0>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d210      	bcs.n	8005ba0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7e:	4b24      	ldr	r3, [pc, #144]	; (8005c10 <HAL_RCC_ClockConfig+0x1c0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 0207 	bic.w	r2, r3, #7
 8005b86:	4922      	ldr	r1, [pc, #136]	; (8005c10 <HAL_RCC_ClockConfig+0x1c0>)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8e:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <HAL_RCC_ClockConfig+0x1c0>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e032      	b.n	8005c06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bac:	4b19      	ldr	r3, [pc, #100]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	4916      	ldr	r1, [pc, #88]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bca:	4b12      	ldr	r3, [pc, #72]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	490e      	ldr	r1, [pc, #56]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bde:	f000 f821 	bl	8005c24 <HAL_RCC_GetSysClockFreq>
 8005be2:	4602      	mov	r2, r0
 8005be4:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <HAL_RCC_ClockConfig+0x1c4>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	091b      	lsrs	r3, r3, #4
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	490a      	ldr	r1, [pc, #40]	; (8005c18 <HAL_RCC_ClockConfig+0x1c8>)
 8005bf0:	5ccb      	ldrb	r3, [r1, r3]
 8005bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf6:	4a09      	ldr	r2, [pc, #36]	; (8005c1c <HAL_RCC_ClockConfig+0x1cc>)
 8005bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bfa:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <HAL_RCC_ClockConfig+0x1d0>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fc ff38 	bl	8002a74 <HAL_InitTick>

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	40022000 	.word	0x40022000
 8005c14:	40021000 	.word	0x40021000
 8005c18:	0800c738 	.word	0x0800c738
 8005c1c:	20000024 	.word	0x20000024
 8005c20:	20000028 	.word	0x20000028

08005c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c24:	b490      	push	{r4, r7}
 8005c26:	b08a      	sub	sp, #40	; 0x28
 8005c28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005c2a:	4b2a      	ldr	r3, [pc, #168]	; (8005cd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005c2c:	1d3c      	adds	r4, r7, #4
 8005c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005c34:	f240 2301 	movw	r3, #513	; 0x201
 8005c38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61fb      	str	r3, [r7, #28]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	2300      	movs	r3, #0
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c4e:	4b22      	ldr	r3, [pc, #136]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f003 030c 	and.w	r3, r3, #12
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d002      	beq.n	8005c64 <HAL_RCC_GetSysClockFreq+0x40>
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d003      	beq.n	8005c6a <HAL_RCC_GetSysClockFreq+0x46>
 8005c62:	e02d      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c64:	4b1d      	ldr	r3, [pc, #116]	; (8005cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c66:	623b      	str	r3, [r7, #32]
      break;
 8005c68:	e02d      	b.n	8005cc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	0c9b      	lsrs	r3, r3, #18
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c76:	4413      	add	r3, r2
 8005c78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005c7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d013      	beq.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c88:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	0c5b      	lsrs	r3, r3, #17
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c96:	4413      	add	r3, r2
 8005c98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005c9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	4a0e      	ldr	r2, [pc, #56]	; (8005cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ca2:	fb02 f203 	mul.w	r2, r2, r3
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
 8005cae:	e004      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4a0b      	ldr	r2, [pc, #44]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cb4:	fb02 f303 	mul.w	r3, r2, r3
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	623b      	str	r3, [r7, #32]
      break;
 8005cbe:	e002      	b.n	8005cc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005cc0:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cc2:	623b      	str	r3, [r7, #32]
      break;
 8005cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3728      	adds	r7, #40	; 0x28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc90      	pop	{r4, r7}
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	0800c6d0 	.word	0x0800c6d0
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	007a1200 	.word	0x007a1200
 8005ce0:	003d0900 	.word	0x003d0900

08005ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ce8:	4b02      	ldr	r3, [pc, #8]	; (8005cf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cea:	681b      	ldr	r3, [r3, #0]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bc80      	pop	{r7}
 8005cf2:	4770      	bx	lr
 8005cf4:	20000024 	.word	0x20000024

08005cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cfc:	f7ff fff2 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 8005d00:	4602      	mov	r2, r0
 8005d02:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	0adb      	lsrs	r3, r3, #11
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	4903      	ldr	r1, [pc, #12]	; (8005d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d0e:	5ccb      	ldrb	r3, [r1, r3]
 8005d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	0800c748 	.word	0x0800c748

08005d20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d28:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <RCC_Delay+0x34>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a0a      	ldr	r2, [pc, #40]	; (8005d58 <RCC_Delay+0x38>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	0a5b      	lsrs	r3, r3, #9
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	fb02 f303 	mul.w	r3, r2, r3
 8005d3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d3c:	bf00      	nop
  }
  while (Delay --);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	1e5a      	subs	r2, r3, #1
 8005d42:	60fa      	str	r2, [r7, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1f9      	bne.n	8005d3c <RCC_Delay+0x1c>
}
 8005d48:	bf00      	nop
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr
 8005d54:	20000024 	.word	0x20000024
 8005d58:	10624dd3 	.word	0x10624dd3

08005d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d07d      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d7c:	4b4f      	ldr	r3, [pc, #316]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10d      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d88:	4b4c      	ldr	r3, [pc, #304]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	4a4b      	ldr	r2, [pc, #300]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d92:	61d3      	str	r3, [r2, #28]
 8005d94:	4b49      	ldr	r3, [pc, #292]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9c:	60bb      	str	r3, [r7, #8]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005da0:	2301      	movs	r3, #1
 8005da2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da4:	4b46      	ldr	r3, [pc, #280]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d118      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005db0:	4b43      	ldr	r3, [pc, #268]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a42      	ldr	r2, [pc, #264]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dbc:	f7fc fe9c 	bl	8002af8 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc4:	f7fc fe98 	bl	8002af8 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b64      	cmp	r3, #100	; 0x64
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e06d      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd6:	4b3a      	ldr	r3, [pc, #232]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f0      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005de2:	4b36      	ldr	r3, [pc, #216]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d02e      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d027      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e00:	4b2e      	ldr	r3, [pc, #184]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e0a:	4b2e      	ldr	r3, [pc, #184]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e10:	4b2c      	ldr	r3, [pc, #176]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e16:	4a29      	ldr	r2, [pc, #164]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d014      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e26:	f7fc fe67 	bl	8002af8 <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e2c:	e00a      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e2e:	f7fc fe63 	bl	8002af8 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e036      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e44:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0ee      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e50:	4b1a      	ldr	r3, [pc, #104]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	4917      	ldr	r1, [pc, #92]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d105      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e68:	4b14      	ldr	r3, [pc, #80]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	4a13      	ldr	r2, [pc, #76]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e80:	4b0e      	ldr	r3, [pc, #56]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	490b      	ldr	r1, [pc, #44]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d008      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e9e:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	4904      	ldr	r1, [pc, #16]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	40007000 	.word	0x40007000
 8005ec4:	42420440 	.word	0x42420440

08005ec8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ec8:	b590      	push	{r4, r7, lr}
 8005eca:	b08d      	sub	sp, #52	; 0x34
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005ed0:	4b5a      	ldr	r3, [pc, #360]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005ed2:	f107 040c 	add.w	r4, r7, #12
 8005ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005edc:	f240 2301 	movw	r3, #513	; 0x201
 8005ee0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eea:	2300      	movs	r3, #0
 8005eec:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61fb      	str	r3, [r7, #28]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b10      	cmp	r3, #16
 8005efa:	d00a      	beq.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b10      	cmp	r3, #16
 8005f00:	f200 8091 	bhi.w	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d04c      	beq.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d07c      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005f10:	e089      	b.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8005f12:	4b4b      	ldr	r3, [pc, #300]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005f18:	4b49      	ldr	r3, [pc, #292]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8082 	beq.w	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	0c9b      	lsrs	r3, r3, #18
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005f32:	4413      	add	r3, r2
 8005f34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005f38:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d018      	beq.n	8005f76 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f44:	4b3e      	ldr	r3, [pc, #248]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	0c5b      	lsrs	r3, r3, #17
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005f52:	4413      	add	r3, r2
 8005f54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00d      	beq.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005f64:	4a37      	ldr	r2, [pc, #220]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	fb02 f303 	mul.w	r3, r2, r3
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f74:	e004      	b.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	4a33      	ldr	r2, [pc, #204]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8005f7a:	fb02 f303 	mul.w	r3, r2, r3
 8005f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005f80:	4b2f      	ldr	r3, [pc, #188]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f8c:	d102      	bne.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005f92:	e04a      	b.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	4a2c      	ldr	r2, [pc, #176]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005fa2:	e042      	b.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8005fa4:	4b26      	ldr	r3, [pc, #152]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb4:	d108      	bne.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8005fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc6:	e01f      	b.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fd2:	d109      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005fd4:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8005fe0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe6:	e00f      	b.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff2:	d11c      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005ff4:	4b12      	ldr	r3, [pc, #72]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d016      	beq.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8006000:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006004:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006006:	e012      	b.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006008:	e011      	b.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800600a:	f7ff fe75 	bl	8005cf8 <HAL_RCC_GetPCLK2Freq>
 800600e:	4602      	mov	r2, r0
 8006010:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	0b9b      	lsrs	r3, r3, #14
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	3301      	adds	r3, #1
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006022:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006024:	e004      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006026:	bf00      	nop
 8006028:	e002      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800602a:	bf00      	nop
 800602c:	e000      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800602e:	bf00      	nop
    }
  }
  return (frequency);
 8006030:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006032:	4618      	mov	r0, r3
 8006034:	3734      	adds	r7, #52	; 0x34
 8006036:	46bd      	mov	sp, r7
 8006038:	bd90      	pop	{r4, r7, pc}
 800603a:	bf00      	nop
 800603c:	0800c6e0 	.word	0x0800c6e0
 8006040:	40021000 	.word	0x40021000
 8006044:	007a1200 	.word	0x007a1200
 8006048:	003d0900 	.word	0x003d0900
 800604c:	aaaaaaab 	.word	0xaaaaaaab

08006050 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e076      	b.n	8006150 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	2b00      	cmp	r3, #0
 8006068:	d108      	bne.n	800607c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006072:	d009      	beq.n	8006088 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	61da      	str	r2, [r3, #28]
 800607a:	e005      	b.n	8006088 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fc facc 	bl	8002640 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610c:	ea42 0103 	orr.w	r1, r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006114:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	430a      	orrs	r2, r1
 800611e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	0c1a      	lsrs	r2, r3, #16
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f002 0204 	and.w	r2, r2, #4
 800612e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69da      	ldr	r2, [r3, #28]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800613e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_SPI_Transmit+0x22>
 8006176:	2302      	movs	r3, #2
 8006178:	e126      	b.n	80063c8 <HAL_SPI_Transmit+0x270>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006182:	f7fc fcb9 	bl	8002af8 <HAL_GetTick>
 8006186:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006188:	88fb      	ldrh	r3, [r7, #6]
 800618a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	d002      	beq.n	800619e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006198:	2302      	movs	r3, #2
 800619a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800619c:	e10b      	b.n	80063b6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_SPI_Transmit+0x52>
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d102      	bne.n	80061b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061ae:	e102      	b.n	80063b6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2203      	movs	r2, #3
 80061b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	88fa      	ldrh	r2, [r7, #6]
 80061ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f6:	d10f      	bne.n	8006218 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006206:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006216:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006222:	2b40      	cmp	r3, #64	; 0x40
 8006224:	d007      	beq.n	8006236 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006234:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800623e:	d14b      	bne.n	80062d8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <HAL_SPI_Transmit+0xf6>
 8006248:	8afb      	ldrh	r3, [r7, #22]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d13e      	bne.n	80062cc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	881a      	ldrh	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	1c9a      	adds	r2, r3, #2
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006272:	e02b      	b.n	80062cc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b02      	cmp	r3, #2
 8006280:	d112      	bne.n	80062a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	881a      	ldrh	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	1c9a      	adds	r2, r3, #2
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80062a6:	e011      	b.n	80062cc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062a8:	f7fc fc26 	bl	8002af8 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d803      	bhi.n	80062c0 <HAL_SPI_Transmit+0x168>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d102      	bne.n	80062c6 <HAL_SPI_Transmit+0x16e>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062ca:	e074      	b.n	80063b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1ce      	bne.n	8006274 <HAL_SPI_Transmit+0x11c>
 80062d6:	e04c      	b.n	8006372 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <HAL_SPI_Transmit+0x18e>
 80062e0:	8afb      	ldrh	r3, [r7, #22]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d140      	bne.n	8006368 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	330c      	adds	r3, #12
 80062f0:	7812      	ldrb	r2, [r2, #0]
 80062f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800630c:	e02c      	b.n	8006368 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b02      	cmp	r3, #2
 800631a:	d113      	bne.n	8006344 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	330c      	adds	r3, #12
 8006326:	7812      	ldrb	r2, [r2, #0]
 8006328:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	86da      	strh	r2, [r3, #54]	; 0x36
 8006342:	e011      	b.n	8006368 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006344:	f7fc fbd8 	bl	8002af8 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d803      	bhi.n	800635c <HAL_SPI_Transmit+0x204>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635a:	d102      	bne.n	8006362 <HAL_SPI_Transmit+0x20a>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d102      	bne.n	8006368 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006366:	e026      	b.n	80063b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1cd      	bne.n	800630e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	6839      	ldr	r1, [r7, #0]
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 f8b2 	bl	80064e0 <SPI_EndRxTxTransaction>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2220      	movs	r2, #32
 8006386:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10a      	bne.n	80063a6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	77fb      	strb	r3, [r7, #31]
 80063b2:	e000      	b.n	80063b6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80063b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3720      	adds	r7, #32
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063e0:	f7fc fb8a 	bl	8002af8 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	4413      	add	r3, r2
 80063ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063f0:	f7fc fb82 	bl	8002af8 <HAL_GetTick>
 80063f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063f6:	4b39      	ldr	r3, [pc, #228]	; (80064dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	015b      	lsls	r3, r3, #5
 80063fc:	0d1b      	lsrs	r3, r3, #20
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	fb02 f303 	mul.w	r3, r2, r3
 8006404:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006406:	e054      	b.n	80064b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640e:	d050      	beq.n	80064b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006410:	f7fc fb72 	bl	8002af8 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	429a      	cmp	r2, r3
 800641e:	d902      	bls.n	8006426 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d13d      	bne.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006434:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800643e:	d111      	bne.n	8006464 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006448:	d004      	beq.n	8006454 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006452:	d107      	bne.n	8006464 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006462:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800646c:	d10f      	bne.n	800648e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800648c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e017      	b.n	80064d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4013      	ands	r3, r2
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	429a      	cmp	r2, r3
 80064c0:	bf0c      	ite	eq
 80064c2:	2301      	moveq	r3, #1
 80064c4:	2300      	movne	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d19b      	bne.n	8006408 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3720      	adds	r7, #32
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20000024 	.word	0x20000024

080064e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2200      	movs	r2, #0
 80064f4:	2180      	movs	r1, #128	; 0x80
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f7ff ff6a 	bl	80063d0 <SPI_WaitFlagStateUntilTimeout>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d007      	beq.n	8006512 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006506:	f043 0220 	orr.w	r2, r3, #32
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e000      	b.n	8006514 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e041      	b.n	80065b2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7fc f8ba 	bl	80026bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3304      	adds	r3, #4
 8006558:	4619      	mov	r1, r3
 800655a:	4610      	mov	r0, r2
 800655c:	f000 fb38 	bl	8006bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d104      	bne.n	80065d6 <HAL_TIM_IC_Start_IT+0x1a>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	e013      	b.n	80065fe <HAL_TIM_IC_Start_IT+0x42>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d104      	bne.n	80065e6 <HAL_TIM_IC_Start_IT+0x2a>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	e00b      	b.n	80065fe <HAL_TIM_IC_Start_IT+0x42>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d104      	bne.n	80065f6 <HAL_TIM_IC_Start_IT+0x3a>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	e003      	b.n	80065fe <HAL_TIM_IC_Start_IT+0x42>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d104      	bne.n	8006610 <HAL_TIM_IC_Start_IT+0x54>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800660c:	b2db      	uxtb	r3, r3
 800660e:	e013      	b.n	8006638 <HAL_TIM_IC_Start_IT+0x7c>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b04      	cmp	r3, #4
 8006614:	d104      	bne.n	8006620 <HAL_TIM_IC_Start_IT+0x64>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800661c:	b2db      	uxtb	r3, r3
 800661e:	e00b      	b.n	8006638 <HAL_TIM_IC_Start_IT+0x7c>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b08      	cmp	r3, #8
 8006624:	d104      	bne.n	8006630 <HAL_TIM_IC_Start_IT+0x74>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800662c:	b2db      	uxtb	r3, r3
 800662e:	e003      	b.n	8006638 <HAL_TIM_IC_Start_IT+0x7c>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006636:	b2db      	uxtb	r3, r3
 8006638:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800663a:	7bfb      	ldrb	r3, [r7, #15]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d102      	bne.n	8006646 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d001      	beq.n	800664a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e0b3      	b.n	80067b2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d104      	bne.n	800665a <HAL_TIM_IC_Start_IT+0x9e>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006658:	e013      	b.n	8006682 <HAL_TIM_IC_Start_IT+0xc6>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b04      	cmp	r3, #4
 800665e:	d104      	bne.n	800666a <HAL_TIM_IC_Start_IT+0xae>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006668:	e00b      	b.n	8006682 <HAL_TIM_IC_Start_IT+0xc6>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b08      	cmp	r3, #8
 800666e:	d104      	bne.n	800667a <HAL_TIM_IC_Start_IT+0xbe>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006678:	e003      	b.n	8006682 <HAL_TIM_IC_Start_IT+0xc6>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2202      	movs	r2, #2
 800667e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d104      	bne.n	8006692 <HAL_TIM_IC_Start_IT+0xd6>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006690:	e013      	b.n	80066ba <HAL_TIM_IC_Start_IT+0xfe>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b04      	cmp	r3, #4
 8006696:	d104      	bne.n	80066a2 <HAL_TIM_IC_Start_IT+0xe6>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066a0:	e00b      	b.n	80066ba <HAL_TIM_IC_Start_IT+0xfe>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d104      	bne.n	80066b2 <HAL_TIM_IC_Start_IT+0xf6>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b0:	e003      	b.n	80066ba <HAL_TIM_IC_Start_IT+0xfe>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b0c      	cmp	r3, #12
 80066be:	d841      	bhi.n	8006744 <HAL_TIM_IC_Start_IT+0x188>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <HAL_TIM_IC_Start_IT+0x10c>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066fd 	.word	0x080066fd
 80066cc:	08006745 	.word	0x08006745
 80066d0:	08006745 	.word	0x08006745
 80066d4:	08006745 	.word	0x08006745
 80066d8:	0800670f 	.word	0x0800670f
 80066dc:	08006745 	.word	0x08006745
 80066e0:	08006745 	.word	0x08006745
 80066e4:	08006745 	.word	0x08006745
 80066e8:	08006721 	.word	0x08006721
 80066ec:	08006745 	.word	0x08006745
 80066f0:	08006745 	.word	0x08006745
 80066f4:	08006745 	.word	0x08006745
 80066f8:	08006733 	.word	0x08006733
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0202 	orr.w	r2, r2, #2
 800670a:	60da      	str	r2, [r3, #12]
      break;
 800670c:	e01b      	b.n	8006746 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0204 	orr.w	r2, r2, #4
 800671c:	60da      	str	r2, [r3, #12]
      break;
 800671e:	e012      	b.n	8006746 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0208 	orr.w	r2, r2, #8
 800672e:	60da      	str	r2, [r3, #12]
      break;
 8006730:	e009      	b.n	8006746 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0210 	orr.w	r2, r2, #16
 8006740:	60da      	str	r2, [r3, #12]
      break;
 8006742:	e000      	b.n	8006746 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8006744:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2201      	movs	r2, #1
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fbad 	bl	8006eae <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a18      	ldr	r2, [pc, #96]	; (80067bc <HAL_TIM_IC_Start_IT+0x200>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00e      	beq.n	800677c <HAL_TIM_IC_Start_IT+0x1c0>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006766:	d009      	beq.n	800677c <HAL_TIM_IC_Start_IT+0x1c0>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a14      	ldr	r2, [pc, #80]	; (80067c0 <HAL_TIM_IC_Start_IT+0x204>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d004      	beq.n	800677c <HAL_TIM_IC_Start_IT+0x1c0>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a13      	ldr	r2, [pc, #76]	; (80067c4 <HAL_TIM_IC_Start_IT+0x208>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d111      	bne.n	80067a0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b06      	cmp	r3, #6
 800678c:	d010      	beq.n	80067b0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f042 0201 	orr.w	r2, r2, #1
 800679c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800679e:	e007      	b.n	80067b0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0201 	orr.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40012c00 	.word	0x40012c00
 80067c0:	40000400 	.word	0x40000400
 80067c4:	40000800 	.word	0x40000800

080067c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d122      	bne.n	8006824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d11b      	bne.n	8006824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0202 	mvn.w	r2, #2
 80067f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7fa fd76 	bl	80012fc <HAL_TIM_IC_CaptureCallback>
 8006810:	e005      	b.n	800681e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f9c1 	bl	8006b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f9c7 	bl	8006bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f003 0304 	and.w	r3, r3, #4
 800682e:	2b04      	cmp	r3, #4
 8006830:	d122      	bne.n	8006878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b04      	cmp	r3, #4
 800683e:	d11b      	bne.n	8006878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f06f 0204 	mvn.w	r2, #4
 8006848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fa fd4c 	bl	80012fc <HAL_TIM_IC_CaptureCallback>
 8006864:	e005      	b.n	8006872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f997 	bl	8006b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f99d 	bl	8006bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b08      	cmp	r3, #8
 8006884:	d122      	bne.n	80068cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f003 0308 	and.w	r3, r3, #8
 8006890:	2b08      	cmp	r3, #8
 8006892:	d11b      	bne.n	80068cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f06f 0208 	mvn.w	r2, #8
 800689c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2204      	movs	r2, #4
 80068a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fa fd22 	bl	80012fc <HAL_TIM_IC_CaptureCallback>
 80068b8:	e005      	b.n	80068c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f96d 	bl	8006b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f973 	bl	8006bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0310 	and.w	r3, r3, #16
 80068d6:	2b10      	cmp	r3, #16
 80068d8:	d122      	bne.n	8006920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b10      	cmp	r3, #16
 80068e6:	d11b      	bne.n	8006920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f06f 0210 	mvn.w	r2, #16
 80068f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2208      	movs	r2, #8
 80068f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fa fcf8 	bl	80012fc <HAL_TIM_IC_CaptureCallback>
 800690c:	e005      	b.n	800691a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f943 	bl	8006b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f949 	bl	8006bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b01      	cmp	r3, #1
 800692c:	d10e      	bne.n	800694c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b01      	cmp	r3, #1
 800693a:	d107      	bne.n	800694c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f06f 0201 	mvn.w	r2, #1
 8006944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f91e 	bl	8006b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006956:	2b80      	cmp	r3, #128	; 0x80
 8006958:	d10e      	bne.n	8006978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006964:	2b80      	cmp	r3, #128	; 0x80
 8006966:	d107      	bne.n	8006978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fb27 	bl	8006fc6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006982:	2b40      	cmp	r3, #64	; 0x40
 8006984:	d10e      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006990:	2b40      	cmp	r3, #64	; 0x40
 8006992:	d107      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800699c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f90d 	bl	8006bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b20      	cmp	r3, #32
 80069b0:	d10e      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b20      	cmp	r3, #32
 80069be:	d107      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f06f 0220 	mvn.w	r2, #32
 80069c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 faf2 	bl	8006fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d101      	bne.n	80069f2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80069ee:	2302      	movs	r3, #2
 80069f0:	e082      	b.n	8006af8 <HAL_TIM_IC_ConfigChannel+0x120>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d11b      	bne.n	8006a38 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	6819      	ldr	r1, [r3, #0]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f000 f940 	bl	8006c94 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699a      	ldr	r2, [r3, #24]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 020c 	bic.w	r2, r2, #12
 8006a22:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6999      	ldr	r1, [r3, #24]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	619a      	str	r2, [r3, #24]
 8006a36:	e05a      	b.n	8006aee <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d11c      	bne.n	8006a78 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	6819      	ldr	r1, [r3, #0]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f000 f97b 	bl	8006d48 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699a      	ldr	r2, [r3, #24]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a60:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6999      	ldr	r1, [r3, #24]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	021a      	lsls	r2, r3, #8
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	619a      	str	r2, [r3, #24]
 8006a76:	e03a      	b.n	8006aee <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d11b      	bne.n	8006ab6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	6819      	ldr	r1, [r3, #0]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f000 f997 	bl	8006dc0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69da      	ldr	r2, [r3, #28]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 020c 	bic.w	r2, r2, #12
 8006aa0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69d9      	ldr	r1, [r3, #28]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	61da      	str	r2, [r3, #28]
 8006ab4:	e01b      	b.n	8006aee <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	6819      	ldr	r1, [r3, #0]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f000 f9b6 	bl	8006e36 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ad8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69d9      	ldr	r1, [r3, #28]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	021a      	lsls	r2, r3, #8
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b0c      	cmp	r3, #12
 8006b12:	d831      	bhi.n	8006b78 <HAL_TIM_ReadCapturedValue+0x78>
 8006b14:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1a:	bf00      	nop
 8006b1c:	08006b51 	.word	0x08006b51
 8006b20:	08006b79 	.word	0x08006b79
 8006b24:	08006b79 	.word	0x08006b79
 8006b28:	08006b79 	.word	0x08006b79
 8006b2c:	08006b5b 	.word	0x08006b5b
 8006b30:	08006b79 	.word	0x08006b79
 8006b34:	08006b79 	.word	0x08006b79
 8006b38:	08006b79 	.word	0x08006b79
 8006b3c:	08006b65 	.word	0x08006b65
 8006b40:	08006b79 	.word	0x08006b79
 8006b44:	08006b79 	.word	0x08006b79
 8006b48:	08006b79 	.word	0x08006b79
 8006b4c:	08006b6f 	.word	0x08006b6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b56:	60fb      	str	r3, [r7, #12]

      break;
 8006b58:	e00f      	b.n	8006b7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	60fb      	str	r3, [r7, #12]

      break;
 8006b62:	e00a      	b.n	8006b7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6a:	60fb      	str	r3, [r7, #12]

      break;
 8006b6c:	e005      	b.n	8006b7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	60fb      	str	r3, [r7, #12]

      break;
 8006b76:	e000      	b.n	8006b7a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006b78:	bf00      	nop
  }

  return tmpreg;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop

08006b88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr

08006b9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bc80      	pop	{r7}
 8006baa:	4770      	bx	lr

08006bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bc80      	pop	{r7}
 8006bbc:	4770      	bx	lr

08006bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bc6:	bf00      	nop
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bc80      	pop	{r7}
 8006bce:	4770      	bx	lr

08006bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a29      	ldr	r2, [pc, #164]	; (8006c88 <TIM_Base_SetConfig+0xb8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00b      	beq.n	8006c00 <TIM_Base_SetConfig+0x30>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bee:	d007      	beq.n	8006c00 <TIM_Base_SetConfig+0x30>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a26      	ldr	r2, [pc, #152]	; (8006c8c <TIM_Base_SetConfig+0xbc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d003      	beq.n	8006c00 <TIM_Base_SetConfig+0x30>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a25      	ldr	r2, [pc, #148]	; (8006c90 <TIM_Base_SetConfig+0xc0>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d108      	bne.n	8006c12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a1c      	ldr	r2, [pc, #112]	; (8006c88 <TIM_Base_SetConfig+0xb8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00b      	beq.n	8006c32 <TIM_Base_SetConfig+0x62>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c20:	d007      	beq.n	8006c32 <TIM_Base_SetConfig+0x62>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a19      	ldr	r2, [pc, #100]	; (8006c8c <TIM_Base_SetConfig+0xbc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d003      	beq.n	8006c32 <TIM_Base_SetConfig+0x62>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a18      	ldr	r2, [pc, #96]	; (8006c90 <TIM_Base_SetConfig+0xc0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d108      	bne.n	8006c44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a07      	ldr	r2, [pc, #28]	; (8006c88 <TIM_Base_SetConfig+0xb8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d103      	bne.n	8006c78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	615a      	str	r2, [r3, #20]
}
 8006c7e:	bf00      	nop
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr
 8006c88:	40012c00 	.word	0x40012c00
 8006c8c:	40000400 	.word	0x40000400
 8006c90:	40000800 	.word	0x40000800

08006c94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	f023 0201 	bic.w	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4a1f      	ldr	r2, [pc, #124]	; (8006d3c <TIM_TI1_SetConfig+0xa8>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00b      	beq.n	8006cda <TIM_TI1_SetConfig+0x46>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc8:	d007      	beq.n	8006cda <TIM_TI1_SetConfig+0x46>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4a1c      	ldr	r2, [pc, #112]	; (8006d40 <TIM_TI1_SetConfig+0xac>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d003      	beq.n	8006cda <TIM_TI1_SetConfig+0x46>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4a1b      	ldr	r2, [pc, #108]	; (8006d44 <TIM_TI1_SetConfig+0xb0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d101      	bne.n	8006cde <TIM_TI1_SetConfig+0x4a>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e000      	b.n	8006ce0 <TIM_TI1_SetConfig+0x4c>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d008      	beq.n	8006cf6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f023 0303 	bic.w	r3, r3, #3
 8006cea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	e003      	b.n	8006cfe <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f043 0301 	orr.w	r3, r3, #1
 8006cfc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f023 030a 	bic.w	r3, r3, #10
 8006d18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f003 030a 	and.w	r3, r3, #10
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	621a      	str	r2, [r3, #32]
}
 8006d32:	bf00      	nop
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr
 8006d3c:	40012c00 	.word	0x40012c00
 8006d40:	40000400 	.word	0x40000400
 8006d44:	40000800 	.word	0x40000800

08006d48 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	f023 0210 	bic.w	r2, r3, #16
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	031b      	lsls	r3, r3, #12
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d9a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	011b      	lsls	r3, r3, #4
 8006da0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	621a      	str	r2, [r3, #32]
}
 8006db6:	bf00      	nop
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bc80      	pop	{r7}
 8006dbe:	4770      	bx	lr

08006dc0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f023 0303 	bic.w	r3, r3, #3
 8006dec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	021b      	lsls	r3, r3, #8
 8006e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	621a      	str	r2, [r3, #32]
}
 8006e2c:	bf00      	nop
 8006e2e:	371c      	adds	r7, #28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bc80      	pop	{r7}
 8006e34:	4770      	bx	lr

08006e36 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b087      	sub	sp, #28
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	607a      	str	r2, [r7, #4]
 8006e42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	031b      	lsls	r3, r3, #12
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	031b      	lsls	r3, r3, #12
 8006e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	621a      	str	r2, [r3, #32]
}
 8006ea4:	bf00      	nop
 8006ea6:	371c      	adds	r7, #28
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr

08006eae <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b087      	sub	sp, #28
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f003 031f 	and.w	r3, r3, #31
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a1a      	ldr	r2, [r3, #32]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	43db      	mvns	r3, r3
 8006ed0:	401a      	ands	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6a1a      	ldr	r2, [r3, #32]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f003 031f 	and.w	r3, r3, #31
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	621a      	str	r2, [r3, #32]
}
 8006eec:	bf00      	nop
 8006eee:	371c      	adds	r7, #28
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bc80      	pop	{r7}
 8006ef4:	4770      	bx	lr
	...

08006ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d101      	bne.n	8006f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e046      	b.n	8006f9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a16      	ldr	r2, [pc, #88]	; (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00e      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5c:	d009      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a12      	ldr	r2, [pc, #72]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d004      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a10      	ldr	r2, [pc, #64]	; (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d10c      	bne.n	8006f8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr
 8006fa8:	40012c00 	.word	0x40012c00
 8006fac:	40000400 	.word	0x40000400
 8006fb0:	40000800 	.word	0x40000800

08006fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fce:	bf00      	nop
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bc80      	pop	{r7}
 8006fd6:	4770      	bx	lr

08006fd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006fd8:	b084      	sub	sp, #16
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	f107 0014 	add.w	r0, r7, #20
 8006fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bc80      	pop	{r7}
 8006ff4:	b004      	add	sp, #16
 8006ff6:	4770      	bx	lr

08006ff8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007008:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800700c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	b29a      	uxth	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800702c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007030:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007038:	b29a      	uxth	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	b29b      	uxth	r3, r3
 800703e:	43db      	mvns	r3, r3
 8007040:	b29b      	uxth	r3, r3
 8007042:	4013      	ands	r3, r2
 8007044:	b29a      	uxth	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr

08007058 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	bc80      	pop	{r7}
 800706e:	4770      	bx	lr

08007070 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007070:	b084      	sub	sp, #16
 8007072:	b480      	push	{r7}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	f107 0014 	add.w	r0, r7, #20
 800707e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bc80      	pop	{r7}
 80070ac:	b004      	add	sp, #16
 80070ae:	4770      	bx	lr

080070b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b09b      	sub	sp, #108	; 0x6c
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80070d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	78db      	ldrb	r3, [r3, #3]
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d81f      	bhi.n	8007122 <USB_ActivateEndpoint+0x72>
 80070e2:	a201      	add	r2, pc, #4	; (adr r2, 80070e8 <USB_ActivateEndpoint+0x38>)
 80070e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e8:	080070f9 	.word	0x080070f9
 80070ec:	08007115 	.word	0x08007115
 80070f0:	0800712b 	.word	0x0800712b
 80070f4:	08007107 	.word	0x08007107
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80070f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80070fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007100:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007104:	e012      	b.n	800712c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007106:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800710a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800710e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007112:	e00b      	b.n	800712c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007114:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007118:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800711c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007120:	e004      	b.n	800712c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007128:	e000      	b.n	800712c <USB_ActivateEndpoint+0x7c>
      break;
 800712a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	441a      	add	r2, r3
 8007136:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800713a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800713e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714a:	b29b      	uxth	r3, r3
 800714c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007164:	b29a      	uxth	r2, r3
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	b29b      	uxth	r3, r3
 800716c:	4313      	orrs	r3, r2
 800716e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	441a      	add	r2, r3
 800717c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800718c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007190:	b29b      	uxth	r3, r3
 8007192:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	7b1b      	ldrb	r3, [r3, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f040 8149 	bne.w	8007430 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 8084 	beq.w	80072b0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	461a      	mov	r2, r3
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	4413      	add	r3, r2
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	011a      	lsls	r2, r3, #4
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	88db      	ldrh	r3, [r3, #6]
 80071d0:	085b      	lsrs	r3, r3, #1
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	81fb      	strh	r3, [r7, #14]
 80071ea:	89fb      	ldrh	r3, [r7, #14]
 80071ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01b      	beq.n	800722c <USB_ActivateEndpoint+0x17c>
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720a:	81bb      	strh	r3, [r7, #12]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	441a      	add	r2, r3
 8007216:	89bb      	ldrh	r3, [r7, #12]
 8007218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800721c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007224:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007228:	b29b      	uxth	r3, r3
 800722a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	78db      	ldrb	r3, [r3, #3]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d020      	beq.n	8007276 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	b29b      	uxth	r3, r3
 8007242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800724a:	813b      	strh	r3, [r7, #8]
 800724c:	893b      	ldrh	r3, [r7, #8]
 800724e:	f083 0320 	eor.w	r3, r3, #32
 8007252:	813b      	strh	r3, [r7, #8]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	441a      	add	r2, r3
 800725e:	893b      	ldrh	r3, [r7, #8]
 8007260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800726c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007270:	b29b      	uxth	r3, r3
 8007272:	8013      	strh	r3, [r2, #0]
 8007274:	e27f      	b.n	8007776 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	b29b      	uxth	r3, r3
 8007284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800728c:	817b      	strh	r3, [r7, #10]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	441a      	add	r2, r3
 8007298:	897b      	ldrh	r3, [r7, #10]
 800729a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800729e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	8013      	strh	r3, [r2, #0]
 80072ae:	e262      	b.n	8007776 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	461a      	mov	r2, r3
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	4413      	add	r3, r2
 80072c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	011a      	lsls	r2, r3, #4
 80072ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80072d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	88db      	ldrh	r3, [r3, #6]
 80072d8:	085b      	lsrs	r3, r3, #1
 80072da:	b29b      	uxth	r3, r3
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	627b      	str	r3, [r7, #36]	; 0x24
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	461a      	mov	r2, r3
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	4413      	add	r3, r2
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	011a      	lsls	r2, r3, #4
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	4413      	add	r3, r2
 8007302:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007306:	623b      	str	r3, [r7, #32]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d112      	bne.n	8007336 <USB_ActivateEndpoint+0x286>
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	b29b      	uxth	r3, r3
 8007316:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800731a:	b29a      	uxth	r2, r3
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	801a      	strh	r2, [r3, #0]
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	b29b      	uxth	r3, r3
 8007326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800732a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800732e:	b29a      	uxth	r2, r3
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	801a      	strh	r2, [r3, #0]
 8007334:	e02f      	b.n	8007396 <USB_ActivateEndpoint+0x2e6>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2b3e      	cmp	r3, #62	; 0x3e
 800733c:	d813      	bhi.n	8007366 <USB_ActivateEndpoint+0x2b6>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	085b      	lsrs	r3, r3, #1
 8007344:	663b      	str	r3, [r7, #96]	; 0x60
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <USB_ActivateEndpoint+0x2a8>
 8007352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007354:	3301      	adds	r3, #1
 8007356:	663b      	str	r3, [r7, #96]	; 0x60
 8007358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800735a:	b29b      	uxth	r3, r3
 800735c:	029b      	lsls	r3, r3, #10
 800735e:	b29a      	uxth	r2, r3
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	801a      	strh	r2, [r3, #0]
 8007364:	e017      	b.n	8007396 <USB_ActivateEndpoint+0x2e6>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	095b      	lsrs	r3, r3, #5
 800736c:	663b      	str	r3, [r7, #96]	; 0x60
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f003 031f 	and.w	r3, r3, #31
 8007376:	2b00      	cmp	r3, #0
 8007378:	d102      	bne.n	8007380 <USB_ActivateEndpoint+0x2d0>
 800737a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800737c:	3b01      	subs	r3, #1
 800737e:	663b      	str	r3, [r7, #96]	; 0x60
 8007380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007382:	b29b      	uxth	r3, r3
 8007384:	029b      	lsls	r3, r3, #10
 8007386:	b29b      	uxth	r3, r3
 8007388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800738c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007390:	b29a      	uxth	r2, r3
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	83fb      	strh	r3, [r7, #30]
 80073a4:	8bfb      	ldrh	r3, [r7, #30]
 80073a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d01b      	beq.n	80073e6 <USB_ActivateEndpoint+0x336>
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c4:	83bb      	strh	r3, [r7, #28]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	441a      	add	r2, r3
 80073d0:	8bbb      	ldrh	r3, [r7, #28]
 80073d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fc:	837b      	strh	r3, [r7, #26]
 80073fe:	8b7b      	ldrh	r3, [r7, #26]
 8007400:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007404:	837b      	strh	r3, [r7, #26]
 8007406:	8b7b      	ldrh	r3, [r7, #26]
 8007408:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800740c:	837b      	strh	r3, [r7, #26]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	441a      	add	r2, r3
 8007418:	8b7b      	ldrh	r3, [r7, #26]
 800741a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742a:	b29b      	uxth	r3, r3
 800742c:	8013      	strh	r3, [r2, #0]
 800742e:	e1a2      	b.n	8007776 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	b29b      	uxth	r3, r3
 800743e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007446:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	441a      	add	r2, r3
 8007454:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800745c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007460:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007468:	b29b      	uxth	r3, r3
 800746a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007476:	b29b      	uxth	r3, r3
 8007478:	461a      	mov	r2, r3
 800747a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800747c:	4413      	add	r3, r2
 800747e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	011a      	lsls	r2, r3, #4
 8007486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007488:	4413      	add	r3, r2
 800748a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800748e:	657b      	str	r3, [r7, #84]	; 0x54
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	891b      	ldrh	r3, [r3, #8]
 8007494:	085b      	lsrs	r3, r3, #1
 8007496:	b29b      	uxth	r3, r3
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800749e:	801a      	strh	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	653b      	str	r3, [r7, #80]	; 0x50
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	461a      	mov	r2, r3
 80074ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074b0:	4413      	add	r3, r2
 80074b2:	653b      	str	r3, [r7, #80]	; 0x50
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	011a      	lsls	r2, r3, #4
 80074ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80074c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	895b      	ldrh	r3, [r3, #10]
 80074c8:	085b      	lsrs	r3, r3, #1
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	785b      	ldrb	r3, [r3, #1]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f040 8091 	bne.w	8007600 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80074ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80074ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d01b      	beq.n	800752e <USB_ActivateEndpoint+0x47e>
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	b29b      	uxth	r3, r3
 8007504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	441a      	add	r2, r3
 8007518:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800751a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800751e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800752a:	b29b      	uxth	r3, r3
 800752c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	873b      	strh	r3, [r7, #56]	; 0x38
 800753c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800753e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	d01b      	beq.n	800757e <USB_ActivateEndpoint+0x4ce>
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	441a      	add	r2, r3
 8007568:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800756a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800756e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007576:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800757a:	b29b      	uxth	r3, r3
 800757c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007594:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007596:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007598:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800759c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800759e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80075a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	441a      	add	r2, r3
 80075b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80075b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075dc:	867b      	strh	r3, [r7, #50]	; 0x32
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	441a      	add	r2, r3
 80075e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80075ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	8013      	strh	r3, [r2, #0]
 80075fe:	e0ba      	b.n	8007776 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007610:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d01d      	beq.n	8007658 <USB_ActivateEndpoint+0x5a8>
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800762e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007632:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	441a      	add	r2, r3
 8007640:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800764c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007654:	b29b      	uxth	r3, r3
 8007656:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007668:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800766c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01d      	beq.n	80076b0 <USB_ActivateEndpoint+0x600>
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	b29b      	uxth	r3, r3
 8007682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	441a      	add	r2, r3
 8007698:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800769c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	78db      	ldrb	r3, [r3, #3]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d024      	beq.n	8007702 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80076d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80076d6:	f083 0320 	eor.w	r3, r3, #32
 80076da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	441a      	add	r2, r3
 80076e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80076ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	8013      	strh	r3, [r2, #0]
 8007700:	e01d      	b.n	800773e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	b29b      	uxth	r3, r3
 8007710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007718:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	441a      	add	r2, r3
 8007726:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800772a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800772e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800773a:	b29b      	uxth	r3, r3
 800773c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007754:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	441a      	add	r2, r3
 8007760:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800776a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800776e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007772:	b29b      	uxth	r3, r3
 8007774:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007776:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800777a:	4618      	mov	r0, r3
 800777c:	376c      	adds	r7, #108	; 0x6c
 800777e:	46bd      	mov	sp, r7
 8007780:	bc80      	pop	{r7}
 8007782:	4770      	bx	lr

08007784 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007784:	b480      	push	{r7}
 8007786:	b08d      	sub	sp, #52	; 0x34
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	7b1b      	ldrb	r3, [r3, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	f040 808e 	bne.w	80078b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	785b      	ldrb	r3, [r3, #1]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d044      	beq.n	800782a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	81bb      	strh	r3, [r7, #12]
 80077ae:	89bb      	ldrh	r3, [r7, #12]
 80077b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d01b      	beq.n	80077f0 <USB_DeactivateEndpoint+0x6c>
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ce:	817b      	strh	r3, [r7, #10]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	441a      	add	r2, r3
 80077da:	897b      	ldrh	r3, [r7, #10]
 80077dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007806:	813b      	strh	r3, [r7, #8]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	441a      	add	r2, r3
 8007812:	893b      	ldrh	r3, [r7, #8]
 8007814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800781c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007824:	b29b      	uxth	r3, r3
 8007826:	8013      	strh	r3, [r2, #0]
 8007828:	e192      	b.n	8007b50 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	827b      	strh	r3, [r7, #18]
 8007838:	8a7b      	ldrh	r3, [r7, #18]
 800783a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d01b      	beq.n	800787a <USB_DeactivateEndpoint+0xf6>
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4413      	add	r3, r2
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	b29b      	uxth	r3, r3
 8007850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007858:	823b      	strh	r3, [r7, #16]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	441a      	add	r2, r3
 8007864:	8a3b      	ldrh	r3, [r7, #16]
 8007866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800786a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800786e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007876:	b29b      	uxth	r3, r3
 8007878:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	b29b      	uxth	r3, r3
 8007888:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800788c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007890:	81fb      	strh	r3, [r7, #14]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	441a      	add	r2, r3
 800789c:	89fb      	ldrh	r3, [r7, #14]
 800789e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	8013      	strh	r3, [r2, #0]
 80078b2:	e14d      	b.n	8007b50 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f040 80a5 	bne.w	8007a08 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	843b      	strh	r3, [r7, #32]
 80078cc:	8c3b      	ldrh	r3, [r7, #32]
 80078ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d01b      	beq.n	800790e <USB_DeactivateEndpoint+0x18a>
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ec:	83fb      	strh	r3, [r7, #30]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	441a      	add	r2, r3
 80078f8:	8bfb      	ldrh	r3, [r7, #30]
 80078fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790a:	b29b      	uxth	r3, r3
 800790c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	83bb      	strh	r3, [r7, #28]
 800791c:	8bbb      	ldrh	r3, [r7, #28]
 800791e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007922:	2b00      	cmp	r3, #0
 8007924:	d01b      	beq.n	800795e <USB_DeactivateEndpoint+0x1da>
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	b29b      	uxth	r3, r3
 8007934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800793c:	837b      	strh	r3, [r7, #26]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	441a      	add	r2, r3
 8007948:	8b7b      	ldrh	r3, [r7, #26]
 800794a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800794e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007956:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800795a:	b29b      	uxth	r3, r3
 800795c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	b29b      	uxth	r3, r3
 800796c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007974:	833b      	strh	r3, [r7, #24]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	441a      	add	r2, r3
 8007980:	8b3b      	ldrh	r3, [r7, #24]
 8007982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800798a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800798e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007992:	b29b      	uxth	r3, r3
 8007994:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ac:	82fb      	strh	r3, [r7, #22]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	441a      	add	r2, r3
 80079b8:	8afb      	ldrh	r3, [r7, #22]
 80079ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079e4:	82bb      	strh	r3, [r7, #20]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	441a      	add	r2, r3
 80079f0:	8abb      	ldrh	r3, [r7, #20]
 80079f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	8013      	strh	r3, [r2, #0]
 8007a06:	e0a3      	b.n	8007b50 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007a16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d01b      	beq.n	8007a58 <USB_DeactivateEndpoint+0x2d4>
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a36:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	441a      	add	r2, r3
 8007a42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007a66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01b      	beq.n	8007aa8 <USB_DeactivateEndpoint+0x324>
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a86:	853b      	strh	r3, [r7, #40]	; 0x28
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	441a      	add	r2, r3
 8007a92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007abe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	441a      	add	r2, r3
 8007aca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007af6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	441a      	add	r2, r3
 8007b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	441a      	add	r2, r3
 8007b3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3734      	adds	r7, #52	; 0x34
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bc80      	pop	{r7}
 8007b5a:	4770      	bx	lr

08007b5c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b0c4      	sub	sp, #272	; 0x110
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	1d3b      	adds	r3, r7, #4
 8007b64:	6018      	str	r0, [r3, #0]
 8007b66:	463b      	mov	r3, r7
 8007b68:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b6a:	463b      	mov	r3, r7
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	785b      	ldrb	r3, [r3, #1]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	f040 8557 	bne.w	8008624 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007b76:	463b      	mov	r3, r7
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	699a      	ldr	r2, [r3, #24]
 8007b7c:	463b      	mov	r3, r7
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d905      	bls.n	8007b92 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007b86:	463b      	mov	r3, r7
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007b90:	e004      	b.n	8007b9c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007b92:	463b      	mov	r3, r7
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007b9c:	463b      	mov	r3, r7
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	7b1b      	ldrb	r3, [r3, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d12c      	bne.n	8007c00 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6959      	ldr	r1, [r3, #20]
 8007bac:	463b      	mov	r3, r7
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	88da      	ldrh	r2, [r3, #6]
 8007bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	1d38      	adds	r0, r7, #4
 8007bba:	6800      	ldr	r0, [r0, #0]
 8007bbc:	f001 fa2c 	bl	8009018 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007bc0:	1d3b      	adds	r3, r7, #4
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	1d3b      	adds	r3, r7, #4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	463b      	mov	r3, r7
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	011a      	lsls	r2, r3, #4
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	4413      	add	r3, r2
 8007be4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007be8:	f107 0310 	add.w	r3, r7, #16
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	f107 0310 	add.w	r3, r7, #16
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	801a      	strh	r2, [r3, #0]
 8007bfc:	f000 bcdd 	b.w	80085ba <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007c00:	463b      	mov	r3, r7
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	78db      	ldrb	r3, [r3, #3]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	f040 8347 	bne.w	800829a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007c0c:	463b      	mov	r3, r7
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6a1a      	ldr	r2, [r3, #32]
 8007c12:	463b      	mov	r3, r7
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	f240 82eb 	bls.w	80081f4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007c1e:	1d3b      	adds	r3, r7, #4
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	463b      	mov	r3, r7
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c38:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8007c3c:	1d3b      	adds	r3, r7, #4
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	463b      	mov	r3, r7
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	441a      	add	r2, r3
 8007c4a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c56:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007c62:	463b      	mov	r3, r7
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6a1a      	ldr	r2, [r3, #32]
 8007c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c6c:	1ad2      	subs	r2, r2, r3
 8007c6e:	463b      	mov	r3, r7
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c74:	1d3b      	adds	r3, r7, #4
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	463b      	mov	r3, r7
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8159 	beq.w	8007f42 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c90:	1d3b      	adds	r3, r7, #4
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	637b      	str	r3, [r7, #52]	; 0x34
 8007c96:	463b      	mov	r3, r7
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	785b      	ldrb	r3, [r3, #1]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d164      	bne.n	8007d6a <USB_EPStartXfer+0x20e>
 8007ca0:	1d3b      	adds	r3, r7, #4
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ca6:	1d3b      	adds	r3, r7, #4
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb4:	4413      	add	r3, r2
 8007cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cb8:	463b      	mov	r3, r7
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	011a      	lsls	r2, r3, #4
 8007cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d112      	bne.n	8007cf8 <USB_EPStartXfer+0x19c>
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	801a      	strh	r2, [r3, #0]
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	801a      	strh	r2, [r3, #0]
 8007cf6:	e054      	b.n	8007da2 <USB_EPStartXfer+0x246>
 8007cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cfc:	2b3e      	cmp	r3, #62	; 0x3e
 8007cfe:	d817      	bhi.n	8007d30 <USB_EPStartXfer+0x1d4>
 8007d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d04:	085b      	lsrs	r3, r3, #1
 8007d06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d004      	beq.n	8007d20 <USB_EPStartXfer+0x1c4>
 8007d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	029b      	lsls	r3, r3, #10
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	801a      	strh	r2, [r3, #0]
 8007d2e:	e038      	b.n	8007da2 <USB_EPStartXfer+0x246>
 8007d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d34:	095b      	lsrs	r3, r3, #5
 8007d36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d3e:	f003 031f 	and.w	r3, r3, #31
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d104      	bne.n	8007d50 <USB_EPStartXfer+0x1f4>
 8007d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	029b      	lsls	r3, r3, #10
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	801a      	strh	r2, [r3, #0]
 8007d68:	e01b      	b.n	8007da2 <USB_EPStartXfer+0x246>
 8007d6a:	463b      	mov	r3, r7
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d116      	bne.n	8007da2 <USB_EPStartXfer+0x246>
 8007d74:	1d3b      	adds	r3, r7, #4
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d82:	4413      	add	r3, r2
 8007d84:	637b      	str	r3, [r7, #52]	; 0x34
 8007d86:	463b      	mov	r3, r7
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	011a      	lsls	r2, r3, #4
 8007d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d90:	4413      	add	r3, r2
 8007d92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d96:	633b      	str	r3, [r7, #48]	; 0x30
 8007d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007da2:	463b      	mov	r3, r7
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	895b      	ldrh	r3, [r3, #10]
 8007da8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dac:	463b      	mov	r3, r7
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6959      	ldr	r1, [r3, #20]
 8007db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007dbc:	1d38      	adds	r0, r7, #4
 8007dbe:	6800      	ldr	r0, [r0, #0]
 8007dc0:	f001 f92a 	bl	8009018 <USB_WritePMA>
            ep->xfer_buff += len;
 8007dc4:	463b      	mov	r3, r7
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	695a      	ldr	r2, [r3, #20]
 8007dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dce:	441a      	add	r2, r3
 8007dd0:	463b      	mov	r3, r7
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007dd6:	463b      	mov	r3, r7
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6a1a      	ldr	r2, [r3, #32]
 8007ddc:	463b      	mov	r3, r7
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d909      	bls.n	8007dfa <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8007de6:	463b      	mov	r3, r7
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6a1a      	ldr	r2, [r3, #32]
 8007dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007df0:	1ad2      	subs	r2, r2, r3
 8007df2:	463b      	mov	r3, r7
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	621a      	str	r2, [r3, #32]
 8007df8:	e008      	b.n	8007e0c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007e04:	463b      	mov	r3, r7
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e0c:	463b      	mov	r3, r7
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	785b      	ldrb	r3, [r3, #1]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d164      	bne.n	8007ee0 <USB_EPStartXfer+0x384>
 8007e16:	1d3b      	adds	r3, r7, #4
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	61fb      	str	r3, [r7, #28]
 8007e1c:	1d3b      	adds	r3, r7, #4
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	461a      	mov	r2, r3
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	61fb      	str	r3, [r7, #28]
 8007e2e:	463b      	mov	r3, r7
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	011a      	lsls	r2, r3, #4
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e3e:	61bb      	str	r3, [r7, #24]
 8007e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d112      	bne.n	8007e6e <USB_EPStartXfer+0x312>
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	801a      	strh	r2, [r3, #0]
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	801a      	strh	r2, [r3, #0]
 8007e6c:	e057      	b.n	8007f1e <USB_EPStartXfer+0x3c2>
 8007e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e72:	2b3e      	cmp	r3, #62	; 0x3e
 8007e74:	d817      	bhi.n	8007ea6 <USB_EPStartXfer+0x34a>
 8007e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e7a:	085b      	lsrs	r3, r3, #1
 8007e7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d004      	beq.n	8007e96 <USB_EPStartXfer+0x33a>
 8007e8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e90:	3301      	adds	r3, #1
 8007e92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	029b      	lsls	r3, r3, #10
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	801a      	strh	r2, [r3, #0]
 8007ea4:	e03b      	b.n	8007f1e <USB_EPStartXfer+0x3c2>
 8007ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eaa:	095b      	lsrs	r3, r3, #5
 8007eac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eb4:	f003 031f 	and.w	r3, r3, #31
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <USB_EPStartXfer+0x36a>
 8007ebc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ec6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	029b      	lsls	r3, r3, #10
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	801a      	strh	r2, [r3, #0]
 8007ede:	e01e      	b.n	8007f1e <USB_EPStartXfer+0x3c2>
 8007ee0:	463b      	mov	r3, r7
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	785b      	ldrb	r3, [r3, #1]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d119      	bne.n	8007f1e <USB_EPStartXfer+0x3c2>
 8007eea:	1d3b      	adds	r3, r7, #4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef0:	1d3b      	adds	r3, r7, #4
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	461a      	mov	r2, r3
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	4413      	add	r3, r2
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
 8007f02:	463b      	mov	r3, r7
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	011a      	lsls	r2, r3, #4
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f12:	623b      	str	r3, [r7, #32]
 8007f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f1e:	463b      	mov	r3, r7
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	891b      	ldrh	r3, [r3, #8]
 8007f24:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f28:	463b      	mov	r3, r7
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6959      	ldr	r1, [r3, #20]
 8007f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007f38:	1d38      	adds	r0, r7, #4
 8007f3a:	6800      	ldr	r0, [r0, #0]
 8007f3c:	f001 f86c 	bl	8009018 <USB_WritePMA>
 8007f40:	e33b      	b.n	80085ba <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f42:	463b      	mov	r3, r7
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	785b      	ldrb	r3, [r3, #1]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d164      	bne.n	8008016 <USB_EPStartXfer+0x4ba>
 8007f4c:	1d3b      	adds	r3, r7, #4
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f52:	1d3b      	adds	r3, r7, #4
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f60:	4413      	add	r3, r2
 8007f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f64:	463b      	mov	r3, r7
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	011a      	lsls	r2, r3, #4
 8007f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f6e:	4413      	add	r3, r2
 8007f70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f74:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d112      	bne.n	8007fa4 <USB_EPStartXfer+0x448>
 8007f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f8c:	801a      	strh	r2, [r3, #0]
 8007f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fa0:	801a      	strh	r2, [r3, #0]
 8007fa2:	e057      	b.n	8008054 <USB_EPStartXfer+0x4f8>
 8007fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fa8:	2b3e      	cmp	r3, #62	; 0x3e
 8007faa:	d817      	bhi.n	8007fdc <USB_EPStartXfer+0x480>
 8007fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fb0:	085b      	lsrs	r3, r3, #1
 8007fb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <USB_EPStartXfer+0x470>
 8007fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	029b      	lsls	r3, r3, #10
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fd8:	801a      	strh	r2, [r3, #0]
 8007fda:	e03b      	b.n	8008054 <USB_EPStartXfer+0x4f8>
 8007fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fe0:	095b      	lsrs	r3, r3, #5
 8007fe2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fea:	f003 031f 	and.w	r3, r3, #31
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d104      	bne.n	8007ffc <USB_EPStartXfer+0x4a0>
 8007ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008000:	b29b      	uxth	r3, r3
 8008002:	029b      	lsls	r3, r3, #10
 8008004:	b29b      	uxth	r3, r3
 8008006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800800a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800800e:	b29a      	uxth	r2, r3
 8008010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008012:	801a      	strh	r2, [r3, #0]
 8008014:	e01e      	b.n	8008054 <USB_EPStartXfer+0x4f8>
 8008016:	463b      	mov	r3, r7
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	785b      	ldrb	r3, [r3, #1]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d119      	bne.n	8008054 <USB_EPStartXfer+0x4f8>
 8008020:	1d3b      	adds	r3, r7, #4
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	657b      	str	r3, [r7, #84]	; 0x54
 8008026:	1d3b      	adds	r3, r7, #4
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800802e:	b29b      	uxth	r3, r3
 8008030:	461a      	mov	r2, r3
 8008032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008034:	4413      	add	r3, r2
 8008036:	657b      	str	r3, [r7, #84]	; 0x54
 8008038:	463b      	mov	r3, r7
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	011a      	lsls	r2, r3, #4
 8008040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008042:	4413      	add	r3, r2
 8008044:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008048:	653b      	str	r3, [r7, #80]	; 0x50
 800804a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800804e:	b29a      	uxth	r2, r3
 8008050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008052:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008054:	463b      	mov	r3, r7
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	891b      	ldrh	r3, [r3, #8]
 800805a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800805e:	463b      	mov	r3, r7
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6959      	ldr	r1, [r3, #20]
 8008064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008068:	b29b      	uxth	r3, r3
 800806a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800806e:	1d38      	adds	r0, r7, #4
 8008070:	6800      	ldr	r0, [r0, #0]
 8008072:	f000 ffd1 	bl	8009018 <USB_WritePMA>
            ep->xfer_buff += len;
 8008076:	463b      	mov	r3, r7
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	695a      	ldr	r2, [r3, #20]
 800807c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008080:	441a      	add	r2, r3
 8008082:	463b      	mov	r3, r7
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008088:	463b      	mov	r3, r7
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6a1a      	ldr	r2, [r3, #32]
 800808e:	463b      	mov	r3, r7
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	429a      	cmp	r2, r3
 8008096:	d909      	bls.n	80080ac <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8008098:	463b      	mov	r3, r7
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6a1a      	ldr	r2, [r3, #32]
 800809e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080a2:	1ad2      	subs	r2, r2, r3
 80080a4:	463b      	mov	r3, r7
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	621a      	str	r2, [r3, #32]
 80080aa:	e008      	b.n	80080be <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80080ac:	463b      	mov	r3, r7
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80080b6:	463b      	mov	r3, r7
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2200      	movs	r2, #0
 80080bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080be:	1d3b      	adds	r3, r7, #4
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	647b      	str	r3, [r7, #68]	; 0x44
 80080c4:	463b      	mov	r3, r7
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	785b      	ldrb	r3, [r3, #1]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d164      	bne.n	8008198 <USB_EPStartXfer+0x63c>
 80080ce:	1d3b      	adds	r3, r7, #4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d4:	1d3b      	adds	r3, r7, #4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080dc:	b29b      	uxth	r3, r3
 80080de:	461a      	mov	r2, r3
 80080e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e2:	4413      	add	r3, r2
 80080e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080e6:	463b      	mov	r3, r7
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	011a      	lsls	r2, r3, #4
 80080ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f0:	4413      	add	r3, r2
 80080f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80080f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d112      	bne.n	8008126 <USB_EPStartXfer+0x5ca>
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	b29b      	uxth	r3, r3
 8008106:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800810a:	b29a      	uxth	r2, r3
 800810c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810e:	801a      	strh	r2, [r3, #0]
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800811a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800811e:	b29a      	uxth	r2, r3
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	801a      	strh	r2, [r3, #0]
 8008124:	e054      	b.n	80081d0 <USB_EPStartXfer+0x674>
 8008126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800812a:	2b3e      	cmp	r3, #62	; 0x3e
 800812c:	d817      	bhi.n	800815e <USB_EPStartXfer+0x602>
 800812e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008132:	085b      	lsrs	r3, r3, #1
 8008134:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d004      	beq.n	800814e <USB_EPStartXfer+0x5f2>
 8008144:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008148:	3301      	adds	r3, #1
 800814a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800814e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008152:	b29b      	uxth	r3, r3
 8008154:	029b      	lsls	r3, r3, #10
 8008156:	b29a      	uxth	r2, r3
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	801a      	strh	r2, [r3, #0]
 800815c:	e038      	b.n	80081d0 <USB_EPStartXfer+0x674>
 800815e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008162:	095b      	lsrs	r3, r3, #5
 8008164:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800816c:	f003 031f 	and.w	r3, r3, #31
 8008170:	2b00      	cmp	r3, #0
 8008172:	d104      	bne.n	800817e <USB_EPStartXfer+0x622>
 8008174:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008178:	3b01      	subs	r3, #1
 800817a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800817e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008182:	b29b      	uxth	r3, r3
 8008184:	029b      	lsls	r3, r3, #10
 8008186:	b29b      	uxth	r3, r3
 8008188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800818c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008190:	b29a      	uxth	r2, r3
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	801a      	strh	r2, [r3, #0]
 8008196:	e01b      	b.n	80081d0 <USB_EPStartXfer+0x674>
 8008198:	463b      	mov	r3, r7
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	785b      	ldrb	r3, [r3, #1]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d116      	bne.n	80081d0 <USB_EPStartXfer+0x674>
 80081a2:	1d3b      	adds	r3, r7, #4
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081b0:	4413      	add	r3, r2
 80081b2:	647b      	str	r3, [r7, #68]	; 0x44
 80081b4:	463b      	mov	r3, r7
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	011a      	lsls	r2, r3, #4
 80081bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081be:	4413      	add	r3, r2
 80081c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081c4:	643b      	str	r3, [r7, #64]	; 0x40
 80081c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80081d0:	463b      	mov	r3, r7
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	895b      	ldrh	r3, [r3, #10]
 80081d6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081da:	463b      	mov	r3, r7
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6959      	ldr	r1, [r3, #20]
 80081e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80081ea:	1d38      	adds	r0, r7, #4
 80081ec:	6800      	ldr	r0, [r0, #0]
 80081ee:	f000 ff13 	bl	8009018 <USB_WritePMA>
 80081f2:	e1e2      	b.n	80085ba <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80081f4:	463b      	mov	r3, r7
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80081fe:	1d3b      	adds	r3, r7, #4
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	463b      	mov	r3, r7
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008218:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800821c:	1d3b      	adds	r3, r7, #4
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	463b      	mov	r3, r7
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	441a      	add	r2, r3
 800822a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800822e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800823a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800823e:	b29b      	uxth	r3, r3
 8008240:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008242:	1d3b      	adds	r3, r7, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	663b      	str	r3, [r7, #96]	; 0x60
 8008248:	1d3b      	adds	r3, r7, #4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008250:	b29b      	uxth	r3, r3
 8008252:	461a      	mov	r2, r3
 8008254:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008256:	4413      	add	r3, r2
 8008258:	663b      	str	r3, [r7, #96]	; 0x60
 800825a:	463b      	mov	r3, r7
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	011a      	lsls	r2, r3, #4
 8008262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008264:	4413      	add	r3, r2
 8008266:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800826a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800826c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008270:	b29a      	uxth	r2, r3
 8008272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008274:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008276:	463b      	mov	r3, r7
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	891b      	ldrh	r3, [r3, #8]
 800827c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008280:	463b      	mov	r3, r7
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6959      	ldr	r1, [r3, #20]
 8008286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800828a:	b29b      	uxth	r3, r3
 800828c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008290:	1d38      	adds	r0, r7, #4
 8008292:	6800      	ldr	r0, [r0, #0]
 8008294:	f000 fec0 	bl	8009018 <USB_WritePMA>
 8008298:	e18f      	b.n	80085ba <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800829a:	1d3b      	adds	r3, r7, #4
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	463b      	mov	r3, r7
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 808f 	beq.w	80083d4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80082b6:	1d3b      	adds	r3, r7, #4
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80082bc:	463b      	mov	r3, r7
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	785b      	ldrb	r3, [r3, #1]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d164      	bne.n	8008390 <USB_EPStartXfer+0x834>
 80082c6:	1d3b      	adds	r3, r7, #4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	673b      	str	r3, [r7, #112]	; 0x70
 80082cc:	1d3b      	adds	r3, r7, #4
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	461a      	mov	r2, r3
 80082d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082da:	4413      	add	r3, r2
 80082dc:	673b      	str	r3, [r7, #112]	; 0x70
 80082de:	463b      	mov	r3, r7
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	011a      	lsls	r2, r3, #4
 80082e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082e8:	4413      	add	r3, r2
 80082ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d112      	bne.n	800831e <USB_EPStartXfer+0x7c2>
 80082f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008302:	b29a      	uxth	r2, r3
 8008304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008306:	801a      	strh	r2, [r3, #0]
 8008308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	b29b      	uxth	r3, r3
 800830e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008316:	b29a      	uxth	r2, r3
 8008318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800831a:	801a      	strh	r2, [r3, #0]
 800831c:	e054      	b.n	80083c8 <USB_EPStartXfer+0x86c>
 800831e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008322:	2b3e      	cmp	r3, #62	; 0x3e
 8008324:	d817      	bhi.n	8008356 <USB_EPStartXfer+0x7fa>
 8008326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800832a:	085b      	lsrs	r3, r3, #1
 800832c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b00      	cmp	r3, #0
 800833a:	d004      	beq.n	8008346 <USB_EPStartXfer+0x7ea>
 800833c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008340:	3301      	adds	r3, #1
 8008342:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834a:	b29b      	uxth	r3, r3
 800834c:	029b      	lsls	r3, r3, #10
 800834e:	b29a      	uxth	r2, r3
 8008350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008352:	801a      	strh	r2, [r3, #0]
 8008354:	e038      	b.n	80083c8 <USB_EPStartXfer+0x86c>
 8008356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800835a:	095b      	lsrs	r3, r3, #5
 800835c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008364:	f003 031f 	and.w	r3, r3, #31
 8008368:	2b00      	cmp	r3, #0
 800836a:	d104      	bne.n	8008376 <USB_EPStartXfer+0x81a>
 800836c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008370:	3b01      	subs	r3, #1
 8008372:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800837a:	b29b      	uxth	r3, r3
 800837c:	029b      	lsls	r3, r3, #10
 800837e:	b29b      	uxth	r3, r3
 8008380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008388:	b29a      	uxth	r2, r3
 800838a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838c:	801a      	strh	r2, [r3, #0]
 800838e:	e01b      	b.n	80083c8 <USB_EPStartXfer+0x86c>
 8008390:	463b      	mov	r3, r7
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	785b      	ldrb	r3, [r3, #1]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d116      	bne.n	80083c8 <USB_EPStartXfer+0x86c>
 800839a:	1d3b      	adds	r3, r7, #4
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083a8:	4413      	add	r3, r2
 80083aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80083ac:	463b      	mov	r3, r7
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	011a      	lsls	r2, r3, #4
 80083b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083b6:	4413      	add	r3, r2
 80083b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083bc:	677b      	str	r3, [r7, #116]	; 0x74
 80083be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80083c8:	463b      	mov	r3, r7
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	895b      	ldrh	r3, [r3, #10]
 80083ce:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80083d2:	e097      	b.n	8008504 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083d4:	463b      	mov	r3, r7
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d168      	bne.n	80084b0 <USB_EPStartXfer+0x954>
 80083de:	1d3b      	adds	r3, r7, #4
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083e6:	1d3b      	adds	r3, r7, #4
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	461a      	mov	r2, r3
 80083f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083f6:	4413      	add	r3, r2
 80083f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083fc:	463b      	mov	r3, r7
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	011a      	lsls	r2, r3, #4
 8008404:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008408:	4413      	add	r3, r2
 800840a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800840e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008414:	2b00      	cmp	r3, #0
 8008416:	d112      	bne.n	800843e <USB_EPStartXfer+0x8e2>
 8008418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	b29b      	uxth	r3, r3
 800841e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008422:	b29a      	uxth	r2, r3
 8008424:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008426:	801a      	strh	r2, [r3, #0]
 8008428:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b29b      	uxth	r3, r3
 800842e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008436:	b29a      	uxth	r2, r3
 8008438:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800843a:	801a      	strh	r2, [r3, #0]
 800843c:	e05d      	b.n	80084fa <USB_EPStartXfer+0x99e>
 800843e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008442:	2b3e      	cmp	r3, #62	; 0x3e
 8008444:	d817      	bhi.n	8008476 <USB_EPStartXfer+0x91a>
 8008446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800844a:	085b      	lsrs	r3, r3, #1
 800844c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b00      	cmp	r3, #0
 800845a:	d004      	beq.n	8008466 <USB_EPStartXfer+0x90a>
 800845c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008460:	3301      	adds	r3, #1
 8008462:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008466:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800846a:	b29b      	uxth	r3, r3
 800846c:	029b      	lsls	r3, r3, #10
 800846e:	b29a      	uxth	r2, r3
 8008470:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008472:	801a      	strh	r2, [r3, #0]
 8008474:	e041      	b.n	80084fa <USB_EPStartXfer+0x99e>
 8008476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800847a:	095b      	lsrs	r3, r3, #5
 800847c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008484:	f003 031f 	and.w	r3, r3, #31
 8008488:	2b00      	cmp	r3, #0
 800848a:	d104      	bne.n	8008496 <USB_EPStartXfer+0x93a>
 800848c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008490:	3b01      	subs	r3, #1
 8008492:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008496:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800849a:	b29b      	uxth	r3, r3
 800849c:	029b      	lsls	r3, r3, #10
 800849e:	b29b      	uxth	r3, r3
 80084a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084ac:	801a      	strh	r2, [r3, #0]
 80084ae:	e024      	b.n	80084fa <USB_EPStartXfer+0x99e>
 80084b0:	463b      	mov	r3, r7
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	785b      	ldrb	r3, [r3, #1]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d11f      	bne.n	80084fa <USB_EPStartXfer+0x99e>
 80084ba:	1d3b      	adds	r3, r7, #4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084c2:	1d3b      	adds	r3, r7, #4
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	461a      	mov	r2, r3
 80084ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084d2:	4413      	add	r3, r2
 80084d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084d8:	463b      	mov	r3, r7
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	011a      	lsls	r2, r3, #4
 80084e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084e4:	4413      	add	r3, r2
 80084e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80084fa:	463b      	mov	r3, r7
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	891b      	ldrh	r3, [r3, #8]
 8008500:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008504:	463b      	mov	r3, r7
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6959      	ldr	r1, [r3, #20]
 800850a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800850e:	b29b      	uxth	r3, r3
 8008510:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008514:	1d38      	adds	r0, r7, #4
 8008516:	6800      	ldr	r0, [r0, #0]
 8008518:	f000 fd7e 	bl	8009018 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800851c:	463b      	mov	r3, r7
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	785b      	ldrb	r3, [r3, #1]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d122      	bne.n	800856c <USB_EPStartXfer+0xa10>
 8008526:	1d3b      	adds	r3, r7, #4
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	463b      	mov	r3, r7
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	b29b      	uxth	r3, r3
 8008538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800853c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008540:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8008544:	1d3b      	adds	r3, r7, #4
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	463b      	mov	r3, r7
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	441a      	add	r2, r3
 8008552:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800855a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800855e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008562:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008566:	b29b      	uxth	r3, r3
 8008568:	8013      	strh	r3, [r2, #0]
 800856a:	e026      	b.n	80085ba <USB_EPStartXfer+0xa5e>
 800856c:	463b      	mov	r3, r7
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d121      	bne.n	80085ba <USB_EPStartXfer+0xa5e>
 8008576:	1d3b      	adds	r3, r7, #4
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	463b      	mov	r3, r7
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800858c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008590:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008594:	1d3b      	adds	r3, r7, #4
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	463b      	mov	r3, r7
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	441a      	add	r2, r3
 80085a2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80085a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80085ba:	1d3b      	adds	r3, r7, #4
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	463b      	mov	r3, r7
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	f107 020e 	add.w	r2, r7, #14
 80085d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085d8:	8013      	strh	r3, [r2, #0]
 80085da:	f107 030e 	add.w	r3, r7, #14
 80085de:	f107 020e 	add.w	r2, r7, #14
 80085e2:	8812      	ldrh	r2, [r2, #0]
 80085e4:	f082 0210 	eor.w	r2, r2, #16
 80085e8:	801a      	strh	r2, [r3, #0]
 80085ea:	f107 030e 	add.w	r3, r7, #14
 80085ee:	f107 020e 	add.w	r2, r7, #14
 80085f2:	8812      	ldrh	r2, [r2, #0]
 80085f4:	f082 0220 	eor.w	r2, r2, #32
 80085f8:	801a      	strh	r2, [r3, #0]
 80085fa:	1d3b      	adds	r3, r7, #4
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	463b      	mov	r3, r7
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	441a      	add	r2, r3
 8008608:	f107 030e 	add.w	r3, r7, #14
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800861a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861e:	b29b      	uxth	r3, r3
 8008620:	8013      	strh	r3, [r2, #0]
 8008622:	e3b5      	b.n	8008d90 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008624:	463b      	mov	r3, r7
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	7b1b      	ldrb	r3, [r3, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	f040 8090 	bne.w	8008750 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008630:	463b      	mov	r3, r7
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	699a      	ldr	r2, [r3, #24]
 8008636:	463b      	mov	r3, r7
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	429a      	cmp	r2, r3
 800863e:	d90e      	bls.n	800865e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8008640:	463b      	mov	r3, r7
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800864a:	463b      	mov	r3, r7
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	699a      	ldr	r2, [r3, #24]
 8008650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008654:	1ad2      	subs	r2, r2, r3
 8008656:	463b      	mov	r3, r7
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	619a      	str	r2, [r3, #24]
 800865c:	e008      	b.n	8008670 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800865e:	463b      	mov	r3, r7
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8008668:	463b      	mov	r3, r7
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2200      	movs	r2, #0
 800866e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008670:	1d3b      	adds	r3, r7, #4
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008678:	1d3b      	adds	r3, r7, #4
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008680:	b29b      	uxth	r3, r3
 8008682:	461a      	mov	r2, r3
 8008684:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008688:	4413      	add	r3, r2
 800868a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800868e:	463b      	mov	r3, r7
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	011a      	lsls	r2, r3, #4
 8008696:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800869a:	4413      	add	r3, r2
 800869c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80086a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d116      	bne.n	80086da <USB_EPStartXfer+0xb7e>
 80086ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086b0:	881b      	ldrh	r3, [r3, #0]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086be:	801a      	strh	r2, [r3, #0]
 80086c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086d6:	801a      	strh	r2, [r3, #0]
 80086d8:	e32c      	b.n	8008d34 <USB_EPStartXfer+0x11d8>
 80086da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086de:	2b3e      	cmp	r3, #62	; 0x3e
 80086e0:	d818      	bhi.n	8008714 <USB_EPStartXfer+0xbb8>
 80086e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086e6:	085b      	lsrs	r3, r3, #1
 80086e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80086ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d004      	beq.n	8008702 <USB_EPStartXfer+0xba6>
 80086f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086fc:	3301      	adds	r3, #1
 80086fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008702:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008706:	b29b      	uxth	r3, r3
 8008708:	029b      	lsls	r3, r3, #10
 800870a:	b29a      	uxth	r2, r3
 800870c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008710:	801a      	strh	r2, [r3, #0]
 8008712:	e30f      	b.n	8008d34 <USB_EPStartXfer+0x11d8>
 8008714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008718:	095b      	lsrs	r3, r3, #5
 800871a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800871e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008722:	f003 031f 	and.w	r3, r3, #31
 8008726:	2b00      	cmp	r3, #0
 8008728:	d104      	bne.n	8008734 <USB_EPStartXfer+0xbd8>
 800872a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800872e:	3b01      	subs	r3, #1
 8008730:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008734:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008738:	b29b      	uxth	r3, r3
 800873a:	029b      	lsls	r3, r3, #10
 800873c:	b29b      	uxth	r3, r3
 800873e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008746:	b29a      	uxth	r2, r3
 8008748:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800874c:	801a      	strh	r2, [r3, #0]
 800874e:	e2f1      	b.n	8008d34 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008750:	463b      	mov	r3, r7
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	78db      	ldrb	r3, [r3, #3]
 8008756:	2b02      	cmp	r3, #2
 8008758:	f040 818f 	bne.w	8008a7a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800875c:	463b      	mov	r3, r7
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	785b      	ldrb	r3, [r3, #1]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d175      	bne.n	8008852 <USB_EPStartXfer+0xcf6>
 8008766:	1d3b      	adds	r3, r7, #4
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800876e:	1d3b      	adds	r3, r7, #4
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008776:	b29b      	uxth	r3, r3
 8008778:	461a      	mov	r2, r3
 800877a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800877e:	4413      	add	r3, r2
 8008780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008784:	463b      	mov	r3, r7
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	011a      	lsls	r2, r3, #4
 800878c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008790:	4413      	add	r3, r2
 8008792:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800879a:	463b      	mov	r3, r7
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d116      	bne.n	80087d2 <USB_EPStartXfer+0xc76>
 80087a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087a8:	881b      	ldrh	r3, [r3, #0]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087b6:	801a      	strh	r2, [r3, #0]
 80087b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087ce:	801a      	strh	r2, [r3, #0]
 80087d0:	e065      	b.n	800889e <USB_EPStartXfer+0xd42>
 80087d2:	463b      	mov	r3, r7
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	2b3e      	cmp	r3, #62	; 0x3e
 80087da:	d81a      	bhi.n	8008812 <USB_EPStartXfer+0xcb6>
 80087dc:	463b      	mov	r3, r7
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	085b      	lsrs	r3, r3, #1
 80087e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087e8:	463b      	mov	r3, r7
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d004      	beq.n	8008800 <USB_EPStartXfer+0xca4>
 80087f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087fa:	3301      	adds	r3, #1
 80087fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008800:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008804:	b29b      	uxth	r3, r3
 8008806:	029b      	lsls	r3, r3, #10
 8008808:	b29a      	uxth	r2, r3
 800880a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800880e:	801a      	strh	r2, [r3, #0]
 8008810:	e045      	b.n	800889e <USB_EPStartXfer+0xd42>
 8008812:	463b      	mov	r3, r7
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	095b      	lsrs	r3, r3, #5
 800881a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800881e:	463b      	mov	r3, r7
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	f003 031f 	and.w	r3, r3, #31
 8008828:	2b00      	cmp	r3, #0
 800882a:	d104      	bne.n	8008836 <USB_EPStartXfer+0xcda>
 800882c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008830:	3b01      	subs	r3, #1
 8008832:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008836:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800883a:	b29b      	uxth	r3, r3
 800883c:	029b      	lsls	r3, r3, #10
 800883e:	b29b      	uxth	r3, r3
 8008840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008848:	b29a      	uxth	r2, r3
 800884a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800884e:	801a      	strh	r2, [r3, #0]
 8008850:	e025      	b.n	800889e <USB_EPStartXfer+0xd42>
 8008852:	463b      	mov	r3, r7
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	785b      	ldrb	r3, [r3, #1]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d120      	bne.n	800889e <USB_EPStartXfer+0xd42>
 800885c:	1d3b      	adds	r3, r7, #4
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008864:	1d3b      	adds	r3, r7, #4
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800886c:	b29b      	uxth	r3, r3
 800886e:	461a      	mov	r2, r3
 8008870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008874:	4413      	add	r3, r2
 8008876:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800887a:	463b      	mov	r3, r7
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	011a      	lsls	r2, r3, #4
 8008882:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008886:	4413      	add	r3, r2
 8008888:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800888c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008890:	463b      	mov	r3, r7
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	b29a      	uxth	r2, r3
 8008898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800889c:	801a      	strh	r2, [r3, #0]
 800889e:	1d3b      	adds	r3, r7, #4
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80088a6:	463b      	mov	r3, r7
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	785b      	ldrb	r3, [r3, #1]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d175      	bne.n	800899c <USB_EPStartXfer+0xe40>
 80088b0:	1d3b      	adds	r3, r7, #4
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088b8:	1d3b      	adds	r3, r7, #4
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088c8:	4413      	add	r3, r2
 80088ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088ce:	463b      	mov	r3, r7
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	011a      	lsls	r2, r3, #4
 80088d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088da:	4413      	add	r3, r2
 80088dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088e4:	463b      	mov	r3, r7
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d116      	bne.n	800891c <USB_EPStartXfer+0xdc0>
 80088ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008900:	801a      	strh	r2, [r3, #0]
 8008902:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	b29b      	uxth	r3, r3
 800890a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800890e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008912:	b29a      	uxth	r2, r3
 8008914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008918:	801a      	strh	r2, [r3, #0]
 800891a:	e061      	b.n	80089e0 <USB_EPStartXfer+0xe84>
 800891c:	463b      	mov	r3, r7
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	2b3e      	cmp	r3, #62	; 0x3e
 8008924:	d81a      	bhi.n	800895c <USB_EPStartXfer+0xe00>
 8008926:	463b      	mov	r3, r7
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	085b      	lsrs	r3, r3, #1
 800892e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008932:	463b      	mov	r3, r7
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	2b00      	cmp	r3, #0
 800893e:	d004      	beq.n	800894a <USB_EPStartXfer+0xdee>
 8008940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008944:	3301      	adds	r3, #1
 8008946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800894a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800894e:	b29b      	uxth	r3, r3
 8008950:	029b      	lsls	r3, r3, #10
 8008952:	b29a      	uxth	r2, r3
 8008954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008958:	801a      	strh	r2, [r3, #0]
 800895a:	e041      	b.n	80089e0 <USB_EPStartXfer+0xe84>
 800895c:	463b      	mov	r3, r7
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	095b      	lsrs	r3, r3, #5
 8008964:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008968:	463b      	mov	r3, r7
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	f003 031f 	and.w	r3, r3, #31
 8008972:	2b00      	cmp	r3, #0
 8008974:	d104      	bne.n	8008980 <USB_EPStartXfer+0xe24>
 8008976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800897a:	3b01      	subs	r3, #1
 800897c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008984:	b29b      	uxth	r3, r3
 8008986:	029b      	lsls	r3, r3, #10
 8008988:	b29b      	uxth	r3, r3
 800898a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800898e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008992:	b29a      	uxth	r2, r3
 8008994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008998:	801a      	strh	r2, [r3, #0]
 800899a:	e021      	b.n	80089e0 <USB_EPStartXfer+0xe84>
 800899c:	463b      	mov	r3, r7
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d11c      	bne.n	80089e0 <USB_EPStartXfer+0xe84>
 80089a6:	1d3b      	adds	r3, r7, #4
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	461a      	mov	r2, r3
 80089b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089b6:	4413      	add	r3, r2
 80089b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80089bc:	463b      	mov	r3, r7
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	011a      	lsls	r2, r3, #4
 80089c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089c8:	4413      	add	r3, r2
 80089ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089d2:	463b      	mov	r3, r7
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	b29a      	uxth	r2, r3
 80089da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089de:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80089e0:	463b      	mov	r3, r7
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 81a4 	beq.w	8008d34 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80089ec:	1d3b      	adds	r3, r7, #4
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	463b      	mov	r3, r7
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a00:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d005      	beq.n	8008a18 <USB_EPStartXfer+0xebc>
 8008a0c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10d      	bne.n	8008a34 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a18:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f040 8187 	bne.w	8008d34 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a26:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f040 8180 	bne.w	8008d34 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008a34:	1d3b      	adds	r3, r7, #4
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	463b      	mov	r3, r7
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8008a52:	1d3b      	adds	r3, r7, #4
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	463b      	mov	r3, r7
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	441a      	add	r2, r3
 8008a60:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	8013      	strh	r3, [r2, #0]
 8008a78:	e15c      	b.n	8008d34 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008a7a:	463b      	mov	r3, r7
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	78db      	ldrb	r3, [r3, #3]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	f040 8155 	bne.w	8008d30 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008a86:	463b      	mov	r3, r7
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	699a      	ldr	r2, [r3, #24]
 8008a8c:	463b      	mov	r3, r7
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d90e      	bls.n	8008ab4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8008a96:	463b      	mov	r3, r7
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8008aa0:	463b      	mov	r3, r7
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	699a      	ldr	r2, [r3, #24]
 8008aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008aaa:	1ad2      	subs	r2, r2, r3
 8008aac:	463b      	mov	r3, r7
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	619a      	str	r2, [r3, #24]
 8008ab2:	e008      	b.n	8008ac6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008ab4:	463b      	mov	r3, r7
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8008abe:	463b      	mov	r3, r7
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008ac6:	463b      	mov	r3, r7
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	785b      	ldrb	r3, [r3, #1]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d16f      	bne.n	8008bb0 <USB_EPStartXfer+0x1054>
 8008ad0:	1d3b      	adds	r3, r7, #4
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ad8:	1d3b      	adds	r3, r7, #4
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008ae8:	4413      	add	r3, r2
 8008aea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008aee:	463b      	mov	r3, r7
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	011a      	lsls	r2, r3, #4
 8008af6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008afa:	4413      	add	r3, r2
 8008afc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d116      	bne.n	8008b3a <USB_EPStartXfer+0xfde>
 8008b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b10:	881b      	ldrh	r3, [r3, #0]
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b1e:	801a      	strh	r2, [r3, #0]
 8008b20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b36:	801a      	strh	r2, [r3, #0]
 8008b38:	e05f      	b.n	8008bfa <USB_EPStartXfer+0x109e>
 8008b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b3e:	2b3e      	cmp	r3, #62	; 0x3e
 8008b40:	d818      	bhi.n	8008b74 <USB_EPStartXfer+0x1018>
 8008b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b46:	085b      	lsrs	r3, r3, #1
 8008b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d004      	beq.n	8008b62 <USB_EPStartXfer+0x1006>
 8008b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	029b      	lsls	r3, r3, #10
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b70:	801a      	strh	r2, [r3, #0]
 8008b72:	e042      	b.n	8008bfa <USB_EPStartXfer+0x109e>
 8008b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b78:	095b      	lsrs	r3, r3, #5
 8008b7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b82:	f003 031f 	and.w	r3, r3, #31
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d104      	bne.n	8008b94 <USB_EPStartXfer+0x1038>
 8008b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	029b      	lsls	r3, r3, #10
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008bac:	801a      	strh	r2, [r3, #0]
 8008bae:	e024      	b.n	8008bfa <USB_EPStartXfer+0x109e>
 8008bb0:	463b      	mov	r3, r7
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	785b      	ldrb	r3, [r3, #1]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d11f      	bne.n	8008bfa <USB_EPStartXfer+0x109e>
 8008bba:	1d3b      	adds	r3, r7, #4
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bc2:	1d3b      	adds	r3, r7, #4
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	461a      	mov	r2, r3
 8008bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bd8:	463b      	mov	r3, r7
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	011a      	lsls	r2, r3, #4
 8008be0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008be4:	4413      	add	r3, r2
 8008be6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bf8:	801a      	strh	r2, [r3, #0]
 8008bfa:	1d3b      	adds	r3, r7, #4
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c02:	463b      	mov	r3, r7
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	785b      	ldrb	r3, [r3, #1]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d16f      	bne.n	8008cec <USB_EPStartXfer+0x1190>
 8008c0c:	1d3b      	adds	r3, r7, #4
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c14:	1d3b      	adds	r3, r7, #4
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c24:	4413      	add	r3, r2
 8008c26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c2a:	463b      	mov	r3, r7
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	011a      	lsls	r2, r3, #4
 8008c32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c36:	4413      	add	r3, r2
 8008c38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d116      	bne.n	8008c76 <USB_EPStartXfer+0x111a>
 8008c48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c5a:	801a      	strh	r2, [r3, #0]
 8008c5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c72:	801a      	strh	r2, [r3, #0]
 8008c74:	e05e      	b.n	8008d34 <USB_EPStartXfer+0x11d8>
 8008c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8008c7c:	d818      	bhi.n	8008cb0 <USB_EPStartXfer+0x1154>
 8008c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c82:	085b      	lsrs	r3, r3, #1
 8008c84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d004      	beq.n	8008c9e <USB_EPStartXfer+0x1142>
 8008c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c98:	3301      	adds	r3, #1
 8008c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	029b      	lsls	r3, r3, #10
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008cac:	801a      	strh	r2, [r3, #0]
 8008cae:	e041      	b.n	8008d34 <USB_EPStartXfer+0x11d8>
 8008cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cb4:	095b      	lsrs	r3, r3, #5
 8008cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cbe:	f003 031f 	and.w	r3, r3, #31
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d104      	bne.n	8008cd0 <USB_EPStartXfer+0x1174>
 8008cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	029b      	lsls	r3, r3, #10
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008ce8:	801a      	strh	r2, [r3, #0]
 8008cea:	e023      	b.n	8008d34 <USB_EPStartXfer+0x11d8>
 8008cec:	463b      	mov	r3, r7
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	785b      	ldrb	r3, [r3, #1]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d11e      	bne.n	8008d34 <USB_EPStartXfer+0x11d8>
 8008cf6:	1d3b      	adds	r3, r7, #4
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	461a      	mov	r2, r3
 8008d02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d06:	4413      	add	r3, r2
 8008d08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d0c:	463b      	mov	r3, r7
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	011a      	lsls	r2, r3, #4
 8008d14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d18:	4413      	add	r3, r2
 8008d1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d2c:	801a      	strh	r2, [r3, #0]
 8008d2e:	e001      	b.n	8008d34 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e02e      	b.n	8008d92 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d34:	1d3b      	adds	r3, r7, #4
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	463b      	mov	r3, r7
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008d52:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008d56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d5a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008d5e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008d62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d66:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008d6a:	1d3b      	adds	r3, r7, #4
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	463b      	mov	r3, r7
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	441a      	add	r2, r3
 8008d78:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	785b      	ldrb	r3, [r3, #1]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d020      	beq.n	8008df0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4413      	add	r3, r2
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc4:	81bb      	strh	r3, [r7, #12]
 8008dc6:	89bb      	ldrh	r3, [r7, #12]
 8008dc8:	f083 0310 	eor.w	r3, r3, #16
 8008dcc:	81bb      	strh	r3, [r7, #12]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	441a      	add	r2, r3
 8008dd8:	89bb      	ldrh	r3, [r7, #12]
 8008dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	8013      	strh	r3, [r2, #0]
 8008dee:	e01f      	b.n	8008e30 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4413      	add	r3, r2
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e06:	81fb      	strh	r3, [r7, #14]
 8008e08:	89fb      	ldrh	r3, [r7, #14]
 8008e0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e0e:	81fb      	strh	r3, [r7, #14]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	441a      	add	r2, r3
 8008e1a:	89fb      	ldrh	r3, [r7, #14]
 8008e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bc80      	pop	{r7}
 8008e3a:	4770      	bx	lr

08008e3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b087      	sub	sp, #28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	7b1b      	ldrb	r3, [r3, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f040 809d 	bne.w	8008f8a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	785b      	ldrb	r3, [r3, #1]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d04c      	beq.n	8008ef2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	823b      	strh	r3, [r7, #16]
 8008e66:	8a3b      	ldrh	r3, [r7, #16]
 8008e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d01b      	beq.n	8008ea8 <USB_EPClearStall+0x6c>
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e86:	81fb      	strh	r3, [r7, #14]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	441a      	add	r2, r3
 8008e92:	89fb      	ldrh	r3, [r7, #14]
 8008e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ea0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	78db      	ldrb	r3, [r3, #3]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d06c      	beq.n	8008f8a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec6:	81bb      	strh	r3, [r7, #12]
 8008ec8:	89bb      	ldrh	r3, [r7, #12]
 8008eca:	f083 0320 	eor.w	r3, r3, #32
 8008ece:	81bb      	strh	r3, [r7, #12]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	441a      	add	r2, r3
 8008eda:	89bb      	ldrh	r3, [r7, #12]
 8008edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	8013      	strh	r3, [r2, #0]
 8008ef0:	e04b      	b.n	8008f8a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	82fb      	strh	r3, [r7, #22]
 8008f00:	8afb      	ldrh	r3, [r7, #22]
 8008f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d01b      	beq.n	8008f42 <USB_EPClearStall+0x106>
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f20:	82bb      	strh	r3, [r7, #20]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	441a      	add	r2, r3
 8008f2c:	8abb      	ldrh	r3, [r7, #20]
 8008f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	881b      	ldrh	r3, [r3, #0]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f58:	827b      	strh	r3, [r7, #18]
 8008f5a:	8a7b      	ldrh	r3, [r7, #18]
 8008f5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f60:	827b      	strh	r3, [r7, #18]
 8008f62:	8a7b      	ldrh	r3, [r7, #18]
 8008f64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f68:	827b      	strh	r3, [r7, #18]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	441a      	add	r2, r3
 8008f74:	8a7b      	ldrh	r3, [r7, #18]
 8008f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	371c      	adds	r7, #28
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc80      	pop	{r7}
 8008f94:	4770      	bx	lr

08008f96 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008fa2:	78fb      	ldrb	r3, [r7, #3]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d103      	bne.n	8008fb0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2280      	movs	r2, #128	; 0x80
 8008fac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bc80      	pop	{r7}
 8008fba:	4770      	bx	lr

08008fbc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bc80      	pop	{r7}
 8008fce:	4770      	bx	lr

08008fd0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bc80      	pop	{r7}
 8008fe2:	4770      	bx	lr

08008fe4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr

08009002 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	bc80      	pop	{r7}
 8009016:	4770      	bx	lr

08009018 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009018:	b480      	push	{r7}
 800901a:	b08d      	sub	sp, #52	; 0x34
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	4611      	mov	r1, r2
 8009024:	461a      	mov	r2, r3
 8009026:	460b      	mov	r3, r1
 8009028:	80fb      	strh	r3, [r7, #6]
 800902a:	4613      	mov	r3, r2
 800902c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800902e:	88bb      	ldrh	r3, [r7, #4]
 8009030:	3301      	adds	r3, #1
 8009032:	085b      	lsrs	r3, r3, #1
 8009034:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800903e:	88fb      	ldrh	r3, [r7, #6]
 8009040:	005a      	lsls	r2, r3, #1
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	4413      	add	r3, r2
 8009046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800904a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800904c:	6a3b      	ldr	r3, [r7, #32]
 800904e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009050:	e01e      	b.n	8009090 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	3301      	adds	r3, #1
 800905c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	b29b      	uxth	r3, r3
 8009064:	021b      	lsls	r3, r3, #8
 8009066:	b29b      	uxth	r3, r3
 8009068:	461a      	mov	r2, r3
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	4313      	orrs	r3, r2
 800906e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	b29a      	uxth	r2, r3
 8009074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009076:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	3302      	adds	r3, #2
 800907c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	3302      	adds	r3, #2
 8009082:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	3301      	adds	r3, #1
 8009088:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	3b01      	subs	r3, #1
 800908e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1dd      	bne.n	8009052 <USB_WritePMA+0x3a>
  }
}
 8009096:	bf00      	nop
 8009098:	bf00      	nop
 800909a:	3734      	adds	r7, #52	; 0x34
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr

080090a2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b08b      	sub	sp, #44	; 0x2c
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	60f8      	str	r0, [r7, #12]
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	4611      	mov	r1, r2
 80090ae:	461a      	mov	r2, r3
 80090b0:	460b      	mov	r3, r1
 80090b2:	80fb      	strh	r3, [r7, #6]
 80090b4:	4613      	mov	r3, r2
 80090b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80090b8:	88bb      	ldrh	r3, [r7, #4]
 80090ba:	085b      	lsrs	r3, r3, #1
 80090bc:	b29b      	uxth	r3, r3
 80090be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80090c8:	88fb      	ldrh	r3, [r7, #6]
 80090ca:	005a      	lsls	r2, r3, #1
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090d4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
 80090da:	e01b      	b.n	8009114 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	3302      	adds	r3, #2
 80090e8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	3301      	adds	r3, #1
 80090f6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	0a1b      	lsrs	r3, r3, #8
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	3301      	adds	r3, #1
 8009106:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	3302      	adds	r3, #2
 800910c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009110:	3b01      	subs	r3, #1
 8009112:	627b      	str	r3, [r7, #36]	; 0x24
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1e0      	bne.n	80090dc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800911a:	88bb      	ldrh	r3, [r7, #4]
 800911c:	f003 0301 	and.w	r3, r3, #1
 8009120:	b29b      	uxth	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d007      	beq.n	8009136 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	881b      	ldrh	r3, [r3, #0]
 800912a:	b29b      	uxth	r3, r3
 800912c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	b2da      	uxtb	r2, r3
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	701a      	strb	r2, [r3, #0]
  }
}
 8009136:	bf00      	nop
 8009138:	372c      	adds	r7, #44	; 0x2c
 800913a:	46bd      	mov	sp, r7
 800913c:	bc80      	pop	{r7}
 800913e:	4770      	bx	lr

08009140 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	7c1b      	ldrb	r3, [r3, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d115      	bne.n	8009184 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800915c:	2202      	movs	r2, #2
 800915e:	2181      	movs	r1, #129	; 0x81
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f001 fe8a 	bl	800ae7a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800916c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009170:	2202      	movs	r2, #2
 8009172:	2101      	movs	r1, #1
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 fe80 	bl	800ae7a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009182:	e012      	b.n	80091aa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009184:	2340      	movs	r3, #64	; 0x40
 8009186:	2202      	movs	r2, #2
 8009188:	2181      	movs	r1, #129	; 0x81
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f001 fe75 	bl	800ae7a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009196:	2340      	movs	r3, #64	; 0x40
 8009198:	2202      	movs	r2, #2
 800919a:	2101      	movs	r1, #1
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 fe6c 	bl	800ae7a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091aa:	2308      	movs	r3, #8
 80091ac:	2203      	movs	r2, #3
 80091ae:	2182      	movs	r1, #130	; 0x82
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f001 fe62 	bl	800ae7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80091bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80091c0:	f001 ff82 	bl	800b0c8 <USBD_static_malloc>
 80091c4:	4602      	mov	r2, r0
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d102      	bne.n	80091dc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80091d6:	2301      	movs	r3, #1
 80091d8:	73fb      	strb	r3, [r7, #15]
 80091da:	e026      	b.n	800922a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	7c1b      	ldrb	r3, [r3, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d109      	bne.n	800921a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800920c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009210:	2101      	movs	r1, #1
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f001 ff22 	bl	800b05c <USBD_LL_PrepareReceive>
 8009218:	e007      	b.n	800922a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009220:	2340      	movs	r3, #64	; 0x40
 8009222:	2101      	movs	r1, #1
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 ff19 	bl	800b05c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800922a:	7bfb      	ldrb	r3, [r7, #15]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009240:	2300      	movs	r3, #0
 8009242:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009244:	2181      	movs	r1, #129	; 0x81
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f001 fe3d 	bl	800aec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009252:	2101      	movs	r1, #1
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 fe36 	bl	800aec6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009262:	2182      	movs	r1, #130	; 0x82
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 fe2e 	bl	800aec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00e      	beq.n	8009298 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928a:	4618      	mov	r0, r3
 800928c:	f001 ff28 	bl	800b0e0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009298:	7bfb      	ldrb	r3, [r7, #15]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b086      	sub	sp, #24
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80092b8:	2300      	movs	r3, #0
 80092ba:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80092bc:	2300      	movs	r3, #0
 80092be:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d039      	beq.n	8009340 <USBD_CDC_Setup+0x9e>
 80092cc:	2b20      	cmp	r3, #32
 80092ce:	d17f      	bne.n	80093d0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	88db      	ldrh	r3, [r3, #6]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d029      	beq.n	800932c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	b25b      	sxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	da11      	bge.n	8009306 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80092ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	88d2      	ldrh	r2, [r2, #6]
 80092f4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80092f6:	6939      	ldr	r1, [r7, #16]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	88db      	ldrh	r3, [r3, #6]
 80092fc:	461a      	mov	r2, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f001 fa09 	bl	800a716 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009304:	e06b      	b.n	80093de <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	785a      	ldrb	r2, [r3, #1]
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	88db      	ldrh	r3, [r3, #6]
 8009314:	b2da      	uxtb	r2, r3
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800931c:	6939      	ldr	r1, [r7, #16]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	88db      	ldrh	r3, [r3, #6]
 8009322:	461a      	mov	r2, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 fa24 	bl	800a772 <USBD_CtlPrepareRx>
      break;
 800932a:	e058      	b.n	80093de <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	7850      	ldrb	r0, [r2, #1]
 8009338:	2200      	movs	r2, #0
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	4798      	blx	r3
      break;
 800933e:	e04e      	b.n	80093de <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	785b      	ldrb	r3, [r3, #1]
 8009344:	2b0b      	cmp	r3, #11
 8009346:	d02e      	beq.n	80093a6 <USBD_CDC_Setup+0x104>
 8009348:	2b0b      	cmp	r3, #11
 800934a:	dc38      	bgt.n	80093be <USBD_CDC_Setup+0x11c>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <USBD_CDC_Setup+0xb4>
 8009350:	2b0a      	cmp	r3, #10
 8009352:	d014      	beq.n	800937e <USBD_CDC_Setup+0xdc>
 8009354:	e033      	b.n	80093be <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800935c:	2b03      	cmp	r3, #3
 800935e:	d107      	bne.n	8009370 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009360:	f107 030c 	add.w	r3, r7, #12
 8009364:	2202      	movs	r2, #2
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f001 f9d4 	bl	800a716 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800936e:	e02e      	b.n	80093ce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f001 f965 	bl	800a642 <USBD_CtlError>
            ret = USBD_FAIL;
 8009378:	2302      	movs	r3, #2
 800937a:	75fb      	strb	r3, [r7, #23]
          break;
 800937c:	e027      	b.n	80093ce <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009384:	2b03      	cmp	r3, #3
 8009386:	d107      	bne.n	8009398 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009388:	f107 030f 	add.w	r3, r7, #15
 800938c:	2201      	movs	r2, #1
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f001 f9c0 	bl	800a716 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009396:	e01a      	b.n	80093ce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f001 f951 	bl	800a642 <USBD_CtlError>
            ret = USBD_FAIL;
 80093a0:	2302      	movs	r3, #2
 80093a2:	75fb      	strb	r3, [r7, #23]
          break;
 80093a4:	e013      	b.n	80093ce <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ac:	2b03      	cmp	r3, #3
 80093ae:	d00d      	beq.n	80093cc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f001 f945 	bl	800a642 <USBD_CtlError>
            ret = USBD_FAIL;
 80093b8:	2302      	movs	r3, #2
 80093ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093bc:	e006      	b.n	80093cc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 f93e 	bl	800a642 <USBD_CtlError>
          ret = USBD_FAIL;
 80093c6:	2302      	movs	r3, #2
 80093c8:	75fb      	strb	r3, [r7, #23]
          break;
 80093ca:	e000      	b.n	80093ce <USBD_CDC_Setup+0x12c>
          break;
 80093cc:	bf00      	nop
      }
      break;
 80093ce:	e006      	b.n	80093de <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80093d0:	6839      	ldr	r1, [r7, #0]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f001 f935 	bl	800a642 <USBD_CtlError>
      ret = USBD_FAIL;
 80093d8:	2302      	movs	r3, #2
 80093da:	75fb      	strb	r3, [r7, #23]
      break;
 80093dc:	bf00      	nop
  }

  return ret;
 80093de:	7dfb      	ldrb	r3, [r7, #23]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3718      	adds	r7, #24
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009402:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800940a:	2b00      	cmp	r3, #0
 800940c:	d03a      	beq.n	8009484 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	4613      	mov	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4413      	add	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	440b      	add	r3, r1
 800941c:	331c      	adds	r3, #28
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d029      	beq.n	8009478 <USBD_CDC_DataIn+0x90>
 8009424:	78fa      	ldrb	r2, [r7, #3]
 8009426:	6879      	ldr	r1, [r7, #4]
 8009428:	4613      	mov	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4413      	add	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	440b      	add	r3, r1
 8009432:	331c      	adds	r3, #28
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	78f9      	ldrb	r1, [r7, #3]
 8009438:	68b8      	ldr	r0, [r7, #8]
 800943a:	460b      	mov	r3, r1
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	440b      	add	r3, r1
 8009440:	00db      	lsls	r3, r3, #3
 8009442:	4403      	add	r3, r0
 8009444:	3338      	adds	r3, #56	; 0x38
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	fbb2 f1f3 	udiv	r1, r2, r3
 800944c:	fb03 f301 	mul.w	r3, r3, r1
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d110      	bne.n	8009478 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009456:	78fa      	ldrb	r2, [r7, #3]
 8009458:	6879      	ldr	r1, [r7, #4]
 800945a:	4613      	mov	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	440b      	add	r3, r1
 8009464:	331c      	adds	r3, #28
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800946a:	78f9      	ldrb	r1, [r7, #3]
 800946c:	2300      	movs	r3, #0
 800946e:	2200      	movs	r2, #0
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f001 fdd0 	bl	800b016 <USBD_LL_Transmit>
 8009476:	e003      	b.n	8009480 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	e000      	b.n	8009486 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009484:	2302      	movs	r3, #2
  }
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	460b      	mov	r3, r1
 8009498:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094a2:	78fb      	ldrb	r3, [r7, #3]
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 fdfb 	bl	800b0a2 <USBD_LL_GetRxDataSize>
 80094ac:	4602      	mov	r2, r0
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00d      	beq.n	80094da <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80094d2:	4611      	mov	r1, r2
 80094d4:	4798      	blx	r3

    return USBD_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	e000      	b.n	80094dc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80094da:	2302      	movs	r3, #2
  }
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d015      	beq.n	800952a <USBD_CDC_EP0_RxReady+0x46>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009504:	2bff      	cmp	r3, #255	; 0xff
 8009506:	d010      	beq.n	800952a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009516:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800951e:	b292      	uxth	r2, r2
 8009520:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	22ff      	movs	r2, #255	; 0xff
 8009526:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2243      	movs	r2, #67	; 0x43
 8009540:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009542:	4b03      	ldr	r3, [pc, #12]	; (8009550 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	bc80      	pop	{r7}
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	200000b8 	.word	0x200000b8

08009554 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2243      	movs	r2, #67	; 0x43
 8009560:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009562:	4b03      	ldr	r3, [pc, #12]	; (8009570 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	bc80      	pop	{r7}
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	20000074 	.word	0x20000074

08009574 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2243      	movs	r2, #67	; 0x43
 8009580:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009582:	4b03      	ldr	r3, [pc, #12]	; (8009590 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	bc80      	pop	{r7}
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	200000fc 	.word	0x200000fc

08009594 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	220a      	movs	r2, #10
 80095a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80095a2:	4b03      	ldr	r3, [pc, #12]	; (80095b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bc80      	pop	{r7}
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	20000030 	.word	0x20000030

080095b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80095be:	2302      	movs	r3, #2
 80095c0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d005      	beq.n	80095d4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	bc80      	pop	{r7}
 80095de:	4770      	bx	lr

080095e0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	4613      	mov	r3, r2
 80095ec:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80095fe:	88fa      	ldrh	r2, [r7, #6]
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	371c      	adds	r7, #28
 800960c:	46bd      	mov	sp, r7
 800960e:	bc80      	pop	{r7}
 8009610:	4770      	bx	lr

08009612 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009612:	b480      	push	{r7}
 8009614:	b085      	sub	sp, #20
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009622:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	bc80      	pop	{r7}
 8009636:	4770      	bx	lr

08009638 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009646:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800964e:	2b00      	cmp	r3, #0
 8009650:	d01c      	beq.n	800968c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009658:	2b00      	cmp	r3, #0
 800965a:	d115      	bne.n	8009688 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2201      	movs	r2, #1
 8009660:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800967a:	b29b      	uxth	r3, r3
 800967c:	2181      	movs	r1, #129	; 0x81
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 fcc9 	bl	800b016 <USBD_LL_Transmit>

      return USBD_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	e002      	b.n	800968e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009688:	2301      	movs	r3, #1
 800968a:	e000      	b.n	800968e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800968c:	2302      	movs	r3, #2
  }
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b084      	sub	sp, #16
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d017      	beq.n	80096e0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	7c1b      	ldrb	r3, [r3, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d109      	bne.n	80096cc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096c2:	2101      	movs	r1, #1
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 fcc9 	bl	800b05c <USBD_LL_PrepareReceive>
 80096ca:	e007      	b.n	80096dc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096d2:	2340      	movs	r3, #64	; 0x40
 80096d4:	2101      	movs	r1, #1
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f001 fcc0 	bl	800b05c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	e000      	b.n	80096e2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80096e0:	2302      	movs	r3, #2
  }
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	60f8      	str	r0, [r7, #12]
 80096f2:	60b9      	str	r1, [r7, #8]
 80096f4:	4613      	mov	r3, r2
 80096f6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80096fe:	2302      	movs	r3, #2
 8009700:	e01a      	b.n	8009738 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009708:	2b00      	cmp	r3, #0
 800970a:	d003      	beq.n	8009714 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	79fa      	ldrb	r2, [r7, #7]
 800972e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f001 fb2d 	bl	800ad90 <USBD_LL_Init>

  return USBD_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d006      	beq.n	8009762 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
 8009760:	e001      	b.n	8009766 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009762:	2302      	movs	r3, #2
 8009764:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009766:	7bfb      	ldrb	r3, [r7, #15]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	bc80      	pop	{r7}
 8009770:	4770      	bx	lr

08009772 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 fb62 	bl	800ae44 <USBD_LL_Start>

  return USBD_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800978a:	b480      	push	{r7}
 800978c:	b083      	sub	sp, #12
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	bc80      	pop	{r7}
 800979c:	4770      	bx	lr

0800979e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	460b      	mov	r3, r1
 80097a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80097aa:	2302      	movs	r3, #2
 80097ac:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00c      	beq.n	80097d2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	78fa      	ldrb	r2, [r7, #3]
 80097c2:	4611      	mov	r1, r2
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	4798      	blx	r3
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	78fa      	ldrb	r2, [r7, #3]
 80097f2:	4611      	mov	r1, r2
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	4798      	blx	r3

  return USBD_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	4618      	mov	r0, r3
 8009816:	f000 fed8 	bl	800a5ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009828:	461a      	mov	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009836:	f003 031f 	and.w	r3, r3, #31
 800983a:	2b02      	cmp	r3, #2
 800983c:	d016      	beq.n	800986c <USBD_LL_SetupStage+0x6a>
 800983e:	2b02      	cmp	r3, #2
 8009840:	d81c      	bhi.n	800987c <USBD_LL_SetupStage+0x7a>
 8009842:	2b00      	cmp	r3, #0
 8009844:	d002      	beq.n	800984c <USBD_LL_SetupStage+0x4a>
 8009846:	2b01      	cmp	r3, #1
 8009848:	d008      	beq.n	800985c <USBD_LL_SetupStage+0x5a>
 800984a:	e017      	b.n	800987c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009852:	4619      	mov	r1, r3
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f9cb 	bl	8009bf0 <USBD_StdDevReq>
      break;
 800985a:	e01a      	b.n	8009892 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fa2d 	bl	8009cc4 <USBD_StdItfReq>
      break;
 800986a:	e012      	b.n	8009892 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fa6d 	bl	8009d54 <USBD_StdEPReq>
      break;
 800987a:	e00a      	b.n	8009892 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009882:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009886:	b2db      	uxtb	r3, r3
 8009888:	4619      	mov	r1, r3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f001 fb3a 	bl	800af04 <USBD_LL_StallEP>
      break;
 8009890:	bf00      	nop
  }

  return USBD_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	460b      	mov	r3, r1
 80098a6:	607a      	str	r2, [r7, #4]
 80098a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80098aa:	7afb      	ldrb	r3, [r7, #11]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d14b      	bne.n	8009948 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80098b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d134      	bne.n	800992c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	68da      	ldr	r2, [r3, #12]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d919      	bls.n	8009902 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	68da      	ldr	r2, [r3, #12]
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	1ad2      	subs	r2, r2, r3
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	68da      	ldr	r2, [r3, #12]
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d203      	bcs.n	80098f0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	e002      	b.n	80098f6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	461a      	mov	r2, r3
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 ff57 	bl	800a7ae <USBD_CtlContinueRx>
 8009900:	e038      	b.n	8009974 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00a      	beq.n	8009924 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009914:	2b03      	cmp	r3, #3
 8009916:	d105      	bne.n	8009924 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 ff54 	bl	800a7d2 <USBD_CtlSendStatus>
 800992a:	e023      	b.n	8009974 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009932:	2b05      	cmp	r3, #5
 8009934:	d11e      	bne.n	8009974 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800993e:	2100      	movs	r1, #0
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f001 fadf 	bl	800af04 <USBD_LL_StallEP>
 8009946:	e015      	b.n	8009974 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00d      	beq.n	8009970 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800995a:	2b03      	cmp	r3, #3
 800995c:	d108      	bne.n	8009970 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	7afa      	ldrb	r2, [r7, #11]
 8009968:	4611      	mov	r1, r2
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	4798      	blx	r3
 800996e:	e001      	b.n	8009974 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009970:	2302      	movs	r3, #2
 8009972:	e000      	b.n	8009976 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b086      	sub	sp, #24
 8009982:	af00      	add	r7, sp, #0
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	460b      	mov	r3, r1
 8009988:	607a      	str	r2, [r7, #4]
 800998a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800998c:	7afb      	ldrb	r3, [r7, #11]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d17f      	bne.n	8009a92 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3314      	adds	r3, #20
 8009996:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d15c      	bne.n	8009a5c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d915      	bls.n	80099da <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	68da      	ldr	r2, [r3, #12]
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	1ad2      	subs	r2, r2, r3
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	461a      	mov	r2, r3
 80099c4:	6879      	ldr	r1, [r7, #4]
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f000 fec1 	bl	800a74e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099cc:	2300      	movs	r3, #0
 80099ce:	2200      	movs	r2, #0
 80099d0:	2100      	movs	r1, #0
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f001 fb42 	bl	800b05c <USBD_LL_PrepareReceive>
 80099d8:	e04e      	b.n	8009a78 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	6912      	ldr	r2, [r2, #16]
 80099e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80099e6:	fb02 f201 	mul.w	r2, r2, r1
 80099ea:	1a9b      	subs	r3, r3, r2
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d11c      	bne.n	8009a2a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d316      	bcc.n	8009a2a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d20f      	bcs.n	8009a2a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fe9d 	bl	800a74e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2100      	movs	r1, #0
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f001 fb1a 	bl	800b05c <USBD_LL_PrepareReceive>
 8009a28:	e026      	b.n	8009a78 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00a      	beq.n	8009a4c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	d105      	bne.n	8009a4c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009a4c:	2180      	movs	r1, #128	; 0x80
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f001 fa58 	bl	800af04 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 fecf 	bl	800a7f8 <USBD_CtlReceiveStatus>
 8009a5a:	e00d      	b.n	8009a78 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d004      	beq.n	8009a70 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d103      	bne.n	8009a78 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009a70:	2180      	movs	r1, #128	; 0x80
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f001 fa46 	bl	800af04 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d11d      	bne.n	8009abe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f7ff fe81 	bl	800978a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009a90:	e015      	b.n	8009abe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00d      	beq.n	8009aba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d108      	bne.n	8009aba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aae:	695b      	ldr	r3, [r3, #20]
 8009ab0:	7afa      	ldrb	r2, [r7, #11]
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	4798      	blx	r3
 8009ab8:	e001      	b.n	8009abe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009aba:	2302      	movs	r3, #2
 8009abc:	e000      	b.n	8009ac0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3718      	adds	r7, #24
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ad0:	2340      	movs	r3, #64	; 0x40
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f001 f9cf 	bl	800ae7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2240      	movs	r2, #64	; 0x40
 8009ae8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009aec:	2340      	movs	r3, #64	; 0x40
 8009aee:	2200      	movs	r2, #0
 8009af0:	2180      	movs	r1, #128	; 0x80
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f001 f9c1 	bl	800ae7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2240      	movs	r2, #64	; 0x40
 8009b02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d009      	beq.n	8009b40 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	6852      	ldr	r2, [r2, #4]
 8009b38:	b2d2      	uxtb	r2, r2
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	4798      	blx	r3
  }

  return USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b083      	sub	sp, #12
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	460b      	mov	r3, r1
 8009b54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	78fa      	ldrb	r2, [r7, #3]
 8009b5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bc80      	pop	{r7}
 8009b66:	4770      	bx	lr

08009b68 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2204      	movs	r2, #4
 8009b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bc80      	pop	{r7}
 8009b8e:	4770      	bx	lr

08009b90 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d105      	bne.n	8009bae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bc80      	pop	{r7}
 8009bb8:	4770      	bx	lr

08009bba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b082      	sub	sp, #8
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bc8:	2b03      	cmp	r3, #3
 8009bca:	d10b      	bne.n	8009be4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bd2:	69db      	ldr	r3, [r3, #28]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d005      	beq.n	8009be4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bde:	69db      	ldr	r3, [r3, #28]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
	...

08009bf0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c06:	2b40      	cmp	r3, #64	; 0x40
 8009c08:	d005      	beq.n	8009c16 <USBD_StdDevReq+0x26>
 8009c0a:	2b40      	cmp	r3, #64	; 0x40
 8009c0c:	d84f      	bhi.n	8009cae <USBD_StdDevReq+0xbe>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d009      	beq.n	8009c26 <USBD_StdDevReq+0x36>
 8009c12:	2b20      	cmp	r3, #32
 8009c14:	d14b      	bne.n	8009cae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	4798      	blx	r3
      break;
 8009c24:	e048      	b.n	8009cb8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	785b      	ldrb	r3, [r3, #1]
 8009c2a:	2b09      	cmp	r3, #9
 8009c2c:	d839      	bhi.n	8009ca2 <USBD_StdDevReq+0xb2>
 8009c2e:	a201      	add	r2, pc, #4	; (adr r2, 8009c34 <USBD_StdDevReq+0x44>)
 8009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c34:	08009c85 	.word	0x08009c85
 8009c38:	08009c99 	.word	0x08009c99
 8009c3c:	08009ca3 	.word	0x08009ca3
 8009c40:	08009c8f 	.word	0x08009c8f
 8009c44:	08009ca3 	.word	0x08009ca3
 8009c48:	08009c67 	.word	0x08009c67
 8009c4c:	08009c5d 	.word	0x08009c5d
 8009c50:	08009ca3 	.word	0x08009ca3
 8009c54:	08009c7b 	.word	0x08009c7b
 8009c58:	08009c71 	.word	0x08009c71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f9dc 	bl	800a01c <USBD_GetDescriptor>
          break;
 8009c64:	e022      	b.n	8009cac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fb3f 	bl	800a2ec <USBD_SetAddress>
          break;
 8009c6e:	e01d      	b.n	8009cac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fb7e 	bl	800a374 <USBD_SetConfig>
          break;
 8009c78:	e018      	b.n	8009cac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fc07 	bl	800a490 <USBD_GetConfig>
          break;
 8009c82:	e013      	b.n	8009cac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fc37 	bl	800a4fa <USBD_GetStatus>
          break;
 8009c8c:	e00e      	b.n	8009cac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fc65 	bl	800a560 <USBD_SetFeature>
          break;
 8009c96:	e009      	b.n	8009cac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fc74 	bl	800a588 <USBD_ClrFeature>
          break;
 8009ca0:	e004      	b.n	8009cac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fccc 	bl	800a642 <USBD_CtlError>
          break;
 8009caa:	bf00      	nop
      }
      break;
 8009cac:	e004      	b.n	8009cb8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fcc6 	bl	800a642 <USBD_CtlError>
      break;
 8009cb6:	bf00      	nop
  }

  return ret;
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop

08009cc4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cda:	2b40      	cmp	r3, #64	; 0x40
 8009cdc:	d005      	beq.n	8009cea <USBD_StdItfReq+0x26>
 8009cde:	2b40      	cmp	r3, #64	; 0x40
 8009ce0:	d82e      	bhi.n	8009d40 <USBD_StdItfReq+0x7c>
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <USBD_StdItfReq+0x26>
 8009ce6:	2b20      	cmp	r3, #32
 8009ce8:	d12a      	bne.n	8009d40 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d81d      	bhi.n	8009d32 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	889b      	ldrh	r3, [r3, #4]
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d813      	bhi.n	8009d28 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
 8009d0e:	4603      	mov	r3, r0
 8009d10:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	88db      	ldrh	r3, [r3, #6]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d110      	bne.n	8009d3c <USBD_StdItfReq+0x78>
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10d      	bne.n	8009d3c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fd56 	bl	800a7d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d26:	e009      	b.n	8009d3c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fc89 	bl	800a642 <USBD_CtlError>
          break;
 8009d30:	e004      	b.n	8009d3c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fc84 	bl	800a642 <USBD_CtlError>
          break;
 8009d3a:	e000      	b.n	8009d3e <USBD_StdItfReq+0x7a>
          break;
 8009d3c:	bf00      	nop
      }
      break;
 8009d3e:	e004      	b.n	8009d4a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009d40:	6839      	ldr	r1, [r7, #0]
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fc7d 	bl	800a642 <USBD_CtlError>
      break;
 8009d48:	bf00      	nop
  }

  return USBD_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	889b      	ldrh	r3, [r3, #4]
 8009d66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d70:	2b40      	cmp	r3, #64	; 0x40
 8009d72:	d007      	beq.n	8009d84 <USBD_StdEPReq+0x30>
 8009d74:	2b40      	cmp	r3, #64	; 0x40
 8009d76:	f200 8146 	bhi.w	800a006 <USBD_StdEPReq+0x2b2>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <USBD_StdEPReq+0x40>
 8009d7e:	2b20      	cmp	r3, #32
 8009d80:	f040 8141 	bne.w	800a006 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	4798      	blx	r3
      break;
 8009d92:	e13d      	b.n	800a010 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d9c:	2b20      	cmp	r3, #32
 8009d9e:	d10a      	bne.n	8009db6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	4798      	blx	r3
 8009dae:	4603      	mov	r3, r0
 8009db0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	e12d      	b.n	800a012 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	785b      	ldrb	r3, [r3, #1]
 8009dba:	2b03      	cmp	r3, #3
 8009dbc:	d007      	beq.n	8009dce <USBD_StdEPReq+0x7a>
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	f300 811b 	bgt.w	8009ffa <USBD_StdEPReq+0x2a6>
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d072      	beq.n	8009eae <USBD_StdEPReq+0x15a>
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d03a      	beq.n	8009e42 <USBD_StdEPReq+0xee>
 8009dcc:	e115      	b.n	8009ffa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d002      	beq.n	8009dde <USBD_StdEPReq+0x8a>
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	d015      	beq.n	8009e08 <USBD_StdEPReq+0xb4>
 8009ddc:	e02b      	b.n	8009e36 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00c      	beq.n	8009dfe <USBD_StdEPReq+0xaa>
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	2b80      	cmp	r3, #128	; 0x80
 8009de8:	d009      	beq.n	8009dfe <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009dea:	7bbb      	ldrb	r3, [r7, #14]
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f001 f888 	bl	800af04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009df4:	2180      	movs	r1, #128	; 0x80
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f001 f884 	bl	800af04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009dfc:	e020      	b.n	8009e40 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fc1e 	bl	800a642 <USBD_CtlError>
              break;
 8009e06:	e01b      	b.n	8009e40 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	885b      	ldrh	r3, [r3, #2]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10e      	bne.n	8009e2e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009e10:	7bbb      	ldrb	r3, [r7, #14]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00b      	beq.n	8009e2e <USBD_StdEPReq+0xda>
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	2b80      	cmp	r3, #128	; 0x80
 8009e1a:	d008      	beq.n	8009e2e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	88db      	ldrh	r3, [r3, #6]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d104      	bne.n	8009e2e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009e24:	7bbb      	ldrb	r3, [r7, #14]
 8009e26:	4619      	mov	r1, r3
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f001 f86b 	bl	800af04 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fccf 	bl	800a7d2 <USBD_CtlSendStatus>

              break;
 8009e34:	e004      	b.n	8009e40 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fc02 	bl	800a642 <USBD_CtlError>
              break;
 8009e3e:	bf00      	nop
          }
          break;
 8009e40:	e0e0      	b.n	800a004 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d002      	beq.n	8009e52 <USBD_StdEPReq+0xfe>
 8009e4c:	2b03      	cmp	r3, #3
 8009e4e:	d015      	beq.n	8009e7c <USBD_StdEPReq+0x128>
 8009e50:	e026      	b.n	8009ea0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e52:	7bbb      	ldrb	r3, [r7, #14]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00c      	beq.n	8009e72 <USBD_StdEPReq+0x11e>
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
 8009e5a:	2b80      	cmp	r3, #128	; 0x80
 8009e5c:	d009      	beq.n	8009e72 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f001 f84e 	bl	800af04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009e68:	2180      	movs	r1, #128	; 0x80
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f001 f84a 	bl	800af04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e70:	e01c      	b.n	8009eac <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009e72:	6839      	ldr	r1, [r7, #0]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fbe4 	bl	800a642 <USBD_CtlError>
              break;
 8009e7a:	e017      	b.n	8009eac <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	885b      	ldrh	r3, [r3, #2]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d112      	bne.n	8009eaa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e84:	7bbb      	ldrb	r3, [r7, #14]
 8009e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d004      	beq.n	8009e98 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
 8009e90:	4619      	mov	r1, r3
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f001 f855 	bl	800af42 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fc9a 	bl	800a7d2 <USBD_CtlSendStatus>
              }
              break;
 8009e9e:	e004      	b.n	8009eaa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fbcd 	bl	800a642 <USBD_CtlError>
              break;
 8009ea8:	e000      	b.n	8009eac <USBD_StdEPReq+0x158>
              break;
 8009eaa:	bf00      	nop
          }
          break;
 8009eac:	e0aa      	b.n	800a004 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d002      	beq.n	8009ebe <USBD_StdEPReq+0x16a>
 8009eb8:	2b03      	cmp	r3, #3
 8009eba:	d032      	beq.n	8009f22 <USBD_StdEPReq+0x1ce>
 8009ebc:	e097      	b.n	8009fee <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d007      	beq.n	8009ed4 <USBD_StdEPReq+0x180>
 8009ec4:	7bbb      	ldrb	r3, [r7, #14]
 8009ec6:	2b80      	cmp	r3, #128	; 0x80
 8009ec8:	d004      	beq.n	8009ed4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fbb8 	bl	800a642 <USBD_CtlError>
                break;
 8009ed2:	e091      	b.n	8009ff8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	da0b      	bge.n	8009ef4 <USBD_StdEPReq+0x1a0>
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
 8009ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4413      	add	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	3310      	adds	r3, #16
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	4413      	add	r3, r2
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	e00b      	b.n	8009f0c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009efa:	4613      	mov	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4413      	add	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	4413      	add	r3, r2
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2200      	movs	r2, #0
 8009f12:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2202      	movs	r2, #2
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fbfb 	bl	800a716 <USBD_CtlSendData>
              break;
 8009f20:	e06a      	b.n	8009ff8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	da11      	bge.n	8009f4e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	f003 020f 	and.w	r2, r3, #15
 8009f30:	6879      	ldr	r1, [r7, #4]
 8009f32:	4613      	mov	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4413      	add	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	440b      	add	r3, r1
 8009f3c:	3318      	adds	r3, #24
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d117      	bne.n	8009f74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fb7b 	bl	800a642 <USBD_CtlError>
                  break;
 8009f4c:	e054      	b.n	8009ff8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
 8009f50:	f003 020f 	and.w	r2, r3, #15
 8009f54:	6879      	ldr	r1, [r7, #4]
 8009f56:	4613      	mov	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4413      	add	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	440b      	add	r3, r1
 8009f60:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d104      	bne.n	8009f74 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fb68 	bl	800a642 <USBD_CtlError>
                  break;
 8009f72:	e041      	b.n	8009ff8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	da0b      	bge.n	8009f94 <USBD_StdEPReq+0x240>
 8009f7c:	7bbb      	ldrb	r3, [r7, #14]
 8009f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f82:	4613      	mov	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4413      	add	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	3310      	adds	r3, #16
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	4413      	add	r3, r2
 8009f90:	3304      	adds	r3, #4
 8009f92:	e00b      	b.n	8009fac <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	4413      	add	r3, r2
 8009faa:	3304      	adds	r3, #4
 8009fac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009fae:	7bbb      	ldrb	r3, [r7, #14]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <USBD_StdEPReq+0x266>
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
 8009fb6:	2b80      	cmp	r3, #128	; 0x80
 8009fb8:	d103      	bne.n	8009fc2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]
 8009fc0:	e00e      	b.n	8009fe0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 ffda 	bl	800af80 <USBD_LL_IsStallEP>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	601a      	str	r2, [r3, #0]
 8009fd8:	e002      	b.n	8009fe0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fb95 	bl	800a716 <USBD_CtlSendData>
              break;
 8009fec:	e004      	b.n	8009ff8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fb26 	bl	800a642 <USBD_CtlError>
              break;
 8009ff6:	bf00      	nop
          }
          break;
 8009ff8:	e004      	b.n	800a004 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009ffa:	6839      	ldr	r1, [r7, #0]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fb20 	bl	800a642 <USBD_CtlError>
          break;
 800a002:	bf00      	nop
      }
      break;
 800a004:	e004      	b.n	800a010 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a006:	6839      	ldr	r1, [r7, #0]
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fb1a 	bl	800a642 <USBD_CtlError>
      break;
 800a00e:	bf00      	nop
  }

  return ret;
 800a010:	7bfb      	ldrb	r3, [r7, #15]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
	...

0800a01c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a026:	2300      	movs	r3, #0
 800a028:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a02a:	2300      	movs	r3, #0
 800a02c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a02e:	2300      	movs	r3, #0
 800a030:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	885b      	ldrh	r3, [r3, #2]
 800a036:	0a1b      	lsrs	r3, r3, #8
 800a038:	b29b      	uxth	r3, r3
 800a03a:	3b01      	subs	r3, #1
 800a03c:	2b06      	cmp	r3, #6
 800a03e:	f200 8128 	bhi.w	800a292 <USBD_GetDescriptor+0x276>
 800a042:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <USBD_GetDescriptor+0x2c>)
 800a044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a048:	0800a065 	.word	0x0800a065
 800a04c:	0800a07d 	.word	0x0800a07d
 800a050:	0800a0bd 	.word	0x0800a0bd
 800a054:	0800a293 	.word	0x0800a293
 800a058:	0800a293 	.word	0x0800a293
 800a05c:	0800a233 	.word	0x0800a233
 800a060:	0800a25f 	.word	0x0800a25f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	7c12      	ldrb	r2, [r2, #16]
 800a070:	f107 0108 	add.w	r1, r7, #8
 800a074:	4610      	mov	r0, r2
 800a076:	4798      	blx	r3
 800a078:	60f8      	str	r0, [r7, #12]
      break;
 800a07a:	e112      	b.n	800a2a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	7c1b      	ldrb	r3, [r3, #16]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10d      	bne.n	800a0a0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08c:	f107 0208 	add.w	r2, r7, #8
 800a090:	4610      	mov	r0, r2
 800a092:	4798      	blx	r3
 800a094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	3301      	adds	r3, #1
 800a09a:	2202      	movs	r2, #2
 800a09c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a09e:	e100      	b.n	800a2a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a8:	f107 0208 	add.w	r2, r7, #8
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	4798      	blx	r3
 800a0b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	701a      	strb	r2, [r3, #0]
      break;
 800a0ba:	e0f2      	b.n	800a2a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	885b      	ldrh	r3, [r3, #2]
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	2b05      	cmp	r3, #5
 800a0c4:	f200 80ac 	bhi.w	800a220 <USBD_GetDescriptor+0x204>
 800a0c8:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <USBD_GetDescriptor+0xb4>)
 800a0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ce:	bf00      	nop
 800a0d0:	0800a0e9 	.word	0x0800a0e9
 800a0d4:	0800a11d 	.word	0x0800a11d
 800a0d8:	0800a151 	.word	0x0800a151
 800a0dc:	0800a185 	.word	0x0800a185
 800a0e0:	0800a1b9 	.word	0x0800a1b9
 800a0e4:	0800a1ed 	.word	0x0800a1ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00b      	beq.n	800a10c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	7c12      	ldrb	r2, [r2, #16]
 800a100:	f107 0108 	add.w	r1, r7, #8
 800a104:	4610      	mov	r0, r2
 800a106:	4798      	blx	r3
 800a108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a10a:	e091      	b.n	800a230 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fa97 	bl	800a642 <USBD_CtlError>
            err++;
 800a114:	7afb      	ldrb	r3, [r7, #11]
 800a116:	3301      	adds	r3, #1
 800a118:	72fb      	strb	r3, [r7, #11]
          break;
 800a11a:	e089      	b.n	800a230 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00b      	beq.n	800a140 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	7c12      	ldrb	r2, [r2, #16]
 800a134:	f107 0108 	add.w	r1, r7, #8
 800a138:	4610      	mov	r0, r2
 800a13a:	4798      	blx	r3
 800a13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a13e:	e077      	b.n	800a230 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fa7d 	bl	800a642 <USBD_CtlError>
            err++;
 800a148:	7afb      	ldrb	r3, [r7, #11]
 800a14a:	3301      	adds	r3, #1
 800a14c:	72fb      	strb	r3, [r7, #11]
          break;
 800a14e:	e06f      	b.n	800a230 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	7c12      	ldrb	r2, [r2, #16]
 800a168:	f107 0108 	add.w	r1, r7, #8
 800a16c:	4610      	mov	r0, r2
 800a16e:	4798      	blx	r3
 800a170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a172:	e05d      	b.n	800a230 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa63 	bl	800a642 <USBD_CtlError>
            err++;
 800a17c:	7afb      	ldrb	r3, [r7, #11]
 800a17e:	3301      	adds	r3, #1
 800a180:	72fb      	strb	r3, [r7, #11]
          break;
 800a182:	e055      	b.n	800a230 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00b      	beq.n	800a1a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	7c12      	ldrb	r2, [r2, #16]
 800a19c:	f107 0108 	add.w	r1, r7, #8
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	4798      	blx	r3
 800a1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1a6:	e043      	b.n	800a230 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fa49 	bl	800a642 <USBD_CtlError>
            err++;
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1b6:	e03b      	b.n	800a230 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00b      	beq.n	800a1dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	7c12      	ldrb	r2, [r2, #16]
 800a1d0:	f107 0108 	add.w	r1, r7, #8
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	4798      	blx	r3
 800a1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1da:	e029      	b.n	800a230 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fa2f 	bl	800a642 <USBD_CtlError>
            err++;
 800a1e4:	7afb      	ldrb	r3, [r7, #11]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ea:	e021      	b.n	800a230 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00b      	beq.n	800a210 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1fe:	699b      	ldr	r3, [r3, #24]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	7c12      	ldrb	r2, [r2, #16]
 800a204:	f107 0108 	add.w	r1, r7, #8
 800a208:	4610      	mov	r0, r2
 800a20a:	4798      	blx	r3
 800a20c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a20e:	e00f      	b.n	800a230 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fa15 	bl	800a642 <USBD_CtlError>
            err++;
 800a218:	7afb      	ldrb	r3, [r7, #11]
 800a21a:	3301      	adds	r3, #1
 800a21c:	72fb      	strb	r3, [r7, #11]
          break;
 800a21e:	e007      	b.n	800a230 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fa0d 	bl	800a642 <USBD_CtlError>
          err++;
 800a228:	7afb      	ldrb	r3, [r7, #11]
 800a22a:	3301      	adds	r3, #1
 800a22c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a22e:	e038      	b.n	800a2a2 <USBD_GetDescriptor+0x286>
 800a230:	e037      	b.n	800a2a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	7c1b      	ldrb	r3, [r3, #16]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d109      	bne.n	800a24e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a242:	f107 0208 	add.w	r2, r7, #8
 800a246:	4610      	mov	r0, r2
 800a248:	4798      	blx	r3
 800a24a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a24c:	e029      	b.n	800a2a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f9f6 	bl	800a642 <USBD_CtlError>
        err++;
 800a256:	7afb      	ldrb	r3, [r7, #11]
 800a258:	3301      	adds	r3, #1
 800a25a:	72fb      	strb	r3, [r7, #11]
      break;
 800a25c:	e021      	b.n	800a2a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	7c1b      	ldrb	r3, [r3, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10d      	bne.n	800a282 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26e:	f107 0208 	add.w	r2, r7, #8
 800a272:	4610      	mov	r0, r2
 800a274:	4798      	blx	r3
 800a276:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3301      	adds	r3, #1
 800a27c:	2207      	movs	r2, #7
 800a27e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a280:	e00f      	b.n	800a2a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f9dc 	bl	800a642 <USBD_CtlError>
        err++;
 800a28a:	7afb      	ldrb	r3, [r7, #11]
 800a28c:	3301      	adds	r3, #1
 800a28e:	72fb      	strb	r3, [r7, #11]
      break;
 800a290:	e007      	b.n	800a2a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f9d4 	bl	800a642 <USBD_CtlError>
      err++;
 800a29a:	7afb      	ldrb	r3, [r7, #11]
 800a29c:	3301      	adds	r3, #1
 800a29e:	72fb      	strb	r3, [r7, #11]
      break;
 800a2a0:	bf00      	nop
  }

  if (err != 0U)
 800a2a2:	7afb      	ldrb	r3, [r7, #11]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d11c      	bne.n	800a2e2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a2a8:	893b      	ldrh	r3, [r7, #8]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d011      	beq.n	800a2d2 <USBD_GetDescriptor+0x2b6>
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	88db      	ldrh	r3, [r3, #6]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00d      	beq.n	800a2d2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	88da      	ldrh	r2, [r3, #6]
 800a2ba:	893b      	ldrh	r3, [r7, #8]
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	bf28      	it	cs
 800a2c0:	4613      	movcs	r3, r2
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2c6:	893b      	ldrh	r3, [r7, #8]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	68f9      	ldr	r1, [r7, #12]
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fa22 	bl	800a716 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	88db      	ldrh	r3, [r3, #6]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d104      	bne.n	800a2e4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fa79 	bl	800a7d2 <USBD_CtlSendStatus>
 800a2e0:	e000      	b.n	800a2e4 <USBD_GetDescriptor+0x2c8>
    return;
 800a2e2:	bf00      	nop
    }
  }
}
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop

0800a2ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	889b      	ldrh	r3, [r3, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d130      	bne.n	800a360 <USBD_SetAddress+0x74>
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	88db      	ldrh	r3, [r3, #6]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d12c      	bne.n	800a360 <USBD_SetAddress+0x74>
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	885b      	ldrh	r3, [r3, #2]
 800a30a:	2b7f      	cmp	r3, #127	; 0x7f
 800a30c:	d828      	bhi.n	800a360 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	885b      	ldrh	r3, [r3, #2]
 800a312:	b2db      	uxtb	r3, r3
 800a314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a318:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a320:	2b03      	cmp	r3, #3
 800a322:	d104      	bne.n	800a32e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f98b 	bl	800a642 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a32c:	e01d      	b.n	800a36a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	7bfa      	ldrb	r2, [r7, #15]
 800a332:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a336:	7bfb      	ldrb	r3, [r7, #15]
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fe4c 	bl	800afd8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fa46 	bl	800a7d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d004      	beq.n	800a356 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a354:	e009      	b.n	800a36a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a35e:	e004      	b.n	800a36a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a360:	6839      	ldr	r1, [r7, #0]
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f96d 	bl	800a642 <USBD_CtlError>
  }
}
 800a368:	bf00      	nop
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
	...

0800a374 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	885b      	ldrh	r3, [r3, #2]
 800a382:	b2da      	uxtb	r2, r3
 800a384:	4b41      	ldr	r3, [pc, #260]	; (800a48c <USBD_SetConfig+0x118>)
 800a386:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a388:	4b40      	ldr	r3, [pc, #256]	; (800a48c <USBD_SetConfig+0x118>)
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d904      	bls.n	800a39a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f955 	bl	800a642 <USBD_CtlError>
 800a398:	e075      	b.n	800a486 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d002      	beq.n	800a3aa <USBD_SetConfig+0x36>
 800a3a4:	2b03      	cmp	r3, #3
 800a3a6:	d023      	beq.n	800a3f0 <USBD_SetConfig+0x7c>
 800a3a8:	e062      	b.n	800a470 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a3aa:	4b38      	ldr	r3, [pc, #224]	; (800a48c <USBD_SetConfig+0x118>)
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d01a      	beq.n	800a3e8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a3b2:	4b36      	ldr	r3, [pc, #216]	; (800a48c <USBD_SetConfig+0x118>)
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2203      	movs	r2, #3
 800a3c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a3c4:	4b31      	ldr	r3, [pc, #196]	; (800a48c <USBD_SetConfig+0x118>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f7ff f9e7 	bl	800979e <USBD_SetClassConfig>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d104      	bne.n	800a3e0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f932 	bl	800a642 <USBD_CtlError>
            return;
 800a3de:	e052      	b.n	800a486 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f9f6 	bl	800a7d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a3e6:	e04e      	b.n	800a486 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f9f2 	bl	800a7d2 <USBD_CtlSendStatus>
        break;
 800a3ee:	e04a      	b.n	800a486 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a3f0:	4b26      	ldr	r3, [pc, #152]	; (800a48c <USBD_SetConfig+0x118>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d112      	bne.n	800a41e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a400:	4b22      	ldr	r3, [pc, #136]	; (800a48c <USBD_SetConfig+0x118>)
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	461a      	mov	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a40a:	4b20      	ldr	r3, [pc, #128]	; (800a48c <USBD_SetConfig+0x118>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	4619      	mov	r1, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f7ff f9e3 	bl	80097dc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f9db 	bl	800a7d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a41c:	e033      	b.n	800a486 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a41e:	4b1b      	ldr	r3, [pc, #108]	; (800a48c <USBD_SetConfig+0x118>)
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d01d      	beq.n	800a468 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	b2db      	uxtb	r3, r3
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7ff f9d1 	bl	80097dc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a43a:	4b14      	ldr	r3, [pc, #80]	; (800a48c <USBD_SetConfig+0x118>)
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	461a      	mov	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a444:	4b11      	ldr	r3, [pc, #68]	; (800a48c <USBD_SetConfig+0x118>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	4619      	mov	r1, r3
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff f9a7 	bl	800979e <USBD_SetClassConfig>
 800a450:	4603      	mov	r3, r0
 800a452:	2b02      	cmp	r3, #2
 800a454:	d104      	bne.n	800a460 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f8f2 	bl	800a642 <USBD_CtlError>
            return;
 800a45e:	e012      	b.n	800a486 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f9b6 	bl	800a7d2 <USBD_CtlSendStatus>
        break;
 800a466:	e00e      	b.n	800a486 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f9b2 	bl	800a7d2 <USBD_CtlSendStatus>
        break;
 800a46e:	e00a      	b.n	800a486 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a470:	6839      	ldr	r1, [r7, #0]
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f8e5 	bl	800a642 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a478:	4b04      	ldr	r3, [pc, #16]	; (800a48c <USBD_SetConfig+0x118>)
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	4619      	mov	r1, r3
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7ff f9ac 	bl	80097dc <USBD_ClrClassConfig>
        break;
 800a484:	bf00      	nop
    }
  }
}
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	20000290 	.word	0x20000290

0800a490 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	88db      	ldrh	r3, [r3, #6]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d004      	beq.n	800a4ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f8cc 	bl	800a642 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a4aa:	e022      	b.n	800a4f2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	dc02      	bgt.n	800a4bc <USBD_GetConfig+0x2c>
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	dc03      	bgt.n	800a4c2 <USBD_GetConfig+0x32>
 800a4ba:	e015      	b.n	800a4e8 <USBD_GetConfig+0x58>
 800a4bc:	2b03      	cmp	r3, #3
 800a4be:	d00b      	beq.n	800a4d8 <USBD_GetConfig+0x48>
 800a4c0:	e012      	b.n	800a4e8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	3308      	adds	r3, #8
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 f920 	bl	800a716 <USBD_CtlSendData>
        break;
 800a4d6:	e00c      	b.n	800a4f2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	2201      	movs	r2, #1
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f918 	bl	800a716 <USBD_CtlSendData>
        break;
 800a4e6:	e004      	b.n	800a4f2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a4e8:	6839      	ldr	r1, [r7, #0]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f8a9 	bl	800a642 <USBD_CtlError>
        break;
 800a4f0:	bf00      	nop
}
 800a4f2:	bf00      	nop
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b082      	sub	sp, #8
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a50a:	3b01      	subs	r3, #1
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d81e      	bhi.n	800a54e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	88db      	ldrh	r3, [r3, #6]
 800a514:	2b02      	cmp	r3, #2
 800a516:	d004      	beq.n	800a522 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f891 	bl	800a642 <USBD_CtlError>
        break;
 800a520:	e01a      	b.n	800a558 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2201      	movs	r2, #1
 800a526:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d005      	beq.n	800a53e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	f043 0202 	orr.w	r2, r3, #2
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	330c      	adds	r3, #12
 800a542:	2202      	movs	r2, #2
 800a544:	4619      	mov	r1, r3
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f8e5 	bl	800a716 <USBD_CtlSendData>
      break;
 800a54c:	e004      	b.n	800a558 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f876 	bl	800a642 <USBD_CtlError>
      break;
 800a556:	bf00      	nop
  }
}
 800a558:	bf00      	nop
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	885b      	ldrh	r3, [r3, #2]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d106      	bne.n	800a580 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2201      	movs	r2, #1
 800a576:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 f929 	bl	800a7d2 <USBD_CtlSendStatus>
  }
}
 800a580:	bf00      	nop
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a598:	3b01      	subs	r3, #1
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d80b      	bhi.n	800a5b6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	885b      	ldrh	r3, [r3, #2]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d10c      	bne.n	800a5c0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f90f 	bl	800a7d2 <USBD_CtlSendStatus>
      }
      break;
 800a5b4:	e004      	b.n	800a5c0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f842 	bl	800a642 <USBD_CtlError>
      break;
 800a5be:	e000      	b.n	800a5c2 <USBD_ClrFeature+0x3a>
      break;
 800a5c0:	bf00      	nop
  }
}
 800a5c2:	bf00      	nop
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b083      	sub	sp, #12
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	781a      	ldrb	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	785a      	ldrb	r2, [r3, #1]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	3302      	adds	r3, #2
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	3303      	adds	r3, #3
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	021b      	lsls	r3, r3, #8
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	4413      	add	r3, r2
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	3304      	adds	r3, #4
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	b29a      	uxth	r2, r3
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	3305      	adds	r3, #5
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	b29b      	uxth	r3, r3
 800a610:	021b      	lsls	r3, r3, #8
 800a612:	b29b      	uxth	r3, r3
 800a614:	4413      	add	r3, r2
 800a616:	b29a      	uxth	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	3306      	adds	r3, #6
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	b29a      	uxth	r2, r3
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	3307      	adds	r3, #7
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	021b      	lsls	r3, r3, #8
 800a62e:	b29b      	uxth	r3, r3
 800a630:	4413      	add	r3, r2
 800a632:	b29a      	uxth	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	80da      	strh	r2, [r3, #6]

}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bc80      	pop	{r7}
 800a640:	4770      	bx	lr

0800a642 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b082      	sub	sp, #8
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a64c:	2180      	movs	r1, #128	; 0x80
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fc58 	bl	800af04 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a654:	2100      	movs	r1, #0
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fc54 	bl	800af04 <USBD_LL_StallEP>
}
 800a65c:	bf00      	nop
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a670:	2300      	movs	r3, #0
 800a672:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d032      	beq.n	800a6e0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f000 f834 	bl	800a6e8 <USBD_GetLen>
 800a680:	4603      	mov	r3, r0
 800a682:	3301      	adds	r3, #1
 800a684:	b29b      	uxth	r3, r3
 800a686:	005b      	lsls	r3, r3, #1
 800a688:	b29a      	uxth	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a68e:	7dfb      	ldrb	r3, [r7, #23]
 800a690:	1c5a      	adds	r2, r3, #1
 800a692:	75fa      	strb	r2, [r7, #23]
 800a694:	461a      	mov	r2, r3
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	4413      	add	r3, r2
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	7812      	ldrb	r2, [r2, #0]
 800a69e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a6a0:	7dfb      	ldrb	r3, [r7, #23]
 800a6a2:	1c5a      	adds	r2, r3, #1
 800a6a4:	75fa      	strb	r2, [r7, #23]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	2203      	movs	r2, #3
 800a6ae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a6b0:	e012      	b.n	800a6d8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	1c5a      	adds	r2, r3, #1
 800a6b6:	60fa      	str	r2, [r7, #12]
 800a6b8:	7dfa      	ldrb	r2, [r7, #23]
 800a6ba:	1c51      	adds	r1, r2, #1
 800a6bc:	75f9      	strb	r1, [r7, #23]
 800a6be:	4611      	mov	r1, r2
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	440a      	add	r2, r1
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a6c8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ca:	1c5a      	adds	r2, r3, #1
 800a6cc:	75fa      	strb	r2, [r7, #23]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1e8      	bne.n	800a6b2 <USBD_GetString+0x4e>
    }
  }
}
 800a6e0:	bf00      	nop
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a6f4:	e005      	b.n	800a702 <USBD_GetLen+0x1a>
  {
    len++;
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	3301      	adds	r3, #1
 800a700:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1f5      	bne.n	800a6f6 <USBD_GetLen+0xe>
  }

  return len;
 800a70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	bc80      	pop	{r7}
 800a714:	4770      	bx	lr

0800a716 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	60f8      	str	r0, [r7, #12]
 800a71e:	60b9      	str	r1, [r7, #8]
 800a720:	4613      	mov	r3, r2
 800a722:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2202      	movs	r2, #2
 800a728:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a72c:	88fa      	ldrh	r2, [r7, #6]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a732:	88fa      	ldrh	r2, [r7, #6]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a738:	88fb      	ldrh	r3, [r7, #6]
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	2100      	movs	r1, #0
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f000 fc69 	bl	800b016 <USBD_LL_Transmit>

  return USBD_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b084      	sub	sp, #16
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	60b9      	str	r1, [r7, #8]
 800a758:	4613      	mov	r3, r2
 800a75a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a75c:	88fb      	ldrh	r3, [r7, #6]
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	2100      	movs	r1, #0
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f000 fc57 	bl	800b016 <USBD_LL_Transmit>

  return USBD_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b084      	sub	sp, #16
 800a776:	af00      	add	r7, sp, #0
 800a778:	60f8      	str	r0, [r7, #12]
 800a77a:	60b9      	str	r1, [r7, #8]
 800a77c:	4613      	mov	r3, r2
 800a77e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2203      	movs	r2, #3
 800a784:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a788:	88fa      	ldrh	r2, [r7, #6]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a790:	88fa      	ldrh	r2, [r7, #6]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a798:	88fb      	ldrh	r3, [r7, #6]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	2100      	movs	r1, #0
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 fc5c 	bl	800b05c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	60b9      	str	r1, [r7, #8]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7bc:	88fb      	ldrh	r3, [r7, #6]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f000 fc4a 	bl	800b05c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b082      	sub	sp, #8
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2204      	movs	r2, #4
 800a7de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fc14 	bl	800b016 <USBD_LL_Transmit>

  return USBD_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3708      	adds	r7, #8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2205      	movs	r2, #5
 800a804:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a808:	2300      	movs	r3, #0
 800a80a:	2200      	movs	r2, #0
 800a80c:	2100      	movs	r1, #0
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fc24 	bl	800b05c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a824:	2200      	movs	r2, #0
 800a826:	4912      	ldr	r1, [pc, #72]	; (800a870 <MX_USB_DEVICE_Init+0x50>)
 800a828:	4812      	ldr	r0, [pc, #72]	; (800a874 <MX_USB_DEVICE_Init+0x54>)
 800a82a:	f7fe ff5e 	bl	80096ea <USBD_Init>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a834:	f7f7 fe6a 	bl	800250c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a838:	490f      	ldr	r1, [pc, #60]	; (800a878 <MX_USB_DEVICE_Init+0x58>)
 800a83a:	480e      	ldr	r0, [pc, #56]	; (800a874 <MX_USB_DEVICE_Init+0x54>)
 800a83c:	f7fe ff80 	bl	8009740 <USBD_RegisterClass>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a846:	f7f7 fe61 	bl	800250c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a84a:	490c      	ldr	r1, [pc, #48]	; (800a87c <MX_USB_DEVICE_Init+0x5c>)
 800a84c:	4809      	ldr	r0, [pc, #36]	; (800a874 <MX_USB_DEVICE_Init+0x54>)
 800a84e:	f7fe feb1 	bl	80095b4 <USBD_CDC_RegisterInterface>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d001      	beq.n	800a85c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a858:	f7f7 fe58 	bl	800250c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a85c:	4805      	ldr	r0, [pc, #20]	; (800a874 <MX_USB_DEVICE_Init+0x54>)
 800a85e:	f7fe ff88 	bl	8009772 <USBD_Start>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d001      	beq.n	800a86c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a868:	f7f7 fe50 	bl	800250c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a86c:	bf00      	nop
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	20000150 	.word	0x20000150
 800a874:	20000a00 	.word	0x20000a00
 800a878:	2000003c 	.word	0x2000003c
 800a87c:	20000140 	.word	0x20000140

0800a880 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a884:	2200      	movs	r2, #0
 800a886:	4905      	ldr	r1, [pc, #20]	; (800a89c <CDC_Init_FS+0x1c>)
 800a888:	4805      	ldr	r0, [pc, #20]	; (800a8a0 <CDC_Init_FS+0x20>)
 800a88a:	f7fe fea9 	bl	80095e0 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a88e:	4905      	ldr	r1, [pc, #20]	; (800a8a4 <CDC_Init_FS+0x24>)
 800a890:	4803      	ldr	r0, [pc, #12]	; (800a8a0 <CDC_Init_FS+0x20>)
 800a892:	f7fe febe 	bl	8009612 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800a896:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a898:	4618      	mov	r0, r3
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	20000ec4 	.word	0x20000ec4
 800a8a0:	20000a00 	.word	0x20000a00
 800a8a4:	20000cc4 	.word	0x20000cc4

0800a8a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800a8ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bc80      	pop	{r7}
 800a8b4:	4770      	bx	lr
	...

0800a8b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	6039      	str	r1, [r7, #0]
 800a8c2:	71fb      	strb	r3, [r7, #7]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 800a8c8:	79fb      	ldrb	r3, [r7, #7]
 800a8ca:	2b23      	cmp	r3, #35	; 0x23
 800a8cc:	d84a      	bhi.n	800a964 <CDC_Control_FS+0xac>
 800a8ce:	a201      	add	r2, pc, #4	; (adr r2, 800a8d4 <CDC_Control_FS+0x1c>)
 800a8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d4:	0800a965 	.word	0x0800a965
 800a8d8:	0800a965 	.word	0x0800a965
 800a8dc:	0800a965 	.word	0x0800a965
 800a8e0:	0800a965 	.word	0x0800a965
 800a8e4:	0800a965 	.word	0x0800a965
 800a8e8:	0800a965 	.word	0x0800a965
 800a8ec:	0800a965 	.word	0x0800a965
 800a8f0:	0800a965 	.word	0x0800a965
 800a8f4:	0800a965 	.word	0x0800a965
 800a8f8:	0800a965 	.word	0x0800a965
 800a8fc:	0800a965 	.word	0x0800a965
 800a900:	0800a965 	.word	0x0800a965
 800a904:	0800a965 	.word	0x0800a965
 800a908:	0800a965 	.word	0x0800a965
 800a90c:	0800a965 	.word	0x0800a965
 800a910:	0800a965 	.word	0x0800a965
 800a914:	0800a965 	.word	0x0800a965
 800a918:	0800a965 	.word	0x0800a965
 800a91c:	0800a965 	.word	0x0800a965
 800a920:	0800a965 	.word	0x0800a965
 800a924:	0800a965 	.word	0x0800a965
 800a928:	0800a965 	.word	0x0800a965
 800a92c:	0800a965 	.word	0x0800a965
 800a930:	0800a965 	.word	0x0800a965
 800a934:	0800a965 	.word	0x0800a965
 800a938:	0800a965 	.word	0x0800a965
 800a93c:	0800a965 	.word	0x0800a965
 800a940:	0800a965 	.word	0x0800a965
 800a944:	0800a965 	.word	0x0800a965
 800a948:	0800a965 	.word	0x0800a965
 800a94c:	0800a965 	.word	0x0800a965
 800a950:	0800a965 	.word	0x0800a965
 800a954:	0800a965 	.word	0x0800a965
 800a958:	0800a965 	.word	0x0800a965
 800a95c:	0800a965 	.word	0x0800a965
 800a960:	0800a965 	.word	0x0800a965
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800a964:	bf00      	nop
	}

	return (USBD_OK);
 800a966:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a968:	4618      	mov	r0, r3
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bc80      	pop	{r7}
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop

0800a974 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	4807      	ldr	r0, [pc, #28]	; (800a9a0 <CDC_Receive_FS+0x2c>)
 800a982:	f7fe fe46 	bl	8009612 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a986:	4806      	ldr	r0, [pc, #24]	; (800a9a0 <CDC_Receive_FS+0x2c>)
 800a988:	f7fe fe85 	bl	8009696 <USBD_CDC_ReceivePacket>

	runCommands(Buf, Len);
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7f6 fd44 	bl	800141c <runCommands>
	return (USBD_OK);
 800a994:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a996:	4618      	mov	r0, r3
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	20000a00 	.word	0x20000a00

0800a9a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800a9b4:	4b0d      	ldr	r3, [pc, #52]	; (800a9ec <CDC_Transmit_FS+0x48>)
 800a9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ba:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e00b      	b.n	800a9e2 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a9ca:	887b      	ldrh	r3, [r7, #2]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	4806      	ldr	r0, [pc, #24]	; (800a9ec <CDC_Transmit_FS+0x48>)
 800a9d2:	f7fe fe05 	bl	80095e0 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a9d6:	4805      	ldr	r0, [pc, #20]	; (800a9ec <CDC_Transmit_FS+0x48>)
 800a9d8:	f7fe fe2e 	bl	8009638 <USBD_CDC_TransmitPacket>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20000a00 	.word	0x20000a00

0800a9f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	6039      	str	r1, [r7, #0]
 800a9fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	2212      	movs	r2, #18
 800aa00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa02:	4b03      	ldr	r3, [pc, #12]	; (800aa10 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bc80      	pop	{r7}
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	2000016c 	.word	0x2000016c

0800aa14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	6039      	str	r1, [r7, #0]
 800aa1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2204      	movs	r2, #4
 800aa24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa26:	4b03      	ldr	r3, [pc, #12]	; (800aa34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bc80      	pop	{r7}
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	20000180 	.word	0x20000180

0800aa38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	4603      	mov	r3, r0
 800aa40:	6039      	str	r1, [r7, #0]
 800aa42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa44:	79fb      	ldrb	r3, [r7, #7]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d105      	bne.n	800aa56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	4907      	ldr	r1, [pc, #28]	; (800aa6c <USBD_FS_ProductStrDescriptor+0x34>)
 800aa4e:	4808      	ldr	r0, [pc, #32]	; (800aa70 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa50:	f7ff fe08 	bl	800a664 <USBD_GetString>
 800aa54:	e004      	b.n	800aa60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	4904      	ldr	r1, [pc, #16]	; (800aa6c <USBD_FS_ProductStrDescriptor+0x34>)
 800aa5a:	4805      	ldr	r0, [pc, #20]	; (800aa70 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa5c:	f7ff fe02 	bl	800a664 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa60:	4b02      	ldr	r3, [pc, #8]	; (800aa6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	200010c4 	.word	0x200010c4
 800aa70:	0800c6f0 	.word	0x0800c6f0

0800aa74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	6039      	str	r1, [r7, #0]
 800aa7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	4904      	ldr	r1, [pc, #16]	; (800aa94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa84:	4804      	ldr	r0, [pc, #16]	; (800aa98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa86:	f7ff fded 	bl	800a664 <USBD_GetString>
  return USBD_StrDesc;
 800aa8a:	4b02      	ldr	r3, [pc, #8]	; (800aa94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	200010c4 	.word	0x200010c4
 800aa98:	0800c708 	.word	0x0800c708

0800aa9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	6039      	str	r1, [r7, #0]
 800aaa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	221a      	movs	r2, #26
 800aaac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aaae:	f000 f843 	bl	800ab38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aab2:	4b02      	ldr	r3, [pc, #8]	; (800aabc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	20000184 	.word	0x20000184

0800aac0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	4603      	mov	r3, r0
 800aac8:	6039      	str	r1, [r7, #0]
 800aaca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aacc:	79fb      	ldrb	r3, [r7, #7]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d105      	bne.n	800aade <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	4907      	ldr	r1, [pc, #28]	; (800aaf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aad6:	4808      	ldr	r0, [pc, #32]	; (800aaf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aad8:	f7ff fdc4 	bl	800a664 <USBD_GetString>
 800aadc:	e004      	b.n	800aae8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	4904      	ldr	r1, [pc, #16]	; (800aaf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aae2:	4805      	ldr	r0, [pc, #20]	; (800aaf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aae4:	f7ff fdbe 	bl	800a664 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aae8:	4b02      	ldr	r3, [pc, #8]	; (800aaf4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	200010c4 	.word	0x200010c4
 800aaf8:	0800c71c 	.word	0x0800c71c

0800aafc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	4603      	mov	r3, r0
 800ab04:	6039      	str	r1, [r7, #0]
 800ab06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab08:	79fb      	ldrb	r3, [r7, #7]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d105      	bne.n	800ab1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	4907      	ldr	r1, [pc, #28]	; (800ab30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab12:	4808      	ldr	r0, [pc, #32]	; (800ab34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab14:	f7ff fda6 	bl	800a664 <USBD_GetString>
 800ab18:	e004      	b.n	800ab24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	4904      	ldr	r1, [pc, #16]	; (800ab30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab1e:	4805      	ldr	r0, [pc, #20]	; (800ab34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab20:	f7ff fda0 	bl	800a664 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab24:	4b02      	ldr	r3, [pc, #8]	; (800ab30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	200010c4 	.word	0x200010c4
 800ab34:	0800c728 	.word	0x0800c728

0800ab38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab3e:	4b0f      	ldr	r3, [pc, #60]	; (800ab7c <Get_SerialNum+0x44>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab44:	4b0e      	ldr	r3, [pc, #56]	; (800ab80 <Get_SerialNum+0x48>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab4a:	4b0e      	ldr	r3, [pc, #56]	; (800ab84 <Get_SerialNum+0x4c>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4413      	add	r3, r2
 800ab56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d009      	beq.n	800ab72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab5e:	2208      	movs	r2, #8
 800ab60:	4909      	ldr	r1, [pc, #36]	; (800ab88 <Get_SerialNum+0x50>)
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f000 f814 	bl	800ab90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab68:	2204      	movs	r2, #4
 800ab6a:	4908      	ldr	r1, [pc, #32]	; (800ab8c <Get_SerialNum+0x54>)
 800ab6c:	68b8      	ldr	r0, [r7, #8]
 800ab6e:	f000 f80f 	bl	800ab90 <IntToUnicode>
  }
}
 800ab72:	bf00      	nop
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	1ffff7e8 	.word	0x1ffff7e8
 800ab80:	1ffff7ec 	.word	0x1ffff7ec
 800ab84:	1ffff7f0 	.word	0x1ffff7f0
 800ab88:	20000186 	.word	0x20000186
 800ab8c:	20000196 	.word	0x20000196

0800ab90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b087      	sub	sp, #28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aba2:	2300      	movs	r3, #0
 800aba4:	75fb      	strb	r3, [r7, #23]
 800aba6:	e027      	b.n	800abf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	0f1b      	lsrs	r3, r3, #28
 800abac:	2b09      	cmp	r3, #9
 800abae:	d80b      	bhi.n	800abc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	0f1b      	lsrs	r3, r3, #28
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	4619      	mov	r1, r3
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	440b      	add	r3, r1
 800abc0:	3230      	adds	r2, #48	; 0x30
 800abc2:	b2d2      	uxtb	r2, r2
 800abc4:	701a      	strb	r2, [r3, #0]
 800abc6:	e00a      	b.n	800abde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	0f1b      	lsrs	r3, r3, #28
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	7dfb      	ldrb	r3, [r7, #23]
 800abd0:	005b      	lsls	r3, r3, #1
 800abd2:	4619      	mov	r1, r3
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	440b      	add	r3, r1
 800abd8:	3237      	adds	r2, #55	; 0x37
 800abda:	b2d2      	uxtb	r2, r2
 800abdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	011b      	lsls	r3, r3, #4
 800abe2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800abe4:	7dfb      	ldrb	r3, [r7, #23]
 800abe6:	005b      	lsls	r3, r3, #1
 800abe8:	3301      	adds	r3, #1
 800abea:	68ba      	ldr	r2, [r7, #8]
 800abec:	4413      	add	r3, r2
 800abee:	2200      	movs	r2, #0
 800abf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800abf2:	7dfb      	ldrb	r3, [r7, #23]
 800abf4:	3301      	adds	r3, #1
 800abf6:	75fb      	strb	r3, [r7, #23]
 800abf8:	7dfa      	ldrb	r2, [r7, #23]
 800abfa:	79fb      	ldrb	r3, [r7, #7]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d3d3      	bcc.n	800aba8 <IntToUnicode+0x18>
  }
}
 800ac00:	bf00      	nop
 800ac02:	bf00      	nop
 800ac04:	371c      	adds	r7, #28
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bc80      	pop	{r7}
 800ac0a:	4770      	bx	lr

0800ac0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a0d      	ldr	r2, [pc, #52]	; (800ac50 <HAL_PCD_MspInit+0x44>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d113      	bne.n	800ac46 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ac1e:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <HAL_PCD_MspInit+0x48>)
 800ac20:	69db      	ldr	r3, [r3, #28]
 800ac22:	4a0c      	ldr	r2, [pc, #48]	; (800ac54 <HAL_PCD_MspInit+0x48>)
 800ac24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ac28:	61d3      	str	r3, [r2, #28]
 800ac2a:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <HAL_PCD_MspInit+0x48>)
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac32:	60fb      	str	r3, [r7, #12]
 800ac34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ac36:	2200      	movs	r2, #0
 800ac38:	2100      	movs	r1, #0
 800ac3a:	2014      	movs	r0, #20
 800ac3c:	f7f8 fcf1 	bl	8003622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ac40:	2014      	movs	r0, #20
 800ac42:	f7f8 fd0a 	bl	800365a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ac46:	bf00      	nop
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	40005c00 	.word	0x40005c00
 800ac54:	40021000 	.word	0x40021000

0800ac58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	4610      	mov	r0, r2
 800ac70:	f7fe fdc7 	bl	8009802 <USBD_LL_SetupStage>
}
 800ac74:	bf00      	nop
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ac8e:	78fa      	ldrb	r2, [r7, #3]
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	4613      	mov	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	00db      	lsls	r3, r3, #3
 800ac9a:	440b      	add	r3, r1
 800ac9c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	78fb      	ldrb	r3, [r7, #3]
 800aca4:	4619      	mov	r1, r3
 800aca6:	f7fe fdf9 	bl	800989c <USBD_LL_DataOutStage>
}
 800acaa:	bf00      	nop
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b082      	sub	sp, #8
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	460b      	mov	r3, r1
 800acbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800acc4:	78fa      	ldrb	r2, [r7, #3]
 800acc6:	6879      	ldr	r1, [r7, #4]
 800acc8:	4613      	mov	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	00db      	lsls	r3, r3, #3
 800acd0:	440b      	add	r3, r1
 800acd2:	333c      	adds	r3, #60	; 0x3c
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	78fb      	ldrb	r3, [r7, #3]
 800acd8:	4619      	mov	r1, r3
 800acda:	f7fe fe50 	bl	800997e <USBD_LL_DataInStage>
}
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b082      	sub	sp, #8
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fe ff60 	bl	8009bba <USBD_LL_SOF>
}
 800acfa:	bf00      	nop
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d001      	beq.n	800ad1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ad16:	f7f7 fbf9 	bl	800250c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad20:	7bfa      	ldrb	r2, [r7, #15]
 800ad22:	4611      	mov	r1, r2
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7fe ff10 	bl	8009b4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fe fec9 	bl	8009ac8 <USBD_LL_Reset>
}
 800ad36:	bf00      	nop
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
	...

0800ad40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe ff0a 	bl	8009b68 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	699b      	ldr	r3, [r3, #24]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d005      	beq.n	800ad68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad5c:	4b04      	ldr	r3, [pc, #16]	; (800ad70 <HAL_PCD_SuspendCallback+0x30>)
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	4a03      	ldr	r2, [pc, #12]	; (800ad70 <HAL_PCD_SuspendCallback+0x30>)
 800ad62:	f043 0306 	orr.w	r3, r3, #6
 800ad66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad68:	bf00      	nop
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	e000ed00 	.word	0xe000ed00

0800ad74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe ff04 	bl	8009b90 <USBD_LL_Resume>
}
 800ad88:	bf00      	nop
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ad98:	4a28      	ldr	r2, [pc, #160]	; (800ae3c <USBD_LL_Init+0xac>)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a26      	ldr	r2, [pc, #152]	; (800ae3c <USBD_LL_Init+0xac>)
 800ada4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ada8:	4b24      	ldr	r3, [pc, #144]	; (800ae3c <USBD_LL_Init+0xac>)
 800adaa:	4a25      	ldr	r2, [pc, #148]	; (800ae40 <USBD_LL_Init+0xb0>)
 800adac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800adae:	4b23      	ldr	r3, [pc, #140]	; (800ae3c <USBD_LL_Init+0xac>)
 800adb0:	2208      	movs	r2, #8
 800adb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800adb4:	4b21      	ldr	r3, [pc, #132]	; (800ae3c <USBD_LL_Init+0xac>)
 800adb6:	2202      	movs	r2, #2
 800adb8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800adba:	4b20      	ldr	r3, [pc, #128]	; (800ae3c <USBD_LL_Init+0xac>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800adc0:	4b1e      	ldr	r3, [pc, #120]	; (800ae3c <USBD_LL_Init+0xac>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800adc6:	4b1d      	ldr	r3, [pc, #116]	; (800ae3c <USBD_LL_Init+0xac>)
 800adc8:	2200      	movs	r2, #0
 800adca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800adcc:	481b      	ldr	r0, [pc, #108]	; (800ae3c <USBD_LL_Init+0xac>)
 800adce:	f7f9 f82e 	bl	8003e2e <HAL_PCD_Init>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d001      	beq.n	800addc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800add8:	f7f7 fb98 	bl	800250c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ade2:	2318      	movs	r3, #24
 800ade4:	2200      	movs	r2, #0
 800ade6:	2100      	movs	r1, #0
 800ade8:	f7fa fb70 	bl	80054cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adf2:	2358      	movs	r3, #88	; 0x58
 800adf4:	2200      	movs	r2, #0
 800adf6:	2180      	movs	r1, #128	; 0x80
 800adf8:	f7fa fb68 	bl	80054cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae02:	23c0      	movs	r3, #192	; 0xc0
 800ae04:	2200      	movs	r2, #0
 800ae06:	2181      	movs	r1, #129	; 0x81
 800ae08:	f7fa fb60 	bl	80054cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae12:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ae16:	2200      	movs	r2, #0
 800ae18:	2101      	movs	r1, #1
 800ae1a:	f7fa fb57 	bl	80054cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae28:	2200      	movs	r2, #0
 800ae2a:	2182      	movs	r1, #130	; 0x82
 800ae2c:	f7fa fb4e 	bl	80054cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	200012c4 	.word	0x200012c4
 800ae40:	40005c00 	.word	0x40005c00

0800ae44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7f9 f8f2 	bl	8004044 <HAL_PCD_Start>
 800ae60:	4603      	mov	r3, r0
 800ae62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 f94e 	bl	800b108 <USBD_Get_USB_Status>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	4608      	mov	r0, r1
 800ae84:	4611      	mov	r1, r2
 800ae86:	461a      	mov	r2, r3
 800ae88:	4603      	mov	r3, r0
 800ae8a:	70fb      	strb	r3, [r7, #3]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	70bb      	strb	r3, [r7, #2]
 800ae90:	4613      	mov	r3, r2
 800ae92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aea2:	78bb      	ldrb	r3, [r7, #2]
 800aea4:	883a      	ldrh	r2, [r7, #0]
 800aea6:	78f9      	ldrb	r1, [r7, #3]
 800aea8:	f7f9 fa6c 	bl	8004384 <HAL_PCD_EP_Open>
 800aeac:	4603      	mov	r3, r0
 800aeae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 f928 	bl	800b108 <USBD_Get_USB_Status>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	460b      	mov	r3, r1
 800aed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aee0:	78fa      	ldrb	r2, [r7, #3]
 800aee2:	4611      	mov	r1, r2
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7f9 fab3 	bl	8004450 <HAL_PCD_EP_Close>
 800aeea:	4603      	mov	r3, r0
 800aeec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 f909 	bl	800b108 <USBD_Get_USB_Status>
 800aef6:	4603      	mov	r3, r0
 800aef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aefa:	7bbb      	ldrb	r3, [r7, #14]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	460b      	mov	r3, r1
 800af0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af10:	2300      	movs	r3, #0
 800af12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af1e:	78fa      	ldrb	r2, [r7, #3]
 800af20:	4611      	mov	r1, r2
 800af22:	4618      	mov	r0, r3
 800af24:	f7f9 fb73 	bl	800460e <HAL_PCD_EP_SetStall>
 800af28:	4603      	mov	r3, r0
 800af2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 f8ea 	bl	800b108 <USBD_Get_USB_Status>
 800af34:	4603      	mov	r3, r0
 800af36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af38:	7bbb      	ldrb	r3, [r7, #14]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b084      	sub	sp, #16
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	460b      	mov	r3, r1
 800af4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af5c:	78fa      	ldrb	r2, [r7, #3]
 800af5e:	4611      	mov	r1, r2
 800af60:	4618      	mov	r0, r3
 800af62:	f7f9 fbb4 	bl	80046ce <HAL_PCD_EP_ClrStall>
 800af66:	4603      	mov	r3, r0
 800af68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
 800af6c:	4618      	mov	r0, r3
 800af6e:	f000 f8cb 	bl	800b108 <USBD_Get_USB_Status>
 800af72:	4603      	mov	r3, r0
 800af74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af76:	7bbb      	ldrb	r3, [r7, #14]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	da0c      	bge.n	800afb6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af9c:	78fb      	ldrb	r3, [r7, #3]
 800af9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afa2:	68f9      	ldr	r1, [r7, #12]
 800afa4:	1c5a      	adds	r2, r3, #1
 800afa6:	4613      	mov	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4413      	add	r3, r2
 800afac:	00db      	lsls	r3, r3, #3
 800afae:	440b      	add	r3, r1
 800afb0:	3302      	adds	r3, #2
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	e00b      	b.n	800afce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800afb6:	78fb      	ldrb	r3, [r7, #3]
 800afb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afbc:	68f9      	ldr	r1, [r7, #12]
 800afbe:	4613      	mov	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	00db      	lsls	r3, r3, #3
 800afc6:	440b      	add	r3, r1
 800afc8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800afcc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bc80      	pop	{r7}
 800afd6:	4770      	bx	lr

0800afd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	460b      	mov	r3, r1
 800afe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aff2:	78fa      	ldrb	r2, [r7, #3]
 800aff4:	4611      	mov	r1, r2
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7f9 f99f 	bl	800433a <HAL_PCD_SetAddress>
 800affc:	4603      	mov	r3, r0
 800affe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b000:	7bfb      	ldrb	r3, [r7, #15]
 800b002:	4618      	mov	r0, r3
 800b004:	f000 f880 	bl	800b108 <USBD_Get_USB_Status>
 800b008:	4603      	mov	r3, r0
 800b00a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b086      	sub	sp, #24
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	60f8      	str	r0, [r7, #12]
 800b01e:	607a      	str	r2, [r7, #4]
 800b020:	461a      	mov	r2, r3
 800b022:	460b      	mov	r3, r1
 800b024:	72fb      	strb	r3, [r7, #11]
 800b026:	4613      	mov	r3, r2
 800b028:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b02e:	2300      	movs	r3, #0
 800b030:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b038:	893b      	ldrh	r3, [r7, #8]
 800b03a:	7af9      	ldrb	r1, [r7, #11]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	f7f9 faa3 	bl	8004588 <HAL_PCD_EP_Transmit>
 800b042:	4603      	mov	r3, r0
 800b044:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b046:	7dfb      	ldrb	r3, [r7, #23]
 800b048:	4618      	mov	r0, r3
 800b04a:	f000 f85d 	bl	800b108 <USBD_Get_USB_Status>
 800b04e:	4603      	mov	r3, r0
 800b050:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b052:	7dbb      	ldrb	r3, [r7, #22]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3718      	adds	r7, #24
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	607a      	str	r2, [r7, #4]
 800b066:	461a      	mov	r2, r3
 800b068:	460b      	mov	r3, r1
 800b06a:	72fb      	strb	r3, [r7, #11]
 800b06c:	4613      	mov	r3, r2
 800b06e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b07e:	893b      	ldrh	r3, [r7, #8]
 800b080:	7af9      	ldrb	r1, [r7, #11]
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	f7f9 fa2c 	bl	80044e0 <HAL_PCD_EP_Receive>
 800b088:	4603      	mov	r3, r0
 800b08a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 f83a 	bl	800b108 <USBD_Get_USB_Status>
 800b094:	4603      	mov	r3, r0
 800b096:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b098:	7dbb      	ldrb	r3, [r7, #22]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3718      	adds	r7, #24
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b082      	sub	sp, #8
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0b4:	78fa      	ldrb	r2, [r7, #3]
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7f9 fa4e 	bl	800455a <HAL_PCD_EP_GetRxCount>
 800b0be:	4603      	mov	r3, r0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b0d0:	4b02      	ldr	r3, [pc, #8]	; (800b0dc <USBD_static_malloc+0x14>)
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bc80      	pop	{r7}
 800b0da:	4770      	bx	lr
 800b0dc:	20000294 	.word	0x20000294

0800b0e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]

}
 800b0e8:	bf00      	nop
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bc80      	pop	{r7}
 800b0f0:	4770      	bx	lr

0800b0f2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b0fe:	bf00      	nop
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	bc80      	pop	{r7}
 800b106:	4770      	bx	lr

0800b108 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	4603      	mov	r3, r0
 800b110:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b116:	79fb      	ldrb	r3, [r7, #7]
 800b118:	2b03      	cmp	r3, #3
 800b11a:	d817      	bhi.n	800b14c <USBD_Get_USB_Status+0x44>
 800b11c:	a201      	add	r2, pc, #4	; (adr r2, 800b124 <USBD_Get_USB_Status+0x1c>)
 800b11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b122:	bf00      	nop
 800b124:	0800b135 	.word	0x0800b135
 800b128:	0800b13b 	.word	0x0800b13b
 800b12c:	0800b141 	.word	0x0800b141
 800b130:	0800b147 	.word	0x0800b147
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	73fb      	strb	r3, [r7, #15]
    break;
 800b138:	e00b      	b.n	800b152 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b13a:	2302      	movs	r3, #2
 800b13c:	73fb      	strb	r3, [r7, #15]
    break;
 800b13e:	e008      	b.n	800b152 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b140:	2301      	movs	r3, #1
 800b142:	73fb      	strb	r3, [r7, #15]
    break;
 800b144:	e005      	b.n	800b152 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b146:	2302      	movs	r3, #2
 800b148:	73fb      	strb	r3, [r7, #15]
    break;
 800b14a:	e002      	b.n	800b152 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b14c:	2302      	movs	r3, #2
 800b14e:	73fb      	strb	r3, [r7, #15]
    break;
 800b150:	bf00      	nop
  }
  return usb_status;
 800b152:	7bfb      	ldrb	r3, [r7, #15]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	bc80      	pop	{r7}
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop

0800b160 <__errno>:
 800b160:	4b01      	ldr	r3, [pc, #4]	; (800b168 <__errno+0x8>)
 800b162:	6818      	ldr	r0, [r3, #0]
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	200001a0 	.word	0x200001a0

0800b16c <__libc_init_array>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	2600      	movs	r6, #0
 800b170:	4d0c      	ldr	r5, [pc, #48]	; (800b1a4 <__libc_init_array+0x38>)
 800b172:	4c0d      	ldr	r4, [pc, #52]	; (800b1a8 <__libc_init_array+0x3c>)
 800b174:	1b64      	subs	r4, r4, r5
 800b176:	10a4      	asrs	r4, r4, #2
 800b178:	42a6      	cmp	r6, r4
 800b17a:	d109      	bne.n	800b190 <__libc_init_array+0x24>
 800b17c:	f001 fa30 	bl	800c5e0 <_init>
 800b180:	2600      	movs	r6, #0
 800b182:	4d0a      	ldr	r5, [pc, #40]	; (800b1ac <__libc_init_array+0x40>)
 800b184:	4c0a      	ldr	r4, [pc, #40]	; (800b1b0 <__libc_init_array+0x44>)
 800b186:	1b64      	subs	r4, r4, r5
 800b188:	10a4      	asrs	r4, r4, #2
 800b18a:	42a6      	cmp	r6, r4
 800b18c:	d105      	bne.n	800b19a <__libc_init_array+0x2e>
 800b18e:	bd70      	pop	{r4, r5, r6, pc}
 800b190:	f855 3b04 	ldr.w	r3, [r5], #4
 800b194:	4798      	blx	r3
 800b196:	3601      	adds	r6, #1
 800b198:	e7ee      	b.n	800b178 <__libc_init_array+0xc>
 800b19a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b19e:	4798      	blx	r3
 800b1a0:	3601      	adds	r6, #1
 800b1a2:	e7f2      	b.n	800b18a <__libc_init_array+0x1e>
 800b1a4:	0800c810 	.word	0x0800c810
 800b1a8:	0800c810 	.word	0x0800c810
 800b1ac:	0800c810 	.word	0x0800c810
 800b1b0:	0800c814 	.word	0x0800c814

0800b1b4 <__itoa>:
 800b1b4:	1e93      	subs	r3, r2, #2
 800b1b6:	2b22      	cmp	r3, #34	; 0x22
 800b1b8:	b510      	push	{r4, lr}
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	d904      	bls.n	800b1c8 <__itoa+0x14>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	461c      	mov	r4, r3
 800b1c2:	700b      	strb	r3, [r1, #0]
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	bd10      	pop	{r4, pc}
 800b1c8:	2a0a      	cmp	r2, #10
 800b1ca:	d109      	bne.n	800b1e0 <__itoa+0x2c>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	da07      	bge.n	800b1e0 <__itoa+0x2c>
 800b1d0:	232d      	movs	r3, #45	; 0x2d
 800b1d2:	700b      	strb	r3, [r1, #0]
 800b1d4:	2101      	movs	r1, #1
 800b1d6:	4240      	negs	r0, r0
 800b1d8:	4421      	add	r1, r4
 800b1da:	f000 f853 	bl	800b284 <__utoa>
 800b1de:	e7f1      	b.n	800b1c4 <__itoa+0x10>
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	e7f9      	b.n	800b1d8 <__itoa+0x24>

0800b1e4 <itoa>:
 800b1e4:	f7ff bfe6 	b.w	800b1b4 <__itoa>

0800b1e8 <memcpy>:
 800b1e8:	440a      	add	r2, r1
 800b1ea:	4291      	cmp	r1, r2
 800b1ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1f0:	d100      	bne.n	800b1f4 <memcpy+0xc>
 800b1f2:	4770      	bx	lr
 800b1f4:	b510      	push	{r4, lr}
 800b1f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1fa:	4291      	cmp	r1, r2
 800b1fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b200:	d1f9      	bne.n	800b1f6 <memcpy+0xe>
 800b202:	bd10      	pop	{r4, pc}

0800b204 <memset>:
 800b204:	4603      	mov	r3, r0
 800b206:	4402      	add	r2, r0
 800b208:	4293      	cmp	r3, r2
 800b20a:	d100      	bne.n	800b20e <memset+0xa>
 800b20c:	4770      	bx	lr
 800b20e:	f803 1b01 	strb.w	r1, [r3], #1
 800b212:	e7f9      	b.n	800b208 <memset+0x4>

0800b214 <iprintf>:
 800b214:	b40f      	push	{r0, r1, r2, r3}
 800b216:	4b0a      	ldr	r3, [pc, #40]	; (800b240 <iprintf+0x2c>)
 800b218:	b513      	push	{r0, r1, r4, lr}
 800b21a:	681c      	ldr	r4, [r3, #0]
 800b21c:	b124      	cbz	r4, 800b228 <iprintf+0x14>
 800b21e:	69a3      	ldr	r3, [r4, #24]
 800b220:	b913      	cbnz	r3, 800b228 <iprintf+0x14>
 800b222:	4620      	mov	r0, r4
 800b224:	f000 f8c8 	bl	800b3b8 <__sinit>
 800b228:	ab05      	add	r3, sp, #20
 800b22a:	4620      	mov	r0, r4
 800b22c:	9a04      	ldr	r2, [sp, #16]
 800b22e:	68a1      	ldr	r1, [r4, #8]
 800b230:	9301      	str	r3, [sp, #4]
 800b232:	f000 fb3f 	bl	800b8b4 <_vfiprintf_r>
 800b236:	b002      	add	sp, #8
 800b238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b23c:	b004      	add	sp, #16
 800b23e:	4770      	bx	lr
 800b240:	200001a0 	.word	0x200001a0

0800b244 <siprintf>:
 800b244:	b40e      	push	{r1, r2, r3}
 800b246:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b24a:	b500      	push	{lr}
 800b24c:	b09c      	sub	sp, #112	; 0x70
 800b24e:	ab1d      	add	r3, sp, #116	; 0x74
 800b250:	9002      	str	r0, [sp, #8]
 800b252:	9006      	str	r0, [sp, #24]
 800b254:	9107      	str	r1, [sp, #28]
 800b256:	9104      	str	r1, [sp, #16]
 800b258:	4808      	ldr	r0, [pc, #32]	; (800b27c <siprintf+0x38>)
 800b25a:	4909      	ldr	r1, [pc, #36]	; (800b280 <siprintf+0x3c>)
 800b25c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b260:	9105      	str	r1, [sp, #20]
 800b262:	6800      	ldr	r0, [r0, #0]
 800b264:	a902      	add	r1, sp, #8
 800b266:	9301      	str	r3, [sp, #4]
 800b268:	f000 f9fc 	bl	800b664 <_svfiprintf_r>
 800b26c:	2200      	movs	r2, #0
 800b26e:	9b02      	ldr	r3, [sp, #8]
 800b270:	701a      	strb	r2, [r3, #0]
 800b272:	b01c      	add	sp, #112	; 0x70
 800b274:	f85d eb04 	ldr.w	lr, [sp], #4
 800b278:	b003      	add	sp, #12
 800b27a:	4770      	bx	lr
 800b27c:	200001a0 	.word	0x200001a0
 800b280:	ffff0208 	.word	0xffff0208

0800b284 <__utoa>:
 800b284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b286:	b08b      	sub	sp, #44	; 0x2c
 800b288:	4605      	mov	r5, r0
 800b28a:	460b      	mov	r3, r1
 800b28c:	466e      	mov	r6, sp
 800b28e:	4c1d      	ldr	r4, [pc, #116]	; (800b304 <__utoa+0x80>)
 800b290:	f104 0c20 	add.w	ip, r4, #32
 800b294:	4637      	mov	r7, r6
 800b296:	6820      	ldr	r0, [r4, #0]
 800b298:	6861      	ldr	r1, [r4, #4]
 800b29a:	3408      	adds	r4, #8
 800b29c:	c703      	stmia	r7!, {r0, r1}
 800b29e:	4564      	cmp	r4, ip
 800b2a0:	463e      	mov	r6, r7
 800b2a2:	d1f7      	bne.n	800b294 <__utoa+0x10>
 800b2a4:	7921      	ldrb	r1, [r4, #4]
 800b2a6:	6820      	ldr	r0, [r4, #0]
 800b2a8:	7139      	strb	r1, [r7, #4]
 800b2aa:	1e91      	subs	r1, r2, #2
 800b2ac:	2922      	cmp	r1, #34	; 0x22
 800b2ae:	6038      	str	r0, [r7, #0]
 800b2b0:	f04f 0100 	mov.w	r1, #0
 800b2b4:	d904      	bls.n	800b2c0 <__utoa+0x3c>
 800b2b6:	7019      	strb	r1, [r3, #0]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	b00b      	add	sp, #44	; 0x2c
 800b2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2c0:	1e58      	subs	r0, r3, #1
 800b2c2:	4684      	mov	ip, r0
 800b2c4:	fbb5 f7f2 	udiv	r7, r5, r2
 800b2c8:	fb02 5617 	mls	r6, r2, r7, r5
 800b2cc:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800b2d0:	4476      	add	r6, lr
 800b2d2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b2dc:	462e      	mov	r6, r5
 800b2de:	42b2      	cmp	r2, r6
 800b2e0:	463d      	mov	r5, r7
 800b2e2:	f101 0101 	add.w	r1, r1, #1
 800b2e6:	d9ed      	bls.n	800b2c4 <__utoa+0x40>
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	545a      	strb	r2, [r3, r1]
 800b2ec:	1919      	adds	r1, r3, r4
 800b2ee:	1aa5      	subs	r5, r4, r2
 800b2f0:	42aa      	cmp	r2, r5
 800b2f2:	dae2      	bge.n	800b2ba <__utoa+0x36>
 800b2f4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b2f8:	780e      	ldrb	r6, [r1, #0]
 800b2fa:	3201      	adds	r2, #1
 800b2fc:	7006      	strb	r6, [r0, #0]
 800b2fe:	f801 5901 	strb.w	r5, [r1], #-1
 800b302:	e7f4      	b.n	800b2ee <__utoa+0x6a>
 800b304:	0800c754 	.word	0x0800c754

0800b308 <std>:
 800b308:	2300      	movs	r3, #0
 800b30a:	b510      	push	{r4, lr}
 800b30c:	4604      	mov	r4, r0
 800b30e:	e9c0 3300 	strd	r3, r3, [r0]
 800b312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b316:	6083      	str	r3, [r0, #8]
 800b318:	8181      	strh	r1, [r0, #12]
 800b31a:	6643      	str	r3, [r0, #100]	; 0x64
 800b31c:	81c2      	strh	r2, [r0, #14]
 800b31e:	6183      	str	r3, [r0, #24]
 800b320:	4619      	mov	r1, r3
 800b322:	2208      	movs	r2, #8
 800b324:	305c      	adds	r0, #92	; 0x5c
 800b326:	f7ff ff6d 	bl	800b204 <memset>
 800b32a:	4b05      	ldr	r3, [pc, #20]	; (800b340 <std+0x38>)
 800b32c:	6224      	str	r4, [r4, #32]
 800b32e:	6263      	str	r3, [r4, #36]	; 0x24
 800b330:	4b04      	ldr	r3, [pc, #16]	; (800b344 <std+0x3c>)
 800b332:	62a3      	str	r3, [r4, #40]	; 0x28
 800b334:	4b04      	ldr	r3, [pc, #16]	; (800b348 <std+0x40>)
 800b336:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b338:	4b04      	ldr	r3, [pc, #16]	; (800b34c <std+0x44>)
 800b33a:	6323      	str	r3, [r4, #48]	; 0x30
 800b33c:	bd10      	pop	{r4, pc}
 800b33e:	bf00      	nop
 800b340:	0800be61 	.word	0x0800be61
 800b344:	0800be83 	.word	0x0800be83
 800b348:	0800bebb 	.word	0x0800bebb
 800b34c:	0800bedf 	.word	0x0800bedf

0800b350 <_cleanup_r>:
 800b350:	4901      	ldr	r1, [pc, #4]	; (800b358 <_cleanup_r+0x8>)
 800b352:	f000 b8af 	b.w	800b4b4 <_fwalk_reent>
 800b356:	bf00      	nop
 800b358:	0800c1b9 	.word	0x0800c1b9

0800b35c <__sfmoreglue>:
 800b35c:	b570      	push	{r4, r5, r6, lr}
 800b35e:	2568      	movs	r5, #104	; 0x68
 800b360:	1e4a      	subs	r2, r1, #1
 800b362:	4355      	muls	r5, r2
 800b364:	460e      	mov	r6, r1
 800b366:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b36a:	f000 f8c5 	bl	800b4f8 <_malloc_r>
 800b36e:	4604      	mov	r4, r0
 800b370:	b140      	cbz	r0, 800b384 <__sfmoreglue+0x28>
 800b372:	2100      	movs	r1, #0
 800b374:	e9c0 1600 	strd	r1, r6, [r0]
 800b378:	300c      	adds	r0, #12
 800b37a:	60a0      	str	r0, [r4, #8]
 800b37c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b380:	f7ff ff40 	bl	800b204 <memset>
 800b384:	4620      	mov	r0, r4
 800b386:	bd70      	pop	{r4, r5, r6, pc}

0800b388 <__sfp_lock_acquire>:
 800b388:	4801      	ldr	r0, [pc, #4]	; (800b390 <__sfp_lock_acquire+0x8>)
 800b38a:	f000 b8b3 	b.w	800b4f4 <__retarget_lock_acquire_recursive>
 800b38e:	bf00      	nop
 800b390:	200015b8 	.word	0x200015b8

0800b394 <__sfp_lock_release>:
 800b394:	4801      	ldr	r0, [pc, #4]	; (800b39c <__sfp_lock_release+0x8>)
 800b396:	f000 b8ae 	b.w	800b4f6 <__retarget_lock_release_recursive>
 800b39a:	bf00      	nop
 800b39c:	200015b8 	.word	0x200015b8

0800b3a0 <__sinit_lock_acquire>:
 800b3a0:	4801      	ldr	r0, [pc, #4]	; (800b3a8 <__sinit_lock_acquire+0x8>)
 800b3a2:	f000 b8a7 	b.w	800b4f4 <__retarget_lock_acquire_recursive>
 800b3a6:	bf00      	nop
 800b3a8:	200015b3 	.word	0x200015b3

0800b3ac <__sinit_lock_release>:
 800b3ac:	4801      	ldr	r0, [pc, #4]	; (800b3b4 <__sinit_lock_release+0x8>)
 800b3ae:	f000 b8a2 	b.w	800b4f6 <__retarget_lock_release_recursive>
 800b3b2:	bf00      	nop
 800b3b4:	200015b3 	.word	0x200015b3

0800b3b8 <__sinit>:
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	f7ff fff0 	bl	800b3a0 <__sinit_lock_acquire>
 800b3c0:	69a3      	ldr	r3, [r4, #24]
 800b3c2:	b11b      	cbz	r3, 800b3cc <__sinit+0x14>
 800b3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c8:	f7ff bff0 	b.w	800b3ac <__sinit_lock_release>
 800b3cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3d0:	6523      	str	r3, [r4, #80]	; 0x50
 800b3d2:	4b13      	ldr	r3, [pc, #76]	; (800b420 <__sinit+0x68>)
 800b3d4:	4a13      	ldr	r2, [pc, #76]	; (800b424 <__sinit+0x6c>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3da:	42a3      	cmp	r3, r4
 800b3dc:	bf08      	it	eq
 800b3de:	2301      	moveq	r3, #1
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	bf08      	it	eq
 800b3e4:	61a3      	streq	r3, [r4, #24]
 800b3e6:	f000 f81f 	bl	800b428 <__sfp>
 800b3ea:	6060      	str	r0, [r4, #4]
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f000 f81b 	bl	800b428 <__sfp>
 800b3f2:	60a0      	str	r0, [r4, #8]
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f000 f817 	bl	800b428 <__sfp>
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	2104      	movs	r1, #4
 800b3fe:	60e0      	str	r0, [r4, #12]
 800b400:	6860      	ldr	r0, [r4, #4]
 800b402:	f7ff ff81 	bl	800b308 <std>
 800b406:	2201      	movs	r2, #1
 800b408:	2109      	movs	r1, #9
 800b40a:	68a0      	ldr	r0, [r4, #8]
 800b40c:	f7ff ff7c 	bl	800b308 <std>
 800b410:	2202      	movs	r2, #2
 800b412:	2112      	movs	r1, #18
 800b414:	68e0      	ldr	r0, [r4, #12]
 800b416:	f7ff ff77 	bl	800b308 <std>
 800b41a:	2301      	movs	r3, #1
 800b41c:	61a3      	str	r3, [r4, #24]
 800b41e:	e7d1      	b.n	800b3c4 <__sinit+0xc>
 800b420:	0800c750 	.word	0x0800c750
 800b424:	0800b351 	.word	0x0800b351

0800b428 <__sfp>:
 800b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42a:	4607      	mov	r7, r0
 800b42c:	f7ff ffac 	bl	800b388 <__sfp_lock_acquire>
 800b430:	4b1e      	ldr	r3, [pc, #120]	; (800b4ac <__sfp+0x84>)
 800b432:	681e      	ldr	r6, [r3, #0]
 800b434:	69b3      	ldr	r3, [r6, #24]
 800b436:	b913      	cbnz	r3, 800b43e <__sfp+0x16>
 800b438:	4630      	mov	r0, r6
 800b43a:	f7ff ffbd 	bl	800b3b8 <__sinit>
 800b43e:	3648      	adds	r6, #72	; 0x48
 800b440:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b444:	3b01      	subs	r3, #1
 800b446:	d503      	bpl.n	800b450 <__sfp+0x28>
 800b448:	6833      	ldr	r3, [r6, #0]
 800b44a:	b30b      	cbz	r3, 800b490 <__sfp+0x68>
 800b44c:	6836      	ldr	r6, [r6, #0]
 800b44e:	e7f7      	b.n	800b440 <__sfp+0x18>
 800b450:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b454:	b9d5      	cbnz	r5, 800b48c <__sfp+0x64>
 800b456:	4b16      	ldr	r3, [pc, #88]	; (800b4b0 <__sfp+0x88>)
 800b458:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b45c:	60e3      	str	r3, [r4, #12]
 800b45e:	6665      	str	r5, [r4, #100]	; 0x64
 800b460:	f000 f847 	bl	800b4f2 <__retarget_lock_init_recursive>
 800b464:	f7ff ff96 	bl	800b394 <__sfp_lock_release>
 800b468:	2208      	movs	r2, #8
 800b46a:	4629      	mov	r1, r5
 800b46c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b470:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b474:	6025      	str	r5, [r4, #0]
 800b476:	61a5      	str	r5, [r4, #24]
 800b478:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b47c:	f7ff fec2 	bl	800b204 <memset>
 800b480:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b484:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b488:	4620      	mov	r0, r4
 800b48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b48c:	3468      	adds	r4, #104	; 0x68
 800b48e:	e7d9      	b.n	800b444 <__sfp+0x1c>
 800b490:	2104      	movs	r1, #4
 800b492:	4638      	mov	r0, r7
 800b494:	f7ff ff62 	bl	800b35c <__sfmoreglue>
 800b498:	4604      	mov	r4, r0
 800b49a:	6030      	str	r0, [r6, #0]
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d1d5      	bne.n	800b44c <__sfp+0x24>
 800b4a0:	f7ff ff78 	bl	800b394 <__sfp_lock_release>
 800b4a4:	230c      	movs	r3, #12
 800b4a6:	603b      	str	r3, [r7, #0]
 800b4a8:	e7ee      	b.n	800b488 <__sfp+0x60>
 800b4aa:	bf00      	nop
 800b4ac:	0800c750 	.word	0x0800c750
 800b4b0:	ffff0001 	.word	0xffff0001

0800b4b4 <_fwalk_reent>:
 800b4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b8:	4606      	mov	r6, r0
 800b4ba:	4688      	mov	r8, r1
 800b4bc:	2700      	movs	r7, #0
 800b4be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4c6:	f1b9 0901 	subs.w	r9, r9, #1
 800b4ca:	d505      	bpl.n	800b4d8 <_fwalk_reent+0x24>
 800b4cc:	6824      	ldr	r4, [r4, #0]
 800b4ce:	2c00      	cmp	r4, #0
 800b4d0:	d1f7      	bne.n	800b4c2 <_fwalk_reent+0xe>
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4d8:	89ab      	ldrh	r3, [r5, #12]
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d907      	bls.n	800b4ee <_fwalk_reent+0x3a>
 800b4de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	d003      	beq.n	800b4ee <_fwalk_reent+0x3a>
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	47c0      	blx	r8
 800b4ec:	4307      	orrs	r7, r0
 800b4ee:	3568      	adds	r5, #104	; 0x68
 800b4f0:	e7e9      	b.n	800b4c6 <_fwalk_reent+0x12>

0800b4f2 <__retarget_lock_init_recursive>:
 800b4f2:	4770      	bx	lr

0800b4f4 <__retarget_lock_acquire_recursive>:
 800b4f4:	4770      	bx	lr

0800b4f6 <__retarget_lock_release_recursive>:
 800b4f6:	4770      	bx	lr

0800b4f8 <_malloc_r>:
 800b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fa:	1ccd      	adds	r5, r1, #3
 800b4fc:	f025 0503 	bic.w	r5, r5, #3
 800b500:	3508      	adds	r5, #8
 800b502:	2d0c      	cmp	r5, #12
 800b504:	bf38      	it	cc
 800b506:	250c      	movcc	r5, #12
 800b508:	2d00      	cmp	r5, #0
 800b50a:	4606      	mov	r6, r0
 800b50c:	db01      	blt.n	800b512 <_malloc_r+0x1a>
 800b50e:	42a9      	cmp	r1, r5
 800b510:	d903      	bls.n	800b51a <_malloc_r+0x22>
 800b512:	230c      	movs	r3, #12
 800b514:	6033      	str	r3, [r6, #0]
 800b516:	2000      	movs	r0, #0
 800b518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b51a:	f000 ff27 	bl	800c36c <__malloc_lock>
 800b51e:	4921      	ldr	r1, [pc, #132]	; (800b5a4 <_malloc_r+0xac>)
 800b520:	680a      	ldr	r2, [r1, #0]
 800b522:	4614      	mov	r4, r2
 800b524:	b99c      	cbnz	r4, 800b54e <_malloc_r+0x56>
 800b526:	4f20      	ldr	r7, [pc, #128]	; (800b5a8 <_malloc_r+0xb0>)
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	b923      	cbnz	r3, 800b536 <_malloc_r+0x3e>
 800b52c:	4621      	mov	r1, r4
 800b52e:	4630      	mov	r0, r6
 800b530:	f000 fc86 	bl	800be40 <_sbrk_r>
 800b534:	6038      	str	r0, [r7, #0]
 800b536:	4629      	mov	r1, r5
 800b538:	4630      	mov	r0, r6
 800b53a:	f000 fc81 	bl	800be40 <_sbrk_r>
 800b53e:	1c43      	adds	r3, r0, #1
 800b540:	d123      	bne.n	800b58a <_malloc_r+0x92>
 800b542:	230c      	movs	r3, #12
 800b544:	4630      	mov	r0, r6
 800b546:	6033      	str	r3, [r6, #0]
 800b548:	f000 ff16 	bl	800c378 <__malloc_unlock>
 800b54c:	e7e3      	b.n	800b516 <_malloc_r+0x1e>
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	1b5b      	subs	r3, r3, r5
 800b552:	d417      	bmi.n	800b584 <_malloc_r+0x8c>
 800b554:	2b0b      	cmp	r3, #11
 800b556:	d903      	bls.n	800b560 <_malloc_r+0x68>
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	441c      	add	r4, r3
 800b55c:	6025      	str	r5, [r4, #0]
 800b55e:	e004      	b.n	800b56a <_malloc_r+0x72>
 800b560:	6863      	ldr	r3, [r4, #4]
 800b562:	42a2      	cmp	r2, r4
 800b564:	bf0c      	ite	eq
 800b566:	600b      	streq	r3, [r1, #0]
 800b568:	6053      	strne	r3, [r2, #4]
 800b56a:	4630      	mov	r0, r6
 800b56c:	f000 ff04 	bl	800c378 <__malloc_unlock>
 800b570:	f104 000b 	add.w	r0, r4, #11
 800b574:	1d23      	adds	r3, r4, #4
 800b576:	f020 0007 	bic.w	r0, r0, #7
 800b57a:	1ac2      	subs	r2, r0, r3
 800b57c:	d0cc      	beq.n	800b518 <_malloc_r+0x20>
 800b57e:	1a1b      	subs	r3, r3, r0
 800b580:	50a3      	str	r3, [r4, r2]
 800b582:	e7c9      	b.n	800b518 <_malloc_r+0x20>
 800b584:	4622      	mov	r2, r4
 800b586:	6864      	ldr	r4, [r4, #4]
 800b588:	e7cc      	b.n	800b524 <_malloc_r+0x2c>
 800b58a:	1cc4      	adds	r4, r0, #3
 800b58c:	f024 0403 	bic.w	r4, r4, #3
 800b590:	42a0      	cmp	r0, r4
 800b592:	d0e3      	beq.n	800b55c <_malloc_r+0x64>
 800b594:	1a21      	subs	r1, r4, r0
 800b596:	4630      	mov	r0, r6
 800b598:	f000 fc52 	bl	800be40 <_sbrk_r>
 800b59c:	3001      	adds	r0, #1
 800b59e:	d1dd      	bne.n	800b55c <_malloc_r+0x64>
 800b5a0:	e7cf      	b.n	800b542 <_malloc_r+0x4a>
 800b5a2:	bf00      	nop
 800b5a4:	200004b4 	.word	0x200004b4
 800b5a8:	200004b8 	.word	0x200004b8

0800b5ac <__ssputs_r>:
 800b5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b0:	688e      	ldr	r6, [r1, #8]
 800b5b2:	4682      	mov	sl, r0
 800b5b4:	429e      	cmp	r6, r3
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	4690      	mov	r8, r2
 800b5ba:	461f      	mov	r7, r3
 800b5bc:	d838      	bhi.n	800b630 <__ssputs_r+0x84>
 800b5be:	898a      	ldrh	r2, [r1, #12]
 800b5c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5c4:	d032      	beq.n	800b62c <__ssputs_r+0x80>
 800b5c6:	6825      	ldr	r5, [r4, #0]
 800b5c8:	6909      	ldr	r1, [r1, #16]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	eba5 0901 	sub.w	r9, r5, r1
 800b5d0:	6965      	ldr	r5, [r4, #20]
 800b5d2:	444b      	add	r3, r9
 800b5d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5dc:	106d      	asrs	r5, r5, #1
 800b5de:	429d      	cmp	r5, r3
 800b5e0:	bf38      	it	cc
 800b5e2:	461d      	movcc	r5, r3
 800b5e4:	0553      	lsls	r3, r2, #21
 800b5e6:	d531      	bpl.n	800b64c <__ssputs_r+0xa0>
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	f7ff ff85 	bl	800b4f8 <_malloc_r>
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	b950      	cbnz	r0, 800b608 <__ssputs_r+0x5c>
 800b5f2:	230c      	movs	r3, #12
 800b5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f8:	f8ca 3000 	str.w	r3, [sl]
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b602:	81a3      	strh	r3, [r4, #12]
 800b604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b608:	464a      	mov	r2, r9
 800b60a:	6921      	ldr	r1, [r4, #16]
 800b60c:	f7ff fdec 	bl	800b1e8 <memcpy>
 800b610:	89a3      	ldrh	r3, [r4, #12]
 800b612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b61a:	81a3      	strh	r3, [r4, #12]
 800b61c:	6126      	str	r6, [r4, #16]
 800b61e:	444e      	add	r6, r9
 800b620:	6026      	str	r6, [r4, #0]
 800b622:	463e      	mov	r6, r7
 800b624:	6165      	str	r5, [r4, #20]
 800b626:	eba5 0509 	sub.w	r5, r5, r9
 800b62a:	60a5      	str	r5, [r4, #8]
 800b62c:	42be      	cmp	r6, r7
 800b62e:	d900      	bls.n	800b632 <__ssputs_r+0x86>
 800b630:	463e      	mov	r6, r7
 800b632:	4632      	mov	r2, r6
 800b634:	4641      	mov	r1, r8
 800b636:	6820      	ldr	r0, [r4, #0]
 800b638:	f000 fe7e 	bl	800c338 <memmove>
 800b63c:	68a3      	ldr	r3, [r4, #8]
 800b63e:	6822      	ldr	r2, [r4, #0]
 800b640:	1b9b      	subs	r3, r3, r6
 800b642:	4432      	add	r2, r6
 800b644:	2000      	movs	r0, #0
 800b646:	60a3      	str	r3, [r4, #8]
 800b648:	6022      	str	r2, [r4, #0]
 800b64a:	e7db      	b.n	800b604 <__ssputs_r+0x58>
 800b64c:	462a      	mov	r2, r5
 800b64e:	f000 fee5 	bl	800c41c <_realloc_r>
 800b652:	4606      	mov	r6, r0
 800b654:	2800      	cmp	r0, #0
 800b656:	d1e1      	bne.n	800b61c <__ssputs_r+0x70>
 800b658:	4650      	mov	r0, sl
 800b65a:	6921      	ldr	r1, [r4, #16]
 800b65c:	f000 fe92 	bl	800c384 <_free_r>
 800b660:	e7c7      	b.n	800b5f2 <__ssputs_r+0x46>
	...

0800b664 <_svfiprintf_r>:
 800b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b668:	4698      	mov	r8, r3
 800b66a:	898b      	ldrh	r3, [r1, #12]
 800b66c:	4607      	mov	r7, r0
 800b66e:	061b      	lsls	r3, r3, #24
 800b670:	460d      	mov	r5, r1
 800b672:	4614      	mov	r4, r2
 800b674:	b09d      	sub	sp, #116	; 0x74
 800b676:	d50e      	bpl.n	800b696 <_svfiprintf_r+0x32>
 800b678:	690b      	ldr	r3, [r1, #16]
 800b67a:	b963      	cbnz	r3, 800b696 <_svfiprintf_r+0x32>
 800b67c:	2140      	movs	r1, #64	; 0x40
 800b67e:	f7ff ff3b 	bl	800b4f8 <_malloc_r>
 800b682:	6028      	str	r0, [r5, #0]
 800b684:	6128      	str	r0, [r5, #16]
 800b686:	b920      	cbnz	r0, 800b692 <_svfiprintf_r+0x2e>
 800b688:	230c      	movs	r3, #12
 800b68a:	603b      	str	r3, [r7, #0]
 800b68c:	f04f 30ff 	mov.w	r0, #4294967295
 800b690:	e0d1      	b.n	800b836 <_svfiprintf_r+0x1d2>
 800b692:	2340      	movs	r3, #64	; 0x40
 800b694:	616b      	str	r3, [r5, #20]
 800b696:	2300      	movs	r3, #0
 800b698:	9309      	str	r3, [sp, #36]	; 0x24
 800b69a:	2320      	movs	r3, #32
 800b69c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6a0:	2330      	movs	r3, #48	; 0x30
 800b6a2:	f04f 0901 	mov.w	r9, #1
 800b6a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b850 <_svfiprintf_r+0x1ec>
 800b6ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6b2:	4623      	mov	r3, r4
 800b6b4:	469a      	mov	sl, r3
 800b6b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ba:	b10a      	cbz	r2, 800b6c0 <_svfiprintf_r+0x5c>
 800b6bc:	2a25      	cmp	r2, #37	; 0x25
 800b6be:	d1f9      	bne.n	800b6b4 <_svfiprintf_r+0x50>
 800b6c0:	ebba 0b04 	subs.w	fp, sl, r4
 800b6c4:	d00b      	beq.n	800b6de <_svfiprintf_r+0x7a>
 800b6c6:	465b      	mov	r3, fp
 800b6c8:	4622      	mov	r2, r4
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	4638      	mov	r0, r7
 800b6ce:	f7ff ff6d 	bl	800b5ac <__ssputs_r>
 800b6d2:	3001      	adds	r0, #1
 800b6d4:	f000 80aa 	beq.w	800b82c <_svfiprintf_r+0x1c8>
 800b6d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6da:	445a      	add	r2, fp
 800b6dc:	9209      	str	r2, [sp, #36]	; 0x24
 800b6de:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 80a2 	beq.w	800b82c <_svfiprintf_r+0x1c8>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6f2:	f10a 0a01 	add.w	sl, sl, #1
 800b6f6:	9304      	str	r3, [sp, #16]
 800b6f8:	9307      	str	r3, [sp, #28]
 800b6fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6fe:	931a      	str	r3, [sp, #104]	; 0x68
 800b700:	4654      	mov	r4, sl
 800b702:	2205      	movs	r2, #5
 800b704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b708:	4851      	ldr	r0, [pc, #324]	; (800b850 <_svfiprintf_r+0x1ec>)
 800b70a:	f000 fe07 	bl	800c31c <memchr>
 800b70e:	9a04      	ldr	r2, [sp, #16]
 800b710:	b9d8      	cbnz	r0, 800b74a <_svfiprintf_r+0xe6>
 800b712:	06d0      	lsls	r0, r2, #27
 800b714:	bf44      	itt	mi
 800b716:	2320      	movmi	r3, #32
 800b718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b71c:	0711      	lsls	r1, r2, #28
 800b71e:	bf44      	itt	mi
 800b720:	232b      	movmi	r3, #43	; 0x2b
 800b722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b726:	f89a 3000 	ldrb.w	r3, [sl]
 800b72a:	2b2a      	cmp	r3, #42	; 0x2a
 800b72c:	d015      	beq.n	800b75a <_svfiprintf_r+0xf6>
 800b72e:	4654      	mov	r4, sl
 800b730:	2000      	movs	r0, #0
 800b732:	f04f 0c0a 	mov.w	ip, #10
 800b736:	9a07      	ldr	r2, [sp, #28]
 800b738:	4621      	mov	r1, r4
 800b73a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b73e:	3b30      	subs	r3, #48	; 0x30
 800b740:	2b09      	cmp	r3, #9
 800b742:	d94e      	bls.n	800b7e2 <_svfiprintf_r+0x17e>
 800b744:	b1b0      	cbz	r0, 800b774 <_svfiprintf_r+0x110>
 800b746:	9207      	str	r2, [sp, #28]
 800b748:	e014      	b.n	800b774 <_svfiprintf_r+0x110>
 800b74a:	eba0 0308 	sub.w	r3, r0, r8
 800b74e:	fa09 f303 	lsl.w	r3, r9, r3
 800b752:	4313      	orrs	r3, r2
 800b754:	46a2      	mov	sl, r4
 800b756:	9304      	str	r3, [sp, #16]
 800b758:	e7d2      	b.n	800b700 <_svfiprintf_r+0x9c>
 800b75a:	9b03      	ldr	r3, [sp, #12]
 800b75c:	1d19      	adds	r1, r3, #4
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	9103      	str	r1, [sp, #12]
 800b762:	2b00      	cmp	r3, #0
 800b764:	bfbb      	ittet	lt
 800b766:	425b      	neglt	r3, r3
 800b768:	f042 0202 	orrlt.w	r2, r2, #2
 800b76c:	9307      	strge	r3, [sp, #28]
 800b76e:	9307      	strlt	r3, [sp, #28]
 800b770:	bfb8      	it	lt
 800b772:	9204      	strlt	r2, [sp, #16]
 800b774:	7823      	ldrb	r3, [r4, #0]
 800b776:	2b2e      	cmp	r3, #46	; 0x2e
 800b778:	d10c      	bne.n	800b794 <_svfiprintf_r+0x130>
 800b77a:	7863      	ldrb	r3, [r4, #1]
 800b77c:	2b2a      	cmp	r3, #42	; 0x2a
 800b77e:	d135      	bne.n	800b7ec <_svfiprintf_r+0x188>
 800b780:	9b03      	ldr	r3, [sp, #12]
 800b782:	3402      	adds	r4, #2
 800b784:	1d1a      	adds	r2, r3, #4
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	9203      	str	r2, [sp, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	bfb8      	it	lt
 800b78e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b792:	9305      	str	r3, [sp, #20]
 800b794:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b860 <_svfiprintf_r+0x1fc>
 800b798:	2203      	movs	r2, #3
 800b79a:	4650      	mov	r0, sl
 800b79c:	7821      	ldrb	r1, [r4, #0]
 800b79e:	f000 fdbd 	bl	800c31c <memchr>
 800b7a2:	b140      	cbz	r0, 800b7b6 <_svfiprintf_r+0x152>
 800b7a4:	2340      	movs	r3, #64	; 0x40
 800b7a6:	eba0 000a 	sub.w	r0, r0, sl
 800b7aa:	fa03 f000 	lsl.w	r0, r3, r0
 800b7ae:	9b04      	ldr	r3, [sp, #16]
 800b7b0:	3401      	adds	r4, #1
 800b7b2:	4303      	orrs	r3, r0
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ba:	2206      	movs	r2, #6
 800b7bc:	4825      	ldr	r0, [pc, #148]	; (800b854 <_svfiprintf_r+0x1f0>)
 800b7be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7c2:	f000 fdab 	bl	800c31c <memchr>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d038      	beq.n	800b83c <_svfiprintf_r+0x1d8>
 800b7ca:	4b23      	ldr	r3, [pc, #140]	; (800b858 <_svfiprintf_r+0x1f4>)
 800b7cc:	bb1b      	cbnz	r3, 800b816 <_svfiprintf_r+0x1b2>
 800b7ce:	9b03      	ldr	r3, [sp, #12]
 800b7d0:	3307      	adds	r3, #7
 800b7d2:	f023 0307 	bic.w	r3, r3, #7
 800b7d6:	3308      	adds	r3, #8
 800b7d8:	9303      	str	r3, [sp, #12]
 800b7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7dc:	4433      	add	r3, r6
 800b7de:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e0:	e767      	b.n	800b6b2 <_svfiprintf_r+0x4e>
 800b7e2:	460c      	mov	r4, r1
 800b7e4:	2001      	movs	r0, #1
 800b7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7ea:	e7a5      	b.n	800b738 <_svfiprintf_r+0xd4>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f04f 0c0a 	mov.w	ip, #10
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	3401      	adds	r4, #1
 800b7f6:	9305      	str	r3, [sp, #20]
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7fe:	3a30      	subs	r2, #48	; 0x30
 800b800:	2a09      	cmp	r2, #9
 800b802:	d903      	bls.n	800b80c <_svfiprintf_r+0x1a8>
 800b804:	2b00      	cmp	r3, #0
 800b806:	d0c5      	beq.n	800b794 <_svfiprintf_r+0x130>
 800b808:	9105      	str	r1, [sp, #20]
 800b80a:	e7c3      	b.n	800b794 <_svfiprintf_r+0x130>
 800b80c:	4604      	mov	r4, r0
 800b80e:	2301      	movs	r3, #1
 800b810:	fb0c 2101 	mla	r1, ip, r1, r2
 800b814:	e7f0      	b.n	800b7f8 <_svfiprintf_r+0x194>
 800b816:	ab03      	add	r3, sp, #12
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	462a      	mov	r2, r5
 800b81c:	4638      	mov	r0, r7
 800b81e:	4b0f      	ldr	r3, [pc, #60]	; (800b85c <_svfiprintf_r+0x1f8>)
 800b820:	a904      	add	r1, sp, #16
 800b822:	f3af 8000 	nop.w
 800b826:	1c42      	adds	r2, r0, #1
 800b828:	4606      	mov	r6, r0
 800b82a:	d1d6      	bne.n	800b7da <_svfiprintf_r+0x176>
 800b82c:	89ab      	ldrh	r3, [r5, #12]
 800b82e:	065b      	lsls	r3, r3, #25
 800b830:	f53f af2c 	bmi.w	800b68c <_svfiprintf_r+0x28>
 800b834:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b836:	b01d      	add	sp, #116	; 0x74
 800b838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83c:	ab03      	add	r3, sp, #12
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	462a      	mov	r2, r5
 800b842:	4638      	mov	r0, r7
 800b844:	4b05      	ldr	r3, [pc, #20]	; (800b85c <_svfiprintf_r+0x1f8>)
 800b846:	a904      	add	r1, sp, #16
 800b848:	f000 f9d4 	bl	800bbf4 <_printf_i>
 800b84c:	e7eb      	b.n	800b826 <_svfiprintf_r+0x1c2>
 800b84e:	bf00      	nop
 800b850:	0800c7dc 	.word	0x0800c7dc
 800b854:	0800c7e6 	.word	0x0800c7e6
 800b858:	00000000 	.word	0x00000000
 800b85c:	0800b5ad 	.word	0x0800b5ad
 800b860:	0800c7e2 	.word	0x0800c7e2

0800b864 <__sfputc_r>:
 800b864:	6893      	ldr	r3, [r2, #8]
 800b866:	b410      	push	{r4}
 800b868:	3b01      	subs	r3, #1
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	6093      	str	r3, [r2, #8]
 800b86e:	da07      	bge.n	800b880 <__sfputc_r+0x1c>
 800b870:	6994      	ldr	r4, [r2, #24]
 800b872:	42a3      	cmp	r3, r4
 800b874:	db01      	blt.n	800b87a <__sfputc_r+0x16>
 800b876:	290a      	cmp	r1, #10
 800b878:	d102      	bne.n	800b880 <__sfputc_r+0x1c>
 800b87a:	bc10      	pop	{r4}
 800b87c:	f000 bb34 	b.w	800bee8 <__swbuf_r>
 800b880:	6813      	ldr	r3, [r2, #0]
 800b882:	1c58      	adds	r0, r3, #1
 800b884:	6010      	str	r0, [r2, #0]
 800b886:	7019      	strb	r1, [r3, #0]
 800b888:	4608      	mov	r0, r1
 800b88a:	bc10      	pop	{r4}
 800b88c:	4770      	bx	lr

0800b88e <__sfputs_r>:
 800b88e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b890:	4606      	mov	r6, r0
 800b892:	460f      	mov	r7, r1
 800b894:	4614      	mov	r4, r2
 800b896:	18d5      	adds	r5, r2, r3
 800b898:	42ac      	cmp	r4, r5
 800b89a:	d101      	bne.n	800b8a0 <__sfputs_r+0x12>
 800b89c:	2000      	movs	r0, #0
 800b89e:	e007      	b.n	800b8b0 <__sfputs_r+0x22>
 800b8a0:	463a      	mov	r2, r7
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a8:	f7ff ffdc 	bl	800b864 <__sfputc_r>
 800b8ac:	1c43      	adds	r3, r0, #1
 800b8ae:	d1f3      	bne.n	800b898 <__sfputs_r+0xa>
 800b8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8b4 <_vfiprintf_r>:
 800b8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	4614      	mov	r4, r2
 800b8bc:	4698      	mov	r8, r3
 800b8be:	4606      	mov	r6, r0
 800b8c0:	b09d      	sub	sp, #116	; 0x74
 800b8c2:	b118      	cbz	r0, 800b8cc <_vfiprintf_r+0x18>
 800b8c4:	6983      	ldr	r3, [r0, #24]
 800b8c6:	b90b      	cbnz	r3, 800b8cc <_vfiprintf_r+0x18>
 800b8c8:	f7ff fd76 	bl	800b3b8 <__sinit>
 800b8cc:	4b89      	ldr	r3, [pc, #548]	; (800baf4 <_vfiprintf_r+0x240>)
 800b8ce:	429d      	cmp	r5, r3
 800b8d0:	d11b      	bne.n	800b90a <_vfiprintf_r+0x56>
 800b8d2:	6875      	ldr	r5, [r6, #4]
 800b8d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8d6:	07d9      	lsls	r1, r3, #31
 800b8d8:	d405      	bmi.n	800b8e6 <_vfiprintf_r+0x32>
 800b8da:	89ab      	ldrh	r3, [r5, #12]
 800b8dc:	059a      	lsls	r2, r3, #22
 800b8de:	d402      	bmi.n	800b8e6 <_vfiprintf_r+0x32>
 800b8e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8e2:	f7ff fe07 	bl	800b4f4 <__retarget_lock_acquire_recursive>
 800b8e6:	89ab      	ldrh	r3, [r5, #12]
 800b8e8:	071b      	lsls	r3, r3, #28
 800b8ea:	d501      	bpl.n	800b8f0 <_vfiprintf_r+0x3c>
 800b8ec:	692b      	ldr	r3, [r5, #16]
 800b8ee:	b9eb      	cbnz	r3, 800b92c <_vfiprintf_r+0x78>
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	f000 fb5c 	bl	800bfb0 <__swsetup_r>
 800b8f8:	b1c0      	cbz	r0, 800b92c <_vfiprintf_r+0x78>
 800b8fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8fc:	07dc      	lsls	r4, r3, #31
 800b8fe:	d50e      	bpl.n	800b91e <_vfiprintf_r+0x6a>
 800b900:	f04f 30ff 	mov.w	r0, #4294967295
 800b904:	b01d      	add	sp, #116	; 0x74
 800b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90a:	4b7b      	ldr	r3, [pc, #492]	; (800baf8 <_vfiprintf_r+0x244>)
 800b90c:	429d      	cmp	r5, r3
 800b90e:	d101      	bne.n	800b914 <_vfiprintf_r+0x60>
 800b910:	68b5      	ldr	r5, [r6, #8]
 800b912:	e7df      	b.n	800b8d4 <_vfiprintf_r+0x20>
 800b914:	4b79      	ldr	r3, [pc, #484]	; (800bafc <_vfiprintf_r+0x248>)
 800b916:	429d      	cmp	r5, r3
 800b918:	bf08      	it	eq
 800b91a:	68f5      	ldreq	r5, [r6, #12]
 800b91c:	e7da      	b.n	800b8d4 <_vfiprintf_r+0x20>
 800b91e:	89ab      	ldrh	r3, [r5, #12]
 800b920:	0598      	lsls	r0, r3, #22
 800b922:	d4ed      	bmi.n	800b900 <_vfiprintf_r+0x4c>
 800b924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b926:	f7ff fde6 	bl	800b4f6 <__retarget_lock_release_recursive>
 800b92a:	e7e9      	b.n	800b900 <_vfiprintf_r+0x4c>
 800b92c:	2300      	movs	r3, #0
 800b92e:	9309      	str	r3, [sp, #36]	; 0x24
 800b930:	2320      	movs	r3, #32
 800b932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b936:	2330      	movs	r3, #48	; 0x30
 800b938:	f04f 0901 	mov.w	r9, #1
 800b93c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b940:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bb00 <_vfiprintf_r+0x24c>
 800b944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b948:	4623      	mov	r3, r4
 800b94a:	469a      	mov	sl, r3
 800b94c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b950:	b10a      	cbz	r2, 800b956 <_vfiprintf_r+0xa2>
 800b952:	2a25      	cmp	r2, #37	; 0x25
 800b954:	d1f9      	bne.n	800b94a <_vfiprintf_r+0x96>
 800b956:	ebba 0b04 	subs.w	fp, sl, r4
 800b95a:	d00b      	beq.n	800b974 <_vfiprintf_r+0xc0>
 800b95c:	465b      	mov	r3, fp
 800b95e:	4622      	mov	r2, r4
 800b960:	4629      	mov	r1, r5
 800b962:	4630      	mov	r0, r6
 800b964:	f7ff ff93 	bl	800b88e <__sfputs_r>
 800b968:	3001      	adds	r0, #1
 800b96a:	f000 80aa 	beq.w	800bac2 <_vfiprintf_r+0x20e>
 800b96e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b970:	445a      	add	r2, fp
 800b972:	9209      	str	r2, [sp, #36]	; 0x24
 800b974:	f89a 3000 	ldrb.w	r3, [sl]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f000 80a2 	beq.w	800bac2 <_vfiprintf_r+0x20e>
 800b97e:	2300      	movs	r3, #0
 800b980:	f04f 32ff 	mov.w	r2, #4294967295
 800b984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b988:	f10a 0a01 	add.w	sl, sl, #1
 800b98c:	9304      	str	r3, [sp, #16]
 800b98e:	9307      	str	r3, [sp, #28]
 800b990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b994:	931a      	str	r3, [sp, #104]	; 0x68
 800b996:	4654      	mov	r4, sl
 800b998:	2205      	movs	r2, #5
 800b99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b99e:	4858      	ldr	r0, [pc, #352]	; (800bb00 <_vfiprintf_r+0x24c>)
 800b9a0:	f000 fcbc 	bl	800c31c <memchr>
 800b9a4:	9a04      	ldr	r2, [sp, #16]
 800b9a6:	b9d8      	cbnz	r0, 800b9e0 <_vfiprintf_r+0x12c>
 800b9a8:	06d1      	lsls	r1, r2, #27
 800b9aa:	bf44      	itt	mi
 800b9ac:	2320      	movmi	r3, #32
 800b9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9b2:	0713      	lsls	r3, r2, #28
 800b9b4:	bf44      	itt	mi
 800b9b6:	232b      	movmi	r3, #43	; 0x2b
 800b9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b9c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b9c2:	d015      	beq.n	800b9f0 <_vfiprintf_r+0x13c>
 800b9c4:	4654      	mov	r4, sl
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	f04f 0c0a 	mov.w	ip, #10
 800b9cc:	9a07      	ldr	r2, [sp, #28]
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9d4:	3b30      	subs	r3, #48	; 0x30
 800b9d6:	2b09      	cmp	r3, #9
 800b9d8:	d94e      	bls.n	800ba78 <_vfiprintf_r+0x1c4>
 800b9da:	b1b0      	cbz	r0, 800ba0a <_vfiprintf_r+0x156>
 800b9dc:	9207      	str	r2, [sp, #28]
 800b9de:	e014      	b.n	800ba0a <_vfiprintf_r+0x156>
 800b9e0:	eba0 0308 	sub.w	r3, r0, r8
 800b9e4:	fa09 f303 	lsl.w	r3, r9, r3
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	46a2      	mov	sl, r4
 800b9ec:	9304      	str	r3, [sp, #16]
 800b9ee:	e7d2      	b.n	800b996 <_vfiprintf_r+0xe2>
 800b9f0:	9b03      	ldr	r3, [sp, #12]
 800b9f2:	1d19      	adds	r1, r3, #4
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	9103      	str	r1, [sp, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	bfbb      	ittet	lt
 800b9fc:	425b      	neglt	r3, r3
 800b9fe:	f042 0202 	orrlt.w	r2, r2, #2
 800ba02:	9307      	strge	r3, [sp, #28]
 800ba04:	9307      	strlt	r3, [sp, #28]
 800ba06:	bfb8      	it	lt
 800ba08:	9204      	strlt	r2, [sp, #16]
 800ba0a:	7823      	ldrb	r3, [r4, #0]
 800ba0c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba0e:	d10c      	bne.n	800ba2a <_vfiprintf_r+0x176>
 800ba10:	7863      	ldrb	r3, [r4, #1]
 800ba12:	2b2a      	cmp	r3, #42	; 0x2a
 800ba14:	d135      	bne.n	800ba82 <_vfiprintf_r+0x1ce>
 800ba16:	9b03      	ldr	r3, [sp, #12]
 800ba18:	3402      	adds	r4, #2
 800ba1a:	1d1a      	adds	r2, r3, #4
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	9203      	str	r2, [sp, #12]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	bfb8      	it	lt
 800ba24:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba28:	9305      	str	r3, [sp, #20]
 800ba2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb10 <_vfiprintf_r+0x25c>
 800ba2e:	2203      	movs	r2, #3
 800ba30:	4650      	mov	r0, sl
 800ba32:	7821      	ldrb	r1, [r4, #0]
 800ba34:	f000 fc72 	bl	800c31c <memchr>
 800ba38:	b140      	cbz	r0, 800ba4c <_vfiprintf_r+0x198>
 800ba3a:	2340      	movs	r3, #64	; 0x40
 800ba3c:	eba0 000a 	sub.w	r0, r0, sl
 800ba40:	fa03 f000 	lsl.w	r0, r3, r0
 800ba44:	9b04      	ldr	r3, [sp, #16]
 800ba46:	3401      	adds	r4, #1
 800ba48:	4303      	orrs	r3, r0
 800ba4a:	9304      	str	r3, [sp, #16]
 800ba4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba50:	2206      	movs	r2, #6
 800ba52:	482c      	ldr	r0, [pc, #176]	; (800bb04 <_vfiprintf_r+0x250>)
 800ba54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba58:	f000 fc60 	bl	800c31c <memchr>
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	d03f      	beq.n	800bae0 <_vfiprintf_r+0x22c>
 800ba60:	4b29      	ldr	r3, [pc, #164]	; (800bb08 <_vfiprintf_r+0x254>)
 800ba62:	bb1b      	cbnz	r3, 800baac <_vfiprintf_r+0x1f8>
 800ba64:	9b03      	ldr	r3, [sp, #12]
 800ba66:	3307      	adds	r3, #7
 800ba68:	f023 0307 	bic.w	r3, r3, #7
 800ba6c:	3308      	adds	r3, #8
 800ba6e:	9303      	str	r3, [sp, #12]
 800ba70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba72:	443b      	add	r3, r7
 800ba74:	9309      	str	r3, [sp, #36]	; 0x24
 800ba76:	e767      	b.n	800b948 <_vfiprintf_r+0x94>
 800ba78:	460c      	mov	r4, r1
 800ba7a:	2001      	movs	r0, #1
 800ba7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba80:	e7a5      	b.n	800b9ce <_vfiprintf_r+0x11a>
 800ba82:	2300      	movs	r3, #0
 800ba84:	f04f 0c0a 	mov.w	ip, #10
 800ba88:	4619      	mov	r1, r3
 800ba8a:	3401      	adds	r4, #1
 800ba8c:	9305      	str	r3, [sp, #20]
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba94:	3a30      	subs	r2, #48	; 0x30
 800ba96:	2a09      	cmp	r2, #9
 800ba98:	d903      	bls.n	800baa2 <_vfiprintf_r+0x1ee>
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d0c5      	beq.n	800ba2a <_vfiprintf_r+0x176>
 800ba9e:	9105      	str	r1, [sp, #20]
 800baa0:	e7c3      	b.n	800ba2a <_vfiprintf_r+0x176>
 800baa2:	4604      	mov	r4, r0
 800baa4:	2301      	movs	r3, #1
 800baa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800baaa:	e7f0      	b.n	800ba8e <_vfiprintf_r+0x1da>
 800baac:	ab03      	add	r3, sp, #12
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	462a      	mov	r2, r5
 800bab2:	4630      	mov	r0, r6
 800bab4:	4b15      	ldr	r3, [pc, #84]	; (800bb0c <_vfiprintf_r+0x258>)
 800bab6:	a904      	add	r1, sp, #16
 800bab8:	f3af 8000 	nop.w
 800babc:	4607      	mov	r7, r0
 800babe:	1c78      	adds	r0, r7, #1
 800bac0:	d1d6      	bne.n	800ba70 <_vfiprintf_r+0x1bc>
 800bac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bac4:	07d9      	lsls	r1, r3, #31
 800bac6:	d405      	bmi.n	800bad4 <_vfiprintf_r+0x220>
 800bac8:	89ab      	ldrh	r3, [r5, #12]
 800baca:	059a      	lsls	r2, r3, #22
 800bacc:	d402      	bmi.n	800bad4 <_vfiprintf_r+0x220>
 800bace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bad0:	f7ff fd11 	bl	800b4f6 <__retarget_lock_release_recursive>
 800bad4:	89ab      	ldrh	r3, [r5, #12]
 800bad6:	065b      	lsls	r3, r3, #25
 800bad8:	f53f af12 	bmi.w	800b900 <_vfiprintf_r+0x4c>
 800badc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bade:	e711      	b.n	800b904 <_vfiprintf_r+0x50>
 800bae0:	ab03      	add	r3, sp, #12
 800bae2:	9300      	str	r3, [sp, #0]
 800bae4:	462a      	mov	r2, r5
 800bae6:	4630      	mov	r0, r6
 800bae8:	4b08      	ldr	r3, [pc, #32]	; (800bb0c <_vfiprintf_r+0x258>)
 800baea:	a904      	add	r1, sp, #16
 800baec:	f000 f882 	bl	800bbf4 <_printf_i>
 800baf0:	e7e4      	b.n	800babc <_vfiprintf_r+0x208>
 800baf2:	bf00      	nop
 800baf4:	0800c79c 	.word	0x0800c79c
 800baf8:	0800c7bc 	.word	0x0800c7bc
 800bafc:	0800c77c 	.word	0x0800c77c
 800bb00:	0800c7dc 	.word	0x0800c7dc
 800bb04:	0800c7e6 	.word	0x0800c7e6
 800bb08:	00000000 	.word	0x00000000
 800bb0c:	0800b88f 	.word	0x0800b88f
 800bb10:	0800c7e2 	.word	0x0800c7e2

0800bb14 <_printf_common>:
 800bb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb18:	4616      	mov	r6, r2
 800bb1a:	4699      	mov	r9, r3
 800bb1c:	688a      	ldr	r2, [r1, #8]
 800bb1e:	690b      	ldr	r3, [r1, #16]
 800bb20:	4607      	mov	r7, r0
 800bb22:	4293      	cmp	r3, r2
 800bb24:	bfb8      	it	lt
 800bb26:	4613      	movlt	r3, r2
 800bb28:	6033      	str	r3, [r6, #0]
 800bb2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb2e:	460c      	mov	r4, r1
 800bb30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb34:	b10a      	cbz	r2, 800bb3a <_printf_common+0x26>
 800bb36:	3301      	adds	r3, #1
 800bb38:	6033      	str	r3, [r6, #0]
 800bb3a:	6823      	ldr	r3, [r4, #0]
 800bb3c:	0699      	lsls	r1, r3, #26
 800bb3e:	bf42      	ittt	mi
 800bb40:	6833      	ldrmi	r3, [r6, #0]
 800bb42:	3302      	addmi	r3, #2
 800bb44:	6033      	strmi	r3, [r6, #0]
 800bb46:	6825      	ldr	r5, [r4, #0]
 800bb48:	f015 0506 	ands.w	r5, r5, #6
 800bb4c:	d106      	bne.n	800bb5c <_printf_common+0x48>
 800bb4e:	f104 0a19 	add.w	sl, r4, #25
 800bb52:	68e3      	ldr	r3, [r4, #12]
 800bb54:	6832      	ldr	r2, [r6, #0]
 800bb56:	1a9b      	subs	r3, r3, r2
 800bb58:	42ab      	cmp	r3, r5
 800bb5a:	dc28      	bgt.n	800bbae <_printf_common+0x9a>
 800bb5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb60:	1e13      	subs	r3, r2, #0
 800bb62:	6822      	ldr	r2, [r4, #0]
 800bb64:	bf18      	it	ne
 800bb66:	2301      	movne	r3, #1
 800bb68:	0692      	lsls	r2, r2, #26
 800bb6a:	d42d      	bmi.n	800bbc8 <_printf_common+0xb4>
 800bb6c:	4649      	mov	r1, r9
 800bb6e:	4638      	mov	r0, r7
 800bb70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb74:	47c0      	blx	r8
 800bb76:	3001      	adds	r0, #1
 800bb78:	d020      	beq.n	800bbbc <_printf_common+0xa8>
 800bb7a:	6823      	ldr	r3, [r4, #0]
 800bb7c:	68e5      	ldr	r5, [r4, #12]
 800bb7e:	f003 0306 	and.w	r3, r3, #6
 800bb82:	2b04      	cmp	r3, #4
 800bb84:	bf18      	it	ne
 800bb86:	2500      	movne	r5, #0
 800bb88:	6832      	ldr	r2, [r6, #0]
 800bb8a:	f04f 0600 	mov.w	r6, #0
 800bb8e:	68a3      	ldr	r3, [r4, #8]
 800bb90:	bf08      	it	eq
 800bb92:	1aad      	subeq	r5, r5, r2
 800bb94:	6922      	ldr	r2, [r4, #16]
 800bb96:	bf08      	it	eq
 800bb98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	bfc4      	itt	gt
 800bba0:	1a9b      	subgt	r3, r3, r2
 800bba2:	18ed      	addgt	r5, r5, r3
 800bba4:	341a      	adds	r4, #26
 800bba6:	42b5      	cmp	r5, r6
 800bba8:	d11a      	bne.n	800bbe0 <_printf_common+0xcc>
 800bbaa:	2000      	movs	r0, #0
 800bbac:	e008      	b.n	800bbc0 <_printf_common+0xac>
 800bbae:	2301      	movs	r3, #1
 800bbb0:	4652      	mov	r2, sl
 800bbb2:	4649      	mov	r1, r9
 800bbb4:	4638      	mov	r0, r7
 800bbb6:	47c0      	blx	r8
 800bbb8:	3001      	adds	r0, #1
 800bbba:	d103      	bne.n	800bbc4 <_printf_common+0xb0>
 800bbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbc4:	3501      	adds	r5, #1
 800bbc6:	e7c4      	b.n	800bb52 <_printf_common+0x3e>
 800bbc8:	2030      	movs	r0, #48	; 0x30
 800bbca:	18e1      	adds	r1, r4, r3
 800bbcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbd0:	1c5a      	adds	r2, r3, #1
 800bbd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbd6:	4422      	add	r2, r4
 800bbd8:	3302      	adds	r3, #2
 800bbda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbde:	e7c5      	b.n	800bb6c <_printf_common+0x58>
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	4622      	mov	r2, r4
 800bbe4:	4649      	mov	r1, r9
 800bbe6:	4638      	mov	r0, r7
 800bbe8:	47c0      	blx	r8
 800bbea:	3001      	adds	r0, #1
 800bbec:	d0e6      	beq.n	800bbbc <_printf_common+0xa8>
 800bbee:	3601      	adds	r6, #1
 800bbf0:	e7d9      	b.n	800bba6 <_printf_common+0x92>
	...

0800bbf4 <_printf_i>:
 800bbf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbf8:	460c      	mov	r4, r1
 800bbfa:	7e27      	ldrb	r7, [r4, #24]
 800bbfc:	4691      	mov	r9, r2
 800bbfe:	2f78      	cmp	r7, #120	; 0x78
 800bc00:	4680      	mov	r8, r0
 800bc02:	469a      	mov	sl, r3
 800bc04:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bc06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc0a:	d807      	bhi.n	800bc1c <_printf_i+0x28>
 800bc0c:	2f62      	cmp	r7, #98	; 0x62
 800bc0e:	d80a      	bhi.n	800bc26 <_printf_i+0x32>
 800bc10:	2f00      	cmp	r7, #0
 800bc12:	f000 80d9 	beq.w	800bdc8 <_printf_i+0x1d4>
 800bc16:	2f58      	cmp	r7, #88	; 0x58
 800bc18:	f000 80a4 	beq.w	800bd64 <_printf_i+0x170>
 800bc1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc24:	e03a      	b.n	800bc9c <_printf_i+0xa8>
 800bc26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc2a:	2b15      	cmp	r3, #21
 800bc2c:	d8f6      	bhi.n	800bc1c <_printf_i+0x28>
 800bc2e:	a001      	add	r0, pc, #4	; (adr r0, 800bc34 <_printf_i+0x40>)
 800bc30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bc34:	0800bc8d 	.word	0x0800bc8d
 800bc38:	0800bca1 	.word	0x0800bca1
 800bc3c:	0800bc1d 	.word	0x0800bc1d
 800bc40:	0800bc1d 	.word	0x0800bc1d
 800bc44:	0800bc1d 	.word	0x0800bc1d
 800bc48:	0800bc1d 	.word	0x0800bc1d
 800bc4c:	0800bca1 	.word	0x0800bca1
 800bc50:	0800bc1d 	.word	0x0800bc1d
 800bc54:	0800bc1d 	.word	0x0800bc1d
 800bc58:	0800bc1d 	.word	0x0800bc1d
 800bc5c:	0800bc1d 	.word	0x0800bc1d
 800bc60:	0800bdaf 	.word	0x0800bdaf
 800bc64:	0800bcd1 	.word	0x0800bcd1
 800bc68:	0800bd91 	.word	0x0800bd91
 800bc6c:	0800bc1d 	.word	0x0800bc1d
 800bc70:	0800bc1d 	.word	0x0800bc1d
 800bc74:	0800bdd1 	.word	0x0800bdd1
 800bc78:	0800bc1d 	.word	0x0800bc1d
 800bc7c:	0800bcd1 	.word	0x0800bcd1
 800bc80:	0800bc1d 	.word	0x0800bc1d
 800bc84:	0800bc1d 	.word	0x0800bc1d
 800bc88:	0800bd99 	.word	0x0800bd99
 800bc8c:	680b      	ldr	r3, [r1, #0]
 800bc8e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc92:	1d1a      	adds	r2, r3, #4
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	600a      	str	r2, [r1, #0]
 800bc98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e0a4      	b.n	800bdea <_printf_i+0x1f6>
 800bca0:	6825      	ldr	r5, [r4, #0]
 800bca2:	6808      	ldr	r0, [r1, #0]
 800bca4:	062e      	lsls	r6, r5, #24
 800bca6:	f100 0304 	add.w	r3, r0, #4
 800bcaa:	d50a      	bpl.n	800bcc2 <_printf_i+0xce>
 800bcac:	6805      	ldr	r5, [r0, #0]
 800bcae:	600b      	str	r3, [r1, #0]
 800bcb0:	2d00      	cmp	r5, #0
 800bcb2:	da03      	bge.n	800bcbc <_printf_i+0xc8>
 800bcb4:	232d      	movs	r3, #45	; 0x2d
 800bcb6:	426d      	negs	r5, r5
 800bcb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcbc:	230a      	movs	r3, #10
 800bcbe:	485e      	ldr	r0, [pc, #376]	; (800be38 <_printf_i+0x244>)
 800bcc0:	e019      	b.n	800bcf6 <_printf_i+0x102>
 800bcc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bcc6:	6805      	ldr	r5, [r0, #0]
 800bcc8:	600b      	str	r3, [r1, #0]
 800bcca:	bf18      	it	ne
 800bccc:	b22d      	sxthne	r5, r5
 800bcce:	e7ef      	b.n	800bcb0 <_printf_i+0xbc>
 800bcd0:	680b      	ldr	r3, [r1, #0]
 800bcd2:	6825      	ldr	r5, [r4, #0]
 800bcd4:	1d18      	adds	r0, r3, #4
 800bcd6:	6008      	str	r0, [r1, #0]
 800bcd8:	0628      	lsls	r0, r5, #24
 800bcda:	d501      	bpl.n	800bce0 <_printf_i+0xec>
 800bcdc:	681d      	ldr	r5, [r3, #0]
 800bcde:	e002      	b.n	800bce6 <_printf_i+0xf2>
 800bce0:	0669      	lsls	r1, r5, #25
 800bce2:	d5fb      	bpl.n	800bcdc <_printf_i+0xe8>
 800bce4:	881d      	ldrh	r5, [r3, #0]
 800bce6:	2f6f      	cmp	r7, #111	; 0x6f
 800bce8:	bf0c      	ite	eq
 800bcea:	2308      	moveq	r3, #8
 800bcec:	230a      	movne	r3, #10
 800bcee:	4852      	ldr	r0, [pc, #328]	; (800be38 <_printf_i+0x244>)
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcf6:	6866      	ldr	r6, [r4, #4]
 800bcf8:	2e00      	cmp	r6, #0
 800bcfa:	bfa8      	it	ge
 800bcfc:	6821      	ldrge	r1, [r4, #0]
 800bcfe:	60a6      	str	r6, [r4, #8]
 800bd00:	bfa4      	itt	ge
 800bd02:	f021 0104 	bicge.w	r1, r1, #4
 800bd06:	6021      	strge	r1, [r4, #0]
 800bd08:	b90d      	cbnz	r5, 800bd0e <_printf_i+0x11a>
 800bd0a:	2e00      	cmp	r6, #0
 800bd0c:	d04d      	beq.n	800bdaa <_printf_i+0x1b6>
 800bd0e:	4616      	mov	r6, r2
 800bd10:	fbb5 f1f3 	udiv	r1, r5, r3
 800bd14:	fb03 5711 	mls	r7, r3, r1, r5
 800bd18:	5dc7      	ldrb	r7, [r0, r7]
 800bd1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bd1e:	462f      	mov	r7, r5
 800bd20:	42bb      	cmp	r3, r7
 800bd22:	460d      	mov	r5, r1
 800bd24:	d9f4      	bls.n	800bd10 <_printf_i+0x11c>
 800bd26:	2b08      	cmp	r3, #8
 800bd28:	d10b      	bne.n	800bd42 <_printf_i+0x14e>
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	07df      	lsls	r7, r3, #31
 800bd2e:	d508      	bpl.n	800bd42 <_printf_i+0x14e>
 800bd30:	6923      	ldr	r3, [r4, #16]
 800bd32:	6861      	ldr	r1, [r4, #4]
 800bd34:	4299      	cmp	r1, r3
 800bd36:	bfde      	ittt	le
 800bd38:	2330      	movle	r3, #48	; 0x30
 800bd3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd42:	1b92      	subs	r2, r2, r6
 800bd44:	6122      	str	r2, [r4, #16]
 800bd46:	464b      	mov	r3, r9
 800bd48:	4621      	mov	r1, r4
 800bd4a:	4640      	mov	r0, r8
 800bd4c:	f8cd a000 	str.w	sl, [sp]
 800bd50:	aa03      	add	r2, sp, #12
 800bd52:	f7ff fedf 	bl	800bb14 <_printf_common>
 800bd56:	3001      	adds	r0, #1
 800bd58:	d14c      	bne.n	800bdf4 <_printf_i+0x200>
 800bd5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5e:	b004      	add	sp, #16
 800bd60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd64:	4834      	ldr	r0, [pc, #208]	; (800be38 <_printf_i+0x244>)
 800bd66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd6a:	680e      	ldr	r6, [r1, #0]
 800bd6c:	6823      	ldr	r3, [r4, #0]
 800bd6e:	f856 5b04 	ldr.w	r5, [r6], #4
 800bd72:	061f      	lsls	r7, r3, #24
 800bd74:	600e      	str	r6, [r1, #0]
 800bd76:	d514      	bpl.n	800bda2 <_printf_i+0x1ae>
 800bd78:	07d9      	lsls	r1, r3, #31
 800bd7a:	bf44      	itt	mi
 800bd7c:	f043 0320 	orrmi.w	r3, r3, #32
 800bd80:	6023      	strmi	r3, [r4, #0]
 800bd82:	b91d      	cbnz	r5, 800bd8c <_printf_i+0x198>
 800bd84:	6823      	ldr	r3, [r4, #0]
 800bd86:	f023 0320 	bic.w	r3, r3, #32
 800bd8a:	6023      	str	r3, [r4, #0]
 800bd8c:	2310      	movs	r3, #16
 800bd8e:	e7af      	b.n	800bcf0 <_printf_i+0xfc>
 800bd90:	6823      	ldr	r3, [r4, #0]
 800bd92:	f043 0320 	orr.w	r3, r3, #32
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	2378      	movs	r3, #120	; 0x78
 800bd9a:	4828      	ldr	r0, [pc, #160]	; (800be3c <_printf_i+0x248>)
 800bd9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bda0:	e7e3      	b.n	800bd6a <_printf_i+0x176>
 800bda2:	065e      	lsls	r6, r3, #25
 800bda4:	bf48      	it	mi
 800bda6:	b2ad      	uxthmi	r5, r5
 800bda8:	e7e6      	b.n	800bd78 <_printf_i+0x184>
 800bdaa:	4616      	mov	r6, r2
 800bdac:	e7bb      	b.n	800bd26 <_printf_i+0x132>
 800bdae:	680b      	ldr	r3, [r1, #0]
 800bdb0:	6826      	ldr	r6, [r4, #0]
 800bdb2:	1d1d      	adds	r5, r3, #4
 800bdb4:	6960      	ldr	r0, [r4, #20]
 800bdb6:	600d      	str	r5, [r1, #0]
 800bdb8:	0635      	lsls	r5, r6, #24
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	d501      	bpl.n	800bdc2 <_printf_i+0x1ce>
 800bdbe:	6018      	str	r0, [r3, #0]
 800bdc0:	e002      	b.n	800bdc8 <_printf_i+0x1d4>
 800bdc2:	0671      	lsls	r1, r6, #25
 800bdc4:	d5fb      	bpl.n	800bdbe <_printf_i+0x1ca>
 800bdc6:	8018      	strh	r0, [r3, #0]
 800bdc8:	2300      	movs	r3, #0
 800bdca:	4616      	mov	r6, r2
 800bdcc:	6123      	str	r3, [r4, #16]
 800bdce:	e7ba      	b.n	800bd46 <_printf_i+0x152>
 800bdd0:	680b      	ldr	r3, [r1, #0]
 800bdd2:	1d1a      	adds	r2, r3, #4
 800bdd4:	600a      	str	r2, [r1, #0]
 800bdd6:	681e      	ldr	r6, [r3, #0]
 800bdd8:	2100      	movs	r1, #0
 800bdda:	4630      	mov	r0, r6
 800bddc:	6862      	ldr	r2, [r4, #4]
 800bdde:	f000 fa9d 	bl	800c31c <memchr>
 800bde2:	b108      	cbz	r0, 800bde8 <_printf_i+0x1f4>
 800bde4:	1b80      	subs	r0, r0, r6
 800bde6:	6060      	str	r0, [r4, #4]
 800bde8:	6863      	ldr	r3, [r4, #4]
 800bdea:	6123      	str	r3, [r4, #16]
 800bdec:	2300      	movs	r3, #0
 800bdee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdf2:	e7a8      	b.n	800bd46 <_printf_i+0x152>
 800bdf4:	4632      	mov	r2, r6
 800bdf6:	4649      	mov	r1, r9
 800bdf8:	4640      	mov	r0, r8
 800bdfa:	6923      	ldr	r3, [r4, #16]
 800bdfc:	47d0      	blx	sl
 800bdfe:	3001      	adds	r0, #1
 800be00:	d0ab      	beq.n	800bd5a <_printf_i+0x166>
 800be02:	6823      	ldr	r3, [r4, #0]
 800be04:	079b      	lsls	r3, r3, #30
 800be06:	d413      	bmi.n	800be30 <_printf_i+0x23c>
 800be08:	68e0      	ldr	r0, [r4, #12]
 800be0a:	9b03      	ldr	r3, [sp, #12]
 800be0c:	4298      	cmp	r0, r3
 800be0e:	bfb8      	it	lt
 800be10:	4618      	movlt	r0, r3
 800be12:	e7a4      	b.n	800bd5e <_printf_i+0x16a>
 800be14:	2301      	movs	r3, #1
 800be16:	4632      	mov	r2, r6
 800be18:	4649      	mov	r1, r9
 800be1a:	4640      	mov	r0, r8
 800be1c:	47d0      	blx	sl
 800be1e:	3001      	adds	r0, #1
 800be20:	d09b      	beq.n	800bd5a <_printf_i+0x166>
 800be22:	3501      	adds	r5, #1
 800be24:	68e3      	ldr	r3, [r4, #12]
 800be26:	9903      	ldr	r1, [sp, #12]
 800be28:	1a5b      	subs	r3, r3, r1
 800be2a:	42ab      	cmp	r3, r5
 800be2c:	dcf2      	bgt.n	800be14 <_printf_i+0x220>
 800be2e:	e7eb      	b.n	800be08 <_printf_i+0x214>
 800be30:	2500      	movs	r5, #0
 800be32:	f104 0619 	add.w	r6, r4, #25
 800be36:	e7f5      	b.n	800be24 <_printf_i+0x230>
 800be38:	0800c7ed 	.word	0x0800c7ed
 800be3c:	0800c7fe 	.word	0x0800c7fe

0800be40 <_sbrk_r>:
 800be40:	b538      	push	{r3, r4, r5, lr}
 800be42:	2300      	movs	r3, #0
 800be44:	4d05      	ldr	r5, [pc, #20]	; (800be5c <_sbrk_r+0x1c>)
 800be46:	4604      	mov	r4, r0
 800be48:	4608      	mov	r0, r1
 800be4a:	602b      	str	r3, [r5, #0]
 800be4c:	f7f6 fd76 	bl	800293c <_sbrk>
 800be50:	1c43      	adds	r3, r0, #1
 800be52:	d102      	bne.n	800be5a <_sbrk_r+0x1a>
 800be54:	682b      	ldr	r3, [r5, #0]
 800be56:	b103      	cbz	r3, 800be5a <_sbrk_r+0x1a>
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	bd38      	pop	{r3, r4, r5, pc}
 800be5c:	200015bc 	.word	0x200015bc

0800be60 <__sread>:
 800be60:	b510      	push	{r4, lr}
 800be62:	460c      	mov	r4, r1
 800be64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be68:	f000 fafe 	bl	800c468 <_read_r>
 800be6c:	2800      	cmp	r0, #0
 800be6e:	bfab      	itete	ge
 800be70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be72:	89a3      	ldrhlt	r3, [r4, #12]
 800be74:	181b      	addge	r3, r3, r0
 800be76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be7a:	bfac      	ite	ge
 800be7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800be7e:	81a3      	strhlt	r3, [r4, #12]
 800be80:	bd10      	pop	{r4, pc}

0800be82 <__swrite>:
 800be82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be86:	461f      	mov	r7, r3
 800be88:	898b      	ldrh	r3, [r1, #12]
 800be8a:	4605      	mov	r5, r0
 800be8c:	05db      	lsls	r3, r3, #23
 800be8e:	460c      	mov	r4, r1
 800be90:	4616      	mov	r6, r2
 800be92:	d505      	bpl.n	800bea0 <__swrite+0x1e>
 800be94:	2302      	movs	r3, #2
 800be96:	2200      	movs	r2, #0
 800be98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be9c:	f000 f9c8 	bl	800c230 <_lseek_r>
 800bea0:	89a3      	ldrh	r3, [r4, #12]
 800bea2:	4632      	mov	r2, r6
 800bea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bea8:	81a3      	strh	r3, [r4, #12]
 800beaa:	4628      	mov	r0, r5
 800beac:	463b      	mov	r3, r7
 800beae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beb6:	f000 b869 	b.w	800bf8c <_write_r>

0800beba <__sseek>:
 800beba:	b510      	push	{r4, lr}
 800bebc:	460c      	mov	r4, r1
 800bebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec2:	f000 f9b5 	bl	800c230 <_lseek_r>
 800bec6:	1c43      	adds	r3, r0, #1
 800bec8:	89a3      	ldrh	r3, [r4, #12]
 800beca:	bf15      	itete	ne
 800becc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bed6:	81a3      	strheq	r3, [r4, #12]
 800bed8:	bf18      	it	ne
 800beda:	81a3      	strhne	r3, [r4, #12]
 800bedc:	bd10      	pop	{r4, pc}

0800bede <__sclose>:
 800bede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee2:	f000 b8d3 	b.w	800c08c <_close_r>
	...

0800bee8 <__swbuf_r>:
 800bee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beea:	460e      	mov	r6, r1
 800beec:	4614      	mov	r4, r2
 800beee:	4605      	mov	r5, r0
 800bef0:	b118      	cbz	r0, 800befa <__swbuf_r+0x12>
 800bef2:	6983      	ldr	r3, [r0, #24]
 800bef4:	b90b      	cbnz	r3, 800befa <__swbuf_r+0x12>
 800bef6:	f7ff fa5f 	bl	800b3b8 <__sinit>
 800befa:	4b21      	ldr	r3, [pc, #132]	; (800bf80 <__swbuf_r+0x98>)
 800befc:	429c      	cmp	r4, r3
 800befe:	d12b      	bne.n	800bf58 <__swbuf_r+0x70>
 800bf00:	686c      	ldr	r4, [r5, #4]
 800bf02:	69a3      	ldr	r3, [r4, #24]
 800bf04:	60a3      	str	r3, [r4, #8]
 800bf06:	89a3      	ldrh	r3, [r4, #12]
 800bf08:	071a      	lsls	r2, r3, #28
 800bf0a:	d52f      	bpl.n	800bf6c <__swbuf_r+0x84>
 800bf0c:	6923      	ldr	r3, [r4, #16]
 800bf0e:	b36b      	cbz	r3, 800bf6c <__swbuf_r+0x84>
 800bf10:	6923      	ldr	r3, [r4, #16]
 800bf12:	6820      	ldr	r0, [r4, #0]
 800bf14:	b2f6      	uxtb	r6, r6
 800bf16:	1ac0      	subs	r0, r0, r3
 800bf18:	6963      	ldr	r3, [r4, #20]
 800bf1a:	4637      	mov	r7, r6
 800bf1c:	4283      	cmp	r3, r0
 800bf1e:	dc04      	bgt.n	800bf2a <__swbuf_r+0x42>
 800bf20:	4621      	mov	r1, r4
 800bf22:	4628      	mov	r0, r5
 800bf24:	f000 f948 	bl	800c1b8 <_fflush_r>
 800bf28:	bb30      	cbnz	r0, 800bf78 <__swbuf_r+0x90>
 800bf2a:	68a3      	ldr	r3, [r4, #8]
 800bf2c:	3001      	adds	r0, #1
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	60a3      	str	r3, [r4, #8]
 800bf32:	6823      	ldr	r3, [r4, #0]
 800bf34:	1c5a      	adds	r2, r3, #1
 800bf36:	6022      	str	r2, [r4, #0]
 800bf38:	701e      	strb	r6, [r3, #0]
 800bf3a:	6963      	ldr	r3, [r4, #20]
 800bf3c:	4283      	cmp	r3, r0
 800bf3e:	d004      	beq.n	800bf4a <__swbuf_r+0x62>
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	07db      	lsls	r3, r3, #31
 800bf44:	d506      	bpl.n	800bf54 <__swbuf_r+0x6c>
 800bf46:	2e0a      	cmp	r6, #10
 800bf48:	d104      	bne.n	800bf54 <__swbuf_r+0x6c>
 800bf4a:	4621      	mov	r1, r4
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	f000 f933 	bl	800c1b8 <_fflush_r>
 800bf52:	b988      	cbnz	r0, 800bf78 <__swbuf_r+0x90>
 800bf54:	4638      	mov	r0, r7
 800bf56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf58:	4b0a      	ldr	r3, [pc, #40]	; (800bf84 <__swbuf_r+0x9c>)
 800bf5a:	429c      	cmp	r4, r3
 800bf5c:	d101      	bne.n	800bf62 <__swbuf_r+0x7a>
 800bf5e:	68ac      	ldr	r4, [r5, #8]
 800bf60:	e7cf      	b.n	800bf02 <__swbuf_r+0x1a>
 800bf62:	4b09      	ldr	r3, [pc, #36]	; (800bf88 <__swbuf_r+0xa0>)
 800bf64:	429c      	cmp	r4, r3
 800bf66:	bf08      	it	eq
 800bf68:	68ec      	ldreq	r4, [r5, #12]
 800bf6a:	e7ca      	b.n	800bf02 <__swbuf_r+0x1a>
 800bf6c:	4621      	mov	r1, r4
 800bf6e:	4628      	mov	r0, r5
 800bf70:	f000 f81e 	bl	800bfb0 <__swsetup_r>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d0cb      	beq.n	800bf10 <__swbuf_r+0x28>
 800bf78:	f04f 37ff 	mov.w	r7, #4294967295
 800bf7c:	e7ea      	b.n	800bf54 <__swbuf_r+0x6c>
 800bf7e:	bf00      	nop
 800bf80:	0800c79c 	.word	0x0800c79c
 800bf84:	0800c7bc 	.word	0x0800c7bc
 800bf88:	0800c77c 	.word	0x0800c77c

0800bf8c <_write_r>:
 800bf8c:	b538      	push	{r3, r4, r5, lr}
 800bf8e:	4604      	mov	r4, r0
 800bf90:	4608      	mov	r0, r1
 800bf92:	4611      	mov	r1, r2
 800bf94:	2200      	movs	r2, #0
 800bf96:	4d05      	ldr	r5, [pc, #20]	; (800bfac <_write_r+0x20>)
 800bf98:	602a      	str	r2, [r5, #0]
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	f7f4 ffa8 	bl	8000ef0 <_write>
 800bfa0:	1c43      	adds	r3, r0, #1
 800bfa2:	d102      	bne.n	800bfaa <_write_r+0x1e>
 800bfa4:	682b      	ldr	r3, [r5, #0]
 800bfa6:	b103      	cbz	r3, 800bfaa <_write_r+0x1e>
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	bd38      	pop	{r3, r4, r5, pc}
 800bfac:	200015bc 	.word	0x200015bc

0800bfb0 <__swsetup_r>:
 800bfb0:	4b32      	ldr	r3, [pc, #200]	; (800c07c <__swsetup_r+0xcc>)
 800bfb2:	b570      	push	{r4, r5, r6, lr}
 800bfb4:	681d      	ldr	r5, [r3, #0]
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	460c      	mov	r4, r1
 800bfba:	b125      	cbz	r5, 800bfc6 <__swsetup_r+0x16>
 800bfbc:	69ab      	ldr	r3, [r5, #24]
 800bfbe:	b913      	cbnz	r3, 800bfc6 <__swsetup_r+0x16>
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	f7ff f9f9 	bl	800b3b8 <__sinit>
 800bfc6:	4b2e      	ldr	r3, [pc, #184]	; (800c080 <__swsetup_r+0xd0>)
 800bfc8:	429c      	cmp	r4, r3
 800bfca:	d10f      	bne.n	800bfec <__swsetup_r+0x3c>
 800bfcc:	686c      	ldr	r4, [r5, #4]
 800bfce:	89a3      	ldrh	r3, [r4, #12]
 800bfd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfd4:	0719      	lsls	r1, r3, #28
 800bfd6:	d42c      	bmi.n	800c032 <__swsetup_r+0x82>
 800bfd8:	06dd      	lsls	r5, r3, #27
 800bfda:	d411      	bmi.n	800c000 <__swsetup_r+0x50>
 800bfdc:	2309      	movs	r3, #9
 800bfde:	6033      	str	r3, [r6, #0]
 800bfe0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe8:	81a3      	strh	r3, [r4, #12]
 800bfea:	e03e      	b.n	800c06a <__swsetup_r+0xba>
 800bfec:	4b25      	ldr	r3, [pc, #148]	; (800c084 <__swsetup_r+0xd4>)
 800bfee:	429c      	cmp	r4, r3
 800bff0:	d101      	bne.n	800bff6 <__swsetup_r+0x46>
 800bff2:	68ac      	ldr	r4, [r5, #8]
 800bff4:	e7eb      	b.n	800bfce <__swsetup_r+0x1e>
 800bff6:	4b24      	ldr	r3, [pc, #144]	; (800c088 <__swsetup_r+0xd8>)
 800bff8:	429c      	cmp	r4, r3
 800bffa:	bf08      	it	eq
 800bffc:	68ec      	ldreq	r4, [r5, #12]
 800bffe:	e7e6      	b.n	800bfce <__swsetup_r+0x1e>
 800c000:	0758      	lsls	r0, r3, #29
 800c002:	d512      	bpl.n	800c02a <__swsetup_r+0x7a>
 800c004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c006:	b141      	cbz	r1, 800c01a <__swsetup_r+0x6a>
 800c008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c00c:	4299      	cmp	r1, r3
 800c00e:	d002      	beq.n	800c016 <__swsetup_r+0x66>
 800c010:	4630      	mov	r0, r6
 800c012:	f000 f9b7 	bl	800c384 <_free_r>
 800c016:	2300      	movs	r3, #0
 800c018:	6363      	str	r3, [r4, #52]	; 0x34
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c020:	81a3      	strh	r3, [r4, #12]
 800c022:	2300      	movs	r3, #0
 800c024:	6063      	str	r3, [r4, #4]
 800c026:	6923      	ldr	r3, [r4, #16]
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	89a3      	ldrh	r3, [r4, #12]
 800c02c:	f043 0308 	orr.w	r3, r3, #8
 800c030:	81a3      	strh	r3, [r4, #12]
 800c032:	6923      	ldr	r3, [r4, #16]
 800c034:	b94b      	cbnz	r3, 800c04a <__swsetup_r+0x9a>
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c03c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c040:	d003      	beq.n	800c04a <__swsetup_r+0x9a>
 800c042:	4621      	mov	r1, r4
 800c044:	4630      	mov	r0, r6
 800c046:	f000 f929 	bl	800c29c <__smakebuf_r>
 800c04a:	89a0      	ldrh	r0, [r4, #12]
 800c04c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c050:	f010 0301 	ands.w	r3, r0, #1
 800c054:	d00a      	beq.n	800c06c <__swsetup_r+0xbc>
 800c056:	2300      	movs	r3, #0
 800c058:	60a3      	str	r3, [r4, #8]
 800c05a:	6963      	ldr	r3, [r4, #20]
 800c05c:	425b      	negs	r3, r3
 800c05e:	61a3      	str	r3, [r4, #24]
 800c060:	6923      	ldr	r3, [r4, #16]
 800c062:	b943      	cbnz	r3, 800c076 <__swsetup_r+0xc6>
 800c064:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c068:	d1ba      	bne.n	800bfe0 <__swsetup_r+0x30>
 800c06a:	bd70      	pop	{r4, r5, r6, pc}
 800c06c:	0781      	lsls	r1, r0, #30
 800c06e:	bf58      	it	pl
 800c070:	6963      	ldrpl	r3, [r4, #20]
 800c072:	60a3      	str	r3, [r4, #8]
 800c074:	e7f4      	b.n	800c060 <__swsetup_r+0xb0>
 800c076:	2000      	movs	r0, #0
 800c078:	e7f7      	b.n	800c06a <__swsetup_r+0xba>
 800c07a:	bf00      	nop
 800c07c:	200001a0 	.word	0x200001a0
 800c080:	0800c79c 	.word	0x0800c79c
 800c084:	0800c7bc 	.word	0x0800c7bc
 800c088:	0800c77c 	.word	0x0800c77c

0800c08c <_close_r>:
 800c08c:	b538      	push	{r3, r4, r5, lr}
 800c08e:	2300      	movs	r3, #0
 800c090:	4d05      	ldr	r5, [pc, #20]	; (800c0a8 <_close_r+0x1c>)
 800c092:	4604      	mov	r4, r0
 800c094:	4608      	mov	r0, r1
 800c096:	602b      	str	r3, [r5, #0]
 800c098:	f7f6 fc1f 	bl	80028da <_close>
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	d102      	bne.n	800c0a6 <_close_r+0x1a>
 800c0a0:	682b      	ldr	r3, [r5, #0]
 800c0a2:	b103      	cbz	r3, 800c0a6 <_close_r+0x1a>
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
 800c0a8:	200015bc 	.word	0x200015bc

0800c0ac <__sflush_r>:
 800c0ac:	898a      	ldrh	r2, [r1, #12]
 800c0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b2:	4605      	mov	r5, r0
 800c0b4:	0710      	lsls	r0, r2, #28
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	d458      	bmi.n	800c16c <__sflush_r+0xc0>
 800c0ba:	684b      	ldr	r3, [r1, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	dc05      	bgt.n	800c0cc <__sflush_r+0x20>
 800c0c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	dc02      	bgt.n	800c0cc <__sflush_r+0x20>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0ce:	2e00      	cmp	r6, #0
 800c0d0:	d0f9      	beq.n	800c0c6 <__sflush_r+0x1a>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0d8:	682f      	ldr	r7, [r5, #0]
 800c0da:	602b      	str	r3, [r5, #0]
 800c0dc:	d032      	beq.n	800c144 <__sflush_r+0x98>
 800c0de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	075a      	lsls	r2, r3, #29
 800c0e4:	d505      	bpl.n	800c0f2 <__sflush_r+0x46>
 800c0e6:	6863      	ldr	r3, [r4, #4]
 800c0e8:	1ac0      	subs	r0, r0, r3
 800c0ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0ec:	b10b      	cbz	r3, 800c0f2 <__sflush_r+0x46>
 800c0ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0f0:	1ac0      	subs	r0, r0, r3
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	6a21      	ldr	r1, [r4, #32]
 800c0fc:	47b0      	blx	r6
 800c0fe:	1c43      	adds	r3, r0, #1
 800c100:	89a3      	ldrh	r3, [r4, #12]
 800c102:	d106      	bne.n	800c112 <__sflush_r+0x66>
 800c104:	6829      	ldr	r1, [r5, #0]
 800c106:	291d      	cmp	r1, #29
 800c108:	d82c      	bhi.n	800c164 <__sflush_r+0xb8>
 800c10a:	4a2a      	ldr	r2, [pc, #168]	; (800c1b4 <__sflush_r+0x108>)
 800c10c:	40ca      	lsrs	r2, r1
 800c10e:	07d6      	lsls	r6, r2, #31
 800c110:	d528      	bpl.n	800c164 <__sflush_r+0xb8>
 800c112:	2200      	movs	r2, #0
 800c114:	6062      	str	r2, [r4, #4]
 800c116:	6922      	ldr	r2, [r4, #16]
 800c118:	04d9      	lsls	r1, r3, #19
 800c11a:	6022      	str	r2, [r4, #0]
 800c11c:	d504      	bpl.n	800c128 <__sflush_r+0x7c>
 800c11e:	1c42      	adds	r2, r0, #1
 800c120:	d101      	bne.n	800c126 <__sflush_r+0x7a>
 800c122:	682b      	ldr	r3, [r5, #0]
 800c124:	b903      	cbnz	r3, 800c128 <__sflush_r+0x7c>
 800c126:	6560      	str	r0, [r4, #84]	; 0x54
 800c128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c12a:	602f      	str	r7, [r5, #0]
 800c12c:	2900      	cmp	r1, #0
 800c12e:	d0ca      	beq.n	800c0c6 <__sflush_r+0x1a>
 800c130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c134:	4299      	cmp	r1, r3
 800c136:	d002      	beq.n	800c13e <__sflush_r+0x92>
 800c138:	4628      	mov	r0, r5
 800c13a:	f000 f923 	bl	800c384 <_free_r>
 800c13e:	2000      	movs	r0, #0
 800c140:	6360      	str	r0, [r4, #52]	; 0x34
 800c142:	e7c1      	b.n	800c0c8 <__sflush_r+0x1c>
 800c144:	6a21      	ldr	r1, [r4, #32]
 800c146:	2301      	movs	r3, #1
 800c148:	4628      	mov	r0, r5
 800c14a:	47b0      	blx	r6
 800c14c:	1c41      	adds	r1, r0, #1
 800c14e:	d1c7      	bne.n	800c0e0 <__sflush_r+0x34>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d0c4      	beq.n	800c0e0 <__sflush_r+0x34>
 800c156:	2b1d      	cmp	r3, #29
 800c158:	d001      	beq.n	800c15e <__sflush_r+0xb2>
 800c15a:	2b16      	cmp	r3, #22
 800c15c:	d101      	bne.n	800c162 <__sflush_r+0xb6>
 800c15e:	602f      	str	r7, [r5, #0]
 800c160:	e7b1      	b.n	800c0c6 <__sflush_r+0x1a>
 800c162:	89a3      	ldrh	r3, [r4, #12]
 800c164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c168:	81a3      	strh	r3, [r4, #12]
 800c16a:	e7ad      	b.n	800c0c8 <__sflush_r+0x1c>
 800c16c:	690f      	ldr	r7, [r1, #16]
 800c16e:	2f00      	cmp	r7, #0
 800c170:	d0a9      	beq.n	800c0c6 <__sflush_r+0x1a>
 800c172:	0793      	lsls	r3, r2, #30
 800c174:	bf18      	it	ne
 800c176:	2300      	movne	r3, #0
 800c178:	680e      	ldr	r6, [r1, #0]
 800c17a:	bf08      	it	eq
 800c17c:	694b      	ldreq	r3, [r1, #20]
 800c17e:	eba6 0807 	sub.w	r8, r6, r7
 800c182:	600f      	str	r7, [r1, #0]
 800c184:	608b      	str	r3, [r1, #8]
 800c186:	f1b8 0f00 	cmp.w	r8, #0
 800c18a:	dd9c      	ble.n	800c0c6 <__sflush_r+0x1a>
 800c18c:	4643      	mov	r3, r8
 800c18e:	463a      	mov	r2, r7
 800c190:	4628      	mov	r0, r5
 800c192:	6a21      	ldr	r1, [r4, #32]
 800c194:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c196:	47b0      	blx	r6
 800c198:	2800      	cmp	r0, #0
 800c19a:	dc06      	bgt.n	800c1aa <__sflush_r+0xfe>
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1a6:	81a3      	strh	r3, [r4, #12]
 800c1a8:	e78e      	b.n	800c0c8 <__sflush_r+0x1c>
 800c1aa:	4407      	add	r7, r0
 800c1ac:	eba8 0800 	sub.w	r8, r8, r0
 800c1b0:	e7e9      	b.n	800c186 <__sflush_r+0xda>
 800c1b2:	bf00      	nop
 800c1b4:	20400001 	.word	0x20400001

0800c1b8 <_fflush_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	690b      	ldr	r3, [r1, #16]
 800c1bc:	4605      	mov	r5, r0
 800c1be:	460c      	mov	r4, r1
 800c1c0:	b913      	cbnz	r3, 800c1c8 <_fflush_r+0x10>
 800c1c2:	2500      	movs	r5, #0
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	bd38      	pop	{r3, r4, r5, pc}
 800c1c8:	b118      	cbz	r0, 800c1d2 <_fflush_r+0x1a>
 800c1ca:	6983      	ldr	r3, [r0, #24]
 800c1cc:	b90b      	cbnz	r3, 800c1d2 <_fflush_r+0x1a>
 800c1ce:	f7ff f8f3 	bl	800b3b8 <__sinit>
 800c1d2:	4b14      	ldr	r3, [pc, #80]	; (800c224 <_fflush_r+0x6c>)
 800c1d4:	429c      	cmp	r4, r3
 800c1d6:	d11b      	bne.n	800c210 <_fflush_r+0x58>
 800c1d8:	686c      	ldr	r4, [r5, #4]
 800c1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d0ef      	beq.n	800c1c2 <_fflush_r+0xa>
 800c1e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1e4:	07d0      	lsls	r0, r2, #31
 800c1e6:	d404      	bmi.n	800c1f2 <_fflush_r+0x3a>
 800c1e8:	0599      	lsls	r1, r3, #22
 800c1ea:	d402      	bmi.n	800c1f2 <_fflush_r+0x3a>
 800c1ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1ee:	f7ff f981 	bl	800b4f4 <__retarget_lock_acquire_recursive>
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	4621      	mov	r1, r4
 800c1f6:	f7ff ff59 	bl	800c0ac <__sflush_r>
 800c1fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1fc:	4605      	mov	r5, r0
 800c1fe:	07da      	lsls	r2, r3, #31
 800c200:	d4e0      	bmi.n	800c1c4 <_fflush_r+0xc>
 800c202:	89a3      	ldrh	r3, [r4, #12]
 800c204:	059b      	lsls	r3, r3, #22
 800c206:	d4dd      	bmi.n	800c1c4 <_fflush_r+0xc>
 800c208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c20a:	f7ff f974 	bl	800b4f6 <__retarget_lock_release_recursive>
 800c20e:	e7d9      	b.n	800c1c4 <_fflush_r+0xc>
 800c210:	4b05      	ldr	r3, [pc, #20]	; (800c228 <_fflush_r+0x70>)
 800c212:	429c      	cmp	r4, r3
 800c214:	d101      	bne.n	800c21a <_fflush_r+0x62>
 800c216:	68ac      	ldr	r4, [r5, #8]
 800c218:	e7df      	b.n	800c1da <_fflush_r+0x22>
 800c21a:	4b04      	ldr	r3, [pc, #16]	; (800c22c <_fflush_r+0x74>)
 800c21c:	429c      	cmp	r4, r3
 800c21e:	bf08      	it	eq
 800c220:	68ec      	ldreq	r4, [r5, #12]
 800c222:	e7da      	b.n	800c1da <_fflush_r+0x22>
 800c224:	0800c79c 	.word	0x0800c79c
 800c228:	0800c7bc 	.word	0x0800c7bc
 800c22c:	0800c77c 	.word	0x0800c77c

0800c230 <_lseek_r>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	4604      	mov	r4, r0
 800c234:	4608      	mov	r0, r1
 800c236:	4611      	mov	r1, r2
 800c238:	2200      	movs	r2, #0
 800c23a:	4d05      	ldr	r5, [pc, #20]	; (800c250 <_lseek_r+0x20>)
 800c23c:	602a      	str	r2, [r5, #0]
 800c23e:	461a      	mov	r2, r3
 800c240:	f7f6 fb6f 	bl	8002922 <_lseek>
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	d102      	bne.n	800c24e <_lseek_r+0x1e>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	b103      	cbz	r3, 800c24e <_lseek_r+0x1e>
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
 800c250:	200015bc 	.word	0x200015bc

0800c254 <__swhatbuf_r>:
 800c254:	b570      	push	{r4, r5, r6, lr}
 800c256:	460e      	mov	r6, r1
 800c258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c25c:	4614      	mov	r4, r2
 800c25e:	2900      	cmp	r1, #0
 800c260:	461d      	mov	r5, r3
 800c262:	b096      	sub	sp, #88	; 0x58
 800c264:	da07      	bge.n	800c276 <__swhatbuf_r+0x22>
 800c266:	2300      	movs	r3, #0
 800c268:	602b      	str	r3, [r5, #0]
 800c26a:	89b3      	ldrh	r3, [r6, #12]
 800c26c:	061a      	lsls	r2, r3, #24
 800c26e:	d410      	bmi.n	800c292 <__swhatbuf_r+0x3e>
 800c270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c274:	e00e      	b.n	800c294 <__swhatbuf_r+0x40>
 800c276:	466a      	mov	r2, sp
 800c278:	f000 f908 	bl	800c48c <_fstat_r>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	dbf2      	blt.n	800c266 <__swhatbuf_r+0x12>
 800c280:	9a01      	ldr	r2, [sp, #4]
 800c282:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c286:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c28a:	425a      	negs	r2, r3
 800c28c:	415a      	adcs	r2, r3
 800c28e:	602a      	str	r2, [r5, #0]
 800c290:	e7ee      	b.n	800c270 <__swhatbuf_r+0x1c>
 800c292:	2340      	movs	r3, #64	; 0x40
 800c294:	2000      	movs	r0, #0
 800c296:	6023      	str	r3, [r4, #0]
 800c298:	b016      	add	sp, #88	; 0x58
 800c29a:	bd70      	pop	{r4, r5, r6, pc}

0800c29c <__smakebuf_r>:
 800c29c:	898b      	ldrh	r3, [r1, #12]
 800c29e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2a0:	079d      	lsls	r5, r3, #30
 800c2a2:	4606      	mov	r6, r0
 800c2a4:	460c      	mov	r4, r1
 800c2a6:	d507      	bpl.n	800c2b8 <__smakebuf_r+0x1c>
 800c2a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2ac:	6023      	str	r3, [r4, #0]
 800c2ae:	6123      	str	r3, [r4, #16]
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	6163      	str	r3, [r4, #20]
 800c2b4:	b002      	add	sp, #8
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}
 800c2b8:	466a      	mov	r2, sp
 800c2ba:	ab01      	add	r3, sp, #4
 800c2bc:	f7ff ffca 	bl	800c254 <__swhatbuf_r>
 800c2c0:	9900      	ldr	r1, [sp, #0]
 800c2c2:	4605      	mov	r5, r0
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	f7ff f917 	bl	800b4f8 <_malloc_r>
 800c2ca:	b948      	cbnz	r0, 800c2e0 <__smakebuf_r+0x44>
 800c2cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d0:	059a      	lsls	r2, r3, #22
 800c2d2:	d4ef      	bmi.n	800c2b4 <__smakebuf_r+0x18>
 800c2d4:	f023 0303 	bic.w	r3, r3, #3
 800c2d8:	f043 0302 	orr.w	r3, r3, #2
 800c2dc:	81a3      	strh	r3, [r4, #12]
 800c2de:	e7e3      	b.n	800c2a8 <__smakebuf_r+0xc>
 800c2e0:	4b0d      	ldr	r3, [pc, #52]	; (800c318 <__smakebuf_r+0x7c>)
 800c2e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2e4:	89a3      	ldrh	r3, [r4, #12]
 800c2e6:	6020      	str	r0, [r4, #0]
 800c2e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2ec:	81a3      	strh	r3, [r4, #12]
 800c2ee:	9b00      	ldr	r3, [sp, #0]
 800c2f0:	6120      	str	r0, [r4, #16]
 800c2f2:	6163      	str	r3, [r4, #20]
 800c2f4:	9b01      	ldr	r3, [sp, #4]
 800c2f6:	b15b      	cbz	r3, 800c310 <__smakebuf_r+0x74>
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2fe:	f000 f8d7 	bl	800c4b0 <_isatty_r>
 800c302:	b128      	cbz	r0, 800c310 <__smakebuf_r+0x74>
 800c304:	89a3      	ldrh	r3, [r4, #12]
 800c306:	f023 0303 	bic.w	r3, r3, #3
 800c30a:	f043 0301 	orr.w	r3, r3, #1
 800c30e:	81a3      	strh	r3, [r4, #12]
 800c310:	89a0      	ldrh	r0, [r4, #12]
 800c312:	4305      	orrs	r5, r0
 800c314:	81a5      	strh	r5, [r4, #12]
 800c316:	e7cd      	b.n	800c2b4 <__smakebuf_r+0x18>
 800c318:	0800b351 	.word	0x0800b351

0800c31c <memchr>:
 800c31c:	4603      	mov	r3, r0
 800c31e:	b510      	push	{r4, lr}
 800c320:	b2c9      	uxtb	r1, r1
 800c322:	4402      	add	r2, r0
 800c324:	4293      	cmp	r3, r2
 800c326:	4618      	mov	r0, r3
 800c328:	d101      	bne.n	800c32e <memchr+0x12>
 800c32a:	2000      	movs	r0, #0
 800c32c:	e003      	b.n	800c336 <memchr+0x1a>
 800c32e:	7804      	ldrb	r4, [r0, #0]
 800c330:	3301      	adds	r3, #1
 800c332:	428c      	cmp	r4, r1
 800c334:	d1f6      	bne.n	800c324 <memchr+0x8>
 800c336:	bd10      	pop	{r4, pc}

0800c338 <memmove>:
 800c338:	4288      	cmp	r0, r1
 800c33a:	b510      	push	{r4, lr}
 800c33c:	eb01 0402 	add.w	r4, r1, r2
 800c340:	d902      	bls.n	800c348 <memmove+0x10>
 800c342:	4284      	cmp	r4, r0
 800c344:	4623      	mov	r3, r4
 800c346:	d807      	bhi.n	800c358 <memmove+0x20>
 800c348:	1e43      	subs	r3, r0, #1
 800c34a:	42a1      	cmp	r1, r4
 800c34c:	d008      	beq.n	800c360 <memmove+0x28>
 800c34e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c352:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c356:	e7f8      	b.n	800c34a <memmove+0x12>
 800c358:	4601      	mov	r1, r0
 800c35a:	4402      	add	r2, r0
 800c35c:	428a      	cmp	r2, r1
 800c35e:	d100      	bne.n	800c362 <memmove+0x2a>
 800c360:	bd10      	pop	{r4, pc}
 800c362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c36a:	e7f7      	b.n	800c35c <memmove+0x24>

0800c36c <__malloc_lock>:
 800c36c:	4801      	ldr	r0, [pc, #4]	; (800c374 <__malloc_lock+0x8>)
 800c36e:	f7ff b8c1 	b.w	800b4f4 <__retarget_lock_acquire_recursive>
 800c372:	bf00      	nop
 800c374:	200015b4 	.word	0x200015b4

0800c378 <__malloc_unlock>:
 800c378:	4801      	ldr	r0, [pc, #4]	; (800c380 <__malloc_unlock+0x8>)
 800c37a:	f7ff b8bc 	b.w	800b4f6 <__retarget_lock_release_recursive>
 800c37e:	bf00      	nop
 800c380:	200015b4 	.word	0x200015b4

0800c384 <_free_r>:
 800c384:	b538      	push	{r3, r4, r5, lr}
 800c386:	4605      	mov	r5, r0
 800c388:	2900      	cmp	r1, #0
 800c38a:	d043      	beq.n	800c414 <_free_r+0x90>
 800c38c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c390:	1f0c      	subs	r4, r1, #4
 800c392:	2b00      	cmp	r3, #0
 800c394:	bfb8      	it	lt
 800c396:	18e4      	addlt	r4, r4, r3
 800c398:	f7ff ffe8 	bl	800c36c <__malloc_lock>
 800c39c:	4a1e      	ldr	r2, [pc, #120]	; (800c418 <_free_r+0x94>)
 800c39e:	6813      	ldr	r3, [r2, #0]
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	b933      	cbnz	r3, 800c3b2 <_free_r+0x2e>
 800c3a4:	6063      	str	r3, [r4, #4]
 800c3a6:	6014      	str	r4, [r2, #0]
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3ae:	f7ff bfe3 	b.w	800c378 <__malloc_unlock>
 800c3b2:	42a3      	cmp	r3, r4
 800c3b4:	d90a      	bls.n	800c3cc <_free_r+0x48>
 800c3b6:	6821      	ldr	r1, [r4, #0]
 800c3b8:	1862      	adds	r2, r4, r1
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	bf01      	itttt	eq
 800c3be:	681a      	ldreq	r2, [r3, #0]
 800c3c0:	685b      	ldreq	r3, [r3, #4]
 800c3c2:	1852      	addeq	r2, r2, r1
 800c3c4:	6022      	streq	r2, [r4, #0]
 800c3c6:	6063      	str	r3, [r4, #4]
 800c3c8:	6004      	str	r4, [r0, #0]
 800c3ca:	e7ed      	b.n	800c3a8 <_free_r+0x24>
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	b10b      	cbz	r3, 800c3d6 <_free_r+0x52>
 800c3d2:	42a3      	cmp	r3, r4
 800c3d4:	d9fa      	bls.n	800c3cc <_free_r+0x48>
 800c3d6:	6811      	ldr	r1, [r2, #0]
 800c3d8:	1850      	adds	r0, r2, r1
 800c3da:	42a0      	cmp	r0, r4
 800c3dc:	d10b      	bne.n	800c3f6 <_free_r+0x72>
 800c3de:	6820      	ldr	r0, [r4, #0]
 800c3e0:	4401      	add	r1, r0
 800c3e2:	1850      	adds	r0, r2, r1
 800c3e4:	4283      	cmp	r3, r0
 800c3e6:	6011      	str	r1, [r2, #0]
 800c3e8:	d1de      	bne.n	800c3a8 <_free_r+0x24>
 800c3ea:	6818      	ldr	r0, [r3, #0]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	4401      	add	r1, r0
 800c3f0:	6011      	str	r1, [r2, #0]
 800c3f2:	6053      	str	r3, [r2, #4]
 800c3f4:	e7d8      	b.n	800c3a8 <_free_r+0x24>
 800c3f6:	d902      	bls.n	800c3fe <_free_r+0x7a>
 800c3f8:	230c      	movs	r3, #12
 800c3fa:	602b      	str	r3, [r5, #0]
 800c3fc:	e7d4      	b.n	800c3a8 <_free_r+0x24>
 800c3fe:	6820      	ldr	r0, [r4, #0]
 800c400:	1821      	adds	r1, r4, r0
 800c402:	428b      	cmp	r3, r1
 800c404:	bf01      	itttt	eq
 800c406:	6819      	ldreq	r1, [r3, #0]
 800c408:	685b      	ldreq	r3, [r3, #4]
 800c40a:	1809      	addeq	r1, r1, r0
 800c40c:	6021      	streq	r1, [r4, #0]
 800c40e:	6063      	str	r3, [r4, #4]
 800c410:	6054      	str	r4, [r2, #4]
 800c412:	e7c9      	b.n	800c3a8 <_free_r+0x24>
 800c414:	bd38      	pop	{r3, r4, r5, pc}
 800c416:	bf00      	nop
 800c418:	200004b4 	.word	0x200004b4

0800c41c <_realloc_r>:
 800c41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41e:	4607      	mov	r7, r0
 800c420:	4614      	mov	r4, r2
 800c422:	460e      	mov	r6, r1
 800c424:	b921      	cbnz	r1, 800c430 <_realloc_r+0x14>
 800c426:	4611      	mov	r1, r2
 800c428:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c42c:	f7ff b864 	b.w	800b4f8 <_malloc_r>
 800c430:	b922      	cbnz	r2, 800c43c <_realloc_r+0x20>
 800c432:	f7ff ffa7 	bl	800c384 <_free_r>
 800c436:	4625      	mov	r5, r4
 800c438:	4628      	mov	r0, r5
 800c43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c43c:	f000 f848 	bl	800c4d0 <_malloc_usable_size_r>
 800c440:	42a0      	cmp	r0, r4
 800c442:	d20f      	bcs.n	800c464 <_realloc_r+0x48>
 800c444:	4621      	mov	r1, r4
 800c446:	4638      	mov	r0, r7
 800c448:	f7ff f856 	bl	800b4f8 <_malloc_r>
 800c44c:	4605      	mov	r5, r0
 800c44e:	2800      	cmp	r0, #0
 800c450:	d0f2      	beq.n	800c438 <_realloc_r+0x1c>
 800c452:	4631      	mov	r1, r6
 800c454:	4622      	mov	r2, r4
 800c456:	f7fe fec7 	bl	800b1e8 <memcpy>
 800c45a:	4631      	mov	r1, r6
 800c45c:	4638      	mov	r0, r7
 800c45e:	f7ff ff91 	bl	800c384 <_free_r>
 800c462:	e7e9      	b.n	800c438 <_realloc_r+0x1c>
 800c464:	4635      	mov	r5, r6
 800c466:	e7e7      	b.n	800c438 <_realloc_r+0x1c>

0800c468 <_read_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	4604      	mov	r4, r0
 800c46c:	4608      	mov	r0, r1
 800c46e:	4611      	mov	r1, r2
 800c470:	2200      	movs	r2, #0
 800c472:	4d05      	ldr	r5, [pc, #20]	; (800c488 <_read_r+0x20>)
 800c474:	602a      	str	r2, [r5, #0]
 800c476:	461a      	mov	r2, r3
 800c478:	f7f6 fa12 	bl	80028a0 <_read>
 800c47c:	1c43      	adds	r3, r0, #1
 800c47e:	d102      	bne.n	800c486 <_read_r+0x1e>
 800c480:	682b      	ldr	r3, [r5, #0]
 800c482:	b103      	cbz	r3, 800c486 <_read_r+0x1e>
 800c484:	6023      	str	r3, [r4, #0]
 800c486:	bd38      	pop	{r3, r4, r5, pc}
 800c488:	200015bc 	.word	0x200015bc

0800c48c <_fstat_r>:
 800c48c:	b538      	push	{r3, r4, r5, lr}
 800c48e:	2300      	movs	r3, #0
 800c490:	4d06      	ldr	r5, [pc, #24]	; (800c4ac <_fstat_r+0x20>)
 800c492:	4604      	mov	r4, r0
 800c494:	4608      	mov	r0, r1
 800c496:	4611      	mov	r1, r2
 800c498:	602b      	str	r3, [r5, #0]
 800c49a:	f7f6 fa29 	bl	80028f0 <_fstat>
 800c49e:	1c43      	adds	r3, r0, #1
 800c4a0:	d102      	bne.n	800c4a8 <_fstat_r+0x1c>
 800c4a2:	682b      	ldr	r3, [r5, #0]
 800c4a4:	b103      	cbz	r3, 800c4a8 <_fstat_r+0x1c>
 800c4a6:	6023      	str	r3, [r4, #0]
 800c4a8:	bd38      	pop	{r3, r4, r5, pc}
 800c4aa:	bf00      	nop
 800c4ac:	200015bc 	.word	0x200015bc

0800c4b0 <_isatty_r>:
 800c4b0:	b538      	push	{r3, r4, r5, lr}
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	4d05      	ldr	r5, [pc, #20]	; (800c4cc <_isatty_r+0x1c>)
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	4608      	mov	r0, r1
 800c4ba:	602b      	str	r3, [r5, #0]
 800c4bc:	f7f6 fa27 	bl	800290e <_isatty>
 800c4c0:	1c43      	adds	r3, r0, #1
 800c4c2:	d102      	bne.n	800c4ca <_isatty_r+0x1a>
 800c4c4:	682b      	ldr	r3, [r5, #0]
 800c4c6:	b103      	cbz	r3, 800c4ca <_isatty_r+0x1a>
 800c4c8:	6023      	str	r3, [r4, #0]
 800c4ca:	bd38      	pop	{r3, r4, r5, pc}
 800c4cc:	200015bc 	.word	0x200015bc

0800c4d0 <_malloc_usable_size_r>:
 800c4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4d4:	1f18      	subs	r0, r3, #4
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	bfbc      	itt	lt
 800c4da:	580b      	ldrlt	r3, [r1, r0]
 800c4dc:	18c0      	addlt	r0, r0, r3
 800c4de:	4770      	bx	lr

0800c4e0 <floor>:
 800c4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4e4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c4e8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c4ec:	2e13      	cmp	r6, #19
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	4607      	mov	r7, r0
 800c4f4:	460c      	mov	r4, r1
 800c4f6:	4605      	mov	r5, r0
 800c4f8:	dc34      	bgt.n	800c564 <floor+0x84>
 800c4fa:	2e00      	cmp	r6, #0
 800c4fc:	da15      	bge.n	800c52a <floor+0x4a>
 800c4fe:	a334      	add	r3, pc, #208	; (adr r3, 800c5d0 <floor+0xf0>)
 800c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c504:	f7f3 fe32 	bl	800016c <__adddf3>
 800c508:	2200      	movs	r2, #0
 800c50a:	2300      	movs	r3, #0
 800c50c:	f7f4 f862 	bl	80005d4 <__aeabi_dcmpgt>
 800c510:	b140      	cbz	r0, 800c524 <floor+0x44>
 800c512:	2c00      	cmp	r4, #0
 800c514:	da59      	bge.n	800c5ca <floor+0xea>
 800c516:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c51a:	ea57 0503 	orrs.w	r5, r7, r3
 800c51e:	d001      	beq.n	800c524 <floor+0x44>
 800c520:	2500      	movs	r5, #0
 800c522:	4c2d      	ldr	r4, [pc, #180]	; (800c5d8 <floor+0xf8>)
 800c524:	4623      	mov	r3, r4
 800c526:	462f      	mov	r7, r5
 800c528:	e025      	b.n	800c576 <floor+0x96>
 800c52a:	4a2c      	ldr	r2, [pc, #176]	; (800c5dc <floor+0xfc>)
 800c52c:	fa42 f806 	asr.w	r8, r2, r6
 800c530:	ea01 0208 	and.w	r2, r1, r8
 800c534:	4302      	orrs	r2, r0
 800c536:	d01e      	beq.n	800c576 <floor+0x96>
 800c538:	a325      	add	r3, pc, #148	; (adr r3, 800c5d0 <floor+0xf0>)
 800c53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53e:	f7f3 fe15 	bl	800016c <__adddf3>
 800c542:	2200      	movs	r2, #0
 800c544:	2300      	movs	r3, #0
 800c546:	f7f4 f845 	bl	80005d4 <__aeabi_dcmpgt>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	d0ea      	beq.n	800c524 <floor+0x44>
 800c54e:	2c00      	cmp	r4, #0
 800c550:	bfbe      	ittt	lt
 800c552:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c556:	fa43 f606 	asrlt.w	r6, r3, r6
 800c55a:	19a4      	addlt	r4, r4, r6
 800c55c:	2500      	movs	r5, #0
 800c55e:	ea24 0408 	bic.w	r4, r4, r8
 800c562:	e7df      	b.n	800c524 <floor+0x44>
 800c564:	2e33      	cmp	r6, #51	; 0x33
 800c566:	dd0a      	ble.n	800c57e <floor+0x9e>
 800c568:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c56c:	d103      	bne.n	800c576 <floor+0x96>
 800c56e:	f7f3 fdfd 	bl	800016c <__adddf3>
 800c572:	4607      	mov	r7, r0
 800c574:	460b      	mov	r3, r1
 800c576:	4638      	mov	r0, r7
 800c578:	4619      	mov	r1, r3
 800c57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c57e:	f04f 32ff 	mov.w	r2, #4294967295
 800c582:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c586:	fa22 f808 	lsr.w	r8, r2, r8
 800c58a:	ea18 0f00 	tst.w	r8, r0
 800c58e:	d0f2      	beq.n	800c576 <floor+0x96>
 800c590:	a30f      	add	r3, pc, #60	; (adr r3, 800c5d0 <floor+0xf0>)
 800c592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c596:	f7f3 fde9 	bl	800016c <__adddf3>
 800c59a:	2200      	movs	r2, #0
 800c59c:	2300      	movs	r3, #0
 800c59e:	f7f4 f819 	bl	80005d4 <__aeabi_dcmpgt>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d0be      	beq.n	800c524 <floor+0x44>
 800c5a6:	2c00      	cmp	r4, #0
 800c5a8:	da02      	bge.n	800c5b0 <floor+0xd0>
 800c5aa:	2e14      	cmp	r6, #20
 800c5ac:	d103      	bne.n	800c5b6 <floor+0xd6>
 800c5ae:	3401      	adds	r4, #1
 800c5b0:	ea25 0508 	bic.w	r5, r5, r8
 800c5b4:	e7b6      	b.n	800c524 <floor+0x44>
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c5bc:	fa03 f606 	lsl.w	r6, r3, r6
 800c5c0:	4435      	add	r5, r6
 800c5c2:	42bd      	cmp	r5, r7
 800c5c4:	bf38      	it	cc
 800c5c6:	18e4      	addcc	r4, r4, r3
 800c5c8:	e7f2      	b.n	800c5b0 <floor+0xd0>
 800c5ca:	2500      	movs	r5, #0
 800c5cc:	462c      	mov	r4, r5
 800c5ce:	e7a9      	b.n	800c524 <floor+0x44>
 800c5d0:	8800759c 	.word	0x8800759c
 800c5d4:	7e37e43c 	.word	0x7e37e43c
 800c5d8:	bff00000 	.word	0xbff00000
 800c5dc:	000fffff 	.word	0x000fffff

0800c5e0 <_init>:
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e2:	bf00      	nop
 800c5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e6:	bc08      	pop	{r3}
 800c5e8:	469e      	mov	lr, r3
 800c5ea:	4770      	bx	lr

0800c5ec <_fini>:
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ee:	bf00      	nop
 800c5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f2:	bc08      	pop	{r3}
 800c5f4:	469e      	mov	lr, r3
 800c5f6:	4770      	bx	lr
