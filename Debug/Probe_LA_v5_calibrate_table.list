
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800d9c8  0800d9c8  0001d9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbd4  0800dbd4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800dbd4  0800dbd4  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dbd4  0800dbd4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbd4  0800dbd4  0001dbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbd8  0800dbd8  0001dbd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800dbdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  200001f8  0800ddd0  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015c0  0800ddd0  000215c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fbc6  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a8b  00000000  00000000  0003fde3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00044870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  00045f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd2a  00000000  00000000  000473f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be83  00000000  00000000  00065122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097f01  00000000  00000000  00080fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118ea6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006934  00000000  00000000  00118efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d9b0 	.word	0x0800d9b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800d9b0 	.word	0x0800d9b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_frsub>:
 8000628:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800062c:	e002      	b.n	8000634 <__addsf3>
 800062e:	bf00      	nop

08000630 <__aeabi_fsub>:
 8000630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000634 <__addsf3>:
 8000634:	0042      	lsls	r2, r0, #1
 8000636:	bf1f      	itttt	ne
 8000638:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800063c:	ea92 0f03 	teqne	r2, r3
 8000640:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000644:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000648:	d06a      	beq.n	8000720 <__addsf3+0xec>
 800064a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800064e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000652:	bfc1      	itttt	gt
 8000654:	18d2      	addgt	r2, r2, r3
 8000656:	4041      	eorgt	r1, r0
 8000658:	4048      	eorgt	r0, r1
 800065a:	4041      	eorgt	r1, r0
 800065c:	bfb8      	it	lt
 800065e:	425b      	neglt	r3, r3
 8000660:	2b19      	cmp	r3, #25
 8000662:	bf88      	it	hi
 8000664:	4770      	bxhi	lr
 8000666:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800066a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000672:	bf18      	it	ne
 8000674:	4240      	negne	r0, r0
 8000676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800067a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800067e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000682:	bf18      	it	ne
 8000684:	4249      	negne	r1, r1
 8000686:	ea92 0f03 	teq	r2, r3
 800068a:	d03f      	beq.n	800070c <__addsf3+0xd8>
 800068c:	f1a2 0201 	sub.w	r2, r2, #1
 8000690:	fa41 fc03 	asr.w	ip, r1, r3
 8000694:	eb10 000c 	adds.w	r0, r0, ip
 8000698:	f1c3 0320 	rsb	r3, r3, #32
 800069c:	fa01 f103 	lsl.w	r1, r1, r3
 80006a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a4:	d502      	bpl.n	80006ac <__addsf3+0x78>
 80006a6:	4249      	negs	r1, r1
 80006a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006b0:	d313      	bcc.n	80006da <__addsf3+0xa6>
 80006b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b6:	d306      	bcc.n	80006c6 <__addsf3+0x92>
 80006b8:	0840      	lsrs	r0, r0, #1
 80006ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80006be:	f102 0201 	add.w	r2, r2, #1
 80006c2:	2afe      	cmp	r2, #254	; 0xfe
 80006c4:	d251      	bcs.n	800076a <__addsf3+0x136>
 80006c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ce:	bf08      	it	eq
 80006d0:	f020 0001 	biceq.w	r0, r0, #1
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	4770      	bx	lr
 80006da:	0049      	lsls	r1, r1, #1
 80006dc:	eb40 0000 	adc.w	r0, r0, r0
 80006e0:	3a01      	subs	r2, #1
 80006e2:	bf28      	it	cs
 80006e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006e8:	d2ed      	bcs.n	80006c6 <__addsf3+0x92>
 80006ea:	fab0 fc80 	clz	ip, r0
 80006ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80006f2:	ebb2 020c 	subs.w	r2, r2, ip
 80006f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006fa:	bfaa      	itet	ge
 80006fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000700:	4252      	neglt	r2, r2
 8000702:	4318      	orrge	r0, r3
 8000704:	bfbc      	itt	lt
 8000706:	40d0      	lsrlt	r0, r2
 8000708:	4318      	orrlt	r0, r3
 800070a:	4770      	bx	lr
 800070c:	f092 0f00 	teq	r2, #0
 8000710:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000714:	bf06      	itte	eq
 8000716:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800071a:	3201      	addeq	r2, #1
 800071c:	3b01      	subne	r3, #1
 800071e:	e7b5      	b.n	800068c <__addsf3+0x58>
 8000720:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000724:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000728:	bf18      	it	ne
 800072a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800072e:	d021      	beq.n	8000774 <__addsf3+0x140>
 8000730:	ea92 0f03 	teq	r2, r3
 8000734:	d004      	beq.n	8000740 <__addsf3+0x10c>
 8000736:	f092 0f00 	teq	r2, #0
 800073a:	bf08      	it	eq
 800073c:	4608      	moveq	r0, r1
 800073e:	4770      	bx	lr
 8000740:	ea90 0f01 	teq	r0, r1
 8000744:	bf1c      	itt	ne
 8000746:	2000      	movne	r0, #0
 8000748:	4770      	bxne	lr
 800074a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800074e:	d104      	bne.n	800075a <__addsf3+0x126>
 8000750:	0040      	lsls	r0, r0, #1
 8000752:	bf28      	it	cs
 8000754:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000758:	4770      	bx	lr
 800075a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800075e:	bf3c      	itt	cc
 8000760:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000764:	4770      	bxcc	lr
 8000766:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800076a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800076e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000772:	4770      	bx	lr
 8000774:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000778:	bf16      	itet	ne
 800077a:	4608      	movne	r0, r1
 800077c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000780:	4601      	movne	r1, r0
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	bf06      	itte	eq
 8000786:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800078a:	ea90 0f01 	teqeq	r0, r1
 800078e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000792:	4770      	bx	lr

08000794 <__aeabi_ui2f>:
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	e004      	b.n	80007a4 <__aeabi_i2f+0x8>
 800079a:	bf00      	nop

0800079c <__aeabi_i2f>:
 800079c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	ea5f 0c00 	movs.w	ip, r0
 80007a8:	bf08      	it	eq
 80007aa:	4770      	bxeq	lr
 80007ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007b0:	4601      	mov	r1, r0
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	e01c      	b.n	80007f2 <__aeabi_l2f+0x2a>

080007b8 <__aeabi_ul2f>:
 80007b8:	ea50 0201 	orrs.w	r2, r0, r1
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e00a      	b.n	80007dc <__aeabi_l2f+0x14>
 80007c6:	bf00      	nop

080007c8 <__aeabi_l2f>:
 80007c8:	ea50 0201 	orrs.w	r2, r0, r1
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007d4:	d502      	bpl.n	80007dc <__aeabi_l2f+0x14>
 80007d6:	4240      	negs	r0, r0
 80007d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007dc:	ea5f 0c01 	movs.w	ip, r1
 80007e0:	bf02      	ittt	eq
 80007e2:	4684      	moveq	ip, r0
 80007e4:	4601      	moveq	r1, r0
 80007e6:	2000      	moveq	r0, #0
 80007e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ec:	bf08      	it	eq
 80007ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007f6:	fabc f28c 	clz	r2, ip
 80007fa:	3a08      	subs	r2, #8
 80007fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000800:	db10      	blt.n	8000824 <__aeabi_l2f+0x5c>
 8000802:	fa01 fc02 	lsl.w	ip, r1, r2
 8000806:	4463      	add	r3, ip
 8000808:	fa00 fc02 	lsl.w	ip, r0, r2
 800080c:	f1c2 0220 	rsb	r2, r2, #32
 8000810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000814:	fa20 f202 	lsr.w	r2, r0, r2
 8000818:	eb43 0002 	adc.w	r0, r3, r2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f102 0220 	add.w	r2, r2, #32
 8000828:	fa01 fc02 	lsl.w	ip, r1, r2
 800082c:	f1c2 0220 	rsb	r2, r2, #32
 8000830:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000834:	fa21 f202 	lsr.w	r2, r1, r2
 8000838:	eb43 0002 	adc.w	r0, r3, r2
 800083c:	bf08      	it	eq
 800083e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000842:	4770      	bx	lr

08000844 <__aeabi_fmul>:
 8000844:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000848:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800084c:	bf1e      	ittt	ne
 800084e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000852:	ea92 0f0c 	teqne	r2, ip
 8000856:	ea93 0f0c 	teqne	r3, ip
 800085a:	d06f      	beq.n	800093c <__aeabi_fmul+0xf8>
 800085c:	441a      	add	r2, r3
 800085e:	ea80 0c01 	eor.w	ip, r0, r1
 8000862:	0240      	lsls	r0, r0, #9
 8000864:	bf18      	it	ne
 8000866:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800086a:	d01e      	beq.n	80008aa <__aeabi_fmul+0x66>
 800086c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000870:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000874:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000878:	fba0 3101 	umull	r3, r1, r0, r1
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000884:	bf3e      	ittt	cc
 8000886:	0049      	lslcc	r1, r1, #1
 8000888:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800088c:	005b      	lslcc	r3, r3, #1
 800088e:	ea40 0001 	orr.w	r0, r0, r1
 8000892:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000896:	2afd      	cmp	r2, #253	; 0xfd
 8000898:	d81d      	bhi.n	80008d6 <__aeabi_fmul+0x92>
 800089a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	4770      	bx	lr
 80008aa:	f090 0f00 	teq	r0, #0
 80008ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008b2:	bf08      	it	eq
 80008b4:	0249      	lsleq	r1, r1, #9
 80008b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008be:	3a7f      	subs	r2, #127	; 0x7f
 80008c0:	bfc2      	ittt	gt
 80008c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ca:	4770      	bxgt	lr
 80008cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	3a01      	subs	r2, #1
 80008d6:	dc5d      	bgt.n	8000994 <__aeabi_fmul+0x150>
 80008d8:	f112 0f19 	cmn.w	r2, #25
 80008dc:	bfdc      	itt	le
 80008de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008e2:	4770      	bxle	lr
 80008e4:	f1c2 0200 	rsb	r2, r2, #0
 80008e8:	0041      	lsls	r1, r0, #1
 80008ea:	fa21 f102 	lsr.w	r1, r1, r2
 80008ee:	f1c2 0220 	rsb	r2, r2, #32
 80008f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008fa:	f140 0000 	adc.w	r0, r0, #0
 80008fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000902:	bf08      	it	eq
 8000904:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000908:	4770      	bx	lr
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000912:	bf02      	ittt	eq
 8000914:	0040      	lsleq	r0, r0, #1
 8000916:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800091a:	3a01      	subeq	r2, #1
 800091c:	d0f9      	beq.n	8000912 <__aeabi_fmul+0xce>
 800091e:	ea40 000c 	orr.w	r0, r0, ip
 8000922:	f093 0f00 	teq	r3, #0
 8000926:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092a:	bf02      	ittt	eq
 800092c:	0049      	lsleq	r1, r1, #1
 800092e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000932:	3b01      	subeq	r3, #1
 8000934:	d0f9      	beq.n	800092a <__aeabi_fmul+0xe6>
 8000936:	ea41 010c 	orr.w	r1, r1, ip
 800093a:	e78f      	b.n	800085c <__aeabi_fmul+0x18>
 800093c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000940:	ea92 0f0c 	teq	r2, ip
 8000944:	bf18      	it	ne
 8000946:	ea93 0f0c 	teqne	r3, ip
 800094a:	d00a      	beq.n	8000962 <__aeabi_fmul+0x11e>
 800094c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000950:	bf18      	it	ne
 8000952:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000956:	d1d8      	bne.n	800090a <__aeabi_fmul+0xc6>
 8000958:	ea80 0001 	eor.w	r0, r0, r1
 800095c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000960:	4770      	bx	lr
 8000962:	f090 0f00 	teq	r0, #0
 8000966:	bf17      	itett	ne
 8000968:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800096c:	4608      	moveq	r0, r1
 800096e:	f091 0f00 	teqne	r1, #0
 8000972:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000976:	d014      	beq.n	80009a2 <__aeabi_fmul+0x15e>
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	d101      	bne.n	8000982 <__aeabi_fmul+0x13e>
 800097e:	0242      	lsls	r2, r0, #9
 8000980:	d10f      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000982:	ea93 0f0c 	teq	r3, ip
 8000986:	d103      	bne.n	8000990 <__aeabi_fmul+0x14c>
 8000988:	024b      	lsls	r3, r1, #9
 800098a:	bf18      	it	ne
 800098c:	4608      	movne	r0, r1
 800098e:	d108      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bx	lr

080009ac <__aeabi_fdiv>:
 80009ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b4:	bf1e      	ittt	ne
 80009b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ba:	ea92 0f0c 	teqne	r2, ip
 80009be:	ea93 0f0c 	teqne	r3, ip
 80009c2:	d069      	beq.n	8000a98 <__aeabi_fdiv+0xec>
 80009c4:	eba2 0203 	sub.w	r2, r2, r3
 80009c8:	ea80 0c01 	eor.w	ip, r0, r1
 80009cc:	0249      	lsls	r1, r1, #9
 80009ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009d2:	d037      	beq.n	8000a44 <__aeabi_fdiv+0x98>
 80009d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e4:	428b      	cmp	r3, r1
 80009e6:	bf38      	it	cc
 80009e8:	005b      	lslcc	r3, r3, #1
 80009ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009f2:	428b      	cmp	r3, r1
 80009f4:	bf24      	itt	cs
 80009f6:	1a5b      	subcs	r3, r3, r1
 80009f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a00:	bf24      	itt	cs
 8000a02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a0e:	bf24      	itt	cs
 8000a10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a1c:	bf24      	itt	cs
 8000a1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	bf18      	it	ne
 8000a2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a2e:	d1e0      	bne.n	80009f2 <__aeabi_fdiv+0x46>
 8000a30:	2afd      	cmp	r2, #253	; 0xfd
 8000a32:	f63f af50 	bhi.w	80008d6 <__aeabi_fmul+0x92>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4c:	327f      	adds	r2, #127	; 0x7f
 8000a4e:	bfc2      	ittt	gt
 8000a50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a58:	4770      	bxgt	lr
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	3a01      	subs	r2, #1
 8000a64:	e737      	b.n	80008d6 <__aeabi_fmul+0x92>
 8000a66:	f092 0f00 	teq	r2, #0
 8000a6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0040      	lsleq	r0, r0, #1
 8000a72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a76:	3a01      	subeq	r2, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fdiv+0xc2>
 8000a7a:	ea40 000c 	orr.w	r0, r0, ip
 8000a7e:	f093 0f00 	teq	r3, #0
 8000a82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a86:	bf02      	ittt	eq
 8000a88:	0049      	lsleq	r1, r1, #1
 8000a8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a8e:	3b01      	subeq	r3, #1
 8000a90:	d0f9      	beq.n	8000a86 <__aeabi_fdiv+0xda>
 8000a92:	ea41 010c 	orr.w	r1, r1, ip
 8000a96:	e795      	b.n	80009c4 <__aeabi_fdiv+0x18>
 8000a98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a9c:	ea92 0f0c 	teq	r2, ip
 8000aa0:	d108      	bne.n	8000ab4 <__aeabi_fdiv+0x108>
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	f47f af7d 	bne.w	80009a2 <__aeabi_fmul+0x15e>
 8000aa8:	ea93 0f0c 	teq	r3, ip
 8000aac:	f47f af70 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	e776      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ab4:	ea93 0f0c 	teq	r3, ip
 8000ab8:	d104      	bne.n	8000ac4 <__aeabi_fdiv+0x118>
 8000aba:	024b      	lsls	r3, r1, #9
 8000abc:	f43f af4c 	beq.w	8000958 <__aeabi_fmul+0x114>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e76e      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ac4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ac8:	bf18      	it	ne
 8000aca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ace:	d1ca      	bne.n	8000a66 <__aeabi_fdiv+0xba>
 8000ad0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ad4:	f47f af5c 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ad8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000adc:	f47f af3c 	bne.w	8000958 <__aeabi_fmul+0x114>
 8000ae0:	e75f      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ae2:	bf00      	nop

08000ae4 <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2102      	movs	r1, #2
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <ToggleLDAC+0x1c>)
 8000aee:	f004 fb6c 	bl	80051ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2102      	movs	r1, #2
 8000af6:	4802      	ldr	r0, [pc, #8]	; (8000b00 <ToggleLDAC+0x1c>)
 8000af8:	f004 fb67 	bl	80051ca <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010800 	.word	0x40010800

08000b04 <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2110      	movs	r1, #16
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <SendSPI+0x34>)
 8000b16:	f004 fb58 	bl	80051ca <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000b1a:	1cb9      	adds	r1, r7, #2
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2201      	movs	r2, #1
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f006 fcff 	bl	8007524 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <SendSPI+0x34>)
 8000b2c:	f004 fb4d 	bl	80051ca <HAL_GPIO_WritePin>

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010800 	.word	0x40010800

08000b3c <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b4e:	d302      	bcc.n	8000b56 <DAC_AD5322_Ch1+0x1a>
 8000b50:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b54:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000b56:	2300      	movs	r3, #0
 8000b58:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000b5e:	2300      	movs	r3, #0
 8000b60:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000b62:	2300      	movs	r3, #0
 8000b64:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000b66:	8afb      	ldrh	r3, [r7, #22]
 8000b68:	03db      	lsls	r3, r3, #15
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	8abb      	ldrh	r3, [r7, #20]
 8000b6e:	039b      	lsls	r3, r3, #14
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	8a7b      	ldrh	r3, [r7, #18]
 8000b78:	035b      	lsls	r3, r3, #13
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	8a3b      	ldrh	r3, [r7, #16]
 8000b82:	031b      	lsls	r3, r3, #12
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000b94:	f023 030f 	bic.w	r3, r3, #15
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa8 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000bb4:	89bb      	ldrh	r3, [r7, #12]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffa3 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000bbe:	f7ff ff91 	bl	8000ae4 <ToggleLDAC>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bdc:	d302      	bcc.n	8000be4 <DAC_AD5322_Ch2+0x1a>
 8000bde:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000be2:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000be4:	2301      	movs	r3, #1
 8000be6:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000be8:	2301      	movs	r3, #1
 8000bea:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000bec:	2300      	movs	r3, #0
 8000bee:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	03db      	lsls	r3, r3, #15
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	8abb      	ldrh	r3, [r7, #20]
 8000bfc:	039b      	lsls	r3, r3, #14
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	8a7b      	ldrh	r3, [r7, #18]
 8000c06:	035b      	lsls	r3, r3, #13
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	8a3b      	ldrh	r3, [r7, #16]
 8000c10:	031b      	lsls	r3, r3, #12
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c22:	f023 030f 	bic.w	r3, r3, #15
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff61 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000c42:	89bb      	ldrh	r3, [r7, #12]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff5c 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000c4c:	f7ff ff4a 	bl	8000ae4 <ToggleLDAC>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c6e:	d302      	bcc.n	8000c76 <DAC_AD5322_Ch1Ch2+0x1e>
 8000c70:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c74:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000c76:	883b      	ldrh	r3, [r7, #0]
 8000c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c7c:	d302      	bcc.n	8000c84 <DAC_AD5322_Ch1Ch2+0x2c>
 8000c7e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c82:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000c84:	2300      	movs	r3, #0
 8000c86:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000c88:	2301      	movs	r3, #1
 8000c8a:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000c90:	2300      	movs	r3, #0
 8000c92:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000c94:	8afb      	ldrh	r3, [r7, #22]
 8000c96:	03db      	lsls	r3, r3, #15
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	8abb      	ldrh	r3, [r7, #20]
 8000c9c:	039b      	lsls	r3, r3, #14
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	8a7b      	ldrh	r3, [r7, #18]
 8000ca6:	035b      	lsls	r3, r3, #13
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	8a3b      	ldrh	r3, [r7, #16]
 8000cb0:	031b      	lsls	r3, r3, #12
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cbe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000cc2:	f023 030f 	bic.w	r3, r3, #15
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000cd8:	89bb      	ldrh	r3, [r7, #12]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff11 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000ce2:	89bb      	ldrh	r3, [r7, #12]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff0c 	bl	8000b04 <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000cec:	2301      	movs	r3, #1
 8000cee:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000cfc:	8afb      	ldrh	r3, [r7, #22]
 8000cfe:	03db      	lsls	r3, r3, #15
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	8abb      	ldrh	r3, [r7, #20]
 8000d04:	039b      	lsls	r3, r3, #14
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	8a7b      	ldrh	r3, [r7, #18]
 8000d0e:	035b      	lsls	r3, r3, #13
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	8a3b      	ldrh	r3, [r7, #16]
 8000d18:	031b      	lsls	r3, r3, #12
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000d40:	89bb      	ldrh	r3, [r7, #12]
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fedd 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000d4a:	89bb      	ldrh	r3, [r7, #12]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fed8 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000d54:	f7ff fec6 	bl	8000ae4 <ToggleLDAC>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <crete_calibration_table>:
 * @Purpose: Calibration table volt2dac
 *******************************************************************************/
#include <logic_calibration_table.h>
#include <math.h>

void crete_calibration_table(Table_t *calibTable){//de
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

     calibTable->dacValA_m12[0] = 0x0;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	819a      	strh	r2, [r3, #12]
     calibTable->dacValA_m12[1] = 0x189;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f240 1289 	movw	r2, #393	; 0x189
 8000d74:	81da      	strh	r2, [r3, #14]
     calibTable->dacValA_m12[2] = 0x31d;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f240 321d 	movw	r2, #797	; 0x31d
 8000d7c:	821a      	strh	r2, [r3, #16]
     calibTable->dacValA_m12[3] = 0x223;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f240 2223 	movw	r2, #547	; 0x223
 8000d84:	825a      	strh	r2, [r3, #18]
     calibTable->dacValA_m12[4] = 0x21f;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f240 221f 	movw	r2, #543	; 0x21f
 8000d8c:	829a      	strh	r2, [r3, #20]
     calibTable->dacValA_m12[5] = 0x19d;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f240 129d 	movw	r2, #413	; 0x19d
 8000d94:	82da      	strh	r2, [r3, #22]
     calibTable->dacValA_m12[6] = 0x27e;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f240 227e 	movw	r2, #638	; 0x27e
 8000d9c:	831a      	strh	r2, [r3, #24]
     calibTable->dacValA_m12[7] = 0x297;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f240 2297 	movw	r2, #663	; 0x297
 8000da4:	835a      	strh	r2, [r3, #26]
     calibTable->dacValA_m12[8] = 0x27e;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f240 227e 	movw	r2, #638	; 0x27e
 8000dac:	839a      	strh	r2, [r3, #28]
     calibTable->dacValA_m12[9] = 0x297;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f240 2297 	movw	r2, #663	; 0x297
 8000db4:	83da      	strh	r2, [r3, #30]
     calibTable->dacValA_m12[10] = 0x1a1;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f240 12a1 	movw	r2, #417	; 0x1a1
 8000dbc:	841a      	strh	r2, [r3, #32]
     calibTable->dacValA_m12[11] = 0x223;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f240 2223 	movw	r2, #547	; 0x223
 8000dc4:	845a      	strh	r2, [r3, #34]	; 0x22
     calibTable->dacValA_m12[12] = 0x21e;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f240 221e 	movw	r2, #542	; 0x21e
 8000dcc:	849a      	strh	r2, [r3, #36]	; 0x24
     calibTable->dacValA_m12[13] = 0x1b6;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8000dd4:	84da      	strh	r2, [r3, #38]	; 0x26
     calibTable->dacValA_m12[14] = 0x297;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f240 2297 	movw	r2, #663	; 0x297
 8000ddc:	851a      	strh	r2, [r3, #40]	; 0x28
     calibTable->dacValA_m12[15] = 0x188;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8000de4:	855a      	strh	r2, [r3, #42]	; 0x2a
     calibTable->dacValA_m12[16] = 0x223;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f240 2223 	movw	r2, #547	; 0x223
 8000dec:	859a      	strh	r2, [r3, #44]	; 0x2c
     calibTable->dacValA_m12[17] = 0x1a6;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8000df4:	85da      	strh	r2, [r3, #46]	; 0x2e
     calibTable->dacValA_m12[18] = 0x233;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f240 2233 	movw	r2, #563	; 0x233
 8000dfc:	861a      	strh	r2, [r3, #48]	; 0x30
     calibTable->dacValA_m12[19] = 0x29b;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f240 229b 	movw	r2, #667	; 0x29b
 8000e04:	865a      	strh	r2, [r3, #50]	; 0x32
     calibTable->dacValA_m12[20] = 0x21e;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f240 221e 	movw	r2, #542	; 0x21e
 8000e0c:	869a      	strh	r2, [r3, #52]	; 0x34
     calibTable->dacValA_m12[21] = 0x1b6;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8000e14:	86da      	strh	r2, [r3, #54]	; 0x36
     calibTable->dacValA_m12[22] = 0x2e6;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f240 22e6 	movw	r2, #742	; 0x2e6
 8000e1c:	871a      	strh	r2, [r3, #56]	; 0x38
     calibTable->dacValA_m12[23] = 0x233;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f240 2233 	movw	r2, #563	; 0x233
 8000e24:	875a      	strh	r2, [r3, #58]	; 0x3a
     calibTable->dacValA_m12[24] = 0x184;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8000e2c:	879a      	strh	r2, [r3, #60]	; 0x3c
     calibTable->dacValA_m12[25] = 0x27e;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f240 227e 	movw	r2, #638	; 0x27e
 8000e34:	87da      	strh	r2, [r3, #62]	; 0x3e
     calibTable->dacValA_m12[26] = 0x855;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f640 0255 	movw	r2, #2133	; 0x855
 8000e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
     calibTable->dacValA_m12[27] = 0x877;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f640 0277 	movw	r2, #2167	; 0x877
 8000e46:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
     calibTable->dacValA_m12[28] = 0x8b1;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f640 02b1 	movw	r2, #2225	; 0x8b1
 8000e50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
     calibTable->dacValA_m12[29] = 0x8cb;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f640 02cb 	movw	r2, #2251	; 0x8cb
 8000e5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
     calibTable->dacValA_m12[30] = 0x8fc;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000e64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
     calibTable->dacValA_m12[31] = 0x960;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000e6e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
     calibTable->dacValA_m12[32] = 0x953;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f640 1253 	movw	r2, #2387	; 0x953
 8000e78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
     calibTable->dacValA_m12[33] = 0x992;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f640 1292 	movw	r2, #2450	; 0x992
 8000e82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
     calibTable->dacValA_m12[34] = 0x9c4;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000e8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
     calibTable->dacValA_m12[35] = 0x9d6;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f640 12d6 	movw	r2, #2518	; 0x9d6
 8000e96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
     calibTable->dacValA_m12[36] = 0xa02;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f640 2202 	movw	r2, #2562	; 0xa02
 8000ea0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
     calibTable->dacValA_m12[37] = 0xa2f;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f640 222f 	movw	r2, #2607	; 0xa2f
 8000eaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
     calibTable->dacValA_m12[38] = 0x9dd;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f640 12dd 	movw	r2, #2525	; 0x9dd
 8000eb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
     calibTable->dacValA_m12[39] = 0xa89;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f640 2289 	movw	r2, #2697	; 0xa89
 8000ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
     calibTable->dacValA_m12[40] = 0xab4;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f640 22b4 	movw	r2, #2740	; 0xab4
 8000ec8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
     calibTable->dacValA_m12[41] = 0xae1;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f640 22e1 	movw	r2, #2785	; 0xae1
 8000ed2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
     calibTable->dacValA_m12[42] = 0xb0b;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f640 320b 	movw	r2, #2827	; 0xb0b
 8000edc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
     calibTable->dacValA_m12[43] = 0xb36;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f640 3236 	movw	r2, #2870	; 0xb36
 8000ee6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
     calibTable->dacValA_m12[44] = 0xb8b;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f640 328b 	movw	r2, #2955	; 0xb8b
 8000ef0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
     calibTable->dacValA_m12[45] = 0xb8f;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f640 328f 	movw	r2, #2959	; 0xb8f
 8000efa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
     calibTable->dacValA_m12[46] = 0xbd1;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f640 32d1 	movw	r2, #3025	; 0xbd1
 8000f04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
     calibTable->dacValA_m12[47] = 0xbe6;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f640 32e6 	movw	r2, #3046	; 0xbe6
 8000f0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
     calibTable->dacValA_m12[48] = 0xc12;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f640 4212 	movw	r2, #3090	; 0xc12
 8000f18:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
     calibTable->dacValA_m12[49] = 0xc4e;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f640 424e 	movw	r2, #3150	; 0xc4e
 8000f22:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
     calibTable->dacValA_m12[50] = 0xc69;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f640 4269 	movw	r2, #3177	; 0xc69
 8000f2c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
     calibTable->dacValA_m12[51] = 0xc96;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f640 4296 	movw	r2, #3222	; 0xc96
 8000f36:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
     calibTable->dacValA_m12[52] = 0xcd5;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8000f40:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
     calibTable->dacValA_m12[53] = 0xcee;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f640 42ee 	movw	r2, #3310	; 0xcee
 8000f4a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
     calibTable->dacValA_m12[54] = 0xd19;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f640 5219 	movw	r2, #3353	; 0xd19
 8000f54:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
     calibTable->dacValA_m12[55] = 0xc98;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f640 4298 	movw	r2, #3224	; 0xc98
 8000f5e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
     calibTable->dacValA_m12[56] = 0xd70;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f44f 6257 	mov.w	r2, #3440	; 0xd70
 8000f68:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
     calibTable->dacValA_m12[57] = 0xd99;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f640 5299 	movw	r2, #3481	; 0xd99
 8000f72:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
     calibTable->dacValA_m12[58] = 0xdb7;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f640 52b7 	movw	r2, #3511	; 0xdb7
 8000f7c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
     calibTable->dacValA_m12[59] = 0xdca;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f640 52ca 	movw	r2, #3530	; 0xdca
 8000f86:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
     calibTable->dacValA_m12[60] = 0xdd8;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f640 52d8 	movw	r2, #3544	; 0xdd8
 8000f90:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
     calibTable->dacValA_m12[61] = 0xddc;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f640 52dc 	movw	r2, #3548	; 0xddc
 8000f9a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
     calibTable->dacValA_m12[62] = 0xde9;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f640 52e9 	movw	r2, #3561	; 0xde9
 8000fa4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
     calibTable->dacValA_m12[63] = 0xded;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f640 52ed 	movw	r2, #3565	; 0xded
 8000fae:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
     calibTable->dacValA_m12[64] = 0xdf4;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f640 52f4 	movw	r2, #3572	; 0xdf4
 8000fb8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
     calibTable->dacValA_m12[65] = 0xdf9;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f640 52f9 	movw	r2, #3577	; 0xdf9
 8000fc2:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
     calibTable->dacValA_m12[66] = 0xdfc;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f640 52fc 	movw	r2, #3580	; 0xdfc
 8000fcc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
     calibTable->dacValA_m12[67] = 0xdf7;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f640 52f7 	movw	r2, #3575	; 0xdf7
 8000fd6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
     calibTable->dacValA_m12[68] = 0xdf8;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f640 52f8 	movw	r2, #3576	; 0xdf8
 8000fe0:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
     calibTable->dacValA_m12[69] = 0xdfa;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f640 52fa 	movw	r2, #3578	; 0xdfa
 8000fea:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
     calibTable->dacValA_m12[70] = 0xdfc;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f640 52fc 	movw	r2, #3580	; 0xdfc
 8000ff4:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
     calibTable->dacValA_m12[71] = 0xdfe;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f640 52fe 	movw	r2, #3582	; 0xdfe
 8000ffe:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
     calibTable->dacValA_m12[72] = 0xe01;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f640 6201 	movw	r2, #3585	; 0xe01
 8001008:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
     calibTable->dacValA_m12[73] = 0xe01;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f640 6201 	movw	r2, #3585	; 0xe01
 8001012:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
     calibTable->dacValA_m12[74] = 0xe06;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f640 6206 	movw	r2, #3590	; 0xe06
 800101c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
     calibTable->dacValA_m12[75] = 0xe06;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f640 6206 	movw	r2, #3590	; 0xe06
 8001026:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
     calibTable->dacValA_m12[76] = 0xe0a;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f640 620a 	movw	r2, #3594	; 0xe0a
 8001030:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
     calibTable->dacValA_m12[77] = 0xe0e;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f640 620e 	movw	r2, #3598	; 0xe0e
 800103a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
     calibTable->dacValA_m12[78] = 0xe05;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f640 6205 	movw	r2, #3589	; 0xe05
 8001044:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
     calibTable->dacValA_m12[79] = 0xe01;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f640 6201 	movw	r2, #3585	; 0xe01
 800104e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
     calibTable->dacValA_m12[80] = 0xe09;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f640 6209 	movw	r2, #3593	; 0xe09
 8001058:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
     calibTable->dacValA_m12[81] = 0x7d0;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001062:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
     calibTable->dacValA_m12[82] = 0xe06;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f640 6206 	movw	r2, #3590	; 0xe06
 800106c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
     calibTable->dacValA_m12[83] = 0x7d0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001076:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
     calibTable->dacValA_m12[84] = 0xe06;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f640 6206 	movw	r2, #3590	; 0xe06
 8001080:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
     calibTable->dacValA_m12[85] = 0xe00;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800108a:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
     calibTable->dacValA_m12[86] = 0xdfe;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f640 52fe 	movw	r2, #3582	; 0xdfe
 8001094:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
     calibTable->dacValA_m12[87] = 0x1000;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800109e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

     calibTable->dacValB_m12[0] = 0x0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
     calibTable->dacValB_m12[1] = 0x1bb;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f240 12bb 	movw	r2, #443	; 0x1bb
 80010b0:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
     calibTable->dacValB_m12[2] = 0x1ed;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f240 12ed 	movw	r2, #493	; 0x1ed
 80010ba:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
     calibTable->dacValB_m12[3] = 0x251;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f240 2251 	movw	r2, #593	; 0x251
 80010c4:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
     calibTable->dacValB_m12[4] = 0x1bb;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f240 12bb 	movw	r2, #443	; 0x1bb
 80010ce:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
     calibTable->dacValB_m12[5] = 0x1ed;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f240 12ed 	movw	r2, #493	; 0x1ed
 80010d8:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
     calibTable->dacValB_m12[6] = 0x2ce;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f240 22ce 	movw	r2, #718	; 0x2ce
 80010e2:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
     calibTable->dacValB_m12[7] = 0x1d4;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80010ec:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
     calibTable->dacValB_m12[8] = 0x1f2;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 80010f6:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
     calibTable->dacValB_m12[9] = 0x1d9;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f240 12d9 	movw	r2, #473	; 0x1d9
 8001100:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
     calibTable->dacValB_m12[10] = 0x1bc;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800110a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
     calibTable->dacValB_m12[11] = 0x1bb;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001114:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
     calibTable->dacValB_m12[12] = 0x1f3;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800111e:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
     calibTable->dacValB_m12[13] = 0x1d9;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f240 12d9 	movw	r2, #473	; 0x1d9
 8001128:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
     calibTable->dacValB_m12[14] = 0x1ed;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f240 12ed 	movw	r2, #493	; 0x1ed
 8001132:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
     calibTable->dacValB_m12[15] = 0x1f3;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f240 12f3 	movw	r2, #499	; 0x1f3
 800113c:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
     calibTable->dacValB_m12[16] = 0x1c0;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001146:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
     calibTable->dacValB_m12[17] = 0x1c1;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001150:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
     calibTable->dacValB_m12[18] = 0x1c0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800115a:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
     calibTable->dacValB_m12[19] = 0x2ec;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8001164:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
     calibTable->dacValB_m12[20] = 0x1d4;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800116e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
     calibTable->dacValB_m12[21] = 0x251;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f240 2251 	movw	r2, #593	; 0x251
 8001178:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
     calibTable->dacValB_m12[22] = 0x1d4;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8001182:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
     calibTable->dacValB_m12[23] = 0x1d4;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800118c:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
     calibTable->dacValB_m12[24] = 0x2ce;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f240 22ce 	movw	r2, #718	; 0x2ce
 8001196:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
     calibTable->dacValB_m12[25] = 0x1cb;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f240 12cb 	movw	r2, #459	; 0x1cb
 80011a0:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
     calibTable->dacValB_m12[26] = 0x857;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f640 0257 	movw	r2, #2135	; 0x857
 80011aa:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
     calibTable->dacValB_m12[27] = 0x877;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f640 0277 	movw	r2, #2167	; 0x877
 80011b4:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
     calibTable->dacValB_m12[28] = 0x8a4;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f640 02a4 	movw	r2, #2212	; 0x8a4
 80011be:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
     calibTable->dacValB_m12[29] = 0x8cf;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f640 02cf 	movw	r2, #2255	; 0x8cf
 80011c8:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
     calibTable->dacValB_m12[30] = 0x8fb;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f640 02fb 	movw	r2, #2299	; 0x8fb
 80011d2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
     calibTable->dacValB_m12[31] = 0x926;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f640 1226 	movw	r2, #2342	; 0x926
 80011dc:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
     calibTable->dacValB_m12[32] = 0x954;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f640 1254 	movw	r2, #2388	; 0x954
 80011e6:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
     calibTable->dacValB_m12[33] = 0x980;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f44f 6218 	mov.w	r2, #2432	; 0x980
 80011f0:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
     calibTable->dacValB_m12[34] = 0x9ac;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f640 12ac 	movw	r2, #2476	; 0x9ac
 80011fa:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
     calibTable->dacValB_m12[35] = 0x9d8;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f640 12d8 	movw	r2, #2520	; 0x9d8
 8001204:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
     calibTable->dacValB_m12[36] = 0xa04;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f640 2204 	movw	r2, #2564	; 0xa04
 800120e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
     calibTable->dacValB_m12[37] = 0xa30;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f44f 6223 	mov.w	r2, #2608	; 0xa30
 8001218:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
     calibTable->dacValB_m12[38] = 0xa5b;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f640 225b 	movw	r2, #2651	; 0xa5b
 8001222:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
     calibTable->dacValB_m12[39] = 0xa86;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f640 2286 	movw	r2, #2694	; 0xa86
 800122c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
     calibTable->dacValB_m12[40] = 0xab2;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f640 22b2 	movw	r2, #2738	; 0xab2
 8001236:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
     calibTable->dacValB_m12[41] = 0xadf;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f640 22df 	movw	r2, #2783	; 0xadf
 8001240:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
     calibTable->dacValB_m12[42] = 0xb0b;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f640 320b 	movw	r2, #2827	; 0xb0b
 800124a:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
     calibTable->dacValB_m12[43] = 0xb36;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f640 3236 	movw	r2, #2870	; 0xb36
 8001254:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
     calibTable->dacValB_m12[44] = 0xb63;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f640 3263 	movw	r2, #2915	; 0xb63
 800125e:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
     calibTable->dacValB_m12[45] = 0xb8e;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f640 328e 	movw	r2, #2958	; 0xb8e
 8001268:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
     calibTable->dacValB_m12[46] = 0xbea;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f640 32ea 	movw	r2, #3050	; 0xbea
 8001272:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
     calibTable->dacValB_m12[47] = 0xafd;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f640 22fd 	movw	r2, #2813	; 0xafd
 800127c:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
     calibTable->dacValB_m12[48] = 0xb91;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f640 3291 	movw	r2, #2961	; 0xb91
 8001286:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
     calibTable->dacValB_m12[49] = 0xc3d;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f640 423d 	movw	r2, #3133	; 0xc3d
 8001290:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
     calibTable->dacValB_m12[50] = 0xc69;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f640 4269 	movw	r2, #3177	; 0xc69
 800129a:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
     calibTable->dacValB_m12[51] = 0xbbe;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f640 32be 	movw	r2, #3006	; 0xbbe
 80012a4:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
     calibTable->dacValB_m12[52] = 0xcc2;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f640 42c2 	movw	r2, #3266	; 0xcc2
 80012ae:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
     calibTable->dacValB_m12[53] = 0xd20;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80012b8:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
     calibTable->dacValB_m12[54] = 0xd19;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f640 5219 	movw	r2, #3353	; 0xd19
 80012c2:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
     calibTable->dacValB_m12[55] = 0xd44;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f640 5244 	movw	r2, #3396	; 0xd44
 80012cc:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
     calibTable->dacValB_m12[56] = 0xd6e;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f640 526e 	movw	r2, #3438	; 0xd6e
 80012d6:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
     calibTable->dacValB_m12[57] = 0xd92;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f640 5292 	movw	r2, #3474	; 0xd92
 80012e0:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
     calibTable->dacValB_m12[58] = 0xd17;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f640 5217 	movw	r2, #3351	; 0xd17
 80012ea:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
     calibTable->dacValB_m12[59] = 0xdc5;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80012f4:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
     calibTable->dacValB_m12[60] = 0xdc2;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f640 52c2 	movw	r2, #3522	; 0xdc2
 80012fe:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
     calibTable->dacValB_m12[61] = 0xdcb;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f640 52cb 	movw	r2, #3531	; 0xdcb
 8001308:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
     calibTable->dacValB_m12[62] = 0xdd4;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f640 52d4 	movw	r2, #3540	; 0xdd4
 8001312:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
     calibTable->dacValB_m12[63] = 0xdd9;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f640 52d9 	movw	r2, #3545	; 0xdd9
 800131c:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
     calibTable->dacValB_m12[64] = 0xe09;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f640 6209 	movw	r2, #3593	; 0xe09
 8001326:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
     calibTable->dacValB_m12[65] = 0xc6a;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f640 426a 	movw	r2, #3178	; 0xc6a
 8001330:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
     calibTable->dacValB_m12[66] = 0xbbc;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f640 32bc 	movw	r2, #3004	; 0xbbc
 800133a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
     calibTable->dacValB_m12[67] = 0xc5d;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f640 425d 	movw	r2, #3165	; 0xc5d
 8001344:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
     calibTable->dacValB_m12[68] = 0xc4f;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f640 424f 	movw	r2, #3151	; 0xc4f
 800134e:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
     calibTable->dacValB_m12[69] = 0xcde;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f640 42de 	movw	r2, #3294	; 0xcde
 8001358:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
     calibTable->dacValB_m12[70] = 0xc52;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f640 4252 	movw	r2, #3154	; 0xc52
 8001362:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
     calibTable->dacValB_m12[71] = 0xdde;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f640 52de 	movw	r2, #3550	; 0xdde
 800136c:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
     calibTable->dacValB_m12[72] = 0xdff;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f640 52ff 	movw	r2, #3583	; 0xdff
 8001376:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
     calibTable->dacValB_m12[73] = 0xe05;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f640 6205 	movw	r2, #3589	; 0xe05
 8001380:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
     calibTable->dacValB_m12[74] = 0xe0b;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f640 620b 	movw	r2, #3595	; 0xe0b
 800138a:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
     calibTable->dacValB_m12[75] = 0xc80;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001394:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152
     calibTable->dacValB_m12[76] = 0xc1f;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f640 421f 	movw	r2, #3103	; 0xc1f
 800139e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
     calibTable->dacValB_m12[77] = 0xe0d;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f640 620d 	movw	r2, #3597	; 0xe0d
 80013a8:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
     calibTable->dacValB_m12[78] = 0xc77;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f640 4277 	movw	r2, #3191	; 0xc77
 80013b2:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
     calibTable->dacValB_m12[79] = 0xd49;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f640 5249 	movw	r2, #3401	; 0xd49
 80013bc:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
     calibTable->dacValB_m12[80] = 0xd55;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f640 5255 	movw	r2, #3413	; 0xd55
 80013c6:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
     calibTable->dacValB_m12[81] = 0xcf5;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f640 42f5 	movw	r2, #3317	; 0xcf5
 80013d0:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
     calibTable->dacValB_m12[82] = 0xe14;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f640 6214 	movw	r2, #3604	; 0xe14
 80013da:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
     calibTable->dacValB_m12[83] = 0xd7f;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f640 527f 	movw	r2, #3455	; 0xd7f
 80013e4:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
     calibTable->dacValB_m12[84] = 0xd2a;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f640 522a 	movw	r2, #3370	; 0xd2a
 80013ee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
     calibTable->dacValB_m12[85] = 0xd51;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f640 5251 	movw	r2, #3409	; 0xd51
 80013f8:	f8a3 2166 	strh.w	r2, [r3, #358]	; 0x166
     calibTable->dacValB_m12[86] = 0xde0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f44f 625e 	mov.w	r2, #3552	; 0xde0
 8001402:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
     calibTable->dacValB_m12[87] = 0x1000;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800140c:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a

     calibTable->dacValA_m27[0] = 0x0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
     calibTable->dacValA_m27[1] = 0x1f1;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f240 12f1 	movw	r2, #497	; 0x1f1
 800141e:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
     calibTable->dacValA_m27[2] = 0x1a6;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8001428:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
     calibTable->dacValA_m27[3] = 0x21e;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f240 221e 	movw	r2, #542	; 0x21e
 8001432:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
     calibTable->dacValA_m27[4] = 0x233;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f240 2233 	movw	r2, #563	; 0x233
 800143c:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
     calibTable->dacValA_m27[5] = 0x27e;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f240 227e 	movw	r2, #638	; 0x27e
 8001446:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
     calibTable->dacValA_m27[6] = 0x27e;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f240 227e 	movw	r2, #638	; 0x27e
 8001450:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
     calibTable->dacValA_m27[7] = 0x1bb;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f240 12bb 	movw	r2, #443	; 0x1bb
 800145a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
     calibTable->dacValA_m27[8] = 0x1bb;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001464:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
     calibTable->dacValA_m27[9] = 0x1bb;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f240 12bb 	movw	r2, #443	; 0x1bb
 800146e:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
     calibTable->dacValA_m27[10] = 0x477;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f240 4277 	movw	r2, #1143	; 0x477
 8001478:	f8a3 2180 	strh.w	r2, [r3, #384]	; 0x180
     calibTable->dacValA_m27[11] = 0x5a3;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f240 52a3 	movw	r2, #1443	; 0x5a3
 8001482:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
     calibTable->dacValA_m27[12] = 0x1c4;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 800148c:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
     calibTable->dacValA_m27[13] = 0x1bb;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001496:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
     calibTable->dacValA_m27[14] = 0x1bb;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014a0:	f8a3 2188 	strh.w	r2, [r3, #392]	; 0x188
     calibTable->dacValA_m27[15] = 0x29c;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f44f 7227 	mov.w	r2, #668	; 0x29c
 80014aa:	f8a3 218a 	strh.w	r2, [r3, #394]	; 0x18a
     calibTable->dacValA_m27[16] = 0x1bf;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f240 12bf 	movw	r2, #447	; 0x1bf
 80014b4:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
     calibTable->dacValA_m27[17] = 0x1bb;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014be:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
     calibTable->dacValA_m27[18] = 0x386;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f240 3286 	movw	r2, #902	; 0x386
 80014c8:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
     calibTable->dacValA_m27[19] = 0x1bf;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f240 12bf 	movw	r2, #447	; 0x1bf
 80014d2:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
     calibTable->dacValA_m27[20] = 0x1bb;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014dc:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
     calibTable->dacValA_m27[21] = 0x283;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f240 2283 	movw	r2, #643	; 0x283
 80014e6:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
     calibTable->dacValA_m27[22] = 0x37d;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f240 327d 	movw	r2, #893	; 0x37d
 80014f0:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
     calibTable->dacValA_m27[23] = 0x283;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f240 2283 	movw	r2, #643	; 0x283
 80014fa:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
     calibTable->dacValA_m27[24] = 0x37d;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f240 327d 	movw	r2, #893	; 0x37d
 8001504:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
     calibTable->dacValA_m27[25] = 0x37d;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f240 327d 	movw	r2, #893	; 0x37d
 800150e:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
     calibTable->dacValA_m27[26] = 0x843;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f640 0243 	movw	r2, #2115	; 0x843
 8001518:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
     calibTable->dacValA_m27[27] = 0x843;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f640 0243 	movw	r2, #2115	; 0x843
 8001522:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
     calibTable->dacValA_m27[28] = 0x83e;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f640 023e 	movw	r2, #2110	; 0x83e
 800152c:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
     calibTable->dacValA_m27[29] = 0x869;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f640 0269 	movw	r2, #2153	; 0x869
 8001536:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
     calibTable->dacValA_m27[30] = 0x870;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f44f 6207 	mov.w	r2, #2160	; 0x870
 8001540:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
     calibTable->dacValA_m27[31] = 0x877;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f640 0277 	movw	r2, #2167	; 0x877
 800154a:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
     calibTable->dacValA_m27[32] = 0x7d9;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f240 72d9 	movw	r2, #2009	; 0x7d9
 8001554:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
     calibTable->dacValA_m27[33] = 0x7e3;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f240 72e3 	movw	r2, #2019	; 0x7e3
 800155e:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
     calibTable->dacValA_m27[34] = 0x864;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f640 0264 	movw	r2, #2148	; 0x864
 8001568:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
     calibTable->dacValA_m27[35] = 0x800;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001572:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
     calibTable->dacValA_m27[36] = 0x864;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f640 0264 	movw	r2, #2148	; 0x864
 800157c:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
     calibTable->dacValA_m27[37] = 0x828;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f640 0228 	movw	r2, #2088	; 0x828
 8001586:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
     calibTable->dacValA_m27[38] = 0x8cc;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f640 02cc 	movw	r2, #2252	; 0x8cc
 8001590:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
     calibTable->dacValA_m27[39] = 0x8d2;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f640 02d2 	movw	r2, #2258	; 0x8d2
 800159a:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
     calibTable->dacValA_m27[40] = 0x7fc;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80015a4:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
     calibTable->dacValA_m27[41] = 0x864;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f640 0264 	movw	r2, #2148	; 0x864
 80015ae:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
     calibTable->dacValA_m27[42] = 0x7fc;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80015b8:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
     calibTable->dacValA_m27[43] = 0x8ff;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f640 02ff 	movw	r2, #2303	; 0x8ff
 80015c2:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
     calibTable->dacValA_m27[44] = 0x87e;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f640 027e 	movw	r2, #2174	; 0x87e
 80015cc:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
     calibTable->dacValA_m27[45] = 0x834;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f640 0234 	movw	r2, #2100	; 0x834
 80015d6:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
     calibTable->dacValA_m27[46] = 0x828;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f640 0228 	movw	r2, #2088	; 0x828
 80015e0:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
     calibTable->dacValA_m27[47] = 0x847;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f640 0247 	movw	r2, #2119	; 0x847
 80015ea:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
     calibTable->dacValA_m27[48] = 0x800;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015f4:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
     calibTable->dacValA_m27[49] = 0x87d;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f640 027d 	movw	r2, #2173	; 0x87d
 80015fe:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
     calibTable->dacValA_m27[50] = 0x94a;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f640 124a 	movw	r2, #2378	; 0x94a
 8001608:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0
     calibTable->dacValA_m27[51] = 0x977;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f640 1277 	movw	r2, #2423	; 0x977
 8001612:	f8a3 21d2 	strh.w	r2, [r3, #466]	; 0x1d2
     calibTable->dacValA_m27[52] = 0x7de;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f240 72de 	movw	r2, #2014	; 0x7de
 800161c:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
     calibTable->dacValA_m27[53] = 0x864;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f640 0264 	movw	r2, #2148	; 0x864
 8001626:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
     calibTable->dacValA_m27[54] = 0x974;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f640 1274 	movw	r2, #2420	; 0x974
 8001630:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
     calibTable->dacValA_m27[55] = 0x90f;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f640 120f 	movw	r2, #2319	; 0x90f
 800163a:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da
     calibTable->dacValA_m27[56] = 0x8dd;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f640 02dd 	movw	r2, #2269	; 0x8dd
 8001644:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
     calibTable->dacValA_m27[57] = 0x874;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f640 0274 	movw	r2, #2164	; 0x874
 800164e:	f8a3 21de 	strh.w	r2, [r3, #478]	; 0x1de
     calibTable->dacValA_m27[58] = 0x7d4;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8001658:	f8a3 21e0 	strh.w	r2, [r3, #480]	; 0x1e0
     calibTable->dacValA_m27[59] = 0x7e3;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f240 72e3 	movw	r2, #2019	; 0x7e3
 8001662:	f8a3 21e2 	strh.w	r2, [r3, #482]	; 0x1e2
     calibTable->dacValA_m27[60] = 0x7e8;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 800166c:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
     calibTable->dacValA_m27[61] = 0x914;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f640 1214 	movw	r2, #2324	; 0x914
 8001676:	f8a3 21e6 	strh.w	r2, [r3, #486]	; 0x1e6
     calibTable->dacValA_m27[62] = 0x9d3;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f640 12d3 	movw	r2, #2515	; 0x9d3
 8001680:	f8a3 21e8 	strh.w	r2, [r3, #488]	; 0x1e8
     calibTable->dacValA_m27[63] = 0x919;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f640 1219 	movw	r2, #2329	; 0x919
 800168a:	f8a3 21ea 	strh.w	r2, [r3, #490]	; 0x1ea
     calibTable->dacValA_m27[64] = 0x8fb;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8001694:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
     calibTable->dacValA_m27[65] = 0x7e4;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f240 72e4 	movw	r2, #2020	; 0x7e4
 800169e:	f8a3 21ee 	strh.w	r2, [r3, #494]	; 0x1ee
     calibTable->dacValA_m27[66] = 0x86b;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f640 026b 	movw	r2, #2155	; 0x86b
 80016a8:	f8a3 21f0 	strh.w	r2, [r3, #496]	; 0x1f0
     calibTable->dacValA_m27[67] = 0x814;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f640 0214 	movw	r2, #2068	; 0x814
 80016b2:	f8a3 21f2 	strh.w	r2, [r3, #498]	; 0x1f2
     calibTable->dacValA_m27[68] = 0x823;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f640 0223 	movw	r2, #2083	; 0x823
 80016bc:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
     calibTable->dacValA_m27[69] = 0x826;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f640 0226 	movw	r2, #2086	; 0x826
 80016c6:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
     calibTable->dacValA_m27[70] = 0x8af;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f640 02af 	movw	r2, #2223	; 0x8af
 80016d0:	f8a3 21f8 	strh.w	r2, [r3, #504]	; 0x1f8
     calibTable->dacValA_m27[71] = 0x804;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f640 0204 	movw	r2, #2052	; 0x804
 80016da:	f8a3 21fa 	strh.w	r2, [r3, #506]	; 0x1fa
     calibTable->dacValA_m27[72] = 0xa44;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f640 2244 	movw	r2, #2628	; 0xa44
 80016e4:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
     calibTable->dacValA_m27[73] = 0x7ef;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f240 72ef 	movw	r2, #2031	; 0x7ef
 80016ee:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
     calibTable->dacValA_m27[74] = 0x8f0;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f44f 620f 	mov.w	r2, #2288	; 0x8f0
 80016f8:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
     calibTable->dacValA_m27[75] = 0x853;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f640 0253 	movw	r2, #2131	; 0x853
 8001702:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
     calibTable->dacValA_m27[76] = 0x7d4;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f240 72d4 	movw	r2, #2004	; 0x7d4
 800170c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
     calibTable->dacValA_m27[77] = 0x900;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8001716:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
     calibTable->dacValA_m27[78] = 0x949;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f640 1249 	movw	r2, #2377	; 0x949
 8001720:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
     calibTable->dacValA_m27[79] = 0x951;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f640 1251 	movw	r2, #2385	; 0x951
 800172a:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
     calibTable->dacValA_m27[80] = 0xa80;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f44f 6228 	mov.w	r2, #2688	; 0xa80
 8001734:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
     calibTable->dacValA_m27[81] = 0x832;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f640 0232 	movw	r2, #2098	; 0x832
 800173e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
     calibTable->dacValA_m27[82] = 0x899;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f640 0299 	movw	r2, #2201	; 0x899
 8001748:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
     calibTable->dacValA_m27[83] = 0x879;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f640 0279 	movw	r2, #2169	; 0x879
 8001752:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
     calibTable->dacValA_m27[84] = 0xac1;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f640 22c1 	movw	r2, #2753	; 0xac1
 800175c:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
     calibTable->dacValA_m27[85] = 0x8b7;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f640 02b7 	movw	r2, #2231	; 0x8b7
 8001766:	f8a3 2216 	strh.w	r2, [r3, #534]	; 0x216
     calibTable->dacValA_m27[86] = 0x8dd;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f640 02dd 	movw	r2, #2269	; 0x8dd
 8001770:	f8a3 2218 	strh.w	r2, [r3, #536]	; 0x218
     calibTable->dacValA_m27[87] = 0x7d0;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800177a:	f8a3 221a 	strh.w	r2, [r3, #538]	; 0x21a
     calibTable->dacValA_m27[88] = 0x897;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f640 0297 	movw	r2, #2199	; 0x897
 8001784:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
     calibTable->dacValA_m27[89] = 0x7d3;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f240 72d3 	movw	r2, #2003	; 0x7d3
 800178e:	f8a3 221e 	strh.w	r2, [r3, #542]	; 0x21e
     calibTable->dacValA_m27[90] = 0x94b;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f640 124b 	movw	r2, #2379	; 0x94b
 8001798:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
     calibTable->dacValA_m27[91] = 0x8e9;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f640 02e9 	movw	r2, #2281	; 0x8e9
 80017a2:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
     calibTable->dacValA_m27[92] = 0x8e9;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f640 02e9 	movw	r2, #2281	; 0x8e9
 80017ac:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
     calibTable->dacValA_m27[93] = 0x7da;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f240 72da 	movw	r2, #2010	; 0x7da
 80017b6:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226
     calibTable->dacValA_m27[94] = 0x836;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f640 0236 	movw	r2, #2102	; 0x836
 80017c0:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
     calibTable->dacValA_m27[95] = 0x802;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f640 0202 	movw	r2, #2050	; 0x802
 80017ca:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a
     calibTable->dacValA_m27[96] = 0x836;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f640 0236 	movw	r2, #2102	; 0x836
 80017d4:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
     calibTable->dacValA_m27[97] = 0x802;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f640 0202 	movw	r2, #2050	; 0x802
 80017de:	f8a3 222e 	strh.w	r2, [r3, #558]	; 0x22e
     calibTable->dacValA_m27[98] = 0x8cc;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f640 02cc 	movw	r2, #2252	; 0x8cc
 80017e8:	f8a3 2230 	strh.w	r2, [r3, #560]	; 0x230
     calibTable->dacValA_m27[99] = 0x8e3;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f640 02e3 	movw	r2, #2275	; 0x8e3
 80017f2:	f8a3 2232 	strh.w	r2, [r3, #562]	; 0x232
     calibTable->dacValA_m27[100] = 0x8cc;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f640 02cc 	movw	r2, #2252	; 0x8cc
 80017fc:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
     calibTable->dacValA_m27[101] = 0x917;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f640 1217 	movw	r2, #2327	; 0x917
 8001806:	f8a3 2236 	strh.w	r2, [r3, #566]	; 0x236
     calibTable->dacValA_m27[102] = 0x917;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f640 1217 	movw	r2, #2327	; 0x917
 8001810:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
     calibTable->dacValA_m27[103] = 0x931;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f640 1231 	movw	r2, #2353	; 0x931
 800181a:	f8a3 223a 	strh.w	r2, [r3, #570]	; 0x23a
     calibTable->dacValA_m27[104] = 0x930;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001824:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
     calibTable->dacValA_m27[105] = 0xb95;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f640 3295 	movw	r2, #2965	; 0xb95
 800182e:	f8a3 223e 	strh.w	r2, [r3, #574]	; 0x23e
     calibTable->dacValA_m27[106] = 0xb90;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f44f 6239 	mov.w	r2, #2960	; 0xb90
 8001838:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
     calibTable->dacValA_m27[107] = 0xbc2;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f640 32c2 	movw	r2, #3010	; 0xbc2
 8001842:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
     calibTable->dacValA_m27[108] = 0x962;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f640 1262 	movw	r2, #2402	; 0x962
 800184c:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
     calibTable->dacValA_m27[109] = 0x992;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f640 1292 	movw	r2, #2450	; 0x992
 8001856:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
     calibTable->dacValA_m27[110] = 0x992;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f640 1292 	movw	r2, #2450	; 0x992
 8001860:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
     calibTable->dacValA_m27[111] = 0x9ab;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f640 12ab 	movw	r2, #2475	; 0x9ab
 800186a:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
     calibTable->dacValA_m27[112] = 0x994;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f640 1294 	movw	r2, #2452	; 0x994
 8001874:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
     calibTable->dacValA_m27[113] = 0xa9f;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f640 229f 	movw	r2, #2719	; 0xa9f
 800187e:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e
     calibTable->dacValA_m27[114] = 0xbd0;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
 8001888:	f8a3 2250 	strh.w	r2, [r3, #592]	; 0x250
     calibTable->dacValA_m27[115] = 0xbea;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f640 32ea 	movw	r2, #3050	; 0xbea
 8001892:	f8a3 2252 	strh.w	r2, [r3, #594]	; 0x252
     calibTable->dacValA_m27[116] = 0x9c6;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f640 12c6 	movw	r2, #2502	; 0x9c6
 800189c:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
     calibTable->dacValA_m27[117] = 0xb31;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f640 3231 	movw	r2, #2865	; 0xb31
 80018a6:	f8a3 2256 	strh.w	r2, [r3, #598]	; 0x256
     calibTable->dacValA_m27[118] = 0xc1c;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f640 421c 	movw	r2, #3100	; 0xc1c
 80018b0:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
     calibTable->dacValA_m27[119] = 0x9ec;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f640 12ec 	movw	r2, #2540	; 0x9ec
 80018ba:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
     calibTable->dacValA_m27[120] = 0x9f8;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f640 12f8 	movw	r2, #2552	; 0x9f8
 80018c4:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
     calibTable->dacValA_m27[121] = 0xa0f;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f640 220f 	movw	r2, #2575	; 0xa0f
 80018ce:	f8a3 225e 	strh.w	r2, [r3, #606]	; 0x25e
     calibTable->dacValA_m27[122] = 0x9fa;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f640 12fa 	movw	r2, #2554	; 0x9fa
 80018d8:	f8a3 2260 	strh.w	r2, [r3, #608]	; 0x260
     calibTable->dacValA_m27[123] = 0xc46;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f640 4246 	movw	r2, #3142	; 0xc46
 80018e2:	f8a3 2262 	strh.w	r2, [r3, #610]	; 0x262
     calibTable->dacValA_m27[124] = 0xc43;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f640 4243 	movw	r2, #3139	; 0xc43
 80018ec:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
     calibTable->dacValA_m27[125] = 0xa1e;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f640 221e 	movw	r2, #2590	; 0xa1e
 80018f6:	f8a3 2266 	strh.w	r2, [r3, #614]	; 0x266
     calibTable->dacValA_m27[126] = 0xa32;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f640 2232 	movw	r2, #2610	; 0xa32
 8001900:	f8a3 2268 	strh.w	r2, [r3, #616]	; 0x268
     calibTable->dacValA_m27[127] = 0xa32;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f640 2232 	movw	r2, #2610	; 0xa32
 800190a:	f8a3 226a 	strh.w	r2, [r3, #618]	; 0x26a
     calibTable->dacValA_m27[128] = 0xa39;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f640 2239 	movw	r2, #2617	; 0xa39
 8001914:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
     calibTable->dacValA_m27[129] = 0xa50;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f44f 6225 	mov.w	r2, #2640	; 0xa50
 800191e:	f8a3 226e 	strh.w	r2, [r3, #622]	; 0x26e
     calibTable->dacValA_m27[130] = 0xcb0;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f44f 624b 	mov.w	r2, #3248	; 0xcb0
 8001928:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
     calibTable->dacValA_m27[131] = 0xa5a;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f640 225a 	movw	r2, #2650	; 0xa5a
 8001932:	f8a3 2272 	strh.w	r2, [r3, #626]	; 0x272
     calibTable->dacValA_m27[132] = 0xa64;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f640 2264 	movw	r2, #2660	; 0xa64
 800193c:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
     calibTable->dacValA_m27[133] = 0xcb0;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f44f 624b 	mov.w	r2, #3248	; 0xcb0
 8001946:	f8a3 2276 	strh.w	r2, [r3, #630]	; 0x276
     calibTable->dacValA_m27[134] = 0xa76;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f640 2276 	movw	r2, #2678	; 0xa76
 8001950:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
     calibTable->dacValA_m27[135] = 0xcbf;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f640 42bf 	movw	r2, #3263	; 0xcbf
 800195a:	f8a3 227a 	strh.w	r2, [r3, #634]	; 0x27a
     calibTable->dacValA_m27[136] = 0xa8c;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001964:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
     calibTable->dacValA_m27[137] = 0xa95;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f640 2295 	movw	r2, #2709	; 0xa95
 800196e:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
     calibTable->dacValA_m27[138] = 0xcd9;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f640 42d9 	movw	r2, #3289	; 0xcd9
 8001978:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
     calibTable->dacValA_m27[139] = 0xaaa;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8001982:	f8a3 2282 	strh.w	r2, [r3, #642]	; 0x282
     calibTable->dacValA_m27[140] = 0xbcb;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f640 32cb 	movw	r2, #3019	; 0xbcb
 800198c:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
     calibTable->dacValA_m27[141] = 0xbcf;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f640 32cf 	movw	r2, #3023	; 0xbcf
 8001996:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
     calibTable->dacValA_m27[142] = 0xacb;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f640 22cb 	movw	r2, #2763	; 0xacb
 80019a0:	f8a3 2288 	strh.w	r2, [r3, #648]	; 0x288
     calibTable->dacValA_m27[143] = 0xae1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f640 22e1 	movw	r2, #2785	; 0xae1
 80019aa:	f8a3 228a 	strh.w	r2, [r3, #650]	; 0x28a
     calibTable->dacValA_m27[144] = 0xaeb;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f640 22eb 	movw	r2, #2795	; 0xaeb
 80019b4:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
     calibTable->dacValA_m27[145] = 0xaeb;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f640 22eb 	movw	r2, #2795	; 0xaeb
 80019be:	f8a3 228e 	strh.w	r2, [r3, #654]	; 0x28e
     calibTable->dacValA_m27[146] = 0xaec;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f640 22ec 	movw	r2, #2796	; 0xaec
 80019c8:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
     calibTable->dacValA_m27[147] = 0xaf4;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f640 22f4 	movw	r2, #2804	; 0xaf4
 80019d2:	f8a3 2292 	strh.w	r2, [r3, #658]	; 0x292
     calibTable->dacValA_m27[148] = 0xafc;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f640 22fc 	movw	r2, #2812	; 0xafc
 80019dc:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
     calibTable->dacValA_m27[149] = 0xc38;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f640 4238 	movw	r2, #3128	; 0xc38
 80019e6:	f8a3 2296 	strh.w	r2, [r3, #662]	; 0x296
     calibTable->dacValA_m27[150] = 0xb18;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f640 3218 	movw	r2, #2840	; 0xb18
 80019f0:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
     calibTable->dacValA_m27[151] = 0xb11;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f640 3211 	movw	r2, #2833	; 0xb11
 80019fa:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
     calibTable->dacValA_m27[152] = 0xb27;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f640 3227 	movw	r2, #2855	; 0xb27
 8001a04:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
     calibTable->dacValA_m27[153] = 0xb25;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f640 3225 	movw	r2, #2853	; 0xb25
 8001a0e:	f8a3 229e 	strh.w	r2, [r3, #670]	; 0x29e
     calibTable->dacValA_m27[154] = 0xb2c;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f640 322c 	movw	r2, #2860	; 0xb2c
 8001a18:	f8a3 22a0 	strh.w	r2, [r3, #672]	; 0x2a0
     calibTable->dacValA_m27[155] = 0xb31;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f640 3231 	movw	r2, #2865	; 0xb31
 8001a22:	f8a3 22a2 	strh.w	r2, [r3, #674]	; 0x2a2
     calibTable->dacValA_m27[156] = 0xb45;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f640 3245 	movw	r2, #2885	; 0xb45
 8001a2c:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
     calibTable->dacValA_m27[157] = 0xb56;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f640 3256 	movw	r2, #2902	; 0xb56
 8001a36:	f8a3 22a6 	strh.w	r2, [r3, #678]	; 0x2a6
     calibTable->dacValA_m27[158] = 0xb54;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f640 3254 	movw	r2, #2900	; 0xb54
 8001a40:	f8a3 22a8 	strh.w	r2, [r3, #680]	; 0x2a8
     calibTable->dacValA_m27[159] = 0xb56;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f640 3256 	movw	r2, #2902	; 0xb56
 8001a4a:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
     calibTable->dacValA_m27[160] = 0xb63;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f640 3263 	movw	r2, #2915	; 0xb63
 8001a54:	f8a3 22ac 	strh.w	r2, [r3, #684]	; 0x2ac
     calibTable->dacValA_m27[161] = 0xb62;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f640 3262 	movw	r2, #2914	; 0xb62
 8001a5e:	f8a3 22ae 	strh.w	r2, [r3, #686]	; 0x2ae
     calibTable->dacValA_m27[162] = 0x1000;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a68:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0

     calibTable->dacValB_m27[0] = 0x0;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f8a3 22b2 	strh.w	r2, [r3, #690]	; 0x2b2
     calibTable->dacValB_m27[1] = 0x1c1;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001a7a:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
     calibTable->dacValB_m27[2] = 0x1d5;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001a84:	f8a3 22b6 	strh.w	r2, [r3, #694]	; 0x2b6
     calibTable->dacValB_m27[3] = 0x1d5;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001a8e:	f8a3 22b8 	strh.w	r2, [r3, #696]	; 0x2b8
     calibTable->dacValB_m27[4] = 0x1d5;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001a98:	f8a3 22ba 	strh.w	r2, [r3, #698]	; 0x2ba
     calibTable->dacValB_m27[5] = 0x1d5;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001aa2:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
     calibTable->dacValB_m27[6] = 0x1d5;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001aac:	f8a3 22be 	strh.w	r2, [r3, #702]	; 0x2be
     calibTable->dacValB_m27[7] = 0x1d5;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001ab6:	f8a3 22c0 	strh.w	r2, [r3, #704]	; 0x2c0
     calibTable->dacValB_m27[8] = 0x1d9;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f240 12d9 	movw	r2, #473	; 0x1d9
 8001ac0:	f8a3 22c2 	strh.w	r2, [r3, #706]	; 0x2c2
     calibTable->dacValB_m27[9] = 0x1f8;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8001aca:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
     calibTable->dacValB_m27[10] = 0x1bb;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001ad4:	f8a3 22c6 	strh.w	r2, [r3, #710]	; 0x2c6
     calibTable->dacValB_m27[11] = 0x1bb;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001ade:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
     calibTable->dacValB_m27[12] = 0x1bb;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001ae8:	f8a3 22ca 	strh.w	r2, [r3, #714]	; 0x2ca
     calibTable->dacValB_m27[13] = 0x571;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f240 5271 	movw	r2, #1393	; 0x571
 8001af2:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
     calibTable->dacValB_m27[14] = 0x1bb;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001afc:	f8a3 22ce 	strh.w	r2, [r3, #718]	; 0x2ce
     calibTable->dacValB_m27[15] = 0x283;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f240 2283 	movw	r2, #643	; 0x283
 8001b06:	f8a3 22d0 	strh.w	r2, [r3, #720]	; 0x2d0
     calibTable->dacValB_m27[16] = 0x1cf;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f240 12cf 	movw	r2, #463	; 0x1cf
 8001b10:	f8a3 22d2 	strh.w	r2, [r3, #722]	; 0x2d2
     calibTable->dacValB_m27[17] = 0x1c9;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f240 12c9 	movw	r2, #457	; 0x1c9
 8001b1a:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
     calibTable->dacValB_m27[18] = 0x1bf;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001b24:	f8a3 22d6 	strh.w	r2, [r3, #726]	; 0x2d6
     calibTable->dacValB_m27[19] = 0x1bb;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001b2e:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8
     calibTable->dacValB_m27[20] = 0x21f;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f240 221f 	movw	r2, #543	; 0x21f
 8001b38:	f8a3 22da 	strh.w	r2, [r3, #730]	; 0x2da
     calibTable->dacValB_m27[21] = 0x1cf;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f240 12cf 	movw	r2, #463	; 0x1cf
 8001b42:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
     calibTable->dacValB_m27[22] = 0x1e8;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001b4c:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
     calibTable->dacValB_m27[23] = 0x1e8;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001b56:	f8a3 22e0 	strh.w	r2, [r3, #736]	; 0x2e0
     calibTable->dacValB_m27[24] = 0x1cf;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f240 12cf 	movw	r2, #463	; 0x1cf
 8001b60:	f8a3 22e2 	strh.w	r2, [r3, #738]	; 0x2e2
     calibTable->dacValB_m27[25] = 0x1e8;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001b6a:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
     calibTable->dacValB_m27[26] = 0x7d3;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f240 72d3 	movw	r2, #2003	; 0x7d3
 8001b74:	f8a3 22e6 	strh.w	r2, [r3, #742]	; 0x2e6
     calibTable->dacValB_m27[27] = 0x80b;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f640 020b 	movw	r2, #2059	; 0x80b
 8001b7e:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8
     calibTable->dacValB_m27[28] = 0x857;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f640 0257 	movw	r2, #2135	; 0x857
 8001b88:	f8a3 22ea 	strh.w	r2, [r3, #746]	; 0x2ea
     calibTable->dacValB_m27[29] = 0x875;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f640 0275 	movw	r2, #2165	; 0x875
 8001b92:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec
     calibTable->dacValB_m27[30] = 0x866;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f640 0266 	movw	r2, #2150	; 0x866
 8001b9c:	f8a3 22ee 	strh.w	r2, [r3, #750]	; 0x2ee
     calibTable->dacValB_m27[31] = 0x7d0;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ba6:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
     calibTable->dacValB_m27[32] = 0x877;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f640 0277 	movw	r2, #2167	; 0x877
 8001bb0:	f8a3 22f2 	strh.w	r2, [r3, #754]	; 0x2f2
     calibTable->dacValB_m27[33] = 0x8a7;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f640 02a7 	movw	r2, #2215	; 0x8a7
 8001bba:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
     calibTable->dacValB_m27[34] = 0x8a2;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f640 02a2 	movw	r2, #2210	; 0x8a2
 8001bc4:	f8a3 22f6 	strh.w	r2, [r3, #758]	; 0x2f6
     calibTable->dacValB_m27[35] = 0x7f7;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f240 72f7 	movw	r2, #2039	; 0x7f7
 8001bce:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
     calibTable->dacValB_m27[36] = 0x857;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f640 0257 	movw	r2, #2135	; 0x857
 8001bd8:	f8a3 22fa 	strh.w	r2, [r3, #762]	; 0x2fa
     calibTable->dacValB_m27[37] = 0x829;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f640 0229 	movw	r2, #2089	; 0x829
 8001be2:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
     calibTable->dacValB_m27[38] = 0x8f2;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f640 02f2 	movw	r2, #2290	; 0x8f2
 8001bec:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
     calibTable->dacValB_m27[39] = 0x897;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f640 0297 	movw	r2, #2199	; 0x897
 8001bf6:	f8a3 2300 	strh.w	r2, [r3, #768]	; 0x300
     calibTable->dacValB_m27[40] = 0x8cc;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f640 02cc 	movw	r2, #2252	; 0x8cc
 8001c00:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
     calibTable->dacValB_m27[41] = 0x8ca;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001c0a:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
     calibTable->dacValB_m27[42] = 0x81f;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f640 021f 	movw	r2, #2079	; 0x81f
 8001c14:	f8a3 2306 	strh.w	r2, [r3, #774]	; 0x306
     calibTable->dacValB_m27[43] = 0x7de;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f240 72de 	movw	r2, #2014	; 0x7de
 8001c1e:	f8a3 2308 	strh.w	r2, [r3, #776]	; 0x308
     calibTable->dacValB_m27[44] = 0x864;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f640 0264 	movw	r2, #2148	; 0x864
 8001c28:	f8a3 230a 	strh.w	r2, [r3, #778]	; 0x30a
     calibTable->dacValB_m27[45] = 0x8ce;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f640 02ce 	movw	r2, #2254	; 0x8ce
 8001c32:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
     calibTable->dacValB_m27[46] = 0x8d9;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f640 02d9 	movw	r2, #2265	; 0x8d9
 8001c3c:	f8a3 230e 	strh.w	r2, [r3, #782]	; 0x30e
     calibTable->dacValB_m27[47] = 0x870;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f44f 6207 	mov.w	r2, #2160	; 0x870
 8001c46:	f8a3 2310 	strh.w	r2, [r3, #784]	; 0x310
     calibTable->dacValB_m27[48] = 0x7de;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f240 72de 	movw	r2, #2014	; 0x7de
 8001c50:	f8a3 2312 	strh.w	r2, [r3, #786]	; 0x312
     calibTable->dacValB_m27[49] = 0x80b;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f640 020b 	movw	r2, #2059	; 0x80b
 8001c5a:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
     calibTable->dacValB_m27[50] = 0x95b;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f640 125b 	movw	r2, #2395	; 0x95b
 8001c64:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316
     calibTable->dacValB_m27[51] = 0x89c;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f640 029c 	movw	r2, #2204	; 0x89c
 8001c6e:	f8a3 2318 	strh.w	r2, [r3, #792]	; 0x318
     calibTable->dacValB_m27[52] = 0x95b;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f640 125b 	movw	r2, #2395	; 0x95b
 8001c78:	f8a3 231a 	strh.w	r2, [r3, #794]	; 0x31a
     calibTable->dacValB_m27[53] = 0x7e2;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f240 72e2 	movw	r2, #2018	; 0x7e2
 8001c82:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
     calibTable->dacValB_m27[54] = 0x8ce;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f640 02ce 	movw	r2, #2254	; 0x8ce
 8001c8c:	f8a3 231e 	strh.w	r2, [r3, #798]	; 0x31e
     calibTable->dacValB_m27[55] = 0x974;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f640 1274 	movw	r2, #2420	; 0x974
 8001c96:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
     calibTable->dacValB_m27[56] = 0x7e7;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8001ca0:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
     calibTable->dacValB_m27[57] = 0x801;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f640 0201 	movw	r2, #2049	; 0x801
 8001caa:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
     calibTable->dacValB_m27[58] = 0x864;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f640 0264 	movw	r2, #2148	; 0x864
 8001cb4:	f8a3 2326 	strh.w	r2, [r3, #806]	; 0x326
     calibTable->dacValB_m27[59] = 0x8a1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f640 02a1 	movw	r2, #2209	; 0x8a1
 8001cbe:	f8a3 2328 	strh.w	r2, [r3, #808]	; 0x328
     calibTable->dacValB_m27[60] = 0x988;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f640 1288 	movw	r2, #2440	; 0x988
 8001cc8:	f8a3 232a 	strh.w	r2, [r3, #810]	; 0x32a
     calibTable->dacValB_m27[61] = 0x7e3;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f240 72e3 	movw	r2, #2019	; 0x7e3
 8001cd2:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
     calibTable->dacValB_m27[62] = 0x864;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f640 0264 	movw	r2, #2148	; 0x864
 8001cdc:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
     calibTable->dacValB_m27[63] = 0x92a;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f640 122a 	movw	r2, #2346	; 0x92a
 8001ce6:	f8a3 2330 	strh.w	r2, [r3, #816]	; 0x330
     calibTable->dacValB_m27[64] = 0x7fc;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001cf0:	f8a3 2332 	strh.w	r2, [r3, #818]	; 0x332
     calibTable->dacValB_m27[65] = 0x897;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f640 0297 	movw	r2, #2199	; 0x897
 8001cfa:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
     calibTable->dacValB_m27[66] = 0x892;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f640 0292 	movw	r2, #2194	; 0x892
 8001d04:	f8a3 2336 	strh.w	r2, [r3, #822]	; 0x336
     calibTable->dacValB_m27[67] = 0x8af;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f640 02af 	movw	r2, #2223	; 0x8af
 8001d0e:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
     calibTable->dacValB_m27[68] = 0x83a;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f640 023a 	movw	r2, #2106	; 0x83a
 8001d18:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
     calibTable->dacValB_m27[69] = 0x810;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f44f 6201 	mov.w	r2, #2064	; 0x810
 8001d22:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
     calibTable->dacValB_m27[70] = 0x83a;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f640 023a 	movw	r2, #2106	; 0x83a
 8001d2c:	f8a3 233e 	strh.w	r2, [r3, #830]	; 0x33e
     calibTable->dacValB_m27[71] = 0x7d4;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8001d36:	f8a3 2340 	strh.w	r2, [r3, #832]	; 0x340
     calibTable->dacValB_m27[72] = 0x914;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f640 1214 	movw	r2, #2324	; 0x914
 8001d40:	f8a3 2342 	strh.w	r2, [r3, #834]	; 0x342
     calibTable->dacValB_m27[73] = 0x7d6;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f240 72d6 	movw	r2, #2006	; 0x7d6
 8001d4a:	f8a3 2344 	strh.w	r2, [r3, #836]	; 0x344
     calibTable->dacValB_m27[74] = 0x8e8;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f640 02e8 	movw	r2, #2280	; 0x8e8
 8001d54:	f8a3 2346 	strh.w	r2, [r3, #838]	; 0x346
     calibTable->dacValB_m27[75] = 0x7e8;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 8001d5e:	f8a3 2348 	strh.w	r2, [r3, #840]	; 0x348
     calibTable->dacValB_m27[76] = 0x8e7;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f640 02e7 	movw	r2, #2279	; 0x8e7
 8001d68:	f8a3 234a 	strh.w	r2, [r3, #842]	; 0x34a
     calibTable->dacValB_m27[77] = 0x8fa;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f640 02fa 	movw	r2, #2298	; 0x8fa
 8001d72:	f8a3 234c 	strh.w	r2, [r3, #844]	; 0x34c
     calibTable->dacValB_m27[78] = 0xa82;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f640 2282 	movw	r2, #2690	; 0xa82
 8001d7c:	f8a3 234e 	strh.w	r2, [r3, #846]	; 0x34e
     calibTable->dacValB_m27[79] = 0x86c;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f640 026c 	movw	r2, #2156	; 0x86c
 8001d86:	f8a3 2350 	strh.w	r2, [r3, #848]	; 0x350
     calibTable->dacValB_m27[80] = 0x906;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f640 1206 	movw	r2, #2310	; 0x906
 8001d90:	f8a3 2352 	strh.w	r2, [r3, #850]	; 0x352
     calibTable->dacValB_m27[81] = 0x8f8;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f640 02f8 	movw	r2, #2296	; 0x8f8
 8001d9a:	f8a3 2354 	strh.w	r2, [r3, #852]	; 0x354
     calibTable->dacValB_m27[82] = 0x885;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f640 0285 	movw	r2, #2181	; 0x885
 8001da4:	f8a3 2356 	strh.w	r2, [r3, #854]	; 0x356
     calibTable->dacValB_m27[83] = 0x884;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f640 0284 	movw	r2, #2180	; 0x884
 8001dae:	f8a3 2358 	strh.w	r2, [r3, #856]	; 0x358
     calibTable->dacValB_m27[84] = 0x930;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001db8:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a
     calibTable->dacValB_m27[85] = 0x865;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f640 0265 	movw	r2, #2149	; 0x865
 8001dc2:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
     calibTable->dacValB_m27[86] = 0x8d0;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f44f 620d 	mov.w	r2, #2256	; 0x8d0
 8001dcc:	f8a3 235e 	strh.w	r2, [r3, #862]	; 0x35e
     calibTable->dacValB_m27[87] = 0x7e7;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8001dd6:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
     calibTable->dacValB_m27[88] = 0x8b9;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f640 02b9 	movw	r2, #2233	; 0x8b9
 8001de0:	f8a3 2362 	strh.w	r2, [r3, #866]	; 0x362
     calibTable->dacValB_m27[89] = 0xab4;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f640 22b4 	movw	r2, #2740	; 0xab4
 8001dea:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
     calibTable->dacValB_m27[90] = 0x8c8;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f640 02c8 	movw	r2, #2248	; 0x8c8
 8001df4:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
     calibTable->dacValB_m27[91] = 0x8e9;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f640 02e9 	movw	r2, #2281	; 0x8e9
 8001dfe:	f8a3 2368 	strh.w	r2, [r3, #872]	; 0x368
     calibTable->dacValB_m27[92] = 0xaff;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f640 22ff 	movw	r2, #2815	; 0xaff
 8001e08:	f8a3 236a 	strh.w	r2, [r3, #874]	; 0x36a
     calibTable->dacValB_m27[93] = 0x7da;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f240 72da 	movw	r2, #2010	; 0x7da
 8001e12:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
     calibTable->dacValB_m27[94] = 0x804;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f640 0204 	movw	r2, #2052	; 0x804
 8001e1c:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
     calibTable->dacValB_m27[95] = 0x7da;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f240 72da 	movw	r2, #2010	; 0x7da
 8001e26:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
     calibTable->dacValB_m27[96] = 0x804;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f640 0204 	movw	r2, #2052	; 0x804
 8001e30:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
     calibTable->dacValB_m27[97] = 0x7da;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f240 72da 	movw	r2, #2010	; 0x7da
 8001e3a:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
     calibTable->dacValB_m27[98] = 0x8ca;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001e44:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
     calibTable->dacValB_m27[99] = 0x947;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f640 1247 	movw	r2, #2375	; 0x947
 8001e4e:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
     calibTable->dacValB_m27[100] = 0x8fe;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f640 02fe 	movw	r2, #2302	; 0x8fe
 8001e58:	f8a3 237a 	strh.w	r2, [r3, #890]	; 0x37a
     calibTable->dacValB_m27[101] = 0x8fc;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001e62:	f8a3 237c 	strh.w	r2, [r3, #892]	; 0x37c
     calibTable->dacValB_m27[102] = 0x8ed;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f640 02ed 	movw	r2, #2285	; 0x8ed
 8001e6c:	f8a3 237e 	strh.w	r2, [r3, #894]	; 0x37e
     calibTable->dacValB_m27[103] = 0x989;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f640 1289 	movw	r2, #2441	; 0x989
 8001e76:	f8a3 2380 	strh.w	r2, [r3, #896]	; 0x380
     calibTable->dacValB_m27[104] = 0x92e;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f640 122e 	movw	r2, #2350	; 0x92e
 8001e80:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382
     calibTable->dacValB_m27[105] = 0x930;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001e8a:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
     calibTable->dacValB_m27[106] = 0x9cf;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f640 12cf 	movw	r2, #2511	; 0x9cf
 8001e94:	f8a3 2386 	strh.w	r2, [r3, #902]	; 0x386
     calibTable->dacValB_m27[107] = 0x979;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f640 1279 	movw	r2, #2425	; 0x979
 8001e9e:	f8a3 2388 	strh.w	r2, [r3, #904]	; 0x388
     calibTable->dacValB_m27[108] = 0x9cf;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f640 12cf 	movw	r2, #2511	; 0x9cf
 8001ea8:	f8a3 238a 	strh.w	r2, [r3, #906]	; 0x38a
     calibTable->dacValB_m27[109] = 0x979;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f640 1279 	movw	r2, #2425	; 0x979
 8001eb2:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
     calibTable->dacValB_m27[110] = 0x9e6;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f640 12e6 	movw	r2, #2534	; 0x9e6
 8001ebc:	f8a3 238e 	strh.w	r2, [r3, #910]	; 0x38e
     calibTable->dacValB_m27[111] = 0x9fc;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f640 12fc 	movw	r2, #2556	; 0x9fc
 8001ec6:	f8a3 2390 	strh.w	r2, [r3, #912]	; 0x390
     calibTable->dacValB_m27[112] = 0x992;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f640 1292 	movw	r2, #2450	; 0x992
 8001ed0:	f8a3 2392 	strh.w	r2, [r3, #914]	; 0x392
     calibTable->dacValB_m27[113] = 0xaa9;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8001eda:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
     calibTable->dacValB_m27[114] = 0xbd0;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
 8001ee4:	f8a3 2396 	strh.w	r2, [r3, #918]	; 0x396
     calibTable->dacValB_m27[115] = 0xc1c;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f640 421c 	movw	r2, #3100	; 0xc1c
 8001eee:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
     calibTable->dacValB_m27[116] = 0x9c6;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f640 12c6 	movw	r2, #2502	; 0x9c6
 8001ef8:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
     calibTable->dacValB_m27[117] = 0xb2b;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f640 322b 	movw	r2, #2859	; 0xb2b
 8001f02:	f8a3 239c 	strh.w	r2, [r3, #924]	; 0x39c
     calibTable->dacValB_m27[118] = 0x9d8;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f640 12d8 	movw	r2, #2520	; 0x9d8
 8001f0c:	f8a3 239e 	strh.w	r2, [r3, #926]	; 0x39e
     calibTable->dacValB_m27[119] = 0xc1f;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f640 421f 	movw	r2, #3103	; 0xc1f
 8001f16:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
     calibTable->dacValB_m27[120] = 0xb5d;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f640 325d 	movw	r2, #2909	; 0xb5d
 8001f20:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
     calibTable->dacValB_m27[121] = 0xc50;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f44f 6245 	mov.w	r2, #3152	; 0xc50
 8001f2a:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4
     calibTable->dacValB_m27[122] = 0xc4e;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f640 424e 	movw	r2, #3150	; 0xc4e
 8001f34:	f8a3 23a6 	strh.w	r2, [r3, #934]	; 0x3a6
     calibTable->dacValB_m27[123] = 0xc4c;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f640 424c 	movw	r2, #3148	; 0xc4c
 8001f3e:	f8a3 23a8 	strh.w	r2, [r3, #936]	; 0x3a8
     calibTable->dacValB_m27[124] = 0xa0e;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f640 220e 	movw	r2, #2574	; 0xa0e
 8001f48:	f8a3 23aa 	strh.w	r2, [r3, #938]	; 0x3aa
     calibTable->dacValB_m27[125] = 0xc76;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f640 4276 	movw	r2, #3190	; 0xc76
 8001f52:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
     calibTable->dacValB_m27[126] = 0xbed;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f640 32ed 	movw	r2, #3053	; 0xbed
 8001f5c:	f8a3 23ae 	strh.w	r2, [r3, #942]	; 0x3ae
     calibTable->dacValB_m27[127] = 0xa2f;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f640 222f 	movw	r2, #2607	; 0xa2f
 8001f66:	f8a3 23b0 	strh.w	r2, [r3, #944]	; 0x3b0
     calibTable->dacValB_m27[128] = 0xa36;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f640 2236 	movw	r2, #2614	; 0xa36
 8001f70:	f8a3 23b2 	strh.w	r2, [r3, #946]	; 0x3b2
     calibTable->dacValB_m27[129] = 0xc80;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001f7a:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
     calibTable->dacValB_m27[130] = 0xc71;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f640 4271 	movw	r2, #3185	; 0xc71
 8001f84:	f8a3 23b6 	strh.w	r2, [r3, #950]	; 0x3b6
     calibTable->dacValB_m27[131] = 0xa55;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f640 2255 	movw	r2, #2645	; 0xa55
 8001f8e:	f8a3 23b8 	strh.w	r2, [r3, #952]	; 0x3b8
     calibTable->dacValB_m27[132] = 0xcac;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f640 42ac 	movw	r2, #3244	; 0xcac
 8001f98:	f8a3 23ba 	strh.w	r2, [r3, #954]	; 0x3ba
     calibTable->dacValB_m27[133] = 0xa6b;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001fa2:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
     calibTable->dacValB_m27[134] = 0xcbb;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f640 42bb 	movw	r2, #3259	; 0xcbb
 8001fac:	f8a3 23be 	strh.w	r2, [r3, #958]	; 0x3be
     calibTable->dacValB_m27[135] = 0xa7d;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f640 227d 	movw	r2, #2685	; 0xa7d
 8001fb6:	f8a3 23c0 	strh.w	r2, [r3, #960]	; 0x3c0
     calibTable->dacValB_m27[136] = 0xb9a;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f640 329a 	movw	r2, #2970	; 0xb9a
 8001fc0:	f8a3 23c2 	strh.w	r2, [r3, #962]	; 0x3c2
     calibTable->dacValB_m27[137] = 0xba7;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f640 32a7 	movw	r2, #2983	; 0xba7
 8001fca:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
     calibTable->dacValB_m27[138] = 0xab4;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f640 22b4 	movw	r2, #2740	; 0xab4
 8001fd4:	f8a3 23c6 	strh.w	r2, [r3, #966]	; 0x3c6
     calibTable->dacValB_m27[139] = 0xbe4;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f640 32e4 	movw	r2, #3044	; 0xbe4
 8001fde:	f8a3 23c8 	strh.w	r2, [r3, #968]	; 0x3c8
     calibTable->dacValB_m27[140] = 0xab4;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f640 22b4 	movw	r2, #2740	; 0xab4
 8001fe8:	f8a3 23ca 	strh.w	r2, [r3, #970]	; 0x3ca
     calibTable->dacValB_m27[141] = 0xbbc;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f640 32bc 	movw	r2, #3004	; 0xbbc
 8001ff2:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
     calibTable->dacValB_m27[142] = 0xbba;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f640 32ba 	movw	r2, #3002	; 0xbba
 8001ffc:	f8a3 23ce 	strh.w	r2, [r3, #974]	; 0x3ce
     calibTable->dacValB_m27[143] = 0xd02;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f640 5202 	movw	r2, #3330	; 0xd02
 8002006:	f8a3 23d0 	strh.w	r2, [r3, #976]	; 0x3d0
     calibTable->dacValB_m27[144] = 0xbf3;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f640 32f3 	movw	r2, #3059	; 0xbf3
 8002010:	f8a3 23d2 	strh.w	r2, [r3, #978]	; 0x3d2
     calibTable->dacValB_m27[145] = 0xaf0;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800201a:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
     calibTable->dacValB_m27[146] = 0xaed;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f640 22ed 	movw	r2, #2797	; 0xaed
 8002024:	f8a3 23d6 	strh.w	r2, [r3, #982]	; 0x3d6
     calibTable->dacValB_m27[147] = 0xaf8;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f640 22f8 	movw	r2, #2808	; 0xaf8
 800202e:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
     calibTable->dacValB_m27[148] = 0xcfc;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f640 42fc 	movw	r2, #3324	; 0xcfc
 8002038:	f8a3 23da 	strh.w	r2, [r3, #986]	; 0x3da
     calibTable->dacValB_m27[149] = 0xc18;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f640 4218 	movw	r2, #3096	; 0xc18
 8002042:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
     calibTable->dacValB_m27[150] = 0xb0b;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f640 320b 	movw	r2, #2827	; 0xb0b
 800204c:	f8a3 23de 	strh.w	r2, [r3, #990]	; 0x3de
     calibTable->dacValB_m27[151] = 0xb18;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f640 3218 	movw	r2, #2840	; 0xb18
 8002056:	f8a3 23e0 	strh.w	r2, [r3, #992]	; 0x3e0
     calibTable->dacValB_m27[152] = 0xb1b;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f640 321b 	movw	r2, #2843	; 0xb1b
 8002060:	f8a3 23e2 	strh.w	r2, [r3, #994]	; 0x3e2
     calibTable->dacValB_m27[153] = 0xc08;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f640 4208 	movw	r2, #3080	; 0xc08
 800206a:	f8a3 23e4 	strh.w	r2, [r3, #996]	; 0x3e4
     calibTable->dacValB_m27[154] = 0xb2a;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f640 322a 	movw	r2, #2858	; 0xb2a
 8002074:	f8a3 23e6 	strh.w	r2, [r3, #998]	; 0x3e6
     calibTable->dacValB_m27[155] = 0xb2f;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f640 322f 	movw	r2, #2863	; 0xb2f
 800207e:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
     calibTable->dacValB_m27[156] = 0xd09;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f640 5209 	movw	r2, #3337	; 0xd09
 8002088:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
     calibTable->dacValB_m27[157] = 0xc0a;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f640 420a 	movw	r2, #3082	; 0xc0a
 8002092:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
     calibTable->dacValB_m27[158] = 0xb4f;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f640 324f 	movw	r2, #2895	; 0xb4f
 800209c:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
     calibTable->dacValB_m27[159] = 0xb56;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f640 3256 	movw	r2, #2902	; 0xb56
 80020a6:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
     calibTable->dacValB_m27[160] = 0xb6d;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f640 326d 	movw	r2, #2925	; 0xb6d
 80020b0:	f8a3 23f2 	strh.w	r2, [r3, #1010]	; 0x3f2
     calibTable->dacValB_m27[161] = 0xb44;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f640 3244 	movw	r2, #2884	; 0xb44
 80020ba:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
     calibTable->dacValB_m27[162] = 0x1000;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020c4:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

 }
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
	...

080020d4 <volt2dgt>:
// floor()
// Пример: 
// Следующий фрагмент кода выводит на экран «10»:
// printf("%f", floor(10.9));

uint16_t volt2dgt(Table_t *calibTable, int16_t volt){
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]

// TODO: Нужно ли учитывать Ктр? volt = volt*Ktr 
float count = (abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE;
 80020e0:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <volt2dgt+0x10c>)
 80020e2:	60fb      	str	r3, [r7, #12]
uint16_t y = (floor((count*abs(MIN_VOLT_MODE_12))/(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/abs(MIN_VOLT_MODE_12)*volt+(count*abs(MIN_VOLT_MODE_12))/(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 80020e4:	493f      	ldr	r1, [pc, #252]	; (80021e4 <volt2dgt+0x110>)
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7fe fbac 	bl	8000844 <__aeabi_fmul>
 80020ec:	4603      	mov	r3, r0
 80020ee:	493e      	ldr	r1, [pc, #248]	; (80021e8 <volt2dgt+0x114>)
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fc5b 	bl	80009ac <__aeabi_fdiv>
 80020f6:	4603      	mov	r3, r0
 80020f8:	493a      	ldr	r1, [pc, #232]	; (80021e4 <volt2dgt+0x110>)
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fc56 	bl	80009ac <__aeabi_fdiv>
 8002100:	4603      	mov	r3, r0
 8002102:	461c      	mov	r4, r3
 8002104:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fb47 	bl	800079c <__aeabi_i2f>
 800210e:	4603      	mov	r3, r0
 8002110:	4619      	mov	r1, r3
 8002112:	4620      	mov	r0, r4
 8002114:	f7fe fb96 	bl	8000844 <__aeabi_fmul>
 8002118:	4603      	mov	r3, r0
 800211a:	461c      	mov	r4, r3
 800211c:	4931      	ldr	r1, [pc, #196]	; (80021e4 <volt2dgt+0x110>)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7fe fb90 	bl	8000844 <__aeabi_fmul>
 8002124:	4603      	mov	r3, r0
 8002126:	4930      	ldr	r1, [pc, #192]	; (80021e8 <volt2dgt+0x114>)
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fc3f 	bl	80009ac <__aeabi_fdiv>
 800212e:	4603      	mov	r3, r0
 8002130:	4619      	mov	r1, r3
 8002132:	4620      	mov	r0, r4
 8002134:	f7fe fa7e 	bl	8000634 <__addsf3>
 8002138:	4603      	mov	r3, r0
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f974 	bl	8000428 <__aeabi_f2d>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f00b fbb2 	bl	800d8b0 <floor>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	f7fe fa48 	bl	80005e8 <__aeabi_d2uiz>
 8002158:	4603      	mov	r3, r0
 800215a:	817b      	strh	r3, [r7, #10]
uint16_t CodeX = (((calibTable->dacValA_m12[y+1+1]-calibTable->dacValA_m12[y])/(((y+1+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12)-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))))*(volt-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))+calibTable->dacValA_m12[y+1];
 800215c:	897b      	ldrh	r3, [r7, #10]
 800215e:	3302      	adds	r3, #2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	3304      	adds	r3, #4
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	889b      	ldrh	r3, [r3, #4]
 800216a:	4619      	mov	r1, r3
 800216c:	897b      	ldrh	r3, [r7, #10]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	3304      	adds	r3, #4
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	889b      	ldrh	r3, [r3, #4]
 8002178:	1aca      	subs	r2, r1, r3
 800217a:	897b      	ldrh	r3, [r7, #10]
 800217c:	3302      	adds	r3, #2
 800217e:	21c8      	movs	r1, #200	; 0xc8
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8002188:	3b08      	subs	r3, #8
 800218a:	8979      	ldrh	r1, [r7, #10]
 800218c:	3101      	adds	r1, #1
 800218e:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8002192:	fb00 f101 	mul.w	r1, r0, r1
 8002196:	440b      	add	r3, r1
 8002198:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 800219c:	3b08      	subs	r3, #8
 800219e:	fb92 f3f3 	sdiv	r3, r2, r3
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80021a8:	897b      	ldrh	r3, [r7, #10]
 80021aa:	3301      	adds	r3, #1
 80021ac:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 80021b0:	fb00 f303 	mul.w	r3, r0, r3
 80021b4:	440b      	add	r3, r1
 80021b6:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 80021ba:	3b08      	subs	r3, #8
 80021bc:	b29b      	uxth	r3, r3
 80021be:	fb03 f302 	mul.w	r3, r3, r2
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	897b      	ldrh	r3, [r7, #10]
 80021c6:	3301      	adds	r3, #1
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	440b      	add	r3, r1
 80021d0:	889b      	ldrh	r3, [r3, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	813b      	strh	r3, [r7, #8]
	return CodeX;
 80021d6:	893b      	ldrh	r3, [r7, #8]





}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd90      	pop	{r4, r7, pc}
 80021e0:	42aa0000 	.word	0x42aa0000
 80021e4:	459c4000 	.word	0x459c4000
 80021e8:	4684d000 	.word	0x4684d000

080021ec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80021f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80021f8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002204:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002208:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800220c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002214:	e000      	b.n	8002218 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002216:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002218:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f9      	beq.n	8002216 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002222:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800222c:	687b      	ldr	r3, [r7, #4]
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <DWT_Init+0x24>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a06      	ldr	r2, [pc, #24]	; (800225c <DWT_Init+0x24>)
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002246:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <DWT_Init+0x28>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <DWT_Init+0x28>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	e000edf0 	.word	0xe000edf0
 8002260:	e0001000 	.word	0xe0001000

08002264 <_write>:
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	e009      	b.n	800228a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	60ba      	str	r2, [r7, #8]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ffb4 	bl	80021ec <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	dbf1      	blt.n	8002276 <_write+0x12>
	}
	return len;
 8002292:	687b      	ldr	r3, [r7, #4]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <SetDacA>:
uint16_t VDAC_A = 0;
uint16_t VDAC_B = 0;
// Новая реализация. для приема значений в напряжениях, с поиском по структуре DevNVRAM выгруженной из памяти.
//TODO: Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
void SetDacA(int16_t da)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	80fb      	strh	r3, [r7, #6]
	VDAC_A = volt2dgt(&(DevNVRAM.calibration_table), da);
 80022a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022aa:	4619      	mov	r1, r3
 80022ac:	4808      	ldr	r0, [pc, #32]	; (80022d0 <SetDacA+0x34>)
 80022ae:	f7ff ff11 	bl	80020d4 <volt2dgt>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <SetDacA+0x38>)
 80022b8:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <SetDacA+0x38>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	4619      	mov	r1, r3
 80022c0:	4805      	ldr	r0, [pc, #20]	; (80022d8 <SetDacA+0x3c>)
 80022c2:	f7fe fc3b 	bl	8000b3c <DAC_AD5322_Ch1>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200004ac 	.word	0x200004ac
 80022d4:	20000256 	.word	0x20000256
 80022d8:	20000984 	.word	0x20000984

080022dc <SetDacB>:
void SetDacB(int16_t db) //BUG: Не работает. Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table), db);
 80022e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4808      	ldr	r0, [pc, #32]	; (8002310 <SetDacB+0x34>)
 80022ee:	f7ff fef1 	bl	80020d4 <volt2dgt>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <SetDacB+0x38>)
 80022f8:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <SetDacB+0x38>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	4619      	mov	r1, r3
 8002300:	4805      	ldr	r0, [pc, #20]	; (8002318 <SetDacB+0x3c>)
 8002302:	f7fe fc62 	bl	8000bca <DAC_AD5322_Ch2>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200004ac 	.word	0x200004ac
 8002314:	20000258 	.word	0x20000258
 8002318:	20000984 	.word	0x20000984

0800231c <SetAllDAC>:
void SetAllDAC()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <SetAllDAC+0x18>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <SetAllDAC+0x1c>)
 8002326:	8812      	ldrh	r2, [r2, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	4804      	ldr	r0, [pc, #16]	; (800233c <SetAllDAC+0x20>)
 800232c:	f7fe fc94 	bl	8000c58 <DAC_AD5322_Ch1Ch2>
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000256 	.word	0x20000256
 8002338:	20000258 	.word	0x20000258
 800233c:	20000984 	.word	0x20000984

08002340 <GetDacA>:
uint16_t GetDacA()
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
	return VDAC_A;
 8002344:	4b02      	ldr	r3, [pc, #8]	; (8002350 <GetDacA+0x10>)
 8002346:	881b      	ldrh	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20000256 	.word	0x20000256

08002354 <GetDacB>:
uint16_t GetDacB()
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
	return VDAC_B;
 8002358:	4b02      	ldr	r3, [pc, #8]	; (8002364 <GetDacB+0x10>)
 800235a:	881b      	ldrh	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	20000258 	.word	0x20000258

08002368 <GetBtnRunState>:

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState()
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00)
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <GetBtnRunState+0x7c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10b      	bne.n	800238c <GetBtnRunState+0x24>
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <GetBtnRunState+0x80>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d107      	bne.n	800238c <GetBtnRunState+0x24>
	{
		btn1_long_rd = 0;
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <GetBtnRunState+0x80>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <GetBtnRunState+0x7c>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8002388:	2300      	movs	r3, #0
 800238a:	e026      	b.n	80023da <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00)
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <GetBtnRunState+0x7c>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d10b      	bne.n	80023ac <GetBtnRunState+0x44>
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <GetBtnRunState+0x80>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d107      	bne.n	80023ac <GetBtnRunState+0x44>
	{
		btn1_long_rd = 0;
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <GetBtnRunState+0x80>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <GetBtnRunState+0x7c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e016      	b.n	80023da <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01)
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <GetBtnRunState+0x7c>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10b      	bne.n	80023cc <GetBtnRunState+0x64>
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <GetBtnRunState+0x80>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d107      	bne.n	80023cc <GetBtnRunState+0x64>
	{
		btn1_long_rd = 0;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <GetBtnRunState+0x80>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <GetBtnRunState+0x7c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80023c8:	2302      	movs	r3, #2
 80023ca:	e006      	b.n	80023da <GetBtnRunState+0x72>
	}

	btn1_long_rd = 0;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <GetBtnRunState+0x80>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
	btn1_short_rd = 0;
 80023d2:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <GetBtnRunState+0x7c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]

	//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
	//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
	//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000261 	.word	0x20000261
 80023e8:	20000260 	.word	0x20000260

080023ec <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState()
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00)
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <GetBtnUpState+0x7c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10b      	bne.n	8002410 <GetBtnUpState+0x24>
 80023f8:	4b1c      	ldr	r3, [pc, #112]	; (800246c <GetBtnUpState+0x80>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d107      	bne.n	8002410 <GetBtnUpState+0x24>
	{
		btn2_long_rd = 0;
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <GetBtnUpState+0x80>)
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <GetBtnUpState+0x7c>)
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
		return 0x00;
 800240c:	2300      	movs	r3, #0
 800240e:	e026      	b.n	800245e <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00)
 8002410:	4b15      	ldr	r3, [pc, #84]	; (8002468 <GetBtnUpState+0x7c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d10b      	bne.n	8002430 <GetBtnUpState+0x44>
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <GetBtnUpState+0x80>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d107      	bne.n	8002430 <GetBtnUpState+0x44>
	{
		btn2_long_rd = 0;
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <GetBtnUpState+0x80>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <GetBtnUpState+0x7c>)
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
		return 0x01;
 800242c:	2301      	movs	r3, #1
 800242e:	e016      	b.n	800245e <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01)
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <GetBtnUpState+0x7c>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10b      	bne.n	8002450 <GetBtnUpState+0x64>
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <GetBtnUpState+0x80>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d107      	bne.n	8002450 <GetBtnUpState+0x64>
	{
		btn2_long_rd = 0;
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <GetBtnUpState+0x80>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <GetBtnUpState+0x7c>)
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
		return 0x02;
 800244c:	2302      	movs	r3, #2
 800244e:	e006      	b.n	800245e <GetBtnUpState+0x72>
	}

	btn2_long_rd = 0;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <GetBtnUpState+0x80>)
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
	btn2_short_rd = 0;
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <GetBtnUpState+0x7c>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
	//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
	//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
	//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000269 	.word	0x20000269
 800246c:	20000268 	.word	0x20000268

08002470 <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState()
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00)
 8002474:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <GetBtnDownState+0x7c>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10b      	bne.n	8002494 <GetBtnDownState+0x24>
 800247c:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <GetBtnDownState+0x80>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <GetBtnDownState+0x24>
	{
		btn3_long_rd = 0;
 8002484:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <GetBtnDownState+0x80>)
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <GetBtnDownState+0x7c>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8002490:	2300      	movs	r3, #0
 8002492:	e026      	b.n	80024e2 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00)
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <GetBtnDownState+0x7c>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d10b      	bne.n	80024b4 <GetBtnDownState+0x44>
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <GetBtnDownState+0x80>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <GetBtnDownState+0x44>
	{
		btn3_long_rd = 0;
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <GetBtnDownState+0x80>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <GetBtnDownState+0x7c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e016      	b.n	80024e2 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01)
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <GetBtnDownState+0x7c>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10b      	bne.n	80024d4 <GetBtnDownState+0x64>
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <GetBtnDownState+0x80>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d107      	bne.n	80024d4 <GetBtnDownState+0x64>
	{
		btn3_long_rd = 0;
 80024c4:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <GetBtnDownState+0x80>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <GetBtnDownState+0x7c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80024d0:	2302      	movs	r3, #2
 80024d2:	e006      	b.n	80024e2 <GetBtnDownState+0x72>
	}

	btn3_long_rd = 0;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <GetBtnDownState+0x80>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
	btn3_short_rd = 0;
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <GetBtnDownState+0x7c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
	//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
	//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
	//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000271 	.word	0x20000271
 80024f0:	20000270 	.word	0x20000270

080024f4 <EnableTIM3_PB4>:
// char trans2_str[64] = {
// 	0,
// };
//--------------------------------------------------------------------------
void EnableTIM3_PB4()
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
	timWork = 1;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <EnableTIM3_PB4+0x14>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000272 	.word	0x20000272

0800250c <GetTIM3>:
uint16_t GetTIM3()
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <GetTIM3+0x14>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	b29b      	uxth	r3, r3
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000274 	.word	0x20000274

08002524 <resValTIM3_PB4>:
void resValTIM3_PB4()
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <resValTIM3_PB4+0x14>)
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000274 	.word	0x20000274

0800253c <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6()
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
	timWork = 0;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <EnableTIM4_PB6+0x14>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000272 	.word	0x20000272

08002554 <GetTIM4>:
uint16_t GetTIM4()
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <GetTIM4+0x14>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000276 	.word	0x20000276

0800256c <resValTIM4_PB6>:
void resValTIM4_PB6()
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <resValTIM4_PB6+0x14>)
 8002572:	2200      	movs	r2, #0
 8002574:	801a      	strh	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000276 	.word	0x20000276

08002584 <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork)
 800258c:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_TIM_IC_CaptureCallback+0xb8>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d027      	beq.n	80025e6 <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Instance == TIM3)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a29      	ldr	r2, [pc, #164]	; (8002640 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d149      	bne.n	8002634 <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7f1b      	ldrb	r3, [r3, #28]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d145      	bne.n	8002634 <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80025a8:	2100      	movs	r1, #0
 80025aa:	4826      	ldr	r0, [pc, #152]	; (8002644 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80025ac:	f005 fc8e 	bl	8007ecc <HAL_TIM_ReadCapturedValue>
 80025b0:	4603      	mov	r3, r0
 80025b2:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 80025b4:	2104      	movs	r1, #4
 80025b6:	4823      	ldr	r0, [pc, #140]	; (8002644 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80025b8:	f005 fc88 	bl	8007ecc <HAL_TIM_ReadCapturedValue>
 80025bc:	4603      	mov	r3, r0
 80025be:	81fb      	strh	r3, [r7, #14]
														   TIM_CHANNEL_2);

				TIM3->CNT = 0;
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 80025c6:	8a3a      	ldrh	r2, [r7, #16]
 80025c8:	89fb      	ldrh	r3, [r7, #14]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 80025d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bfb8      	it	lt
 80025d8:	425b      	neglt	r3, r3
 80025da:	b29b      	uxth	r3, r3
 80025dc:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 80025de:	89ba      	ldrh	r2, [r7, #12]
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80025e2:	801a      	strh	r2, [r3, #0]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
				g_vTIM4_PB6 = deltaTIM4;
			}
		}
	}
}
 80025e4:	e026      	b.n	8002634 <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a18      	ldr	r2, [pc, #96]	; (800264c <HAL_TIM_IC_CaptureCallback+0xc8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d121      	bne.n	8002634 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7f1b      	ldrb	r3, [r3, #28]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d11d      	bne.n	8002634 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80025f8:	2100      	movs	r1, #0
 80025fa:	4815      	ldr	r0, [pc, #84]	; (8002650 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80025fc:	f005 fc66 	bl	8007ecc <HAL_TIM_ReadCapturedValue>
 8002600:	4603      	mov	r3, r0
 8002602:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 8002604:	2104      	movs	r1, #4
 8002606:	4812      	ldr	r0, [pc, #72]	; (8002650 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8002608:	f005 fc60 	bl	8007ecc <HAL_TIM_ReadCapturedValue>
 800260c:	4603      	mov	r3, r0
 800260e:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	; 0x24
				int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 8002616:	8afa      	ldrh	r2, [r7, #22]
 8002618:	8abb      	ldrh	r3, [r7, #20]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	b29b      	uxth	r3, r3
 800261e:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 8002620:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002624:	2b00      	cmp	r3, #0
 8002626:	bfb8      	it	lt
 8002628:	425b      	neglt	r3, r3
 800262a:	b29b      	uxth	r3, r3
 800262c:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 800262e:	8a7a      	ldrh	r2, [r7, #18]
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8002632:	801a      	strh	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000272 	.word	0x20000272
 8002640:	40000400 	.word	0x40000400
 8002644:	200008fc 	.word	0x200008fc
 8002648:	20000274 	.word	0x20000274
 800264c:	40000800 	.word	0x40000800
 8002650:	200008ac 	.word	0x200008ac
 8002654:	20000276 	.word	0x20000276

08002658 <GetADC>:
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC()
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
	return g_VADC;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <GetADC+0x14>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000278 	.word	0x20000278

08002670 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <HAL_ADC_ConvCpltCallback+0x28>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d106      	bne.n	8002690 <HAL_ADC_ConvCpltCallback+0x20>
	{
		g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 8002682:	4806      	ldr	r0, [pc, #24]	; (800269c <HAL_ADC_ConvCpltCallback+0x2c>)
 8002684:	f001 fdda 	bl	800423c <HAL_ADC_GetValue>
 8002688:	4603      	mov	r3, r0
 800268a:	b29a      	uxth	r2, r3
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <HAL_ADC_ConvCpltCallback+0x30>)
 800268e:	801a      	strh	r2, [r3, #0]
	}
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40012400 	.word	0x40012400
 800269c:	20000954 	.word	0x20000954
 80026a0:	20000278 	.word	0x20000278

080026a4 <runCommands>:
	Калибровка 
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.
	--------------------------------------------------------------------------*/
{
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	6018      	str	r0, [r3, #0]
 80026b0:	463b      	mov	r3, r7
 80026b2:	6019      	str	r1, [r3, #0]
	if (*Len < 1)
 80026b4:	463b      	mov	r3, r7
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8400 	beq.w	8002ec0 <runCommands+0x81c>

	//--------------------------------------------------------------------------

	uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];
	uint16_t tVal16;
	uint8_t cmd = Buf[0];
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	//--------------------------------------------------------------------------
	if 		(cmd == 0x01)	// Relay:1 - 12V	[0x01 - 0x01]
 80026ca:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d16c      	bne.n	80027ac <runCommands+0x108>
	{
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00))
 80026d2:	463b      	mov	r3, r7
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d957      	bls.n	800278c <runCommands+0xe8>
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3301      	adds	r3, #1
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d005      	beq.n	80026f4 <runCommands+0x50>
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d14b      	bne.n	800278c <runCommands+0xe8>
		{
			if (Buf[1] == 0x01)
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3301      	adds	r3, #1
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d11f      	bne.n	8002740 <runCommands+0x9c>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8002700:	2201      	movs	r2, #1
 8002702:	2104      	movs	r1, #4
 8002704:	48cb      	ldr	r0, [pc, #812]	; (8002a34 <runCommands+0x390>)
 8002706:	f002 fd60 	bl	80051ca <HAL_GPIO_WritePin>
				RelayState = m12;
 800270a:	4bcb      	ldr	r3, [pc, #812]	; (8002a38 <runCommands+0x394>)
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 8002710:	4bc9      	ldr	r3, [pc, #804]	; (8002a38 <runCommands+0x394>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	48c9      	ldr	r0, [pc, #804]	; (8002a3c <runCommands+0x398>)
 8002718:	f009 ff62 	bl	800c5e0 <iprintf>
				SetAllDAC();
 800271c:	f7ff fdfe 	bl	800231c <SetAllDAC>
				UserTxBufferFS[0] = cmd;
 8002720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002724:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002728:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800272a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800272e:	2200      	movs	r2, #0
 8002730:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8002732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002736:	2102      	movs	r1, #2
 8002738:	4618      	mov	r0, r3
 800273a:	f009 fb19 	bl	800bd70 <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 800273e:	e3c4      	b.n	8002eca <runCommands+0x826>
			}
			else if (Buf[1] == 0x00)
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d11f      	bne.n	800278c <runCommands+0xe8>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800274c:	2200      	movs	r2, #0
 800274e:	2104      	movs	r1, #4
 8002750:	48b8      	ldr	r0, [pc, #736]	; (8002a34 <runCommands+0x390>)
 8002752:	f002 fd3a 	bl	80051ca <HAL_GPIO_WritePin>
				RelayState = m27;
 8002756:	4bb8      	ldr	r3, [pc, #736]	; (8002a38 <runCommands+0x394>)
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800275c:	4bb6      	ldr	r3, [pc, #728]	; (8002a38 <runCommands+0x394>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	48b7      	ldr	r0, [pc, #732]	; (8002a40 <runCommands+0x39c>)
 8002764:	f009 ff3c 	bl	800c5e0 <iprintf>
				SetAllDAC();
 8002768:	f7ff fdd8 	bl	800231c <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800276c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002770:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002774:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 8002776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800277a:	2200      	movs	r2, #0
 800277c:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800277e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002782:	2102      	movs	r1, #2
 8002784:	4618      	mov	r0, r3
 8002786:	f009 faf3 	bl	800bd70 <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 800278a:	e39e      	b.n	8002eca <runCommands+0x826>
			}
		}

		UserTxBufferFS[0] = cmd;
 800278c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002790:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002794:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8002796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279a:	2201      	movs	r2, #1
 800279c:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800279e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a2:	2102      	movs	r1, #2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f009 fae3 	bl	800bd70 <CDC_Transmit_FS>
		return;
 80027aa:	e38e      	b.n	8002eca <runCommands+0x826>

		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x02)	// DA:4095
 80027ac:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d13e      	bne.n	8002832 <runCommands+0x18e>
	{
		if (*Len >= 3)
 80027b4:	463b      	mov	r3, r7
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d929      	bls.n	8002812 <runCommands+0x16e>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 80027be:	f7ff feb1 	bl	8002524 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 80027c2:	f7ff fed3 	bl	800256c <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80027d4:	801a      	strh	r2, [r3, #0]
			SetDacA(tVal16);
 80027d6:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b21b      	sxth	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fd5c 	bl	800229c <SetDacA>
			//			SetDacA(tVal16);

			printf("DacA: %d\n", tVal16);
 80027e4:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	4619      	mov	r1, r3
 80027ec:	4895      	ldr	r0, [pc, #596]	; (8002a44 <runCommands+0x3a0>)
 80027ee:	f009 fef7 	bl	800c5e0 <iprintf>
			UserTxBufferFS[0] = cmd;
 80027f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f6:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80027fa:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 80027fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002800:	2200      	movs	r2, #0
 8002802:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 8002804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002808:	2102      	movs	r1, #2
 800280a:	4618      	mov	r0, r3
 800280c:	f009 fab0 	bl	800bd70 <CDC_Transmit_FS>
			return;
 8002810:	e35b      	b.n	8002eca <runCommands+0x826>
		}

		UserTxBufferFS[0] = cmd;
 8002812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002816:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800281a:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800281c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002820:	2201      	movs	r2, #1
 8002822:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8002824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002828:	2102      	movs	r1, #2
 800282a:	4618      	mov	r0, r3
 800282c:	f009 faa0 	bl	800bd70 <CDC_Transmit_FS>
		return;
 8002830:	e34b      	b.n	8002eca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x03)	// DB:4095
 8002832:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002836:	2b03      	cmp	r3, #3
 8002838:	d13e      	bne.n	80028b8 <runCommands+0x214>
	{
		if (*Len >= 3)
 800283a:	463b      	mov	r3, r7
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d929      	bls.n	8002898 <runCommands+0x1f4>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8002844:	f7ff fe6e 	bl	8002524 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 8002848:	f7ff fe90 	bl	800256c <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	b29a      	uxth	r2, r3
 8002856:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800285a:	801a      	strh	r2, [r3, #0]
			SetDacB(tVal16);
 800285c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	b21b      	sxth	r3, r3
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fd39 	bl	80022dc <SetDacB>

			UserTxBufferFS[0] = cmd;
 800286a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286e:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002872:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8002874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002878:	2200      	movs	r2, #0
 800287a:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n", tVal16);
 800287c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	4870      	ldr	r0, [pc, #448]	; (8002a48 <runCommands+0x3a4>)
 8002886:	f009 feab 	bl	800c5e0 <iprintf>

			CDC_Transmit_FS(UserTxBufferFS, 2);
 800288a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288e:	2102      	movs	r1, #2
 8002890:	4618      	mov	r0, r3
 8002892:	f009 fa6d 	bl	800bd70 <CDC_Transmit_FS>
			return;
 8002896:	e318      	b.n	8002eca <runCommands+0x826>
		}

		UserTxBufferFS[0] = cmd;
 8002898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80028a0:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 80028a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a6:	2201      	movs	r2, #1
 80028a8:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 80028aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ae:	2102      	movs	r1, #2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f009 fa5d 	bl	800bd70 <CDC_Transmit_FS>
		return;
 80028b6:	e308      	b.n	8002eca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x04)	// ADC?
 80028b8:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d119      	bne.n	80028f4 <runCommands+0x250>
	{
		tVal16 = GetADC();
 80028c0:	f7ff feca 	bl	8002658 <GetADC>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80028cc:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 80028ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d2:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80028d6:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 80028d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028dc:	3301      	adds	r3, #1
 80028de:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80028e2:	8812      	ldrh	r2, [r2, #0]
 80028e4:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 80028e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ea:	2103      	movs	r1, #3
 80028ec:	4618      	mov	r0, r3
 80028ee:	f009 fa3f 	bl	800bd70 <CDC_Transmit_FS>
		return;
 80028f2:	e2ea      	b.n	8002eca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x05)	// Relay?DA?DB?
 80028f4:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d12d      	bne.n	8002958 <runCommands+0x2b4>
	{
		UserTxBufferFS[0] = cmd;
 80028fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002900:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002904:	701a      	strb	r2, [r3, #0]
		#if TEST_RELAY
		UserTxBufferFS[1] = RelayState;
 8002906:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <runCommands+0x394>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002910:	705a      	strb	r2, [r3, #1]
		#endif /* TEST_RELAY */

		tVal16 = GetDacA();
 8002912:	f7ff fd15 	bl	8002340 <GetDacA>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800291e:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 8002920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002924:	3302      	adds	r3, #2
 8002926:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800292a:	8812      	ldrh	r2, [r2, #0]
 800292c:	801a      	strh	r2, [r3, #0]

		tVal16 = GetDacB();
 800292e:	f7ff fd11 	bl	8002354 <GetDacB>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800293a:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 800293c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002940:	3304      	adds	r3, #4
 8002942:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8002946:	8812      	ldrh	r2, [r2, #0]
 8002948:	801a      	strh	r2, [r3, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 800294a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294e:	2106      	movs	r1, #6
 8002950:	4618      	mov	r0, r3
 8002952:	f009 fa0d 	bl	800bd70 <CDC_Transmit_FS>
		return;
 8002956:	e2b8      	b.n	8002eca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x06)	// Btn?
 8002958:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800295c:	2b06      	cmp	r3, #6
 800295e:	d120      	bne.n	80029a2 <runCommands+0x2fe>
	{
		UserTxBufferFS[0] = cmd;
 8002960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002964:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002968:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 800296a:	f7ff fcfd 	bl	8002368 <GetBtnRunState>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002976:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 8002978:	f7ff fd38 	bl	80023ec <GetBtnUpState>
 800297c:	4603      	mov	r3, r0
 800297e:	461a      	mov	r2, r3
 8002980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002984:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 8002986:	f7ff fd73 	bl	8002470 <GetBtnDownState>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002992:	70da      	strb	r2, [r3, #3]
		CDC_Transmit_FS(UserTxBufferFS, 4);
 8002994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002998:	2104      	movs	r1, #4
 800299a:	4618      	mov	r0, r3
 800299c:	f009 f9e8 	bl	800bd70 <CDC_Transmit_FS>
		return;
 80029a0:	e293      	b.n	8002eca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x07)	// ID?
 80029a2:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80029a6:	2b07      	cmp	r3, #7
 80029a8:	d154      	bne.n	8002a54 <runCommands+0x3b0>
	{
		char str[9] = {
 80029aa:	f107 0318 	add.w	r3, r7, #24
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	3304      	adds	r3, #4
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	711a      	strb	r2, [r3, #4]
			0,
		};
		memcpy(str, "SN", strlen("SN"));
 80029ba:	f107 0318 	add.w	r3, r7, #24
 80029be:	2202      	movs	r2, #2
 80029c0:	4922      	ldr	r1, [pc, #136]	; (8002a4c <runCommands+0x3a8>)
 80029c2:	4618      	mov	r0, r3
 80029c4:	f009 fdf6 	bl	800c5b4 <memcpy>
		itoa(SN_DEFINE, str + 2, 16);
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	3302      	adds	r3, #2
 80029ce:	2210      	movs	r2, #16
 80029d0:	4619      	mov	r1, r3
 80029d2:	481f      	ldr	r0, [pc, #124]	; (8002a50 <runCommands+0x3ac>)
 80029d4:	f009 fdec 	bl	800c5b0 <itoa>

		UserTxBufferFS[0] = cmd;
 80029d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029dc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80029e0:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = strlen(str);
 80029e2:	f107 0318 	add.w	r3, r7, #24
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fbb2 	bl	8000150 <strlen>
 80029ec:	4603      	mov	r3, r0
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f4:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 80029f6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80029fa:	3402      	adds	r4, #2
 80029fc:	f107 0318 	add.w	r3, r7, #24
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fba5 	bl	8000150 <strlen>
 8002a06:	4602      	mov	r2, r0
 8002a08:	f107 0318 	add.w	r3, r7, #24
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f009 fdd0 	bl	800c5b4 <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 8002a14:	f107 0318 	add.w	r3, r7, #24
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fb99 	bl	8000150 <strlen>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3302      	adds	r3, #2
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f009 f99f 	bl	800bd70 <CDC_Transmit_FS>
 8002a32:	e24a      	b.n	8002eca <runCommands+0x826>
 8002a34:	40010800 	.word	0x40010800
 8002a38:	20000010 	.word	0x20000010
 8002a3c:	0800d9f8 	.word	0x0800d9f8
 8002a40:	0800da10 	.word	0x0800da10
 8002a44:	0800da28 	.word	0x0800da28
 8002a48:	0800da34 	.word	0x0800da34
 8002a4c:	0800da40 	.word	0x0800da40
 8002a50:	01121001 	.word	0x01121001
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.*/
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x08)	// Калибровка TIM inHL?
 8002a54:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d11b      	bne.n	8002a94 <runCommands+0x3f0>
	{
		EnableTIM3_PB4();
 8002a5c:	f7ff fd4a 	bl	80024f4 <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 8002a60:	f7ff fd54 	bl	800250c <GetTIM3>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	f107 0316 	add.w	r3, r7, #22
 8002a6c:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8002a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a72:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002a76:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8002a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f107 0216 	add.w	r2, r7, #22
 8002a82:	8812      	ldrh	r2, [r2, #0]
 8002a84:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8002a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f009 f96f 	bl	800bd70 <CDC_Transmit_FS>
 8002a92:	e21a      	b.n	8002eca <runCommands+0x826>
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x09)	// Калибровка TIM inLL?
 8002a94:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002a98:	2b09      	cmp	r3, #9
 8002a9a:	d11b      	bne.n	8002ad4 <runCommands+0x430>
	{
		EnableTIM4_PB6();
 8002a9c:	f7ff fd4e 	bl	800253c <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 8002aa0:	f7ff fd58 	bl	8002554 <GetTIM4>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8002aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab2:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002ab6:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8002ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002abc:	3301      	adds	r3, #1
 8002abe:	f107 0214 	add.w	r2, r7, #20
 8002ac2:	8812      	ldrh	r2, [r2, #0]
 8002ac4:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8002ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aca:	2103      	movs	r1, #3
 8002acc:	4618      	mov	r0, r3
 8002ace:	f009 f94f 	bl	800bd70 <CDC_Transmit_FS>
 8002ad2:	e1fa      	b.n	8002eca <runCommands+0x826>
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0A)	// TODO: Прием калибровочной таблицы [0x0A][1-4][offset][count][data] 	answer: [0x0A]+[1-4]+[offset]+[count]+[status] (0x00 - сработал; 0x01 - не сработал)
 8002ad4:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002ad8:	2b0a      	cmp	r3, #10
 8002ada:	f040 81ad 	bne.w	8002e38 <runCommands+0x794>
	{
		//Прием калибровочной таблицы [0x0A][1-4][offset][count][data]
		//FIXME: За одну посылку можно получить максимум 64 byte. Нужно организовать пакетную передачу
		uint16_t tOffset, tCount, tData;
		if (*Len >= 2 && Buf[1] >= 0x00 && Buf[1] <= 0x03)
 8002ade:	463b      	mov	r3, r7
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	f240 8197 	bls.w	8002e18 <runCommands+0x774>
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3301      	adds	r3, #1
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	f200 8190 	bhi.w	8002e18 <runCommands+0x774>
		{
			if 		(Buf[1] == 0x00)	//А_m12
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3301      	adds	r3, #1
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d15f      	bne.n	8002bc4 <runCommands+0x520>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3302      	adds	r3, #2
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	f107 0312 	add.w	r3, r7, #18
 8002b12:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8002b2a:	e01f      	b.n	8002b6c <runCommands+0x4c8>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002b2c:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	3306      	adds	r3, #6
 8002b34:	1d3a      	adds	r2, r7, #4
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	4413      	add	r3, r2
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	f107 030e 	add.w	r3, r7, #14
 8002b42:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m12[i + tOffset] = tData;
 8002b44:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8002b48:	f107 0212 	add.w	r2, r7, #18
 8002b4c:	8812      	ldrh	r2, [r2, #0]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f107 020e 	add.w	r2, r7, #14
 8002b54:	8811      	ldrh	r1, [r2, #0]
 8002b56:	4acf      	ldr	r2, [pc, #828]	; (8002e94 <runCommands+0x7f0>)
 8002b58:	3304      	adds	r3, #4
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	460a      	mov	r2, r1
 8002b60:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8002b62:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8002b66:	3301      	adds	r3, #1
 8002b68:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8002b6c:	f107 0310 	add.w	r3, r7, #16
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	f8b7 222e 	ldrh.w	r2, [r7, #558]	; 0x22e
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d3d8      	bcc.n	8002b2c <runCommands+0x488>
				}

				changeTableFlag = true;
 8002b7a:	4bc7      	ldr	r3, [pc, #796]	; (8002e98 <runCommands+0x7f4>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8002b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b84:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002b88:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8002b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8e:	2201      	movs	r2, #1
 8002b90:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2			->4
 8002b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b96:	3302      	adds	r3, #2
 8002b98:	f107 0212 	add.w	r2, r7, #18
 8002b9c:	8812      	ldrh	r2, [r2, #0]
 8002b9e:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8002ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	f107 0210 	add.w	r2, r7, #16
 8002baa:	8812      	ldrh	r2, [r2, #0]
 8002bac:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1		->7
 8002bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8002bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f009 f8d7 	bl	800bd70 <CDC_Transmit_FS>
				return;
 8002bc2:	e182      	b.n	8002eca <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x01)	//B_m12
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d15c      	bne.n	8002c8a <runCommands+0x5e6>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	f107 0312 	add.w	r3, r7, #18
 8002bde:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3304      	adds	r3, #4
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	f107 0310 	add.w	r3, r7, #16
 8002bee:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8002bf6:	e01f      	b.n	8002c38 <runCommands+0x594>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002bf8:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	3306      	adds	r3, #6
 8002c00:	1d3a      	adds	r2, r7, #4
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	f107 030e 	add.w	r3, r7, #14
 8002c0e:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m12[i + tOffset] = tData;
 8002c10:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8002c14:	f107 0212 	add.w	r2, r7, #18
 8002c18:	8812      	ldrh	r2, [r2, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f107 020e 	add.w	r2, r7, #14
 8002c20:	8811      	ldrh	r1, [r2, #0]
 8002c22:	4a9c      	ldr	r2, [pc, #624]	; (8002e94 <runCommands+0x7f0>)
 8002c24:	335c      	adds	r3, #92	; 0x5c
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	460a      	mov	r2, r1
 8002c2c:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8002c2e:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8002c32:	3301      	adds	r3, #1
 8002c34:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d3d8      	bcc.n	8002bf8 <runCommands+0x554>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8002c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002c4e:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8002c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c54:	2201      	movs	r2, #1
 8002c56:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8002c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	f107 0212 	add.w	r2, r7, #18
 8002c62:	8812      	ldrh	r2, [r2, #0]
 8002c64:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8002c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	f107 0210 	add.w	r2, r7, #16
 8002c70:	8812      	ldrh	r2, [r2, #0]
 8002c72:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8002c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c78:	2200      	movs	r2, #0
 8002c7a:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8002c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c80:	2101      	movs	r1, #1
 8002c82:	4618      	mov	r0, r3
 8002c84:	f009 f874 	bl	800bd70 <CDC_Transmit_FS>
				return;
 8002c88:	e11f      	b.n	8002eca <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x02)	//A_m27
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d15c      	bne.n	8002d50 <runCommands+0x6ac>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	f107 0312 	add.w	r3, r7, #18
 8002ca4:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3304      	adds	r3, #4
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8002cbc:	e01f      	b.n	8002cfe <runCommands+0x65a>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002cbe:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	3306      	adds	r3, #6
 8002cc6:	1d3a      	adds	r2, r7, #4
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	f107 030e 	add.w	r3, r7, #14
 8002cd4:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m27[i + tOffset] = tData;
 8002cd6:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8002cda:	f107 0212 	add.w	r2, r7, #18
 8002cde:	8812      	ldrh	r2, [r2, #0]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f107 020e 	add.w	r2, r7, #14
 8002ce6:	8811      	ldrh	r1, [r2, #0]
 8002ce8:	4a6a      	ldr	r2, [pc, #424]	; (8002e94 <runCommands+0x7f0>)
 8002cea:	33b4      	adds	r3, #180	; 0xb4
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8002cf4:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8002cfe:	f107 0310 	add.w	r3, r7, #16
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	f8b7 222a 	ldrh.w	r2, [r7, #554]	; 0x22a
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d3d8      	bcc.n	8002cbe <runCommands+0x61a>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8002d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d10:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002d14:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8002d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8002d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d22:	3302      	adds	r3, #2
 8002d24:	f107 0212 	add.w	r2, r7, #18
 8002d28:	8812      	ldrh	r2, [r2, #0]
 8002d2a:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8002d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d30:	3304      	adds	r3, #4
 8002d32:	f107 0210 	add.w	r2, r7, #16
 8002d36:	8812      	ldrh	r2, [r2, #0]
 8002d38:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8002d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d3e:	2200      	movs	r2, #0
 8002d40:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8002d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f009 f811 	bl	800bd70 <CDC_Transmit_FS>
				return;
 8002d4e:	e0bc      	b.n	8002eca <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x03)	//B_m27
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3301      	adds	r3, #1
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d15d      	bne.n	8002e18 <runCommands+0x774>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3302      	adds	r3, #2
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	f107 0312 	add.w	r3, r7, #18
 8002d6a:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3304      	adds	r3, #4
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	f107 0310 	add.w	r3, r7, #16
 8002d7a:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8002d82:	e020      	b.n	8002dc6 <runCommands+0x722>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002d84:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	3306      	adds	r3, #6
 8002d8c:	1d3a      	adds	r2, r7, #4
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	f107 030e 	add.w	r3, r7, #14
 8002d9a:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m27[i + tOffset] = tData;
 8002d9c:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8002da0:	f107 0212 	add.w	r2, r7, #18
 8002da4:	8812      	ldrh	r2, [r2, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	f107 020e 	add.w	r2, r7, #14
 8002dac:	8811      	ldrh	r1, [r2, #0]
 8002dae:	4a39      	ldr	r2, [pc, #228]	; (8002e94 <runCommands+0x7f0>)
 8002db0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	460a      	mov	r2, r1
 8002dba:	805a      	strh	r2, [r3, #2]
				for (uint16_t i = 0; i < tCount; i++)
 8002dbc:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8002dc6:	f107 0310 	add.w	r3, r7, #16
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d3d7      	bcc.n	8002d84 <runCommands+0x6e0>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8002dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd8:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002ddc:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8002dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de2:	2201      	movs	r2, #1
 8002de4:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8002de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dea:	3302      	adds	r3, #2
 8002dec:	f107 0212 	add.w	r2, r7, #18
 8002df0:	8812      	ldrh	r2, [r2, #0]
 8002df2:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8002df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df8:	3304      	adds	r3, #4
 8002dfa:	f107 0210 	add.w	r2, r7, #16
 8002dfe:	8812      	ldrh	r2, [r2, #0]
 8002e00:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8002e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e06:	2200      	movs	r2, #0
 8002e08:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8002e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4618      	mov	r0, r3
 8002e12:	f008 ffad 	bl	800bd70 <CDC_Transmit_FS>
				return;
 8002e16:	e058      	b.n	8002eca <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
		}
		UserTxBufferFS[0] = cmd;
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002e20:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8002e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e26:	2201      	movs	r2, #1
 8002e28:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8002e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2e:	2102      	movs	r1, #2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f008 ff9d 	bl	800bd70 <CDC_Transmit_FS>
		return;
 8002e36:	e048      	b.n	8002eca <runCommands+0x826>
		//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0B)	// TODO: Отправка CRC 1-4 таблицы [0x0B][1-4][CRC(1-4)]	answer:
 8002e38:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002e3c:	2b0b      	cmp	r3, #11
 8002e3e:	d041      	beq.n	8002ec4 <runCommands+0x820>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0C)	// TODO: Прием длины калибровочной таблицы [0x0C][Длина][???]
 8002e40:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	d03f      	beq.n	8002ec8 <runCommands+0x824>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0D)	// TODO: Запись во флеш калибровочной таблицы [0x0D] data: 1B (0x00 - успешно; 0x01 - ошибка при записи)	answer: 0x0D + 1B status
 8002e48:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002e4c:	2b0d      	cmp	r3, #13
 8002e4e:	d13c      	bne.n	8002eca <runCommands+0x826>
	{
		if (*Len >= 2 && (Buf[1] == 0x02))
 8002e50:	463b      	mov	r3, r7
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d922      	bls.n	8002ea0 <runCommands+0x7fc>
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d11c      	bne.n	8002ea0 <runCommands+0x7fc>
		{
			//TODO: Функция записи фо флеш. FIXME: не работает запись фо флеш!
			 changeTableFlag = true;
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <runCommands+0x7f4>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
			// writeTableInFlash();
			printf("changeTableFlag = true!");
 8002e6c:	480b      	ldr	r0, [pc, #44]	; (8002e9c <runCommands+0x7f8>)
 8002e6e:	f009 fbb7 	bl	800c5e0 <iprintf>
			UserTxBufferFS[0] = cmd;
 8002e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e76:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002e7a:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8002e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e80:	2200      	movs	r2, #0
 8002e82:	705a      	strb	r2, [r3, #1]
			CDC_Transmit_FS(UserTxBufferFS, 2);
 8002e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e88:	2102      	movs	r1, #2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f008 ff70 	bl	800bd70 <CDC_Transmit_FS>
			return;
 8002e90:	e01b      	b.n	8002eca <runCommands+0x826>
 8002e92:	bf00      	nop
 8002e94:	200004ac 	.word	0x200004ac
 8002e98:	20000254 	.word	0x20000254
 8002e9c:	0800da44 	.word	0x0800da44
		}
 		
		//--------------------------------------------------------------------------
		UserTxBufferFS[0] = cmd;
 8002ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea4:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002ea8:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8002eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eae:	2201      	movs	r2, #1
 8002eb0:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8002eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f008 ff59 	bl	800bd70 <CDC_Transmit_FS>
		return;
 8002ebe:	e004      	b.n	8002eca <runCommands+0x826>
		return;
 8002ec0:	bf00      	nop
 8002ec2:	e002      	b.n	8002eca <runCommands+0x826>
		return;
 8002ec4:	bf00      	nop
 8002ec6:	e000      	b.n	8002eca <runCommands+0x826>
		return;
 8002ec8:	bf00      	nop
		//--------------------------------------------------------------------------
	}
//-------------------------------------------------------------------------
	
}
 8002eca:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}
 8002ed2:	bf00      	nop

08002ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002eda:	f000 ff9b 	bl	8003e14 <HAL_Init>

	/* USER CODE BEGIN Init */
//--------------------------------------------------------------------------
#if DWT_INIT
	DWT_Init();
 8002ede:	f7ff f9ab 	bl	8002238 <DWT_Init>
	//--------------------------------------------------------------------------

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002ee2:	f000 fabd 	bl	8003460 <SystemClock_Config>
//-------------------------------------------------------------------------

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002ee6:	f000 fc67 	bl	80037b8 <MX_GPIO_Init>
	MX_SPI1_Init();
 8002eea:	f000 fb69 	bl	80035c0 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8002eee:	f008 fe7d 	bl	800bbec <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 8002ef2:	f000 fb13 	bl	800351c <MX_ADC1_Init>
	MX_TIM3_Init();
 8002ef6:	f000 fb9b 	bl	8003630 <MX_TIM3_Init>
	MX_TIM4_Init();
 8002efa:	f000 fbfb 	bl	80036f4 <MX_TIM4_Init>
	MX_CRC_Init();
 8002efe:	f000 fb4b 	bl	8003598 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	//**************************************************************************
#if TEST_UID
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 8002f02:	4ba7      	ldr	r3, [pc, #668]	; (80031a0 <main+0x2cc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4ba6      	ldr	r3, [pc, #664]	; (80031a4 <main+0x2d0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	4ba5      	ldr	r3, [pc, #660]	; (80031a8 <main+0x2d4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4aa4      	ldr	r2, [pc, #656]	; (80031ac <main+0x2d8>)
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	9201      	str	r2, [sp, #4]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	4603      	mov	r3, r0
 8002f24:	460a      	mov	r2, r1
 8002f26:	49a2      	ldr	r1, [pc, #648]	; (80031b0 <main+0x2dc>)
 8002f28:	48a2      	ldr	r0, [pc, #648]	; (80031b4 <main+0x2e0>)
 8002f2a:	f009 fb71 	bl	800c610 <siprintf>
	printf((uint8_t *)buffer);
 8002f2e:	48a1      	ldr	r0, [pc, #644]	; (80031b4 <main+0x2e0>)
 8002f30:	f009 fb56 	bl	800c5e0 <iprintf>
#endif /* TEST_UID */

	//**************************************************************************
#if TEST_TIM_CAPTURE
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002f34:	2100      	movs	r1, #0
 8002f36:	48a0      	ldr	r0, [pc, #640]	; (80031b8 <main+0x2e4>)
 8002f38:	f004 fd26 	bl	8007988 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	489e      	ldr	r0, [pc, #632]	; (80031b8 <main+0x2e4>)
 8002f40:	f004 fd22 	bl	8007988 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002f44:	2100      	movs	r1, #0
 8002f46:	489d      	ldr	r0, [pc, #628]	; (80031bc <main+0x2e8>)
 8002f48:	f004 fd1e 	bl	8007988 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8002f4c:	2104      	movs	r1, #4
 8002f4e:	489b      	ldr	r0, [pc, #620]	; (80031bc <main+0x2e8>)
 8002f50:	f004 fd1a 	bl	8007988 <HAL_TIM_IC_Start_IT>
#endif /* TEST_TIM_CAPTURE */
//--------------------------------------------------------------------------
#if TEST_DAC
	SetAllDAC();
 8002f54:	f7ff f9e2 	bl	800231c <SetAllDAC>
#endif /* TEST_DAC */
	   //**************************************************************************
#if TEST_ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002f58:	4899      	ldr	r0, [pc, #612]	; (80031c0 <main+0x2ec>)
 8002f5a:	f001 fbcb 	bl	80046f4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 8002f5e:	4898      	ldr	r0, [pc, #608]	; (80031c0 <main+0x2ec>)
 8002f60:	f001 f8b6 	bl	80040d0 <HAL_ADC_Start_IT>

#endif /* TEST_ADC */
//**************************************************************************
#if TEST_FLASH_TABLE
	// Чтение DevNVRAM
	uint32_t l_Address = FLASH_TABLE_START_ADDR;
 8002f64:	4b97      	ldr	r3, [pc, #604]	; (80031c4 <main+0x2f0>)
 8002f66:	61fb      	str	r3, [r7, #28]
	uint32_t l_Error = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	607b      	str	r3, [r7, #4]
	uint32_t l_Index = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8002f70:	e00b      	b.n	8002f8a <main+0xb6>
	{
		DevNVRAM.data32[l_Index] = *(__IO uint32_t *)l_Address;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4994      	ldr	r1, [pc, #592]	; (80031c8 <main+0x2f4>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		l_Index = l_Index + 1;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	3301      	adds	r3, #1
 8002f82:	61bb      	str	r3, [r7, #24]
		l_Address = l_Address + 4;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	3304      	adds	r3, #4
 8002f88:	61fb      	str	r3, [r7, #28]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4a8f      	ldr	r2, [pc, #572]	; (80031cc <main+0x2f8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d9ef      	bls.n	8002f72 <main+0x9e>
	}

//--------------------------------------------------------------------------
	// если после чтения майджик кей не найден, то это первый запуск

	if (DevNVRAM.calibration_table.MagicNum != 0)
 8002f92:	4b8d      	ldr	r3, [pc, #564]	; (80031c8 <main+0x2f4>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80b2 	beq.w	8003100 <main+0x22c>
	{
		// Подготовка
		// Заносим типовые значения
		// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!
		memset(DevNVRAM.data32, 0, sizeof(DevNVRAM.data32));
 8002f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4889      	ldr	r0, [pc, #548]	; (80031c8 <main+0x2f4>)
 8002fa4:	f009 fb14 	bl	800c5d0 <memset>

		// ЗАГЛУШКА
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8002fa8:	2300      	movs	r3, #0
 8002faa:	75fb      	strb	r3, [r7, #23]
 8002fac:	e00b      	b.n	8002fc6 <main+0xf2>
		{
			DevNVRAM.calibration_table.dacValA_m12[i] = i;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	7dfa      	ldrb	r2, [r7, #23]
 8002fb2:	b291      	uxth	r1, r2
 8002fb4:	4a84      	ldr	r2, [pc, #528]	; (80031c8 <main+0x2f4>)
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	460a      	mov	r2, r1
 8002fbe:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
 8002fc8:	2b57      	cmp	r3, #87	; 0x57
 8002fca:	d9f0      	bls.n	8002fae <main+0xda>
		}
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	75bb      	strb	r3, [r7, #22]
 8002fd0:	e00b      	b.n	8002fea <main+0x116>
		{
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 8002fd2:	7dbb      	ldrb	r3, [r7, #22]
 8002fd4:	7dba      	ldrb	r2, [r7, #22]
 8002fd6:	b291      	uxth	r1, r2
 8002fd8:	4a7b      	ldr	r2, [pc, #492]	; (80031c8 <main+0x2f4>)
 8002fda:	335c      	adds	r3, #92	; 0x5c
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	460a      	mov	r2, r1
 8002fe2:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8002fe4:	7dbb      	ldrb	r3, [r7, #22]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	75bb      	strb	r3, [r7, #22]
 8002fea:	7dbb      	ldrb	r3, [r7, #22]
 8002fec:	2b57      	cmp	r3, #87	; 0x57
 8002fee:	d9f0      	bls.n	8002fd2 <main+0xfe>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	757b      	strb	r3, [r7, #21]
 8002ff4:	e00b      	b.n	800300e <main+0x13a>
		{
			DevNVRAM.calibration_table.dacValA_m27[i] = i;
 8002ff6:	7d7b      	ldrb	r3, [r7, #21]
 8002ff8:	7d7a      	ldrb	r2, [r7, #21]
 8002ffa:	b291      	uxth	r1, r2
 8002ffc:	4a72      	ldr	r2, [pc, #456]	; (80031c8 <main+0x2f4>)
 8002ffe:	33b4      	adds	r3, #180	; 0xb4
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	460a      	mov	r2, r1
 8003006:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8003008:	7d7b      	ldrb	r3, [r7, #21]
 800300a:	3301      	adds	r3, #1
 800300c:	757b      	strb	r3, [r7, #21]
 800300e:	7d7b      	ldrb	r3, [r7, #21]
 8003010:	2ba2      	cmp	r3, #162	; 0xa2
 8003012:	d9f0      	bls.n	8002ff6 <main+0x122>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8003014:	2300      	movs	r3, #0
 8003016:	753b      	strb	r3, [r7, #20]
 8003018:	e00b      	b.n	8003032 <main+0x15e>
		{
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 800301a:	7d3b      	ldrb	r3, [r7, #20]
 800301c:	7d3a      	ldrb	r2, [r7, #20]
 800301e:	b291      	uxth	r1, r2
 8003020:	4a69      	ldr	r2, [pc, #420]	; (80031c8 <main+0x2f4>)
 8003022:	335c      	adds	r3, #92	; 0x5c
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	460a      	mov	r2, r1
 800302a:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 800302c:	7d3b      	ldrb	r3, [r7, #20]
 800302e:	3301      	adds	r3, #1
 8003030:	753b      	strb	r3, [r7, #20]
 8003032:	7d3b      	ldrb	r3, [r7, #20]
 8003034:	2ba2      	cmp	r3, #162	; 0xa2
 8003036:	d9f0      	bls.n	800301a <main+0x146>
		}

		crete_calibration_table(&DevNVRAM);
 8003038:	4863      	ldr	r0, [pc, #396]	; (80031c8 <main+0x2f4>)
 800303a:	f7fd fe91 	bl	8000d60 <crete_calibration_table>

		DevNVRAM.calibration_table.Hardwire = 0x06;
 800303e:	4b62      	ldr	r3, [pc, #392]	; (80031c8 <main+0x2f4>)
 8003040:	2206      	movs	r2, #6
 8003042:	801a      	strh	r2, [r3, #0]
		DevNVRAM.calibration_table.Firmware = 0x05;
 8003044:	4b60      	ldr	r3, [pc, #384]	; (80031c8 <main+0x2f4>)
 8003046:	2205      	movs	r2, #5
 8003048:	805a      	strh	r2, [r3, #2]
		DevNVRAM.calibration_table.SN = 0x1121001; //11 недел	я + год + порядковый номер изготовления
 800304a:	4b5f      	ldr	r3, [pc, #380]	; (80031c8 <main+0x2f4>)
 800304c:	4a60      	ldr	r2, [pc, #384]	; (80031d0 <main+0x2fc>)
 800304e:	605a      	str	r2, [r3, #4]
		DevNVRAM.calibration_table.MagicNum = MAGIC_KEY_DEFINE;
 8003050:	4b5d      	ldr	r3, [pc, #372]	; (80031c8 <main+0x2f4>)
 8003052:	4a60      	ldr	r2, [pc, #384]	; (80031d4 <main+0x300>)
 8003054:	609a      	str	r2, [r3, #8]

		DevNVRAM.sector.NWrite = 0;
 8003056:	4b5c      	ldr	r3, [pc, #368]	; (80031c8 <main+0x2f4>)
 8003058:	2200      	movs	r2, #0
 800305a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

		DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));//DONE: нужно отправлять длину кратную 32b! -  по какой то причине в этом проекте не работает CRC!!!
 800305e:	4b5a      	ldr	r3, [pc, #360]	; (80031c8 <main+0x2f4>)
 8003060:	2200      	movs	r2, #0
 8003062:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

		//--------------------------------------------------------------------------
		//если после чтения майджик кей не найден, то это первый запуск записываем дефолтную таблицу
		l_Address = FLASH_TABLE_START_ADDR;
 8003066:	4b57      	ldr	r3, [pc, #348]	; (80031c4 <main+0x2f0>)
 8003068:	61fb      	str	r3, [r7, #28]
		l_Error = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
		l_Index = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	61bb      	str	r3, [r7, #24]

		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8003072:	e010      	b.n	8003096 <main+0x1c2>
		{
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t *)l_Address)
 8003074:	4a54      	ldr	r2, [pc, #336]	; (80031c8 <main+0x2f4>)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d002      	beq.n	800308a <main+0x1b6>
			{
				l_Error++;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3301      	adds	r3, #1
 8003088:	607b      	str	r3, [r7, #4]
			}
			l_Index = l_Index + 1;
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	3301      	adds	r3, #1
 800308e:	61bb      	str	r3, [r7, #24]
			l_Address = l_Address + 4;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3304      	adds	r3, #4
 8003094:	61fb      	str	r3, [r7, #28]
		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	4a4c      	ldr	r2, [pc, #304]	; (80031cc <main+0x2f8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d9ea      	bls.n	8003074 <main+0x1a0>
		}

		if (l_Error > 0)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d02d      	beq.n	8003100 <main+0x22c>
		{ // конфигурация изменилась сохраняем
			// Готовим к записи в память
			HAL_FLASH_Unlock();
 80030a4:	f001 fd66 	bl	8004b74 <HAL_FLASH_Unlock>
			// Очищаем страницу памяти
			HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 80030a8:	1d3b      	adds	r3, r7, #4
 80030aa:	4619      	mov	r1, r3
 80030ac:	484a      	ldr	r0, [pc, #296]	; (80031d8 <main+0x304>)
 80030ae:	f001 fe49 	bl	8004d44 <HAL_FLASHEx_Erase>
			//Пишем данные в память
			l_Address = FLASH_TABLE_START_ADDR;
 80030b2:	4b44      	ldr	r3, [pc, #272]	; (80031c4 <main+0x2f0>)
 80030b4:	61fb      	str	r3, [r7, #28]
			l_Error = 0x00;
 80030b6:	2300      	movs	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]
			l_Index = 0x00;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]

			while (l_Address < FLASH_TABLE_STOP_ADDR)
 80030be:	e019      	b.n	80030f4 <main+0x220>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
									  DevNVRAM.data32[l_Index]) != HAL_OK)
 80030c0:	4a41      	ldr	r2, [pc, #260]	; (80031c8 <main+0x2f4>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 80030c8:	461a      	mov	r2, r3
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	69f9      	ldr	r1, [r7, #28]
 80030d0:	2002      	movs	r0, #2
 80030d2:	f001 fcdf 	bl	8004a94 <HAL_FLASH_Program>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <main+0x20e>
				{
					l_Error++;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3301      	adds	r3, #1
 80030e0:	607b      	str	r3, [r7, #4]
				}

				l_Address = l_Address + 4;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3304      	adds	r3, #4
 80030e6:	61fb      	str	r3, [r7, #28]
				l_Index = l_Index + 1;
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	3301      	adds	r3, #1
 80030ec:	61bb      	str	r3, [r7, #24]
				HAL_Delay(10);
 80030ee:	200a      	movs	r0, #10
 80030f0:	f000 fef2 	bl	8003ed8 <HAL_Delay>
			while (l_Address < FLASH_TABLE_STOP_ADDR)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	4a35      	ldr	r2, [pc, #212]	; (80031cc <main+0x2f8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d9e1      	bls.n	80030c0 <main+0x1ec>
			}
			HAL_FLASH_Lock();
 80030fc:	f001 fd60 	bl	8004bc0 <HAL_FLASH_Lock>
	} //если после чтения майджик кей не найден, то это первый запуск записываем дефолтную таблицу
	// TODO: Надо по запросе какая версия калиброчной табцы высылать значения дефолтной таблице...
	//--------------------------------------------------------------------------
#endif /* TEST_FLASH_TABLE */

	uint32_t timme = 0; // для таймера в 10 сек
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Циклически проверяем соотвествует ли информация в памяти массиву настроек?
		if ((HAL_GetTick() - timme) > 10000) // интервал  10сек
 8003104:	f000 fede 	bl	8003ec4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003112:	4293      	cmp	r3, r2
 8003114:	f240 808f 	bls.w	8003236 <main+0x362>
		{
#if TEST_FLASH_TABLE

			if (changeTableFlag)
 8003118:	4b30      	ldr	r3, [pc, #192]	; (80031dc <main+0x308>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8087 	beq.w	8003230 <main+0x35c>
			{
				changeTableFlag = false;
 8003122:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <main+0x308>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
				printf("write");
 8003128:	482d      	ldr	r0, [pc, #180]	; (80031e0 <main+0x30c>)
 800312a:	f009 fa59 	bl	800c5e0 <iprintf>
				// Циклически проверяем соотвествует ли информация в памяти массиву настроек?

				l_Address = FLASH_TABLE_START_ADDR;
 800312e:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <main+0x2f0>)
 8003130:	61fb      	str	r3, [r7, #28]
				l_Error = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	607b      	str	r3, [r7, #4]
				l_Index = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
				//Читаем и сравниваем
				while (l_Address < FLASH_TABLE_STOP_ADDR)
 800313a:	e010      	b.n	800315e <main+0x28a>
				{
					if (DevNVRAM.data32[l_Index] != *(__IO uint32_t *)l_Address)
 800313c:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <main+0x2f4>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d002      	beq.n	8003152 <main+0x27e>
					{
						l_Error++;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3301      	adds	r3, #1
 8003150:	607b      	str	r3, [r7, #4]
					}
					l_Index = l_Index + 1;
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	3301      	adds	r3, #1
 8003156:	61bb      	str	r3, [r7, #24]
					l_Address = l_Address + 4;
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	3304      	adds	r3, #4
 800315c:	61fb      	str	r3, [r7, #28]
				while (l_Address < FLASH_TABLE_STOP_ADDR)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	4a1a      	ldr	r2, [pc, #104]	; (80031cc <main+0x2f8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d9ea      	bls.n	800313c <main+0x268>
				}

				if (l_Error > 0)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d05b      	beq.n	8003224 <main+0x350>
				{ // конфигурация изменилась сохраняем
					// Готовим к записи в память
					HAL_FLASH_Unlock();
 800316c:	f001 fd02 	bl	8004b74 <HAL_FLASH_Unlock>
					// Очищаем страницу памяти
					HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	4619      	mov	r1, r3
 8003174:	4818      	ldr	r0, [pc, #96]	; (80031d8 <main+0x304>)
 8003176:	f001 fde5 	bl	8004d44 <HAL_FLASHEx_Erase>
					//Пишем данные в память
					l_Address = FLASH_TABLE_START_ADDR;
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <main+0x2f0>)
 800317c:	61fb      	str	r3, [r7, #28]
					l_Error = 0x00;
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
					l_Index = 0x00;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]

					DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <main+0x2f4>)
 8003188:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800318c:	3301      	adds	r3, #1
 800318e:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <main+0x2f4>)
 8003190:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
					DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <main+0x2f4>)
 8003196:	2200      	movs	r2, #0
 8003198:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

					while (l_Address < FLASH_TABLE_STOP_ADDR)
 800319c:	e03c      	b.n	8003218 <main+0x344>
 800319e:	bf00      	nop
 80031a0:	20000000 	.word	0x20000000
 80031a4:	20000004 	.word	0x20000004
 80031a8:	20000008 	.word	0x20000008
 80031ac:	2000000c 	.word	0x2000000c
 80031b0:	0800da5c 	.word	0x0800da5c
 80031b4:	20000214 	.word	0x20000214
 80031b8:	200008fc 	.word	0x200008fc
 80031bc:	200008ac 	.word	0x200008ac
 80031c0:	20000954 	.word	0x20000954
 80031c4:	0801fc00 	.word	0x0801fc00
 80031c8:	200004ac 	.word	0x200004ac
 80031cc:	0801ffff 	.word	0x0801ffff
 80031d0:	01121001 	.word	0x01121001
 80031d4:	48151623 	.word	0x48151623
 80031d8:	20000944 	.word	0x20000944
 80031dc:	20000254 	.word	0x20000254
 80031e0:	0800da70 	.word	0x0800da70
					{
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
											  DevNVRAM.data32[l_Index]) != HAL_OK)
 80031e4:	4a8b      	ldr	r2, [pc, #556]	; (8003414 <main+0x540>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 80031ec:	461a      	mov	r2, r3
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	69f9      	ldr	r1, [r7, #28]
 80031f4:	2002      	movs	r0, #2
 80031f6:	f001 fc4d 	bl	8004a94 <HAL_FLASH_Program>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <main+0x332>
						{
							l_Error++;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3301      	adds	r3, #1
 8003204:	607b      	str	r3, [r7, #4]
						}

						l_Address = l_Address + 4;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3304      	adds	r3, #4
 800320a:	61fb      	str	r3, [r7, #28]
						l_Index = l_Index + 1;
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	3301      	adds	r3, #1
 8003210:	61bb      	str	r3, [r7, #24]
						HAL_Delay(10);
 8003212:	200a      	movs	r0, #10
 8003214:	f000 fe60 	bl	8003ed8 <HAL_Delay>
					while (l_Address < FLASH_TABLE_STOP_ADDR)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4a7f      	ldr	r2, [pc, #508]	; (8003418 <main+0x544>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d9e1      	bls.n	80031e4 <main+0x310>
					}
					HAL_FLASH_Lock();
 8003220:	f001 fcce 	bl	8004bc0 <HAL_FLASH_Lock>
				}
				HAL_Delay(100);
 8003224:	2064      	movs	r0, #100	; 0x64
 8003226:	f000 fe57 	bl	8003ed8 <HAL_Delay>
				//--------------------------------------------------------------------------
				printf("flash done");
 800322a:	487c      	ldr	r0, [pc, #496]	; (800341c <main+0x548>)
 800322c:	f009 f9d8 	bl	800c5e0 <iprintf>
			}
#endif /* TEST_FLASH_TABLE */
			timme = HAL_GetTick();
 8003230:	f000 fe48 	bl	8003ec4 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]
		}

//**************************************************************************
#if TEST_READ_BTN //TODO: данная реализация плохо отрабатывает! TODO: Нужно переделать на EXTI+TIM

		uint32_t ms = HAL_GetTick();
 8003236:	f000 fe45 	bl	8003ec4 <HAL_GetTick>
 800323a:	60f8      	str	r0, [r7, #12]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 800323c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003240:	4877      	ldr	r0, [pc, #476]	; (8003420 <main+0x54c>)
 8003242:	f001 ffab 	bl	800519c <HAL_GPIO_ReadPin>
 8003246:	4603      	mov	r3, r0
 8003248:	72fb      	strb	r3, [r7, #11]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 800324a:	7afb      	ldrb	r3, [r7, #11]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d113      	bne.n	8003278 <main+0x3a4>
 8003250:	4b74      	ldr	r3, [pc, #464]	; (8003424 <main+0x550>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10f      	bne.n	8003278 <main+0x3a4>
 8003258:	4b73      	ldr	r3, [pc, #460]	; (8003428 <main+0x554>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b32      	cmp	r3, #50	; 0x32
 8003262:	d909      	bls.n	8003278 <main+0x3a4>
		{
			short_state1 = 1;
 8003264:	4b6f      	ldr	r3, [pc, #444]	; (8003424 <main+0x550>)
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 800326a:	4b70      	ldr	r3, [pc, #448]	; (800342c <main+0x558>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8003270:	4a6d      	ldr	r2, [pc, #436]	; (8003428 <main+0x554>)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e02e      	b.n	80032d6 <main+0x402>
		}
		else if (key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 8003278:	7afb      	ldrb	r3, [r7, #11]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d111      	bne.n	80032a2 <main+0x3ce>
 800327e:	4b6b      	ldr	r3, [pc, #428]	; (800342c <main+0x558>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10d      	bne.n	80032a2 <main+0x3ce>
 8003286:	4b68      	ldr	r3, [pc, #416]	; (8003428 <main+0x554>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003292:	d906      	bls.n	80032a2 <main+0x3ce>
		{
			long_state1 = 1;
 8003294:	4b65      	ldr	r3, [pc, #404]	; (800342c <main+0x558>)
 8003296:	2201      	movs	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 800329a:	4b65      	ldr	r3, [pc, #404]	; (8003430 <main+0x55c>)
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e019      	b.n	80032d6 <main+0x402>
		}
		else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 80032a2:	7afb      	ldrb	r3, [r7, #11]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d116      	bne.n	80032d6 <main+0x402>
 80032a8:	4b5e      	ldr	r3, [pc, #376]	; (8003424 <main+0x550>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d012      	beq.n	80032d6 <main+0x402>
 80032b0:	4b5d      	ldr	r3, [pc, #372]	; (8003428 <main+0x554>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b32      	cmp	r3, #50	; 0x32
 80032ba:	d90c      	bls.n	80032d6 <main+0x402>
		{
			short_state1 = 0;
 80032bc:	4b59      	ldr	r3, [pc, #356]	; (8003424 <main+0x550>)
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 80032c2:	4a59      	ldr	r2, [pc, #356]	; (8003428 <main+0x554>)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6013      	str	r3, [r2, #0]

			if (!long_state1)
 80032c8:	4b58      	ldr	r3, [pc, #352]	; (800342c <main+0x558>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <main+0x402>
			{
				// действие на короткое нажатие
				btn1_short_rd = 1;
 80032d0:	4b58      	ldr	r3, [pc, #352]	; (8003434 <main+0x560>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 80032d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032da:	4851      	ldr	r0, [pc, #324]	; (8003420 <main+0x54c>)
 80032dc:	f001 ff5e 	bl	800519c <HAL_GPIO_ReadPin>
 80032e0:	4603      	mov	r3, r0
 80032e2:	72bb      	strb	r3, [r7, #10]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 80032e4:	7abb      	ldrb	r3, [r7, #10]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d113      	bne.n	8003312 <main+0x43e>
 80032ea:	4b53      	ldr	r3, [pc, #332]	; (8003438 <main+0x564>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10f      	bne.n	8003312 <main+0x43e>
 80032f2:	4b52      	ldr	r3, [pc, #328]	; (800343c <main+0x568>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b32      	cmp	r3, #50	; 0x32
 80032fc:	d909      	bls.n	8003312 <main+0x43e>
		{
			short_state2 = 1;
 80032fe:	4b4e      	ldr	r3, [pc, #312]	; (8003438 <main+0x564>)
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 8003304:	4b4e      	ldr	r3, [pc, #312]	; (8003440 <main+0x56c>)
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 800330a:	4a4c      	ldr	r2, [pc, #304]	; (800343c <main+0x568>)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	e02e      	b.n	8003370 <main+0x49c>
		}
		else if (key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 8003312:	7abb      	ldrb	r3, [r7, #10]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d111      	bne.n	800333c <main+0x468>
 8003318:	4b49      	ldr	r3, [pc, #292]	; (8003440 <main+0x56c>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10d      	bne.n	800333c <main+0x468>
 8003320:	4b46      	ldr	r3, [pc, #280]	; (800343c <main+0x568>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800332c:	d906      	bls.n	800333c <main+0x468>
		{
			long_state2 = 1;
 800332e:	4b44      	ldr	r3, [pc, #272]	; (8003440 <main+0x56c>)
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 8003334:	4b43      	ldr	r3, [pc, #268]	; (8003444 <main+0x570>)
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e019      	b.n	8003370 <main+0x49c>
		}
		else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 800333c:	7abb      	ldrb	r3, [r7, #10]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d116      	bne.n	8003370 <main+0x49c>
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <main+0x564>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d012      	beq.n	8003370 <main+0x49c>
 800334a:	4b3c      	ldr	r3, [pc, #240]	; (800343c <main+0x568>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b32      	cmp	r3, #50	; 0x32
 8003354:	d90c      	bls.n	8003370 <main+0x49c>
		{
			short_state2 = 0;
 8003356:	4b38      	ldr	r3, [pc, #224]	; (8003438 <main+0x564>)
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 800335c:	4a37      	ldr	r2, [pc, #220]	; (800343c <main+0x568>)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6013      	str	r3, [r2, #0]

			if (!long_state2)
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <main+0x56c>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <main+0x49c>
			{
				// действие на короткое нажатие
				btn2_short_rd = 1;
 800336a:	4b37      	ldr	r3, [pc, #220]	; (8003448 <main+0x574>)
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 8003370:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003374:	482a      	ldr	r0, [pc, #168]	; (8003420 <main+0x54c>)
 8003376:	f001 ff11 	bl	800519c <HAL_GPIO_ReadPin>
 800337a:	4603      	mov	r3, r0
 800337c:	727b      	strb	r3, [r7, #9]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 800337e:	7a7b      	ldrb	r3, [r7, #9]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d113      	bne.n	80033ac <main+0x4d8>
 8003384:	4b31      	ldr	r3, [pc, #196]	; (800344c <main+0x578>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10f      	bne.n	80033ac <main+0x4d8>
 800338c:	4b30      	ldr	r3, [pc, #192]	; (8003450 <main+0x57c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b32      	cmp	r3, #50	; 0x32
 8003396:	d909      	bls.n	80033ac <main+0x4d8>
		{
			short_state3 = 1;
 8003398:	4b2c      	ldr	r3, [pc, #176]	; (800344c <main+0x578>)
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 800339e:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <main+0x580>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 80033a4:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <main+0x57c>)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e032      	b.n	8003412 <main+0x53e>
		}
		else if (key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 80033ac:	7a7b      	ldrb	r3, [r7, #9]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d111      	bne.n	80033d6 <main+0x502>
 80033b2:	4b28      	ldr	r3, [pc, #160]	; (8003454 <main+0x580>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10d      	bne.n	80033d6 <main+0x502>
 80033ba:	4b25      	ldr	r3, [pc, #148]	; (8003450 <main+0x57c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033c6:	d906      	bls.n	80033d6 <main+0x502>
		{
			long_state3 = 1;
 80033c8:	4b22      	ldr	r3, [pc, #136]	; (8003454 <main+0x580>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <main+0x584>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e01d      	b.n	8003412 <main+0x53e>
		}
		else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 80033d6:	7a7b      	ldrb	r3, [r7, #9]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f47f ae93 	bne.w	8003104 <main+0x230>
 80033de:	4b1b      	ldr	r3, [pc, #108]	; (800344c <main+0x578>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f43f ae8e 	beq.w	8003104 <main+0x230>
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <main+0x57c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b32      	cmp	r3, #50	; 0x32
 80033f2:	f67f ae87 	bls.w	8003104 <main+0x230>
		{
			short_state3 = 0;
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <main+0x578>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 80033fc:	4a14      	ldr	r2, [pc, #80]	; (8003450 <main+0x57c>)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6013      	str	r3, [r2, #0]

			if (!long_state3)
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <main+0x580>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f47f ae7c 	bne.w	8003104 <main+0x230>
			{
				// действие на короткое нажатие
				btn3_short_rd = 1;
 800340c:	4b13      	ldr	r3, [pc, #76]	; (800345c <main+0x588>)
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
	{
 8003412:	e677      	b.n	8003104 <main+0x230>
 8003414:	200004ac 	.word	0x200004ac
 8003418:	0801ffff 	.word	0x0801ffff
 800341c:	0800da78 	.word	0x0800da78
 8003420:	40010c00 	.word	0x40010c00
 8003424:	2000025a 	.word	0x2000025a
 8003428:	2000025c 	.word	0x2000025c
 800342c:	2000025b 	.word	0x2000025b
 8003430:	20000260 	.word	0x20000260
 8003434:	20000261 	.word	0x20000261
 8003438:	20000262 	.word	0x20000262
 800343c:	20000264 	.word	0x20000264
 8003440:	20000263 	.word	0x20000263
 8003444:	20000268 	.word	0x20000268
 8003448:	20000269 	.word	0x20000269
 800344c:	2000026a 	.word	0x2000026a
 8003450:	2000026c 	.word	0x2000026c
 8003454:	2000026b 	.word	0x2000026b
 8003458:	20000270 	.word	0x20000270
 800345c:	20000271 	.word	0x20000271

08003460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b094      	sub	sp, #80	; 0x50
 8003464:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800346a:	2228      	movs	r2, #40	; 0x28
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f009 f8ae 	bl	800c5d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003484:	1d3b      	adds	r3, r7, #4
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003490:	2301      	movs	r3, #1
 8003492:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800349a:	2300      	movs	r3, #0
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800349e:	2301      	movs	r3, #1
 80034a0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034a2:	2302      	movs	r3, #2
 80034a4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80034ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80034b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034b6:	4618      	mov	r0, r3
 80034b8:	f003 fa30 	bl	800691c <HAL_RCC_OscConfig>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <SystemClock_Config+0x66>
	{
		Error_Handler();
 80034c2:	f000 fa09 	bl	80038d8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034c6:	230f      	movs	r3, #15
 80034c8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034ca:	2302      	movs	r3, #2
 80034cc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	2102      	movs	r1, #2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f003 fc9a 	bl	8006e1c <HAL_RCC_ClockConfig>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <SystemClock_Config+0x92>
	{
		Error_Handler();
 80034ee:	f000 f9f3 	bl	80038d8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 80034f2:	2312      	movs	r3, #18
 80034f4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80034f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fa:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	4618      	mov	r0, r3
 8003504:	f003 fe10 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <SystemClock_Config+0xb2>
	{
		Error_Handler();
 800350e:	f000 f9e3 	bl	80038d8 <Error_Handler>
	}
}
 8003512:	bf00      	nop
 8003514:	3750      	adds	r7, #80	; 0x50
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
  */
	hadc1.Instance = ADC1;
 800352c:	4b18      	ldr	r3, [pc, #96]	; (8003590 <MX_ADC1_Init+0x74>)
 800352e:	4a19      	ldr	r2, [pc, #100]	; (8003594 <MX_ADC1_Init+0x78>)
 8003530:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003532:	4b17      	ldr	r3, [pc, #92]	; (8003590 <MX_ADC1_Init+0x74>)
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8003538:	4b15      	ldr	r3, [pc, #84]	; (8003590 <MX_ADC1_Init+0x74>)
 800353a:	2201      	movs	r2, #1
 800353c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <MX_ADC1_Init+0x74>)
 8003540:	2200      	movs	r2, #0
 8003542:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <MX_ADC1_Init+0x74>)
 8003546:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800354a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <MX_ADC1_Init+0x74>)
 800354e:	2200      	movs	r2, #0
 8003550:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <MX_ADC1_Init+0x74>)
 8003554:	2201      	movs	r2, #1
 8003556:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003558:	480d      	ldr	r0, [pc, #52]	; (8003590 <MX_ADC1_Init+0x74>)
 800355a:	f000 fce1 	bl	8003f20 <HAL_ADC_Init>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8003564:	f000 f9b8 	bl	80038d8 <Error_Handler>
	}
	/** Configure Regular Channel
  */
	sConfig.Channel = ADC_CHANNEL_3;
 8003568:	2303      	movs	r3, #3
 800356a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800356c:	2301      	movs	r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8003570:	2302      	movs	r3, #2
 8003572:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003574:	1d3b      	adds	r3, r7, #4
 8003576:	4619      	mov	r1, r3
 8003578:	4805      	ldr	r0, [pc, #20]	; (8003590 <MX_ADC1_Init+0x74>)
 800357a:	f000 ff37 	bl	80043ec <HAL_ADC_ConfigChannel>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8003584:	f000 f9a8 	bl	80038d8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000954 	.word	0x20000954
 8003594:	40012400 	.word	0x40012400

08003598 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <MX_CRC_Init+0x20>)
 800359e:	4a07      	ldr	r2, [pc, #28]	; (80035bc <MX_CRC_Init+0x24>)
 80035a0:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80035a2:	4805      	ldr	r0, [pc, #20]	; (80035b8 <MX_CRC_Init+0x20>)
 80035a4:	f001 fa59 	bl	8004a5a <HAL_CRC_Init>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <MX_CRC_Init+0x1a>
	{
		Error_Handler();
 80035ae:	f000 f993 	bl	80038d8 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	200008f4 	.word	0x200008f4
 80035bc:	40023000 	.word	0x40023000

080035c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80035c4:	4b18      	ldr	r3, [pc, #96]	; (8003628 <MX_SPI1_Init+0x68>)
 80035c6:	4a19      	ldr	r2, [pc, #100]	; (800362c <MX_SPI1_Init+0x6c>)
 80035c8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80035ca:	4b17      	ldr	r3, [pc, #92]	; (8003628 <MX_SPI1_Init+0x68>)
 80035cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035d0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <MX_SPI1_Init+0x68>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80035d8:	4b13      	ldr	r3, [pc, #76]	; (8003628 <MX_SPI1_Init+0x68>)
 80035da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035de:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <MX_SPI1_Init+0x68>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <MX_SPI1_Init+0x68>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80035ec:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <MX_SPI1_Init+0x68>)
 80035ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <MX_SPI1_Init+0x68>)
 80035f6:	2208      	movs	r2, #8
 80035f8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <MX_SPI1_Init+0x68>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <MX_SPI1_Init+0x68>)
 8003602:	2200      	movs	r2, #0
 8003604:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <MX_SPI1_Init+0x68>)
 8003608:	2200      	movs	r2, #0
 800360a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <MX_SPI1_Init+0x68>)
 800360e:	220a      	movs	r2, #10
 8003610:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003612:	4805      	ldr	r0, [pc, #20]	; (8003628 <MX_SPI1_Init+0x68>)
 8003614:	f003 ff02 	bl	800741c <HAL_SPI_Init>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <MX_SPI1_Init+0x62>
	{
		Error_Handler();
 800361e:	f000 f95b 	bl	80038d8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */
}
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000984 	.word	0x20000984
 800362c:	40013000 	.word	0x40013000

08003630 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003636:	f107 0310 	add.w	r3, r7, #16
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8003640:	463b      	mov	r3, r7
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800364c:	4b27      	ldr	r3, [pc, #156]	; (80036ec <MX_TIM3_Init+0xbc>)
 800364e:	4a28      	ldr	r2, [pc, #160]	; (80036f0 <MX_TIM3_Init+0xc0>)
 8003650:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 8003652:	4b26      	ldr	r3, [pc, #152]	; (80036ec <MX_TIM3_Init+0xbc>)
 8003654:	2247      	movs	r2, #71	; 0x47
 8003656:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003658:	4b24      	ldr	r3, [pc, #144]	; (80036ec <MX_TIM3_Init+0xbc>)
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65000 - 1;
 800365e:	4b23      	ldr	r3, [pc, #140]	; (80036ec <MX_TIM3_Init+0xbc>)
 8003660:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8003664:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003666:	4b21      	ldr	r3, [pc, #132]	; (80036ec <MX_TIM3_Init+0xbc>)
 8003668:	2200      	movs	r2, #0
 800366a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800366c:	4b1f      	ldr	r3, [pc, #124]	; (80036ec <MX_TIM3_Init+0xbc>)
 800366e:	2200      	movs	r2, #0
 8003670:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003672:	481e      	ldr	r0, [pc, #120]	; (80036ec <MX_TIM3_Init+0xbc>)
 8003674:	f004 f938 	bl	80078e8 <HAL_TIM_IC_Init>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 800367e:	f000 f92b 	bl	80038d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800368a:	f107 0310 	add.w	r3, r7, #16
 800368e:	4619      	mov	r1, r3
 8003690:	4816      	ldr	r0, [pc, #88]	; (80036ec <MX_TIM3_Init+0xbc>)
 8003692:	f004 fe17 	bl	80082c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 800369c:	f000 f91c 	bl	80038d8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80036a0:	2300      	movs	r3, #0
 80036a2:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80036a4:	2301      	movs	r3, #1
 80036a6:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80036b0:	463b      	mov	r3, r7
 80036b2:	2200      	movs	r2, #0
 80036b4:	4619      	mov	r1, r3
 80036b6:	480d      	ldr	r0, [pc, #52]	; (80036ec <MX_TIM3_Init+0xbc>)
 80036b8:	f004 fb74 	bl	8007da4 <HAL_TIM_IC_ConfigChannel>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 80036c2:	f000 f909 	bl	80038d8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80036c6:	2302      	movs	r3, #2
 80036c8:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80036ca:	2302      	movs	r3, #2
 80036cc:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80036ce:	463b      	mov	r3, r7
 80036d0:	2204      	movs	r2, #4
 80036d2:	4619      	mov	r1, r3
 80036d4:	4805      	ldr	r0, [pc, #20]	; (80036ec <MX_TIM3_Init+0xbc>)
 80036d6:	f004 fb65 	bl	8007da4 <HAL_TIM_IC_ConfigChannel>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_TIM3_Init+0xb4>
	{
		Error_Handler();
 80036e0:	f000 f8fa 	bl	80038d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
}
 80036e4:	bf00      	nop
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	200008fc 	.word	0x200008fc
 80036f0:	40000400 	.word	0x40000400

080036f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036fa:	f107 0310 	add.w	r3, r7, #16
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8003704:	463b      	mov	r3, r7
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003710:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <MX_TIM4_Init+0xbc>)
 8003712:	4a28      	ldr	r2, [pc, #160]	; (80037b4 <MX_TIM4_Init+0xc0>)
 8003714:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72 - 1;
 8003716:	4b26      	ldr	r3, [pc, #152]	; (80037b0 <MX_TIM4_Init+0xbc>)
 8003718:	2247      	movs	r2, #71	; 0x47
 800371a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800371c:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <MX_TIM4_Init+0xbc>)
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65000 - 1;
 8003722:	4b23      	ldr	r3, [pc, #140]	; (80037b0 <MX_TIM4_Init+0xbc>)
 8003724:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8003728:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800372a:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <MX_TIM4_Init+0xbc>)
 800372c:	2200      	movs	r2, #0
 800372e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003730:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <MX_TIM4_Init+0xbc>)
 8003732:	2200      	movs	r2, #0
 8003734:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003736:	481e      	ldr	r0, [pc, #120]	; (80037b0 <MX_TIM4_Init+0xbc>)
 8003738:	f004 f8d6 	bl	80078e8 <HAL_TIM_IC_Init>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 8003742:	f000 f8c9 	bl	80038d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800374e:	f107 0310 	add.w	r3, r7, #16
 8003752:	4619      	mov	r1, r3
 8003754:	4816      	ldr	r0, [pc, #88]	; (80037b0 <MX_TIM4_Init+0xbc>)
 8003756:	f004 fdb5 	bl	80082c4 <HAL_TIMEx_MasterConfigSynchronization>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 8003760:	f000 f8ba 	bl	80038d8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003764:	2300      	movs	r3, #0
 8003766:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003768:	2301      	movs	r3, #1
 800376a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800376c:	2300      	movs	r3, #0
 800376e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003774:	463b      	mov	r3, r7
 8003776:	2200      	movs	r2, #0
 8003778:	4619      	mov	r1, r3
 800377a:	480d      	ldr	r0, [pc, #52]	; (80037b0 <MX_TIM4_Init+0xbc>)
 800377c:	f004 fb12 	bl	8007da4 <HAL_TIM_IC_ConfigChannel>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <MX_TIM4_Init+0x96>
	{
		Error_Handler();
 8003786:	f000 f8a7 	bl	80038d8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800378a:	2302      	movs	r3, #2
 800378c:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800378e:	2302      	movs	r3, #2
 8003790:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003792:	463b      	mov	r3, r7
 8003794:	2204      	movs	r2, #4
 8003796:	4619      	mov	r1, r3
 8003798:	4805      	ldr	r0, [pc, #20]	; (80037b0 <MX_TIM4_Init+0xbc>)
 800379a:	f004 fb03 	bl	8007da4 <HAL_TIM_IC_ConfigChannel>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_TIM4_Init+0xb4>
	{
		Error_Handler();
 80037a4:	f000 f898 	bl	80038d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
}
 80037a8:	bf00      	nop
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	200008ac 	.word	0x200008ac
 80037b4:	40000800 	.word	0x40000800

080037b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037be:	f107 0310 	add.w	r3, r7, #16
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80037cc:	4b3e      	ldr	r3, [pc, #248]	; (80038c8 <MX_GPIO_Init+0x110>)
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	4a3d      	ldr	r2, [pc, #244]	; (80038c8 <MX_GPIO_Init+0x110>)
 80037d2:	f043 0310 	orr.w	r3, r3, #16
 80037d6:	6193      	str	r3, [r2, #24]
 80037d8:	4b3b      	ldr	r3, [pc, #236]	; (80038c8 <MX_GPIO_Init+0x110>)
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80037e4:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <MX_GPIO_Init+0x110>)
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	4a37      	ldr	r2, [pc, #220]	; (80038c8 <MX_GPIO_Init+0x110>)
 80037ea:	f043 0320 	orr.w	r3, r3, #32
 80037ee:	6193      	str	r3, [r2, #24]
 80037f0:	4b35      	ldr	r3, [pc, #212]	; (80038c8 <MX_GPIO_Init+0x110>)
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80037fc:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <MX_GPIO_Init+0x110>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	4a31      	ldr	r2, [pc, #196]	; (80038c8 <MX_GPIO_Init+0x110>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	6193      	str	r3, [r2, #24]
 8003808:	4b2f      	ldr	r3, [pc, #188]	; (80038c8 <MX_GPIO_Init+0x110>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003814:	4b2c      	ldr	r3, [pc, #176]	; (80038c8 <MX_GPIO_Init+0x110>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	4a2b      	ldr	r2, [pc, #172]	; (80038c8 <MX_GPIO_Init+0x110>)
 800381a:	f043 0308 	orr.w	r3, r3, #8
 800381e:	6193      	str	r3, [r2, #24]
 8003820:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <MX_GPIO_Init+0x110>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800382c:	2200      	movs	r2, #0
 800382e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003832:	4826      	ldr	r0, [pc, #152]	; (80038cc <MX_GPIO_Init+0x114>)
 8003834:	f001 fcc9 	bl	80051ca <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin | AD5312_SYNC_Pin | GPIO_PIN_10, GPIO_PIN_RESET);
 8003838:	2200      	movs	r2, #0
 800383a:	f240 4112 	movw	r1, #1042	; 0x412
 800383e:	4824      	ldr	r0, [pc, #144]	; (80038d0 <MX_GPIO_Init+0x118>)
 8003840:	f001 fcc3 	bl	80051ca <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8003844:	2201      	movs	r2, #1
 8003846:	2104      	movs	r1, #4
 8003848:	4821      	ldr	r0, [pc, #132]	; (80038d0 <MX_GPIO_Init+0x118>)
 800384a:	f001 fcbe 	bl	80051ca <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800384e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003852:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003854:	2301      	movs	r3, #1
 8003856:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003858:	2300      	movs	r3, #0
 800385a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385c:	2302      	movs	r3, #2
 800385e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003860:	f107 0310 	add.w	r3, r7, #16
 8003864:	4619      	mov	r1, r3
 8003866:	4819      	ldr	r0, [pc, #100]	; (80038cc <MX_GPIO_Init+0x114>)
 8003868:	f001 fb14 	bl	8004e94 <HAL_GPIO_Init>

	/*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
	GPIO_InitStruct.Pin = AD5312_LDAC_Pin | Relay_Pin | AD5312_SYNC_Pin | GPIO_PIN_10;
 800386c:	f240 4316 	movw	r3, #1046	; 0x416
 8003870:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003872:	2301      	movs	r3, #1
 8003874:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387a:	2302      	movs	r3, #2
 800387c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387e:	f107 0310 	add.w	r3, r7, #16
 8003882:	4619      	mov	r1, r3
 8003884:	4812      	ldr	r0, [pc, #72]	; (80038d0 <MX_GPIO_Init+0x118>)
 8003886:	f001 fb05 	bl	8004e94 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800388a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800388e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003894:	2301      	movs	r3, #1
 8003896:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003898:	f107 0310 	add.w	r3, r7, #16
 800389c:	4619      	mov	r1, r3
 800389e:	480d      	ldr	r0, [pc, #52]	; (80038d4 <MX_GPIO_Init+0x11c>)
 80038a0:	f001 faf8 	bl	8004e94 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 80038a4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80038a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b2:	f107 0310 	add.w	r3, r7, #16
 80038b6:	4619      	mov	r1, r3
 80038b8:	4806      	ldr	r0, [pc, #24]	; (80038d4 <MX_GPIO_Init+0x11c>)
 80038ba:	f001 faeb 	bl	8004e94 <HAL_GPIO_Init>
}
 80038be:	bf00      	nop
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40011000 	.word	0x40011000
 80038d0:	40010800 	.word	0x40010800
 80038d4:	40010c00 	.word	0x40010c00

080038d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <HAL_MspInit+0x5c>)
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	4a14      	ldr	r2, [pc, #80]	; (8003940 <HAL_MspInit+0x5c>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6193      	str	r3, [r2, #24]
 80038f6:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_MspInit+0x5c>)
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <HAL_MspInit+0x5c>)
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	4a0e      	ldr	r2, [pc, #56]	; (8003940 <HAL_MspInit+0x5c>)
 8003908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390c:	61d3      	str	r3, [r2, #28]
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <HAL_MspInit+0x5c>)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <HAL_MspInit+0x60>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	4a04      	ldr	r2, [pc, #16]	; (8003944 <HAL_MspInit+0x60>)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr
 8003940:	40021000 	.word	0x40021000
 8003944:	40010000 	.word	0x40010000

08003948 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a18      	ldr	r2, [pc, #96]	; (80039c4 <HAL_ADC_MspInit+0x7c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d129      	bne.n	80039bc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003968:	4b17      	ldr	r3, [pc, #92]	; (80039c8 <HAL_ADC_MspInit+0x80>)
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <HAL_ADC_MspInit+0x80>)
 800396e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003972:	6193      	str	r3, [r2, #24]
 8003974:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <HAL_ADC_MspInit+0x80>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <HAL_ADC_MspInit+0x80>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	4a10      	ldr	r2, [pc, #64]	; (80039c8 <HAL_ADC_MspInit+0x80>)
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	6193      	str	r3, [r2, #24]
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <HAL_ADC_MspInit+0x80>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003998:	2308      	movs	r3, #8
 800399a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800399c:	2303      	movs	r3, #3
 800399e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a0:	f107 0310 	add.w	r3, r7, #16
 80039a4:	4619      	mov	r1, r3
 80039a6:	4809      	ldr	r0, [pc, #36]	; (80039cc <HAL_ADC_MspInit+0x84>)
 80039a8:	f001 fa74 	bl	8004e94 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80039ac:	2200      	movs	r2, #0
 80039ae:	2100      	movs	r1, #0
 80039b0:	2012      	movs	r0, #18
 80039b2:	f001 f81c 	bl	80049ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80039b6:	2012      	movs	r0, #18
 80039b8:	f001 f835 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80039bc:	bf00      	nop
 80039be:	3720      	adds	r7, #32
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40012400 	.word	0x40012400
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40010800 	.word	0x40010800

080039d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <HAL_CRC_MspInit+0x34>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d10b      	bne.n	80039fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_CRC_MspInit+0x38>)
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <HAL_CRC_MspInit+0x38>)
 80039e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ec:	6153      	str	r3, [r2, #20]
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_CRC_MspInit+0x38>)
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	40023000 	.word	0x40023000
 8003a08:	40021000 	.word	0x40021000

08003a0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a14:	f107 0310 	add.w	r3, r7, #16
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a15      	ldr	r2, [pc, #84]	; (8003a7c <HAL_SPI_MspInit+0x70>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d123      	bne.n	8003a74 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a2c:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <HAL_SPI_MspInit+0x74>)
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <HAL_SPI_MspInit+0x74>)
 8003a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a36:	6193      	str	r3, [r2, #24]
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <HAL_SPI_MspInit+0x74>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <HAL_SPI_MspInit+0x74>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <HAL_SPI_MspInit+0x74>)
 8003a4a:	f043 0304 	orr.w	r3, r3, #4
 8003a4e:	6193      	str	r3, [r2, #24]
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_SPI_MspInit+0x74>)
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8003a5c:	23a0      	movs	r3, #160	; 0xa0
 8003a5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a60:	2302      	movs	r3, #2
 8003a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a64:	2303      	movs	r3, #3
 8003a66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a68:	f107 0310 	add.w	r3, r7, #16
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4805      	ldr	r0, [pc, #20]	; (8003a84 <HAL_SPI_MspInit+0x78>)
 8003a70:	f001 fa10 	bl	8004e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003a74:	bf00      	nop
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40013000 	.word	0x40013000
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40010800 	.word	0x40010800

08003a88 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08c      	sub	sp, #48	; 0x30
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a90:	f107 031c 	add.w	r3, r7, #28
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a3b      	ldr	r2, [pc, #236]	; (8003b90 <HAL_TIM_IC_MspInit+0x108>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d13e      	bne.n	8003b26 <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003aa8:	4b3a      	ldr	r3, [pc, #232]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4a39      	ldr	r2, [pc, #228]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003aae:	f043 0302 	orr.w	r3, r3, #2
 8003ab2:	61d3      	str	r3, [r2, #28]
 8003ab4:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac0:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	4a33      	ldr	r2, [pc, #204]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003ac6:	f043 0308 	orr.w	r3, r3, #8
 8003aca:	6193      	str	r3, [r2, #24]
 8003acc:	4b31      	ldr	r3, [pc, #196]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ad8:	2310      	movs	r3, #16
 8003ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003adc:	2300      	movs	r3, #0
 8003ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae4:	f107 031c 	add.w	r3, r7, #28
 8003ae8:	4619      	mov	r1, r3
 8003aea:	482b      	ldr	r0, [pc, #172]	; (8003b98 <HAL_TIM_IC_MspInit+0x110>)
 8003aec:	f001 f9d2 	bl	8004e94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003af0:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <HAL_TIM_IC_MspInit+0x114>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b0e:	4a23      	ldr	r2, [pc, #140]	; (8003b9c <HAL_TIM_IC_MspInit+0x114>)
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b12:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b14:	2200      	movs	r2, #0
 8003b16:	2100      	movs	r1, #0
 8003b18:	201d      	movs	r0, #29
 8003b1a:	f000 ff68 	bl	80049ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b1e:	201d      	movs	r0, #29
 8003b20:	f000 ff81 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003b24:	e030      	b.n	8003b88 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1d      	ldr	r2, [pc, #116]	; (8003ba0 <HAL_TIM_IC_MspInit+0x118>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d12b      	bne.n	8003b88 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b30:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003b36:	f043 0304 	orr.w	r3, r3, #4
 8003b3a:	61d3      	str	r3, [r2, #28]
 8003b3c:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b48:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003b4e:	f043 0308 	orr.w	r3, r3, #8
 8003b52:	6193      	str	r3, [r2, #24]
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b60:	2340      	movs	r3, #64	; 0x40
 8003b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b64:	2300      	movs	r3, #0
 8003b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b6c:	f107 031c 	add.w	r3, r7, #28
 8003b70:	4619      	mov	r1, r3
 8003b72:	4809      	ldr	r0, [pc, #36]	; (8003b98 <HAL_TIM_IC_MspInit+0x110>)
 8003b74:	f001 f98e 	bl	8004e94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	201e      	movs	r0, #30
 8003b7e:	f000 ff36 	bl	80049ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b82:	201e      	movs	r0, #30
 8003b84:	f000 ff4f 	bl	8004a26 <HAL_NVIC_EnableIRQ>
}
 8003b88:	bf00      	nop
 8003b8a:	3730      	adds	r7, #48	; 0x30
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40010c00 	.word	0x40010c00
 8003b9c:	40010000 	.word	0x40010000
 8003ba0:	40000800 	.word	0x40000800

08003ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8003bb4:	4806      	ldr	r0, [pc, #24]	; (8003bd0 <HardFault_Handler+0x20>)
 8003bb6:	f008 fd13 	bl	800c5e0 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8003bba:	4805      	ldr	r0, [pc, #20]	; (8003bd0 <HardFault_Handler+0x20>)
 8003bbc:	f008 fd10 	bl	800c5e0 <iprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bc6:	4803      	ldr	r0, [pc, #12]	; (8003bd4 <HardFault_Handler+0x24>)
 8003bc8:	f001 faff 	bl	80051ca <HAL_GPIO_WritePin>
	  printf("HardFault_IRQn");
 8003bcc:	e7f5      	b.n	8003bba <HardFault_Handler+0xa>
 8003bce:	bf00      	nop
 8003bd0:	0800da84 	.word	0x0800da84
 8003bd4:	40011000 	.word	0x40011000

08003bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bdc:	e7fe      	b.n	8003bdc <MemManage_Handler+0x4>

08003bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003be2:	e7fe      	b.n	8003be2 <BusFault_Handler+0x4>

08003be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003be8:	e7fe      	b.n	8003be8 <UsageFault_Handler+0x4>

08003bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bea:	b480      	push	{r7}
 8003bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c02:	b480      	push	{r7}
 8003c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c12:	f000 f945 	bl	8003ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003c20:	4802      	ldr	r0, [pc, #8]	; (8003c2c <ADC1_2_IRQHandler+0x10>)
 8003c22:	f000 fb17 	bl	8004254 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000954 	.word	0x20000954

08003c30 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003c34:	4802      	ldr	r0, [pc, #8]	; (8003c40 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003c36:	f001 fc11 	bl	800545c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200012c4 	.word	0x200012c4

08003c44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c48:	4802      	ldr	r0, [pc, #8]	; (8003c54 <TIM3_IRQHandler+0x10>)
 8003c4a:	f003 ffa3 	bl	8007b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	200008fc 	.word	0x200008fc

08003c58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c5c:	4802      	ldr	r0, [pc, #8]	; (8003c68 <TIM4_IRQHandler+0x10>)
 8003c5e:	f003 ff99 	bl	8007b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	200008ac 	.word	0x200008ac

08003c6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e00a      	b.n	8003c94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c7e:	f3af 8000 	nop.w
 8003c82:	4601      	mov	r1, r0
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	60ba      	str	r2, [r7, #8]
 8003c8a:	b2ca      	uxtb	r2, r1
 8003c8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	3301      	adds	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	dbf0      	blt.n	8003c7e <_read+0x12>
	}

return len;
 8003c9c:	687b      	ldr	r3, [r7, #4]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
	return -1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ccc:	605a      	str	r2, [r3, #4]
	return 0;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <_isatty>:

int _isatty(int file)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
	return 1;
 8003ce2:	2301      	movs	r3, #1
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
	return 0;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr
	...

08003d08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <_sbrk+0x50>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <_sbrk+0x16>
		heap_end = &end;
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <_sbrk+0x50>)
 8003d1a:	4a10      	ldr	r2, [pc, #64]	; (8003d5c <_sbrk+0x54>)
 8003d1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <_sbrk+0x50>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d24:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <_sbrk+0x50>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	466a      	mov	r2, sp
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d907      	bls.n	8003d42 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d32:	f008 fbfb 	bl	800c52c <__errno>
 8003d36:	4603      	mov	r3, r0
 8003d38:	220c      	movs	r2, #12
 8003d3a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d40:	e006      	b.n	8003d50 <_sbrk+0x48>
	}

	heap_end += incr;
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <_sbrk+0x50>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	4a03      	ldr	r2, [pc, #12]	; (8003d58 <_sbrk+0x50>)
 8003d4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	2000027c 	.word	0x2000027c
 8003d5c:	200015c0 	.word	0x200015c0

08003d60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <SystemInit+0x5c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a14      	ldr	r2, [pc, #80]	; (8003dbc <SystemInit+0x5c>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003d70:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <SystemInit+0x5c>)
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	4911      	ldr	r1, [pc, #68]	; (8003dbc <SystemInit+0x5c>)
 8003d76:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <SystemInit+0x60>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <SystemInit+0x5c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <SystemInit+0x5c>)
 8003d82:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <SystemInit+0x5c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a0a      	ldr	r2, [pc, #40]	; (8003dbc <SystemInit+0x5c>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003d98:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <SystemInit+0x5c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a07      	ldr	r2, [pc, #28]	; (8003dbc <SystemInit+0x5c>)
 8003d9e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003da2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <SystemInit+0x5c>)
 8003da6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003daa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <SystemInit+0x64>)
 8003dae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003db2:	609a      	str	r2, [r3, #8]
#endif 
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	f8ff0000 	.word	0xf8ff0000
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003dc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003dca:	e003      	b.n	8003dd4 <LoopCopyDataInit>

08003dcc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003dce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003dd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003dd2:	3104      	adds	r1, #4

08003dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003dd4:	480a      	ldr	r0, [pc, #40]	; (8003e00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003dd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003dda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003ddc:	d3f6      	bcc.n	8003dcc <CopyDataInit>
  ldr r2, =_sbss
 8003dde:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003de0:	e002      	b.n	8003de8 <LoopFillZerobss>

08003de2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003de2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003de4:	f842 3b04 	str.w	r3, [r2], #4

08003de8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003de8:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003dea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003dec:	d3f9      	bcc.n	8003de2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003dee:	f7ff ffb7 	bl	8003d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003df2:	f008 fba1 	bl	800c538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003df6:	f7ff f86d 	bl	8002ed4 <main>
  bx lr
 8003dfa:	4770      	bx	lr
  ldr r3, =_sidata
 8003dfc:	0800dbdc 	.word	0x0800dbdc
  ldr r0, =_sdata
 8003e00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003e04:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8003e08:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8003e0c:	200015c0 	.word	0x200015c0

08003e10 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e10:	e7fe      	b.n	8003e10 <CAN1_RX1_IRQHandler>
	...

08003e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e18:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <HAL_Init+0x28>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <HAL_Init+0x28>)
 8003e1e:	f043 0310 	orr.w	r3, r3, #16
 8003e22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e24:	2003      	movs	r0, #3
 8003e26:	f000 fdd7 	bl	80049d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	f000 f808 	bl	8003e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e30:	f7ff fd58 	bl	80038e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40022000 	.word	0x40022000

08003e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <HAL_InitTick+0x54>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <HAL_InitTick+0x58>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	4619      	mov	r1, r3
 8003e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fdef 	bl	8004a42 <HAL_SYSTICK_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e00e      	b.n	8003e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b0f      	cmp	r3, #15
 8003e72:	d80a      	bhi.n	8003e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e74:	2200      	movs	r2, #0
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7c:	f000 fdb7 	bl	80049ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e80:	4a06      	ldr	r2, [pc, #24]	; (8003e9c <HAL_InitTick+0x5c>)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e000      	b.n	8003e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000014 	.word	0x20000014
 8003e98:	2000001c 	.word	0x2000001c
 8003e9c:	20000018 	.word	0x20000018

08003ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_IncTick+0x1c>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_IncTick+0x20>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4413      	add	r3, r2
 8003eb0:	4a03      	ldr	r2, [pc, #12]	; (8003ec0 <HAL_IncTick+0x20>)
 8003eb2:	6013      	str	r3, [r2, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	2000001c 	.word	0x2000001c
 8003ec0:	200009dc 	.word	0x200009dc

08003ec4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ec8:	4b02      	ldr	r3, [pc, #8]	; (8003ed4 <HAL_GetTick+0x10>)
 8003eca:	681b      	ldr	r3, [r3, #0]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr
 8003ed4:	200009dc 	.word	0x200009dc

08003ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ee0:	f7ff fff0 	bl	8003ec4 <HAL_GetTick>
 8003ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d005      	beq.n	8003efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <HAL_Delay+0x44>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003efe:	bf00      	nop
 8003f00:	f7ff ffe0 	bl	8003ec4 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d8f7      	bhi.n	8003f00 <HAL_Delay+0x28>
  {
  }
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	2000001c 	.word	0x2000001c

08003f20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0be      	b.n	80040c0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff fcf2 	bl	8003948 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fb8b 	bl	8004680 <ADC_ConversionStop_Disable>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f040 8099 	bne.w	80040ae <HAL_ADC_Init+0x18e>
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 8095 	bne.w	80040ae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f8c:	f023 0302 	bic.w	r3, r3, #2
 8003f90:	f043 0202 	orr.w	r2, r3, #2
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003fa0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	7b1b      	ldrb	r3, [r3, #12]
 8003fa6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003fa8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb8:	d003      	beq.n	8003fc2 <HAL_ADC_Init+0xa2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d102      	bne.n	8003fc8 <HAL_ADC_Init+0xa8>
 8003fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fc6:	e000      	b.n	8003fca <HAL_ADC_Init+0xaa>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	7d1b      	ldrb	r3, [r3, #20]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d119      	bne.n	800400c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	7b1b      	ldrb	r3, [r3, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d109      	bne.n	8003ff4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	035a      	lsls	r2, r3, #13
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	e00b      	b.n	800400c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	f043 0220 	orr.w	r2, r3, #32
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004004:	f043 0201 	orr.w	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	430a      	orrs	r2, r1
 800401e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <HAL_ADC_Init+0x1a8>)
 8004028:	4013      	ands	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	68b9      	ldr	r1, [r7, #8]
 8004030:	430b      	orrs	r3, r1
 8004032:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403c:	d003      	beq.n	8004046 <HAL_ADC_Init+0x126>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d104      	bne.n	8004050 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	3b01      	subs	r3, #1
 800404c:	051b      	lsls	r3, r3, #20
 800404e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	430a      	orrs	r2, r1
 8004062:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	4b18      	ldr	r3, [pc, #96]	; (80040cc <HAL_ADC_Init+0x1ac>)
 800406c:	4013      	ands	r3, r2
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	429a      	cmp	r2, r3
 8004072:	d10b      	bne.n	800408c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	f023 0303 	bic.w	r3, r3, #3
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800408a:	e018      	b.n	80040be <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	f023 0312 	bic.w	r3, r3, #18
 8004094:	f043 0210 	orr.w	r2, r3, #16
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	f043 0201 	orr.w	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80040ac:	e007      	b.n	80040be <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	f043 0210 	orr.w	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80040be:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	ffe1f7fd 	.word	0xffe1f7fd
 80040cc:	ff1f0efe 	.word	0xff1f0efe

080040d0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_ADC_Start_IT+0x1a>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e0a0      	b.n	800422c <HAL_ADC_Start_IT+0x15c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fa72 	bl	80045dc <ADC_Enable>
 80040f8:	4603      	mov	r3, r0
 80040fa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f040 808f 	bne.w	8004222 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a45      	ldr	r2, [pc, #276]	; (8004234 <HAL_ADC_Start_IT+0x164>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d105      	bne.n	800412e <HAL_ADC_Start_IT+0x5e>
 8004122:	4b45      	ldr	r3, [pc, #276]	; (8004238 <HAL_ADC_Start_IT+0x168>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d115      	bne.n	800415a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004144:	2b00      	cmp	r3, #0
 8004146:	d026      	beq.n	8004196 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004150:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004158:	e01d      	b.n	8004196 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a33      	ldr	r2, [pc, #204]	; (8004238 <HAL_ADC_Start_IT+0x168>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_ADC_Start_IT+0xaa>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2f      	ldr	r2, [pc, #188]	; (8004234 <HAL_ADC_Start_IT+0x164>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10d      	bne.n	8004196 <HAL_ADC_Start_IT+0xc6>
 800417a:	4b2f      	ldr	r3, [pc, #188]	; (8004238 <HAL_ADC_Start_IT+0x168>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004182:	2b00      	cmp	r3, #0
 8004184:	d007      	beq.n	8004196 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800418e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d006      	beq.n	80041b0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	f023 0206 	bic.w	r2, r3, #6
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80041ae:	e002      	b.n	80041b6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f06f 0202 	mvn.w	r2, #2
 80041c6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0220 	orr.w	r2, r2, #32
 80041d6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80041e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80041e6:	d113      	bne.n	8004210 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80041ec:	4a11      	ldr	r2, [pc, #68]	; (8004234 <HAL_ADC_Start_IT+0x164>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d105      	bne.n	80041fe <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <HAL_ADC_Start_IT+0x168>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d108      	bne.n	8004210 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800420c:	609a      	str	r2, [r3, #8]
 800420e:	e00c      	b.n	800422a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800421e:	609a      	str	r2, [r3, #8]
 8004220:	e003      	b.n	800422a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800422a:	7bfb      	ldrb	r3, [r7, #15]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40012800 	.word	0x40012800
 8004238:	40012400 	.word	0x40012400

0800423c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800424a:	4618      	mov	r0, r3
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b20      	cmp	r3, #32
 8004268:	d140      	bne.n	80042ec <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	d139      	bne.n	80042ec <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b00      	cmp	r3, #0
 8004282:	d105      	bne.n	8004290 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800429a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800429e:	d11d      	bne.n	80042dc <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d119      	bne.n	80042dc <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0220 	bic.w	r2, r2, #32
 80042b6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	f043 0201 	orr.w	r2, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fe f9c7 	bl	8002670 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f06f 0212 	mvn.w	r2, #18
 80042ea:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f6:	2b80      	cmp	r3, #128	; 0x80
 80042f8:	d14f      	bne.n	800439a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b04      	cmp	r3, #4
 8004306:	d148      	bne.n	800439a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800432a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800432e:	d012      	beq.n	8004356 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800433a:	2b00      	cmp	r3, #0
 800433c:	d125      	bne.n	800438a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004348:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800434c:	d11d      	bne.n	800438a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004352:	2b00      	cmp	r3, #0
 8004354:	d119      	bne.n	800438a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004364:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d105      	bne.n	800438a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	f043 0201 	orr.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fa4e 	bl	800482c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 020c 	mvn.w	r2, #12
 8004398:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a4:	2b40      	cmp	r3, #64	; 0x40
 80043a6:	d114      	bne.n	80043d2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d10d      	bne.n	80043d2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f809 	bl	80043da <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0201 	mvn.w	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_ADC_ConfigChannel+0x20>
 8004408:	2302      	movs	r3, #2
 800440a:	e0dc      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x1da>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b06      	cmp	r3, #6
 800441a:	d81c      	bhi.n	8004456 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	3b05      	subs	r3, #5
 800442e:	221f      	movs	r2, #31
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	4019      	ands	r1, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	3b05      	subs	r3, #5
 8004448:	fa00 f203 	lsl.w	r2, r0, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	635a      	str	r2, [r3, #52]	; 0x34
 8004454:	e03c      	b.n	80044d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b0c      	cmp	r3, #12
 800445c:	d81c      	bhi.n	8004498 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	3b23      	subs	r3, #35	; 0x23
 8004470:	221f      	movs	r2, #31
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	4019      	ands	r1, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	3b23      	subs	r3, #35	; 0x23
 800448a:	fa00 f203 	lsl.w	r2, r0, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	631a      	str	r2, [r3, #48]	; 0x30
 8004496:	e01b      	b.n	80044d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	3b41      	subs	r3, #65	; 0x41
 80044aa:	221f      	movs	r2, #31
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	43db      	mvns	r3, r3
 80044b2:	4019      	ands	r1, r3
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	3b41      	subs	r3, #65	; 0x41
 80044c4:	fa00 f203 	lsl.w	r2, r0, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b09      	cmp	r3, #9
 80044d6:	d91c      	bls.n	8004512 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68d9      	ldr	r1, [r3, #12]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4613      	mov	r3, r2
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	3b1e      	subs	r3, #30
 80044ea:	2207      	movs	r2, #7
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	4019      	ands	r1, r3
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	6898      	ldr	r0, [r3, #8]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	4413      	add	r3, r2
 8004502:	3b1e      	subs	r3, #30
 8004504:	fa00 f203 	lsl.w	r2, r0, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	60da      	str	r2, [r3, #12]
 8004510:	e019      	b.n	8004546 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6919      	ldr	r1, [r3, #16]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4613      	mov	r3, r2
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	4413      	add	r3, r2
 8004522:	2207      	movs	r2, #7
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	4019      	ands	r1, r3
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	6898      	ldr	r0, [r3, #8]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	4413      	add	r3, r2
 800453a:	fa00 f203 	lsl.w	r2, r0, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b10      	cmp	r3, #16
 800454c:	d003      	beq.n	8004556 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004552:	2b11      	cmp	r3, #17
 8004554:	d132      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d125      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d126      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800457c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b10      	cmp	r3, #16
 8004584:	d11a      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004586:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a13      	ldr	r2, [pc, #76]	; (80045d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800458c:	fba2 2303 	umull	r2, r3, r2, r3
 8004590:	0c9a      	lsrs	r2, r3, #18
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800459c:	e002      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f9      	bne.n	800459e <HAL_ADC_ConfigChannel+0x1b2>
 80045aa:	e007      	b.n	80045bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	f043 0220 	orr.w	r2, r3, #32
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr
 80045d0:	40012400 	.word	0x40012400
 80045d4:	20000014 	.word	0x20000014
 80045d8:	431bde83 	.word	0x431bde83

080045dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d039      	beq.n	800466e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800460a:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <ADC_Enable+0x9c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1b      	ldr	r2, [pc, #108]	; (800467c <ADC_Enable+0xa0>)
 8004610:	fba2 2303 	umull	r2, r3, r2, r3
 8004614:	0c9b      	lsrs	r3, r3, #18
 8004616:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004618:	e002      	b.n	8004620 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	3b01      	subs	r3, #1
 800461e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f9      	bne.n	800461a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004626:	f7ff fc4d 	bl	8003ec4 <HAL_GetTick>
 800462a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800462c:	e018      	b.n	8004660 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800462e:	f7ff fc49 	bl	8003ec4 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d911      	bls.n	8004660 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	f043 0210 	orr.w	r2, r3, #16
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	f043 0201 	orr.w	r2, r3, #1
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e007      	b.n	8004670 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d1df      	bne.n	800462e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000014 	.word	0x20000014
 800467c:	431bde83 	.word	0x431bde83

08004680 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d127      	bne.n	80046ea <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046aa:	f7ff fc0b 	bl	8003ec4 <HAL_GetTick>
 80046ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80046b0:	e014      	b.n	80046dc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046b2:	f7ff fc07 	bl	8003ec4 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d90d      	bls.n	80046dc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	f043 0210 	orr.w	r2, r3, #16
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	f043 0201 	orr.w	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e007      	b.n	80046ec <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d0e3      	beq.n	80046b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80046f4:	b590      	push	{r4, r7, lr}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_ADCEx_Calibration_Start+0x1e>
 800470e:	2302      	movs	r3, #2
 8004710:	e086      	b.n	8004820 <HAL_ADCEx_Calibration_Start+0x12c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7ff ffb0 	bl	8004680 <ADC_ConversionStop_Disable>
 8004720:	4603      	mov	r3, r0
 8004722:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d175      	bne.n	8004816 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004732:	f023 0302 	bic.w	r3, r3, #2
 8004736:	f043 0202 	orr.w	r2, r3, #2
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800473e:	4b3a      	ldr	r3, [pc, #232]	; (8004828 <HAL_ADCEx_Calibration_Start+0x134>)
 8004740:	681c      	ldr	r4, [r3, #0]
 8004742:	2002      	movs	r0, #2
 8004744:	f002 fda6 	bl	8007294 <HAL_RCCEx_GetPeriphCLKFreq>
 8004748:	4603      	mov	r3, r0
 800474a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800474e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004750:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004752:	e002      	b.n	800475a <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3b01      	subs	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f9      	bne.n	8004754 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff ff3b 	bl	80045dc <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0208 	orr.w	r2, r2, #8
 8004774:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004776:	f7ff fba5 	bl	8003ec4 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800477c:	e014      	b.n	80047a8 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800477e:	f7ff fba1 	bl	8003ec4 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b0a      	cmp	r3, #10
 800478a:	d90d      	bls.n	80047a8 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	f023 0312 	bic.w	r3, r3, #18
 8004794:	f043 0210 	orr.w	r2, r3, #16
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e03b      	b.n	8004820 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e3      	bne.n	800477e <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0204 	orr.w	r2, r2, #4
 80047c4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80047c6:	f7ff fb7d 	bl	8003ec4 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80047cc:	e014      	b.n	80047f8 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80047ce:	f7ff fb79 	bl	8003ec4 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b0a      	cmp	r3, #10
 80047da:	d90d      	bls.n	80047f8 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	f023 0312 	bic.w	r3, r3, #18
 80047e4:	f043 0210 	orr.w	r2, r3, #16
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e013      	b.n	8004820 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e3      	bne.n	80047ce <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	f023 0303 	bic.w	r3, r3, #3
 800480e:	f043 0201 	orr.w	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800481e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004820:	4618      	mov	r0, r3
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	bd90      	pop	{r4, r7, pc}
 8004828:	20000014 	.word	0x20000014

0800482c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	bc80      	pop	{r7}
 800483c:	4770      	bx	lr
	...

08004840 <__NVIC_SetPriorityGrouping>:
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <__NVIC_SetPriorityGrouping+0x44>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800485c:	4013      	ands	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800486c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004872:	4a04      	ldr	r2, [pc, #16]	; (8004884 <__NVIC_SetPriorityGrouping+0x44>)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	60d3      	str	r3, [r2, #12]
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <__NVIC_GetPriorityGrouping>:
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800488c:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <__NVIC_GetPriorityGrouping+0x18>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	f003 0307 	and.w	r3, r3, #7
}
 8004896:	4618      	mov	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <__NVIC_EnableIRQ>:
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	db0b      	blt.n	80048ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	f003 021f 	and.w	r2, r3, #31
 80048bc:	4906      	ldr	r1, [pc, #24]	; (80048d8 <__NVIC_EnableIRQ+0x34>)
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2001      	movs	r0, #1
 80048c6:	fa00 f202 	lsl.w	r2, r0, r2
 80048ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr
 80048d8:	e000e100 	.word	0xe000e100

080048dc <__NVIC_SetPriority>:
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	6039      	str	r1, [r7, #0]
 80048e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	db0a      	blt.n	8004906 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	490c      	ldr	r1, [pc, #48]	; (8004928 <__NVIC_SetPriority+0x4c>)
 80048f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fa:	0112      	lsls	r2, r2, #4
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	440b      	add	r3, r1
 8004900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004904:	e00a      	b.n	800491c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	b2da      	uxtb	r2, r3
 800490a:	4908      	ldr	r1, [pc, #32]	; (800492c <__NVIC_SetPriority+0x50>)
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	3b04      	subs	r3, #4
 8004914:	0112      	lsls	r2, r2, #4
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	440b      	add	r3, r1
 800491a:	761a      	strb	r2, [r3, #24]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	e000e100 	.word	0xe000e100
 800492c:	e000ed00 	.word	0xe000ed00

08004930 <NVIC_EncodePriority>:
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	; 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f1c3 0307 	rsb	r3, r3, #7
 800494a:	2b04      	cmp	r3, #4
 800494c:	bf28      	it	cs
 800494e:	2304      	movcs	r3, #4
 8004950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	3304      	adds	r3, #4
 8004956:	2b06      	cmp	r3, #6
 8004958:	d902      	bls.n	8004960 <NVIC_EncodePriority+0x30>
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3b03      	subs	r3, #3
 800495e:	e000      	b.n	8004962 <NVIC_EncodePriority+0x32>
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004964:	f04f 32ff 	mov.w	r2, #4294967295
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43da      	mvns	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	401a      	ands	r2, r3
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004978:	f04f 31ff 	mov.w	r1, #4294967295
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fa01 f303 	lsl.w	r3, r1, r3
 8004982:	43d9      	mvns	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004988:	4313      	orrs	r3, r2
}
 800498a:	4618      	mov	r0, r3
 800498c:	3724      	adds	r7, #36	; 0x24
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <SysTick_Config>:
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3b01      	subs	r3, #1
 80049a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049a4:	d301      	bcc.n	80049aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80049a6:	2301      	movs	r3, #1
 80049a8:	e00f      	b.n	80049ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049aa:	4a0a      	ldr	r2, [pc, #40]	; (80049d4 <SysTick_Config+0x40>)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049b2:	210f      	movs	r1, #15
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295
 80049b8:	f7ff ff90 	bl	80048dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049bc:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <SysTick_Config+0x40>)
 80049be:	2200      	movs	r2, #0
 80049c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049c2:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <SysTick_Config+0x40>)
 80049c4:	2207      	movs	r2, #7
 80049c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	e000e010 	.word	0xe000e010

080049d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff ff2d 	bl	8004840 <__NVIC_SetPriorityGrouping>
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b086      	sub	sp, #24
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	4603      	mov	r3, r0
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a00:	f7ff ff42 	bl	8004888 <__NVIC_GetPriorityGrouping>
 8004a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	6978      	ldr	r0, [r7, #20]
 8004a0c:	f7ff ff90 	bl	8004930 <NVIC_EncodePriority>
 8004a10:	4602      	mov	r2, r0
 8004a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a16:	4611      	mov	r1, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff ff5f 	bl	80048dc <__NVIC_SetPriority>
}
 8004a1e:	bf00      	nop
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff ff35 	bl	80048a4 <__NVIC_EnableIRQ>
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff ffa2 	bl	8004994 <SysTick_Config>
 8004a50:	4603      	mov	r3, r0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e00e      	b.n	8004a8a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	795b      	ldrb	r3, [r3, #5]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7fe ffa7 	bl	80039d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004aae:	4b2f      	ldr	r3, [pc, #188]	; (8004b6c <HAL_FLASH_Program+0xd8>)
 8004ab0:	7e1b      	ldrb	r3, [r3, #24]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_FLASH_Program+0x26>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e054      	b.n	8004b64 <HAL_FLASH_Program+0xd0>
 8004aba:	4b2c      	ldr	r3, [pc, #176]	; (8004b6c <HAL_FLASH_Program+0xd8>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ac0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ac4:	f000 f8a8 	bl	8004c18 <FLASH_WaitForLastOperation>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004acc:	7dfb      	ldrb	r3, [r7, #23]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d144      	bne.n	8004b5c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d102      	bne.n	8004ade <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	757b      	strb	r3, [r7, #21]
 8004adc:	e007      	b.n	8004aee <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d102      	bne.n	8004aea <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	757b      	strb	r3, [r7, #21]
 8004ae8:	e001      	b.n	8004aee <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004aea:	2304      	movs	r3, #4
 8004aec:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004aee:	2300      	movs	r3, #0
 8004af0:	75bb      	strb	r3, [r7, #22]
 8004af2:	e02d      	b.n	8004b50 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004af4:	7dbb      	ldrb	r3, [r7, #22]
 8004af6:	005a      	lsls	r2, r3, #1
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	eb02 0c03 	add.w	ip, r2, r3
 8004afe:	7dbb      	ldrb	r3, [r7, #22]
 8004b00:	0119      	lsls	r1, r3, #4
 8004b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b06:	f1c1 0620 	rsb	r6, r1, #32
 8004b0a:	f1a1 0020 	sub.w	r0, r1, #32
 8004b0e:	fa22 f401 	lsr.w	r4, r2, r1
 8004b12:	fa03 f606 	lsl.w	r6, r3, r6
 8004b16:	4334      	orrs	r4, r6
 8004b18:	fa23 f000 	lsr.w	r0, r3, r0
 8004b1c:	4304      	orrs	r4, r0
 8004b1e:	fa23 f501 	lsr.w	r5, r3, r1
 8004b22:	b2a3      	uxth	r3, r4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4660      	mov	r0, ip
 8004b28:	f000 f85a 	bl	8004be0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b30:	f000 f872 	bl	8004c18 <FLASH_WaitForLastOperation>
 8004b34:	4603      	mov	r3, r0
 8004b36:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004b38:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <HAL_FLASH_Program+0xdc>)
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	4a0c      	ldr	r2, [pc, #48]	; (8004b70 <HAL_FLASH_Program+0xdc>)
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004b44:	7dfb      	ldrb	r3, [r7, #23]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d107      	bne.n	8004b5a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004b4a:	7dbb      	ldrb	r3, [r7, #22]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	75bb      	strb	r3, [r7, #22]
 8004b50:	7dba      	ldrb	r2, [r7, #22]
 8004b52:	7d7b      	ldrb	r3, [r7, #21]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d3cd      	bcc.n	8004af4 <HAL_FLASH_Program+0x60>
 8004b58:	e000      	b.n	8004b5c <HAL_FLASH_Program+0xc8>
      {
        break;
 8004b5a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b5c:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <HAL_FLASH_Program+0xd8>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	761a      	strb	r2, [r3, #24]

  return status;
 8004b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	371c      	adds	r7, #28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b6c:	200009e0 	.word	0x200009e0
 8004b70:	40022000 	.word	0x40022000

08004b74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <HAL_FLASH_Unlock+0x40>)
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00d      	beq.n	8004ba6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b8a:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <HAL_FLASH_Unlock+0x40>)
 8004b8c:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <HAL_FLASH_Unlock+0x44>)
 8004b8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b90:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <HAL_FLASH_Unlock+0x40>)
 8004b92:	4a0a      	ldr	r2, [pc, #40]	; (8004bbc <HAL_FLASH_Unlock+0x48>)
 8004b94:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b96:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <HAL_FLASH_Unlock+0x40>)
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40022000 	.word	0x40022000
 8004bb8:	45670123 	.word	0x45670123
 8004bbc:	cdef89ab 	.word	0xcdef89ab

08004bc0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <HAL_FLASH_Lock+0x1c>)
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	4a04      	ldr	r2, [pc, #16]	; (8004bdc <HAL_FLASH_Lock+0x1c>)
 8004bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40022000 	.word	0x40022000

08004be0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <FLASH_Program_HalfWord+0x30>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <FLASH_Program_HalfWord+0x34>)
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	4a07      	ldr	r2, [pc, #28]	; (8004c14 <FLASH_Program_HalfWord+0x34>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	887a      	ldrh	r2, [r7, #2]
 8004c02:	801a      	strh	r2, [r3, #0]
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	200009e0 	.word	0x200009e0
 8004c14:	40022000 	.word	0x40022000

08004c18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004c20:	f7ff f950 	bl	8003ec4 <HAL_GetTick>
 8004c24:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004c26:	e010      	b.n	8004c4a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2e:	d00c      	beq.n	8004c4a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d007      	beq.n	8004c46 <FLASH_WaitForLastOperation+0x2e>
 8004c36:	f7ff f945 	bl	8003ec4 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d201      	bcs.n	8004c4a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e025      	b.n	8004c96 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004c4a:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <FLASH_WaitForLastOperation+0x88>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e8      	bne.n	8004c28 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004c56:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <FLASH_WaitForLastOperation+0x88>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004c62:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <FLASH_WaitForLastOperation+0x88>)
 8004c64:	2220      	movs	r2, #32
 8004c66:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004c68:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <FLASH_WaitForLastOperation+0x88>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <FLASH_WaitForLastOperation+0x88>)
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d105      	bne.n	8004c8c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <FLASH_WaitForLastOperation+0x88>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004c8c:	f000 f80a 	bl	8004ca4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40022000 	.word	0x40022000

08004ca4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004cae:	4b23      	ldr	r3, [pc, #140]	; (8004d3c <FLASH_SetErrorCode+0x98>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d009      	beq.n	8004cce <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004cba:	4b21      	ldr	r3, [pc, #132]	; (8004d40 <FLASH_SetErrorCode+0x9c>)
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f043 0302 	orr.w	r3, r3, #2
 8004cc2:	4a1f      	ldr	r2, [pc, #124]	; (8004d40 <FLASH_SetErrorCode+0x9c>)
 8004cc4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f043 0310 	orr.w	r3, r3, #16
 8004ccc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004cce:	4b1b      	ldr	r3, [pc, #108]	; (8004d3c <FLASH_SetErrorCode+0x98>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004cda:	4b19      	ldr	r3, [pc, #100]	; (8004d40 <FLASH_SetErrorCode+0x9c>)
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	4a17      	ldr	r2, [pc, #92]	; (8004d40 <FLASH_SetErrorCode+0x9c>)
 8004ce4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f043 0304 	orr.w	r3, r3, #4
 8004cec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <FLASH_SetErrorCode+0x98>)
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004cfa:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <FLASH_SetErrorCode+0x9c>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f043 0304 	orr.w	r3, r3, #4
 8004d02:	4a0f      	ldr	r2, [pc, #60]	; (8004d40 <FLASH_SetErrorCode+0x9c>)
 8004d04:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004d06:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <FLASH_SetErrorCode+0x98>)
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <FLASH_SetErrorCode+0x98>)
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f240 1201 	movw	r2, #257	; 0x101
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d106      	bne.n	8004d2a <FLASH_SetErrorCode+0x86>
 8004d1c:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <FLASH_SetErrorCode+0x98>)
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	4a06      	ldr	r2, [pc, #24]	; (8004d3c <FLASH_SetErrorCode+0x98>)
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	61d3      	str	r3, [r2, #28]
}  
 8004d28:	e002      	b.n	8004d30 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004d2a:	4a04      	ldr	r2, [pc, #16]	; (8004d3c <FLASH_SetErrorCode+0x98>)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60d3      	str	r3, [r2, #12]
}  
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40022000 	.word	0x40022000
 8004d40:	200009e0 	.word	0x200009e0

08004d44 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d56:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <HAL_FLASHEx_Erase+0xd0>)
 8004d58:	7e1b      	ldrb	r3, [r3, #24]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_FLASHEx_Erase+0x1e>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e053      	b.n	8004e0a <HAL_FLASHEx_Erase+0xc6>
 8004d62:	4b2c      	ldr	r3, [pc, #176]	; (8004e14 <HAL_FLASHEx_Erase+0xd0>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d116      	bne.n	8004d9e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004d70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d74:	f7ff ff50 	bl	8004c18 <FLASH_WaitForLastOperation>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d141      	bne.n	8004e02 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004d7e:	2001      	movs	r0, #1
 8004d80:	f000 f84c 	bl	8004e1c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d88:	f7ff ff46 	bl	8004c18 <FLASH_WaitForLastOperation>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004d90:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <HAL_FLASHEx_Erase+0xd4>)
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	4a20      	ldr	r2, [pc, #128]	; (8004e18 <HAL_FLASHEx_Erase+0xd4>)
 8004d96:	f023 0304 	bic.w	r3, r3, #4
 8004d9a:	6113      	str	r3, [r2, #16]
 8004d9c:	e031      	b.n	8004e02 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004d9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004da2:	f7ff ff39 	bl	8004c18 <FLASH_WaitForLastOperation>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d12a      	bne.n	8004e02 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	f04f 32ff 	mov.w	r2, #4294967295
 8004db2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	e019      	b.n	8004df0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004dbc:	68b8      	ldr	r0, [r7, #8]
 8004dbe:	f000 f849 	bl	8004e54 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004dc2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004dc6:	f7ff ff27 	bl	8004c18 <FLASH_WaitForLastOperation>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004dce:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <HAL_FLASHEx_Erase+0xd4>)
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	4a11      	ldr	r2, [pc, #68]	; (8004e18 <HAL_FLASHEx_Erase+0xd4>)
 8004dd4:	f023 0302 	bic.w	r3, r3, #2
 8004dd8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	601a      	str	r2, [r3, #0]
            break;
 8004de6:	e00c      	b.n	8004e02 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dee:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	029a      	lsls	r2, r3, #10
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d3dc      	bcc.n	8004dbc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004e02:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <HAL_FLASHEx_Erase+0xd0>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	761a      	strb	r2, [r3, #24]

  return status;
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	200009e0 	.word	0x200009e0
 8004e18:	40022000 	.word	0x40022000

08004e1c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e24:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <FLASH_MassErase+0x30>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004e2a:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <FLASH_MassErase+0x34>)
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	4a08      	ldr	r2, [pc, #32]	; (8004e50 <FLASH_MassErase+0x34>)
 8004e30:	f043 0304 	orr.w	r3, r3, #4
 8004e34:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <FLASH_MassErase+0x34>)
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	4a05      	ldr	r2, [pc, #20]	; (8004e50 <FLASH_MassErase+0x34>)
 8004e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e40:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr
 8004e4c:	200009e0 	.word	0x200009e0
 8004e50:	40022000 	.word	0x40022000

08004e54 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <FLASH_PageErase+0x38>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004e62:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <FLASH_PageErase+0x3c>)
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <FLASH_PageErase+0x3c>)
 8004e68:	f043 0302 	orr.w	r3, r3, #2
 8004e6c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004e6e:	4a08      	ldr	r2, [pc, #32]	; (8004e90 <FLASH_PageErase+0x3c>)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004e74:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <FLASH_PageErase+0x3c>)
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	4a05      	ldr	r2, [pc, #20]	; (8004e90 <FLASH_PageErase+0x3c>)
 8004e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e7e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	200009e0 	.word	0x200009e0
 8004e90:	40022000 	.word	0x40022000

08004e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b08b      	sub	sp, #44	; 0x2c
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ea6:	e169      	b.n	800517c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	f040 8158 	bne.w	8005176 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4a9a      	ldr	r2, [pc, #616]	; (8005134 <HAL_GPIO_Init+0x2a0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d05e      	beq.n	8004f8e <HAL_GPIO_Init+0xfa>
 8004ed0:	4a98      	ldr	r2, [pc, #608]	; (8005134 <HAL_GPIO_Init+0x2a0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d875      	bhi.n	8004fc2 <HAL_GPIO_Init+0x12e>
 8004ed6:	4a98      	ldr	r2, [pc, #608]	; (8005138 <HAL_GPIO_Init+0x2a4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d058      	beq.n	8004f8e <HAL_GPIO_Init+0xfa>
 8004edc:	4a96      	ldr	r2, [pc, #600]	; (8005138 <HAL_GPIO_Init+0x2a4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d86f      	bhi.n	8004fc2 <HAL_GPIO_Init+0x12e>
 8004ee2:	4a96      	ldr	r2, [pc, #600]	; (800513c <HAL_GPIO_Init+0x2a8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d052      	beq.n	8004f8e <HAL_GPIO_Init+0xfa>
 8004ee8:	4a94      	ldr	r2, [pc, #592]	; (800513c <HAL_GPIO_Init+0x2a8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d869      	bhi.n	8004fc2 <HAL_GPIO_Init+0x12e>
 8004eee:	4a94      	ldr	r2, [pc, #592]	; (8005140 <HAL_GPIO_Init+0x2ac>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d04c      	beq.n	8004f8e <HAL_GPIO_Init+0xfa>
 8004ef4:	4a92      	ldr	r2, [pc, #584]	; (8005140 <HAL_GPIO_Init+0x2ac>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d863      	bhi.n	8004fc2 <HAL_GPIO_Init+0x12e>
 8004efa:	4a92      	ldr	r2, [pc, #584]	; (8005144 <HAL_GPIO_Init+0x2b0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d046      	beq.n	8004f8e <HAL_GPIO_Init+0xfa>
 8004f00:	4a90      	ldr	r2, [pc, #576]	; (8005144 <HAL_GPIO_Init+0x2b0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d85d      	bhi.n	8004fc2 <HAL_GPIO_Init+0x12e>
 8004f06:	2b12      	cmp	r3, #18
 8004f08:	d82a      	bhi.n	8004f60 <HAL_GPIO_Init+0xcc>
 8004f0a:	2b12      	cmp	r3, #18
 8004f0c:	d859      	bhi.n	8004fc2 <HAL_GPIO_Init+0x12e>
 8004f0e:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <HAL_GPIO_Init+0x80>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f8f 	.word	0x08004f8f
 8004f18:	08004f69 	.word	0x08004f69
 8004f1c:	08004f7b 	.word	0x08004f7b
 8004f20:	08004fbd 	.word	0x08004fbd
 8004f24:	08004fc3 	.word	0x08004fc3
 8004f28:	08004fc3 	.word	0x08004fc3
 8004f2c:	08004fc3 	.word	0x08004fc3
 8004f30:	08004fc3 	.word	0x08004fc3
 8004f34:	08004fc3 	.word	0x08004fc3
 8004f38:	08004fc3 	.word	0x08004fc3
 8004f3c:	08004fc3 	.word	0x08004fc3
 8004f40:	08004fc3 	.word	0x08004fc3
 8004f44:	08004fc3 	.word	0x08004fc3
 8004f48:	08004fc3 	.word	0x08004fc3
 8004f4c:	08004fc3 	.word	0x08004fc3
 8004f50:	08004fc3 	.word	0x08004fc3
 8004f54:	08004fc3 	.word	0x08004fc3
 8004f58:	08004f71 	.word	0x08004f71
 8004f5c:	08004f85 	.word	0x08004f85
 8004f60:	4a79      	ldr	r2, [pc, #484]	; (8005148 <HAL_GPIO_Init+0x2b4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004f66:	e02c      	b.n	8004fc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	623b      	str	r3, [r7, #32]
          break;
 8004f6e:	e029      	b.n	8004fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	3304      	adds	r3, #4
 8004f76:	623b      	str	r3, [r7, #32]
          break;
 8004f78:	e024      	b.n	8004fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	3308      	adds	r3, #8
 8004f80:	623b      	str	r3, [r7, #32]
          break;
 8004f82:	e01f      	b.n	8004fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	623b      	str	r3, [r7, #32]
          break;
 8004f8c:	e01a      	b.n	8004fc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d102      	bne.n	8004f9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004f96:	2304      	movs	r3, #4
 8004f98:	623b      	str	r3, [r7, #32]
          break;
 8004f9a:	e013      	b.n	8004fc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d105      	bne.n	8004fb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	611a      	str	r2, [r3, #16]
          break;
 8004fae:	e009      	b.n	8004fc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fb0:	2308      	movs	r3, #8
 8004fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	615a      	str	r2, [r3, #20]
          break;
 8004fba:	e003      	b.n	8004fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	623b      	str	r3, [r7, #32]
          break;
 8004fc0:	e000      	b.n	8004fc4 <HAL_GPIO_Init+0x130>
          break;
 8004fc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2bff      	cmp	r3, #255	; 0xff
 8004fc8:	d801      	bhi.n	8004fce <HAL_GPIO_Init+0x13a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	e001      	b.n	8004fd2 <HAL_GPIO_Init+0x13e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2bff      	cmp	r3, #255	; 0xff
 8004fd8:	d802      	bhi.n	8004fe0 <HAL_GPIO_Init+0x14c>
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	e002      	b.n	8004fe6 <HAL_GPIO_Init+0x152>
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	3b08      	subs	r3, #8
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	210f      	movs	r1, #15
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	6a39      	ldr	r1, [r7, #32]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	431a      	orrs	r2, r3
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80b1 	beq.w	8005176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005014:	4b4d      	ldr	r3, [pc, #308]	; (800514c <HAL_GPIO_Init+0x2b8>)
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	4a4c      	ldr	r2, [pc, #304]	; (800514c <HAL_GPIO_Init+0x2b8>)
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	6193      	str	r3, [r2, #24]
 8005020:	4b4a      	ldr	r3, [pc, #296]	; (800514c <HAL_GPIO_Init+0x2b8>)
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800502c:	4a48      	ldr	r2, [pc, #288]	; (8005150 <HAL_GPIO_Init+0x2bc>)
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	089b      	lsrs	r3, r3, #2
 8005032:	3302      	adds	r3, #2
 8005034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005038:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	220f      	movs	r2, #15
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	43db      	mvns	r3, r3
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4013      	ands	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a40      	ldr	r2, [pc, #256]	; (8005154 <HAL_GPIO_Init+0x2c0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d013      	beq.n	8005080 <HAL_GPIO_Init+0x1ec>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a3f      	ldr	r2, [pc, #252]	; (8005158 <HAL_GPIO_Init+0x2c4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00d      	beq.n	800507c <HAL_GPIO_Init+0x1e8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a3e      	ldr	r2, [pc, #248]	; (800515c <HAL_GPIO_Init+0x2c8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d007      	beq.n	8005078 <HAL_GPIO_Init+0x1e4>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a3d      	ldr	r2, [pc, #244]	; (8005160 <HAL_GPIO_Init+0x2cc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d101      	bne.n	8005074 <HAL_GPIO_Init+0x1e0>
 8005070:	2303      	movs	r3, #3
 8005072:	e006      	b.n	8005082 <HAL_GPIO_Init+0x1ee>
 8005074:	2304      	movs	r3, #4
 8005076:	e004      	b.n	8005082 <HAL_GPIO_Init+0x1ee>
 8005078:	2302      	movs	r3, #2
 800507a:	e002      	b.n	8005082 <HAL_GPIO_Init+0x1ee>
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <HAL_GPIO_Init+0x1ee>
 8005080:	2300      	movs	r3, #0
 8005082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005084:	f002 0203 	and.w	r2, r2, #3
 8005088:	0092      	lsls	r2, r2, #2
 800508a:	4093      	lsls	r3, r2
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005092:	492f      	ldr	r1, [pc, #188]	; (8005150 <HAL_GPIO_Init+0x2bc>)
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	089b      	lsrs	r3, r3, #2
 8005098:	3302      	adds	r3, #2
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d006      	beq.n	80050ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80050ac:	4b2d      	ldr	r3, [pc, #180]	; (8005164 <HAL_GPIO_Init+0x2d0>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	492c      	ldr	r1, [pc, #176]	; (8005164 <HAL_GPIO_Init+0x2d0>)
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	600b      	str	r3, [r1, #0]
 80050b8:	e006      	b.n	80050c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80050ba:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <HAL_GPIO_Init+0x2d0>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	43db      	mvns	r3, r3
 80050c2:	4928      	ldr	r1, [pc, #160]	; (8005164 <HAL_GPIO_Init+0x2d0>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d006      	beq.n	80050e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80050d4:	4b23      	ldr	r3, [pc, #140]	; (8005164 <HAL_GPIO_Init+0x2d0>)
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	4922      	ldr	r1, [pc, #136]	; (8005164 <HAL_GPIO_Init+0x2d0>)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	4313      	orrs	r3, r2
 80050de:	604b      	str	r3, [r1, #4]
 80050e0:	e006      	b.n	80050f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80050e2:	4b20      	ldr	r3, [pc, #128]	; (8005164 <HAL_GPIO_Init+0x2d0>)
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	43db      	mvns	r3, r3
 80050ea:	491e      	ldr	r1, [pc, #120]	; (8005164 <HAL_GPIO_Init+0x2d0>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d006      	beq.n	800510a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80050fc:	4b19      	ldr	r3, [pc, #100]	; (8005164 <HAL_GPIO_Init+0x2d0>)
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	4918      	ldr	r1, [pc, #96]	; (8005164 <HAL_GPIO_Init+0x2d0>)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	4313      	orrs	r3, r2
 8005106:	608b      	str	r3, [r1, #8]
 8005108:	e006      	b.n	8005118 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800510a:	4b16      	ldr	r3, [pc, #88]	; (8005164 <HAL_GPIO_Init+0x2d0>)
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	43db      	mvns	r3, r3
 8005112:	4914      	ldr	r1, [pc, #80]	; (8005164 <HAL_GPIO_Init+0x2d0>)
 8005114:	4013      	ands	r3, r2
 8005116:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d021      	beq.n	8005168 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005124:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <HAL_GPIO_Init+0x2d0>)
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	490e      	ldr	r1, [pc, #56]	; (8005164 <HAL_GPIO_Init+0x2d0>)
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	4313      	orrs	r3, r2
 800512e:	60cb      	str	r3, [r1, #12]
 8005130:	e021      	b.n	8005176 <HAL_GPIO_Init+0x2e2>
 8005132:	bf00      	nop
 8005134:	10320000 	.word	0x10320000
 8005138:	10310000 	.word	0x10310000
 800513c:	10220000 	.word	0x10220000
 8005140:	10210000 	.word	0x10210000
 8005144:	10120000 	.word	0x10120000
 8005148:	10110000 	.word	0x10110000
 800514c:	40021000 	.word	0x40021000
 8005150:	40010000 	.word	0x40010000
 8005154:	40010800 	.word	0x40010800
 8005158:	40010c00 	.word	0x40010c00
 800515c:	40011000 	.word	0x40011000
 8005160:	40011400 	.word	0x40011400
 8005164:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_GPIO_Init+0x304>)
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	43db      	mvns	r3, r3
 8005170:	4909      	ldr	r1, [pc, #36]	; (8005198 <HAL_GPIO_Init+0x304>)
 8005172:	4013      	ands	r3, r2
 8005174:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	3301      	adds	r3, #1
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	fa22 f303 	lsr.w	r3, r2, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	f47f ae8e 	bne.w	8004ea8 <HAL_GPIO_Init+0x14>
  }
}
 800518c:	bf00      	nop
 800518e:	bf00      	nop
 8005190:	372c      	adds	r7, #44	; 0x2c
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr
 8005198:	40010400 	.word	0x40010400

0800519c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	887b      	ldrh	r3, [r7, #2]
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
 80051b8:	e001      	b.n	80051be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051ba:	2300      	movs	r3, #0
 80051bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051be:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr

080051ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	807b      	strh	r3, [r7, #2]
 80051d6:	4613      	mov	r3, r2
 80051d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051da:	787b      	ldrb	r3, [r7, #1]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051e0:	887a      	ldrh	r2, [r7, #2]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80051e6:	e003      	b.n	80051f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051e8:	887b      	ldrh	r3, [r7, #2]
 80051ea:	041a      	lsls	r2, r3, #16
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	611a      	str	r2, [r3, #16]
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051fc:	b08b      	sub	sp, #44	; 0x2c
 80051fe:	af06      	add	r7, sp, #24
 8005200:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0fd      	b.n	8005408 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f006 fed9 	bl	800bfd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2203      	movs	r2, #3
 800522a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f003 f8dc 	bl	80083f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	687e      	ldr	r6, [r7, #4]
 8005240:	466d      	mov	r5, sp
 8005242:	f106 0410 	add.w	r4, r6, #16
 8005246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	602b      	str	r3, [r5, #0]
 800524e:	1d33      	adds	r3, r6, #4
 8005250:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005252:	6838      	ldr	r0, [r7, #0]
 8005254:	f003 f8a6 	bl	80083a4 <USB_CoreInit>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d005      	beq.n	800526a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e0ce      	b.n	8005408 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2100      	movs	r1, #0
 8005270:	4618      	mov	r0, r3
 8005272:	f003 f8d7 	bl	8008424 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005276:	2300      	movs	r3, #0
 8005278:	73fb      	strb	r3, [r7, #15]
 800527a:	e04c      	b.n	8005316 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	440b      	add	r3, r1
 800528c:	3301      	adds	r3, #1
 800528e:	2201      	movs	r2, #1
 8005290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	440b      	add	r3, r1
 80052a2:	7bfa      	ldrb	r2, [r7, #15]
 80052a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052a6:	7bfa      	ldrb	r2, [r7, #15]
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	b298      	uxth	r0, r3
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	440b      	add	r3, r1
 80052b8:	3336      	adds	r3, #54	; 0x36
 80052ba:	4602      	mov	r2, r0
 80052bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052be:	7bfb      	ldrb	r3, [r7, #15]
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	440b      	add	r3, r1
 80052ce:	3303      	adds	r3, #3
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052d4:	7bfa      	ldrb	r2, [r7, #15]
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	440b      	add	r3, r1
 80052e2:	3338      	adds	r3, #56	; 0x38
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052e8:	7bfa      	ldrb	r2, [r7, #15]
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	440b      	add	r3, r1
 80052f6:	333c      	adds	r3, #60	; 0x3c
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052fc:	7bfa      	ldrb	r2, [r7, #15]
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	440b      	add	r3, r1
 800530a:	3340      	adds	r3, #64	; 0x40
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	3301      	adds	r3, #1
 8005314:	73fb      	strb	r3, [r7, #15]
 8005316:	7bfa      	ldrb	r2, [r7, #15]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	429a      	cmp	r2, r3
 800531e:	d3ad      	bcc.n	800527c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005320:	2300      	movs	r3, #0
 8005322:	73fb      	strb	r3, [r7, #15]
 8005324:	e044      	b.n	80053b0 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005326:	7bfa      	ldrb	r2, [r7, #15]
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	440b      	add	r3, r1
 8005334:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005338:	2200      	movs	r2, #0
 800533a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800533c:	7bfa      	ldrb	r2, [r7, #15]
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	440b      	add	r3, r1
 800534a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800534e:	7bfa      	ldrb	r2, [r7, #15]
 8005350:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005352:	7bfa      	ldrb	r2, [r7, #15]
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	440b      	add	r3, r1
 8005360:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005364:	2200      	movs	r2, #0
 8005366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005368:	7bfa      	ldrb	r2, [r7, #15]
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	440b      	add	r3, r1
 8005376:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800537e:	7bfa      	ldrb	r2, [r7, #15]
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	440b      	add	r3, r1
 800538c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005394:	7bfa      	ldrb	r2, [r7, #15]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	440b      	add	r3, r1
 80053a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	3301      	adds	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
 80053b0:	7bfa      	ldrb	r2, [r7, #15]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d3b5      	bcc.n	8005326 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	687e      	ldr	r6, [r7, #4]
 80053c2:	466d      	mov	r5, sp
 80053c4:	f106 0410 	add.w	r4, r6, #16
 80053c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	1d33      	adds	r3, r6, #4
 80053d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053d4:	6838      	ldr	r0, [r7, #0]
 80053d6:	f003 f831 	bl	800843c <USB_DevInit>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e00d      	b.n	8005408 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f004 ffcb 	bl	800a39c <USB_DevDisconnect>

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005410 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_PCD_Start+0x16>
 8005422:	2302      	movs	r3, #2
 8005424:	e016      	b.n	8005454 <HAL_PCD_Start+0x44>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f002 ffc6 	bl	80083c4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005438:	2101      	movs	r1, #1
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f007 f83f 	bl	800c4be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4618      	mov	r0, r3
 8005446:	f004 ff9f 	bl	800a388 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f004 ffa1 	bl	800a3b0 <USB_ReadInterrupts>
 800546e:	4603      	mov	r3, r0
 8005470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005478:	d102      	bne.n	8005480 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fb61 	bl	8005b42 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4618      	mov	r0, r3
 8005486:	f004 ff93 	bl	800a3b0 <USB_ReadInterrupts>
 800548a:	4603      	mov	r3, r0
 800548c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005494:	d112      	bne.n	80054bc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800549e:	b29a      	uxth	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a8:	b292      	uxth	r2, r2
 80054aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f006 fe0d 	bl	800c0ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80054b4:	2100      	movs	r1, #0
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f925 	bl	8005706 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f004 ff75 	bl	800a3b0 <USB_ReadInterrupts>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d0:	d10b      	bne.n	80054ea <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054da:	b29a      	uxth	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054e4:	b292      	uxth	r2, r2
 80054e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f004 ff5e 	bl	800a3b0 <USB_ReadInterrupts>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fe:	d10b      	bne.n	8005518 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005508:	b29a      	uxth	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005512:	b292      	uxth	r2, r2
 8005514:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f004 ff47 	bl	800a3b0 <USB_ReadInterrupts>
 8005522:	4603      	mov	r3, r0
 8005524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552c:	d126      	bne.n	800557c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005536:	b29a      	uxth	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0204 	bic.w	r2, r2, #4
 8005540:	b292      	uxth	r2, r2
 8005542:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800554e:	b29a      	uxth	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0208 	bic.w	r2, r2, #8
 8005558:	b292      	uxth	r2, r2
 800555a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f006 fdee 	bl	800c140 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800556c:	b29a      	uxth	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005576:	b292      	uxth	r2, r2
 8005578:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f004 ff15 	bl	800a3b0 <USB_ReadInterrupts>
 8005586:	4603      	mov	r3, r0
 8005588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800558c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005590:	f040 8084 	bne.w	800569c <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8005594:	2300      	movs	r3, #0
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e011      	b.n	80055be <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	7ffb      	ldrb	r3, [r7, #31]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	441a      	add	r2, r3
 80055a6:	7ffb      	ldrb	r3, [r7, #31]
 80055a8:	8812      	ldrh	r2, [r2, #0]
 80055aa:	b292      	uxth	r2, r2
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	f107 0120 	add.w	r1, r7, #32
 80055b2:	440b      	add	r3, r1
 80055b4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80055b8:	7ffb      	ldrb	r3, [r7, #31]
 80055ba:	3301      	adds	r3, #1
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	7ffb      	ldrb	r3, [r7, #31]
 80055c0:	2b07      	cmp	r3, #7
 80055c2:	d9ea      	bls.n	800559a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	b292      	uxth	r2, r2
 80055d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0201 	bic.w	r2, r2, #1
 80055ee:	b292      	uxth	r2, r2
 80055f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80055f4:	bf00      	nop
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f6      	beq.n	80055f6 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005610:	b29a      	uxth	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561a:	b292      	uxth	r2, r2
 800561c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005620:	2300      	movs	r3, #0
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	e010      	b.n	8005648 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005626:	7ffb      	ldrb	r3, [r7, #31]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6812      	ldr	r2, [r2, #0]
 800562c:	4611      	mov	r1, r2
 800562e:	7ffa      	ldrb	r2, [r7, #31]
 8005630:	0092      	lsls	r2, r2, #2
 8005632:	440a      	add	r2, r1
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	f107 0120 	add.w	r1, r7, #32
 800563a:	440b      	add	r3, r1
 800563c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005640:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005642:	7ffb      	ldrb	r3, [r7, #31]
 8005644:	3301      	adds	r3, #1
 8005646:	77fb      	strb	r3, [r7, #31]
 8005648:	7ffb      	ldrb	r3, [r7, #31]
 800564a:	2b07      	cmp	r3, #7
 800564c:	d9eb      	bls.n	8005626 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005656:	b29a      	uxth	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0208 	orr.w	r2, r2, #8
 8005660:	b292      	uxth	r2, r2
 8005662:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800566e:	b29a      	uxth	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005678:	b292      	uxth	r2, r2
 800567a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005686:	b29a      	uxth	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0204 	orr.w	r2, r2, #4
 8005690:	b292      	uxth	r2, r2
 8005692:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f006 fd38 	bl	800c10c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f004 fe85 	bl	800a3b0 <USB_ReadInterrupts>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b0:	d10e      	bne.n	80056d0 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056c4:	b292      	uxth	r2, r2
 80056c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f006 fcf1 	bl	800c0b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f004 fe6b 	bl	800a3b0 <USB_ReadInterrupts>
 80056da:	4603      	mov	r3, r0
 80056dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e4:	d10b      	bne.n	80056fe <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056f8:	b292      	uxth	r2, r2
 80056fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80056fe:	bf00      	nop
 8005700:	3720      	adds	r7, #32
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	460b      	mov	r3, r1
 8005710:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_PCD_SetAddress+0x1a>
 800571c:	2302      	movs	r3, #2
 800571e:	e013      	b.n	8005748 <HAL_PCD_SetAddress+0x42>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	78fa      	ldrb	r2, [r7, #3]
 800572c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	78fa      	ldrb	r2, [r7, #3]
 8005736:	4611      	mov	r1, r2
 8005738:	4618      	mov	r0, r3
 800573a:	f004 fe12 	bl	800a362 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	4608      	mov	r0, r1
 800575a:	4611      	mov	r1, r2
 800575c:	461a      	mov	r2, r3
 800575e:	4603      	mov	r3, r0
 8005760:	70fb      	strb	r3, [r7, #3]
 8005762:	460b      	mov	r3, r1
 8005764:	803b      	strh	r3, [r7, #0]
 8005766:	4613      	mov	r3, r2
 8005768:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800576e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005772:	2b00      	cmp	r3, #0
 8005774:	da0e      	bge.n	8005794 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	4413      	add	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2201      	movs	r2, #1
 8005790:	705a      	strb	r2, [r3, #1]
 8005792:	e00e      	b.n	80057b2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	f003 0207 	and.w	r2, r3, #7
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4413      	add	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80057be:	883a      	ldrh	r2, [r7, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	78ba      	ldrb	r2, [r7, #2]
 80057c8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d004      	beq.n	80057dc <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80057dc:	78bb      	ldrb	r3, [r7, #2]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d102      	bne.n	80057e8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_PCD_EP_Open+0xa6>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e00e      	b.n	8005814 <HAL_PCD_EP_Open+0xc4>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68f9      	ldr	r1, [r7, #12]
 8005804:	4618      	mov	r0, r3
 8005806:	f002 fe39 	bl	800847c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005812:	7afb      	ldrb	r3, [r7, #11]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800582c:	2b00      	cmp	r3, #0
 800582e:	da0e      	bge.n	800584e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4413      	add	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	705a      	strb	r2, [r3, #1]
 800584c:	e00e      	b.n	800586c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	f003 0207 	and.w	r2, r3, #7
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	4413      	add	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	b2da      	uxtb	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_PCD_EP_Close+0x6a>
 8005882:	2302      	movs	r3, #2
 8005884:	e00e      	b.n	80058a4 <HAL_PCD_EP_Close+0x88>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68f9      	ldr	r1, [r7, #12]
 8005894:	4618      	mov	r0, r3
 8005896:	f003 f95b 	bl	8008b50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	607a      	str	r2, [r7, #4]
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	460b      	mov	r3, r1
 80058ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058bc:	7afb      	ldrb	r3, [r7, #11]
 80058be:	f003 0207 	and.w	r2, r3, #7
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2200      	movs	r2, #0
 80058e4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2200      	movs	r2, #0
 80058ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058ec:	7afb      	ldrb	r3, [r7, #11]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058f8:	7afb      	ldrb	r3, [r7, #11]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6979      	ldr	r1, [r7, #20]
 8005908:	4618      	mov	r0, r3
 800590a:	f003 fb0d 	bl	8008f28 <USB_EPStartXfer>
 800590e:	e005      	b.n	800591c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6979      	ldr	r1, [r7, #20]
 8005916:	4618      	mov	r0, r3
 8005918:	f003 fb06 	bl	8008f28 <USB_EPStartXfer>
  }

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	460b      	mov	r3, r1
 8005930:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005932:	78fb      	ldrb	r3, [r7, #3]
 8005934:	f003 0207 	and.w	r2, r3, #7
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	440b      	add	r3, r1
 8005944:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005948:	681b      	ldr	r3, [r3, #0]
}
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr

08005954 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	607a      	str	r2, [r7, #4]
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	460b      	mov	r3, r1
 8005962:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005964:	7afb      	ldrb	r3, [r7, #11]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2200      	movs	r2, #0
 8005998:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2201      	movs	r2, #1
 800599e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059a0:	7afb      	ldrb	r3, [r7, #11]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059ac:	7afb      	ldrb	r3, [r7, #11]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6979      	ldr	r1, [r7, #20]
 80059bc:	4618      	mov	r0, r3
 80059be:	f003 fab3 	bl	8008f28 <USB_EPStartXfer>
 80059c2:	e005      	b.n	80059d0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6979      	ldr	r1, [r7, #20]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f003 faac 	bl	8008f28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	460b      	mov	r3, r1
 80059e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80059e6:	78fb      	ldrb	r3, [r7, #3]
 80059e8:	f003 0207 	and.w	r2, r3, #7
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d901      	bls.n	80059f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e04c      	b.n	8005a92 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	da0e      	bge.n	8005a1e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	4413      	add	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	705a      	strb	r2, [r3, #1]
 8005a1c:	e00c      	b.n	8005a38 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a1e:	78fa      	ldrb	r2, [r7, #3]
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	4413      	add	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_PCD_EP_SetStall+0x7e>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e01c      	b.n	8005a92 <HAL_PCD_EP_SetStall+0xb8>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68f9      	ldr	r1, [r7, #12]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f004 fb7e 	bl	800a168 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d108      	bne.n	8005a88 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005a80:	4619      	mov	r1, r3
 8005a82:	4610      	mov	r0, r2
 8005a84:	f004 fca3 	bl	800a3ce <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	f003 020f 	and.w	r2, r3, #15
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d901      	bls.n	8005ab8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e040      	b.n	8005b3a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	da0e      	bge.n	8005ade <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	705a      	strb	r2, [r3, #1]
 8005adc:	e00e      	b.n	8005afc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	f003 0207 	and.w	r2, r3, #7
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	4413      	add	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_PCD_EP_ClrStall+0x82>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e00e      	b.n	8005b3a <HAL_PCD_EP_ClrStall+0xa0>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68f9      	ldr	r1, [r7, #12]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f004 fb6c 	bl	800a208 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b08e      	sub	sp, #56	; 0x38
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005b4a:	e2df      	b.n	800610c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b54:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005b56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005b62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f040 8158 	bne.w	8005e1c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005b6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b6e:	f003 0310 	and.w	r3, r3, #16
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d152      	bne.n	8005c1c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	81fb      	strh	r3, [r7, #14]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	89fb      	ldrh	r3, [r7, #14]
 8005b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3328      	adds	r3, #40	; 0x28
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	461a      	mov	r2, r3
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	3302      	adds	r3, #2
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	6812      	ldr	r2, [r2, #0]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	695a      	ldr	r2, [r3, #20]
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	441a      	add	r2, r3
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005bda:	2100      	movs	r1, #0
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f006 fa4e 	bl	800c07e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 828e 	beq.w	800610c <PCD_EP_ISR_Handler+0x5ca>
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f040 8289 	bne.w	800610c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	b292      	uxth	r2, r2
 8005c0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c1a:	e277      	b.n	800610c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005c2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d034      	beq.n	8005ca0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	4413      	add	r3, r2
 8005c4a:	3306      	adds	r3, #6
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6812      	ldr	r2, [r2, #0]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	f004 fbfa 	bl	800a46e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005c86:	4013      	ands	r3, r2
 8005c88:	823b      	strh	r3, [r7, #16]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	8a3a      	ldrh	r2, [r7, #16]
 8005c90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c94:	b292      	uxth	r2, r2
 8005c96:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f006 f9c3 	bl	800c024 <HAL_PCD_SetupStageCallback>
 8005c9e:	e235      	b.n	800610c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005ca0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f280 8231 	bge.w	800610c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	83bb      	strh	r3, [r7, #28]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	8bba      	ldrh	r2, [r7, #28]
 8005cc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cc4:	b292      	uxth	r2, r2
 8005cc6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4413      	add	r3, r2
 8005cdc:	3306      	adds	r3, #6
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d019      	beq.n	8005d30 <PCD_EP_ISR_Handler+0x1ee>
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d015      	beq.n	8005d30 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	6959      	ldr	r1, [r3, #20]
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	f004 fbaa 	bl	800a46e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	441a      	add	r2, r3
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005d28:	2100      	movs	r1, #0
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f006 f98c 	bl	800c048 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	4413      	add	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d112      	bne.n	8005d7e <PCD_EP_ISR_Handler+0x23c>
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	e02f      	b.n	8005dde <PCD_EP_ISR_Handler+0x29c>
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b3e      	cmp	r3, #62	; 0x3e
 8005d84:	d813      	bhi.n	8005dae <PCD_EP_ISR_Handler+0x26c>
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	085b      	lsrs	r3, r3, #1
 8005d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <PCD_EP_ISR_Handler+0x25e>
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	029b      	lsls	r3, r3, #10
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	801a      	strh	r2, [r3, #0]
 8005dac:	e017      	b.n	8005dde <PCD_EP_ISR_Handler+0x29c>
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	633b      	str	r3, [r7, #48]	; 0x30
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d102      	bne.n	8005dc8 <PCD_EP_ISR_Handler+0x286>
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	029b      	lsls	r3, r3, #10
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dee:	827b      	strh	r3, [r7, #18]
 8005df0:	8a7b      	ldrh	r3, [r7, #18]
 8005df2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005df6:	827b      	strh	r3, [r7, #18]
 8005df8:	8a7b      	ldrh	r3, [r7, #18]
 8005dfa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dfe:	827b      	strh	r3, [r7, #18]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	8a7b      	ldrh	r3, [r7, #18]
 8005e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	8013      	strh	r3, [r2, #0]
 8005e1a:	e177      	b.n	800610c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005e2e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f280 80ea 	bge.w	800600c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005e4e:	4013      	ands	r3, r2
 8005e50:	853b      	strh	r3, [r7, #40]	; 0x28
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005e62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e66:	b292      	uxth	r2, r2
 8005e68:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005e6a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	7b1b      	ldrb	r3, [r3, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d122      	bne.n	8005ece <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	461a      	mov	r2, r3
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	3306      	adds	r3, #6
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eb0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005eb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8087 	beq.w	8005fc8 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6818      	ldr	r0, [r3, #0]
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	6959      	ldr	r1, [r3, #20]
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	88da      	ldrh	r2, [r3, #6]
 8005ec6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ec8:	f004 fad1 	bl	800a46e <USB_ReadPMA>
 8005ecc:	e07c      	b.n	8005fc8 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	78db      	ldrb	r3, [r3, #3]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d108      	bne.n	8005ee8 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005ed6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f923 	bl	8006128 <HAL_PCD_EP_DB_Receive>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005ee6:	e06f      	b.n	8005fc8 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	441a      	add	r2, r3
 8005f12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d021      	beq.n	8005f86 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	4413      	add	r3, r2
 8005f56:	3302      	adds	r3, #2
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f64:	881b      	ldrh	r3, [r3, #0]
 8005f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f6a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005f6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d02a      	beq.n	8005fc8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	6959      	ldr	r1, [r3, #20]
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	891a      	ldrh	r2, [r3, #8]
 8005f7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f80:	f004 fa75 	bl	800a46e <USB_ReadPMA>
 8005f84:	e020      	b.n	8005fc8 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	461a      	mov	r2, r3
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	4413      	add	r3, r2
 8005f9a:	3306      	adds	r3, #6
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fae:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005fb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d008      	beq.n	8005fc8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6818      	ldr	r0, [r3, #0]
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	6959      	ldr	r1, [r3, #20]
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	895a      	ldrh	r2, [r3, #10]
 8005fc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fc4:	f004 fa53 	bl	800a46e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	69da      	ldr	r2, [r3, #28]
 8005fcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fce:	441a      	add	r2, r3
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	695a      	ldr	r2, [r3, #20]
 8005fd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fda:	441a      	add	r2, r3
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d004      	beq.n	8005ff2 <PCD_EP_ISR_Handler+0x4b0>
 8005fe8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d206      	bcs.n	8006000 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f006 f825 	bl	800c048 <HAL_PCD_DataOutStageCallback>
 8005ffe:	e005      	b.n	800600c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006006:	4618      	mov	r0, r3
 8006008:	f002 ff8e 	bl	8008f28 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800600c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800600e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006012:	2b00      	cmp	r3, #0
 8006014:	d07a      	beq.n	800610c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8006016:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	4413      	add	r3, r2
 8006028:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006044:	843b      	strh	r3, [r7, #32]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	441a      	add	r2, r3
 8006054:	8c3b      	ldrh	r3, [r7, #32]
 8006056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800605e:	b29b      	uxth	r3, r3
 8006060:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	78db      	ldrb	r3, [r3, #3]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d108      	bne.n	800607c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800606e:	2b02      	cmp	r3, #2
 8006070:	d146      	bne.n	8006100 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006072:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006078:	2b00      	cmp	r3, #0
 800607a:	d141      	bne.n	8006100 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006084:	b29b      	uxth	r3, r3
 8006086:	461a      	mov	r2, r3
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	4413      	add	r3, r2
 8006090:	3302      	adds	r3, #2
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	8bfb      	ldrh	r3, [r7, #30]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d906      	bls.n	80060be <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	8bfb      	ldrh	r3, [r7, #30]
 80060b6:	1ad2      	subs	r2, r2, r3
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	619a      	str	r2, [r3, #24]
 80060bc:	e002      	b.n	80060c4 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	2200      	movs	r2, #0
 80060c2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d106      	bne.n	80060da <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f005 ffd3 	bl	800c07e <HAL_PCD_DataInStageCallback>
 80060d8:	e018      	b.n	800610c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	695a      	ldr	r2, [r3, #20]
 80060de:	8bfb      	ldrh	r3, [r7, #30]
 80060e0:	441a      	add	r2, r3
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	8bfb      	ldrh	r3, [r7, #30]
 80060ec:	441a      	add	r2, r3
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060f8:	4618      	mov	r0, r3
 80060fa:	f002 ff15 	bl	8008f28 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80060fe:	e005      	b.n	800610c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006100:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006102:	461a      	mov	r2, r3
 8006104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f91b 	bl	8006342 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006114:	b29b      	uxth	r3, r3
 8006116:	b21b      	sxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	f6ff ad17 	blt.w	8005b4c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3738      	adds	r7, #56	; 0x38
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	4613      	mov	r3, r2
 8006134:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d07e      	beq.n	800623e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	4413      	add	r3, r2
 8006154:	3302      	adds	r3, #2
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	6812      	ldr	r2, [r2, #0]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006168:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	8b7b      	ldrh	r3, [r7, #26]
 8006170:	429a      	cmp	r2, r3
 8006172:	d306      	bcc.n	8006182 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	699a      	ldr	r2, [r3, #24]
 8006178:	8b7b      	ldrh	r3, [r7, #26]
 800617a:	1ad2      	subs	r2, r2, r3
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	619a      	str	r2, [r3, #24]
 8006180:	e002      	b.n	8006188 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2200      	movs	r2, #0
 8006186:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d123      	bne.n	80061d8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	461a      	mov	r2, r3
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061aa:	833b      	strh	r3, [r7, #24]
 80061ac:	8b3b      	ldrh	r3, [r7, #24]
 80061ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061b2:	833b      	strh	r3, [r7, #24]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	441a      	add	r2, r3
 80061c2:	8b3b      	ldrh	r3, [r7, #24]
 80061c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80061d8:	88fb      	ldrh	r3, [r7, #6]
 80061da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01f      	beq.n	8006222 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fc:	82fb      	strh	r3, [r7, #22]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	441a      	add	r2, r3
 800620c:	8afb      	ldrh	r3, [r7, #22]
 800620e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800621e:	b29b      	uxth	r3, r3
 8006220:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006222:	8b7b      	ldrh	r3, [r7, #26]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8087 	beq.w	8006338 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	6959      	ldr	r1, [r3, #20]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	891a      	ldrh	r2, [r3, #8]
 8006236:	8b7b      	ldrh	r3, [r7, #26]
 8006238:	f004 f919 	bl	800a46e <USB_ReadPMA>
 800623c:	e07c      	b.n	8006338 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006246:	b29b      	uxth	r3, r3
 8006248:	461a      	mov	r2, r3
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	4413      	add	r3, r2
 8006252:	3306      	adds	r3, #6
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006266:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	699a      	ldr	r2, [r3, #24]
 800626c:	8b7b      	ldrh	r3, [r7, #26]
 800626e:	429a      	cmp	r2, r3
 8006270:	d306      	bcc.n	8006280 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	8b7b      	ldrh	r3, [r7, #26]
 8006278:	1ad2      	subs	r2, r2, r3
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	619a      	str	r2, [r3, #24]
 800627e:	e002      	b.n	8006286 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2200      	movs	r2, #0
 8006284:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d123      	bne.n	80062d6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a8:	83fb      	strh	r3, [r7, #30]
 80062aa:	8bfb      	ldrh	r3, [r7, #30]
 80062ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062b0:	83fb      	strh	r3, [r7, #30]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	441a      	add	r2, r3
 80062c0:	8bfb      	ldrh	r3, [r7, #30]
 80062c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80062d6:	88fb      	ldrh	r3, [r7, #6]
 80062d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d11f      	bne.n	8006320 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fa:	83bb      	strh	r3, [r7, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	461a      	mov	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	441a      	add	r2, r3
 800630a:	8bbb      	ldrh	r3, [r7, #28]
 800630c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006318:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800631c:	b29b      	uxth	r3, r3
 800631e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006320:	8b7b      	ldrh	r3, [r7, #26]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d008      	beq.n	8006338 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	6959      	ldr	r1, [r3, #20]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	895a      	ldrh	r2, [r3, #10]
 8006332:	8b7b      	ldrh	r3, [r7, #26]
 8006334:	f004 f89b 	bl	800a46e <USB_ReadPMA>
    }
  }

  return count;
 8006338:	8b7b      	ldrh	r3, [r7, #26]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b094      	sub	sp, #80	; 0x50
 8006346:	af00      	add	r7, sp, #0
 8006348:	60f8      	str	r0, [r7, #12]
 800634a:	60b9      	str	r1, [r7, #8]
 800634c:	4613      	mov	r3, r2
 800634e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006350:	88fb      	ldrh	r3, [r7, #6]
 8006352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 8138 	beq.w	80065cc <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006364:	b29b      	uxth	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4413      	add	r3, r2
 8006370:	3302      	adds	r3, #2
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	6812      	ldr	r2, [r2, #0]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006384:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	699a      	ldr	r2, [r3, #24]
 800638c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006390:	429a      	cmp	r2, r3
 8006392:	d907      	bls.n	80063a4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	699a      	ldr	r2, [r3, #24]
 8006398:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800639c:	1ad2      	subs	r2, r2, r3
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	619a      	str	r2, [r3, #24]
 80063a2:	e002      	b.n	80063aa <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2200      	movs	r2, #0
 80063a8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d12c      	bne.n	800640c <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	4619      	mov	r1, r3
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f005 fe60 	bl	800c07e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 823a 	beq.w	800683e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e4:	82fb      	strh	r3, [r7, #22]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	441a      	add	r2, r3
 80063f4:	8afb      	ldrh	r3, [r7, #22]
 80063f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006406:	b29b      	uxth	r3, r3
 8006408:	8013      	strh	r3, [r2, #0]
 800640a:	e218      	b.n	800683e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800640c:	88fb      	ldrh	r3, [r7, #6]
 800640e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d01f      	beq.n	8006456 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006430:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	441a      	add	r2, r3
 8006440:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800644e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006452:	b29b      	uxth	r3, r3
 8006454:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800645c:	2b01      	cmp	r3, #1
 800645e:	f040 81ee 	bne.w	800683e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	695a      	ldr	r2, [r3, #20]
 8006466:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800646a:	441a      	add	r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006478:	441a      	add	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	6a1a      	ldr	r2, [r3, #32]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	429a      	cmp	r2, r3
 8006488:	d309      	bcc.n	800649e <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	6a1a      	ldr	r2, [r3, #32]
 8006494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006496:	1ad2      	subs	r2, r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	621a      	str	r2, [r3, #32]
 800649c:	e015      	b.n	80064ca <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d107      	bne.n	80064b6 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80064a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064aa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80064b4:	e009      	b.n	80064ca <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2200      	movs	r2, #0
 80064c8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	785b      	ldrb	r3, [r3, #1]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d155      	bne.n	800657e <HAL_PCD_EP_DB_Transmit+0x23c>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	011a      	lsls	r2, r3, #4
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d112      	bne.n	8006526 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800650a:	b29a      	uxth	r2, r3
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	b29b      	uxth	r3, r3
 8006516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800651a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651e:	b29a      	uxth	r2, r3
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	801a      	strh	r2, [r3, #0]
 8006524:	e047      	b.n	80065b6 <HAL_PCD_EP_DB_Transmit+0x274>
 8006526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006528:	2b3e      	cmp	r3, #62	; 0x3e
 800652a:	d811      	bhi.n	8006550 <HAL_PCD_EP_DB_Transmit+0x20e>
 800652c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800652e:	085b      	lsrs	r3, r3, #1
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <HAL_PCD_EP_DB_Transmit+0x200>
 800653c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653e:	3301      	adds	r3, #1
 8006540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	b29b      	uxth	r3, r3
 8006546:	029b      	lsls	r3, r3, #10
 8006548:	b29a      	uxth	r2, r3
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	e032      	b.n	80065b6 <HAL_PCD_EP_DB_Transmit+0x274>
 8006550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006558:	f003 031f 	and.w	r3, r3, #31
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <HAL_PCD_EP_DB_Transmit+0x224>
 8006560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006562:	3b01      	subs	r3, #1
 8006564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006568:	b29b      	uxth	r3, r3
 800656a:	029b      	lsls	r3, r3, #10
 800656c:	b29b      	uxth	r3, r3
 800656e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006576:	b29a      	uxth	r2, r3
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	801a      	strh	r2, [r3, #0]
 800657c:	e01b      	b.n	80065b6 <HAL_PCD_EP_DB_Transmit+0x274>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d117      	bne.n	80065b6 <HAL_PCD_EP_DB_Transmit+0x274>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006594:	b29b      	uxth	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	4413      	add	r3, r2
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	011a      	lsls	r2, r3, #4
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	4413      	add	r3, r2
 80065a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065ac:	623b      	str	r3, [r7, #32]
 80065ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6959      	ldr	r1, [r3, #20]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	891a      	ldrh	r2, [r3, #8]
 80065c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f003 ff0d 	bl	800a3e4 <USB_WritePMA>
 80065ca:	e138      	b.n	800683e <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	4413      	add	r3, r2
 80065e0:	3306      	adds	r3, #6
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	6812      	ldr	r2, [r2, #0]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065f4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	699a      	ldr	r2, [r3, #24]
 80065fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006600:	429a      	cmp	r2, r3
 8006602:	d307      	bcc.n	8006614 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	699a      	ldr	r2, [r3, #24]
 8006608:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800660c:	1ad2      	subs	r2, r2, r3
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	619a      	str	r2, [r3, #24]
 8006612:	e002      	b.n	800661a <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2200      	movs	r2, #0
 8006618:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d12e      	bne.n	8006680 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	4619      	mov	r1, r3
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f005 fd28 	bl	800c07e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006634:	2b00      	cmp	r3, #0
 8006636:	f040 8102 	bne.w	800683e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	b29b      	uxth	r3, r3
 800664c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006654:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	441a      	add	r2, r3
 8006666:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800666a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800666e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667a:	b29b      	uxth	r3, r3
 800667c:	8013      	strh	r3, [r2, #0]
 800667e:	e0de      	b.n	800683e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006680:	88fb      	ldrh	r3, [r7, #6]
 8006682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d11f      	bne.n	80066ca <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	b29b      	uxth	r3, r3
 800669c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a4:	867b      	strh	r3, [r7, #50]	; 0x32
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	441a      	add	r2, r3
 80066b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80066b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	f040 80b4 	bne.w	800683e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066de:	441a      	add	r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066ec:	441a      	add	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	6a1a      	ldr	r2, [r3, #32]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d309      	bcc.n	8006712 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	6a1a      	ldr	r2, [r3, #32]
 8006708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800670a:	1ad2      	subs	r2, r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	621a      	str	r2, [r3, #32]
 8006710:	e015      	b.n	800673e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d107      	bne.n	800672a <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 800671a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800671e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006728:	e009      	b.n	800673e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2200      	movs	r2, #0
 8006734:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	643b      	str	r3, [r7, #64]	; 0x40
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	785b      	ldrb	r3, [r3, #1]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d155      	bne.n	80067f8 <HAL_PCD_EP_DB_Transmit+0x4b6>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	63bb      	str	r3, [r7, #56]	; 0x38
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675a:	b29b      	uxth	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	4413      	add	r3, r2
 8006762:	63bb      	str	r3, [r7, #56]	; 0x38
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	011a      	lsls	r2, r3, #4
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	4413      	add	r3, r2
 800676e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006772:	637b      	str	r3, [r7, #52]	; 0x34
 8006774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006776:	2b00      	cmp	r3, #0
 8006778:	d112      	bne.n	80067a0 <HAL_PCD_EP_DB_Transmit+0x45e>
 800677a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	b29b      	uxth	r3, r3
 8006780:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006784:	b29a      	uxth	r2, r3
 8006786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006798:	b29a      	uxth	r2, r3
 800679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	e044      	b.n	800682a <HAL_PCD_EP_DB_Transmit+0x4e8>
 80067a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a2:	2b3e      	cmp	r3, #62	; 0x3e
 80067a4:	d811      	bhi.n	80067ca <HAL_PCD_EP_DB_Transmit+0x488>
 80067a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a8:	085b      	lsrs	r3, r3, #1
 80067aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <HAL_PCD_EP_DB_Transmit+0x47a>
 80067b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b8:	3301      	adds	r3, #1
 80067ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067be:	b29b      	uxth	r3, r3
 80067c0:	029b      	lsls	r3, r3, #10
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c6:	801a      	strh	r2, [r3, #0]
 80067c8:	e02f      	b.n	800682a <HAL_PCD_EP_DB_Transmit+0x4e8>
 80067ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d102      	bne.n	80067e0 <HAL_PCD_EP_DB_Transmit+0x49e>
 80067da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067dc:	3b01      	subs	r3, #1
 80067de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	029b      	lsls	r3, r3, #10
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f4:	801a      	strh	r2, [r3, #0]
 80067f6:	e018      	b.n	800682a <HAL_PCD_EP_DB_Transmit+0x4e8>
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d114      	bne.n	800682a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006808:	b29b      	uxth	r3, r3
 800680a:	461a      	mov	r2, r3
 800680c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800680e:	4413      	add	r3, r2
 8006810:	643b      	str	r3, [r7, #64]	; 0x40
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	011a      	lsls	r2, r3, #4
 8006818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681a:	4413      	add	r3, r2
 800681c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006824:	b29a      	uxth	r2, r3
 8006826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006828:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6818      	ldr	r0, [r3, #0]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6959      	ldr	r1, [r3, #20]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	895a      	ldrh	r2, [r3, #10]
 8006836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006838:	b29b      	uxth	r3, r3
 800683a:	f003 fdd3 	bl	800a3e4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006858:	82bb      	strh	r3, [r7, #20]
 800685a:	8abb      	ldrh	r3, [r7, #20]
 800685c:	f083 0310 	eor.w	r3, r3, #16
 8006860:	82bb      	strh	r3, [r7, #20]
 8006862:	8abb      	ldrh	r3, [r7, #20]
 8006864:	f083 0320 	eor.w	r3, r3, #32
 8006868:	82bb      	strh	r3, [r7, #20]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	441a      	add	r2, r3
 8006878:	8abb      	ldrh	r3, [r7, #20]
 800687a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800687e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688a:	b29b      	uxth	r3, r3
 800688c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3750      	adds	r7, #80	; 0x50
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	607b      	str	r3, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	817b      	strh	r3, [r7, #10]
 80068a6:	4613      	mov	r3, r2
 80068a8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80068aa:	897b      	ldrh	r3, [r7, #10]
 80068ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00b      	beq.n	80068ce <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068b6:	897b      	ldrh	r3, [r7, #10]
 80068b8:	f003 0307 	and.w	r3, r3, #7
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4413      	add	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	e009      	b.n	80068e2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80068ce:	897a      	ldrh	r2, [r7, #10]
 80068d0:	4613      	mov	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80068e2:	893b      	ldrh	r3, [r7, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d107      	bne.n	80068f8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2200      	movs	r2, #0
 80068ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	80da      	strh	r2, [r3, #6]
 80068f6:	e00b      	b.n	8006910 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2201      	movs	r2, #1
 80068fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	b29a      	uxth	r2, r3
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	0c1b      	lsrs	r3, r3, #16
 800690a:	b29a      	uxth	r2, r3
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	bc80      	pop	{r7}
 800691a:	4770      	bx	lr

0800691c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e26c      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 8087 	beq.w	8006a4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800693c:	4b92      	ldr	r3, [pc, #584]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f003 030c 	and.w	r3, r3, #12
 8006944:	2b04      	cmp	r3, #4
 8006946:	d00c      	beq.n	8006962 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006948:	4b8f      	ldr	r3, [pc, #572]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f003 030c 	and.w	r3, r3, #12
 8006950:	2b08      	cmp	r3, #8
 8006952:	d112      	bne.n	800697a <HAL_RCC_OscConfig+0x5e>
 8006954:	4b8c      	ldr	r3, [pc, #560]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800695c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006960:	d10b      	bne.n	800697a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006962:	4b89      	ldr	r3, [pc, #548]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d06c      	beq.n	8006a48 <HAL_RCC_OscConfig+0x12c>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d168      	bne.n	8006a48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e246      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006982:	d106      	bne.n	8006992 <HAL_RCC_OscConfig+0x76>
 8006984:	4b80      	ldr	r3, [pc, #512]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a7f      	ldr	r2, [pc, #508]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 800698a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	e02e      	b.n	80069f0 <HAL_RCC_OscConfig+0xd4>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10c      	bne.n	80069b4 <HAL_RCC_OscConfig+0x98>
 800699a:	4b7b      	ldr	r3, [pc, #492]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a7a      	ldr	r2, [pc, #488]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 80069a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	4b78      	ldr	r3, [pc, #480]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a77      	ldr	r2, [pc, #476]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 80069ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	e01d      	b.n	80069f0 <HAL_RCC_OscConfig+0xd4>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069bc:	d10c      	bne.n	80069d8 <HAL_RCC_OscConfig+0xbc>
 80069be:	4b72      	ldr	r3, [pc, #456]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a71      	ldr	r2, [pc, #452]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 80069c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	4b6f      	ldr	r3, [pc, #444]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a6e      	ldr	r2, [pc, #440]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 80069d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	e00b      	b.n	80069f0 <HAL_RCC_OscConfig+0xd4>
 80069d8:	4b6b      	ldr	r3, [pc, #428]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a6a      	ldr	r2, [pc, #424]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 80069de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	4b68      	ldr	r3, [pc, #416]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a67      	ldr	r2, [pc, #412]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 80069ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d013      	beq.n	8006a20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f8:	f7fd fa64 	bl	8003ec4 <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a00:	f7fd fa60 	bl	8003ec4 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b64      	cmp	r3, #100	; 0x64
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e1fa      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a12:	4b5d      	ldr	r3, [pc, #372]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f0      	beq.n	8006a00 <HAL_RCC_OscConfig+0xe4>
 8006a1e:	e014      	b.n	8006a4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a20:	f7fd fa50 	bl	8003ec4 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a28:	f7fd fa4c 	bl	8003ec4 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b64      	cmp	r3, #100	; 0x64
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e1e6      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a3a:	4b53      	ldr	r3, [pc, #332]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f0      	bne.n	8006a28 <HAL_RCC_OscConfig+0x10c>
 8006a46:	e000      	b.n	8006a4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d063      	beq.n	8006b1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a56:	4b4c      	ldr	r3, [pc, #304]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f003 030c 	and.w	r3, r3, #12
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00b      	beq.n	8006a7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006a62:	4b49      	ldr	r3, [pc, #292]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f003 030c 	and.w	r3, r3, #12
 8006a6a:	2b08      	cmp	r3, #8
 8006a6c:	d11c      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x18c>
 8006a6e:	4b46      	ldr	r3, [pc, #280]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d116      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a7a:	4b43      	ldr	r3, [pc, #268]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <HAL_RCC_OscConfig+0x176>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d001      	beq.n	8006a92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e1ba      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a92:	4b3d      	ldr	r3, [pc, #244]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	4939      	ldr	r1, [pc, #228]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aa6:	e03a      	b.n	8006b1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d020      	beq.n	8006af2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ab0:	4b36      	ldr	r3, [pc, #216]	; (8006b8c <HAL_RCC_OscConfig+0x270>)
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab6:	f7fd fa05 	bl	8003ec4 <HAL_GetTick>
 8006aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006abc:	e008      	b.n	8006ad0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006abe:	f7fd fa01 	bl	8003ec4 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e19b      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ad0:	4b2d      	ldr	r3, [pc, #180]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0f0      	beq.n	8006abe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006adc:	4b2a      	ldr	r3, [pc, #168]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	4927      	ldr	r1, [pc, #156]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	600b      	str	r3, [r1, #0]
 8006af0:	e015      	b.n	8006b1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006af2:	4b26      	ldr	r3, [pc, #152]	; (8006b8c <HAL_RCC_OscConfig+0x270>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006af8:	f7fd f9e4 	bl	8003ec4 <HAL_GetTick>
 8006afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006afe:	e008      	b.n	8006b12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b00:	f7fd f9e0 	bl	8003ec4 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e17a      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b12:	4b1d      	ldr	r3, [pc, #116]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1f0      	bne.n	8006b00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0308 	and.w	r3, r3, #8
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d03a      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d019      	beq.n	8006b66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b32:	4b17      	ldr	r3, [pc, #92]	; (8006b90 <HAL_RCC_OscConfig+0x274>)
 8006b34:	2201      	movs	r2, #1
 8006b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b38:	f7fd f9c4 	bl	8003ec4 <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b40:	f7fd f9c0 	bl	8003ec4 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e15a      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b52:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <HAL_RCC_OscConfig+0x26c>)
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0f0      	beq.n	8006b40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006b5e:	2001      	movs	r0, #1
 8006b60:	f000 fac4 	bl	80070ec <RCC_Delay>
 8006b64:	e01c      	b.n	8006ba0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b66:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <HAL_RCC_OscConfig+0x274>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b6c:	f7fd f9aa 	bl	8003ec4 <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b72:	e00f      	b.n	8006b94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b74:	f7fd f9a6 	bl	8003ec4 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d908      	bls.n	8006b94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e140      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
 8006b86:	bf00      	nop
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	42420000 	.word	0x42420000
 8006b90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b94:	4b9e      	ldr	r3, [pc, #632]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e9      	bne.n	8006b74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 80a6 	beq.w	8006cfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bb2:	4b97      	ldr	r3, [pc, #604]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10d      	bne.n	8006bda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bbe:	4b94      	ldr	r3, [pc, #592]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	4a93      	ldr	r2, [pc, #588]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc8:	61d3      	str	r3, [r2, #28]
 8006bca:	4b91      	ldr	r3, [pc, #580]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd2:	60bb      	str	r3, [r7, #8]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bda:	4b8e      	ldr	r3, [pc, #568]	; (8006e14 <HAL_RCC_OscConfig+0x4f8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d118      	bne.n	8006c18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006be6:	4b8b      	ldr	r3, [pc, #556]	; (8006e14 <HAL_RCC_OscConfig+0x4f8>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a8a      	ldr	r2, [pc, #552]	; (8006e14 <HAL_RCC_OscConfig+0x4f8>)
 8006bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bf2:	f7fd f967 	bl	8003ec4 <HAL_GetTick>
 8006bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bf8:	e008      	b.n	8006c0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bfa:	f7fd f963 	bl	8003ec4 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b64      	cmp	r3, #100	; 0x64
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e0fd      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c0c:	4b81      	ldr	r3, [pc, #516]	; (8006e14 <HAL_RCC_OscConfig+0x4f8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0f0      	beq.n	8006bfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d106      	bne.n	8006c2e <HAL_RCC_OscConfig+0x312>
 8006c20:	4b7b      	ldr	r3, [pc, #492]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	4a7a      	ldr	r2, [pc, #488]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006c26:	f043 0301 	orr.w	r3, r3, #1
 8006c2a:	6213      	str	r3, [r2, #32]
 8006c2c:	e02d      	b.n	8006c8a <HAL_RCC_OscConfig+0x36e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10c      	bne.n	8006c50 <HAL_RCC_OscConfig+0x334>
 8006c36:	4b76      	ldr	r3, [pc, #472]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	4a75      	ldr	r2, [pc, #468]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006c3c:	f023 0301 	bic.w	r3, r3, #1
 8006c40:	6213      	str	r3, [r2, #32]
 8006c42:	4b73      	ldr	r3, [pc, #460]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	4a72      	ldr	r2, [pc, #456]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006c48:	f023 0304 	bic.w	r3, r3, #4
 8006c4c:	6213      	str	r3, [r2, #32]
 8006c4e:	e01c      	b.n	8006c8a <HAL_RCC_OscConfig+0x36e>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	2b05      	cmp	r3, #5
 8006c56:	d10c      	bne.n	8006c72 <HAL_RCC_OscConfig+0x356>
 8006c58:	4b6d      	ldr	r3, [pc, #436]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	4a6c      	ldr	r2, [pc, #432]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006c5e:	f043 0304 	orr.w	r3, r3, #4
 8006c62:	6213      	str	r3, [r2, #32]
 8006c64:	4b6a      	ldr	r3, [pc, #424]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	4a69      	ldr	r2, [pc, #420]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006c6a:	f043 0301 	orr.w	r3, r3, #1
 8006c6e:	6213      	str	r3, [r2, #32]
 8006c70:	e00b      	b.n	8006c8a <HAL_RCC_OscConfig+0x36e>
 8006c72:	4b67      	ldr	r3, [pc, #412]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	4a66      	ldr	r2, [pc, #408]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006c78:	f023 0301 	bic.w	r3, r3, #1
 8006c7c:	6213      	str	r3, [r2, #32]
 8006c7e:	4b64      	ldr	r3, [pc, #400]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	4a63      	ldr	r2, [pc, #396]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006c84:	f023 0304 	bic.w	r3, r3, #4
 8006c88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d015      	beq.n	8006cbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c92:	f7fd f917 	bl	8003ec4 <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c98:	e00a      	b.n	8006cb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c9a:	f7fd f913 	bl	8003ec4 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e0ab      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb0:	4b57      	ldr	r3, [pc, #348]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0ee      	beq.n	8006c9a <HAL_RCC_OscConfig+0x37e>
 8006cbc:	e014      	b.n	8006ce8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cbe:	f7fd f901 	bl	8003ec4 <HAL_GetTick>
 8006cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cc4:	e00a      	b.n	8006cdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cc6:	f7fd f8fd 	bl	8003ec4 <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e095      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cdc:	4b4c      	ldr	r3, [pc, #304]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1ee      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d105      	bne.n	8006cfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cee:	4b48      	ldr	r3, [pc, #288]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	4a47      	ldr	r2, [pc, #284]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 8081 	beq.w	8006e06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d04:	4b42      	ldr	r3, [pc, #264]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f003 030c 	and.w	r3, r3, #12
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d061      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d146      	bne.n	8006da6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d18:	4b3f      	ldr	r3, [pc, #252]	; (8006e18 <HAL_RCC_OscConfig+0x4fc>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1e:	f7fd f8d1 	bl	8003ec4 <HAL_GetTick>
 8006d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d24:	e008      	b.n	8006d38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d26:	f7fd f8cd 	bl	8003ec4 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d901      	bls.n	8006d38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e067      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d38:	4b35      	ldr	r3, [pc, #212]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1f0      	bne.n	8006d26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d4c:	d108      	bne.n	8006d60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006d4e:	4b30      	ldr	r3, [pc, #192]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	492d      	ldr	r1, [pc, #180]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d60:	4b2b      	ldr	r3, [pc, #172]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a19      	ldr	r1, [r3, #32]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	430b      	orrs	r3, r1
 8006d72:	4927      	ldr	r1, [pc, #156]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d78:	4b27      	ldr	r3, [pc, #156]	; (8006e18 <HAL_RCC_OscConfig+0x4fc>)
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d7e:	f7fd f8a1 	bl	8003ec4 <HAL_GetTick>
 8006d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d84:	e008      	b.n	8006d98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d86:	f7fd f89d 	bl	8003ec4 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e037      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d98:	4b1d      	ldr	r3, [pc, #116]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0f0      	beq.n	8006d86 <HAL_RCC_OscConfig+0x46a>
 8006da4:	e02f      	b.n	8006e06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da6:	4b1c      	ldr	r3, [pc, #112]	; (8006e18 <HAL_RCC_OscConfig+0x4fc>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dac:	f7fd f88a 	bl	8003ec4 <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006db2:	e008      	b.n	8006dc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db4:	f7fd f886 	bl	8003ec4 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e020      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dc6:	4b12      	ldr	r3, [pc, #72]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f0      	bne.n	8006db4 <HAL_RCC_OscConfig+0x498>
 8006dd2:	e018      	b.n	8006e06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e013      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <HAL_RCC_OscConfig+0x4f4>)
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d106      	bne.n	8006e02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d001      	beq.n	8006e06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e000      	b.n	8006e08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	40021000 	.word	0x40021000
 8006e14:	40007000 	.word	0x40007000
 8006e18:	42420060 	.word	0x42420060

08006e1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e0d0      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e30:	4b6a      	ldr	r3, [pc, #424]	; (8006fdc <HAL_RCC_ClockConfig+0x1c0>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d910      	bls.n	8006e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e3e:	4b67      	ldr	r3, [pc, #412]	; (8006fdc <HAL_RCC_ClockConfig+0x1c0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f023 0207 	bic.w	r2, r3, #7
 8006e46:	4965      	ldr	r1, [pc, #404]	; (8006fdc <HAL_RCC_ClockConfig+0x1c0>)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e4e:	4b63      	ldr	r3, [pc, #396]	; (8006fdc <HAL_RCC_ClockConfig+0x1c0>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d001      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e0b8      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d020      	beq.n	8006eae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e78:	4b59      	ldr	r3, [pc, #356]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	4a58      	ldr	r2, [pc, #352]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e90:	4b53      	ldr	r3, [pc, #332]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	4a52      	ldr	r2, [pc, #328]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006e9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e9c:	4b50      	ldr	r3, [pc, #320]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	494d      	ldr	r1, [pc, #308]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d040      	beq.n	8006f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d107      	bne.n	8006ed2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ec2:	4b47      	ldr	r3, [pc, #284]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d115      	bne.n	8006efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e07f      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d107      	bne.n	8006eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eda:	4b41      	ldr	r3, [pc, #260]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d109      	bne.n	8006efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e073      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eea:	4b3d      	ldr	r3, [pc, #244]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e06b      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006efa:	4b39      	ldr	r3, [pc, #228]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f023 0203 	bic.w	r2, r3, #3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	4936      	ldr	r1, [pc, #216]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f0c:	f7fc ffda 	bl	8003ec4 <HAL_GetTick>
 8006f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f12:	e00a      	b.n	8006f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f14:	f7fc ffd6 	bl	8003ec4 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e053      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f2a:	4b2d      	ldr	r3, [pc, #180]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f003 020c 	and.w	r2, r3, #12
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d1eb      	bne.n	8006f14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f3c:	4b27      	ldr	r3, [pc, #156]	; (8006fdc <HAL_RCC_ClockConfig+0x1c0>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d210      	bcs.n	8006f6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f4a:	4b24      	ldr	r3, [pc, #144]	; (8006fdc <HAL_RCC_ClockConfig+0x1c0>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f023 0207 	bic.w	r2, r3, #7
 8006f52:	4922      	ldr	r1, [pc, #136]	; (8006fdc <HAL_RCC_ClockConfig+0x1c0>)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f5a:	4b20      	ldr	r3, [pc, #128]	; (8006fdc <HAL_RCC_ClockConfig+0x1c0>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d001      	beq.n	8006f6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e032      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d008      	beq.n	8006f8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f78:	4b19      	ldr	r3, [pc, #100]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	4916      	ldr	r1, [pc, #88]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d009      	beq.n	8006faa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f96:	4b12      	ldr	r3, [pc, #72]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	490e      	ldr	r1, [pc, #56]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006faa:	f000 f821 	bl	8006ff0 <HAL_RCC_GetSysClockFreq>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	091b      	lsrs	r3, r3, #4
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	490a      	ldr	r1, [pc, #40]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8006fbc:	5ccb      	ldrb	r3, [r1, r3]
 8006fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc2:	4a09      	ldr	r2, [pc, #36]	; (8006fe8 <HAL_RCC_ClockConfig+0x1cc>)
 8006fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006fc6:	4b09      	ldr	r3, [pc, #36]	; (8006fec <HAL_RCC_ClockConfig+0x1d0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fc ff38 	bl	8003e40 <HAL_InitTick>

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	40022000 	.word	0x40022000
 8006fe0:	40021000 	.word	0x40021000
 8006fe4:	0800dafc 	.word	0x0800dafc
 8006fe8:	20000014 	.word	0x20000014
 8006fec:	20000018 	.word	0x20000018

08006ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ff0:	b490      	push	{r4, r7}
 8006ff2:	b08a      	sub	sp, #40	; 0x28
 8006ff4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006ff6:	4b2a      	ldr	r3, [pc, #168]	; (80070a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006ff8:	1d3c      	adds	r4, r7, #4
 8006ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007000:	f240 2301 	movw	r3, #513	; 0x201
 8007004:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	61fb      	str	r3, [r7, #28]
 800700a:	2300      	movs	r3, #0
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	2300      	movs	r3, #0
 8007010:	627b      	str	r3, [r7, #36]	; 0x24
 8007012:	2300      	movs	r3, #0
 8007014:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800701a:	4b22      	ldr	r3, [pc, #136]	; (80070a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	f003 030c 	and.w	r3, r3, #12
 8007026:	2b04      	cmp	r3, #4
 8007028:	d002      	beq.n	8007030 <HAL_RCC_GetSysClockFreq+0x40>
 800702a:	2b08      	cmp	r3, #8
 800702c:	d003      	beq.n	8007036 <HAL_RCC_GetSysClockFreq+0x46>
 800702e:	e02d      	b.n	800708c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007030:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007032:	623b      	str	r3, [r7, #32]
      break;
 8007034:	e02d      	b.n	8007092 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	0c9b      	lsrs	r3, r3, #18
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007042:	4413      	add	r3, r2
 8007044:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007048:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d013      	beq.n	800707c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007054:	4b13      	ldr	r3, [pc, #76]	; (80070a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	0c5b      	lsrs	r3, r3, #17
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007062:	4413      	add	r3, r2
 8007064:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007068:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	4a0e      	ldr	r2, [pc, #56]	; (80070a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800706e:	fb02 f203 	mul.w	r2, r2, r3
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	fbb2 f3f3 	udiv	r3, r2, r3
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
 800707a:	e004      	b.n	8007086 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	4a0b      	ldr	r2, [pc, #44]	; (80070ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8007080:	fb02 f303 	mul.w	r3, r2, r3
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	623b      	str	r3, [r7, #32]
      break;
 800708a:	e002      	b.n	8007092 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800708c:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800708e:	623b      	str	r3, [r7, #32]
      break;
 8007090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007092:	6a3b      	ldr	r3, [r7, #32]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3728      	adds	r7, #40	; 0x28
 8007098:	46bd      	mov	sp, r7
 800709a:	bc90      	pop	{r4, r7}
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	0800da94 	.word	0x0800da94
 80070a4:	40021000 	.word	0x40021000
 80070a8:	007a1200 	.word	0x007a1200
 80070ac:	003d0900 	.word	0x003d0900

080070b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070b4:	4b02      	ldr	r3, [pc, #8]	; (80070c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80070b6:	681b      	ldr	r3, [r3, #0]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bc80      	pop	{r7}
 80070be:	4770      	bx	lr
 80070c0:	20000014 	.word	0x20000014

080070c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070c8:	f7ff fff2 	bl	80070b0 <HAL_RCC_GetHCLKFreq>
 80070cc:	4602      	mov	r2, r0
 80070ce:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	0adb      	lsrs	r3, r3, #11
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	4903      	ldr	r1, [pc, #12]	; (80070e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070da:	5ccb      	ldrb	r3, [r1, r3]
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40021000 	.word	0x40021000
 80070e8:	0800db0c 	.word	0x0800db0c

080070ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80070f4:	4b0a      	ldr	r3, [pc, #40]	; (8007120 <RCC_Delay+0x34>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a0a      	ldr	r2, [pc, #40]	; (8007124 <RCC_Delay+0x38>)
 80070fa:	fba2 2303 	umull	r2, r3, r2, r3
 80070fe:	0a5b      	lsrs	r3, r3, #9
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	fb02 f303 	mul.w	r3, r2, r3
 8007106:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007108:	bf00      	nop
  }
  while (Delay --);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1e5a      	subs	r2, r3, #1
 800710e:	60fa      	str	r2, [r7, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1f9      	bne.n	8007108 <RCC_Delay+0x1c>
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr
 8007120:	20000014 	.word	0x20000014
 8007124:	10624dd3 	.word	0x10624dd3

08007128 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	613b      	str	r3, [r7, #16]
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d07d      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007144:	2300      	movs	r3, #0
 8007146:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007148:	4b4f      	ldr	r3, [pc, #316]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10d      	bne.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007154:	4b4c      	ldr	r3, [pc, #304]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	4a4b      	ldr	r2, [pc, #300]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800715a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800715e:	61d3      	str	r3, [r2, #28]
 8007160:	4b49      	ldr	r3, [pc, #292]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007168:	60bb      	str	r3, [r7, #8]
 800716a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800716c:	2301      	movs	r3, #1
 800716e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007170:	4b46      	ldr	r3, [pc, #280]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007178:	2b00      	cmp	r3, #0
 800717a:	d118      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800717c:	4b43      	ldr	r3, [pc, #268]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a42      	ldr	r2, [pc, #264]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007186:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007188:	f7fc fe9c 	bl	8003ec4 <HAL_GetTick>
 800718c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800718e:	e008      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007190:	f7fc fe98 	bl	8003ec4 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	2b64      	cmp	r3, #100	; 0x64
 800719c:	d901      	bls.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e06d      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071a2:	4b3a      	ldr	r3, [pc, #232]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0f0      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071ae:	4b36      	ldr	r3, [pc, #216]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d02e      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d027      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071cc:	4b2e      	ldr	r3, [pc, #184]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071d6:	4b2e      	ldr	r3, [pc, #184]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80071d8:	2201      	movs	r2, #1
 80071da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071dc:	4b2c      	ldr	r3, [pc, #176]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80071de:	2200      	movs	r2, #0
 80071e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80071e2:	4a29      	ldr	r2, [pc, #164]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d014      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f2:	f7fc fe67 	bl	8003ec4 <HAL_GetTick>
 80071f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071f8:	e00a      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071fa:	f7fc fe63 	bl	8003ec4 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	f241 3288 	movw	r2, #5000	; 0x1388
 8007208:	4293      	cmp	r3, r2
 800720a:	d901      	bls.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e036      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007210:	4b1d      	ldr	r3, [pc, #116]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0ee      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800721c:	4b1a      	ldr	r3, [pc, #104]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	4917      	ldr	r1, [pc, #92]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800722a:	4313      	orrs	r3, r2
 800722c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d105      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007234:	4b14      	ldr	r3, [pc, #80]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	4a13      	ldr	r2, [pc, #76]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800723a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800723e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d008      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800724c:	4b0e      	ldr	r3, [pc, #56]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	490b      	ldr	r1, [pc, #44]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800725a:	4313      	orrs	r3, r2
 800725c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0310 	and.w	r3, r3, #16
 8007266:	2b00      	cmp	r3, #0
 8007268:	d008      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800726a:	4b07      	ldr	r3, [pc, #28]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	4904      	ldr	r1, [pc, #16]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007278:	4313      	orrs	r3, r2
 800727a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	40021000 	.word	0x40021000
 800728c:	40007000 	.word	0x40007000
 8007290:	42420440 	.word	0x42420440

08007294 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007294:	b590      	push	{r4, r7, lr}
 8007296:	b08d      	sub	sp, #52	; 0x34
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800729c:	4b5a      	ldr	r3, [pc, #360]	; (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800729e:	f107 040c 	add.w	r4, r7, #12
 80072a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80072a8:	f240 2301 	movw	r3, #513	; 0x201
 80072ac:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24
 80072b2:	2300      	movs	r3, #0
 80072b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072b6:	2300      	movs	r3, #0
 80072b8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	61fb      	str	r3, [r7, #28]
 80072be:	2300      	movs	r3, #0
 80072c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b10      	cmp	r3, #16
 80072c6:	d00a      	beq.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b10      	cmp	r3, #16
 80072cc:	f200 8091 	bhi.w	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d04c      	beq.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d07c      	beq.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80072dc:	e089      	b.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80072de:	4b4b      	ldr	r3, [pc, #300]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80072e4:	4b49      	ldr	r3, [pc, #292]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 8082 	beq.w	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	0c9b      	lsrs	r3, r3, #18
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80072fe:	4413      	add	r3, r2
 8007300:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007304:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d018      	beq.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007310:	4b3e      	ldr	r3, [pc, #248]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	0c5b      	lsrs	r3, r3, #17
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800731e:	4413      	add	r3, r2
 8007320:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00d      	beq.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007330:	4a37      	ldr	r2, [pc, #220]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	fbb2 f2f3 	udiv	r2, r2, r3
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	fb02 f303 	mul.w	r3, r2, r3
 800733e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007340:	e004      	b.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	4a33      	ldr	r2, [pc, #204]	; (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8007346:	fb02 f303 	mul.w	r3, r2, r3
 800734a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800734c:	4b2f      	ldr	r3, [pc, #188]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007358:	d102      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800735e:	e04a      	b.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	4a2c      	ldr	r2, [pc, #176]	; (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8007366:	fba2 2303 	umull	r2, r3, r2, r3
 800736a:	085b      	lsrs	r3, r3, #1
 800736c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800736e:	e042      	b.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8007370:	4b26      	ldr	r3, [pc, #152]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800737c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007380:	d108      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800738c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007390:	62bb      	str	r3, [r7, #40]	; 0x28
 8007392:	e01f      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800739a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800739e:	d109      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80073a0:	4b1a      	ldr	r3, [pc, #104]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80073ac:	f649 4340 	movw	r3, #40000	; 0x9c40
 80073b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80073b2:	e00f      	b.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073be:	d11c      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80073c0:	4b12      	ldr	r3, [pc, #72]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d016      	beq.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80073cc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80073d2:	e012      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80073d4:	e011      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80073d6:	f7ff fe75 	bl	80070c4 <HAL_RCC_GetPCLK2Freq>
 80073da:	4602      	mov	r2, r0
 80073dc:	4b0b      	ldr	r3, [pc, #44]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	0b9b      	lsrs	r3, r3, #14
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	3301      	adds	r3, #1
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80073f0:	e004      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80073f2:	bf00      	nop
 80073f4:	e002      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80073f6:	bf00      	nop
 80073f8:	e000      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80073fa:	bf00      	nop
    }
  }
  return (frequency);
 80073fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3734      	adds	r7, #52	; 0x34
 8007402:	46bd      	mov	sp, r7
 8007404:	bd90      	pop	{r4, r7, pc}
 8007406:	bf00      	nop
 8007408:	0800daa4 	.word	0x0800daa4
 800740c:	40021000 	.word	0x40021000
 8007410:	007a1200 	.word	0x007a1200
 8007414:	003d0900 	.word	0x003d0900
 8007418:	aaaaaaab 	.word	0xaaaaaaab

0800741c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e076      	b.n	800751c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	2b00      	cmp	r3, #0
 8007434:	d108      	bne.n	8007448 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800743e:	d009      	beq.n	8007454 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	61da      	str	r2, [r3, #28]
 8007446:	e005      	b.n	8007454 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d106      	bne.n	8007474 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7fc facc 	bl	8003a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800748a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800749c:	431a      	orrs	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	431a      	orrs	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	431a      	orrs	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074c4:	431a      	orrs	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074ce:	431a      	orrs	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d8:	ea42 0103 	orr.w	r1, r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	0c1a      	lsrs	r2, r3, #16
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f002 0204 	and.w	r2, r2, #4
 80074fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	69da      	ldr	r2, [r3, #28]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800750a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	4613      	mov	r3, r2
 8007532:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800753e:	2b01      	cmp	r3, #1
 8007540:	d101      	bne.n	8007546 <HAL_SPI_Transmit+0x22>
 8007542:	2302      	movs	r3, #2
 8007544:	e126      	b.n	8007794 <HAL_SPI_Transmit+0x270>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800754e:	f7fc fcb9 	bl	8003ec4 <HAL_GetTick>
 8007552:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007554:	88fb      	ldrh	r3, [r7, #6]
 8007556:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b01      	cmp	r3, #1
 8007562:	d002      	beq.n	800756a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007564:	2302      	movs	r3, #2
 8007566:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007568:	e10b      	b.n	8007782 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <HAL_SPI_Transmit+0x52>
 8007570:	88fb      	ldrh	r3, [r7, #6]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d102      	bne.n	800757c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	77fb      	strb	r3, [r7, #31]
    goto error;
 800757a:	e102      	b.n	8007782 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2203      	movs	r2, #3
 8007580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	88fa      	ldrh	r2, [r7, #6]
 8007594:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	88fa      	ldrh	r2, [r7, #6]
 800759a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c2:	d10f      	bne.n	80075e4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ee:	2b40      	cmp	r3, #64	; 0x40
 80075f0:	d007      	beq.n	8007602 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007600:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800760a:	d14b      	bne.n	80076a4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <HAL_SPI_Transmit+0xf6>
 8007614:	8afb      	ldrh	r3, [r7, #22]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d13e      	bne.n	8007698 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	881a      	ldrh	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762a:	1c9a      	adds	r2, r3, #2
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800763e:	e02b      	b.n	8007698 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b02      	cmp	r3, #2
 800764c:	d112      	bne.n	8007674 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	881a      	ldrh	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765e:	1c9a      	adds	r2, r3, #2
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b29a      	uxth	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	86da      	strh	r2, [r3, #54]	; 0x36
 8007672:	e011      	b.n	8007698 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007674:	f7fc fc26 	bl	8003ec4 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	429a      	cmp	r2, r3
 8007682:	d803      	bhi.n	800768c <HAL_SPI_Transmit+0x168>
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768a:	d102      	bne.n	8007692 <HAL_SPI_Transmit+0x16e>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d102      	bne.n	8007698 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007696:	e074      	b.n	8007782 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1ce      	bne.n	8007640 <HAL_SPI_Transmit+0x11c>
 80076a2:	e04c      	b.n	800773e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <HAL_SPI_Transmit+0x18e>
 80076ac:	8afb      	ldrh	r3, [r7, #22]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d140      	bne.n	8007734 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	330c      	adds	r3, #12
 80076bc:	7812      	ldrb	r2, [r2, #0]
 80076be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	3b01      	subs	r3, #1
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076d8:	e02c      	b.n	8007734 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d113      	bne.n	8007710 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	330c      	adds	r3, #12
 80076f2:	7812      	ldrb	r2, [r2, #0]
 80076f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007704:	b29b      	uxth	r3, r3
 8007706:	3b01      	subs	r3, #1
 8007708:	b29a      	uxth	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	86da      	strh	r2, [r3, #54]	; 0x36
 800770e:	e011      	b.n	8007734 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007710:	f7fc fbd8 	bl	8003ec4 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	429a      	cmp	r2, r3
 800771e:	d803      	bhi.n	8007728 <HAL_SPI_Transmit+0x204>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007726:	d102      	bne.n	800772e <HAL_SPI_Transmit+0x20a>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d102      	bne.n	8007734 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007732:	e026      	b.n	8007782 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1cd      	bne.n	80076da <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f8b2 	bl	80078ac <SPI_EndRxTxTransaction>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2220      	movs	r2, #32
 8007752:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800775c:	2300      	movs	r3, #0
 800775e:	613b      	str	r3, [r7, #16]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	613b      	str	r3, [r7, #16]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	613b      	str	r3, [r7, #16]
 8007770:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	77fb      	strb	r3, [r7, #31]
 800777e:	e000      	b.n	8007782 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007780:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007792:	7ffb      	ldrb	r3, [r7, #31]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3720      	adds	r7, #32
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	4613      	mov	r3, r2
 80077aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80077ac:	f7fc fb8a 	bl	8003ec4 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b4:	1a9b      	subs	r3, r3, r2
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	4413      	add	r3, r2
 80077ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077bc:	f7fc fb82 	bl	8003ec4 <HAL_GetTick>
 80077c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077c2:	4b39      	ldr	r3, [pc, #228]	; (80078a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	015b      	lsls	r3, r3, #5
 80077c8:	0d1b      	lsrs	r3, r3, #20
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	fb02 f303 	mul.w	r3, r2, r3
 80077d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077d2:	e054      	b.n	800787e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077da:	d050      	beq.n	800787e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077dc:	f7fc fb72 	bl	8003ec4 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d902      	bls.n	80077f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d13d      	bne.n	800786e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800780a:	d111      	bne.n	8007830 <SPI_WaitFlagStateUntilTimeout+0x94>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007814:	d004      	beq.n	8007820 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800781e:	d107      	bne.n	8007830 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800782e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007838:	d10f      	bne.n	800785a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e017      	b.n	800789e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	3b01      	subs	r3, #1
 800787c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4013      	ands	r3, r2
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	429a      	cmp	r2, r3
 800788c:	bf0c      	ite	eq
 800788e:	2301      	moveq	r3, #1
 8007890:	2300      	movne	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	461a      	mov	r2, r3
 8007896:	79fb      	ldrb	r3, [r7, #7]
 8007898:	429a      	cmp	r2, r3
 800789a:	d19b      	bne.n	80077d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3720      	adds	r7, #32
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20000014 	.word	0x20000014

080078ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2200      	movs	r2, #0
 80078c0:	2180      	movs	r1, #128	; 0x80
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f7ff ff6a 	bl	800779c <SPI_WaitFlagStateUntilTimeout>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	f043 0220 	orr.w	r2, r3, #32
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e000      	b.n	80078e0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e041      	b.n	800797e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fc f8ba 	bl	8003a88 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3304      	adds	r3, #4
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	f000 fb38 	bl	8007f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d104      	bne.n	80079a2 <HAL_TIM_IC_Start_IT+0x1a>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	e013      	b.n	80079ca <HAL_TIM_IC_Start_IT+0x42>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b04      	cmp	r3, #4
 80079a6:	d104      	bne.n	80079b2 <HAL_TIM_IC_Start_IT+0x2a>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	e00b      	b.n	80079ca <HAL_TIM_IC_Start_IT+0x42>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b08      	cmp	r3, #8
 80079b6:	d104      	bne.n	80079c2 <HAL_TIM_IC_Start_IT+0x3a>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	e003      	b.n	80079ca <HAL_TIM_IC_Start_IT+0x42>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d104      	bne.n	80079dc <HAL_TIM_IC_Start_IT+0x54>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	e013      	b.n	8007a04 <HAL_TIM_IC_Start_IT+0x7c>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d104      	bne.n	80079ec <HAL_TIM_IC_Start_IT+0x64>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	e00b      	b.n	8007a04 <HAL_TIM_IC_Start_IT+0x7c>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d104      	bne.n	80079fc <HAL_TIM_IC_Start_IT+0x74>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	e003      	b.n	8007a04 <HAL_TIM_IC_Start_IT+0x7c>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d102      	bne.n	8007a12 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d001      	beq.n	8007a16 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e0b3      	b.n	8007b7e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d104      	bne.n	8007a26 <HAL_TIM_IC_Start_IT+0x9e>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a24:	e013      	b.n	8007a4e <HAL_TIM_IC_Start_IT+0xc6>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b04      	cmp	r3, #4
 8007a2a:	d104      	bne.n	8007a36 <HAL_TIM_IC_Start_IT+0xae>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a34:	e00b      	b.n	8007a4e <HAL_TIM_IC_Start_IT+0xc6>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d104      	bne.n	8007a46 <HAL_TIM_IC_Start_IT+0xbe>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a44:	e003      	b.n	8007a4e <HAL_TIM_IC_Start_IT+0xc6>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d104      	bne.n	8007a5e <HAL_TIM_IC_Start_IT+0xd6>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a5c:	e013      	b.n	8007a86 <HAL_TIM_IC_Start_IT+0xfe>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d104      	bne.n	8007a6e <HAL_TIM_IC_Start_IT+0xe6>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a6c:	e00b      	b.n	8007a86 <HAL_TIM_IC_Start_IT+0xfe>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	d104      	bne.n	8007a7e <HAL_TIM_IC_Start_IT+0xf6>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a7c:	e003      	b.n	8007a86 <HAL_TIM_IC_Start_IT+0xfe>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2202      	movs	r2, #2
 8007a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b0c      	cmp	r3, #12
 8007a8a:	d841      	bhi.n	8007b10 <HAL_TIM_IC_Start_IT+0x188>
 8007a8c:	a201      	add	r2, pc, #4	; (adr r2, 8007a94 <HAL_TIM_IC_Start_IT+0x10c>)
 8007a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a92:	bf00      	nop
 8007a94:	08007ac9 	.word	0x08007ac9
 8007a98:	08007b11 	.word	0x08007b11
 8007a9c:	08007b11 	.word	0x08007b11
 8007aa0:	08007b11 	.word	0x08007b11
 8007aa4:	08007adb 	.word	0x08007adb
 8007aa8:	08007b11 	.word	0x08007b11
 8007aac:	08007b11 	.word	0x08007b11
 8007ab0:	08007b11 	.word	0x08007b11
 8007ab4:	08007aed 	.word	0x08007aed
 8007ab8:	08007b11 	.word	0x08007b11
 8007abc:	08007b11 	.word	0x08007b11
 8007ac0:	08007b11 	.word	0x08007b11
 8007ac4:	08007aff 	.word	0x08007aff
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0202 	orr.w	r2, r2, #2
 8007ad6:	60da      	str	r2, [r3, #12]
      break;
 8007ad8:	e01b      	b.n	8007b12 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68da      	ldr	r2, [r3, #12]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0204 	orr.w	r2, r2, #4
 8007ae8:	60da      	str	r2, [r3, #12]
      break;
 8007aea:	e012      	b.n	8007b12 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0208 	orr.w	r2, r2, #8
 8007afa:	60da      	str	r2, [r3, #12]
      break;
 8007afc:	e009      	b.n	8007b12 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f042 0210 	orr.w	r2, r2, #16
 8007b0c:	60da      	str	r2, [r3, #12]
      break;
 8007b0e:	e000      	b.n	8007b12 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8007b10:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2201      	movs	r2, #1
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 fbad 	bl	800827a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a18      	ldr	r2, [pc, #96]	; (8007b88 <HAL_TIM_IC_Start_IT+0x200>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d00e      	beq.n	8007b48 <HAL_TIM_IC_Start_IT+0x1c0>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b32:	d009      	beq.n	8007b48 <HAL_TIM_IC_Start_IT+0x1c0>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a14      	ldr	r2, [pc, #80]	; (8007b8c <HAL_TIM_IC_Start_IT+0x204>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d004      	beq.n	8007b48 <HAL_TIM_IC_Start_IT+0x1c0>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a13      	ldr	r2, [pc, #76]	; (8007b90 <HAL_TIM_IC_Start_IT+0x208>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d111      	bne.n	8007b6c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f003 0307 	and.w	r3, r3, #7
 8007b52:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2b06      	cmp	r3, #6
 8007b58:	d010      	beq.n	8007b7c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f042 0201 	orr.w	r2, r2, #1
 8007b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b6a:	e007      	b.n	8007b7c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	40012c00 	.word	0x40012c00
 8007b8c:	40000400 	.word	0x40000400
 8007b90:	40000800 	.word	0x40000800

08007b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f003 0302 	and.w	r3, r3, #2
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d122      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d11b      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f06f 0202 	mvn.w	r2, #2
 8007bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7fa fcd4 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8007bdc:	e005      	b.n	8007bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f9c1 	bl	8007f66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f9c7 	bl	8007f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0304 	and.w	r3, r3, #4
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d122      	bne.n	8007c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d11b      	bne.n	8007c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f06f 0204 	mvn.w	r2, #4
 8007c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2202      	movs	r2, #2
 8007c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7fa fcaa 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8007c30:	e005      	b.n	8007c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f997 	bl	8007f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f99d 	bl	8007f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0308 	and.w	r3, r3, #8
 8007c4e:	2b08      	cmp	r3, #8
 8007c50:	d122      	bne.n	8007c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f003 0308 	and.w	r3, r3, #8
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d11b      	bne.n	8007c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f06f 0208 	mvn.w	r2, #8
 8007c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2204      	movs	r2, #4
 8007c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7fa fc80 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8007c84:	e005      	b.n	8007c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f96d 	bl	8007f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f973 	bl	8007f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f003 0310 	and.w	r3, r3, #16
 8007ca2:	2b10      	cmp	r3, #16
 8007ca4:	d122      	bne.n	8007cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f003 0310 	and.w	r3, r3, #16
 8007cb0:	2b10      	cmp	r3, #16
 8007cb2:	d11b      	bne.n	8007cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f06f 0210 	mvn.w	r2, #16
 8007cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7fa fc56 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8007cd8:	e005      	b.n	8007ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f943 	bl	8007f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f949 	bl	8007f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d10e      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d107      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0201 	mvn.w	r2, #1
 8007d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f91e 	bl	8007f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d22:	2b80      	cmp	r3, #128	; 0x80
 8007d24:	d10e      	bne.n	8007d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d30:	2b80      	cmp	r3, #128	; 0x80
 8007d32:	d107      	bne.n	8007d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fb27 	bl	8008392 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4e:	2b40      	cmp	r3, #64	; 0x40
 8007d50:	d10e      	bne.n	8007d70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5c:	2b40      	cmp	r3, #64	; 0x40
 8007d5e:	d107      	bne.n	8007d70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f90d 	bl	8007f8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	f003 0320 	and.w	r3, r3, #32
 8007d7a:	2b20      	cmp	r3, #32
 8007d7c:	d10e      	bne.n	8007d9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	f003 0320 	and.w	r3, r3, #32
 8007d88:	2b20      	cmp	r3, #32
 8007d8a:	d107      	bne.n	8007d9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f06f 0220 	mvn.w	r2, #32
 8007d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 faf2 	bl	8008380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d101      	bne.n	8007dbe <HAL_TIM_IC_ConfigChannel+0x1a>
 8007dba:	2302      	movs	r3, #2
 8007dbc:	e082      	b.n	8007ec4 <HAL_TIM_IC_ConfigChannel+0x120>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d11b      	bne.n	8007e04 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6818      	ldr	r0, [r3, #0]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	6819      	ldr	r1, [r3, #0]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f000 f940 	bl	8008060 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	699a      	ldr	r2, [r3, #24]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 020c 	bic.w	r2, r2, #12
 8007dee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6999      	ldr	r1, [r3, #24]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	689a      	ldr	r2, [r3, #8]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	619a      	str	r2, [r3, #24]
 8007e02:	e05a      	b.n	8007eba <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	d11c      	bne.n	8007e44 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	6819      	ldr	r1, [r3, #0]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f000 f97b 	bl	8008114 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	699a      	ldr	r2, [r3, #24]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6999      	ldr	r1, [r3, #24]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	021a      	lsls	r2, r3, #8
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	619a      	str	r2, [r3, #24]
 8007e42:	e03a      	b.n	8007eba <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b08      	cmp	r3, #8
 8007e48:	d11b      	bne.n	8007e82 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	6819      	ldr	r1, [r3, #0]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f000 f997 	bl	800818c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	69da      	ldr	r2, [r3, #28]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 020c 	bic.w	r2, r2, #12
 8007e6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69d9      	ldr	r1, [r3, #28]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	61da      	str	r2, [r3, #28]
 8007e80:	e01b      	b.n	8007eba <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	6819      	ldr	r1, [r3, #0]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f000 f9b6 	bl	8008202 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	69da      	ldr	r2, [r3, #28]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ea4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	69d9      	ldr	r1, [r3, #28]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	021a      	lsls	r2, r3, #8
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b0c      	cmp	r3, #12
 8007ede:	d831      	bhi.n	8007f44 <HAL_TIM_ReadCapturedValue+0x78>
 8007ee0:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee6:	bf00      	nop
 8007ee8:	08007f1d 	.word	0x08007f1d
 8007eec:	08007f45 	.word	0x08007f45
 8007ef0:	08007f45 	.word	0x08007f45
 8007ef4:	08007f45 	.word	0x08007f45
 8007ef8:	08007f27 	.word	0x08007f27
 8007efc:	08007f45 	.word	0x08007f45
 8007f00:	08007f45 	.word	0x08007f45
 8007f04:	08007f45 	.word	0x08007f45
 8007f08:	08007f31 	.word	0x08007f31
 8007f0c:	08007f45 	.word	0x08007f45
 8007f10:	08007f45 	.word	0x08007f45
 8007f14:	08007f45 	.word	0x08007f45
 8007f18:	08007f3b 	.word	0x08007f3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f22:	60fb      	str	r3, [r7, #12]

      break;
 8007f24:	e00f      	b.n	8007f46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2c:	60fb      	str	r3, [r7, #12]

      break;
 8007f2e:	e00a      	b.n	8007f46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f36:	60fb      	str	r3, [r7, #12]

      break;
 8007f38:	e005      	b.n	8007f46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f40:	60fb      	str	r3, [r7, #12]

      break;
 8007f42:	e000      	b.n	8007f46 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007f44:	bf00      	nop
  }

  return tmpreg;
 8007f46:	68fb      	ldr	r3, [r7, #12]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bc80      	pop	{r7}
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop

08007f54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bc80      	pop	{r7}
 8007f64:	4770      	bx	lr

08007f66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f6e:	bf00      	nop
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bc80      	pop	{r7}
 8007f76:	4770      	bx	lr

08007f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bc80      	pop	{r7}
 8007f88:	4770      	bx	lr

08007f8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bc80      	pop	{r7}
 8007f9a:	4770      	bx	lr

08007f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a29      	ldr	r2, [pc, #164]	; (8008054 <TIM_Base_SetConfig+0xb8>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00b      	beq.n	8007fcc <TIM_Base_SetConfig+0x30>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fba:	d007      	beq.n	8007fcc <TIM_Base_SetConfig+0x30>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a26      	ldr	r2, [pc, #152]	; (8008058 <TIM_Base_SetConfig+0xbc>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d003      	beq.n	8007fcc <TIM_Base_SetConfig+0x30>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a25      	ldr	r2, [pc, #148]	; (800805c <TIM_Base_SetConfig+0xc0>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d108      	bne.n	8007fde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a1c      	ldr	r2, [pc, #112]	; (8008054 <TIM_Base_SetConfig+0xb8>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00b      	beq.n	8007ffe <TIM_Base_SetConfig+0x62>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fec:	d007      	beq.n	8007ffe <TIM_Base_SetConfig+0x62>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a19      	ldr	r2, [pc, #100]	; (8008058 <TIM_Base_SetConfig+0xbc>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_Base_SetConfig+0x62>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a18      	ldr	r2, [pc, #96]	; (800805c <TIM_Base_SetConfig+0xc0>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d108      	bne.n	8008010 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a07      	ldr	r2, [pc, #28]	; (8008054 <TIM_Base_SetConfig+0xb8>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d103      	bne.n	8008044 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	615a      	str	r2, [r3, #20]
}
 800804a:	bf00      	nop
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	bc80      	pop	{r7}
 8008052:	4770      	bx	lr
 8008054:	40012c00 	.word	0x40012c00
 8008058:	40000400 	.word	0x40000400
 800805c:	40000800 	.word	0x40000800

08008060 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	f023 0201 	bic.w	r2, r3, #1
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4a1f      	ldr	r2, [pc, #124]	; (8008108 <TIM_TI1_SetConfig+0xa8>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d00b      	beq.n	80080a6 <TIM_TI1_SetConfig+0x46>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008094:	d007      	beq.n	80080a6 <TIM_TI1_SetConfig+0x46>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4a1c      	ldr	r2, [pc, #112]	; (800810c <TIM_TI1_SetConfig+0xac>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d003      	beq.n	80080a6 <TIM_TI1_SetConfig+0x46>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	4a1b      	ldr	r2, [pc, #108]	; (8008110 <TIM_TI1_SetConfig+0xb0>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d101      	bne.n	80080aa <TIM_TI1_SetConfig+0x4a>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <TIM_TI1_SetConfig+0x4c>
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d008      	beq.n	80080c2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f023 0303 	bic.w	r3, r3, #3
 80080b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	e003      	b.n	80080ca <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f043 0301 	orr.w	r3, r3, #1
 80080c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	011b      	lsls	r3, r3, #4
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f023 030a 	bic.w	r3, r3, #10
 80080e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f003 030a 	and.w	r3, r3, #10
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	621a      	str	r2, [r3, #32]
}
 80080fe:	bf00      	nop
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	bc80      	pop	{r7}
 8008106:	4770      	bx	lr
 8008108:	40012c00 	.word	0x40012c00
 800810c:	40000400 	.word	0x40000400
 8008110:	40000800 	.word	0x40000800

08008114 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	f023 0210 	bic.w	r2, r3, #16
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6a1b      	ldr	r3, [r3, #32]
 8008138:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008140:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	021b      	lsls	r3, r3, #8
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	4313      	orrs	r3, r2
 800814a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008152:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	031b      	lsls	r3, r3, #12
 8008158:	b29b      	uxth	r3, r3
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	4313      	orrs	r3, r2
 800815e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008166:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	011b      	lsls	r3, r3, #4
 800816c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	4313      	orrs	r3, r2
 8008174:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	621a      	str	r2, [r3, #32]
}
 8008182:	bf00      	nop
 8008184:	371c      	adds	r7, #28
 8008186:	46bd      	mov	sp, r7
 8008188:	bc80      	pop	{r7}
 800818a:	4770      	bx	lr

0800818c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f023 0303 	bic.w	r3, r3, #3
 80081b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4313      	orrs	r3, r2
 80081c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	011b      	lsls	r3, r3, #4
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	021b      	lsls	r3, r3, #8
 80081e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	621a      	str	r2, [r3, #32]
}
 80081f8:	bf00      	nop
 80081fa:	371c      	adds	r7, #28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bc80      	pop	{r7}
 8008200:	4770      	bx	lr

08008202 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008202:	b480      	push	{r7}
 8008204:	b087      	sub	sp, #28
 8008206:	af00      	add	r7, sp, #0
 8008208:	60f8      	str	r0, [r7, #12]
 800820a:	60b9      	str	r1, [r7, #8]
 800820c:	607a      	str	r2, [r7, #4]
 800820e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800822e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	4313      	orrs	r3, r2
 8008238:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008240:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	031b      	lsls	r3, r3, #12
 8008246:	b29b      	uxth	r3, r3
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	4313      	orrs	r3, r2
 800824c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008254:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	031b      	lsls	r3, r3, #12
 800825a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	4313      	orrs	r3, r2
 8008262:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	621a      	str	r2, [r3, #32]
}
 8008270:	bf00      	nop
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	bc80      	pop	{r7}
 8008278:	4770      	bx	lr

0800827a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800827a:	b480      	push	{r7}
 800827c:	b087      	sub	sp, #28
 800827e:	af00      	add	r7, sp, #0
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	60b9      	str	r1, [r7, #8]
 8008284:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f003 031f 	and.w	r3, r3, #31
 800828c:	2201      	movs	r2, #1
 800828e:	fa02 f303 	lsl.w	r3, r2, r3
 8008292:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a1a      	ldr	r2, [r3, #32]
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	43db      	mvns	r3, r3
 800829c:	401a      	ands	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a1a      	ldr	r2, [r3, #32]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	f003 031f 	and.w	r3, r3, #31
 80082ac:	6879      	ldr	r1, [r7, #4]
 80082ae:	fa01 f303 	lsl.w	r3, r1, r3
 80082b2:	431a      	orrs	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	621a      	str	r2, [r3, #32]
}
 80082b8:	bf00      	nop
 80082ba:	371c      	adds	r7, #28
 80082bc:	46bd      	mov	sp, r7
 80082be:	bc80      	pop	{r7}
 80082c0:	4770      	bx	lr
	...

080082c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d101      	bne.n	80082dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082d8:	2302      	movs	r3, #2
 80082da:	e046      	b.n	800836a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a16      	ldr	r2, [pc, #88]	; (8008374 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d00e      	beq.n	800833e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008328:	d009      	beq.n	800833e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a12      	ldr	r2, [pc, #72]	; (8008378 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d004      	beq.n	800833e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a10      	ldr	r2, [pc, #64]	; (800837c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d10c      	bne.n	8008358 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	4313      	orrs	r3, r2
 800834e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	bc80      	pop	{r7}
 8008372:	4770      	bx	lr
 8008374:	40012c00 	.word	0x40012c00
 8008378:	40000400 	.word	0x40000400
 800837c:	40000800 	.word	0x40000800

08008380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	bc80      	pop	{r7}
 8008390:	4770      	bx	lr

08008392 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800839a:	bf00      	nop
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	bc80      	pop	{r7}
 80083a2:	4770      	bx	lr

080083a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80083a4:	b084      	sub	sp, #16
 80083a6:	b480      	push	{r7}
 80083a8:	b083      	sub	sp, #12
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	f107 0014 	add.w	r0, r7, #20
 80083b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc80      	pop	{r7}
 80083c0:	b004      	add	sp, #16
 80083c2:	4770      	bx	lr

080083c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80083d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80083d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	b29a      	uxth	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bc80      	pop	{r7}
 80083ee:	4770      	bx	lr

080083f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80083f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80083fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008404:	b29a      	uxth	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	b29b      	uxth	r3, r3
 800840a:	43db      	mvns	r3, r3
 800840c:	b29b      	uxth	r3, r3
 800840e:	4013      	ands	r3, r2
 8008410:	b29a      	uxth	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	bc80      	pop	{r7}
 8008422:	4770      	bx	lr

08008424 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	bc80      	pop	{r7}
 800843a:	4770      	bx	lr

0800843c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800843c:	b084      	sub	sp, #16
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	f107 0014 	add.w	r0, r7, #20
 800844a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	bc80      	pop	{r7}
 8008478:	b004      	add	sp, #16
 800847a:	4770      	bx	lr

0800847c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800847c:	b480      	push	{r7}
 800847e:	b09b      	sub	sp, #108	; 0x6c
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	b29b      	uxth	r3, r3
 800849a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800849e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	78db      	ldrb	r3, [r3, #3]
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d81f      	bhi.n	80084ee <USB_ActivateEndpoint+0x72>
 80084ae:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <USB_ActivateEndpoint+0x38>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	080084c5 	.word	0x080084c5
 80084b8:	080084e1 	.word	0x080084e1
 80084bc:	080084f7 	.word	0x080084f7
 80084c0:	080084d3 	.word	0x080084d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80084c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80084c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80084d0:	e012      	b.n	80084f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80084d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80084d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80084da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80084de:	e00b      	b.n	80084f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80084e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80084e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80084ec:	e004      	b.n	80084f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80084f4:	e000      	b.n	80084f8 <USB_ActivateEndpoint+0x7c>
      break;
 80084f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	441a      	add	r2, r3
 8008502:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800850a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800850e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008516:	b29b      	uxth	r3, r3
 8008518:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800852c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008530:	b29a      	uxth	r2, r3
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	b29b      	uxth	r3, r3
 8008538:	4313      	orrs	r3, r2
 800853a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	441a      	add	r2, r3
 8008548:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800854c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855c:	b29b      	uxth	r3, r3
 800855e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	7b1b      	ldrb	r3, [r3, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	f040 8149 	bne.w	80087fc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	785b      	ldrb	r3, [r3, #1]
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 8084 	beq.w	800867c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800857e:	b29b      	uxth	r3, r3
 8008580:	461a      	mov	r2, r3
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	4413      	add	r3, r2
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	011a      	lsls	r2, r3, #4
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008596:	613b      	str	r3, [r7, #16]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	88db      	ldrh	r3, [r3, #6]
 800859c:	085b      	lsrs	r3, r3, #1
 800859e:	b29b      	uxth	r3, r3
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	81fb      	strh	r3, [r7, #14]
 80085b6:	89fb      	ldrh	r3, [r7, #14]
 80085b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01b      	beq.n	80085f8 <USB_ActivateEndpoint+0x17c>
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d6:	81bb      	strh	r3, [r7, #12]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	441a      	add	r2, r3
 80085e2:	89bb      	ldrh	r3, [r7, #12]
 80085e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	78db      	ldrb	r3, [r3, #3]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d020      	beq.n	8008642 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	b29b      	uxth	r3, r3
 800860e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008616:	813b      	strh	r3, [r7, #8]
 8008618:	893b      	ldrh	r3, [r7, #8]
 800861a:	f083 0320 	eor.w	r3, r3, #32
 800861e:	813b      	strh	r3, [r7, #8]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	441a      	add	r2, r3
 800862a:	893b      	ldrh	r3, [r7, #8]
 800862c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800863c:	b29b      	uxth	r3, r3
 800863e:	8013      	strh	r3, [r2, #0]
 8008640:	e27f      	b.n	8008b42 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	b29b      	uxth	r3, r3
 8008650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008658:	817b      	strh	r3, [r7, #10]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	441a      	add	r2, r3
 8008664:	897b      	ldrh	r3, [r7, #10]
 8008666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800866a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800866e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008676:	b29b      	uxth	r3, r3
 8008678:	8013      	strh	r3, [r2, #0]
 800867a:	e262      	b.n	8008b42 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008686:	b29b      	uxth	r3, r3
 8008688:	461a      	mov	r2, r3
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	4413      	add	r3, r2
 800868e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	011a      	lsls	r2, r3, #4
 8008696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008698:	4413      	add	r3, r2
 800869a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800869e:	62bb      	str	r3, [r7, #40]	; 0x28
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	88db      	ldrh	r3, [r3, #6]
 80086a4:	085b      	lsrs	r3, r3, #1
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	005b      	lsls	r3, r3, #1
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	461a      	mov	r2, r3
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	4413      	add	r3, r2
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	011a      	lsls	r2, r3, #4
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	4413      	add	r3, r2
 80086ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086d2:	623b      	str	r3, [r7, #32]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d112      	bne.n	8008702 <USB_ActivateEndpoint+0x286>
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	801a      	strh	r2, [r3, #0]
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	801a      	strh	r2, [r3, #0]
 8008700:	e02f      	b.n	8008762 <USB_ActivateEndpoint+0x2e6>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	2b3e      	cmp	r3, #62	; 0x3e
 8008708:	d813      	bhi.n	8008732 <USB_ActivateEndpoint+0x2b6>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	085b      	lsrs	r3, r3, #1
 8008710:	663b      	str	r3, [r7, #96]	; 0x60
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <USB_ActivateEndpoint+0x2a8>
 800871e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008720:	3301      	adds	r3, #1
 8008722:	663b      	str	r3, [r7, #96]	; 0x60
 8008724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008726:	b29b      	uxth	r3, r3
 8008728:	029b      	lsls	r3, r3, #10
 800872a:	b29a      	uxth	r2, r3
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	801a      	strh	r2, [r3, #0]
 8008730:	e017      	b.n	8008762 <USB_ActivateEndpoint+0x2e6>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	095b      	lsrs	r3, r3, #5
 8008738:	663b      	str	r3, [r7, #96]	; 0x60
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	f003 031f 	and.w	r3, r3, #31
 8008742:	2b00      	cmp	r3, #0
 8008744:	d102      	bne.n	800874c <USB_ActivateEndpoint+0x2d0>
 8008746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008748:	3b01      	subs	r3, #1
 800874a:	663b      	str	r3, [r7, #96]	; 0x60
 800874c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800874e:	b29b      	uxth	r3, r3
 8008750:	029b      	lsls	r3, r3, #10
 8008752:	b29b      	uxth	r3, r3
 8008754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800875c:	b29a      	uxth	r2, r3
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	83fb      	strh	r3, [r7, #30]
 8008770:	8bfb      	ldrh	r3, [r7, #30]
 8008772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d01b      	beq.n	80087b2 <USB_ActivateEndpoint+0x336>
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	b29b      	uxth	r3, r3
 8008788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008790:	83bb      	strh	r3, [r7, #28]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	441a      	add	r2, r3
 800879c:	8bbb      	ldrh	r3, [r7, #28]
 800879e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c8:	837b      	strh	r3, [r7, #26]
 80087ca:	8b7b      	ldrh	r3, [r7, #26]
 80087cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087d0:	837b      	strh	r3, [r7, #26]
 80087d2:	8b7b      	ldrh	r3, [r7, #26]
 80087d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80087d8:	837b      	strh	r3, [r7, #26]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	441a      	add	r2, r3
 80087e4:	8b7b      	ldrh	r3, [r7, #26]
 80087e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	8013      	strh	r3, [r2, #0]
 80087fa:	e1a2      	b.n	8008b42 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	881b      	ldrh	r3, [r3, #0]
 8008808:	b29b      	uxth	r3, r3
 800880a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800880e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008812:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	441a      	add	r2, r3
 8008820:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800882c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008834:	b29b      	uxth	r3, r3
 8008836:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	65bb      	str	r3, [r7, #88]	; 0x58
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008842:	b29b      	uxth	r3, r3
 8008844:	461a      	mov	r2, r3
 8008846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008848:	4413      	add	r3, r2
 800884a:	65bb      	str	r3, [r7, #88]	; 0x58
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	011a      	lsls	r2, r3, #4
 8008852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008854:	4413      	add	r3, r2
 8008856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800885a:	657b      	str	r3, [r7, #84]	; 0x54
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	891b      	ldrh	r3, [r3, #8]
 8008860:	085b      	lsrs	r3, r3, #1
 8008862:	b29b      	uxth	r3, r3
 8008864:	005b      	lsls	r3, r3, #1
 8008866:	b29a      	uxth	r2, r3
 8008868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800886a:	801a      	strh	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	653b      	str	r3, [r7, #80]	; 0x50
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008876:	b29b      	uxth	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800887c:	4413      	add	r3, r2
 800887e:	653b      	str	r3, [r7, #80]	; 0x50
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	011a      	lsls	r2, r3, #4
 8008886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008888:	4413      	add	r3, r2
 800888a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800888e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	895b      	ldrh	r3, [r3, #10]
 8008894:	085b      	lsrs	r3, r3, #1
 8008896:	b29b      	uxth	r3, r3
 8008898:	005b      	lsls	r3, r3, #1
 800889a:	b29a      	uxth	r2, r3
 800889c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800889e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	785b      	ldrb	r3, [r3, #1]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f040 8091 	bne.w	80089cc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80088b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80088ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d01b      	beq.n	80088fa <USB_ActivateEndpoint+0x47e>
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	881b      	ldrh	r3, [r3, #0]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	441a      	add	r2, r3
 80088e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80088e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	873b      	strh	r3, [r7, #56]	; 0x38
 8008908:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800890a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890e:	2b00      	cmp	r3, #0
 8008910:	d01b      	beq.n	800894a <USB_ActivateEndpoint+0x4ce>
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	b29b      	uxth	r3, r3
 8008920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008928:	86fb      	strh	r3, [r7, #54]	; 0x36
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	441a      	add	r2, r3
 8008934:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800893a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800893e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008942:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008946:	b29b      	uxth	r3, r3
 8008948:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	b29b      	uxth	r3, r3
 8008958:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800895c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008960:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008962:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008964:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008968:	86bb      	strh	r3, [r7, #52]	; 0x34
 800896a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800896c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008970:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	441a      	add	r2, r3
 800897c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800897e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800898a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898e:	b29b      	uxth	r3, r3
 8008990:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	441a      	add	r2, r3
 80089b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80089b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	8013      	strh	r3, [r2, #0]
 80089ca:	e0ba      	b.n	8008b42 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80089dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80089e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d01d      	beq.n	8008a24 <USB_ActivateEndpoint+0x5a8>
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	441a      	add	r2, r3
 8008a0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008a34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d01d      	beq.n	8008a7c <USB_ActivateEndpoint+0x600>
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	441a      	add	r2, r3
 8008a64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	78db      	ldrb	r3, [r3, #3]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d024      	beq.n	8008ace <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008a9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008aa2:	f083 0320 	eor.w	r3, r3, #32
 8008aa6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	441a      	add	r2, r3
 8008ab4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	8013      	strh	r3, [r2, #0]
 8008acc:	e01d      	b.n	8008b0a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	881b      	ldrh	r3, [r3, #0]
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ae4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	441a      	add	r2, r3
 8008af2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b20:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	441a      	add	r2, r3
 8008b2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008b42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	376c      	adds	r7, #108	; 0x6c
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bc80      	pop	{r7}
 8008b4e:	4770      	bx	lr

08008b50 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b08d      	sub	sp, #52	; 0x34
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	7b1b      	ldrb	r3, [r3, #12]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f040 808e 	bne.w	8008c80 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	785b      	ldrb	r3, [r3, #1]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d044      	beq.n	8008bf6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	81bb      	strh	r3, [r7, #12]
 8008b7a:	89bb      	ldrh	r3, [r7, #12]
 8008b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d01b      	beq.n	8008bbc <USB_DeactivateEndpoint+0x6c>
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9a:	817b      	strh	r3, [r7, #10]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	441a      	add	r2, r3
 8008ba6:	897b      	ldrh	r3, [r7, #10]
 8008ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4413      	add	r3, r2
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd2:	813b      	strh	r3, [r7, #8]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	441a      	add	r2, r3
 8008bde:	893b      	ldrh	r3, [r7, #8]
 8008be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	8013      	strh	r3, [r2, #0]
 8008bf4:	e192      	b.n	8008f1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	827b      	strh	r3, [r7, #18]
 8008c04:	8a7b      	ldrh	r3, [r7, #18]
 8008c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d01b      	beq.n	8008c46 <USB_DeactivateEndpoint+0xf6>
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4413      	add	r3, r2
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c24:	823b      	strh	r3, [r7, #16]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	441a      	add	r2, r3
 8008c30:	8a3b      	ldrh	r3, [r7, #16]
 8008c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c5c:	81fb      	strh	r3, [r7, #14]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	441a      	add	r2, r3
 8008c68:	89fb      	ldrh	r3, [r7, #14]
 8008c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	8013      	strh	r3, [r2, #0]
 8008c7e:	e14d      	b.n	8008f1c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	785b      	ldrb	r3, [r3, #1]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f040 80a5 	bne.w	8008dd4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	843b      	strh	r3, [r7, #32]
 8008c98:	8c3b      	ldrh	r3, [r7, #32]
 8008c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d01b      	beq.n	8008cda <USB_DeactivateEndpoint+0x18a>
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb8:	83fb      	strh	r3, [r7, #30]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	441a      	add	r2, r3
 8008cc4:	8bfb      	ldrh	r3, [r7, #30]
 8008cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	83bb      	strh	r3, [r7, #28]
 8008ce8:	8bbb      	ldrh	r3, [r7, #28]
 8008cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d01b      	beq.n	8008d2a <USB_DeactivateEndpoint+0x1da>
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d08:	837b      	strh	r3, [r7, #26]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	441a      	add	r2, r3
 8008d14:	8b7b      	ldrh	r3, [r7, #26]
 8008d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d40:	833b      	strh	r3, [r7, #24]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	441a      	add	r2, r3
 8008d4c:	8b3b      	ldrh	r3, [r7, #24]
 8008d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d78:	82fb      	strh	r3, [r7, #22]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	441a      	add	r2, r3
 8008d84:	8afb      	ldrh	r3, [r7, #22]
 8008d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008db0:	82bb      	strh	r3, [r7, #20]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	441a      	add	r2, r3
 8008dbc:	8abb      	ldrh	r3, [r7, #20]
 8008dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	8013      	strh	r3, [r2, #0]
 8008dd2:	e0a3      	b.n	8008f1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	881b      	ldrh	r3, [r3, #0]
 8008de0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008de2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d01b      	beq.n	8008e24 <USB_DeactivateEndpoint+0x2d4>
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	441a      	add	r2, r3
 8008e0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008e32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d01b      	beq.n	8008e74 <USB_DeactivateEndpoint+0x324>
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4413      	add	r3, r2
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e52:	853b      	strh	r3, [r7, #40]	; 0x28
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	441a      	add	r2, r3
 8008e5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	441a      	add	r2, r3
 8008e96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	441a      	add	r2, r3
 8008ece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efa:	847b      	strh	r3, [r7, #34]	; 0x22
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	441a      	add	r2, r3
 8008f06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3734      	adds	r7, #52	; 0x34
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bc80      	pop	{r7}
 8008f26:	4770      	bx	lr

08008f28 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b0c4      	sub	sp, #272	; 0x110
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	1d3b      	adds	r3, r7, #4
 8008f30:	6018      	str	r0, [r3, #0]
 8008f32:	463b      	mov	r3, r7
 8008f34:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f36:	463b      	mov	r3, r7
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	785b      	ldrb	r3, [r3, #1]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	f040 8557 	bne.w	80099f0 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008f42:	463b      	mov	r3, r7
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	699a      	ldr	r2, [r3, #24]
 8008f48:	463b      	mov	r3, r7
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d905      	bls.n	8008f5e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008f52:	463b      	mov	r3, r7
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008f5c:	e004      	b.n	8008f68 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008f5e:	463b      	mov	r3, r7
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008f68:	463b      	mov	r3, r7
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	7b1b      	ldrb	r3, [r3, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d12c      	bne.n	8008fcc <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008f72:	463b      	mov	r3, r7
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6959      	ldr	r1, [r3, #20]
 8008f78:	463b      	mov	r3, r7
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	88da      	ldrh	r2, [r3, #6]
 8008f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	1d38      	adds	r0, r7, #4
 8008f86:	6800      	ldr	r0, [r0, #0]
 8008f88:	f001 fa2c 	bl	800a3e4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008f8c:	1d3b      	adds	r3, r7, #4
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	617b      	str	r3, [r7, #20]
 8008f92:	1d3b      	adds	r3, r7, #4
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]
 8008fa4:	463b      	mov	r3, r7
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	011a      	lsls	r2, r3, #4
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008fb4:	f107 0310 	add.w	r3, r7, #16
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	f107 0310 	add.w	r3, r7, #16
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	801a      	strh	r2, [r3, #0]
 8008fc8:	f000 bcdd 	b.w	8009986 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008fcc:	463b      	mov	r3, r7
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	78db      	ldrb	r3, [r3, #3]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	f040 8347 	bne.w	8009666 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008fd8:	463b      	mov	r3, r7
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6a1a      	ldr	r2, [r3, #32]
 8008fde:	463b      	mov	r3, r7
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	f240 82eb 	bls.w	80095c0 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008fea:	1d3b      	adds	r3, r7, #4
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	463b      	mov	r3, r7
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009004:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8009008:	1d3b      	adds	r3, r7, #4
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	463b      	mov	r3, r7
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	441a      	add	r2, r3
 8009016:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800901a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800901e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009022:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800902a:	b29b      	uxth	r3, r3
 800902c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800902e:	463b      	mov	r3, r7
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6a1a      	ldr	r2, [r3, #32]
 8009034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009038:	1ad2      	subs	r2, r2, r3
 800903a:	463b      	mov	r3, r7
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009040:	1d3b      	adds	r3, r7, #4
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	463b      	mov	r3, r7
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	b29b      	uxth	r3, r3
 8009052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009056:	2b00      	cmp	r3, #0
 8009058:	f000 8159 	beq.w	800930e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800905c:	1d3b      	adds	r3, r7, #4
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	637b      	str	r3, [r7, #52]	; 0x34
 8009062:	463b      	mov	r3, r7
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	785b      	ldrb	r3, [r3, #1]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d164      	bne.n	8009136 <USB_EPStartXfer+0x20e>
 800906c:	1d3b      	adds	r3, r7, #4
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009072:	1d3b      	adds	r3, r7, #4
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800907a:	b29b      	uxth	r3, r3
 800907c:	461a      	mov	r2, r3
 800907e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009080:	4413      	add	r3, r2
 8009082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009084:	463b      	mov	r3, r7
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	011a      	lsls	r2, r3, #4
 800908c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908e:	4413      	add	r3, r2
 8009090:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009094:	62bb      	str	r3, [r7, #40]	; 0x28
 8009096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800909a:	2b00      	cmp	r3, #0
 800909c:	d112      	bne.n	80090c4 <USB_EPStartXfer+0x19c>
 800909e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ac:	801a      	strh	r2, [r3, #0]
 80090ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b0:	881b      	ldrh	r3, [r3, #0]
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090bc:	b29a      	uxth	r2, r3
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	801a      	strh	r2, [r3, #0]
 80090c2:	e054      	b.n	800916e <USB_EPStartXfer+0x246>
 80090c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090c8:	2b3e      	cmp	r3, #62	; 0x3e
 80090ca:	d817      	bhi.n	80090fc <USB_EPStartXfer+0x1d4>
 80090cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090d0:	085b      	lsrs	r3, r3, #1
 80090d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80090d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d004      	beq.n	80090ec <USB_EPStartXfer+0x1c4>
 80090e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090e6:	3301      	adds	r3, #1
 80090e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80090ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	029b      	lsls	r3, r3, #10
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f8:	801a      	strh	r2, [r3, #0]
 80090fa:	e038      	b.n	800916e <USB_EPStartXfer+0x246>
 80090fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009100:	095b      	lsrs	r3, r3, #5
 8009102:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800910a:	f003 031f 	and.w	r3, r3, #31
 800910e:	2b00      	cmp	r3, #0
 8009110:	d104      	bne.n	800911c <USB_EPStartXfer+0x1f4>
 8009112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009116:	3b01      	subs	r3, #1
 8009118:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800911c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009120:	b29b      	uxth	r3, r3
 8009122:	029b      	lsls	r3, r3, #10
 8009124:	b29b      	uxth	r3, r3
 8009126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800912a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800912e:	b29a      	uxth	r2, r3
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	801a      	strh	r2, [r3, #0]
 8009134:	e01b      	b.n	800916e <USB_EPStartXfer+0x246>
 8009136:	463b      	mov	r3, r7
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	785b      	ldrb	r3, [r3, #1]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d116      	bne.n	800916e <USB_EPStartXfer+0x246>
 8009140:	1d3b      	adds	r3, r7, #4
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009148:	b29b      	uxth	r3, r3
 800914a:	461a      	mov	r2, r3
 800914c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914e:	4413      	add	r3, r2
 8009150:	637b      	str	r3, [r7, #52]	; 0x34
 8009152:	463b      	mov	r3, r7
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	011a      	lsls	r2, r3, #4
 800915a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915c:	4413      	add	r3, r2
 800915e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009162:	633b      	str	r3, [r7, #48]	; 0x30
 8009164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009168:	b29a      	uxth	r2, r3
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800916e:	463b      	mov	r3, r7
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	895b      	ldrh	r3, [r3, #10]
 8009174:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009178:	463b      	mov	r3, r7
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6959      	ldr	r1, [r3, #20]
 800917e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009182:	b29b      	uxth	r3, r3
 8009184:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009188:	1d38      	adds	r0, r7, #4
 800918a:	6800      	ldr	r0, [r0, #0]
 800918c:	f001 f92a 	bl	800a3e4 <USB_WritePMA>
            ep->xfer_buff += len;
 8009190:	463b      	mov	r3, r7
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	695a      	ldr	r2, [r3, #20]
 8009196:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800919a:	441a      	add	r2, r3
 800919c:	463b      	mov	r3, r7
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80091a2:	463b      	mov	r3, r7
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6a1a      	ldr	r2, [r3, #32]
 80091a8:	463b      	mov	r3, r7
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d909      	bls.n	80091c6 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80091b2:	463b      	mov	r3, r7
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6a1a      	ldr	r2, [r3, #32]
 80091b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091bc:	1ad2      	subs	r2, r2, r3
 80091be:	463b      	mov	r3, r7
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	621a      	str	r2, [r3, #32]
 80091c4:	e008      	b.n	80091d8 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80091c6:	463b      	mov	r3, r7
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	6a1b      	ldr	r3, [r3, #32]
 80091cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80091d0:	463b      	mov	r3, r7
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2200      	movs	r2, #0
 80091d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80091d8:	463b      	mov	r3, r7
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	785b      	ldrb	r3, [r3, #1]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d164      	bne.n	80092ac <USB_EPStartXfer+0x384>
 80091e2:	1d3b      	adds	r3, r7, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	61fb      	str	r3, [r7, #28]
 80091e8:	1d3b      	adds	r3, r7, #4
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	461a      	mov	r2, r3
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	4413      	add	r3, r2
 80091f8:	61fb      	str	r3, [r7, #28]
 80091fa:	463b      	mov	r3, r7
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	011a      	lsls	r2, r3, #4
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	4413      	add	r3, r2
 8009206:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800920a:	61bb      	str	r3, [r7, #24]
 800920c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009210:	2b00      	cmp	r3, #0
 8009212:	d112      	bne.n	800923a <USB_EPStartXfer+0x312>
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	881b      	ldrh	r3, [r3, #0]
 8009218:	b29b      	uxth	r3, r3
 800921a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800921e:	b29a      	uxth	r2, r3
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	801a      	strh	r2, [r3, #0]
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	b29b      	uxth	r3, r3
 800922a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800922e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009232:	b29a      	uxth	r2, r3
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	801a      	strh	r2, [r3, #0]
 8009238:	e057      	b.n	80092ea <USB_EPStartXfer+0x3c2>
 800923a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800923e:	2b3e      	cmp	r3, #62	; 0x3e
 8009240:	d817      	bhi.n	8009272 <USB_EPStartXfer+0x34a>
 8009242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009246:	085b      	lsrs	r3, r3, #1
 8009248:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800924c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b00      	cmp	r3, #0
 8009256:	d004      	beq.n	8009262 <USB_EPStartXfer+0x33a>
 8009258:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800925c:	3301      	adds	r3, #1
 800925e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009262:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009266:	b29b      	uxth	r3, r3
 8009268:	029b      	lsls	r3, r3, #10
 800926a:	b29a      	uxth	r2, r3
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	801a      	strh	r2, [r3, #0]
 8009270:	e03b      	b.n	80092ea <USB_EPStartXfer+0x3c2>
 8009272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009276:	095b      	lsrs	r3, r3, #5
 8009278:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800927c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009280:	f003 031f 	and.w	r3, r3, #31
 8009284:	2b00      	cmp	r3, #0
 8009286:	d104      	bne.n	8009292 <USB_EPStartXfer+0x36a>
 8009288:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800928c:	3b01      	subs	r3, #1
 800928e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009292:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009296:	b29b      	uxth	r3, r3
 8009298:	029b      	lsls	r3, r3, #10
 800929a:	b29b      	uxth	r3, r3
 800929c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	801a      	strh	r2, [r3, #0]
 80092aa:	e01e      	b.n	80092ea <USB_EPStartXfer+0x3c2>
 80092ac:	463b      	mov	r3, r7
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	785b      	ldrb	r3, [r3, #1]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d119      	bne.n	80092ea <USB_EPStartXfer+0x3c2>
 80092b6:	1d3b      	adds	r3, r7, #4
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	627b      	str	r3, [r7, #36]	; 0x24
 80092bc:	1d3b      	adds	r3, r7, #4
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	461a      	mov	r2, r3
 80092c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ca:	4413      	add	r3, r2
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
 80092ce:	463b      	mov	r3, r7
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	011a      	lsls	r2, r3, #4
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	4413      	add	r3, r2
 80092da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092de:	623b      	str	r3, [r7, #32]
 80092e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80092ea:	463b      	mov	r3, r7
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	891b      	ldrh	r3, [r3, #8]
 80092f0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092f4:	463b      	mov	r3, r7
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6959      	ldr	r1, [r3, #20]
 80092fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092fe:	b29b      	uxth	r3, r3
 8009300:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009304:	1d38      	adds	r0, r7, #4
 8009306:	6800      	ldr	r0, [r0, #0]
 8009308:	f001 f86c 	bl	800a3e4 <USB_WritePMA>
 800930c:	e33b      	b.n	8009986 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800930e:	463b      	mov	r3, r7
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	785b      	ldrb	r3, [r3, #1]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d164      	bne.n	80093e2 <USB_EPStartXfer+0x4ba>
 8009318:	1d3b      	adds	r3, r7, #4
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800931e:	1d3b      	adds	r3, r7, #4
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009326:	b29b      	uxth	r3, r3
 8009328:	461a      	mov	r2, r3
 800932a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800932c:	4413      	add	r3, r2
 800932e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009330:	463b      	mov	r3, r7
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	011a      	lsls	r2, r3, #4
 8009338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800933a:	4413      	add	r3, r2
 800933c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009340:	64bb      	str	r3, [r7, #72]	; 0x48
 8009342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009346:	2b00      	cmp	r3, #0
 8009348:	d112      	bne.n	8009370 <USB_EPStartXfer+0x448>
 800934a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800934c:	881b      	ldrh	r3, [r3, #0]
 800934e:	b29b      	uxth	r3, r3
 8009350:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009354:	b29a      	uxth	r2, r3
 8009356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009358:	801a      	strh	r2, [r3, #0]
 800935a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	b29b      	uxth	r3, r3
 8009360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009368:	b29a      	uxth	r2, r3
 800936a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800936c:	801a      	strh	r2, [r3, #0]
 800936e:	e057      	b.n	8009420 <USB_EPStartXfer+0x4f8>
 8009370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009374:	2b3e      	cmp	r3, #62	; 0x3e
 8009376:	d817      	bhi.n	80093a8 <USB_EPStartXfer+0x480>
 8009378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800937c:	085b      	lsrs	r3, r3, #1
 800937e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b00      	cmp	r3, #0
 800938c:	d004      	beq.n	8009398 <USB_EPStartXfer+0x470>
 800938e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009392:	3301      	adds	r3, #1
 8009394:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800939c:	b29b      	uxth	r3, r3
 800939e:	029b      	lsls	r3, r3, #10
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a4:	801a      	strh	r2, [r3, #0]
 80093a6:	e03b      	b.n	8009420 <USB_EPStartXfer+0x4f8>
 80093a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093ac:	095b      	lsrs	r3, r3, #5
 80093ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80093b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093b6:	f003 031f 	and.w	r3, r3, #31
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d104      	bne.n	80093c8 <USB_EPStartXfer+0x4a0>
 80093be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093c2:	3b01      	subs	r3, #1
 80093c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80093c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	029b      	lsls	r3, r3, #10
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093da:	b29a      	uxth	r2, r3
 80093dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093de:	801a      	strh	r2, [r3, #0]
 80093e0:	e01e      	b.n	8009420 <USB_EPStartXfer+0x4f8>
 80093e2:	463b      	mov	r3, r7
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	785b      	ldrb	r3, [r3, #1]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d119      	bne.n	8009420 <USB_EPStartXfer+0x4f8>
 80093ec:	1d3b      	adds	r3, r7, #4
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	657b      	str	r3, [r7, #84]	; 0x54
 80093f2:	1d3b      	adds	r3, r7, #4
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	461a      	mov	r2, r3
 80093fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009400:	4413      	add	r3, r2
 8009402:	657b      	str	r3, [r7, #84]	; 0x54
 8009404:	463b      	mov	r3, r7
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	011a      	lsls	r2, r3, #4
 800940c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800940e:	4413      	add	r3, r2
 8009410:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009414:	653b      	str	r3, [r7, #80]	; 0x50
 8009416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800941a:	b29a      	uxth	r2, r3
 800941c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800941e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009420:	463b      	mov	r3, r7
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	891b      	ldrh	r3, [r3, #8]
 8009426:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800942a:	463b      	mov	r3, r7
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6959      	ldr	r1, [r3, #20]
 8009430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009434:	b29b      	uxth	r3, r3
 8009436:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800943a:	1d38      	adds	r0, r7, #4
 800943c:	6800      	ldr	r0, [r0, #0]
 800943e:	f000 ffd1 	bl	800a3e4 <USB_WritePMA>
            ep->xfer_buff += len;
 8009442:	463b      	mov	r3, r7
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	695a      	ldr	r2, [r3, #20]
 8009448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800944c:	441a      	add	r2, r3
 800944e:	463b      	mov	r3, r7
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009454:	463b      	mov	r3, r7
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6a1a      	ldr	r2, [r3, #32]
 800945a:	463b      	mov	r3, r7
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	429a      	cmp	r2, r3
 8009462:	d909      	bls.n	8009478 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8009464:	463b      	mov	r3, r7
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6a1a      	ldr	r2, [r3, #32]
 800946a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800946e:	1ad2      	subs	r2, r2, r3
 8009470:	463b      	mov	r3, r7
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	621a      	str	r2, [r3, #32]
 8009476:	e008      	b.n	800948a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8009478:	463b      	mov	r3, r7
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8009482:	463b      	mov	r3, r7
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2200      	movs	r2, #0
 8009488:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800948a:	1d3b      	adds	r3, r7, #4
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	647b      	str	r3, [r7, #68]	; 0x44
 8009490:	463b      	mov	r3, r7
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	785b      	ldrb	r3, [r3, #1]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d164      	bne.n	8009564 <USB_EPStartXfer+0x63c>
 800949a:	1d3b      	adds	r3, r7, #4
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094a0:	1d3b      	adds	r3, r7, #4
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	461a      	mov	r2, r3
 80094ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ae:	4413      	add	r3, r2
 80094b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094b2:	463b      	mov	r3, r7
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	011a      	lsls	r2, r3, #4
 80094ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094bc:	4413      	add	r3, r2
 80094be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80094c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d112      	bne.n	80094f2 <USB_EPStartXfer+0x5ca>
 80094cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094da:	801a      	strh	r2, [r3, #0]
 80094dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	801a      	strh	r2, [r3, #0]
 80094f0:	e054      	b.n	800959c <USB_EPStartXfer+0x674>
 80094f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094f6:	2b3e      	cmp	r3, #62	; 0x3e
 80094f8:	d817      	bhi.n	800952a <USB_EPStartXfer+0x602>
 80094fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094fe:	085b      	lsrs	r3, r3, #1
 8009500:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	2b00      	cmp	r3, #0
 800950e:	d004      	beq.n	800951a <USB_EPStartXfer+0x5f2>
 8009510:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009514:	3301      	adds	r3, #1
 8009516:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800951a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800951e:	b29b      	uxth	r3, r3
 8009520:	029b      	lsls	r3, r3, #10
 8009522:	b29a      	uxth	r2, r3
 8009524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009526:	801a      	strh	r2, [r3, #0]
 8009528:	e038      	b.n	800959c <USB_EPStartXfer+0x674>
 800952a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800952e:	095b      	lsrs	r3, r3, #5
 8009530:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009538:	f003 031f 	and.w	r3, r3, #31
 800953c:	2b00      	cmp	r3, #0
 800953e:	d104      	bne.n	800954a <USB_EPStartXfer+0x622>
 8009540:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009544:	3b01      	subs	r3, #1
 8009546:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800954a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800954e:	b29b      	uxth	r3, r3
 8009550:	029b      	lsls	r3, r3, #10
 8009552:	b29b      	uxth	r3, r3
 8009554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800955c:	b29a      	uxth	r2, r3
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	801a      	strh	r2, [r3, #0]
 8009562:	e01b      	b.n	800959c <USB_EPStartXfer+0x674>
 8009564:	463b      	mov	r3, r7
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	785b      	ldrb	r3, [r3, #1]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d116      	bne.n	800959c <USB_EPStartXfer+0x674>
 800956e:	1d3b      	adds	r3, r7, #4
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009576:	b29b      	uxth	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800957c:	4413      	add	r3, r2
 800957e:	647b      	str	r3, [r7, #68]	; 0x44
 8009580:	463b      	mov	r3, r7
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	011a      	lsls	r2, r3, #4
 8009588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800958a:	4413      	add	r3, r2
 800958c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009590:	643b      	str	r3, [r7, #64]	; 0x40
 8009592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009596:	b29a      	uxth	r2, r3
 8009598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800959a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800959c:	463b      	mov	r3, r7
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	895b      	ldrh	r3, [r3, #10]
 80095a2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095a6:	463b      	mov	r3, r7
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6959      	ldr	r1, [r3, #20]
 80095ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80095b6:	1d38      	adds	r0, r7, #4
 80095b8:	6800      	ldr	r0, [r0, #0]
 80095ba:	f000 ff13 	bl	800a3e4 <USB_WritePMA>
 80095be:	e1e2      	b.n	8009986 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80095c0:	463b      	mov	r3, r7
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80095ca:	1d3b      	adds	r3, r7, #4
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	463b      	mov	r3, r7
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	b29b      	uxth	r3, r3
 80095dc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80095e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095e4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80095e8:	1d3b      	adds	r3, r7, #4
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	463b      	mov	r3, r7
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	441a      	add	r2, r3
 80095f6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80095fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800960a:	b29b      	uxth	r3, r3
 800960c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800960e:	1d3b      	adds	r3, r7, #4
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	663b      	str	r3, [r7, #96]	; 0x60
 8009614:	1d3b      	adds	r3, r7, #4
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800961c:	b29b      	uxth	r3, r3
 800961e:	461a      	mov	r2, r3
 8009620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009622:	4413      	add	r3, r2
 8009624:	663b      	str	r3, [r7, #96]	; 0x60
 8009626:	463b      	mov	r3, r7
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	011a      	lsls	r2, r3, #4
 800962e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009630:	4413      	add	r3, r2
 8009632:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009636:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800963c:	b29a      	uxth	r2, r3
 800963e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009640:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009642:	463b      	mov	r3, r7
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	891b      	ldrh	r3, [r3, #8]
 8009648:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800964c:	463b      	mov	r3, r7
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6959      	ldr	r1, [r3, #20]
 8009652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009656:	b29b      	uxth	r3, r3
 8009658:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800965c:	1d38      	adds	r0, r7, #4
 800965e:	6800      	ldr	r0, [r0, #0]
 8009660:	f000 fec0 	bl	800a3e4 <USB_WritePMA>
 8009664:	e18f      	b.n	8009986 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009666:	1d3b      	adds	r3, r7, #4
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	463b      	mov	r3, r7
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	b29b      	uxth	r3, r3
 8009678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 808f 	beq.w	80097a0 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009682:	1d3b      	adds	r3, r7, #4
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	67bb      	str	r3, [r7, #120]	; 0x78
 8009688:	463b      	mov	r3, r7
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	785b      	ldrb	r3, [r3, #1]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d164      	bne.n	800975c <USB_EPStartXfer+0x834>
 8009692:	1d3b      	adds	r3, r7, #4
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	673b      	str	r3, [r7, #112]	; 0x70
 8009698:	1d3b      	adds	r3, r7, #4
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	461a      	mov	r2, r3
 80096a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096a6:	4413      	add	r3, r2
 80096a8:	673b      	str	r3, [r7, #112]	; 0x70
 80096aa:	463b      	mov	r3, r7
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	011a      	lsls	r2, r3, #4
 80096b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096b4:	4413      	add	r3, r2
 80096b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d112      	bne.n	80096ea <USB_EPStartXfer+0x7c2>
 80096c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096d2:	801a      	strh	r2, [r3, #0]
 80096d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	b29b      	uxth	r3, r3
 80096da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096e6:	801a      	strh	r2, [r3, #0]
 80096e8:	e054      	b.n	8009794 <USB_EPStartXfer+0x86c>
 80096ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096ee:	2b3e      	cmp	r3, #62	; 0x3e
 80096f0:	d817      	bhi.n	8009722 <USB_EPStartXfer+0x7fa>
 80096f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096f6:	085b      	lsrs	r3, r3, #1
 80096f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80096fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009700:	f003 0301 	and.w	r3, r3, #1
 8009704:	2b00      	cmp	r3, #0
 8009706:	d004      	beq.n	8009712 <USB_EPStartXfer+0x7ea>
 8009708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800970c:	3301      	adds	r3, #1
 800970e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009716:	b29b      	uxth	r3, r3
 8009718:	029b      	lsls	r3, r3, #10
 800971a:	b29a      	uxth	r2, r3
 800971c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800971e:	801a      	strh	r2, [r3, #0]
 8009720:	e038      	b.n	8009794 <USB_EPStartXfer+0x86c>
 8009722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009726:	095b      	lsrs	r3, r3, #5
 8009728:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800972c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009730:	f003 031f 	and.w	r3, r3, #31
 8009734:	2b00      	cmp	r3, #0
 8009736:	d104      	bne.n	8009742 <USB_EPStartXfer+0x81a>
 8009738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800973c:	3b01      	subs	r3, #1
 800973e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009746:	b29b      	uxth	r3, r3
 8009748:	029b      	lsls	r3, r3, #10
 800974a:	b29b      	uxth	r3, r3
 800974c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009754:	b29a      	uxth	r2, r3
 8009756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009758:	801a      	strh	r2, [r3, #0]
 800975a:	e01b      	b.n	8009794 <USB_EPStartXfer+0x86c>
 800975c:	463b      	mov	r3, r7
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	785b      	ldrb	r3, [r3, #1]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d116      	bne.n	8009794 <USB_EPStartXfer+0x86c>
 8009766:	1d3b      	adds	r3, r7, #4
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800976e:	b29b      	uxth	r3, r3
 8009770:	461a      	mov	r2, r3
 8009772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009774:	4413      	add	r3, r2
 8009776:	67bb      	str	r3, [r7, #120]	; 0x78
 8009778:	463b      	mov	r3, r7
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	011a      	lsls	r2, r3, #4
 8009780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009782:	4413      	add	r3, r2
 8009784:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009788:	677b      	str	r3, [r7, #116]	; 0x74
 800978a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800978e:	b29a      	uxth	r2, r3
 8009790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009792:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009794:	463b      	mov	r3, r7
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	895b      	ldrh	r3, [r3, #10]
 800979a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800979e:	e097      	b.n	80098d0 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097a0:	463b      	mov	r3, r7
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	785b      	ldrb	r3, [r3, #1]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d168      	bne.n	800987c <USB_EPStartXfer+0x954>
 80097aa:	1d3b      	adds	r3, r7, #4
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097b2:	1d3b      	adds	r3, r7, #4
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	461a      	mov	r2, r3
 80097be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80097c2:	4413      	add	r3, r2
 80097c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097c8:	463b      	mov	r3, r7
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	011a      	lsls	r2, r3, #4
 80097d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80097d4:	4413      	add	r3, r2
 80097d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d112      	bne.n	800980a <USB_EPStartXfer+0x8e2>
 80097e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097e6:	881b      	ldrh	r3, [r3, #0]
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097f2:	801a      	strh	r2, [r3, #0]
 80097f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009802:	b29a      	uxth	r2, r3
 8009804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009806:	801a      	strh	r2, [r3, #0]
 8009808:	e05d      	b.n	80098c6 <USB_EPStartXfer+0x99e>
 800980a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800980e:	2b3e      	cmp	r3, #62	; 0x3e
 8009810:	d817      	bhi.n	8009842 <USB_EPStartXfer+0x91a>
 8009812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009816:	085b      	lsrs	r3, r3, #1
 8009818:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800981c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	2b00      	cmp	r3, #0
 8009826:	d004      	beq.n	8009832 <USB_EPStartXfer+0x90a>
 8009828:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800982c:	3301      	adds	r3, #1
 800982e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009832:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009836:	b29b      	uxth	r3, r3
 8009838:	029b      	lsls	r3, r3, #10
 800983a:	b29a      	uxth	r2, r3
 800983c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800983e:	801a      	strh	r2, [r3, #0]
 8009840:	e041      	b.n	80098c6 <USB_EPStartXfer+0x99e>
 8009842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009846:	095b      	lsrs	r3, r3, #5
 8009848:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800984c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009850:	f003 031f 	and.w	r3, r3, #31
 8009854:	2b00      	cmp	r3, #0
 8009856:	d104      	bne.n	8009862 <USB_EPStartXfer+0x93a>
 8009858:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800985c:	3b01      	subs	r3, #1
 800985e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009862:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009866:	b29b      	uxth	r3, r3
 8009868:	029b      	lsls	r3, r3, #10
 800986a:	b29b      	uxth	r3, r3
 800986c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009874:	b29a      	uxth	r2, r3
 8009876:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009878:	801a      	strh	r2, [r3, #0]
 800987a:	e024      	b.n	80098c6 <USB_EPStartXfer+0x99e>
 800987c:	463b      	mov	r3, r7
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	785b      	ldrb	r3, [r3, #1]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d11f      	bne.n	80098c6 <USB_EPStartXfer+0x99e>
 8009886:	1d3b      	adds	r3, r7, #4
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800988e:	1d3b      	adds	r3, r7, #4
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009896:	b29b      	uxth	r3, r3
 8009898:	461a      	mov	r2, r3
 800989a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800989e:	4413      	add	r3, r2
 80098a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098a4:	463b      	mov	r3, r7
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	011a      	lsls	r2, r3, #4
 80098ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098b0:	4413      	add	r3, r2
 80098b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098be:	b29a      	uxth	r2, r3
 80098c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80098c6:	463b      	mov	r3, r7
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	891b      	ldrh	r3, [r3, #8]
 80098cc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098d0:	463b      	mov	r3, r7
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6959      	ldr	r1, [r3, #20]
 80098d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098da:	b29b      	uxth	r3, r3
 80098dc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80098e0:	1d38      	adds	r0, r7, #4
 80098e2:	6800      	ldr	r0, [r0, #0]
 80098e4:	f000 fd7e 	bl	800a3e4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80098e8:	463b      	mov	r3, r7
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	785b      	ldrb	r3, [r3, #1]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d122      	bne.n	8009938 <USB_EPStartXfer+0xa10>
 80098f2:	1d3b      	adds	r3, r7, #4
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	463b      	mov	r3, r7
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	b29b      	uxth	r3, r3
 8009904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800990c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8009910:	1d3b      	adds	r3, r7, #4
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	463b      	mov	r3, r7
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	441a      	add	r2, r3
 800991e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8009922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800992a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800992e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009932:	b29b      	uxth	r3, r3
 8009934:	8013      	strh	r3, [r2, #0]
 8009936:	e026      	b.n	8009986 <USB_EPStartXfer+0xa5e>
 8009938:	463b      	mov	r3, r7
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	785b      	ldrb	r3, [r3, #1]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d121      	bne.n	8009986 <USB_EPStartXfer+0xa5e>
 8009942:	1d3b      	adds	r3, r7, #4
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	463b      	mov	r3, r7
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	b29b      	uxth	r3, r3
 8009954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800995c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8009960:	1d3b      	adds	r3, r7, #4
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	463b      	mov	r3, r7
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	441a      	add	r2, r3
 800996e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8009972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800997a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800997e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009982:	b29b      	uxth	r3, r3
 8009984:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009986:	1d3b      	adds	r3, r7, #4
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	463b      	mov	r3, r7
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	b29b      	uxth	r3, r3
 8009998:	f107 020e 	add.w	r2, r7, #14
 800999c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099a4:	8013      	strh	r3, [r2, #0]
 80099a6:	f107 030e 	add.w	r3, r7, #14
 80099aa:	f107 020e 	add.w	r2, r7, #14
 80099ae:	8812      	ldrh	r2, [r2, #0]
 80099b0:	f082 0210 	eor.w	r2, r2, #16
 80099b4:	801a      	strh	r2, [r3, #0]
 80099b6:	f107 030e 	add.w	r3, r7, #14
 80099ba:	f107 020e 	add.w	r2, r7, #14
 80099be:	8812      	ldrh	r2, [r2, #0]
 80099c0:	f082 0220 	eor.w	r2, r2, #32
 80099c4:	801a      	strh	r2, [r3, #0]
 80099c6:	1d3b      	adds	r3, r7, #4
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	463b      	mov	r3, r7
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	441a      	add	r2, r3
 80099d4:	f107 030e 	add.w	r3, r7, #14
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	8013      	strh	r3, [r2, #0]
 80099ee:	e3b5      	b.n	800a15c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80099f0:	463b      	mov	r3, r7
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	7b1b      	ldrb	r3, [r3, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f040 8090 	bne.w	8009b1c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80099fc:	463b      	mov	r3, r7
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	699a      	ldr	r2, [r3, #24]
 8009a02:	463b      	mov	r3, r7
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d90e      	bls.n	8009a2a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8009a0c:	463b      	mov	r3, r7
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8009a16:	463b      	mov	r3, r7
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	699a      	ldr	r2, [r3, #24]
 8009a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a20:	1ad2      	subs	r2, r2, r3
 8009a22:	463b      	mov	r3, r7
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	619a      	str	r2, [r3, #24]
 8009a28:	e008      	b.n	8009a3c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8009a2a:	463b      	mov	r3, r7
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8009a34:	463b      	mov	r3, r7
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009a3c:	1d3b      	adds	r3, r7, #4
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a44:	1d3b      	adds	r3, r7, #4
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a54:	4413      	add	r3, r2
 8009a56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a5a:	463b      	mov	r3, r7
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	011a      	lsls	r2, r3, #4
 8009a62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a66:	4413      	add	r3, r2
 8009a68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d116      	bne.n	8009aa6 <USB_EPStartXfer+0xb7e>
 8009a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a8a:	801a      	strh	r2, [r3, #0]
 8009a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a90:	881b      	ldrh	r3, [r3, #0]
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009aa2:	801a      	strh	r2, [r3, #0]
 8009aa4:	e32c      	b.n	800a100 <USB_EPStartXfer+0x11d8>
 8009aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aaa:	2b3e      	cmp	r3, #62	; 0x3e
 8009aac:	d818      	bhi.n	8009ae0 <USB_EPStartXfer+0xbb8>
 8009aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ab2:	085b      	lsrs	r3, r3, #1
 8009ab4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d004      	beq.n	8009ace <USB_EPStartXfer+0xba6>
 8009ac4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009ac8:	3301      	adds	r3, #1
 8009aca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ace:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	029b      	lsls	r3, r3, #10
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009adc:	801a      	strh	r2, [r3, #0]
 8009ade:	e30f      	b.n	800a100 <USB_EPStartXfer+0x11d8>
 8009ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ae4:	095b      	lsrs	r3, r3, #5
 8009ae6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aee:	f003 031f 	and.w	r3, r3, #31
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d104      	bne.n	8009b00 <USB_EPStartXfer+0xbd8>
 8009af6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009afa:	3b01      	subs	r3, #1
 8009afc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009b00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	029b      	lsls	r3, r3, #10
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b18:	801a      	strh	r2, [r3, #0]
 8009b1a:	e2f1      	b.n	800a100 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009b1c:	463b      	mov	r3, r7
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	78db      	ldrb	r3, [r3, #3]
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	f040 818f 	bne.w	8009e46 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009b28:	463b      	mov	r3, r7
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	785b      	ldrb	r3, [r3, #1]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d175      	bne.n	8009c1e <USB_EPStartXfer+0xcf6>
 8009b32:	1d3b      	adds	r3, r7, #4
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b3a:	1d3b      	adds	r3, r7, #4
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	461a      	mov	r2, r3
 8009b46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b50:	463b      	mov	r3, r7
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	011a      	lsls	r2, r3, #4
 8009b58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b66:	463b      	mov	r3, r7
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d116      	bne.n	8009b9e <USB_EPStartXfer+0xc76>
 8009b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b74:	881b      	ldrh	r3, [r3, #0]
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b82:	801a      	strh	r2, [r3, #0]
 8009b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b88:	881b      	ldrh	r3, [r3, #0]
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b9a:	801a      	strh	r2, [r3, #0]
 8009b9c:	e065      	b.n	8009c6a <USB_EPStartXfer+0xd42>
 8009b9e:	463b      	mov	r3, r7
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	2b3e      	cmp	r3, #62	; 0x3e
 8009ba6:	d81a      	bhi.n	8009bde <USB_EPStartXfer+0xcb6>
 8009ba8:	463b      	mov	r3, r7
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	691b      	ldr	r3, [r3, #16]
 8009bae:	085b      	lsrs	r3, r3, #1
 8009bb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bb4:	463b      	mov	r3, r7
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	f003 0301 	and.w	r3, r3, #1
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d004      	beq.n	8009bcc <USB_EPStartXfer+0xca4>
 8009bc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	029b      	lsls	r3, r3, #10
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bda:	801a      	strh	r2, [r3, #0]
 8009bdc:	e045      	b.n	8009c6a <USB_EPStartXfer+0xd42>
 8009bde:	463b      	mov	r3, r7
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	095b      	lsrs	r3, r3, #5
 8009be6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bea:	463b      	mov	r3, r7
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	f003 031f 	and.w	r3, r3, #31
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d104      	bne.n	8009c02 <USB_EPStartXfer+0xcda>
 8009bf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	029b      	lsls	r3, r3, #10
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c1a:	801a      	strh	r2, [r3, #0]
 8009c1c:	e025      	b.n	8009c6a <USB_EPStartXfer+0xd42>
 8009c1e:	463b      	mov	r3, r7
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	785b      	ldrb	r3, [r3, #1]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d120      	bne.n	8009c6a <USB_EPStartXfer+0xd42>
 8009c28:	1d3b      	adds	r3, r7, #4
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c30:	1d3b      	adds	r3, r7, #4
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c40:	4413      	add	r3, r2
 8009c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c46:	463b      	mov	r3, r7
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	011a      	lsls	r2, r3, #4
 8009c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c52:	4413      	add	r3, r2
 8009c54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c5c:	463b      	mov	r3, r7
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c68:	801a      	strh	r2, [r3, #0]
 8009c6a:	1d3b      	adds	r3, r7, #4
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c72:	463b      	mov	r3, r7
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	785b      	ldrb	r3, [r3, #1]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d175      	bne.n	8009d68 <USB_EPStartXfer+0xe40>
 8009c7c:	1d3b      	adds	r3, r7, #4
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c84:	1d3b      	adds	r3, r7, #4
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c94:	4413      	add	r3, r2
 8009c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c9a:	463b      	mov	r3, r7
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	011a      	lsls	r2, r3, #4
 8009ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009cac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009cb0:	463b      	mov	r3, r7
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d116      	bne.n	8009ce8 <USB_EPStartXfer+0xdc0>
 8009cba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ccc:	801a      	strh	r2, [r3, #0]
 8009cce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cd2:	881b      	ldrh	r3, [r3, #0]
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ce4:	801a      	strh	r2, [r3, #0]
 8009ce6:	e061      	b.n	8009dac <USB_EPStartXfer+0xe84>
 8009ce8:	463b      	mov	r3, r7
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	2b3e      	cmp	r3, #62	; 0x3e
 8009cf0:	d81a      	bhi.n	8009d28 <USB_EPStartXfer+0xe00>
 8009cf2:	463b      	mov	r3, r7
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	085b      	lsrs	r3, r3, #1
 8009cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009cfe:	463b      	mov	r3, r7
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	f003 0301 	and.w	r3, r3, #1
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d004      	beq.n	8009d16 <USB_EPStartXfer+0xdee>
 8009d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d10:	3301      	adds	r3, #1
 8009d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	029b      	lsls	r3, r3, #10
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d24:	801a      	strh	r2, [r3, #0]
 8009d26:	e041      	b.n	8009dac <USB_EPStartXfer+0xe84>
 8009d28:	463b      	mov	r3, r7
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	095b      	lsrs	r3, r3, #5
 8009d30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d34:	463b      	mov	r3, r7
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	f003 031f 	and.w	r3, r3, #31
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d104      	bne.n	8009d4c <USB_EPStartXfer+0xe24>
 8009d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d46:	3b01      	subs	r3, #1
 8009d48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	029b      	lsls	r3, r3, #10
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d64:	801a      	strh	r2, [r3, #0]
 8009d66:	e021      	b.n	8009dac <USB_EPStartXfer+0xe84>
 8009d68:	463b      	mov	r3, r7
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	785b      	ldrb	r3, [r3, #1]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d11c      	bne.n	8009dac <USB_EPStartXfer+0xe84>
 8009d72:	1d3b      	adds	r3, r7, #4
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d82:	4413      	add	r3, r2
 8009d84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009d88:	463b      	mov	r3, r7
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	011a      	lsls	r2, r3, #4
 8009d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d94:	4413      	add	r3, r2
 8009d96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009d9e:	463b      	mov	r3, r7
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009daa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009dac:	463b      	mov	r3, r7
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 81a4 	beq.w	800a100 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009db8:	1d3b      	adds	r3, r7, #4
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	463b      	mov	r3, r7
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009dcc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d005      	beq.n	8009de4 <USB_EPStartXfer+0xebc>
 8009dd8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10d      	bne.n	8009e00 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009de4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f040 8187 	bne.w	800a100 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009df2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f040 8180 	bne.w	800a100 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009e00:	1d3b      	adds	r3, r7, #4
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	463b      	mov	r3, r7
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	881b      	ldrh	r3, [r3, #0]
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e1a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8009e1e:	1d3b      	adds	r3, r7, #4
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	463b      	mov	r3, r7
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	441a      	add	r2, r3
 8009e2c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8009e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	8013      	strh	r3, [r2, #0]
 8009e44:	e15c      	b.n	800a100 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009e46:	463b      	mov	r3, r7
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	78db      	ldrb	r3, [r3, #3]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	f040 8155 	bne.w	800a0fc <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009e52:	463b      	mov	r3, r7
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	699a      	ldr	r2, [r3, #24]
 8009e58:	463b      	mov	r3, r7
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d90e      	bls.n	8009e80 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8009e62:	463b      	mov	r3, r7
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8009e6c:	463b      	mov	r3, r7
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	699a      	ldr	r2, [r3, #24]
 8009e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e76:	1ad2      	subs	r2, r2, r3
 8009e78:	463b      	mov	r3, r7
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	619a      	str	r2, [r3, #24]
 8009e7e:	e008      	b.n	8009e92 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8009e80:	463b      	mov	r3, r7
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8009e8a:	463b      	mov	r3, r7
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009e92:	463b      	mov	r3, r7
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	785b      	ldrb	r3, [r3, #1]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d16f      	bne.n	8009f7c <USB_EPStartXfer+0x1054>
 8009e9c:	1d3b      	adds	r3, r7, #4
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ea4:	1d3b      	adds	r3, r7, #4
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	461a      	mov	r2, r3
 8009eb0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009eb4:	4413      	add	r3, r2
 8009eb6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009eba:	463b      	mov	r3, r7
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	011a      	lsls	r2, r3, #4
 8009ec2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d116      	bne.n	8009f06 <USB_EPStartXfer+0xfde>
 8009ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009eea:	801a      	strh	r2, [r3, #0]
 8009eec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ef0:	881b      	ldrh	r3, [r3, #0]
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f02:	801a      	strh	r2, [r3, #0]
 8009f04:	e05f      	b.n	8009fc6 <USB_EPStartXfer+0x109e>
 8009f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f0a:	2b3e      	cmp	r3, #62	; 0x3e
 8009f0c:	d818      	bhi.n	8009f40 <USB_EPStartXfer+0x1018>
 8009f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f12:	085b      	lsrs	r3, r3, #1
 8009f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d004      	beq.n	8009f2e <USB_EPStartXfer+0x1006>
 8009f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f28:	3301      	adds	r3, #1
 8009f2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	029b      	lsls	r3, r3, #10
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f3c:	801a      	strh	r2, [r3, #0]
 8009f3e:	e042      	b.n	8009fc6 <USB_EPStartXfer+0x109e>
 8009f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f44:	095b      	lsrs	r3, r3, #5
 8009f46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f4e:	f003 031f 	and.w	r3, r3, #31
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d104      	bne.n	8009f60 <USB_EPStartXfer+0x1038>
 8009f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	029b      	lsls	r3, r3, #10
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f78:	801a      	strh	r2, [r3, #0]
 8009f7a:	e024      	b.n	8009fc6 <USB_EPStartXfer+0x109e>
 8009f7c:	463b      	mov	r3, r7
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	785b      	ldrb	r3, [r3, #1]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d11f      	bne.n	8009fc6 <USB_EPStartXfer+0x109e>
 8009f86:	1d3b      	adds	r3, r7, #4
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f8e:	1d3b      	adds	r3, r7, #4
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	461a      	mov	r2, r3
 8009f9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009fa4:	463b      	mov	r3, r7
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	011a      	lsls	r2, r3, #4
 8009fac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009fc4:	801a      	strh	r2, [r3, #0]
 8009fc6:	1d3b      	adds	r3, r7, #4
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fce:	463b      	mov	r3, r7
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	785b      	ldrb	r3, [r3, #1]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d16f      	bne.n	800a0b8 <USB_EPStartXfer+0x1190>
 8009fd8:	1d3b      	adds	r3, r7, #4
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fe0:	1d3b      	adds	r3, r7, #4
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ff6:	463b      	mov	r3, r7
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	011a      	lsls	r2, r3, #4
 8009ffe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a002:	4413      	add	r3, r2
 800a004:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a008:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a00c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a010:	2b00      	cmp	r3, #0
 800a012:	d116      	bne.n	800a042 <USB_EPStartXfer+0x111a>
 800a014:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a020:	b29a      	uxth	r2, r3
 800a022:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a026:	801a      	strh	r2, [r3, #0]
 800a028:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a038:	b29a      	uxth	r2, r3
 800a03a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a03e:	801a      	strh	r2, [r3, #0]
 800a040:	e05e      	b.n	800a100 <USB_EPStartXfer+0x11d8>
 800a042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a046:	2b3e      	cmp	r3, #62	; 0x3e
 800a048:	d818      	bhi.n	800a07c <USB_EPStartXfer+0x1154>
 800a04a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a04e:	085b      	lsrs	r3, r3, #1
 800a050:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d004      	beq.n	800a06a <USB_EPStartXfer+0x1142>
 800a060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a064:	3301      	adds	r3, #1
 800a066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a06a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a06e:	b29b      	uxth	r3, r3
 800a070:	029b      	lsls	r3, r3, #10
 800a072:	b29a      	uxth	r2, r3
 800a074:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a078:	801a      	strh	r2, [r3, #0]
 800a07a:	e041      	b.n	800a100 <USB_EPStartXfer+0x11d8>
 800a07c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a080:	095b      	lsrs	r3, r3, #5
 800a082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a08a:	f003 031f 	and.w	r3, r3, #31
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d104      	bne.n	800a09c <USB_EPStartXfer+0x1174>
 800a092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a096:	3b01      	subs	r3, #1
 800a098:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a09c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	029b      	lsls	r3, r3, #10
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a0b4:	801a      	strh	r2, [r3, #0]
 800a0b6:	e023      	b.n	800a100 <USB_EPStartXfer+0x11d8>
 800a0b8:	463b      	mov	r3, r7
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	785b      	ldrb	r3, [r3, #1]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d11e      	bne.n	800a100 <USB_EPStartXfer+0x11d8>
 800a0c2:	1d3b      	adds	r3, r7, #4
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0d8:	463b      	mov	r3, r7
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	011a      	lsls	r2, r3, #4
 800a0e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a0ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0f2:	b29a      	uxth	r2, r3
 800a0f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a0f8:	801a      	strh	r2, [r3, #0]
 800a0fa:	e001      	b.n	800a100 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e02e      	b.n	800a15e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a100:	1d3b      	adds	r3, r7, #4
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	463b      	mov	r3, r7
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	b29b      	uxth	r3, r3
 800a112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a11e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a122:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a126:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a12a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a12e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a132:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a136:	1d3b      	adds	r3, r7, #4
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	463b      	mov	r3, r7
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	441a      	add	r2, r3
 800a144:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a14c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a158:	b29b      	uxth	r3, r3
 800a15a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	785b      	ldrb	r3, [r3, #1]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d020      	beq.n	800a1bc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4413      	add	r3, r2
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	b29b      	uxth	r3, r3
 800a188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a18c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a190:	81bb      	strh	r3, [r7, #12]
 800a192:	89bb      	ldrh	r3, [r7, #12]
 800a194:	f083 0310 	eor.w	r3, r3, #16
 800a198:	81bb      	strh	r3, [r7, #12]
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	441a      	add	r2, r3
 800a1a4:	89bb      	ldrh	r3, [r7, #12]
 800a1a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	8013      	strh	r3, [r2, #0]
 800a1ba:	e01f      	b.n	800a1fc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d2:	81fb      	strh	r3, [r7, #14]
 800a1d4:	89fb      	ldrh	r3, [r7, #14]
 800a1d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1da:	81fb      	strh	r3, [r7, #14]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	441a      	add	r2, r3
 800a1e6:	89fb      	ldrh	r3, [r7, #14]
 800a1e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	bc80      	pop	{r7}
 800a206:	4770      	bx	lr

0800a208 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a208:	b480      	push	{r7}
 800a20a:	b087      	sub	sp, #28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	7b1b      	ldrb	r3, [r3, #12]
 800a216:	2b00      	cmp	r3, #0
 800a218:	f040 809d 	bne.w	800a356 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	785b      	ldrb	r3, [r3, #1]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d04c      	beq.n	800a2be <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	823b      	strh	r3, [r7, #16]
 800a232:	8a3b      	ldrh	r3, [r7, #16]
 800a234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d01b      	beq.n	800a274 <USB_EPClearStall+0x6c>
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	b29b      	uxth	r3, r3
 800a24a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a252:	81fb      	strh	r3, [r7, #14]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	441a      	add	r2, r3
 800a25e:	89fb      	ldrh	r3, [r7, #14]
 800a260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a26c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a270:	b29b      	uxth	r3, r3
 800a272:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	78db      	ldrb	r3, [r3, #3]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d06c      	beq.n	800a356 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	b29b      	uxth	r3, r3
 800a28a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a28e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a292:	81bb      	strh	r3, [r7, #12]
 800a294:	89bb      	ldrh	r3, [r7, #12]
 800a296:	f083 0320 	eor.w	r3, r3, #32
 800a29a:	81bb      	strh	r3, [r7, #12]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	441a      	add	r2, r3
 800a2a6:	89bb      	ldrh	r3, [r7, #12]
 800a2a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	8013      	strh	r3, [r2, #0]
 800a2bc:	e04b      	b.n	800a356 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	4413      	add	r3, r2
 800a2c8:	881b      	ldrh	r3, [r3, #0]
 800a2ca:	82fb      	strh	r3, [r7, #22]
 800a2cc:	8afb      	ldrh	r3, [r7, #22]
 800a2ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d01b      	beq.n	800a30e <USB_EPClearStall+0x106>
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4413      	add	r3, r2
 800a2e0:	881b      	ldrh	r3, [r3, #0]
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ec:	82bb      	strh	r3, [r7, #20]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	441a      	add	r2, r3
 800a2f8:	8abb      	ldrh	r3, [r7, #20]
 800a2fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	881b      	ldrh	r3, [r3, #0]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a324:	827b      	strh	r3, [r7, #18]
 800a326:	8a7b      	ldrh	r3, [r7, #18]
 800a328:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a32c:	827b      	strh	r3, [r7, #18]
 800a32e:	8a7b      	ldrh	r3, [r7, #18]
 800a330:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a334:	827b      	strh	r3, [r7, #18]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	441a      	add	r2, r3
 800a340:	8a7b      	ldrh	r3, [r7, #18]
 800a342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a34a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a34e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a352:	b29b      	uxth	r3, r3
 800a354:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	371c      	adds	r7, #28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bc80      	pop	{r7}
 800a360:	4770      	bx	lr

0800a362 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	460b      	mov	r3, r1
 800a36c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a36e:	78fb      	ldrb	r3, [r7, #3]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d103      	bne.n	800a37c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2280      	movs	r2, #128	; 0x80
 800a378:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	bc80      	pop	{r7}
 800a386:	4770      	bx	lr

0800a388 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	370c      	adds	r7, #12
 800a396:	46bd      	mov	sp, r7
 800a398:	bc80      	pop	{r7}
 800a39a:	4770      	bx	lr

0800a39c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bc80      	pop	{r7}
 800a3ae:	4770      	bx	lr

0800a3b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3714      	adds	r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bc80      	pop	{r7}
 800a3cc:	4770      	bx	lr

0800a3ce <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bc80      	pop	{r7}
 800a3e2:	4770      	bx	lr

0800a3e4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b08d      	sub	sp, #52	; 0x34
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	4611      	mov	r1, r2
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	80fb      	strh	r3, [r7, #6]
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a3fa:	88bb      	ldrh	r3, [r7, #4]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	085b      	lsrs	r3, r3, #1
 800a400:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a40a:	88fb      	ldrh	r3, [r7, #6]
 800a40c:	005a      	lsls	r2, r3, #1
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	4413      	add	r3, r2
 800a412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a416:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a418:	6a3b      	ldr	r3, [r7, #32]
 800a41a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a41c:	e01e      	b.n	800a45c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	3301      	adds	r3, #1
 800a428:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	021b      	lsls	r3, r3, #8
 800a432:	b29b      	uxth	r3, r3
 800a434:	461a      	mov	r2, r3
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	4313      	orrs	r3, r2
 800a43a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	b29a      	uxth	r2, r3
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a446:	3302      	adds	r3, #2
 800a448:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44c:	3302      	adds	r3, #2
 800a44e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	3301      	adds	r3, #1
 800a454:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a458:	3b01      	subs	r3, #1
 800a45a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1dd      	bne.n	800a41e <USB_WritePMA+0x3a>
  }
}
 800a462:	bf00      	nop
 800a464:	bf00      	nop
 800a466:	3734      	adds	r7, #52	; 0x34
 800a468:	46bd      	mov	sp, r7
 800a46a:	bc80      	pop	{r7}
 800a46c:	4770      	bx	lr

0800a46e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a46e:	b480      	push	{r7}
 800a470:	b08b      	sub	sp, #44	; 0x2c
 800a472:	af00      	add	r7, sp, #0
 800a474:	60f8      	str	r0, [r7, #12]
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	4611      	mov	r1, r2
 800a47a:	461a      	mov	r2, r3
 800a47c:	460b      	mov	r3, r1
 800a47e:	80fb      	strh	r3, [r7, #6]
 800a480:	4613      	mov	r3, r2
 800a482:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a484:	88bb      	ldrh	r3, [r7, #4]
 800a486:	085b      	lsrs	r3, r3, #1
 800a488:	b29b      	uxth	r3, r3
 800a48a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a494:	88fb      	ldrh	r3, [r7, #6]
 800a496:	005a      	lsls	r2, r3, #1
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	4413      	add	r3, r2
 800a49c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4a0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4a6:	e01b      	b.n	800a4e0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	881b      	ldrh	r3, [r3, #0]
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a4b0:	6a3b      	ldr	r3, [r7, #32]
 800a4b2:	3302      	adds	r3, #2
 800a4b4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	0a1b      	lsrs	r3, r3, #8
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	3302      	adds	r3, #2
 800a4d8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	627b      	str	r3, [r7, #36]	; 0x24
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1e0      	bne.n	800a4a8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a4e6:	88bb      	ldrh	r3, [r7, #4]
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d007      	beq.n	800a502 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a4f2:	6a3b      	ldr	r3, [r7, #32]
 800a4f4:	881b      	ldrh	r3, [r3, #0]
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	701a      	strb	r2, [r3, #0]
  }
}
 800a502:	bf00      	nop
 800a504:	372c      	adds	r7, #44	; 0x2c
 800a506:	46bd      	mov	sp, r7
 800a508:	bc80      	pop	{r7}
 800a50a:	4770      	bx	lr

0800a50c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	460b      	mov	r3, r1
 800a516:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a518:	2300      	movs	r3, #0
 800a51a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	7c1b      	ldrb	r3, [r3, #16]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d115      	bne.n	800a550 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a524:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a528:	2202      	movs	r2, #2
 800a52a:	2181      	movs	r1, #129	; 0x81
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f001 fe8a 	bl	800c246 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2201      	movs	r2, #1
 800a536:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a53c:	2202      	movs	r2, #2
 800a53e:	2101      	movs	r1, #1
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f001 fe80 	bl	800c246 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2201      	movs	r2, #1
 800a54a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a54e:	e012      	b.n	800a576 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a550:	2340      	movs	r3, #64	; 0x40
 800a552:	2202      	movs	r2, #2
 800a554:	2181      	movs	r1, #129	; 0x81
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f001 fe75 	bl	800c246 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a562:	2340      	movs	r3, #64	; 0x40
 800a564:	2202      	movs	r2, #2
 800a566:	2101      	movs	r1, #1
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f001 fe6c 	bl	800c246 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a576:	2308      	movs	r3, #8
 800a578:	2203      	movs	r2, #3
 800a57a:	2182      	movs	r1, #130	; 0x82
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f001 fe62 	bl	800c246 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a588:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a58c:	f001 ff82 	bl	800c494 <USBD_static_malloc>
 800a590:	4602      	mov	r2, r0
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d102      	bne.n	800a5a8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	73fb      	strb	r3, [r7, #15]
 800a5a6:	e026      	b.n	800a5f6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	7c1b      	ldrb	r3, [r3, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d109      	bne.n	800a5e6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5dc:	2101      	movs	r1, #1
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f001 ff22 	bl	800c428 <USBD_LL_PrepareReceive>
 800a5e4:	e007      	b.n	800a5f6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5ec:	2340      	movs	r3, #64	; 0x40
 800a5ee:	2101      	movs	r1, #1
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f001 ff19 	bl	800c428 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3710      	adds	r7, #16
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	460b      	mov	r3, r1
 800a60a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a60c:	2300      	movs	r3, #0
 800a60e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a610:	2181      	movs	r1, #129	; 0x81
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f001 fe3d 	bl	800c292 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a61e:	2101      	movs	r1, #1
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f001 fe36 	bl	800c292 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a62e:	2182      	movs	r1, #130	; 0x82
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f001 fe2e 	bl	800c292 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00e      	beq.n	800a664 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a656:	4618      	mov	r0, r3
 800a658:	f001 ff28 	bl	800c4ac <USBD_static_free>
    pdev->pClassData = NULL;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a664:	7bfb      	ldrb	r3, [r7, #15]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b086      	sub	sp, #24
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a67e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a680:	2300      	movs	r3, #0
 800a682:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a684:	2300      	movs	r3, #0
 800a686:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a688:	2300      	movs	r3, #0
 800a68a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a694:	2b00      	cmp	r3, #0
 800a696:	d039      	beq.n	800a70c <USBD_CDC_Setup+0x9e>
 800a698:	2b20      	cmp	r3, #32
 800a69a:	d17f      	bne.n	800a79c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	88db      	ldrh	r3, [r3, #6]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d029      	beq.n	800a6f8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	b25b      	sxtb	r3, r3
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	da11      	bge.n	800a6d2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a6ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	88d2      	ldrh	r2, [r2, #6]
 800a6c0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a6c2:	6939      	ldr	r1, [r7, #16]
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	88db      	ldrh	r3, [r3, #6]
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f001 fa09 	bl	800bae2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a6d0:	e06b      	b.n	800a7aa <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	785a      	ldrb	r2, [r3, #1]
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	88db      	ldrh	r3, [r3, #6]
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a6e8:	6939      	ldr	r1, [r7, #16]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	88db      	ldrh	r3, [r3, #6]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f001 fa24 	bl	800bb3e <USBD_CtlPrepareRx>
      break;
 800a6f6:	e058      	b.n	800a7aa <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	7850      	ldrb	r0, [r2, #1]
 800a704:	2200      	movs	r2, #0
 800a706:	6839      	ldr	r1, [r7, #0]
 800a708:	4798      	blx	r3
      break;
 800a70a:	e04e      	b.n	800a7aa <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	785b      	ldrb	r3, [r3, #1]
 800a710:	2b0b      	cmp	r3, #11
 800a712:	d02e      	beq.n	800a772 <USBD_CDC_Setup+0x104>
 800a714:	2b0b      	cmp	r3, #11
 800a716:	dc38      	bgt.n	800a78a <USBD_CDC_Setup+0x11c>
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <USBD_CDC_Setup+0xb4>
 800a71c:	2b0a      	cmp	r3, #10
 800a71e:	d014      	beq.n	800a74a <USBD_CDC_Setup+0xdc>
 800a720:	e033      	b.n	800a78a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a728:	2b03      	cmp	r3, #3
 800a72a:	d107      	bne.n	800a73c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a72c:	f107 030c 	add.w	r3, r7, #12
 800a730:	2202      	movs	r2, #2
 800a732:	4619      	mov	r1, r3
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f001 f9d4 	bl	800bae2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a73a:	e02e      	b.n	800a79a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f001 f965 	bl	800ba0e <USBD_CtlError>
            ret = USBD_FAIL;
 800a744:	2302      	movs	r3, #2
 800a746:	75fb      	strb	r3, [r7, #23]
          break;
 800a748:	e027      	b.n	800a79a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a750:	2b03      	cmp	r3, #3
 800a752:	d107      	bne.n	800a764 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a754:	f107 030f 	add.w	r3, r7, #15
 800a758:	2201      	movs	r2, #1
 800a75a:	4619      	mov	r1, r3
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f001 f9c0 	bl	800bae2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a762:	e01a      	b.n	800a79a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a764:	6839      	ldr	r1, [r7, #0]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f001 f951 	bl	800ba0e <USBD_CtlError>
            ret = USBD_FAIL;
 800a76c:	2302      	movs	r3, #2
 800a76e:	75fb      	strb	r3, [r7, #23]
          break;
 800a770:	e013      	b.n	800a79a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a778:	2b03      	cmp	r3, #3
 800a77a:	d00d      	beq.n	800a798 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f001 f945 	bl	800ba0e <USBD_CtlError>
            ret = USBD_FAIL;
 800a784:	2302      	movs	r3, #2
 800a786:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a788:	e006      	b.n	800a798 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f001 f93e 	bl	800ba0e <USBD_CtlError>
          ret = USBD_FAIL;
 800a792:	2302      	movs	r3, #2
 800a794:	75fb      	strb	r3, [r7, #23]
          break;
 800a796:	e000      	b.n	800a79a <USBD_CDC_Setup+0x12c>
          break;
 800a798:	bf00      	nop
      }
      break;
 800a79a:	e006      	b.n	800a7aa <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a79c:	6839      	ldr	r1, [r7, #0]
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f001 f935 	bl	800ba0e <USBD_CtlError>
      ret = USBD_FAIL;
 800a7a4:	2302      	movs	r3, #2
 800a7a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7a8:	bf00      	nop
  }

  return ret;
 800a7aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7ce:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d03a      	beq.n	800a850 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a7da:	78fa      	ldrb	r2, [r7, #3]
 800a7dc:	6879      	ldr	r1, [r7, #4]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4413      	add	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	440b      	add	r3, r1
 800a7e8:	331c      	adds	r3, #28
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d029      	beq.n	800a844 <USBD_CDC_DataIn+0x90>
 800a7f0:	78fa      	ldrb	r2, [r7, #3]
 800a7f2:	6879      	ldr	r1, [r7, #4]
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	440b      	add	r3, r1
 800a7fe:	331c      	adds	r3, #28
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	78f9      	ldrb	r1, [r7, #3]
 800a804:	68b8      	ldr	r0, [r7, #8]
 800a806:	460b      	mov	r3, r1
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	440b      	add	r3, r1
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	4403      	add	r3, r0
 800a810:	3338      	adds	r3, #56	; 0x38
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	fbb2 f1f3 	udiv	r1, r2, r3
 800a818:	fb03 f301 	mul.w	r3, r3, r1
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d110      	bne.n	800a844 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a822:	78fa      	ldrb	r2, [r7, #3]
 800a824:	6879      	ldr	r1, [r7, #4]
 800a826:	4613      	mov	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4413      	add	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	440b      	add	r3, r1
 800a830:	331c      	adds	r3, #28
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a836:	78f9      	ldrb	r1, [r7, #3]
 800a838:	2300      	movs	r3, #0
 800a83a:	2200      	movs	r2, #0
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f001 fdd0 	bl	800c3e2 <USBD_LL_Transmit>
 800a842:	e003      	b.n	800a84c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	e000      	b.n	800a852 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a850:	2302      	movs	r3, #2
  }
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	460b      	mov	r3, r1
 800a864:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a86c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a86e:	78fb      	ldrb	r3, [r7, #3]
 800a870:	4619      	mov	r1, r3
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f001 fdfb 	bl	800c46e <USBD_LL_GetRxDataSize>
 800a878:	4602      	mov	r2, r0
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00d      	beq.n	800a8a6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a89e:	4611      	mov	r1, r2
 800a8a0:	4798      	blx	r3

    return USBD_OK;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e000      	b.n	800a8a8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a8a6:	2302      	movs	r3, #2
  }
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d015      	beq.n	800a8f6 <USBD_CDC_EP0_RxReady+0x46>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a8d0:	2bff      	cmp	r3, #255	; 0xff
 800a8d2:	d010      	beq.n	800a8f6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a8e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a8ea:	b292      	uxth	r2, r2
 800a8ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	22ff      	movs	r2, #255	; 0xff
 800a8f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2243      	movs	r2, #67	; 0x43
 800a90c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a90e:	4b03      	ldr	r3, [pc, #12]	; (800a91c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a910:	4618      	mov	r0, r3
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	bc80      	pop	{r7}
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	200000a8 	.word	0x200000a8

0800a920 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2243      	movs	r2, #67	; 0x43
 800a92c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a92e:	4b03      	ldr	r3, [pc, #12]	; (800a93c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a930:	4618      	mov	r0, r3
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	bc80      	pop	{r7}
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	20000064 	.word	0x20000064

0800a940 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2243      	movs	r2, #67	; 0x43
 800a94c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a94e:	4b03      	ldr	r3, [pc, #12]	; (800a95c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a950:	4618      	mov	r0, r3
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	bc80      	pop	{r7}
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	200000ec 	.word	0x200000ec

0800a960 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	220a      	movs	r2, #10
 800a96c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a96e:	4b03      	ldr	r3, [pc, #12]	; (800a97c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a970:	4618      	mov	r0, r3
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	bc80      	pop	{r7}
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	20000020 	.word	0x20000020

0800a980 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a98a:	2302      	movs	r3, #2
 800a98c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d005      	beq.n	800a9a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bc80      	pop	{r7}
 800a9aa:	4770      	bx	lr

0800a9ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b087      	sub	sp, #28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a9ca:	88fa      	ldrh	r2, [r7, #6]
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	371c      	adds	r7, #28
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bc80      	pop	{r7}
 800a9dc:	4770      	bx	lr

0800a9de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b085      	sub	sp, #20
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3714      	adds	r7, #20
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bc80      	pop	{r7}
 800aa02:	4770      	bx	lr

0800aa04 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d01c      	beq.n	800aa58 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d115      	bne.n	800aa54 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	2181      	movs	r1, #129	; 0x81
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f001 fcc9 	bl	800c3e2 <USBD_LL_Transmit>

      return USBD_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	e002      	b.n	800aa5a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800aa54:	2301      	movs	r3, #1
 800aa56:	e000      	b.n	800aa5a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800aa58:	2302      	movs	r3, #2
  }
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa70:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d017      	beq.n	800aaac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	7c1b      	ldrb	r3, [r3, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d109      	bne.n	800aa98 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa8e:	2101      	movs	r1, #1
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f001 fcc9 	bl	800c428 <USBD_LL_PrepareReceive>
 800aa96:	e007      	b.n	800aaa8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa9e:	2340      	movs	r3, #64	; 0x40
 800aaa0:	2101      	movs	r1, #1
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f001 fcc0 	bl	800c428 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	e000      	b.n	800aaae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800aaac:	2302      	movs	r3, #2
  }
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b084      	sub	sp, #16
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	60f8      	str	r0, [r7, #12]
 800aabe:	60b9      	str	r1, [r7, #8]
 800aac0:	4613      	mov	r3, r2
 800aac2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aaca:	2302      	movs	r3, #2
 800aacc:	e01a      	b.n	800ab04 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d003      	beq.n	800aae0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d003      	beq.n	800aaee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	79fa      	ldrb	r2, [r7, #7]
 800aafa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f001 fb2d 	bl	800c15c <USBD_LL_Init>

  return USBD_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ab16:	2300      	movs	r3, #0
 800ab18:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d006      	beq.n	800ab2e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	73fb      	strb	r3, [r7, #15]
 800ab2c:	e001      	b.n	800ab32 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ab2e:	2302      	movs	r3, #2
 800ab30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bc80      	pop	{r7}
 800ab3c:	4770      	bx	lr

0800ab3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f001 fb62 	bl	800c210 <USBD_LL_Start>

  return USBD_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b083      	sub	sp, #12
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bc80      	pop	{r7}
 800ab68:	4770      	bx	lr

0800ab6a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b084      	sub	sp, #16
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	460b      	mov	r3, r1
 800ab74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ab76:	2302      	movs	r3, #2
 800ab78:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00c      	beq.n	800ab9e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	78fa      	ldrb	r2, [r7, #3]
 800ab8e:	4611      	mov	r1, r2
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	4798      	blx	r3
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d101      	bne.n	800ab9e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	460b      	mov	r3, r1
 800abb2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	78fa      	ldrb	r2, [r7, #3]
 800abbe:	4611      	mov	r1, r2
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	4798      	blx	r3

  return USBD_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3708      	adds	r7, #8
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b082      	sub	sp, #8
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800abde:	6839      	ldr	r1, [r7, #0]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f000 fed8 	bl	800b996 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2201      	movs	r2, #1
 800abea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800abf4:	461a      	mov	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ac02:	f003 031f 	and.w	r3, r3, #31
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d016      	beq.n	800ac38 <USBD_LL_SetupStage+0x6a>
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d81c      	bhi.n	800ac48 <USBD_LL_SetupStage+0x7a>
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d002      	beq.n	800ac18 <USBD_LL_SetupStage+0x4a>
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d008      	beq.n	800ac28 <USBD_LL_SetupStage+0x5a>
 800ac16:	e017      	b.n	800ac48 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac1e:	4619      	mov	r1, r3
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 f9cb 	bl	800afbc <USBD_StdDevReq>
      break;
 800ac26:	e01a      	b.n	800ac5e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fa2d 	bl	800b090 <USBD_StdItfReq>
      break;
 800ac36:	e012      	b.n	800ac5e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fa6d 	bl	800b120 <USBD_StdEPReq>
      break;
 800ac46:	e00a      	b.n	800ac5e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ac4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	4619      	mov	r1, r3
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f001 fb3a 	bl	800c2d0 <USBD_LL_StallEP>
      break;
 800ac5c:	bf00      	nop
  }

  return USBD_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	460b      	mov	r3, r1
 800ac72:	607a      	str	r2, [r7, #4]
 800ac74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ac76:	7afb      	ldrb	r3, [r7, #11]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d14b      	bne.n	800ad14 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ac82:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac8a:	2b03      	cmp	r3, #3
 800ac8c:	d134      	bne.n	800acf8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	68da      	ldr	r2, [r3, #12]
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	691b      	ldr	r3, [r3, #16]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d919      	bls.n	800acce <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	68da      	ldr	r2, [r3, #12]
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	1ad2      	subs	r2, r2, r3
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	68da      	ldr	r2, [r3, #12]
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d203      	bcs.n	800acbc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800acb8:	b29b      	uxth	r3, r3
 800acba:	e002      	b.n	800acc2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	461a      	mov	r2, r3
 800acc4:	6879      	ldr	r1, [r7, #4]
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f000 ff57 	bl	800bb7a <USBD_CtlContinueRx>
 800accc:	e038      	b.n	800ad40 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00a      	beq.n	800acf0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ace0:	2b03      	cmp	r3, #3
 800ace2:	d105      	bne.n	800acf0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f000 ff54 	bl	800bb9e <USBD_CtlSendStatus>
 800acf6:	e023      	b.n	800ad40 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800acfe:	2b05      	cmp	r3, #5
 800ad00:	d11e      	bne.n	800ad40 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f001 fadf 	bl	800c2d0 <USBD_LL_StallEP>
 800ad12:	e015      	b.n	800ad40 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00d      	beq.n	800ad3c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ad26:	2b03      	cmp	r3, #3
 800ad28:	d108      	bne.n	800ad3c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad30:	699b      	ldr	r3, [r3, #24]
 800ad32:	7afa      	ldrb	r2, [r7, #11]
 800ad34:	4611      	mov	r1, r2
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	4798      	blx	r3
 800ad3a:	e001      	b.n	800ad40 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	e000      	b.n	800ad42 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3718      	adds	r7, #24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b086      	sub	sp, #24
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	60f8      	str	r0, [r7, #12]
 800ad52:	460b      	mov	r3, r1
 800ad54:	607a      	str	r2, [r7, #4]
 800ad56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ad58:	7afb      	ldrb	r3, [r7, #11]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d17f      	bne.n	800ae5e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	3314      	adds	r3, #20
 800ad62:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d15c      	bne.n	800ae28 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	68da      	ldr	r2, [r3, #12]
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d915      	bls.n	800ada6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	68da      	ldr	r2, [r3, #12]
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	1ad2      	subs	r2, r2, r3
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	461a      	mov	r2, r3
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f000 fec1 	bl	800bb1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad98:	2300      	movs	r3, #0
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f001 fb42 	bl	800c428 <USBD_LL_PrepareReceive>
 800ada4:	e04e      	b.n	800ae44 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	6912      	ldr	r2, [r2, #16]
 800adae:	fbb3 f1f2 	udiv	r1, r3, r2
 800adb2:	fb02 f201 	mul.w	r2, r2, r1
 800adb6:	1a9b      	subs	r3, r3, r2
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d11c      	bne.n	800adf6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	689a      	ldr	r2, [r3, #8]
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d316      	bcc.n	800adf6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	689a      	ldr	r2, [r3, #8]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800add2:	429a      	cmp	r2, r3
 800add4:	d20f      	bcs.n	800adf6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800add6:	2200      	movs	r2, #0
 800add8:	2100      	movs	r1, #0
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f000 fe9d 	bl	800bb1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ade8:	2300      	movs	r3, #0
 800adea:	2200      	movs	r2, #0
 800adec:	2100      	movs	r1, #0
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f001 fb1a 	bl	800c428 <USBD_LL_PrepareReceive>
 800adf4:	e026      	b.n	800ae44 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00a      	beq.n	800ae18 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ae08:	2b03      	cmp	r3, #3
 800ae0a:	d105      	bne.n	800ae18 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ae18:	2180      	movs	r1, #128	; 0x80
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f001 fa58 	bl	800c2d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f000 fecf 	bl	800bbc4 <USBD_CtlReceiveStatus>
 800ae26:	e00d      	b.n	800ae44 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae2e:	2b04      	cmp	r3, #4
 800ae30:	d004      	beq.n	800ae3c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d103      	bne.n	800ae44 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ae3c:	2180      	movs	r1, #128	; 0x80
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f001 fa46 	bl	800c2d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d11d      	bne.n	800ae8a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff fe81 	bl	800ab56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ae5c:	e015      	b.n	800ae8a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae64:	695b      	ldr	r3, [r3, #20]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00d      	beq.n	800ae86 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae70:	2b03      	cmp	r3, #3
 800ae72:	d108      	bne.n	800ae86 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae7a:	695b      	ldr	r3, [r3, #20]
 800ae7c:	7afa      	ldrb	r2, [r7, #11]
 800ae7e:	4611      	mov	r1, r2
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	4798      	blx	r3
 800ae84:	e001      	b.n	800ae8a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ae86:	2302      	movs	r3, #2
 800ae88:	e000      	b.n	800ae8c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3718      	adds	r7, #24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae9c:	2340      	movs	r3, #64	; 0x40
 800ae9e:	2200      	movs	r2, #0
 800aea0:	2100      	movs	r1, #0
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f001 f9cf 	bl	800c246 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2240      	movs	r2, #64	; 0x40
 800aeb4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aeb8:	2340      	movs	r3, #64	; 0x40
 800aeba:	2200      	movs	r2, #0
 800aebc:	2180      	movs	r1, #128	; 0x80
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f001 f9c1 	bl	800c246 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2240      	movs	r2, #64	; 0x40
 800aece:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d009      	beq.n	800af0c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	6852      	ldr	r2, [r2, #4]
 800af04:	b2d2      	uxtb	r2, r2
 800af06:	4611      	mov	r1, r2
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	4798      	blx	r3
  }

  return USBD_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af16:	b480      	push	{r7}
 800af18:	b083      	sub	sp, #12
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	460b      	mov	r3, r1
 800af20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	78fa      	ldrb	r2, [r7, #3]
 800af26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	bc80      	pop	{r7}
 800af32:	4770      	bx	lr

0800af34 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2204      	movs	r2, #4
 800af4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	370c      	adds	r7, #12
 800af56:	46bd      	mov	sp, r7
 800af58:	bc80      	pop	{r7}
 800af5a:	4770      	bx	lr

0800af5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af6a:	2b04      	cmp	r3, #4
 800af6c:	d105      	bne.n	800af7a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	bc80      	pop	{r7}
 800af84:	4770      	bx	lr

0800af86 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b082      	sub	sp, #8
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af94:	2b03      	cmp	r3, #3
 800af96:	d10b      	bne.n	800afb0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af9e:	69db      	ldr	r3, [r3, #28]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d005      	beq.n	800afb0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afaa:	69db      	ldr	r3, [r3, #28]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
	...

0800afbc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afd2:	2b40      	cmp	r3, #64	; 0x40
 800afd4:	d005      	beq.n	800afe2 <USBD_StdDevReq+0x26>
 800afd6:	2b40      	cmp	r3, #64	; 0x40
 800afd8:	d84f      	bhi.n	800b07a <USBD_StdDevReq+0xbe>
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d009      	beq.n	800aff2 <USBD_StdDevReq+0x36>
 800afde:	2b20      	cmp	r3, #32
 800afe0:	d14b      	bne.n	800b07a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	4798      	blx	r3
      break;
 800aff0:	e048      	b.n	800b084 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	785b      	ldrb	r3, [r3, #1]
 800aff6:	2b09      	cmp	r3, #9
 800aff8:	d839      	bhi.n	800b06e <USBD_StdDevReq+0xb2>
 800affa:	a201      	add	r2, pc, #4	; (adr r2, 800b000 <USBD_StdDevReq+0x44>)
 800affc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b000:	0800b051 	.word	0x0800b051
 800b004:	0800b065 	.word	0x0800b065
 800b008:	0800b06f 	.word	0x0800b06f
 800b00c:	0800b05b 	.word	0x0800b05b
 800b010:	0800b06f 	.word	0x0800b06f
 800b014:	0800b033 	.word	0x0800b033
 800b018:	0800b029 	.word	0x0800b029
 800b01c:	0800b06f 	.word	0x0800b06f
 800b020:	0800b047 	.word	0x0800b047
 800b024:	0800b03d 	.word	0x0800b03d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f9dc 	bl	800b3e8 <USBD_GetDescriptor>
          break;
 800b030:	e022      	b.n	800b078 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fb3f 	bl	800b6b8 <USBD_SetAddress>
          break;
 800b03a:	e01d      	b.n	800b078 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 fb7e 	bl	800b740 <USBD_SetConfig>
          break;
 800b044:	e018      	b.n	800b078 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fc07 	bl	800b85c <USBD_GetConfig>
          break;
 800b04e:	e013      	b.n	800b078 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fc37 	bl	800b8c6 <USBD_GetStatus>
          break;
 800b058:	e00e      	b.n	800b078 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b05a:	6839      	ldr	r1, [r7, #0]
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 fc65 	bl	800b92c <USBD_SetFeature>
          break;
 800b062:	e009      	b.n	800b078 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fc74 	bl	800b954 <USBD_ClrFeature>
          break;
 800b06c:	e004      	b.n	800b078 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fccc 	bl	800ba0e <USBD_CtlError>
          break;
 800b076:	bf00      	nop
      }
      break;
 800b078:	e004      	b.n	800b084 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 fcc6 	bl	800ba0e <USBD_CtlError>
      break;
 800b082:	bf00      	nop
  }

  return ret;
 800b084:	7bfb      	ldrb	r3, [r7, #15]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop

0800b090 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0a6:	2b40      	cmp	r3, #64	; 0x40
 800b0a8:	d005      	beq.n	800b0b6 <USBD_StdItfReq+0x26>
 800b0aa:	2b40      	cmp	r3, #64	; 0x40
 800b0ac:	d82e      	bhi.n	800b10c <USBD_StdItfReq+0x7c>
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <USBD_StdItfReq+0x26>
 800b0b2:	2b20      	cmp	r3, #32
 800b0b4:	d12a      	bne.n	800b10c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	d81d      	bhi.n	800b0fe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	889b      	ldrh	r3, [r3, #4]
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d813      	bhi.n	800b0f4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	6839      	ldr	r1, [r7, #0]
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	4798      	blx	r3
 800b0da:	4603      	mov	r3, r0
 800b0dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	88db      	ldrh	r3, [r3, #6]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d110      	bne.n	800b108 <USBD_StdItfReq+0x78>
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10d      	bne.n	800b108 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fd56 	bl	800bb9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b0f2:	e009      	b.n	800b108 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fc89 	bl	800ba0e <USBD_CtlError>
          break;
 800b0fc:	e004      	b.n	800b108 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fc84 	bl	800ba0e <USBD_CtlError>
          break;
 800b106:	e000      	b.n	800b10a <USBD_StdItfReq+0x7a>
          break;
 800b108:	bf00      	nop
      }
      break;
 800b10a:	e004      	b.n	800b116 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b10c:	6839      	ldr	r1, [r7, #0]
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 fc7d 	bl	800ba0e <USBD_CtlError>
      break;
 800b114:	bf00      	nop
  }

  return USBD_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b12a:	2300      	movs	r3, #0
 800b12c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	889b      	ldrh	r3, [r3, #4]
 800b132:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b13c:	2b40      	cmp	r3, #64	; 0x40
 800b13e:	d007      	beq.n	800b150 <USBD_StdEPReq+0x30>
 800b140:	2b40      	cmp	r3, #64	; 0x40
 800b142:	f200 8146 	bhi.w	800b3d2 <USBD_StdEPReq+0x2b2>
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00a      	beq.n	800b160 <USBD_StdEPReq+0x40>
 800b14a:	2b20      	cmp	r3, #32
 800b14c:	f040 8141 	bne.w	800b3d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	6839      	ldr	r1, [r7, #0]
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	4798      	blx	r3
      break;
 800b15e:	e13d      	b.n	800b3dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b168:	2b20      	cmp	r3, #32
 800b16a:	d10a      	bne.n	800b182 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	4798      	blx	r3
 800b17a:	4603      	mov	r3, r0
 800b17c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b17e:	7bfb      	ldrb	r3, [r7, #15]
 800b180:	e12d      	b.n	800b3de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	785b      	ldrb	r3, [r3, #1]
 800b186:	2b03      	cmp	r3, #3
 800b188:	d007      	beq.n	800b19a <USBD_StdEPReq+0x7a>
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	f300 811b 	bgt.w	800b3c6 <USBD_StdEPReq+0x2a6>
 800b190:	2b00      	cmp	r3, #0
 800b192:	d072      	beq.n	800b27a <USBD_StdEPReq+0x15a>
 800b194:	2b01      	cmp	r3, #1
 800b196:	d03a      	beq.n	800b20e <USBD_StdEPReq+0xee>
 800b198:	e115      	b.n	800b3c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d002      	beq.n	800b1aa <USBD_StdEPReq+0x8a>
 800b1a4:	2b03      	cmp	r3, #3
 800b1a6:	d015      	beq.n	800b1d4 <USBD_StdEPReq+0xb4>
 800b1a8:	e02b      	b.n	800b202 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1aa:	7bbb      	ldrb	r3, [r7, #14]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00c      	beq.n	800b1ca <USBD_StdEPReq+0xaa>
 800b1b0:	7bbb      	ldrb	r3, [r7, #14]
 800b1b2:	2b80      	cmp	r3, #128	; 0x80
 800b1b4:	d009      	beq.n	800b1ca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b1b6:	7bbb      	ldrb	r3, [r7, #14]
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f001 f888 	bl	800c2d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b1c0:	2180      	movs	r1, #128	; 0x80
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f001 f884 	bl	800c2d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1c8:	e020      	b.n	800b20c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b1ca:	6839      	ldr	r1, [r7, #0]
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fc1e 	bl	800ba0e <USBD_CtlError>
              break;
 800b1d2:	e01b      	b.n	800b20c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	885b      	ldrh	r3, [r3, #2]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10e      	bne.n	800b1fa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b1dc:	7bbb      	ldrb	r3, [r7, #14]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00b      	beq.n	800b1fa <USBD_StdEPReq+0xda>
 800b1e2:	7bbb      	ldrb	r3, [r7, #14]
 800b1e4:	2b80      	cmp	r3, #128	; 0x80
 800b1e6:	d008      	beq.n	800b1fa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	88db      	ldrh	r3, [r3, #6]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d104      	bne.n	800b1fa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b1f0:	7bbb      	ldrb	r3, [r7, #14]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f001 f86b 	bl	800c2d0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fccf 	bl	800bb9e <USBD_CtlSendStatus>

              break;
 800b200:	e004      	b.n	800b20c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 fc02 	bl	800ba0e <USBD_CtlError>
              break;
 800b20a:	bf00      	nop
          }
          break;
 800b20c:	e0e0      	b.n	800b3d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b214:	2b02      	cmp	r3, #2
 800b216:	d002      	beq.n	800b21e <USBD_StdEPReq+0xfe>
 800b218:	2b03      	cmp	r3, #3
 800b21a:	d015      	beq.n	800b248 <USBD_StdEPReq+0x128>
 800b21c:	e026      	b.n	800b26c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b21e:	7bbb      	ldrb	r3, [r7, #14]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d00c      	beq.n	800b23e <USBD_StdEPReq+0x11e>
 800b224:	7bbb      	ldrb	r3, [r7, #14]
 800b226:	2b80      	cmp	r3, #128	; 0x80
 800b228:	d009      	beq.n	800b23e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b22a:	7bbb      	ldrb	r3, [r7, #14]
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f001 f84e 	bl	800c2d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b234:	2180      	movs	r1, #128	; 0x80
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f001 f84a 	bl	800c2d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b23c:	e01c      	b.n	800b278 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fbe4 	bl	800ba0e <USBD_CtlError>
              break;
 800b246:	e017      	b.n	800b278 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	885b      	ldrh	r3, [r3, #2]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d112      	bne.n	800b276 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b250:	7bbb      	ldrb	r3, [r7, #14]
 800b252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b256:	2b00      	cmp	r3, #0
 800b258:	d004      	beq.n	800b264 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b25a:	7bbb      	ldrb	r3, [r7, #14]
 800b25c:	4619      	mov	r1, r3
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f001 f855 	bl	800c30e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 fc9a 	bl	800bb9e <USBD_CtlSendStatus>
              }
              break;
 800b26a:	e004      	b.n	800b276 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b26c:	6839      	ldr	r1, [r7, #0]
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fbcd 	bl	800ba0e <USBD_CtlError>
              break;
 800b274:	e000      	b.n	800b278 <USBD_StdEPReq+0x158>
              break;
 800b276:	bf00      	nop
          }
          break;
 800b278:	e0aa      	b.n	800b3d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b280:	2b02      	cmp	r3, #2
 800b282:	d002      	beq.n	800b28a <USBD_StdEPReq+0x16a>
 800b284:	2b03      	cmp	r3, #3
 800b286:	d032      	beq.n	800b2ee <USBD_StdEPReq+0x1ce>
 800b288:	e097      	b.n	800b3ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d007      	beq.n	800b2a0 <USBD_StdEPReq+0x180>
 800b290:	7bbb      	ldrb	r3, [r7, #14]
 800b292:	2b80      	cmp	r3, #128	; 0x80
 800b294:	d004      	beq.n	800b2a0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b296:	6839      	ldr	r1, [r7, #0]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 fbb8 	bl	800ba0e <USBD_CtlError>
                break;
 800b29e:	e091      	b.n	800b3c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	da0b      	bge.n	800b2c0 <USBD_StdEPReq+0x1a0>
 800b2a8:	7bbb      	ldrb	r3, [r7, #14]
 800b2aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	3310      	adds	r3, #16
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	3304      	adds	r3, #4
 800b2be:	e00b      	b.n	800b2d8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2c0:	7bbb      	ldrb	r3, [r7, #14]
 800b2c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4413      	add	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 fbfb 	bl	800bae2 <USBD_CtlSendData>
              break;
 800b2ec:	e06a      	b.n	800b3c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b2ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	da11      	bge.n	800b31a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b2f6:	7bbb      	ldrb	r3, [r7, #14]
 800b2f8:	f003 020f 	and.w	r2, r3, #15
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	4613      	mov	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	440b      	add	r3, r1
 800b308:	3318      	adds	r3, #24
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d117      	bne.n	800b340 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fb7b 	bl	800ba0e <USBD_CtlError>
                  break;
 800b318:	e054      	b.n	800b3c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b31a:	7bbb      	ldrb	r3, [r7, #14]
 800b31c:	f003 020f 	and.w	r2, r3, #15
 800b320:	6879      	ldr	r1, [r7, #4]
 800b322:	4613      	mov	r3, r2
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4413      	add	r3, r2
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	440b      	add	r3, r1
 800b32c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d104      	bne.n	800b340 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fb68 	bl	800ba0e <USBD_CtlError>
                  break;
 800b33e:	e041      	b.n	800b3c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b344:	2b00      	cmp	r3, #0
 800b346:	da0b      	bge.n	800b360 <USBD_StdEPReq+0x240>
 800b348:	7bbb      	ldrb	r3, [r7, #14]
 800b34a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b34e:	4613      	mov	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	3310      	adds	r3, #16
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	4413      	add	r3, r2
 800b35c:	3304      	adds	r3, #4
 800b35e:	e00b      	b.n	800b378 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b360:	7bbb      	ldrb	r3, [r7, #14]
 800b362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b366:	4613      	mov	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4413      	add	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	4413      	add	r3, r2
 800b376:	3304      	adds	r3, #4
 800b378:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b37a:	7bbb      	ldrb	r3, [r7, #14]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d002      	beq.n	800b386 <USBD_StdEPReq+0x266>
 800b380:	7bbb      	ldrb	r3, [r7, #14]
 800b382:	2b80      	cmp	r3, #128	; 0x80
 800b384:	d103      	bne.n	800b38e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]
 800b38c:	e00e      	b.n	800b3ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b38e:	7bbb      	ldrb	r3, [r7, #14]
 800b390:	4619      	mov	r1, r3
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 ffda 	bl	800c34c <USBD_LL_IsStallEP>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d003      	beq.n	800b3a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	601a      	str	r2, [r3, #0]
 800b3a4:	e002      	b.n	800b3ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fb95 	bl	800bae2 <USBD_CtlSendData>
              break;
 800b3b8:	e004      	b.n	800b3c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fb26 	bl	800ba0e <USBD_CtlError>
              break;
 800b3c2:	bf00      	nop
          }
          break;
 800b3c4:	e004      	b.n	800b3d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 fb20 	bl	800ba0e <USBD_CtlError>
          break;
 800b3ce:	bf00      	nop
      }
      break;
 800b3d0:	e004      	b.n	800b3dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b3d2:	6839      	ldr	r1, [r7, #0]
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 fb1a 	bl	800ba0e <USBD_CtlError>
      break;
 800b3da:	bf00      	nop
  }

  return ret;
 800b3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
	...

0800b3e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	885b      	ldrh	r3, [r3, #2]
 800b402:	0a1b      	lsrs	r3, r3, #8
 800b404:	b29b      	uxth	r3, r3
 800b406:	3b01      	subs	r3, #1
 800b408:	2b06      	cmp	r3, #6
 800b40a:	f200 8128 	bhi.w	800b65e <USBD_GetDescriptor+0x276>
 800b40e:	a201      	add	r2, pc, #4	; (adr r2, 800b414 <USBD_GetDescriptor+0x2c>)
 800b410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b414:	0800b431 	.word	0x0800b431
 800b418:	0800b449 	.word	0x0800b449
 800b41c:	0800b489 	.word	0x0800b489
 800b420:	0800b65f 	.word	0x0800b65f
 800b424:	0800b65f 	.word	0x0800b65f
 800b428:	0800b5ff 	.word	0x0800b5ff
 800b42c:	0800b62b 	.word	0x0800b62b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	7c12      	ldrb	r2, [r2, #16]
 800b43c:	f107 0108 	add.w	r1, r7, #8
 800b440:	4610      	mov	r0, r2
 800b442:	4798      	blx	r3
 800b444:	60f8      	str	r0, [r7, #12]
      break;
 800b446:	e112      	b.n	800b66e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	7c1b      	ldrb	r3, [r3, #16]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d10d      	bne.n	800b46c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b458:	f107 0208 	add.w	r2, r7, #8
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
 800b460:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3301      	adds	r3, #1
 800b466:	2202      	movs	r2, #2
 800b468:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b46a:	e100      	b.n	800b66e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b474:	f107 0208 	add.w	r2, r7, #8
 800b478:	4610      	mov	r0, r2
 800b47a:	4798      	blx	r3
 800b47c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	3301      	adds	r3, #1
 800b482:	2202      	movs	r2, #2
 800b484:	701a      	strb	r2, [r3, #0]
      break;
 800b486:	e0f2      	b.n	800b66e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	885b      	ldrh	r3, [r3, #2]
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b05      	cmp	r3, #5
 800b490:	f200 80ac 	bhi.w	800b5ec <USBD_GetDescriptor+0x204>
 800b494:	a201      	add	r2, pc, #4	; (adr r2, 800b49c <USBD_GetDescriptor+0xb4>)
 800b496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49a:	bf00      	nop
 800b49c:	0800b4b5 	.word	0x0800b4b5
 800b4a0:	0800b4e9 	.word	0x0800b4e9
 800b4a4:	0800b51d 	.word	0x0800b51d
 800b4a8:	0800b551 	.word	0x0800b551
 800b4ac:	0800b585 	.word	0x0800b585
 800b4b0:	0800b5b9 	.word	0x0800b5b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00b      	beq.n	800b4d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	7c12      	ldrb	r2, [r2, #16]
 800b4cc:	f107 0108 	add.w	r1, r7, #8
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	4798      	blx	r3
 800b4d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4d6:	e091      	b.n	800b5fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4d8:	6839      	ldr	r1, [r7, #0]
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 fa97 	bl	800ba0e <USBD_CtlError>
            err++;
 800b4e0:	7afb      	ldrb	r3, [r7, #11]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b4e6:	e089      	b.n	800b5fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00b      	beq.n	800b50c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	7c12      	ldrb	r2, [r2, #16]
 800b500:	f107 0108 	add.w	r1, r7, #8
 800b504:	4610      	mov	r0, r2
 800b506:	4798      	blx	r3
 800b508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b50a:	e077      	b.n	800b5fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fa7d 	bl	800ba0e <USBD_CtlError>
            err++;
 800b514:	7afb      	ldrb	r3, [r7, #11]
 800b516:	3301      	adds	r3, #1
 800b518:	72fb      	strb	r3, [r7, #11]
          break;
 800b51a:	e06f      	b.n	800b5fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00b      	beq.n	800b540 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	7c12      	ldrb	r2, [r2, #16]
 800b534:	f107 0108 	add.w	r1, r7, #8
 800b538:	4610      	mov	r0, r2
 800b53a:	4798      	blx	r3
 800b53c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b53e:	e05d      	b.n	800b5fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b540:	6839      	ldr	r1, [r7, #0]
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fa63 	bl	800ba0e <USBD_CtlError>
            err++;
 800b548:	7afb      	ldrb	r3, [r7, #11]
 800b54a:	3301      	adds	r3, #1
 800b54c:	72fb      	strb	r3, [r7, #11]
          break;
 800b54e:	e055      	b.n	800b5fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00b      	beq.n	800b574 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	7c12      	ldrb	r2, [r2, #16]
 800b568:	f107 0108 	add.w	r1, r7, #8
 800b56c:	4610      	mov	r0, r2
 800b56e:	4798      	blx	r3
 800b570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b572:	e043      	b.n	800b5fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b574:	6839      	ldr	r1, [r7, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 fa49 	bl	800ba0e <USBD_CtlError>
            err++;
 800b57c:	7afb      	ldrb	r3, [r7, #11]
 800b57e:	3301      	adds	r3, #1
 800b580:	72fb      	strb	r3, [r7, #11]
          break;
 800b582:	e03b      	b.n	800b5fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b58a:	695b      	ldr	r3, [r3, #20]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00b      	beq.n	800b5a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b596:	695b      	ldr	r3, [r3, #20]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	7c12      	ldrb	r2, [r2, #16]
 800b59c:	f107 0108 	add.w	r1, r7, #8
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	4798      	blx	r3
 800b5a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5a6:	e029      	b.n	800b5fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 fa2f 	bl	800ba0e <USBD_CtlError>
            err++;
 800b5b0:	7afb      	ldrb	r3, [r7, #11]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5b6:	e021      	b.n	800b5fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5be:	699b      	ldr	r3, [r3, #24]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00b      	beq.n	800b5dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	7c12      	ldrb	r2, [r2, #16]
 800b5d0:	f107 0108 	add.w	r1, r7, #8
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	4798      	blx	r3
 800b5d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5da:	e00f      	b.n	800b5fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5dc:	6839      	ldr	r1, [r7, #0]
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 fa15 	bl	800ba0e <USBD_CtlError>
            err++;
 800b5e4:	7afb      	ldrb	r3, [r7, #11]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ea:	e007      	b.n	800b5fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b5ec:	6839      	ldr	r1, [r7, #0]
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 fa0d 	bl	800ba0e <USBD_CtlError>
          err++;
 800b5f4:	7afb      	ldrb	r3, [r7, #11]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b5fa:	e038      	b.n	800b66e <USBD_GetDescriptor+0x286>
 800b5fc:	e037      	b.n	800b66e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	7c1b      	ldrb	r3, [r3, #16]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d109      	bne.n	800b61a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b60e:	f107 0208 	add.w	r2, r7, #8
 800b612:	4610      	mov	r0, r2
 800b614:	4798      	blx	r3
 800b616:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b618:	e029      	b.n	800b66e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b61a:	6839      	ldr	r1, [r7, #0]
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f9f6 	bl	800ba0e <USBD_CtlError>
        err++;
 800b622:	7afb      	ldrb	r3, [r7, #11]
 800b624:	3301      	adds	r3, #1
 800b626:	72fb      	strb	r3, [r7, #11]
      break;
 800b628:	e021      	b.n	800b66e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	7c1b      	ldrb	r3, [r3, #16]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10d      	bne.n	800b64e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63a:	f107 0208 	add.w	r2, r7, #8
 800b63e:	4610      	mov	r0, r2
 800b640:	4798      	blx	r3
 800b642:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	3301      	adds	r3, #1
 800b648:	2207      	movs	r2, #7
 800b64a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b64c:	e00f      	b.n	800b66e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f9dc 	bl	800ba0e <USBD_CtlError>
        err++;
 800b656:	7afb      	ldrb	r3, [r7, #11]
 800b658:	3301      	adds	r3, #1
 800b65a:	72fb      	strb	r3, [r7, #11]
      break;
 800b65c:	e007      	b.n	800b66e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b65e:	6839      	ldr	r1, [r7, #0]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f9d4 	bl	800ba0e <USBD_CtlError>
      err++;
 800b666:	7afb      	ldrb	r3, [r7, #11]
 800b668:	3301      	adds	r3, #1
 800b66a:	72fb      	strb	r3, [r7, #11]
      break;
 800b66c:	bf00      	nop
  }

  if (err != 0U)
 800b66e:	7afb      	ldrb	r3, [r7, #11]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d11c      	bne.n	800b6ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b674:	893b      	ldrh	r3, [r7, #8]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d011      	beq.n	800b69e <USBD_GetDescriptor+0x2b6>
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	88db      	ldrh	r3, [r3, #6]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00d      	beq.n	800b69e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	88da      	ldrh	r2, [r3, #6]
 800b686:	893b      	ldrh	r3, [r7, #8]
 800b688:	4293      	cmp	r3, r2
 800b68a:	bf28      	it	cs
 800b68c:	4613      	movcs	r3, r2
 800b68e:	b29b      	uxth	r3, r3
 800b690:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b692:	893b      	ldrh	r3, [r7, #8]
 800b694:	461a      	mov	r2, r3
 800b696:	68f9      	ldr	r1, [r7, #12]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fa22 	bl	800bae2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	88db      	ldrh	r3, [r3, #6]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d104      	bne.n	800b6b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fa79 	bl	800bb9e <USBD_CtlSendStatus>
 800b6ac:	e000      	b.n	800b6b0 <USBD_GetDescriptor+0x2c8>
    return;
 800b6ae:	bf00      	nop
    }
  }
}
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop

0800b6b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	889b      	ldrh	r3, [r3, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d130      	bne.n	800b72c <USBD_SetAddress+0x74>
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	88db      	ldrh	r3, [r3, #6]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d12c      	bne.n	800b72c <USBD_SetAddress+0x74>
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	885b      	ldrh	r3, [r3, #2]
 800b6d6:	2b7f      	cmp	r3, #127	; 0x7f
 800b6d8:	d828      	bhi.n	800b72c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	885b      	ldrh	r3, [r3, #2]
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ec:	2b03      	cmp	r3, #3
 800b6ee:	d104      	bne.n	800b6fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b6f0:	6839      	ldr	r1, [r7, #0]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 f98b 	bl	800ba0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6f8:	e01d      	b.n	800b736 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	7bfa      	ldrb	r2, [r7, #15]
 800b6fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b702:	7bfb      	ldrb	r3, [r7, #15]
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fe4c 	bl	800c3a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fa46 	bl	800bb9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d004      	beq.n	800b722 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2202      	movs	r2, #2
 800b71c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b720:	e009      	b.n	800b736 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b72a:	e004      	b.n	800b736 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b72c:	6839      	ldr	r1, [r7, #0]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 f96d 	bl	800ba0e <USBD_CtlError>
  }
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
	...

0800b740 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	885b      	ldrh	r3, [r3, #2]
 800b74e:	b2da      	uxtb	r2, r3
 800b750:	4b41      	ldr	r3, [pc, #260]	; (800b858 <USBD_SetConfig+0x118>)
 800b752:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b754:	4b40      	ldr	r3, [pc, #256]	; (800b858 <USBD_SetConfig+0x118>)
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d904      	bls.n	800b766 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f955 	bl	800ba0e <USBD_CtlError>
 800b764:	e075      	b.n	800b852 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	d002      	beq.n	800b776 <USBD_SetConfig+0x36>
 800b770:	2b03      	cmp	r3, #3
 800b772:	d023      	beq.n	800b7bc <USBD_SetConfig+0x7c>
 800b774:	e062      	b.n	800b83c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b776:	4b38      	ldr	r3, [pc, #224]	; (800b858 <USBD_SetConfig+0x118>)
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d01a      	beq.n	800b7b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b77e:	4b36      	ldr	r3, [pc, #216]	; (800b858 <USBD_SetConfig+0x118>)
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	461a      	mov	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2203      	movs	r2, #3
 800b78c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b790:	4b31      	ldr	r3, [pc, #196]	; (800b858 <USBD_SetConfig+0x118>)
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	4619      	mov	r1, r3
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f7ff f9e7 	bl	800ab6a <USBD_SetClassConfig>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d104      	bne.n	800b7ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 f932 	bl	800ba0e <USBD_CtlError>
            return;
 800b7aa:	e052      	b.n	800b852 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f9f6 	bl	800bb9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b7b2:	e04e      	b.n	800b852 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f9f2 	bl	800bb9e <USBD_CtlSendStatus>
        break;
 800b7ba:	e04a      	b.n	800b852 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b7bc:	4b26      	ldr	r3, [pc, #152]	; (800b858 <USBD_SetConfig+0x118>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d112      	bne.n	800b7ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2202      	movs	r2, #2
 800b7c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b7cc:	4b22      	ldr	r3, [pc, #136]	; (800b858 <USBD_SetConfig+0x118>)
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b7d6:	4b20      	ldr	r3, [pc, #128]	; (800b858 <USBD_SetConfig+0x118>)
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7ff f9e3 	bl	800aba8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f9db 	bl	800bb9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b7e8:	e033      	b.n	800b852 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b7ea:	4b1b      	ldr	r3, [pc, #108]	; (800b858 <USBD_SetConfig+0x118>)
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d01d      	beq.n	800b834 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff f9d1 	bl	800aba8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b806:	4b14      	ldr	r3, [pc, #80]	; (800b858 <USBD_SetConfig+0x118>)
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	461a      	mov	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b810:	4b11      	ldr	r3, [pc, #68]	; (800b858 <USBD_SetConfig+0x118>)
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	4619      	mov	r1, r3
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff f9a7 	bl	800ab6a <USBD_SetClassConfig>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b02      	cmp	r3, #2
 800b820:	d104      	bne.n	800b82c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 f8f2 	bl	800ba0e <USBD_CtlError>
            return;
 800b82a:	e012      	b.n	800b852 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 f9b6 	bl	800bb9e <USBD_CtlSendStatus>
        break;
 800b832:	e00e      	b.n	800b852 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 f9b2 	bl	800bb9e <USBD_CtlSendStatus>
        break;
 800b83a:	e00a      	b.n	800b852 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b83c:	6839      	ldr	r1, [r7, #0]
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f8e5 	bl	800ba0e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b844:	4b04      	ldr	r3, [pc, #16]	; (800b858 <USBD_SetConfig+0x118>)
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	4619      	mov	r1, r3
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f7ff f9ac 	bl	800aba8 <USBD_ClrClassConfig>
        break;
 800b850:	bf00      	nop
    }
  }
}
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	20000280 	.word	0x20000280

0800b85c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	88db      	ldrh	r3, [r3, #6]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d004      	beq.n	800b878 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f8cc 	bl	800ba0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b876:	e022      	b.n	800b8be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b87e:	2b02      	cmp	r3, #2
 800b880:	dc02      	bgt.n	800b888 <USBD_GetConfig+0x2c>
 800b882:	2b00      	cmp	r3, #0
 800b884:	dc03      	bgt.n	800b88e <USBD_GetConfig+0x32>
 800b886:	e015      	b.n	800b8b4 <USBD_GetConfig+0x58>
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d00b      	beq.n	800b8a4 <USBD_GetConfig+0x48>
 800b88c:	e012      	b.n	800b8b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3308      	adds	r3, #8
 800b898:	2201      	movs	r2, #1
 800b89a:	4619      	mov	r1, r3
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 f920 	bl	800bae2 <USBD_CtlSendData>
        break;
 800b8a2:	e00c      	b.n	800b8be <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f918 	bl	800bae2 <USBD_CtlSendData>
        break;
 800b8b2:	e004      	b.n	800b8be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f8a9 	bl	800ba0e <USBD_CtlError>
        break;
 800b8bc:	bf00      	nop
}
 800b8be:	bf00      	nop
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b082      	sub	sp, #8
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
 800b8ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d81e      	bhi.n	800b91a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	88db      	ldrh	r3, [r3, #6]
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	d004      	beq.n	800b8ee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 f891 	bl	800ba0e <USBD_CtlError>
        break;
 800b8ec:	e01a      	b.n	800b924 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d005      	beq.n	800b90a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	f043 0202 	orr.w	r2, r3, #2
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	330c      	adds	r3, #12
 800b90e:	2202      	movs	r2, #2
 800b910:	4619      	mov	r1, r3
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f8e5 	bl	800bae2 <USBD_CtlSendData>
      break;
 800b918:	e004      	b.n	800b924 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b91a:	6839      	ldr	r1, [r7, #0]
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 f876 	bl	800ba0e <USBD_CtlError>
      break;
 800b922:	bf00      	nop
  }
}
 800b924:	bf00      	nop
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	885b      	ldrh	r3, [r3, #2]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d106      	bne.n	800b94c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2201      	movs	r2, #1
 800b942:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f929 	bl	800bb9e <USBD_CtlSendStatus>
  }
}
 800b94c:	bf00      	nop
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b964:	3b01      	subs	r3, #1
 800b966:	2b02      	cmp	r3, #2
 800b968:	d80b      	bhi.n	800b982 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	885b      	ldrh	r3, [r3, #2]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d10c      	bne.n	800b98c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 f90f 	bl	800bb9e <USBD_CtlSendStatus>
      }
      break;
 800b980:	e004      	b.n	800b98c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b982:	6839      	ldr	r1, [r7, #0]
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 f842 	bl	800ba0e <USBD_CtlError>
      break;
 800b98a:	e000      	b.n	800b98e <USBD_ClrFeature+0x3a>
      break;
 800b98c:	bf00      	nop
  }
}
 800b98e:	bf00      	nop
 800b990:	3708      	adds	r7, #8
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b996:	b480      	push	{r7}
 800b998:	b083      	sub	sp, #12
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	781a      	ldrb	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	785a      	ldrb	r2, [r3, #1]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	3302      	adds	r3, #2
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	3303      	adds	r3, #3
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	021b      	lsls	r3, r3, #8
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	4413      	add	r3, r2
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	3305      	adds	r3, #5
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	021b      	lsls	r3, r3, #8
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	4413      	add	r3, r2
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	3306      	adds	r3, #6
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	3307      	adds	r3, #7
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	021b      	lsls	r3, r3, #8
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	4413      	add	r3, r2
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	80da      	strh	r2, [r3, #6]

}
 800ba04:	bf00      	nop
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bc80      	pop	{r7}
 800ba0c:	4770      	bx	lr

0800ba0e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b082      	sub	sp, #8
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ba18:	2180      	movs	r1, #128	; 0x80
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fc58 	bl	800c2d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ba20:	2100      	movs	r1, #0
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fc54 	bl	800c2d0 <USBD_LL_StallEP>
}
 800ba28:	bf00      	nop
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d032      	beq.n	800baac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f000 f834 	bl	800bab4 <USBD_GetLen>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	3301      	adds	r3, #1
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	005b      	lsls	r3, r3, #1
 800ba54:	b29a      	uxth	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ba5a:	7dfb      	ldrb	r3, [r7, #23]
 800ba5c:	1c5a      	adds	r2, r3, #1
 800ba5e:	75fa      	strb	r2, [r7, #23]
 800ba60:	461a      	mov	r2, r3
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	4413      	add	r3, r2
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	7812      	ldrb	r2, [r2, #0]
 800ba6a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
 800ba6e:	1c5a      	adds	r2, r3, #1
 800ba70:	75fa      	strb	r2, [r7, #23]
 800ba72:	461a      	mov	r2, r3
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	4413      	add	r3, r2
 800ba78:	2203      	movs	r2, #3
 800ba7a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ba7c:	e012      	b.n	800baa4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	1c5a      	adds	r2, r3, #1
 800ba82:	60fa      	str	r2, [r7, #12]
 800ba84:	7dfa      	ldrb	r2, [r7, #23]
 800ba86:	1c51      	adds	r1, r2, #1
 800ba88:	75f9      	strb	r1, [r7, #23]
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	440a      	add	r2, r1
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ba94:	7dfb      	ldrb	r3, [r7, #23]
 800ba96:	1c5a      	adds	r2, r3, #1
 800ba98:	75fa      	strb	r2, [r7, #23]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	4413      	add	r3, r2
 800baa0:	2200      	movs	r2, #0
 800baa2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1e8      	bne.n	800ba7e <USBD_GetString+0x4e>
    }
  }
}
 800baac:	bf00      	nop
 800baae:	3718      	adds	r7, #24
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800babc:	2300      	movs	r3, #0
 800babe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bac0:	e005      	b.n	800bace <USBD_GetLen+0x1a>
  {
    len++;
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
 800bac4:	3301      	adds	r3, #1
 800bac6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	3301      	adds	r3, #1
 800bacc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1f5      	bne.n	800bac2 <USBD_GetLen+0xe>
  }

  return len;
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	bc80      	pop	{r7}
 800bae0:	4770      	bx	lr

0800bae2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b084      	sub	sp, #16
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	60f8      	str	r0, [r7, #12]
 800baea:	60b9      	str	r1, [r7, #8]
 800baec:	4613      	mov	r3, r2
 800baee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2202      	movs	r2, #2
 800baf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800baf8:	88fa      	ldrh	r2, [r7, #6]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bafe:	88fa      	ldrh	r2, [r7, #6]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb04:	88fb      	ldrh	r3, [r7, #6]
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	2100      	movs	r1, #0
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f000 fc69 	bl	800c3e2 <USBD_LL_Transmit>

  return USBD_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	60f8      	str	r0, [r7, #12]
 800bb22:	60b9      	str	r1, [r7, #8]
 800bb24:	4613      	mov	r3, r2
 800bb26:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb28:	88fb      	ldrh	r3, [r7, #6]
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f000 fc57 	bl	800c3e2 <USBD_LL_Transmit>

  return USBD_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b084      	sub	sp, #16
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	60f8      	str	r0, [r7, #12]
 800bb46:	60b9      	str	r1, [r7, #8]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2203      	movs	r2, #3
 800bb50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bb54:	88fa      	ldrh	r2, [r7, #6]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bb5c:	88fa      	ldrh	r2, [r7, #6]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb64:	88fb      	ldrh	r3, [r7, #6]
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	2100      	movs	r1, #0
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f000 fc5c 	bl	800c428 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b084      	sub	sp, #16
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	60f8      	str	r0, [r7, #12]
 800bb82:	60b9      	str	r1, [r7, #8]
 800bb84:	4613      	mov	r3, r2
 800bb86:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb88:	88fb      	ldrh	r3, [r7, #6]
 800bb8a:	68ba      	ldr	r2, [r7, #8]
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f000 fc4a 	bl	800c428 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b082      	sub	sp, #8
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2204      	movs	r2, #4
 800bbaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbae:	2300      	movs	r3, #0
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fc14 	bl	800c3e2 <USBD_LL_Transmit>

  return USBD_OK;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2205      	movs	r2, #5
 800bbd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	2100      	movs	r1, #0
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fc24 	bl	800c428 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3708      	adds	r7, #8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
	...

0800bbec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	4912      	ldr	r1, [pc, #72]	; (800bc3c <MX_USB_DEVICE_Init+0x50>)
 800bbf4:	4812      	ldr	r0, [pc, #72]	; (800bc40 <MX_USB_DEVICE_Init+0x54>)
 800bbf6:	f7fe ff5e 	bl	800aab6 <USBD_Init>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d001      	beq.n	800bc04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc00:	f7f7 fe6a 	bl	80038d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc04:	490f      	ldr	r1, [pc, #60]	; (800bc44 <MX_USB_DEVICE_Init+0x58>)
 800bc06:	480e      	ldr	r0, [pc, #56]	; (800bc40 <MX_USB_DEVICE_Init+0x54>)
 800bc08:	f7fe ff80 	bl	800ab0c <USBD_RegisterClass>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d001      	beq.n	800bc16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc12:	f7f7 fe61 	bl	80038d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc16:	490c      	ldr	r1, [pc, #48]	; (800bc48 <MX_USB_DEVICE_Init+0x5c>)
 800bc18:	4809      	ldr	r0, [pc, #36]	; (800bc40 <MX_USB_DEVICE_Init+0x54>)
 800bc1a:	f7fe feb1 	bl	800a980 <USBD_CDC_RegisterInterface>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bc24:	f7f7 fe58 	bl	80038d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc28:	4805      	ldr	r0, [pc, #20]	; (800bc40 <MX_USB_DEVICE_Init+0x54>)
 800bc2a:	f7fe ff88 	bl	800ab3e <USBD_Start>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bc34:	f7f7 fe50 	bl	80038d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc38:	bf00      	nop
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	20000140 	.word	0x20000140
 800bc40:	20000a00 	.word	0x20000a00
 800bc44:	2000002c 	.word	0x2000002c
 800bc48:	20000130 	.word	0x20000130

0800bc4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc50:	2200      	movs	r2, #0
 800bc52:	4905      	ldr	r1, [pc, #20]	; (800bc68 <CDC_Init_FS+0x1c>)
 800bc54:	4805      	ldr	r0, [pc, #20]	; (800bc6c <CDC_Init_FS+0x20>)
 800bc56:	f7fe fea9 	bl	800a9ac <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc5a:	4905      	ldr	r1, [pc, #20]	; (800bc70 <CDC_Init_FS+0x24>)
 800bc5c:	4803      	ldr	r0, [pc, #12]	; (800bc6c <CDC_Init_FS+0x20>)
 800bc5e:	f7fe febe 	bl	800a9de <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800bc62:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	20000ec4 	.word	0x20000ec4
 800bc6c:	20000a00 	.word	0x20000a00
 800bc70:	20000cc4 	.word	0x20000cc4

0800bc74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc74:	b480      	push	{r7}
 800bc76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800bc78:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bc80      	pop	{r7}
 800bc80:	4770      	bx	lr
	...

0800bc84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	6039      	str	r1, [r7, #0]
 800bc8e:	71fb      	strb	r3, [r7, #7]
 800bc90:	4613      	mov	r3, r2
 800bc92:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd)
 800bc94:	79fb      	ldrb	r3, [r7, #7]
 800bc96:	2b23      	cmp	r3, #35	; 0x23
 800bc98:	d84a      	bhi.n	800bd30 <CDC_Control_FS+0xac>
 800bc9a:	a201      	add	r2, pc, #4	; (adr r2, 800bca0 <CDC_Control_FS+0x1c>)
 800bc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca0:	0800bd31 	.word	0x0800bd31
 800bca4:	0800bd31 	.word	0x0800bd31
 800bca8:	0800bd31 	.word	0x0800bd31
 800bcac:	0800bd31 	.word	0x0800bd31
 800bcb0:	0800bd31 	.word	0x0800bd31
 800bcb4:	0800bd31 	.word	0x0800bd31
 800bcb8:	0800bd31 	.word	0x0800bd31
 800bcbc:	0800bd31 	.word	0x0800bd31
 800bcc0:	0800bd31 	.word	0x0800bd31
 800bcc4:	0800bd31 	.word	0x0800bd31
 800bcc8:	0800bd31 	.word	0x0800bd31
 800bccc:	0800bd31 	.word	0x0800bd31
 800bcd0:	0800bd31 	.word	0x0800bd31
 800bcd4:	0800bd31 	.word	0x0800bd31
 800bcd8:	0800bd31 	.word	0x0800bd31
 800bcdc:	0800bd31 	.word	0x0800bd31
 800bce0:	0800bd31 	.word	0x0800bd31
 800bce4:	0800bd31 	.word	0x0800bd31
 800bce8:	0800bd31 	.word	0x0800bd31
 800bcec:	0800bd31 	.word	0x0800bd31
 800bcf0:	0800bd31 	.word	0x0800bd31
 800bcf4:	0800bd31 	.word	0x0800bd31
 800bcf8:	0800bd31 	.word	0x0800bd31
 800bcfc:	0800bd31 	.word	0x0800bd31
 800bd00:	0800bd31 	.word	0x0800bd31
 800bd04:	0800bd31 	.word	0x0800bd31
 800bd08:	0800bd31 	.word	0x0800bd31
 800bd0c:	0800bd31 	.word	0x0800bd31
 800bd10:	0800bd31 	.word	0x0800bd31
 800bd14:	0800bd31 	.word	0x0800bd31
 800bd18:	0800bd31 	.word	0x0800bd31
 800bd1c:	0800bd31 	.word	0x0800bd31
 800bd20:	0800bd31 	.word	0x0800bd31
 800bd24:	0800bd31 	.word	0x0800bd31
 800bd28:	0800bd31 	.word	0x0800bd31
 800bd2c:	0800bd31 	.word	0x0800bd31
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800bd30:	bf00      	nop
	}

	return (USBD_OK);
 800bd32:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bc80      	pop	{r7}
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop

0800bd40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd4a:	6879      	ldr	r1, [r7, #4]
 800bd4c:	4807      	ldr	r0, [pc, #28]	; (800bd6c <CDC_Receive_FS+0x2c>)
 800bd4e:	f7fe fe46 	bl	800a9de <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd52:	4806      	ldr	r0, [pc, #24]	; (800bd6c <CDC_Receive_FS+0x2c>)
 800bd54:	f7fe fe85 	bl	800aa62 <USBD_CDC_ReceivePacket>

	runCommands(Buf, Len);
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f7f6 fca2 	bl	80026a4 <runCommands>
	return (USBD_OK);
 800bd60:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	20000a00 	.word	0x20000a00

0800bd70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800bd80:	4b0d      	ldr	r3, [pc, #52]	; (800bdb8 <CDC_Transmit_FS+0x48>)
 800bd82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd86:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800bd92:	2301      	movs	r3, #1
 800bd94:	e00b      	b.n	800bdae <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bd96:	887b      	ldrh	r3, [r7, #2]
 800bd98:	461a      	mov	r2, r3
 800bd9a:	6879      	ldr	r1, [r7, #4]
 800bd9c:	4806      	ldr	r0, [pc, #24]	; (800bdb8 <CDC_Transmit_FS+0x48>)
 800bd9e:	f7fe fe05 	bl	800a9ac <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bda2:	4805      	ldr	r0, [pc, #20]	; (800bdb8 <CDC_Transmit_FS+0x48>)
 800bda4:	f7fe fe2e 	bl	800aa04 <USBD_CDC_TransmitPacket>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20000a00 	.word	0x20000a00

0800bdbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	6039      	str	r1, [r7, #0]
 800bdc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	2212      	movs	r2, #18
 800bdcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bdce:	4b03      	ldr	r3, [pc, #12]	; (800bddc <USBD_FS_DeviceDescriptor+0x20>)
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bc80      	pop	{r7}
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	2000015c 	.word	0x2000015c

0800bde0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	4603      	mov	r3, r0
 800bde8:	6039      	str	r1, [r7, #0]
 800bdea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	2204      	movs	r2, #4
 800bdf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdf2:	4b03      	ldr	r3, [pc, #12]	; (800be00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bc80      	pop	{r7}
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	20000170 	.word	0x20000170

0800be04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	4603      	mov	r3, r0
 800be0c:	6039      	str	r1, [r7, #0]
 800be0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be10:	79fb      	ldrb	r3, [r7, #7]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d105      	bne.n	800be22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be16:	683a      	ldr	r2, [r7, #0]
 800be18:	4907      	ldr	r1, [pc, #28]	; (800be38 <USBD_FS_ProductStrDescriptor+0x34>)
 800be1a:	4808      	ldr	r0, [pc, #32]	; (800be3c <USBD_FS_ProductStrDescriptor+0x38>)
 800be1c:	f7ff fe08 	bl	800ba30 <USBD_GetString>
 800be20:	e004      	b.n	800be2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be22:	683a      	ldr	r2, [r7, #0]
 800be24:	4904      	ldr	r1, [pc, #16]	; (800be38 <USBD_FS_ProductStrDescriptor+0x34>)
 800be26:	4805      	ldr	r0, [pc, #20]	; (800be3c <USBD_FS_ProductStrDescriptor+0x38>)
 800be28:	f7ff fe02 	bl	800ba30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be2c:	4b02      	ldr	r3, [pc, #8]	; (800be38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	200010c4 	.word	0x200010c4
 800be3c:	0800dab4 	.word	0x0800dab4

0800be40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	4603      	mov	r3, r0
 800be48:	6039      	str	r1, [r7, #0]
 800be4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	4904      	ldr	r1, [pc, #16]	; (800be60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be50:	4804      	ldr	r0, [pc, #16]	; (800be64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be52:	f7ff fded 	bl	800ba30 <USBD_GetString>
  return USBD_StrDesc;
 800be56:	4b02      	ldr	r3, [pc, #8]	; (800be60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	200010c4 	.word	0x200010c4
 800be64:	0800dacc 	.word	0x0800dacc

0800be68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	4603      	mov	r3, r0
 800be70:	6039      	str	r1, [r7, #0]
 800be72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	221a      	movs	r2, #26
 800be78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be7a:	f000 f843 	bl	800bf04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be7e:	4b02      	ldr	r3, [pc, #8]	; (800be88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be80:	4618      	mov	r0, r3
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	20000174 	.word	0x20000174

0800be8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	4603      	mov	r3, r0
 800be94:	6039      	str	r1, [r7, #0]
 800be96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be98:	79fb      	ldrb	r3, [r7, #7]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d105      	bne.n	800beaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be9e:	683a      	ldr	r2, [r7, #0]
 800bea0:	4907      	ldr	r1, [pc, #28]	; (800bec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bea2:	4808      	ldr	r0, [pc, #32]	; (800bec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bea4:	f7ff fdc4 	bl	800ba30 <USBD_GetString>
 800bea8:	e004      	b.n	800beb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	4904      	ldr	r1, [pc, #16]	; (800bec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800beae:	4805      	ldr	r0, [pc, #20]	; (800bec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800beb0:	f7ff fdbe 	bl	800ba30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800beb4:	4b02      	ldr	r3, [pc, #8]	; (800bec0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	200010c4 	.word	0x200010c4
 800bec4:	0800dae0 	.word	0x0800dae0

0800bec8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	4603      	mov	r3, r0
 800bed0:	6039      	str	r1, [r7, #0]
 800bed2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bed4:	79fb      	ldrb	r3, [r7, #7]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d105      	bne.n	800bee6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800beda:	683a      	ldr	r2, [r7, #0]
 800bedc:	4907      	ldr	r1, [pc, #28]	; (800befc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bede:	4808      	ldr	r0, [pc, #32]	; (800bf00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bee0:	f7ff fda6 	bl	800ba30 <USBD_GetString>
 800bee4:	e004      	b.n	800bef0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	4904      	ldr	r1, [pc, #16]	; (800befc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800beea:	4805      	ldr	r0, [pc, #20]	; (800bf00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800beec:	f7ff fda0 	bl	800ba30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bef0:	4b02      	ldr	r3, [pc, #8]	; (800befc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	200010c4 	.word	0x200010c4
 800bf00:	0800daec 	.word	0x0800daec

0800bf04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf0a:	4b0f      	ldr	r3, [pc, #60]	; (800bf48 <Get_SerialNum+0x44>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf10:	4b0e      	ldr	r3, [pc, #56]	; (800bf4c <Get_SerialNum+0x48>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf16:	4b0e      	ldr	r3, [pc, #56]	; (800bf50 <Get_SerialNum+0x4c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4413      	add	r3, r2
 800bf22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d009      	beq.n	800bf3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf2a:	2208      	movs	r2, #8
 800bf2c:	4909      	ldr	r1, [pc, #36]	; (800bf54 <Get_SerialNum+0x50>)
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f000 f814 	bl	800bf5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf34:	2204      	movs	r2, #4
 800bf36:	4908      	ldr	r1, [pc, #32]	; (800bf58 <Get_SerialNum+0x54>)
 800bf38:	68b8      	ldr	r0, [r7, #8]
 800bf3a:	f000 f80f 	bl	800bf5c <IntToUnicode>
  }
}
 800bf3e:	bf00      	nop
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	1ffff7e8 	.word	0x1ffff7e8
 800bf4c:	1ffff7ec 	.word	0x1ffff7ec
 800bf50:	1ffff7f0 	.word	0x1ffff7f0
 800bf54:	20000176 	.word	0x20000176
 800bf58:	20000186 	.word	0x20000186

0800bf5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b087      	sub	sp, #28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	4613      	mov	r3, r2
 800bf68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf6e:	2300      	movs	r3, #0
 800bf70:	75fb      	strb	r3, [r7, #23]
 800bf72:	e027      	b.n	800bfc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	0f1b      	lsrs	r3, r3, #28
 800bf78:	2b09      	cmp	r3, #9
 800bf7a:	d80b      	bhi.n	800bf94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	0f1b      	lsrs	r3, r3, #28
 800bf80:	b2da      	uxtb	r2, r3
 800bf82:	7dfb      	ldrb	r3, [r7, #23]
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	4619      	mov	r1, r3
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	440b      	add	r3, r1
 800bf8c:	3230      	adds	r2, #48	; 0x30
 800bf8e:	b2d2      	uxtb	r2, r2
 800bf90:	701a      	strb	r2, [r3, #0]
 800bf92:	e00a      	b.n	800bfaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	0f1b      	lsrs	r3, r3, #28
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	7dfb      	ldrb	r3, [r7, #23]
 800bf9c:	005b      	lsls	r3, r3, #1
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	440b      	add	r3, r1
 800bfa4:	3237      	adds	r2, #55	; 0x37
 800bfa6:	b2d2      	uxtb	r2, r2
 800bfa8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	011b      	lsls	r3, r3, #4
 800bfae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bfb0:	7dfb      	ldrb	r3, [r7, #23]
 800bfb2:	005b      	lsls	r3, r3, #1
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	4413      	add	r3, r2
 800bfba:	2200      	movs	r2, #0
 800bfbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bfbe:	7dfb      	ldrb	r3, [r7, #23]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	75fb      	strb	r3, [r7, #23]
 800bfc4:	7dfa      	ldrb	r2, [r7, #23]
 800bfc6:	79fb      	ldrb	r3, [r7, #7]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d3d3      	bcc.n	800bf74 <IntToUnicode+0x18>
  }
}
 800bfcc:	bf00      	nop
 800bfce:	bf00      	nop
 800bfd0:	371c      	adds	r7, #28
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bc80      	pop	{r7}
 800bfd6:	4770      	bx	lr

0800bfd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a0d      	ldr	r2, [pc, #52]	; (800c01c <HAL_PCD_MspInit+0x44>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d113      	bne.n	800c012 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bfea:	4b0d      	ldr	r3, [pc, #52]	; (800c020 <HAL_PCD_MspInit+0x48>)
 800bfec:	69db      	ldr	r3, [r3, #28]
 800bfee:	4a0c      	ldr	r2, [pc, #48]	; (800c020 <HAL_PCD_MspInit+0x48>)
 800bff0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bff4:	61d3      	str	r3, [r2, #28]
 800bff6:	4b0a      	ldr	r3, [pc, #40]	; (800c020 <HAL_PCD_MspInit+0x48>)
 800bff8:	69db      	ldr	r3, [r3, #28]
 800bffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bffe:	60fb      	str	r3, [r7, #12]
 800c000:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c002:	2200      	movs	r2, #0
 800c004:	2100      	movs	r1, #0
 800c006:	2014      	movs	r0, #20
 800c008:	f7f8 fcf1 	bl	80049ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c00c:	2014      	movs	r0, #20
 800c00e:	f7f8 fd0a 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c012:	bf00      	nop
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	40005c00 	.word	0x40005c00
 800c020:	40021000 	.word	0x40021000

0800c024 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c038:	4619      	mov	r1, r3
 800c03a:	4610      	mov	r0, r2
 800c03c:	f7fe fdc7 	bl	800abce <USBD_LL_SetupStage>
}
 800c040:	bf00      	nop
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	460b      	mov	r3, r1
 800c052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c05a:	78fa      	ldrb	r2, [r7, #3]
 800c05c:	6879      	ldr	r1, [r7, #4]
 800c05e:	4613      	mov	r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4413      	add	r3, r2
 800c064:	00db      	lsls	r3, r3, #3
 800c066:	440b      	add	r3, r1
 800c068:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	78fb      	ldrb	r3, [r7, #3]
 800c070:	4619      	mov	r1, r3
 800c072:	f7fe fdf9 	bl	800ac68 <USBD_LL_DataOutStage>
}
 800c076:	bf00      	nop
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b082      	sub	sp, #8
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
 800c086:	460b      	mov	r3, r1
 800c088:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c090:	78fa      	ldrb	r2, [r7, #3]
 800c092:	6879      	ldr	r1, [r7, #4]
 800c094:	4613      	mov	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4413      	add	r3, r2
 800c09a:	00db      	lsls	r3, r3, #3
 800c09c:	440b      	add	r3, r1
 800c09e:	333c      	adds	r3, #60	; 0x3c
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	78fb      	ldrb	r3, [r7, #3]
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	f7fe fe50 	bl	800ad4a <USBD_LL_DataInStage>
}
 800c0aa:	bf00      	nop
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b082      	sub	sp, #8
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7fe ff60 	bl	800af86 <USBD_LL_SOF>
}
 800c0c6:	bf00      	nop
 800c0c8:	3708      	adds	r7, #8
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b084      	sub	sp, #16
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	2b02      	cmp	r3, #2
 800c0e0:	d001      	beq.n	800c0e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c0e2:	f7f7 fbf9 	bl	80038d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c0ec:	7bfa      	ldrb	r2, [r7, #15]
 800c0ee:	4611      	mov	r1, r2
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fe ff10 	bl	800af16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7fe fec9 	bl	800ae94 <USBD_LL_Reset>
}
 800c102:	bf00      	nop
 800c104:	3710      	adds	r7, #16
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
	...

0800c10c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fe ff0a 	bl	800af34 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	699b      	ldr	r3, [r3, #24]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d005      	beq.n	800c134 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c128:	4b04      	ldr	r3, [pc, #16]	; (800c13c <HAL_PCD_SuspendCallback+0x30>)
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	4a03      	ldr	r2, [pc, #12]	; (800c13c <HAL_PCD_SuspendCallback+0x30>)
 800c12e:	f043 0306 	orr.w	r3, r3, #6
 800c132:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c134:	bf00      	nop
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	e000ed00 	.word	0xe000ed00

0800c140 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fe ff04 	bl	800af5c <USBD_LL_Resume>
}
 800c154:	bf00      	nop
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c164:	4a28      	ldr	r2, [pc, #160]	; (800c208 <USBD_LL_Init+0xac>)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a26      	ldr	r2, [pc, #152]	; (800c208 <USBD_LL_Init+0xac>)
 800c170:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c174:	4b24      	ldr	r3, [pc, #144]	; (800c208 <USBD_LL_Init+0xac>)
 800c176:	4a25      	ldr	r2, [pc, #148]	; (800c20c <USBD_LL_Init+0xb0>)
 800c178:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c17a:	4b23      	ldr	r3, [pc, #140]	; (800c208 <USBD_LL_Init+0xac>)
 800c17c:	2208      	movs	r2, #8
 800c17e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c180:	4b21      	ldr	r3, [pc, #132]	; (800c208 <USBD_LL_Init+0xac>)
 800c182:	2202      	movs	r2, #2
 800c184:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c186:	4b20      	ldr	r3, [pc, #128]	; (800c208 <USBD_LL_Init+0xac>)
 800c188:	2200      	movs	r2, #0
 800c18a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c18c:	4b1e      	ldr	r3, [pc, #120]	; (800c208 <USBD_LL_Init+0xac>)
 800c18e:	2200      	movs	r2, #0
 800c190:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c192:	4b1d      	ldr	r3, [pc, #116]	; (800c208 <USBD_LL_Init+0xac>)
 800c194:	2200      	movs	r2, #0
 800c196:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c198:	481b      	ldr	r0, [pc, #108]	; (800c208 <USBD_LL_Init+0xac>)
 800c19a:	f7f9 f82e 	bl	80051fa <HAL_PCD_Init>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d001      	beq.n	800c1a8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c1a4:	f7f7 fb98 	bl	80038d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1ae:	2318      	movs	r3, #24
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	2100      	movs	r1, #0
 800c1b4:	f7fa fb70 	bl	8006898 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1be:	2358      	movs	r3, #88	; 0x58
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	2180      	movs	r1, #128	; 0x80
 800c1c4:	f7fa fb68 	bl	8006898 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1ce:	23c0      	movs	r3, #192	; 0xc0
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	2181      	movs	r1, #129	; 0x81
 800c1d4:	f7fa fb60 	bl	8006898 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1de:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	2101      	movs	r1, #1
 800c1e6:	f7fa fb57 	bl	8006898 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	2182      	movs	r1, #130	; 0x82
 800c1f8:	f7fa fb4e 	bl	8006898 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c1fc:	2300      	movs	r3, #0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	200012c4 	.word	0x200012c4
 800c20c:	40005c00 	.word	0x40005c00

0800c210 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c218:	2300      	movs	r3, #0
 800c21a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c21c:	2300      	movs	r3, #0
 800c21e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c226:	4618      	mov	r0, r3
 800c228:	f7f9 f8f2 	bl	8005410 <HAL_PCD_Start>
 800c22c:	4603      	mov	r3, r0
 800c22e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c230:	7bfb      	ldrb	r3, [r7, #15]
 800c232:	4618      	mov	r0, r3
 800c234:	f000 f94e 	bl	800c4d4 <USBD_Get_USB_Status>
 800c238:	4603      	mov	r3, r0
 800c23a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c23c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b084      	sub	sp, #16
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
 800c24e:	4608      	mov	r0, r1
 800c250:	4611      	mov	r1, r2
 800c252:	461a      	mov	r2, r3
 800c254:	4603      	mov	r3, r0
 800c256:	70fb      	strb	r3, [r7, #3]
 800c258:	460b      	mov	r3, r1
 800c25a:	70bb      	strb	r3, [r7, #2]
 800c25c:	4613      	mov	r3, r2
 800c25e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c26e:	78bb      	ldrb	r3, [r7, #2]
 800c270:	883a      	ldrh	r2, [r7, #0]
 800c272:	78f9      	ldrb	r1, [r7, #3]
 800c274:	f7f9 fa6c 	bl	8005750 <HAL_PCD_EP_Open>
 800c278:	4603      	mov	r3, r0
 800c27a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 f928 	bl	800c4d4 <USBD_Get_USB_Status>
 800c284:	4603      	mov	r3, r0
 800c286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c288:	7bbb      	ldrb	r3, [r7, #14]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b084      	sub	sp, #16
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
 800c29a:	460b      	mov	r3, r1
 800c29c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2ac:	78fa      	ldrb	r2, [r7, #3]
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7f9 fab3 	bl	800581c <HAL_PCD_EP_Close>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ba:	7bfb      	ldrb	r3, [r7, #15]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f000 f909 	bl	800c4d4 <USBD_Get_USB_Status>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	460b      	mov	r3, r1
 800c2da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2ea:	78fa      	ldrb	r2, [r7, #3]
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7f9 fb73 	bl	80059da <HAL_PCD_EP_SetStall>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f000 f8ea 	bl	800c4d4 <USBD_Get_USB_Status>
 800c300:	4603      	mov	r3, r0
 800c302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c304:	7bbb      	ldrb	r3, [r7, #14]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b084      	sub	sp, #16
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	460b      	mov	r3, r1
 800c318:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c31a:	2300      	movs	r3, #0
 800c31c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c31e:	2300      	movs	r3, #0
 800c320:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c328:	78fa      	ldrb	r2, [r7, #3]
 800c32a:	4611      	mov	r1, r2
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7f9 fbb4 	bl	8005a9a <HAL_PCD_EP_ClrStall>
 800c332:	4603      	mov	r3, r0
 800c334:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c336:	7bfb      	ldrb	r3, [r7, #15]
 800c338:	4618      	mov	r0, r3
 800c33a:	f000 f8cb 	bl	800c4d4 <USBD_Get_USB_Status>
 800c33e:	4603      	mov	r3, r0
 800c340:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c342:	7bbb      	ldrb	r3, [r7, #14]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	460b      	mov	r3, r1
 800c356:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c35e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c364:	2b00      	cmp	r3, #0
 800c366:	da0c      	bge.n	800c382 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c368:	78fb      	ldrb	r3, [r7, #3]
 800c36a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c36e:	68f9      	ldr	r1, [r7, #12]
 800c370:	1c5a      	adds	r2, r3, #1
 800c372:	4613      	mov	r3, r2
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	4413      	add	r3, r2
 800c378:	00db      	lsls	r3, r3, #3
 800c37a:	440b      	add	r3, r1
 800c37c:	3302      	adds	r3, #2
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	e00b      	b.n	800c39a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c382:	78fb      	ldrb	r3, [r7, #3]
 800c384:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c388:	68f9      	ldr	r1, [r7, #12]
 800c38a:	4613      	mov	r3, r2
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	4413      	add	r3, r2
 800c390:	00db      	lsls	r3, r3, #3
 800c392:	440b      	add	r3, r1
 800c394:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c398:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3714      	adds	r7, #20
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bc80      	pop	{r7}
 800c3a2:	4770      	bx	lr

0800c3a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3be:	78fa      	ldrb	r2, [r7, #3]
 800c3c0:	4611      	mov	r1, r2
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7f9 f99f 	bl	8005706 <HAL_PCD_SetAddress>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3cc:	7bfb      	ldrb	r3, [r7, #15]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 f880 	bl	800c4d4 <USBD_Get_USB_Status>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b086      	sub	sp, #24
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	60f8      	str	r0, [r7, #12]
 800c3ea:	607a      	str	r2, [r7, #4]
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	72fb      	strb	r3, [r7, #11]
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c404:	893b      	ldrh	r3, [r7, #8]
 800c406:	7af9      	ldrb	r1, [r7, #11]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	f7f9 faa3 	bl	8005954 <HAL_PCD_EP_Transmit>
 800c40e:	4603      	mov	r3, r0
 800c410:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c412:	7dfb      	ldrb	r3, [r7, #23]
 800c414:	4618      	mov	r0, r3
 800c416:	f000 f85d 	bl	800c4d4 <USBD_Get_USB_Status>
 800c41a:	4603      	mov	r3, r0
 800c41c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c41e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3718      	adds	r7, #24
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b086      	sub	sp, #24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	607a      	str	r2, [r7, #4]
 800c432:	461a      	mov	r2, r3
 800c434:	460b      	mov	r3, r1
 800c436:	72fb      	strb	r3, [r7, #11]
 800c438:	4613      	mov	r3, r2
 800c43a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c440:	2300      	movs	r3, #0
 800c442:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c44a:	893b      	ldrh	r3, [r7, #8]
 800c44c:	7af9      	ldrb	r1, [r7, #11]
 800c44e:	687a      	ldr	r2, [r7, #4]
 800c450:	f7f9 fa2c 	bl	80058ac <HAL_PCD_EP_Receive>
 800c454:	4603      	mov	r3, r0
 800c456:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c458:	7dfb      	ldrb	r3, [r7, #23]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 f83a 	bl	800c4d4 <USBD_Get_USB_Status>
 800c460:	4603      	mov	r3, r0
 800c462:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c464:	7dbb      	ldrb	r3, [r7, #22]
}
 800c466:	4618      	mov	r0, r3
 800c468:	3718      	adds	r7, #24
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b082      	sub	sp, #8
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
 800c476:	460b      	mov	r3, r1
 800c478:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c480:	78fa      	ldrb	r2, [r7, #3]
 800c482:	4611      	mov	r1, r2
 800c484:	4618      	mov	r0, r3
 800c486:	f7f9 fa4e 	bl	8005926 <HAL_PCD_EP_GetRxCount>
 800c48a:	4603      	mov	r3, r0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c49c:	4b02      	ldr	r3, [pc, #8]	; (800c4a8 <USBD_static_malloc+0x14>)
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	370c      	adds	r7, #12
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bc80      	pop	{r7}
 800c4a6:	4770      	bx	lr
 800c4a8:	20000284 	.word	0x20000284

0800c4ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]

}
 800c4b4:	bf00      	nop
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bc80      	pop	{r7}
 800c4bc:	4770      	bx	lr

0800c4be <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4be:	b480      	push	{r7}
 800c4c0:	b083      	sub	sp, #12
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c4ca:	bf00      	nop
 800c4cc:	370c      	adds	r7, #12
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bc80      	pop	{r7}
 800c4d2:	4770      	bx	lr

0800c4d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c4e2:	79fb      	ldrb	r3, [r7, #7]
 800c4e4:	2b03      	cmp	r3, #3
 800c4e6:	d817      	bhi.n	800c518 <USBD_Get_USB_Status+0x44>
 800c4e8:	a201      	add	r2, pc, #4	; (adr r2, 800c4f0 <USBD_Get_USB_Status+0x1c>)
 800c4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ee:	bf00      	nop
 800c4f0:	0800c501 	.word	0x0800c501
 800c4f4:	0800c507 	.word	0x0800c507
 800c4f8:	0800c50d 	.word	0x0800c50d
 800c4fc:	0800c513 	.word	0x0800c513
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c500:	2300      	movs	r3, #0
 800c502:	73fb      	strb	r3, [r7, #15]
    break;
 800c504:	e00b      	b.n	800c51e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c506:	2302      	movs	r3, #2
 800c508:	73fb      	strb	r3, [r7, #15]
    break;
 800c50a:	e008      	b.n	800c51e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c50c:	2301      	movs	r3, #1
 800c50e:	73fb      	strb	r3, [r7, #15]
    break;
 800c510:	e005      	b.n	800c51e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c512:	2302      	movs	r3, #2
 800c514:	73fb      	strb	r3, [r7, #15]
    break;
 800c516:	e002      	b.n	800c51e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c518:	2302      	movs	r3, #2
 800c51a:	73fb      	strb	r3, [r7, #15]
    break;
 800c51c:	bf00      	nop
  }
  return usb_status;
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3714      	adds	r7, #20
 800c524:	46bd      	mov	sp, r7
 800c526:	bc80      	pop	{r7}
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop

0800c52c <__errno>:
 800c52c:	4b01      	ldr	r3, [pc, #4]	; (800c534 <__errno+0x8>)
 800c52e:	6818      	ldr	r0, [r3, #0]
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	20000190 	.word	0x20000190

0800c538 <__libc_init_array>:
 800c538:	b570      	push	{r4, r5, r6, lr}
 800c53a:	2600      	movs	r6, #0
 800c53c:	4d0c      	ldr	r5, [pc, #48]	; (800c570 <__libc_init_array+0x38>)
 800c53e:	4c0d      	ldr	r4, [pc, #52]	; (800c574 <__libc_init_array+0x3c>)
 800c540:	1b64      	subs	r4, r4, r5
 800c542:	10a4      	asrs	r4, r4, #2
 800c544:	42a6      	cmp	r6, r4
 800c546:	d109      	bne.n	800c55c <__libc_init_array+0x24>
 800c548:	f001 fa32 	bl	800d9b0 <_init>
 800c54c:	2600      	movs	r6, #0
 800c54e:	4d0a      	ldr	r5, [pc, #40]	; (800c578 <__libc_init_array+0x40>)
 800c550:	4c0a      	ldr	r4, [pc, #40]	; (800c57c <__libc_init_array+0x44>)
 800c552:	1b64      	subs	r4, r4, r5
 800c554:	10a4      	asrs	r4, r4, #2
 800c556:	42a6      	cmp	r6, r4
 800c558:	d105      	bne.n	800c566 <__libc_init_array+0x2e>
 800c55a:	bd70      	pop	{r4, r5, r6, pc}
 800c55c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c560:	4798      	blx	r3
 800c562:	3601      	adds	r6, #1
 800c564:	e7ee      	b.n	800c544 <__libc_init_array+0xc>
 800c566:	f855 3b04 	ldr.w	r3, [r5], #4
 800c56a:	4798      	blx	r3
 800c56c:	3601      	adds	r6, #1
 800c56e:	e7f2      	b.n	800c556 <__libc_init_array+0x1e>
 800c570:	0800dbd4 	.word	0x0800dbd4
 800c574:	0800dbd4 	.word	0x0800dbd4
 800c578:	0800dbd4 	.word	0x0800dbd4
 800c57c:	0800dbd8 	.word	0x0800dbd8

0800c580 <__itoa>:
 800c580:	1e93      	subs	r3, r2, #2
 800c582:	2b22      	cmp	r3, #34	; 0x22
 800c584:	b510      	push	{r4, lr}
 800c586:	460c      	mov	r4, r1
 800c588:	d904      	bls.n	800c594 <__itoa+0x14>
 800c58a:	2300      	movs	r3, #0
 800c58c:	461c      	mov	r4, r3
 800c58e:	700b      	strb	r3, [r1, #0]
 800c590:	4620      	mov	r0, r4
 800c592:	bd10      	pop	{r4, pc}
 800c594:	2a0a      	cmp	r2, #10
 800c596:	d109      	bne.n	800c5ac <__itoa+0x2c>
 800c598:	2800      	cmp	r0, #0
 800c59a:	da07      	bge.n	800c5ac <__itoa+0x2c>
 800c59c:	232d      	movs	r3, #45	; 0x2d
 800c59e:	700b      	strb	r3, [r1, #0]
 800c5a0:	2101      	movs	r1, #1
 800c5a2:	4240      	negs	r0, r0
 800c5a4:	4421      	add	r1, r4
 800c5a6:	f000 f853 	bl	800c650 <__utoa>
 800c5aa:	e7f1      	b.n	800c590 <__itoa+0x10>
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	e7f9      	b.n	800c5a4 <__itoa+0x24>

0800c5b0 <itoa>:
 800c5b0:	f7ff bfe6 	b.w	800c580 <__itoa>

0800c5b4 <memcpy>:
 800c5b4:	440a      	add	r2, r1
 800c5b6:	4291      	cmp	r1, r2
 800c5b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5bc:	d100      	bne.n	800c5c0 <memcpy+0xc>
 800c5be:	4770      	bx	lr
 800c5c0:	b510      	push	{r4, lr}
 800c5c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5c6:	4291      	cmp	r1, r2
 800c5c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5cc:	d1f9      	bne.n	800c5c2 <memcpy+0xe>
 800c5ce:	bd10      	pop	{r4, pc}

0800c5d0 <memset>:
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	4402      	add	r2, r0
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d100      	bne.n	800c5da <memset+0xa>
 800c5d8:	4770      	bx	lr
 800c5da:	f803 1b01 	strb.w	r1, [r3], #1
 800c5de:	e7f9      	b.n	800c5d4 <memset+0x4>

0800c5e0 <iprintf>:
 800c5e0:	b40f      	push	{r0, r1, r2, r3}
 800c5e2:	4b0a      	ldr	r3, [pc, #40]	; (800c60c <iprintf+0x2c>)
 800c5e4:	b513      	push	{r0, r1, r4, lr}
 800c5e6:	681c      	ldr	r4, [r3, #0]
 800c5e8:	b124      	cbz	r4, 800c5f4 <iprintf+0x14>
 800c5ea:	69a3      	ldr	r3, [r4, #24]
 800c5ec:	b913      	cbnz	r3, 800c5f4 <iprintf+0x14>
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f000 f8c8 	bl	800c784 <__sinit>
 800c5f4:	ab05      	add	r3, sp, #20
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	9a04      	ldr	r2, [sp, #16]
 800c5fa:	68a1      	ldr	r1, [r4, #8]
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	f000 fb3f 	bl	800cc80 <_vfiprintf_r>
 800c602:	b002      	add	sp, #8
 800c604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c608:	b004      	add	sp, #16
 800c60a:	4770      	bx	lr
 800c60c:	20000190 	.word	0x20000190

0800c610 <siprintf>:
 800c610:	b40e      	push	{r1, r2, r3}
 800c612:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c616:	b500      	push	{lr}
 800c618:	b09c      	sub	sp, #112	; 0x70
 800c61a:	ab1d      	add	r3, sp, #116	; 0x74
 800c61c:	9002      	str	r0, [sp, #8]
 800c61e:	9006      	str	r0, [sp, #24]
 800c620:	9107      	str	r1, [sp, #28]
 800c622:	9104      	str	r1, [sp, #16]
 800c624:	4808      	ldr	r0, [pc, #32]	; (800c648 <siprintf+0x38>)
 800c626:	4909      	ldr	r1, [pc, #36]	; (800c64c <siprintf+0x3c>)
 800c628:	f853 2b04 	ldr.w	r2, [r3], #4
 800c62c:	9105      	str	r1, [sp, #20]
 800c62e:	6800      	ldr	r0, [r0, #0]
 800c630:	a902      	add	r1, sp, #8
 800c632:	9301      	str	r3, [sp, #4]
 800c634:	f000 f9fc 	bl	800ca30 <_svfiprintf_r>
 800c638:	2200      	movs	r2, #0
 800c63a:	9b02      	ldr	r3, [sp, #8]
 800c63c:	701a      	strb	r2, [r3, #0]
 800c63e:	b01c      	add	sp, #112	; 0x70
 800c640:	f85d eb04 	ldr.w	lr, [sp], #4
 800c644:	b003      	add	sp, #12
 800c646:	4770      	bx	lr
 800c648:	20000190 	.word	0x20000190
 800c64c:	ffff0208 	.word	0xffff0208

0800c650 <__utoa>:
 800c650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c652:	b08b      	sub	sp, #44	; 0x2c
 800c654:	4605      	mov	r5, r0
 800c656:	460b      	mov	r3, r1
 800c658:	466e      	mov	r6, sp
 800c65a:	4c1d      	ldr	r4, [pc, #116]	; (800c6d0 <__utoa+0x80>)
 800c65c:	f104 0c20 	add.w	ip, r4, #32
 800c660:	4637      	mov	r7, r6
 800c662:	6820      	ldr	r0, [r4, #0]
 800c664:	6861      	ldr	r1, [r4, #4]
 800c666:	3408      	adds	r4, #8
 800c668:	c703      	stmia	r7!, {r0, r1}
 800c66a:	4564      	cmp	r4, ip
 800c66c:	463e      	mov	r6, r7
 800c66e:	d1f7      	bne.n	800c660 <__utoa+0x10>
 800c670:	7921      	ldrb	r1, [r4, #4]
 800c672:	6820      	ldr	r0, [r4, #0]
 800c674:	7139      	strb	r1, [r7, #4]
 800c676:	1e91      	subs	r1, r2, #2
 800c678:	2922      	cmp	r1, #34	; 0x22
 800c67a:	6038      	str	r0, [r7, #0]
 800c67c:	f04f 0100 	mov.w	r1, #0
 800c680:	d904      	bls.n	800c68c <__utoa+0x3c>
 800c682:	7019      	strb	r1, [r3, #0]
 800c684:	460b      	mov	r3, r1
 800c686:	4618      	mov	r0, r3
 800c688:	b00b      	add	sp, #44	; 0x2c
 800c68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c68c:	1e58      	subs	r0, r3, #1
 800c68e:	4684      	mov	ip, r0
 800c690:	fbb5 f7f2 	udiv	r7, r5, r2
 800c694:	fb02 5617 	mls	r6, r2, r7, r5
 800c698:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800c69c:	4476      	add	r6, lr
 800c69e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c6a8:	462e      	mov	r6, r5
 800c6aa:	42b2      	cmp	r2, r6
 800c6ac:	463d      	mov	r5, r7
 800c6ae:	f101 0101 	add.w	r1, r1, #1
 800c6b2:	d9ed      	bls.n	800c690 <__utoa+0x40>
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	545a      	strb	r2, [r3, r1]
 800c6b8:	1919      	adds	r1, r3, r4
 800c6ba:	1aa5      	subs	r5, r4, r2
 800c6bc:	42aa      	cmp	r2, r5
 800c6be:	dae2      	bge.n	800c686 <__utoa+0x36>
 800c6c0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c6c4:	780e      	ldrb	r6, [r1, #0]
 800c6c6:	3201      	adds	r2, #1
 800c6c8:	7006      	strb	r6, [r0, #0]
 800c6ca:	f801 5901 	strb.w	r5, [r1], #-1
 800c6ce:	e7f4      	b.n	800c6ba <__utoa+0x6a>
 800c6d0:	0800db18 	.word	0x0800db18

0800c6d4 <std>:
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	b510      	push	{r4, lr}
 800c6d8:	4604      	mov	r4, r0
 800c6da:	e9c0 3300 	strd	r3, r3, [r0]
 800c6de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6e2:	6083      	str	r3, [r0, #8]
 800c6e4:	8181      	strh	r1, [r0, #12]
 800c6e6:	6643      	str	r3, [r0, #100]	; 0x64
 800c6e8:	81c2      	strh	r2, [r0, #14]
 800c6ea:	6183      	str	r3, [r0, #24]
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	2208      	movs	r2, #8
 800c6f0:	305c      	adds	r0, #92	; 0x5c
 800c6f2:	f7ff ff6d 	bl	800c5d0 <memset>
 800c6f6:	4b05      	ldr	r3, [pc, #20]	; (800c70c <std+0x38>)
 800c6f8:	6224      	str	r4, [r4, #32]
 800c6fa:	6263      	str	r3, [r4, #36]	; 0x24
 800c6fc:	4b04      	ldr	r3, [pc, #16]	; (800c710 <std+0x3c>)
 800c6fe:	62a3      	str	r3, [r4, #40]	; 0x28
 800c700:	4b04      	ldr	r3, [pc, #16]	; (800c714 <std+0x40>)
 800c702:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c704:	4b04      	ldr	r3, [pc, #16]	; (800c718 <std+0x44>)
 800c706:	6323      	str	r3, [r4, #48]	; 0x30
 800c708:	bd10      	pop	{r4, pc}
 800c70a:	bf00      	nop
 800c70c:	0800d22d 	.word	0x0800d22d
 800c710:	0800d24f 	.word	0x0800d24f
 800c714:	0800d287 	.word	0x0800d287
 800c718:	0800d2ab 	.word	0x0800d2ab

0800c71c <_cleanup_r>:
 800c71c:	4901      	ldr	r1, [pc, #4]	; (800c724 <_cleanup_r+0x8>)
 800c71e:	f000 b8af 	b.w	800c880 <_fwalk_reent>
 800c722:	bf00      	nop
 800c724:	0800d585 	.word	0x0800d585

0800c728 <__sfmoreglue>:
 800c728:	b570      	push	{r4, r5, r6, lr}
 800c72a:	2568      	movs	r5, #104	; 0x68
 800c72c:	1e4a      	subs	r2, r1, #1
 800c72e:	4355      	muls	r5, r2
 800c730:	460e      	mov	r6, r1
 800c732:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c736:	f000 f8c5 	bl	800c8c4 <_malloc_r>
 800c73a:	4604      	mov	r4, r0
 800c73c:	b140      	cbz	r0, 800c750 <__sfmoreglue+0x28>
 800c73e:	2100      	movs	r1, #0
 800c740:	e9c0 1600 	strd	r1, r6, [r0]
 800c744:	300c      	adds	r0, #12
 800c746:	60a0      	str	r0, [r4, #8]
 800c748:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c74c:	f7ff ff40 	bl	800c5d0 <memset>
 800c750:	4620      	mov	r0, r4
 800c752:	bd70      	pop	{r4, r5, r6, pc}

0800c754 <__sfp_lock_acquire>:
 800c754:	4801      	ldr	r0, [pc, #4]	; (800c75c <__sfp_lock_acquire+0x8>)
 800c756:	f000 b8b3 	b.w	800c8c0 <__retarget_lock_acquire_recursive>
 800c75a:	bf00      	nop
 800c75c:	200015b8 	.word	0x200015b8

0800c760 <__sfp_lock_release>:
 800c760:	4801      	ldr	r0, [pc, #4]	; (800c768 <__sfp_lock_release+0x8>)
 800c762:	f000 b8ae 	b.w	800c8c2 <__retarget_lock_release_recursive>
 800c766:	bf00      	nop
 800c768:	200015b8 	.word	0x200015b8

0800c76c <__sinit_lock_acquire>:
 800c76c:	4801      	ldr	r0, [pc, #4]	; (800c774 <__sinit_lock_acquire+0x8>)
 800c76e:	f000 b8a7 	b.w	800c8c0 <__retarget_lock_acquire_recursive>
 800c772:	bf00      	nop
 800c774:	200015b3 	.word	0x200015b3

0800c778 <__sinit_lock_release>:
 800c778:	4801      	ldr	r0, [pc, #4]	; (800c780 <__sinit_lock_release+0x8>)
 800c77a:	f000 b8a2 	b.w	800c8c2 <__retarget_lock_release_recursive>
 800c77e:	bf00      	nop
 800c780:	200015b3 	.word	0x200015b3

0800c784 <__sinit>:
 800c784:	b510      	push	{r4, lr}
 800c786:	4604      	mov	r4, r0
 800c788:	f7ff fff0 	bl	800c76c <__sinit_lock_acquire>
 800c78c:	69a3      	ldr	r3, [r4, #24]
 800c78e:	b11b      	cbz	r3, 800c798 <__sinit+0x14>
 800c790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c794:	f7ff bff0 	b.w	800c778 <__sinit_lock_release>
 800c798:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c79c:	6523      	str	r3, [r4, #80]	; 0x50
 800c79e:	4b13      	ldr	r3, [pc, #76]	; (800c7ec <__sinit+0x68>)
 800c7a0:	4a13      	ldr	r2, [pc, #76]	; (800c7f0 <__sinit+0x6c>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c7a6:	42a3      	cmp	r3, r4
 800c7a8:	bf08      	it	eq
 800c7aa:	2301      	moveq	r3, #1
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	bf08      	it	eq
 800c7b0:	61a3      	streq	r3, [r4, #24]
 800c7b2:	f000 f81f 	bl	800c7f4 <__sfp>
 800c7b6:	6060      	str	r0, [r4, #4]
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	f000 f81b 	bl	800c7f4 <__sfp>
 800c7be:	60a0      	str	r0, [r4, #8]
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f000 f817 	bl	800c7f4 <__sfp>
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	2104      	movs	r1, #4
 800c7ca:	60e0      	str	r0, [r4, #12]
 800c7cc:	6860      	ldr	r0, [r4, #4]
 800c7ce:	f7ff ff81 	bl	800c6d4 <std>
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	2109      	movs	r1, #9
 800c7d6:	68a0      	ldr	r0, [r4, #8]
 800c7d8:	f7ff ff7c 	bl	800c6d4 <std>
 800c7dc:	2202      	movs	r2, #2
 800c7de:	2112      	movs	r1, #18
 800c7e0:	68e0      	ldr	r0, [r4, #12]
 800c7e2:	f7ff ff77 	bl	800c6d4 <std>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	61a3      	str	r3, [r4, #24]
 800c7ea:	e7d1      	b.n	800c790 <__sinit+0xc>
 800c7ec:	0800db14 	.word	0x0800db14
 800c7f0:	0800c71d 	.word	0x0800c71d

0800c7f4 <__sfp>:
 800c7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f6:	4607      	mov	r7, r0
 800c7f8:	f7ff ffac 	bl	800c754 <__sfp_lock_acquire>
 800c7fc:	4b1e      	ldr	r3, [pc, #120]	; (800c878 <__sfp+0x84>)
 800c7fe:	681e      	ldr	r6, [r3, #0]
 800c800:	69b3      	ldr	r3, [r6, #24]
 800c802:	b913      	cbnz	r3, 800c80a <__sfp+0x16>
 800c804:	4630      	mov	r0, r6
 800c806:	f7ff ffbd 	bl	800c784 <__sinit>
 800c80a:	3648      	adds	r6, #72	; 0x48
 800c80c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c810:	3b01      	subs	r3, #1
 800c812:	d503      	bpl.n	800c81c <__sfp+0x28>
 800c814:	6833      	ldr	r3, [r6, #0]
 800c816:	b30b      	cbz	r3, 800c85c <__sfp+0x68>
 800c818:	6836      	ldr	r6, [r6, #0]
 800c81a:	e7f7      	b.n	800c80c <__sfp+0x18>
 800c81c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c820:	b9d5      	cbnz	r5, 800c858 <__sfp+0x64>
 800c822:	4b16      	ldr	r3, [pc, #88]	; (800c87c <__sfp+0x88>)
 800c824:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c828:	60e3      	str	r3, [r4, #12]
 800c82a:	6665      	str	r5, [r4, #100]	; 0x64
 800c82c:	f000 f847 	bl	800c8be <__retarget_lock_init_recursive>
 800c830:	f7ff ff96 	bl	800c760 <__sfp_lock_release>
 800c834:	2208      	movs	r2, #8
 800c836:	4629      	mov	r1, r5
 800c838:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c83c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c840:	6025      	str	r5, [r4, #0]
 800c842:	61a5      	str	r5, [r4, #24]
 800c844:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c848:	f7ff fec2 	bl	800c5d0 <memset>
 800c84c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c850:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c854:	4620      	mov	r0, r4
 800c856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c858:	3468      	adds	r4, #104	; 0x68
 800c85a:	e7d9      	b.n	800c810 <__sfp+0x1c>
 800c85c:	2104      	movs	r1, #4
 800c85e:	4638      	mov	r0, r7
 800c860:	f7ff ff62 	bl	800c728 <__sfmoreglue>
 800c864:	4604      	mov	r4, r0
 800c866:	6030      	str	r0, [r6, #0]
 800c868:	2800      	cmp	r0, #0
 800c86a:	d1d5      	bne.n	800c818 <__sfp+0x24>
 800c86c:	f7ff ff78 	bl	800c760 <__sfp_lock_release>
 800c870:	230c      	movs	r3, #12
 800c872:	603b      	str	r3, [r7, #0]
 800c874:	e7ee      	b.n	800c854 <__sfp+0x60>
 800c876:	bf00      	nop
 800c878:	0800db14 	.word	0x0800db14
 800c87c:	ffff0001 	.word	0xffff0001

0800c880 <_fwalk_reent>:
 800c880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c884:	4606      	mov	r6, r0
 800c886:	4688      	mov	r8, r1
 800c888:	2700      	movs	r7, #0
 800c88a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c88e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c892:	f1b9 0901 	subs.w	r9, r9, #1
 800c896:	d505      	bpl.n	800c8a4 <_fwalk_reent+0x24>
 800c898:	6824      	ldr	r4, [r4, #0]
 800c89a:	2c00      	cmp	r4, #0
 800c89c:	d1f7      	bne.n	800c88e <_fwalk_reent+0xe>
 800c89e:	4638      	mov	r0, r7
 800c8a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8a4:	89ab      	ldrh	r3, [r5, #12]
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d907      	bls.n	800c8ba <_fwalk_reent+0x3a>
 800c8aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	d003      	beq.n	800c8ba <_fwalk_reent+0x3a>
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	47c0      	blx	r8
 800c8b8:	4307      	orrs	r7, r0
 800c8ba:	3568      	adds	r5, #104	; 0x68
 800c8bc:	e7e9      	b.n	800c892 <_fwalk_reent+0x12>

0800c8be <__retarget_lock_init_recursive>:
 800c8be:	4770      	bx	lr

0800c8c0 <__retarget_lock_acquire_recursive>:
 800c8c0:	4770      	bx	lr

0800c8c2 <__retarget_lock_release_recursive>:
 800c8c2:	4770      	bx	lr

0800c8c4 <_malloc_r>:
 800c8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c6:	1ccd      	adds	r5, r1, #3
 800c8c8:	f025 0503 	bic.w	r5, r5, #3
 800c8cc:	3508      	adds	r5, #8
 800c8ce:	2d0c      	cmp	r5, #12
 800c8d0:	bf38      	it	cc
 800c8d2:	250c      	movcc	r5, #12
 800c8d4:	2d00      	cmp	r5, #0
 800c8d6:	4606      	mov	r6, r0
 800c8d8:	db01      	blt.n	800c8de <_malloc_r+0x1a>
 800c8da:	42a9      	cmp	r1, r5
 800c8dc:	d903      	bls.n	800c8e6 <_malloc_r+0x22>
 800c8de:	230c      	movs	r3, #12
 800c8e0:	6033      	str	r3, [r6, #0]
 800c8e2:	2000      	movs	r0, #0
 800c8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8e6:	f000 ff27 	bl	800d738 <__malloc_lock>
 800c8ea:	4921      	ldr	r1, [pc, #132]	; (800c970 <_malloc_r+0xac>)
 800c8ec:	680a      	ldr	r2, [r1, #0]
 800c8ee:	4614      	mov	r4, r2
 800c8f0:	b99c      	cbnz	r4, 800c91a <_malloc_r+0x56>
 800c8f2:	4f20      	ldr	r7, [pc, #128]	; (800c974 <_malloc_r+0xb0>)
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	b923      	cbnz	r3, 800c902 <_malloc_r+0x3e>
 800c8f8:	4621      	mov	r1, r4
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	f000 fc86 	bl	800d20c <_sbrk_r>
 800c900:	6038      	str	r0, [r7, #0]
 800c902:	4629      	mov	r1, r5
 800c904:	4630      	mov	r0, r6
 800c906:	f000 fc81 	bl	800d20c <_sbrk_r>
 800c90a:	1c43      	adds	r3, r0, #1
 800c90c:	d123      	bne.n	800c956 <_malloc_r+0x92>
 800c90e:	230c      	movs	r3, #12
 800c910:	4630      	mov	r0, r6
 800c912:	6033      	str	r3, [r6, #0]
 800c914:	f000 ff16 	bl	800d744 <__malloc_unlock>
 800c918:	e7e3      	b.n	800c8e2 <_malloc_r+0x1e>
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	1b5b      	subs	r3, r3, r5
 800c91e:	d417      	bmi.n	800c950 <_malloc_r+0x8c>
 800c920:	2b0b      	cmp	r3, #11
 800c922:	d903      	bls.n	800c92c <_malloc_r+0x68>
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	441c      	add	r4, r3
 800c928:	6025      	str	r5, [r4, #0]
 800c92a:	e004      	b.n	800c936 <_malloc_r+0x72>
 800c92c:	6863      	ldr	r3, [r4, #4]
 800c92e:	42a2      	cmp	r2, r4
 800c930:	bf0c      	ite	eq
 800c932:	600b      	streq	r3, [r1, #0]
 800c934:	6053      	strne	r3, [r2, #4]
 800c936:	4630      	mov	r0, r6
 800c938:	f000 ff04 	bl	800d744 <__malloc_unlock>
 800c93c:	f104 000b 	add.w	r0, r4, #11
 800c940:	1d23      	adds	r3, r4, #4
 800c942:	f020 0007 	bic.w	r0, r0, #7
 800c946:	1ac2      	subs	r2, r0, r3
 800c948:	d0cc      	beq.n	800c8e4 <_malloc_r+0x20>
 800c94a:	1a1b      	subs	r3, r3, r0
 800c94c:	50a3      	str	r3, [r4, r2]
 800c94e:	e7c9      	b.n	800c8e4 <_malloc_r+0x20>
 800c950:	4622      	mov	r2, r4
 800c952:	6864      	ldr	r4, [r4, #4]
 800c954:	e7cc      	b.n	800c8f0 <_malloc_r+0x2c>
 800c956:	1cc4      	adds	r4, r0, #3
 800c958:	f024 0403 	bic.w	r4, r4, #3
 800c95c:	42a0      	cmp	r0, r4
 800c95e:	d0e3      	beq.n	800c928 <_malloc_r+0x64>
 800c960:	1a21      	subs	r1, r4, r0
 800c962:	4630      	mov	r0, r6
 800c964:	f000 fc52 	bl	800d20c <_sbrk_r>
 800c968:	3001      	adds	r0, #1
 800c96a:	d1dd      	bne.n	800c928 <_malloc_r+0x64>
 800c96c:	e7cf      	b.n	800c90e <_malloc_r+0x4a>
 800c96e:	bf00      	nop
 800c970:	200004a4 	.word	0x200004a4
 800c974:	200004a8 	.word	0x200004a8

0800c978 <__ssputs_r>:
 800c978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c97c:	688e      	ldr	r6, [r1, #8]
 800c97e:	4682      	mov	sl, r0
 800c980:	429e      	cmp	r6, r3
 800c982:	460c      	mov	r4, r1
 800c984:	4690      	mov	r8, r2
 800c986:	461f      	mov	r7, r3
 800c988:	d838      	bhi.n	800c9fc <__ssputs_r+0x84>
 800c98a:	898a      	ldrh	r2, [r1, #12]
 800c98c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c990:	d032      	beq.n	800c9f8 <__ssputs_r+0x80>
 800c992:	6825      	ldr	r5, [r4, #0]
 800c994:	6909      	ldr	r1, [r1, #16]
 800c996:	3301      	adds	r3, #1
 800c998:	eba5 0901 	sub.w	r9, r5, r1
 800c99c:	6965      	ldr	r5, [r4, #20]
 800c99e:	444b      	add	r3, r9
 800c9a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9a8:	106d      	asrs	r5, r5, #1
 800c9aa:	429d      	cmp	r5, r3
 800c9ac:	bf38      	it	cc
 800c9ae:	461d      	movcc	r5, r3
 800c9b0:	0553      	lsls	r3, r2, #21
 800c9b2:	d531      	bpl.n	800ca18 <__ssputs_r+0xa0>
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	f7ff ff85 	bl	800c8c4 <_malloc_r>
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	b950      	cbnz	r0, 800c9d4 <__ssputs_r+0x5c>
 800c9be:	230c      	movs	r3, #12
 800c9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c4:	f8ca 3000 	str.w	r3, [sl]
 800c9c8:	89a3      	ldrh	r3, [r4, #12]
 800c9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ce:	81a3      	strh	r3, [r4, #12]
 800c9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d4:	464a      	mov	r2, r9
 800c9d6:	6921      	ldr	r1, [r4, #16]
 800c9d8:	f7ff fdec 	bl	800c5b4 <memcpy>
 800c9dc:	89a3      	ldrh	r3, [r4, #12]
 800c9de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e6:	81a3      	strh	r3, [r4, #12]
 800c9e8:	6126      	str	r6, [r4, #16]
 800c9ea:	444e      	add	r6, r9
 800c9ec:	6026      	str	r6, [r4, #0]
 800c9ee:	463e      	mov	r6, r7
 800c9f0:	6165      	str	r5, [r4, #20]
 800c9f2:	eba5 0509 	sub.w	r5, r5, r9
 800c9f6:	60a5      	str	r5, [r4, #8]
 800c9f8:	42be      	cmp	r6, r7
 800c9fa:	d900      	bls.n	800c9fe <__ssputs_r+0x86>
 800c9fc:	463e      	mov	r6, r7
 800c9fe:	4632      	mov	r2, r6
 800ca00:	4641      	mov	r1, r8
 800ca02:	6820      	ldr	r0, [r4, #0]
 800ca04:	f000 fe7e 	bl	800d704 <memmove>
 800ca08:	68a3      	ldr	r3, [r4, #8]
 800ca0a:	6822      	ldr	r2, [r4, #0]
 800ca0c:	1b9b      	subs	r3, r3, r6
 800ca0e:	4432      	add	r2, r6
 800ca10:	2000      	movs	r0, #0
 800ca12:	60a3      	str	r3, [r4, #8]
 800ca14:	6022      	str	r2, [r4, #0]
 800ca16:	e7db      	b.n	800c9d0 <__ssputs_r+0x58>
 800ca18:	462a      	mov	r2, r5
 800ca1a:	f000 fee5 	bl	800d7e8 <_realloc_r>
 800ca1e:	4606      	mov	r6, r0
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d1e1      	bne.n	800c9e8 <__ssputs_r+0x70>
 800ca24:	4650      	mov	r0, sl
 800ca26:	6921      	ldr	r1, [r4, #16]
 800ca28:	f000 fe92 	bl	800d750 <_free_r>
 800ca2c:	e7c7      	b.n	800c9be <__ssputs_r+0x46>
	...

0800ca30 <_svfiprintf_r>:
 800ca30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca34:	4698      	mov	r8, r3
 800ca36:	898b      	ldrh	r3, [r1, #12]
 800ca38:	4607      	mov	r7, r0
 800ca3a:	061b      	lsls	r3, r3, #24
 800ca3c:	460d      	mov	r5, r1
 800ca3e:	4614      	mov	r4, r2
 800ca40:	b09d      	sub	sp, #116	; 0x74
 800ca42:	d50e      	bpl.n	800ca62 <_svfiprintf_r+0x32>
 800ca44:	690b      	ldr	r3, [r1, #16]
 800ca46:	b963      	cbnz	r3, 800ca62 <_svfiprintf_r+0x32>
 800ca48:	2140      	movs	r1, #64	; 0x40
 800ca4a:	f7ff ff3b 	bl	800c8c4 <_malloc_r>
 800ca4e:	6028      	str	r0, [r5, #0]
 800ca50:	6128      	str	r0, [r5, #16]
 800ca52:	b920      	cbnz	r0, 800ca5e <_svfiprintf_r+0x2e>
 800ca54:	230c      	movs	r3, #12
 800ca56:	603b      	str	r3, [r7, #0]
 800ca58:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5c:	e0d1      	b.n	800cc02 <_svfiprintf_r+0x1d2>
 800ca5e:	2340      	movs	r3, #64	; 0x40
 800ca60:	616b      	str	r3, [r5, #20]
 800ca62:	2300      	movs	r3, #0
 800ca64:	9309      	str	r3, [sp, #36]	; 0x24
 800ca66:	2320      	movs	r3, #32
 800ca68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca6c:	2330      	movs	r3, #48	; 0x30
 800ca6e:	f04f 0901 	mov.w	r9, #1
 800ca72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cc1c <_svfiprintf_r+0x1ec>
 800ca7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca7e:	4623      	mov	r3, r4
 800ca80:	469a      	mov	sl, r3
 800ca82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca86:	b10a      	cbz	r2, 800ca8c <_svfiprintf_r+0x5c>
 800ca88:	2a25      	cmp	r2, #37	; 0x25
 800ca8a:	d1f9      	bne.n	800ca80 <_svfiprintf_r+0x50>
 800ca8c:	ebba 0b04 	subs.w	fp, sl, r4
 800ca90:	d00b      	beq.n	800caaa <_svfiprintf_r+0x7a>
 800ca92:	465b      	mov	r3, fp
 800ca94:	4622      	mov	r2, r4
 800ca96:	4629      	mov	r1, r5
 800ca98:	4638      	mov	r0, r7
 800ca9a:	f7ff ff6d 	bl	800c978 <__ssputs_r>
 800ca9e:	3001      	adds	r0, #1
 800caa0:	f000 80aa 	beq.w	800cbf8 <_svfiprintf_r+0x1c8>
 800caa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caa6:	445a      	add	r2, fp
 800caa8:	9209      	str	r2, [sp, #36]	; 0x24
 800caaa:	f89a 3000 	ldrb.w	r3, [sl]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	f000 80a2 	beq.w	800cbf8 <_svfiprintf_r+0x1c8>
 800cab4:	2300      	movs	r3, #0
 800cab6:	f04f 32ff 	mov.w	r2, #4294967295
 800caba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cabe:	f10a 0a01 	add.w	sl, sl, #1
 800cac2:	9304      	str	r3, [sp, #16]
 800cac4:	9307      	str	r3, [sp, #28]
 800cac6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800caca:	931a      	str	r3, [sp, #104]	; 0x68
 800cacc:	4654      	mov	r4, sl
 800cace:	2205      	movs	r2, #5
 800cad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cad4:	4851      	ldr	r0, [pc, #324]	; (800cc1c <_svfiprintf_r+0x1ec>)
 800cad6:	f000 fe07 	bl	800d6e8 <memchr>
 800cada:	9a04      	ldr	r2, [sp, #16]
 800cadc:	b9d8      	cbnz	r0, 800cb16 <_svfiprintf_r+0xe6>
 800cade:	06d0      	lsls	r0, r2, #27
 800cae0:	bf44      	itt	mi
 800cae2:	2320      	movmi	r3, #32
 800cae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cae8:	0711      	lsls	r1, r2, #28
 800caea:	bf44      	itt	mi
 800caec:	232b      	movmi	r3, #43	; 0x2b
 800caee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caf2:	f89a 3000 	ldrb.w	r3, [sl]
 800caf6:	2b2a      	cmp	r3, #42	; 0x2a
 800caf8:	d015      	beq.n	800cb26 <_svfiprintf_r+0xf6>
 800cafa:	4654      	mov	r4, sl
 800cafc:	2000      	movs	r0, #0
 800cafe:	f04f 0c0a 	mov.w	ip, #10
 800cb02:	9a07      	ldr	r2, [sp, #28]
 800cb04:	4621      	mov	r1, r4
 800cb06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb0a:	3b30      	subs	r3, #48	; 0x30
 800cb0c:	2b09      	cmp	r3, #9
 800cb0e:	d94e      	bls.n	800cbae <_svfiprintf_r+0x17e>
 800cb10:	b1b0      	cbz	r0, 800cb40 <_svfiprintf_r+0x110>
 800cb12:	9207      	str	r2, [sp, #28]
 800cb14:	e014      	b.n	800cb40 <_svfiprintf_r+0x110>
 800cb16:	eba0 0308 	sub.w	r3, r0, r8
 800cb1a:	fa09 f303 	lsl.w	r3, r9, r3
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	46a2      	mov	sl, r4
 800cb22:	9304      	str	r3, [sp, #16]
 800cb24:	e7d2      	b.n	800cacc <_svfiprintf_r+0x9c>
 800cb26:	9b03      	ldr	r3, [sp, #12]
 800cb28:	1d19      	adds	r1, r3, #4
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	9103      	str	r1, [sp, #12]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	bfbb      	ittet	lt
 800cb32:	425b      	neglt	r3, r3
 800cb34:	f042 0202 	orrlt.w	r2, r2, #2
 800cb38:	9307      	strge	r3, [sp, #28]
 800cb3a:	9307      	strlt	r3, [sp, #28]
 800cb3c:	bfb8      	it	lt
 800cb3e:	9204      	strlt	r2, [sp, #16]
 800cb40:	7823      	ldrb	r3, [r4, #0]
 800cb42:	2b2e      	cmp	r3, #46	; 0x2e
 800cb44:	d10c      	bne.n	800cb60 <_svfiprintf_r+0x130>
 800cb46:	7863      	ldrb	r3, [r4, #1]
 800cb48:	2b2a      	cmp	r3, #42	; 0x2a
 800cb4a:	d135      	bne.n	800cbb8 <_svfiprintf_r+0x188>
 800cb4c:	9b03      	ldr	r3, [sp, #12]
 800cb4e:	3402      	adds	r4, #2
 800cb50:	1d1a      	adds	r2, r3, #4
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	9203      	str	r2, [sp, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	bfb8      	it	lt
 800cb5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb5e:	9305      	str	r3, [sp, #20]
 800cb60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc2c <_svfiprintf_r+0x1fc>
 800cb64:	2203      	movs	r2, #3
 800cb66:	4650      	mov	r0, sl
 800cb68:	7821      	ldrb	r1, [r4, #0]
 800cb6a:	f000 fdbd 	bl	800d6e8 <memchr>
 800cb6e:	b140      	cbz	r0, 800cb82 <_svfiprintf_r+0x152>
 800cb70:	2340      	movs	r3, #64	; 0x40
 800cb72:	eba0 000a 	sub.w	r0, r0, sl
 800cb76:	fa03 f000 	lsl.w	r0, r3, r0
 800cb7a:	9b04      	ldr	r3, [sp, #16]
 800cb7c:	3401      	adds	r4, #1
 800cb7e:	4303      	orrs	r3, r0
 800cb80:	9304      	str	r3, [sp, #16]
 800cb82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb86:	2206      	movs	r2, #6
 800cb88:	4825      	ldr	r0, [pc, #148]	; (800cc20 <_svfiprintf_r+0x1f0>)
 800cb8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb8e:	f000 fdab 	bl	800d6e8 <memchr>
 800cb92:	2800      	cmp	r0, #0
 800cb94:	d038      	beq.n	800cc08 <_svfiprintf_r+0x1d8>
 800cb96:	4b23      	ldr	r3, [pc, #140]	; (800cc24 <_svfiprintf_r+0x1f4>)
 800cb98:	bb1b      	cbnz	r3, 800cbe2 <_svfiprintf_r+0x1b2>
 800cb9a:	9b03      	ldr	r3, [sp, #12]
 800cb9c:	3307      	adds	r3, #7
 800cb9e:	f023 0307 	bic.w	r3, r3, #7
 800cba2:	3308      	adds	r3, #8
 800cba4:	9303      	str	r3, [sp, #12]
 800cba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cba8:	4433      	add	r3, r6
 800cbaa:	9309      	str	r3, [sp, #36]	; 0x24
 800cbac:	e767      	b.n	800ca7e <_svfiprintf_r+0x4e>
 800cbae:	460c      	mov	r4, r1
 800cbb0:	2001      	movs	r0, #1
 800cbb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbb6:	e7a5      	b.n	800cb04 <_svfiprintf_r+0xd4>
 800cbb8:	2300      	movs	r3, #0
 800cbba:	f04f 0c0a 	mov.w	ip, #10
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	3401      	adds	r4, #1
 800cbc2:	9305      	str	r3, [sp, #20]
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbca:	3a30      	subs	r2, #48	; 0x30
 800cbcc:	2a09      	cmp	r2, #9
 800cbce:	d903      	bls.n	800cbd8 <_svfiprintf_r+0x1a8>
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d0c5      	beq.n	800cb60 <_svfiprintf_r+0x130>
 800cbd4:	9105      	str	r1, [sp, #20]
 800cbd6:	e7c3      	b.n	800cb60 <_svfiprintf_r+0x130>
 800cbd8:	4604      	mov	r4, r0
 800cbda:	2301      	movs	r3, #1
 800cbdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbe0:	e7f0      	b.n	800cbc4 <_svfiprintf_r+0x194>
 800cbe2:	ab03      	add	r3, sp, #12
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	462a      	mov	r2, r5
 800cbe8:	4638      	mov	r0, r7
 800cbea:	4b0f      	ldr	r3, [pc, #60]	; (800cc28 <_svfiprintf_r+0x1f8>)
 800cbec:	a904      	add	r1, sp, #16
 800cbee:	f3af 8000 	nop.w
 800cbf2:	1c42      	adds	r2, r0, #1
 800cbf4:	4606      	mov	r6, r0
 800cbf6:	d1d6      	bne.n	800cba6 <_svfiprintf_r+0x176>
 800cbf8:	89ab      	ldrh	r3, [r5, #12]
 800cbfa:	065b      	lsls	r3, r3, #25
 800cbfc:	f53f af2c 	bmi.w	800ca58 <_svfiprintf_r+0x28>
 800cc00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc02:	b01d      	add	sp, #116	; 0x74
 800cc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc08:	ab03      	add	r3, sp, #12
 800cc0a:	9300      	str	r3, [sp, #0]
 800cc0c:	462a      	mov	r2, r5
 800cc0e:	4638      	mov	r0, r7
 800cc10:	4b05      	ldr	r3, [pc, #20]	; (800cc28 <_svfiprintf_r+0x1f8>)
 800cc12:	a904      	add	r1, sp, #16
 800cc14:	f000 f9d4 	bl	800cfc0 <_printf_i>
 800cc18:	e7eb      	b.n	800cbf2 <_svfiprintf_r+0x1c2>
 800cc1a:	bf00      	nop
 800cc1c:	0800dba0 	.word	0x0800dba0
 800cc20:	0800dbaa 	.word	0x0800dbaa
 800cc24:	00000000 	.word	0x00000000
 800cc28:	0800c979 	.word	0x0800c979
 800cc2c:	0800dba6 	.word	0x0800dba6

0800cc30 <__sfputc_r>:
 800cc30:	6893      	ldr	r3, [r2, #8]
 800cc32:	b410      	push	{r4}
 800cc34:	3b01      	subs	r3, #1
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	6093      	str	r3, [r2, #8]
 800cc3a:	da07      	bge.n	800cc4c <__sfputc_r+0x1c>
 800cc3c:	6994      	ldr	r4, [r2, #24]
 800cc3e:	42a3      	cmp	r3, r4
 800cc40:	db01      	blt.n	800cc46 <__sfputc_r+0x16>
 800cc42:	290a      	cmp	r1, #10
 800cc44:	d102      	bne.n	800cc4c <__sfputc_r+0x1c>
 800cc46:	bc10      	pop	{r4}
 800cc48:	f000 bb34 	b.w	800d2b4 <__swbuf_r>
 800cc4c:	6813      	ldr	r3, [r2, #0]
 800cc4e:	1c58      	adds	r0, r3, #1
 800cc50:	6010      	str	r0, [r2, #0]
 800cc52:	7019      	strb	r1, [r3, #0]
 800cc54:	4608      	mov	r0, r1
 800cc56:	bc10      	pop	{r4}
 800cc58:	4770      	bx	lr

0800cc5a <__sfputs_r>:
 800cc5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5c:	4606      	mov	r6, r0
 800cc5e:	460f      	mov	r7, r1
 800cc60:	4614      	mov	r4, r2
 800cc62:	18d5      	adds	r5, r2, r3
 800cc64:	42ac      	cmp	r4, r5
 800cc66:	d101      	bne.n	800cc6c <__sfputs_r+0x12>
 800cc68:	2000      	movs	r0, #0
 800cc6a:	e007      	b.n	800cc7c <__sfputs_r+0x22>
 800cc6c:	463a      	mov	r2, r7
 800cc6e:	4630      	mov	r0, r6
 800cc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc74:	f7ff ffdc 	bl	800cc30 <__sfputc_r>
 800cc78:	1c43      	adds	r3, r0, #1
 800cc7a:	d1f3      	bne.n	800cc64 <__sfputs_r+0xa>
 800cc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc80 <_vfiprintf_r>:
 800cc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc84:	460d      	mov	r5, r1
 800cc86:	4614      	mov	r4, r2
 800cc88:	4698      	mov	r8, r3
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	b09d      	sub	sp, #116	; 0x74
 800cc8e:	b118      	cbz	r0, 800cc98 <_vfiprintf_r+0x18>
 800cc90:	6983      	ldr	r3, [r0, #24]
 800cc92:	b90b      	cbnz	r3, 800cc98 <_vfiprintf_r+0x18>
 800cc94:	f7ff fd76 	bl	800c784 <__sinit>
 800cc98:	4b89      	ldr	r3, [pc, #548]	; (800cec0 <_vfiprintf_r+0x240>)
 800cc9a:	429d      	cmp	r5, r3
 800cc9c:	d11b      	bne.n	800ccd6 <_vfiprintf_r+0x56>
 800cc9e:	6875      	ldr	r5, [r6, #4]
 800cca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cca2:	07d9      	lsls	r1, r3, #31
 800cca4:	d405      	bmi.n	800ccb2 <_vfiprintf_r+0x32>
 800cca6:	89ab      	ldrh	r3, [r5, #12]
 800cca8:	059a      	lsls	r2, r3, #22
 800ccaa:	d402      	bmi.n	800ccb2 <_vfiprintf_r+0x32>
 800ccac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccae:	f7ff fe07 	bl	800c8c0 <__retarget_lock_acquire_recursive>
 800ccb2:	89ab      	ldrh	r3, [r5, #12]
 800ccb4:	071b      	lsls	r3, r3, #28
 800ccb6:	d501      	bpl.n	800ccbc <_vfiprintf_r+0x3c>
 800ccb8:	692b      	ldr	r3, [r5, #16]
 800ccba:	b9eb      	cbnz	r3, 800ccf8 <_vfiprintf_r+0x78>
 800ccbc:	4629      	mov	r1, r5
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f000 fb5c 	bl	800d37c <__swsetup_r>
 800ccc4:	b1c0      	cbz	r0, 800ccf8 <_vfiprintf_r+0x78>
 800ccc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccc8:	07dc      	lsls	r4, r3, #31
 800ccca:	d50e      	bpl.n	800ccea <_vfiprintf_r+0x6a>
 800cccc:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd0:	b01d      	add	sp, #116	; 0x74
 800ccd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd6:	4b7b      	ldr	r3, [pc, #492]	; (800cec4 <_vfiprintf_r+0x244>)
 800ccd8:	429d      	cmp	r5, r3
 800ccda:	d101      	bne.n	800cce0 <_vfiprintf_r+0x60>
 800ccdc:	68b5      	ldr	r5, [r6, #8]
 800ccde:	e7df      	b.n	800cca0 <_vfiprintf_r+0x20>
 800cce0:	4b79      	ldr	r3, [pc, #484]	; (800cec8 <_vfiprintf_r+0x248>)
 800cce2:	429d      	cmp	r5, r3
 800cce4:	bf08      	it	eq
 800cce6:	68f5      	ldreq	r5, [r6, #12]
 800cce8:	e7da      	b.n	800cca0 <_vfiprintf_r+0x20>
 800ccea:	89ab      	ldrh	r3, [r5, #12]
 800ccec:	0598      	lsls	r0, r3, #22
 800ccee:	d4ed      	bmi.n	800cccc <_vfiprintf_r+0x4c>
 800ccf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccf2:	f7ff fde6 	bl	800c8c2 <__retarget_lock_release_recursive>
 800ccf6:	e7e9      	b.n	800cccc <_vfiprintf_r+0x4c>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	9309      	str	r3, [sp, #36]	; 0x24
 800ccfc:	2320      	movs	r3, #32
 800ccfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd02:	2330      	movs	r3, #48	; 0x30
 800cd04:	f04f 0901 	mov.w	r9, #1
 800cd08:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd0c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cecc <_vfiprintf_r+0x24c>
 800cd10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd14:	4623      	mov	r3, r4
 800cd16:	469a      	mov	sl, r3
 800cd18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd1c:	b10a      	cbz	r2, 800cd22 <_vfiprintf_r+0xa2>
 800cd1e:	2a25      	cmp	r2, #37	; 0x25
 800cd20:	d1f9      	bne.n	800cd16 <_vfiprintf_r+0x96>
 800cd22:	ebba 0b04 	subs.w	fp, sl, r4
 800cd26:	d00b      	beq.n	800cd40 <_vfiprintf_r+0xc0>
 800cd28:	465b      	mov	r3, fp
 800cd2a:	4622      	mov	r2, r4
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f7ff ff93 	bl	800cc5a <__sfputs_r>
 800cd34:	3001      	adds	r0, #1
 800cd36:	f000 80aa 	beq.w	800ce8e <_vfiprintf_r+0x20e>
 800cd3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd3c:	445a      	add	r2, fp
 800cd3e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd40:	f89a 3000 	ldrb.w	r3, [sl]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	f000 80a2 	beq.w	800ce8e <_vfiprintf_r+0x20e>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd54:	f10a 0a01 	add.w	sl, sl, #1
 800cd58:	9304      	str	r3, [sp, #16]
 800cd5a:	9307      	str	r3, [sp, #28]
 800cd5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd60:	931a      	str	r3, [sp, #104]	; 0x68
 800cd62:	4654      	mov	r4, sl
 800cd64:	2205      	movs	r2, #5
 800cd66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd6a:	4858      	ldr	r0, [pc, #352]	; (800cecc <_vfiprintf_r+0x24c>)
 800cd6c:	f000 fcbc 	bl	800d6e8 <memchr>
 800cd70:	9a04      	ldr	r2, [sp, #16]
 800cd72:	b9d8      	cbnz	r0, 800cdac <_vfiprintf_r+0x12c>
 800cd74:	06d1      	lsls	r1, r2, #27
 800cd76:	bf44      	itt	mi
 800cd78:	2320      	movmi	r3, #32
 800cd7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd7e:	0713      	lsls	r3, r2, #28
 800cd80:	bf44      	itt	mi
 800cd82:	232b      	movmi	r3, #43	; 0x2b
 800cd84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd88:	f89a 3000 	ldrb.w	r3, [sl]
 800cd8c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd8e:	d015      	beq.n	800cdbc <_vfiprintf_r+0x13c>
 800cd90:	4654      	mov	r4, sl
 800cd92:	2000      	movs	r0, #0
 800cd94:	f04f 0c0a 	mov.w	ip, #10
 800cd98:	9a07      	ldr	r2, [sp, #28]
 800cd9a:	4621      	mov	r1, r4
 800cd9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cda0:	3b30      	subs	r3, #48	; 0x30
 800cda2:	2b09      	cmp	r3, #9
 800cda4:	d94e      	bls.n	800ce44 <_vfiprintf_r+0x1c4>
 800cda6:	b1b0      	cbz	r0, 800cdd6 <_vfiprintf_r+0x156>
 800cda8:	9207      	str	r2, [sp, #28]
 800cdaa:	e014      	b.n	800cdd6 <_vfiprintf_r+0x156>
 800cdac:	eba0 0308 	sub.w	r3, r0, r8
 800cdb0:	fa09 f303 	lsl.w	r3, r9, r3
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	46a2      	mov	sl, r4
 800cdb8:	9304      	str	r3, [sp, #16]
 800cdba:	e7d2      	b.n	800cd62 <_vfiprintf_r+0xe2>
 800cdbc:	9b03      	ldr	r3, [sp, #12]
 800cdbe:	1d19      	adds	r1, r3, #4
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	9103      	str	r1, [sp, #12]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	bfbb      	ittet	lt
 800cdc8:	425b      	neglt	r3, r3
 800cdca:	f042 0202 	orrlt.w	r2, r2, #2
 800cdce:	9307      	strge	r3, [sp, #28]
 800cdd0:	9307      	strlt	r3, [sp, #28]
 800cdd2:	bfb8      	it	lt
 800cdd4:	9204      	strlt	r2, [sp, #16]
 800cdd6:	7823      	ldrb	r3, [r4, #0]
 800cdd8:	2b2e      	cmp	r3, #46	; 0x2e
 800cdda:	d10c      	bne.n	800cdf6 <_vfiprintf_r+0x176>
 800cddc:	7863      	ldrb	r3, [r4, #1]
 800cdde:	2b2a      	cmp	r3, #42	; 0x2a
 800cde0:	d135      	bne.n	800ce4e <_vfiprintf_r+0x1ce>
 800cde2:	9b03      	ldr	r3, [sp, #12]
 800cde4:	3402      	adds	r4, #2
 800cde6:	1d1a      	adds	r2, r3, #4
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	9203      	str	r2, [sp, #12]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	bfb8      	it	lt
 800cdf0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdf4:	9305      	str	r3, [sp, #20]
 800cdf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cedc <_vfiprintf_r+0x25c>
 800cdfa:	2203      	movs	r2, #3
 800cdfc:	4650      	mov	r0, sl
 800cdfe:	7821      	ldrb	r1, [r4, #0]
 800ce00:	f000 fc72 	bl	800d6e8 <memchr>
 800ce04:	b140      	cbz	r0, 800ce18 <_vfiprintf_r+0x198>
 800ce06:	2340      	movs	r3, #64	; 0x40
 800ce08:	eba0 000a 	sub.w	r0, r0, sl
 800ce0c:	fa03 f000 	lsl.w	r0, r3, r0
 800ce10:	9b04      	ldr	r3, [sp, #16]
 800ce12:	3401      	adds	r4, #1
 800ce14:	4303      	orrs	r3, r0
 800ce16:	9304      	str	r3, [sp, #16]
 800ce18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce1c:	2206      	movs	r2, #6
 800ce1e:	482c      	ldr	r0, [pc, #176]	; (800ced0 <_vfiprintf_r+0x250>)
 800ce20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce24:	f000 fc60 	bl	800d6e8 <memchr>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d03f      	beq.n	800ceac <_vfiprintf_r+0x22c>
 800ce2c:	4b29      	ldr	r3, [pc, #164]	; (800ced4 <_vfiprintf_r+0x254>)
 800ce2e:	bb1b      	cbnz	r3, 800ce78 <_vfiprintf_r+0x1f8>
 800ce30:	9b03      	ldr	r3, [sp, #12]
 800ce32:	3307      	adds	r3, #7
 800ce34:	f023 0307 	bic.w	r3, r3, #7
 800ce38:	3308      	adds	r3, #8
 800ce3a:	9303      	str	r3, [sp, #12]
 800ce3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce3e:	443b      	add	r3, r7
 800ce40:	9309      	str	r3, [sp, #36]	; 0x24
 800ce42:	e767      	b.n	800cd14 <_vfiprintf_r+0x94>
 800ce44:	460c      	mov	r4, r1
 800ce46:	2001      	movs	r0, #1
 800ce48:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce4c:	e7a5      	b.n	800cd9a <_vfiprintf_r+0x11a>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	f04f 0c0a 	mov.w	ip, #10
 800ce54:	4619      	mov	r1, r3
 800ce56:	3401      	adds	r4, #1
 800ce58:	9305      	str	r3, [sp, #20]
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce60:	3a30      	subs	r2, #48	; 0x30
 800ce62:	2a09      	cmp	r2, #9
 800ce64:	d903      	bls.n	800ce6e <_vfiprintf_r+0x1ee>
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d0c5      	beq.n	800cdf6 <_vfiprintf_r+0x176>
 800ce6a:	9105      	str	r1, [sp, #20]
 800ce6c:	e7c3      	b.n	800cdf6 <_vfiprintf_r+0x176>
 800ce6e:	4604      	mov	r4, r0
 800ce70:	2301      	movs	r3, #1
 800ce72:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce76:	e7f0      	b.n	800ce5a <_vfiprintf_r+0x1da>
 800ce78:	ab03      	add	r3, sp, #12
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	462a      	mov	r2, r5
 800ce7e:	4630      	mov	r0, r6
 800ce80:	4b15      	ldr	r3, [pc, #84]	; (800ced8 <_vfiprintf_r+0x258>)
 800ce82:	a904      	add	r1, sp, #16
 800ce84:	f3af 8000 	nop.w
 800ce88:	4607      	mov	r7, r0
 800ce8a:	1c78      	adds	r0, r7, #1
 800ce8c:	d1d6      	bne.n	800ce3c <_vfiprintf_r+0x1bc>
 800ce8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce90:	07d9      	lsls	r1, r3, #31
 800ce92:	d405      	bmi.n	800cea0 <_vfiprintf_r+0x220>
 800ce94:	89ab      	ldrh	r3, [r5, #12]
 800ce96:	059a      	lsls	r2, r3, #22
 800ce98:	d402      	bmi.n	800cea0 <_vfiprintf_r+0x220>
 800ce9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce9c:	f7ff fd11 	bl	800c8c2 <__retarget_lock_release_recursive>
 800cea0:	89ab      	ldrh	r3, [r5, #12]
 800cea2:	065b      	lsls	r3, r3, #25
 800cea4:	f53f af12 	bmi.w	800cccc <_vfiprintf_r+0x4c>
 800cea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ceaa:	e711      	b.n	800ccd0 <_vfiprintf_r+0x50>
 800ceac:	ab03      	add	r3, sp, #12
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	462a      	mov	r2, r5
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	4b08      	ldr	r3, [pc, #32]	; (800ced8 <_vfiprintf_r+0x258>)
 800ceb6:	a904      	add	r1, sp, #16
 800ceb8:	f000 f882 	bl	800cfc0 <_printf_i>
 800cebc:	e7e4      	b.n	800ce88 <_vfiprintf_r+0x208>
 800cebe:	bf00      	nop
 800cec0:	0800db60 	.word	0x0800db60
 800cec4:	0800db80 	.word	0x0800db80
 800cec8:	0800db40 	.word	0x0800db40
 800cecc:	0800dba0 	.word	0x0800dba0
 800ced0:	0800dbaa 	.word	0x0800dbaa
 800ced4:	00000000 	.word	0x00000000
 800ced8:	0800cc5b 	.word	0x0800cc5b
 800cedc:	0800dba6 	.word	0x0800dba6

0800cee0 <_printf_common>:
 800cee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee4:	4616      	mov	r6, r2
 800cee6:	4699      	mov	r9, r3
 800cee8:	688a      	ldr	r2, [r1, #8]
 800ceea:	690b      	ldr	r3, [r1, #16]
 800ceec:	4607      	mov	r7, r0
 800ceee:	4293      	cmp	r3, r2
 800cef0:	bfb8      	it	lt
 800cef2:	4613      	movlt	r3, r2
 800cef4:	6033      	str	r3, [r6, #0]
 800cef6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cefa:	460c      	mov	r4, r1
 800cefc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf00:	b10a      	cbz	r2, 800cf06 <_printf_common+0x26>
 800cf02:	3301      	adds	r3, #1
 800cf04:	6033      	str	r3, [r6, #0]
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	0699      	lsls	r1, r3, #26
 800cf0a:	bf42      	ittt	mi
 800cf0c:	6833      	ldrmi	r3, [r6, #0]
 800cf0e:	3302      	addmi	r3, #2
 800cf10:	6033      	strmi	r3, [r6, #0]
 800cf12:	6825      	ldr	r5, [r4, #0]
 800cf14:	f015 0506 	ands.w	r5, r5, #6
 800cf18:	d106      	bne.n	800cf28 <_printf_common+0x48>
 800cf1a:	f104 0a19 	add.w	sl, r4, #25
 800cf1e:	68e3      	ldr	r3, [r4, #12]
 800cf20:	6832      	ldr	r2, [r6, #0]
 800cf22:	1a9b      	subs	r3, r3, r2
 800cf24:	42ab      	cmp	r3, r5
 800cf26:	dc28      	bgt.n	800cf7a <_printf_common+0x9a>
 800cf28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf2c:	1e13      	subs	r3, r2, #0
 800cf2e:	6822      	ldr	r2, [r4, #0]
 800cf30:	bf18      	it	ne
 800cf32:	2301      	movne	r3, #1
 800cf34:	0692      	lsls	r2, r2, #26
 800cf36:	d42d      	bmi.n	800cf94 <_printf_common+0xb4>
 800cf38:	4649      	mov	r1, r9
 800cf3a:	4638      	mov	r0, r7
 800cf3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf40:	47c0      	blx	r8
 800cf42:	3001      	adds	r0, #1
 800cf44:	d020      	beq.n	800cf88 <_printf_common+0xa8>
 800cf46:	6823      	ldr	r3, [r4, #0]
 800cf48:	68e5      	ldr	r5, [r4, #12]
 800cf4a:	f003 0306 	and.w	r3, r3, #6
 800cf4e:	2b04      	cmp	r3, #4
 800cf50:	bf18      	it	ne
 800cf52:	2500      	movne	r5, #0
 800cf54:	6832      	ldr	r2, [r6, #0]
 800cf56:	f04f 0600 	mov.w	r6, #0
 800cf5a:	68a3      	ldr	r3, [r4, #8]
 800cf5c:	bf08      	it	eq
 800cf5e:	1aad      	subeq	r5, r5, r2
 800cf60:	6922      	ldr	r2, [r4, #16]
 800cf62:	bf08      	it	eq
 800cf64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	bfc4      	itt	gt
 800cf6c:	1a9b      	subgt	r3, r3, r2
 800cf6e:	18ed      	addgt	r5, r5, r3
 800cf70:	341a      	adds	r4, #26
 800cf72:	42b5      	cmp	r5, r6
 800cf74:	d11a      	bne.n	800cfac <_printf_common+0xcc>
 800cf76:	2000      	movs	r0, #0
 800cf78:	e008      	b.n	800cf8c <_printf_common+0xac>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	4652      	mov	r2, sl
 800cf7e:	4649      	mov	r1, r9
 800cf80:	4638      	mov	r0, r7
 800cf82:	47c0      	blx	r8
 800cf84:	3001      	adds	r0, #1
 800cf86:	d103      	bne.n	800cf90 <_printf_common+0xb0>
 800cf88:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf90:	3501      	adds	r5, #1
 800cf92:	e7c4      	b.n	800cf1e <_printf_common+0x3e>
 800cf94:	2030      	movs	r0, #48	; 0x30
 800cf96:	18e1      	adds	r1, r4, r3
 800cf98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf9c:	1c5a      	adds	r2, r3, #1
 800cf9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfa2:	4422      	add	r2, r4
 800cfa4:	3302      	adds	r3, #2
 800cfa6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfaa:	e7c5      	b.n	800cf38 <_printf_common+0x58>
 800cfac:	2301      	movs	r3, #1
 800cfae:	4622      	mov	r2, r4
 800cfb0:	4649      	mov	r1, r9
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	47c0      	blx	r8
 800cfb6:	3001      	adds	r0, #1
 800cfb8:	d0e6      	beq.n	800cf88 <_printf_common+0xa8>
 800cfba:	3601      	adds	r6, #1
 800cfbc:	e7d9      	b.n	800cf72 <_printf_common+0x92>
	...

0800cfc0 <_printf_i>:
 800cfc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc4:	460c      	mov	r4, r1
 800cfc6:	7e27      	ldrb	r7, [r4, #24]
 800cfc8:	4691      	mov	r9, r2
 800cfca:	2f78      	cmp	r7, #120	; 0x78
 800cfcc:	4680      	mov	r8, r0
 800cfce:	469a      	mov	sl, r3
 800cfd0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cfd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cfd6:	d807      	bhi.n	800cfe8 <_printf_i+0x28>
 800cfd8:	2f62      	cmp	r7, #98	; 0x62
 800cfda:	d80a      	bhi.n	800cff2 <_printf_i+0x32>
 800cfdc:	2f00      	cmp	r7, #0
 800cfde:	f000 80d9 	beq.w	800d194 <_printf_i+0x1d4>
 800cfe2:	2f58      	cmp	r7, #88	; 0x58
 800cfe4:	f000 80a4 	beq.w	800d130 <_printf_i+0x170>
 800cfe8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cfec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cff0:	e03a      	b.n	800d068 <_printf_i+0xa8>
 800cff2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cff6:	2b15      	cmp	r3, #21
 800cff8:	d8f6      	bhi.n	800cfe8 <_printf_i+0x28>
 800cffa:	a001      	add	r0, pc, #4	; (adr r0, 800d000 <_printf_i+0x40>)
 800cffc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d000:	0800d059 	.word	0x0800d059
 800d004:	0800d06d 	.word	0x0800d06d
 800d008:	0800cfe9 	.word	0x0800cfe9
 800d00c:	0800cfe9 	.word	0x0800cfe9
 800d010:	0800cfe9 	.word	0x0800cfe9
 800d014:	0800cfe9 	.word	0x0800cfe9
 800d018:	0800d06d 	.word	0x0800d06d
 800d01c:	0800cfe9 	.word	0x0800cfe9
 800d020:	0800cfe9 	.word	0x0800cfe9
 800d024:	0800cfe9 	.word	0x0800cfe9
 800d028:	0800cfe9 	.word	0x0800cfe9
 800d02c:	0800d17b 	.word	0x0800d17b
 800d030:	0800d09d 	.word	0x0800d09d
 800d034:	0800d15d 	.word	0x0800d15d
 800d038:	0800cfe9 	.word	0x0800cfe9
 800d03c:	0800cfe9 	.word	0x0800cfe9
 800d040:	0800d19d 	.word	0x0800d19d
 800d044:	0800cfe9 	.word	0x0800cfe9
 800d048:	0800d09d 	.word	0x0800d09d
 800d04c:	0800cfe9 	.word	0x0800cfe9
 800d050:	0800cfe9 	.word	0x0800cfe9
 800d054:	0800d165 	.word	0x0800d165
 800d058:	680b      	ldr	r3, [r1, #0]
 800d05a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d05e:	1d1a      	adds	r2, r3, #4
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	600a      	str	r2, [r1, #0]
 800d064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d068:	2301      	movs	r3, #1
 800d06a:	e0a4      	b.n	800d1b6 <_printf_i+0x1f6>
 800d06c:	6825      	ldr	r5, [r4, #0]
 800d06e:	6808      	ldr	r0, [r1, #0]
 800d070:	062e      	lsls	r6, r5, #24
 800d072:	f100 0304 	add.w	r3, r0, #4
 800d076:	d50a      	bpl.n	800d08e <_printf_i+0xce>
 800d078:	6805      	ldr	r5, [r0, #0]
 800d07a:	600b      	str	r3, [r1, #0]
 800d07c:	2d00      	cmp	r5, #0
 800d07e:	da03      	bge.n	800d088 <_printf_i+0xc8>
 800d080:	232d      	movs	r3, #45	; 0x2d
 800d082:	426d      	negs	r5, r5
 800d084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d088:	230a      	movs	r3, #10
 800d08a:	485e      	ldr	r0, [pc, #376]	; (800d204 <_printf_i+0x244>)
 800d08c:	e019      	b.n	800d0c2 <_printf_i+0x102>
 800d08e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d092:	6805      	ldr	r5, [r0, #0]
 800d094:	600b      	str	r3, [r1, #0]
 800d096:	bf18      	it	ne
 800d098:	b22d      	sxthne	r5, r5
 800d09a:	e7ef      	b.n	800d07c <_printf_i+0xbc>
 800d09c:	680b      	ldr	r3, [r1, #0]
 800d09e:	6825      	ldr	r5, [r4, #0]
 800d0a0:	1d18      	adds	r0, r3, #4
 800d0a2:	6008      	str	r0, [r1, #0]
 800d0a4:	0628      	lsls	r0, r5, #24
 800d0a6:	d501      	bpl.n	800d0ac <_printf_i+0xec>
 800d0a8:	681d      	ldr	r5, [r3, #0]
 800d0aa:	e002      	b.n	800d0b2 <_printf_i+0xf2>
 800d0ac:	0669      	lsls	r1, r5, #25
 800d0ae:	d5fb      	bpl.n	800d0a8 <_printf_i+0xe8>
 800d0b0:	881d      	ldrh	r5, [r3, #0]
 800d0b2:	2f6f      	cmp	r7, #111	; 0x6f
 800d0b4:	bf0c      	ite	eq
 800d0b6:	2308      	moveq	r3, #8
 800d0b8:	230a      	movne	r3, #10
 800d0ba:	4852      	ldr	r0, [pc, #328]	; (800d204 <_printf_i+0x244>)
 800d0bc:	2100      	movs	r1, #0
 800d0be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0c2:	6866      	ldr	r6, [r4, #4]
 800d0c4:	2e00      	cmp	r6, #0
 800d0c6:	bfa8      	it	ge
 800d0c8:	6821      	ldrge	r1, [r4, #0]
 800d0ca:	60a6      	str	r6, [r4, #8]
 800d0cc:	bfa4      	itt	ge
 800d0ce:	f021 0104 	bicge.w	r1, r1, #4
 800d0d2:	6021      	strge	r1, [r4, #0]
 800d0d4:	b90d      	cbnz	r5, 800d0da <_printf_i+0x11a>
 800d0d6:	2e00      	cmp	r6, #0
 800d0d8:	d04d      	beq.n	800d176 <_printf_i+0x1b6>
 800d0da:	4616      	mov	r6, r2
 800d0dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800d0e0:	fb03 5711 	mls	r7, r3, r1, r5
 800d0e4:	5dc7      	ldrb	r7, [r0, r7]
 800d0e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d0ea:	462f      	mov	r7, r5
 800d0ec:	42bb      	cmp	r3, r7
 800d0ee:	460d      	mov	r5, r1
 800d0f0:	d9f4      	bls.n	800d0dc <_printf_i+0x11c>
 800d0f2:	2b08      	cmp	r3, #8
 800d0f4:	d10b      	bne.n	800d10e <_printf_i+0x14e>
 800d0f6:	6823      	ldr	r3, [r4, #0]
 800d0f8:	07df      	lsls	r7, r3, #31
 800d0fa:	d508      	bpl.n	800d10e <_printf_i+0x14e>
 800d0fc:	6923      	ldr	r3, [r4, #16]
 800d0fe:	6861      	ldr	r1, [r4, #4]
 800d100:	4299      	cmp	r1, r3
 800d102:	bfde      	ittt	le
 800d104:	2330      	movle	r3, #48	; 0x30
 800d106:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d10a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d10e:	1b92      	subs	r2, r2, r6
 800d110:	6122      	str	r2, [r4, #16]
 800d112:	464b      	mov	r3, r9
 800d114:	4621      	mov	r1, r4
 800d116:	4640      	mov	r0, r8
 800d118:	f8cd a000 	str.w	sl, [sp]
 800d11c:	aa03      	add	r2, sp, #12
 800d11e:	f7ff fedf 	bl	800cee0 <_printf_common>
 800d122:	3001      	adds	r0, #1
 800d124:	d14c      	bne.n	800d1c0 <_printf_i+0x200>
 800d126:	f04f 30ff 	mov.w	r0, #4294967295
 800d12a:	b004      	add	sp, #16
 800d12c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d130:	4834      	ldr	r0, [pc, #208]	; (800d204 <_printf_i+0x244>)
 800d132:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d136:	680e      	ldr	r6, [r1, #0]
 800d138:	6823      	ldr	r3, [r4, #0]
 800d13a:	f856 5b04 	ldr.w	r5, [r6], #4
 800d13e:	061f      	lsls	r7, r3, #24
 800d140:	600e      	str	r6, [r1, #0]
 800d142:	d514      	bpl.n	800d16e <_printf_i+0x1ae>
 800d144:	07d9      	lsls	r1, r3, #31
 800d146:	bf44      	itt	mi
 800d148:	f043 0320 	orrmi.w	r3, r3, #32
 800d14c:	6023      	strmi	r3, [r4, #0]
 800d14e:	b91d      	cbnz	r5, 800d158 <_printf_i+0x198>
 800d150:	6823      	ldr	r3, [r4, #0]
 800d152:	f023 0320 	bic.w	r3, r3, #32
 800d156:	6023      	str	r3, [r4, #0]
 800d158:	2310      	movs	r3, #16
 800d15a:	e7af      	b.n	800d0bc <_printf_i+0xfc>
 800d15c:	6823      	ldr	r3, [r4, #0]
 800d15e:	f043 0320 	orr.w	r3, r3, #32
 800d162:	6023      	str	r3, [r4, #0]
 800d164:	2378      	movs	r3, #120	; 0x78
 800d166:	4828      	ldr	r0, [pc, #160]	; (800d208 <_printf_i+0x248>)
 800d168:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d16c:	e7e3      	b.n	800d136 <_printf_i+0x176>
 800d16e:	065e      	lsls	r6, r3, #25
 800d170:	bf48      	it	mi
 800d172:	b2ad      	uxthmi	r5, r5
 800d174:	e7e6      	b.n	800d144 <_printf_i+0x184>
 800d176:	4616      	mov	r6, r2
 800d178:	e7bb      	b.n	800d0f2 <_printf_i+0x132>
 800d17a:	680b      	ldr	r3, [r1, #0]
 800d17c:	6826      	ldr	r6, [r4, #0]
 800d17e:	1d1d      	adds	r5, r3, #4
 800d180:	6960      	ldr	r0, [r4, #20]
 800d182:	600d      	str	r5, [r1, #0]
 800d184:	0635      	lsls	r5, r6, #24
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	d501      	bpl.n	800d18e <_printf_i+0x1ce>
 800d18a:	6018      	str	r0, [r3, #0]
 800d18c:	e002      	b.n	800d194 <_printf_i+0x1d4>
 800d18e:	0671      	lsls	r1, r6, #25
 800d190:	d5fb      	bpl.n	800d18a <_printf_i+0x1ca>
 800d192:	8018      	strh	r0, [r3, #0]
 800d194:	2300      	movs	r3, #0
 800d196:	4616      	mov	r6, r2
 800d198:	6123      	str	r3, [r4, #16]
 800d19a:	e7ba      	b.n	800d112 <_printf_i+0x152>
 800d19c:	680b      	ldr	r3, [r1, #0]
 800d19e:	1d1a      	adds	r2, r3, #4
 800d1a0:	600a      	str	r2, [r1, #0]
 800d1a2:	681e      	ldr	r6, [r3, #0]
 800d1a4:	2100      	movs	r1, #0
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	6862      	ldr	r2, [r4, #4]
 800d1aa:	f000 fa9d 	bl	800d6e8 <memchr>
 800d1ae:	b108      	cbz	r0, 800d1b4 <_printf_i+0x1f4>
 800d1b0:	1b80      	subs	r0, r0, r6
 800d1b2:	6060      	str	r0, [r4, #4]
 800d1b4:	6863      	ldr	r3, [r4, #4]
 800d1b6:	6123      	str	r3, [r4, #16]
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1be:	e7a8      	b.n	800d112 <_printf_i+0x152>
 800d1c0:	4632      	mov	r2, r6
 800d1c2:	4649      	mov	r1, r9
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	6923      	ldr	r3, [r4, #16]
 800d1c8:	47d0      	blx	sl
 800d1ca:	3001      	adds	r0, #1
 800d1cc:	d0ab      	beq.n	800d126 <_printf_i+0x166>
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	079b      	lsls	r3, r3, #30
 800d1d2:	d413      	bmi.n	800d1fc <_printf_i+0x23c>
 800d1d4:	68e0      	ldr	r0, [r4, #12]
 800d1d6:	9b03      	ldr	r3, [sp, #12]
 800d1d8:	4298      	cmp	r0, r3
 800d1da:	bfb8      	it	lt
 800d1dc:	4618      	movlt	r0, r3
 800d1de:	e7a4      	b.n	800d12a <_printf_i+0x16a>
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	4632      	mov	r2, r6
 800d1e4:	4649      	mov	r1, r9
 800d1e6:	4640      	mov	r0, r8
 800d1e8:	47d0      	blx	sl
 800d1ea:	3001      	adds	r0, #1
 800d1ec:	d09b      	beq.n	800d126 <_printf_i+0x166>
 800d1ee:	3501      	adds	r5, #1
 800d1f0:	68e3      	ldr	r3, [r4, #12]
 800d1f2:	9903      	ldr	r1, [sp, #12]
 800d1f4:	1a5b      	subs	r3, r3, r1
 800d1f6:	42ab      	cmp	r3, r5
 800d1f8:	dcf2      	bgt.n	800d1e0 <_printf_i+0x220>
 800d1fa:	e7eb      	b.n	800d1d4 <_printf_i+0x214>
 800d1fc:	2500      	movs	r5, #0
 800d1fe:	f104 0619 	add.w	r6, r4, #25
 800d202:	e7f5      	b.n	800d1f0 <_printf_i+0x230>
 800d204:	0800dbb1 	.word	0x0800dbb1
 800d208:	0800dbc2 	.word	0x0800dbc2

0800d20c <_sbrk_r>:
 800d20c:	b538      	push	{r3, r4, r5, lr}
 800d20e:	2300      	movs	r3, #0
 800d210:	4d05      	ldr	r5, [pc, #20]	; (800d228 <_sbrk_r+0x1c>)
 800d212:	4604      	mov	r4, r0
 800d214:	4608      	mov	r0, r1
 800d216:	602b      	str	r3, [r5, #0]
 800d218:	f7f6 fd76 	bl	8003d08 <_sbrk>
 800d21c:	1c43      	adds	r3, r0, #1
 800d21e:	d102      	bne.n	800d226 <_sbrk_r+0x1a>
 800d220:	682b      	ldr	r3, [r5, #0]
 800d222:	b103      	cbz	r3, 800d226 <_sbrk_r+0x1a>
 800d224:	6023      	str	r3, [r4, #0]
 800d226:	bd38      	pop	{r3, r4, r5, pc}
 800d228:	200015bc 	.word	0x200015bc

0800d22c <__sread>:
 800d22c:	b510      	push	{r4, lr}
 800d22e:	460c      	mov	r4, r1
 800d230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d234:	f000 fafe 	bl	800d834 <_read_r>
 800d238:	2800      	cmp	r0, #0
 800d23a:	bfab      	itete	ge
 800d23c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d23e:	89a3      	ldrhlt	r3, [r4, #12]
 800d240:	181b      	addge	r3, r3, r0
 800d242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d246:	bfac      	ite	ge
 800d248:	6563      	strge	r3, [r4, #84]	; 0x54
 800d24a:	81a3      	strhlt	r3, [r4, #12]
 800d24c:	bd10      	pop	{r4, pc}

0800d24e <__swrite>:
 800d24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d252:	461f      	mov	r7, r3
 800d254:	898b      	ldrh	r3, [r1, #12]
 800d256:	4605      	mov	r5, r0
 800d258:	05db      	lsls	r3, r3, #23
 800d25a:	460c      	mov	r4, r1
 800d25c:	4616      	mov	r6, r2
 800d25e:	d505      	bpl.n	800d26c <__swrite+0x1e>
 800d260:	2302      	movs	r3, #2
 800d262:	2200      	movs	r2, #0
 800d264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d268:	f000 f9c8 	bl	800d5fc <_lseek_r>
 800d26c:	89a3      	ldrh	r3, [r4, #12]
 800d26e:	4632      	mov	r2, r6
 800d270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d274:	81a3      	strh	r3, [r4, #12]
 800d276:	4628      	mov	r0, r5
 800d278:	463b      	mov	r3, r7
 800d27a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d27e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d282:	f000 b869 	b.w	800d358 <_write_r>

0800d286 <__sseek>:
 800d286:	b510      	push	{r4, lr}
 800d288:	460c      	mov	r4, r1
 800d28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d28e:	f000 f9b5 	bl	800d5fc <_lseek_r>
 800d292:	1c43      	adds	r3, r0, #1
 800d294:	89a3      	ldrh	r3, [r4, #12]
 800d296:	bf15      	itete	ne
 800d298:	6560      	strne	r0, [r4, #84]	; 0x54
 800d29a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d29e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d2a2:	81a3      	strheq	r3, [r4, #12]
 800d2a4:	bf18      	it	ne
 800d2a6:	81a3      	strhne	r3, [r4, #12]
 800d2a8:	bd10      	pop	{r4, pc}

0800d2aa <__sclose>:
 800d2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2ae:	f000 b8d3 	b.w	800d458 <_close_r>
	...

0800d2b4 <__swbuf_r>:
 800d2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b6:	460e      	mov	r6, r1
 800d2b8:	4614      	mov	r4, r2
 800d2ba:	4605      	mov	r5, r0
 800d2bc:	b118      	cbz	r0, 800d2c6 <__swbuf_r+0x12>
 800d2be:	6983      	ldr	r3, [r0, #24]
 800d2c0:	b90b      	cbnz	r3, 800d2c6 <__swbuf_r+0x12>
 800d2c2:	f7ff fa5f 	bl	800c784 <__sinit>
 800d2c6:	4b21      	ldr	r3, [pc, #132]	; (800d34c <__swbuf_r+0x98>)
 800d2c8:	429c      	cmp	r4, r3
 800d2ca:	d12b      	bne.n	800d324 <__swbuf_r+0x70>
 800d2cc:	686c      	ldr	r4, [r5, #4]
 800d2ce:	69a3      	ldr	r3, [r4, #24]
 800d2d0:	60a3      	str	r3, [r4, #8]
 800d2d2:	89a3      	ldrh	r3, [r4, #12]
 800d2d4:	071a      	lsls	r2, r3, #28
 800d2d6:	d52f      	bpl.n	800d338 <__swbuf_r+0x84>
 800d2d8:	6923      	ldr	r3, [r4, #16]
 800d2da:	b36b      	cbz	r3, 800d338 <__swbuf_r+0x84>
 800d2dc:	6923      	ldr	r3, [r4, #16]
 800d2de:	6820      	ldr	r0, [r4, #0]
 800d2e0:	b2f6      	uxtb	r6, r6
 800d2e2:	1ac0      	subs	r0, r0, r3
 800d2e4:	6963      	ldr	r3, [r4, #20]
 800d2e6:	4637      	mov	r7, r6
 800d2e8:	4283      	cmp	r3, r0
 800d2ea:	dc04      	bgt.n	800d2f6 <__swbuf_r+0x42>
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	f000 f948 	bl	800d584 <_fflush_r>
 800d2f4:	bb30      	cbnz	r0, 800d344 <__swbuf_r+0x90>
 800d2f6:	68a3      	ldr	r3, [r4, #8]
 800d2f8:	3001      	adds	r0, #1
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	60a3      	str	r3, [r4, #8]
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	1c5a      	adds	r2, r3, #1
 800d302:	6022      	str	r2, [r4, #0]
 800d304:	701e      	strb	r6, [r3, #0]
 800d306:	6963      	ldr	r3, [r4, #20]
 800d308:	4283      	cmp	r3, r0
 800d30a:	d004      	beq.n	800d316 <__swbuf_r+0x62>
 800d30c:	89a3      	ldrh	r3, [r4, #12]
 800d30e:	07db      	lsls	r3, r3, #31
 800d310:	d506      	bpl.n	800d320 <__swbuf_r+0x6c>
 800d312:	2e0a      	cmp	r6, #10
 800d314:	d104      	bne.n	800d320 <__swbuf_r+0x6c>
 800d316:	4621      	mov	r1, r4
 800d318:	4628      	mov	r0, r5
 800d31a:	f000 f933 	bl	800d584 <_fflush_r>
 800d31e:	b988      	cbnz	r0, 800d344 <__swbuf_r+0x90>
 800d320:	4638      	mov	r0, r7
 800d322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d324:	4b0a      	ldr	r3, [pc, #40]	; (800d350 <__swbuf_r+0x9c>)
 800d326:	429c      	cmp	r4, r3
 800d328:	d101      	bne.n	800d32e <__swbuf_r+0x7a>
 800d32a:	68ac      	ldr	r4, [r5, #8]
 800d32c:	e7cf      	b.n	800d2ce <__swbuf_r+0x1a>
 800d32e:	4b09      	ldr	r3, [pc, #36]	; (800d354 <__swbuf_r+0xa0>)
 800d330:	429c      	cmp	r4, r3
 800d332:	bf08      	it	eq
 800d334:	68ec      	ldreq	r4, [r5, #12]
 800d336:	e7ca      	b.n	800d2ce <__swbuf_r+0x1a>
 800d338:	4621      	mov	r1, r4
 800d33a:	4628      	mov	r0, r5
 800d33c:	f000 f81e 	bl	800d37c <__swsetup_r>
 800d340:	2800      	cmp	r0, #0
 800d342:	d0cb      	beq.n	800d2dc <__swbuf_r+0x28>
 800d344:	f04f 37ff 	mov.w	r7, #4294967295
 800d348:	e7ea      	b.n	800d320 <__swbuf_r+0x6c>
 800d34a:	bf00      	nop
 800d34c:	0800db60 	.word	0x0800db60
 800d350:	0800db80 	.word	0x0800db80
 800d354:	0800db40 	.word	0x0800db40

0800d358 <_write_r>:
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	4604      	mov	r4, r0
 800d35c:	4608      	mov	r0, r1
 800d35e:	4611      	mov	r1, r2
 800d360:	2200      	movs	r2, #0
 800d362:	4d05      	ldr	r5, [pc, #20]	; (800d378 <_write_r+0x20>)
 800d364:	602a      	str	r2, [r5, #0]
 800d366:	461a      	mov	r2, r3
 800d368:	f7f4 ff7c 	bl	8002264 <_write>
 800d36c:	1c43      	adds	r3, r0, #1
 800d36e:	d102      	bne.n	800d376 <_write_r+0x1e>
 800d370:	682b      	ldr	r3, [r5, #0]
 800d372:	b103      	cbz	r3, 800d376 <_write_r+0x1e>
 800d374:	6023      	str	r3, [r4, #0]
 800d376:	bd38      	pop	{r3, r4, r5, pc}
 800d378:	200015bc 	.word	0x200015bc

0800d37c <__swsetup_r>:
 800d37c:	4b32      	ldr	r3, [pc, #200]	; (800d448 <__swsetup_r+0xcc>)
 800d37e:	b570      	push	{r4, r5, r6, lr}
 800d380:	681d      	ldr	r5, [r3, #0]
 800d382:	4606      	mov	r6, r0
 800d384:	460c      	mov	r4, r1
 800d386:	b125      	cbz	r5, 800d392 <__swsetup_r+0x16>
 800d388:	69ab      	ldr	r3, [r5, #24]
 800d38a:	b913      	cbnz	r3, 800d392 <__swsetup_r+0x16>
 800d38c:	4628      	mov	r0, r5
 800d38e:	f7ff f9f9 	bl	800c784 <__sinit>
 800d392:	4b2e      	ldr	r3, [pc, #184]	; (800d44c <__swsetup_r+0xd0>)
 800d394:	429c      	cmp	r4, r3
 800d396:	d10f      	bne.n	800d3b8 <__swsetup_r+0x3c>
 800d398:	686c      	ldr	r4, [r5, #4]
 800d39a:	89a3      	ldrh	r3, [r4, #12]
 800d39c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3a0:	0719      	lsls	r1, r3, #28
 800d3a2:	d42c      	bmi.n	800d3fe <__swsetup_r+0x82>
 800d3a4:	06dd      	lsls	r5, r3, #27
 800d3a6:	d411      	bmi.n	800d3cc <__swsetup_r+0x50>
 800d3a8:	2309      	movs	r3, #9
 800d3aa:	6033      	str	r3, [r6, #0]
 800d3ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b4:	81a3      	strh	r3, [r4, #12]
 800d3b6:	e03e      	b.n	800d436 <__swsetup_r+0xba>
 800d3b8:	4b25      	ldr	r3, [pc, #148]	; (800d450 <__swsetup_r+0xd4>)
 800d3ba:	429c      	cmp	r4, r3
 800d3bc:	d101      	bne.n	800d3c2 <__swsetup_r+0x46>
 800d3be:	68ac      	ldr	r4, [r5, #8]
 800d3c0:	e7eb      	b.n	800d39a <__swsetup_r+0x1e>
 800d3c2:	4b24      	ldr	r3, [pc, #144]	; (800d454 <__swsetup_r+0xd8>)
 800d3c4:	429c      	cmp	r4, r3
 800d3c6:	bf08      	it	eq
 800d3c8:	68ec      	ldreq	r4, [r5, #12]
 800d3ca:	e7e6      	b.n	800d39a <__swsetup_r+0x1e>
 800d3cc:	0758      	lsls	r0, r3, #29
 800d3ce:	d512      	bpl.n	800d3f6 <__swsetup_r+0x7a>
 800d3d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3d2:	b141      	cbz	r1, 800d3e6 <__swsetup_r+0x6a>
 800d3d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3d8:	4299      	cmp	r1, r3
 800d3da:	d002      	beq.n	800d3e2 <__swsetup_r+0x66>
 800d3dc:	4630      	mov	r0, r6
 800d3de:	f000 f9b7 	bl	800d750 <_free_r>
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	6363      	str	r3, [r4, #52]	; 0x34
 800d3e6:	89a3      	ldrh	r3, [r4, #12]
 800d3e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d3ec:	81a3      	strh	r3, [r4, #12]
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	6063      	str	r3, [r4, #4]
 800d3f2:	6923      	ldr	r3, [r4, #16]
 800d3f4:	6023      	str	r3, [r4, #0]
 800d3f6:	89a3      	ldrh	r3, [r4, #12]
 800d3f8:	f043 0308 	orr.w	r3, r3, #8
 800d3fc:	81a3      	strh	r3, [r4, #12]
 800d3fe:	6923      	ldr	r3, [r4, #16]
 800d400:	b94b      	cbnz	r3, 800d416 <__swsetup_r+0x9a>
 800d402:	89a3      	ldrh	r3, [r4, #12]
 800d404:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d40c:	d003      	beq.n	800d416 <__swsetup_r+0x9a>
 800d40e:	4621      	mov	r1, r4
 800d410:	4630      	mov	r0, r6
 800d412:	f000 f929 	bl	800d668 <__smakebuf_r>
 800d416:	89a0      	ldrh	r0, [r4, #12]
 800d418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d41c:	f010 0301 	ands.w	r3, r0, #1
 800d420:	d00a      	beq.n	800d438 <__swsetup_r+0xbc>
 800d422:	2300      	movs	r3, #0
 800d424:	60a3      	str	r3, [r4, #8]
 800d426:	6963      	ldr	r3, [r4, #20]
 800d428:	425b      	negs	r3, r3
 800d42a:	61a3      	str	r3, [r4, #24]
 800d42c:	6923      	ldr	r3, [r4, #16]
 800d42e:	b943      	cbnz	r3, 800d442 <__swsetup_r+0xc6>
 800d430:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d434:	d1ba      	bne.n	800d3ac <__swsetup_r+0x30>
 800d436:	bd70      	pop	{r4, r5, r6, pc}
 800d438:	0781      	lsls	r1, r0, #30
 800d43a:	bf58      	it	pl
 800d43c:	6963      	ldrpl	r3, [r4, #20]
 800d43e:	60a3      	str	r3, [r4, #8]
 800d440:	e7f4      	b.n	800d42c <__swsetup_r+0xb0>
 800d442:	2000      	movs	r0, #0
 800d444:	e7f7      	b.n	800d436 <__swsetup_r+0xba>
 800d446:	bf00      	nop
 800d448:	20000190 	.word	0x20000190
 800d44c:	0800db60 	.word	0x0800db60
 800d450:	0800db80 	.word	0x0800db80
 800d454:	0800db40 	.word	0x0800db40

0800d458 <_close_r>:
 800d458:	b538      	push	{r3, r4, r5, lr}
 800d45a:	2300      	movs	r3, #0
 800d45c:	4d05      	ldr	r5, [pc, #20]	; (800d474 <_close_r+0x1c>)
 800d45e:	4604      	mov	r4, r0
 800d460:	4608      	mov	r0, r1
 800d462:	602b      	str	r3, [r5, #0]
 800d464:	f7f6 fc1f 	bl	8003ca6 <_close>
 800d468:	1c43      	adds	r3, r0, #1
 800d46a:	d102      	bne.n	800d472 <_close_r+0x1a>
 800d46c:	682b      	ldr	r3, [r5, #0]
 800d46e:	b103      	cbz	r3, 800d472 <_close_r+0x1a>
 800d470:	6023      	str	r3, [r4, #0]
 800d472:	bd38      	pop	{r3, r4, r5, pc}
 800d474:	200015bc 	.word	0x200015bc

0800d478 <__sflush_r>:
 800d478:	898a      	ldrh	r2, [r1, #12]
 800d47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d47e:	4605      	mov	r5, r0
 800d480:	0710      	lsls	r0, r2, #28
 800d482:	460c      	mov	r4, r1
 800d484:	d458      	bmi.n	800d538 <__sflush_r+0xc0>
 800d486:	684b      	ldr	r3, [r1, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	dc05      	bgt.n	800d498 <__sflush_r+0x20>
 800d48c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d48e:	2b00      	cmp	r3, #0
 800d490:	dc02      	bgt.n	800d498 <__sflush_r+0x20>
 800d492:	2000      	movs	r0, #0
 800d494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d49a:	2e00      	cmp	r6, #0
 800d49c:	d0f9      	beq.n	800d492 <__sflush_r+0x1a>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d4a4:	682f      	ldr	r7, [r5, #0]
 800d4a6:	602b      	str	r3, [r5, #0]
 800d4a8:	d032      	beq.n	800d510 <__sflush_r+0x98>
 800d4aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d4ac:	89a3      	ldrh	r3, [r4, #12]
 800d4ae:	075a      	lsls	r2, r3, #29
 800d4b0:	d505      	bpl.n	800d4be <__sflush_r+0x46>
 800d4b2:	6863      	ldr	r3, [r4, #4]
 800d4b4:	1ac0      	subs	r0, r0, r3
 800d4b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d4b8:	b10b      	cbz	r3, 800d4be <__sflush_r+0x46>
 800d4ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d4bc:	1ac0      	subs	r0, r0, r3
 800d4be:	2300      	movs	r3, #0
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	6a21      	ldr	r1, [r4, #32]
 800d4c8:	47b0      	blx	r6
 800d4ca:	1c43      	adds	r3, r0, #1
 800d4cc:	89a3      	ldrh	r3, [r4, #12]
 800d4ce:	d106      	bne.n	800d4de <__sflush_r+0x66>
 800d4d0:	6829      	ldr	r1, [r5, #0]
 800d4d2:	291d      	cmp	r1, #29
 800d4d4:	d82c      	bhi.n	800d530 <__sflush_r+0xb8>
 800d4d6:	4a2a      	ldr	r2, [pc, #168]	; (800d580 <__sflush_r+0x108>)
 800d4d8:	40ca      	lsrs	r2, r1
 800d4da:	07d6      	lsls	r6, r2, #31
 800d4dc:	d528      	bpl.n	800d530 <__sflush_r+0xb8>
 800d4de:	2200      	movs	r2, #0
 800d4e0:	6062      	str	r2, [r4, #4]
 800d4e2:	6922      	ldr	r2, [r4, #16]
 800d4e4:	04d9      	lsls	r1, r3, #19
 800d4e6:	6022      	str	r2, [r4, #0]
 800d4e8:	d504      	bpl.n	800d4f4 <__sflush_r+0x7c>
 800d4ea:	1c42      	adds	r2, r0, #1
 800d4ec:	d101      	bne.n	800d4f2 <__sflush_r+0x7a>
 800d4ee:	682b      	ldr	r3, [r5, #0]
 800d4f0:	b903      	cbnz	r3, 800d4f4 <__sflush_r+0x7c>
 800d4f2:	6560      	str	r0, [r4, #84]	; 0x54
 800d4f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4f6:	602f      	str	r7, [r5, #0]
 800d4f8:	2900      	cmp	r1, #0
 800d4fa:	d0ca      	beq.n	800d492 <__sflush_r+0x1a>
 800d4fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d500:	4299      	cmp	r1, r3
 800d502:	d002      	beq.n	800d50a <__sflush_r+0x92>
 800d504:	4628      	mov	r0, r5
 800d506:	f000 f923 	bl	800d750 <_free_r>
 800d50a:	2000      	movs	r0, #0
 800d50c:	6360      	str	r0, [r4, #52]	; 0x34
 800d50e:	e7c1      	b.n	800d494 <__sflush_r+0x1c>
 800d510:	6a21      	ldr	r1, [r4, #32]
 800d512:	2301      	movs	r3, #1
 800d514:	4628      	mov	r0, r5
 800d516:	47b0      	blx	r6
 800d518:	1c41      	adds	r1, r0, #1
 800d51a:	d1c7      	bne.n	800d4ac <__sflush_r+0x34>
 800d51c:	682b      	ldr	r3, [r5, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d0c4      	beq.n	800d4ac <__sflush_r+0x34>
 800d522:	2b1d      	cmp	r3, #29
 800d524:	d001      	beq.n	800d52a <__sflush_r+0xb2>
 800d526:	2b16      	cmp	r3, #22
 800d528:	d101      	bne.n	800d52e <__sflush_r+0xb6>
 800d52a:	602f      	str	r7, [r5, #0]
 800d52c:	e7b1      	b.n	800d492 <__sflush_r+0x1a>
 800d52e:	89a3      	ldrh	r3, [r4, #12]
 800d530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d534:	81a3      	strh	r3, [r4, #12]
 800d536:	e7ad      	b.n	800d494 <__sflush_r+0x1c>
 800d538:	690f      	ldr	r7, [r1, #16]
 800d53a:	2f00      	cmp	r7, #0
 800d53c:	d0a9      	beq.n	800d492 <__sflush_r+0x1a>
 800d53e:	0793      	lsls	r3, r2, #30
 800d540:	bf18      	it	ne
 800d542:	2300      	movne	r3, #0
 800d544:	680e      	ldr	r6, [r1, #0]
 800d546:	bf08      	it	eq
 800d548:	694b      	ldreq	r3, [r1, #20]
 800d54a:	eba6 0807 	sub.w	r8, r6, r7
 800d54e:	600f      	str	r7, [r1, #0]
 800d550:	608b      	str	r3, [r1, #8]
 800d552:	f1b8 0f00 	cmp.w	r8, #0
 800d556:	dd9c      	ble.n	800d492 <__sflush_r+0x1a>
 800d558:	4643      	mov	r3, r8
 800d55a:	463a      	mov	r2, r7
 800d55c:	4628      	mov	r0, r5
 800d55e:	6a21      	ldr	r1, [r4, #32]
 800d560:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d562:	47b0      	blx	r6
 800d564:	2800      	cmp	r0, #0
 800d566:	dc06      	bgt.n	800d576 <__sflush_r+0xfe>
 800d568:	89a3      	ldrh	r3, [r4, #12]
 800d56a:	f04f 30ff 	mov.w	r0, #4294967295
 800d56e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d572:	81a3      	strh	r3, [r4, #12]
 800d574:	e78e      	b.n	800d494 <__sflush_r+0x1c>
 800d576:	4407      	add	r7, r0
 800d578:	eba8 0800 	sub.w	r8, r8, r0
 800d57c:	e7e9      	b.n	800d552 <__sflush_r+0xda>
 800d57e:	bf00      	nop
 800d580:	20400001 	.word	0x20400001

0800d584 <_fflush_r>:
 800d584:	b538      	push	{r3, r4, r5, lr}
 800d586:	690b      	ldr	r3, [r1, #16]
 800d588:	4605      	mov	r5, r0
 800d58a:	460c      	mov	r4, r1
 800d58c:	b913      	cbnz	r3, 800d594 <_fflush_r+0x10>
 800d58e:	2500      	movs	r5, #0
 800d590:	4628      	mov	r0, r5
 800d592:	bd38      	pop	{r3, r4, r5, pc}
 800d594:	b118      	cbz	r0, 800d59e <_fflush_r+0x1a>
 800d596:	6983      	ldr	r3, [r0, #24]
 800d598:	b90b      	cbnz	r3, 800d59e <_fflush_r+0x1a>
 800d59a:	f7ff f8f3 	bl	800c784 <__sinit>
 800d59e:	4b14      	ldr	r3, [pc, #80]	; (800d5f0 <_fflush_r+0x6c>)
 800d5a0:	429c      	cmp	r4, r3
 800d5a2:	d11b      	bne.n	800d5dc <_fflush_r+0x58>
 800d5a4:	686c      	ldr	r4, [r5, #4]
 800d5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d0ef      	beq.n	800d58e <_fflush_r+0xa>
 800d5ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d5b0:	07d0      	lsls	r0, r2, #31
 800d5b2:	d404      	bmi.n	800d5be <_fflush_r+0x3a>
 800d5b4:	0599      	lsls	r1, r3, #22
 800d5b6:	d402      	bmi.n	800d5be <_fflush_r+0x3a>
 800d5b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5ba:	f7ff f981 	bl	800c8c0 <__retarget_lock_acquire_recursive>
 800d5be:	4628      	mov	r0, r5
 800d5c0:	4621      	mov	r1, r4
 800d5c2:	f7ff ff59 	bl	800d478 <__sflush_r>
 800d5c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5c8:	4605      	mov	r5, r0
 800d5ca:	07da      	lsls	r2, r3, #31
 800d5cc:	d4e0      	bmi.n	800d590 <_fflush_r+0xc>
 800d5ce:	89a3      	ldrh	r3, [r4, #12]
 800d5d0:	059b      	lsls	r3, r3, #22
 800d5d2:	d4dd      	bmi.n	800d590 <_fflush_r+0xc>
 800d5d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5d6:	f7ff f974 	bl	800c8c2 <__retarget_lock_release_recursive>
 800d5da:	e7d9      	b.n	800d590 <_fflush_r+0xc>
 800d5dc:	4b05      	ldr	r3, [pc, #20]	; (800d5f4 <_fflush_r+0x70>)
 800d5de:	429c      	cmp	r4, r3
 800d5e0:	d101      	bne.n	800d5e6 <_fflush_r+0x62>
 800d5e2:	68ac      	ldr	r4, [r5, #8]
 800d5e4:	e7df      	b.n	800d5a6 <_fflush_r+0x22>
 800d5e6:	4b04      	ldr	r3, [pc, #16]	; (800d5f8 <_fflush_r+0x74>)
 800d5e8:	429c      	cmp	r4, r3
 800d5ea:	bf08      	it	eq
 800d5ec:	68ec      	ldreq	r4, [r5, #12]
 800d5ee:	e7da      	b.n	800d5a6 <_fflush_r+0x22>
 800d5f0:	0800db60 	.word	0x0800db60
 800d5f4:	0800db80 	.word	0x0800db80
 800d5f8:	0800db40 	.word	0x0800db40

0800d5fc <_lseek_r>:
 800d5fc:	b538      	push	{r3, r4, r5, lr}
 800d5fe:	4604      	mov	r4, r0
 800d600:	4608      	mov	r0, r1
 800d602:	4611      	mov	r1, r2
 800d604:	2200      	movs	r2, #0
 800d606:	4d05      	ldr	r5, [pc, #20]	; (800d61c <_lseek_r+0x20>)
 800d608:	602a      	str	r2, [r5, #0]
 800d60a:	461a      	mov	r2, r3
 800d60c:	f7f6 fb6f 	bl	8003cee <_lseek>
 800d610:	1c43      	adds	r3, r0, #1
 800d612:	d102      	bne.n	800d61a <_lseek_r+0x1e>
 800d614:	682b      	ldr	r3, [r5, #0]
 800d616:	b103      	cbz	r3, 800d61a <_lseek_r+0x1e>
 800d618:	6023      	str	r3, [r4, #0]
 800d61a:	bd38      	pop	{r3, r4, r5, pc}
 800d61c:	200015bc 	.word	0x200015bc

0800d620 <__swhatbuf_r>:
 800d620:	b570      	push	{r4, r5, r6, lr}
 800d622:	460e      	mov	r6, r1
 800d624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d628:	4614      	mov	r4, r2
 800d62a:	2900      	cmp	r1, #0
 800d62c:	461d      	mov	r5, r3
 800d62e:	b096      	sub	sp, #88	; 0x58
 800d630:	da07      	bge.n	800d642 <__swhatbuf_r+0x22>
 800d632:	2300      	movs	r3, #0
 800d634:	602b      	str	r3, [r5, #0]
 800d636:	89b3      	ldrh	r3, [r6, #12]
 800d638:	061a      	lsls	r2, r3, #24
 800d63a:	d410      	bmi.n	800d65e <__swhatbuf_r+0x3e>
 800d63c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d640:	e00e      	b.n	800d660 <__swhatbuf_r+0x40>
 800d642:	466a      	mov	r2, sp
 800d644:	f000 f908 	bl	800d858 <_fstat_r>
 800d648:	2800      	cmp	r0, #0
 800d64a:	dbf2      	blt.n	800d632 <__swhatbuf_r+0x12>
 800d64c:	9a01      	ldr	r2, [sp, #4]
 800d64e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d652:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d656:	425a      	negs	r2, r3
 800d658:	415a      	adcs	r2, r3
 800d65a:	602a      	str	r2, [r5, #0]
 800d65c:	e7ee      	b.n	800d63c <__swhatbuf_r+0x1c>
 800d65e:	2340      	movs	r3, #64	; 0x40
 800d660:	2000      	movs	r0, #0
 800d662:	6023      	str	r3, [r4, #0]
 800d664:	b016      	add	sp, #88	; 0x58
 800d666:	bd70      	pop	{r4, r5, r6, pc}

0800d668 <__smakebuf_r>:
 800d668:	898b      	ldrh	r3, [r1, #12]
 800d66a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d66c:	079d      	lsls	r5, r3, #30
 800d66e:	4606      	mov	r6, r0
 800d670:	460c      	mov	r4, r1
 800d672:	d507      	bpl.n	800d684 <__smakebuf_r+0x1c>
 800d674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	6123      	str	r3, [r4, #16]
 800d67c:	2301      	movs	r3, #1
 800d67e:	6163      	str	r3, [r4, #20]
 800d680:	b002      	add	sp, #8
 800d682:	bd70      	pop	{r4, r5, r6, pc}
 800d684:	466a      	mov	r2, sp
 800d686:	ab01      	add	r3, sp, #4
 800d688:	f7ff ffca 	bl	800d620 <__swhatbuf_r>
 800d68c:	9900      	ldr	r1, [sp, #0]
 800d68e:	4605      	mov	r5, r0
 800d690:	4630      	mov	r0, r6
 800d692:	f7ff f917 	bl	800c8c4 <_malloc_r>
 800d696:	b948      	cbnz	r0, 800d6ac <__smakebuf_r+0x44>
 800d698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d69c:	059a      	lsls	r2, r3, #22
 800d69e:	d4ef      	bmi.n	800d680 <__smakebuf_r+0x18>
 800d6a0:	f023 0303 	bic.w	r3, r3, #3
 800d6a4:	f043 0302 	orr.w	r3, r3, #2
 800d6a8:	81a3      	strh	r3, [r4, #12]
 800d6aa:	e7e3      	b.n	800d674 <__smakebuf_r+0xc>
 800d6ac:	4b0d      	ldr	r3, [pc, #52]	; (800d6e4 <__smakebuf_r+0x7c>)
 800d6ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800d6b0:	89a3      	ldrh	r3, [r4, #12]
 800d6b2:	6020      	str	r0, [r4, #0]
 800d6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6b8:	81a3      	strh	r3, [r4, #12]
 800d6ba:	9b00      	ldr	r3, [sp, #0]
 800d6bc:	6120      	str	r0, [r4, #16]
 800d6be:	6163      	str	r3, [r4, #20]
 800d6c0:	9b01      	ldr	r3, [sp, #4]
 800d6c2:	b15b      	cbz	r3, 800d6dc <__smakebuf_r+0x74>
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6ca:	f000 f8d7 	bl	800d87c <_isatty_r>
 800d6ce:	b128      	cbz	r0, 800d6dc <__smakebuf_r+0x74>
 800d6d0:	89a3      	ldrh	r3, [r4, #12]
 800d6d2:	f023 0303 	bic.w	r3, r3, #3
 800d6d6:	f043 0301 	orr.w	r3, r3, #1
 800d6da:	81a3      	strh	r3, [r4, #12]
 800d6dc:	89a0      	ldrh	r0, [r4, #12]
 800d6de:	4305      	orrs	r5, r0
 800d6e0:	81a5      	strh	r5, [r4, #12]
 800d6e2:	e7cd      	b.n	800d680 <__smakebuf_r+0x18>
 800d6e4:	0800c71d 	.word	0x0800c71d

0800d6e8 <memchr>:
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	b510      	push	{r4, lr}
 800d6ec:	b2c9      	uxtb	r1, r1
 800d6ee:	4402      	add	r2, r0
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	d101      	bne.n	800d6fa <memchr+0x12>
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	e003      	b.n	800d702 <memchr+0x1a>
 800d6fa:	7804      	ldrb	r4, [r0, #0]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	428c      	cmp	r4, r1
 800d700:	d1f6      	bne.n	800d6f0 <memchr+0x8>
 800d702:	bd10      	pop	{r4, pc}

0800d704 <memmove>:
 800d704:	4288      	cmp	r0, r1
 800d706:	b510      	push	{r4, lr}
 800d708:	eb01 0402 	add.w	r4, r1, r2
 800d70c:	d902      	bls.n	800d714 <memmove+0x10>
 800d70e:	4284      	cmp	r4, r0
 800d710:	4623      	mov	r3, r4
 800d712:	d807      	bhi.n	800d724 <memmove+0x20>
 800d714:	1e43      	subs	r3, r0, #1
 800d716:	42a1      	cmp	r1, r4
 800d718:	d008      	beq.n	800d72c <memmove+0x28>
 800d71a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d71e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d722:	e7f8      	b.n	800d716 <memmove+0x12>
 800d724:	4601      	mov	r1, r0
 800d726:	4402      	add	r2, r0
 800d728:	428a      	cmp	r2, r1
 800d72a:	d100      	bne.n	800d72e <memmove+0x2a>
 800d72c:	bd10      	pop	{r4, pc}
 800d72e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d736:	e7f7      	b.n	800d728 <memmove+0x24>

0800d738 <__malloc_lock>:
 800d738:	4801      	ldr	r0, [pc, #4]	; (800d740 <__malloc_lock+0x8>)
 800d73a:	f7ff b8c1 	b.w	800c8c0 <__retarget_lock_acquire_recursive>
 800d73e:	bf00      	nop
 800d740:	200015b4 	.word	0x200015b4

0800d744 <__malloc_unlock>:
 800d744:	4801      	ldr	r0, [pc, #4]	; (800d74c <__malloc_unlock+0x8>)
 800d746:	f7ff b8bc 	b.w	800c8c2 <__retarget_lock_release_recursive>
 800d74a:	bf00      	nop
 800d74c:	200015b4 	.word	0x200015b4

0800d750 <_free_r>:
 800d750:	b538      	push	{r3, r4, r5, lr}
 800d752:	4605      	mov	r5, r0
 800d754:	2900      	cmp	r1, #0
 800d756:	d043      	beq.n	800d7e0 <_free_r+0x90>
 800d758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d75c:	1f0c      	subs	r4, r1, #4
 800d75e:	2b00      	cmp	r3, #0
 800d760:	bfb8      	it	lt
 800d762:	18e4      	addlt	r4, r4, r3
 800d764:	f7ff ffe8 	bl	800d738 <__malloc_lock>
 800d768:	4a1e      	ldr	r2, [pc, #120]	; (800d7e4 <_free_r+0x94>)
 800d76a:	6813      	ldr	r3, [r2, #0]
 800d76c:	4610      	mov	r0, r2
 800d76e:	b933      	cbnz	r3, 800d77e <_free_r+0x2e>
 800d770:	6063      	str	r3, [r4, #4]
 800d772:	6014      	str	r4, [r2, #0]
 800d774:	4628      	mov	r0, r5
 800d776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d77a:	f7ff bfe3 	b.w	800d744 <__malloc_unlock>
 800d77e:	42a3      	cmp	r3, r4
 800d780:	d90a      	bls.n	800d798 <_free_r+0x48>
 800d782:	6821      	ldr	r1, [r4, #0]
 800d784:	1862      	adds	r2, r4, r1
 800d786:	4293      	cmp	r3, r2
 800d788:	bf01      	itttt	eq
 800d78a:	681a      	ldreq	r2, [r3, #0]
 800d78c:	685b      	ldreq	r3, [r3, #4]
 800d78e:	1852      	addeq	r2, r2, r1
 800d790:	6022      	streq	r2, [r4, #0]
 800d792:	6063      	str	r3, [r4, #4]
 800d794:	6004      	str	r4, [r0, #0]
 800d796:	e7ed      	b.n	800d774 <_free_r+0x24>
 800d798:	461a      	mov	r2, r3
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	b10b      	cbz	r3, 800d7a2 <_free_r+0x52>
 800d79e:	42a3      	cmp	r3, r4
 800d7a0:	d9fa      	bls.n	800d798 <_free_r+0x48>
 800d7a2:	6811      	ldr	r1, [r2, #0]
 800d7a4:	1850      	adds	r0, r2, r1
 800d7a6:	42a0      	cmp	r0, r4
 800d7a8:	d10b      	bne.n	800d7c2 <_free_r+0x72>
 800d7aa:	6820      	ldr	r0, [r4, #0]
 800d7ac:	4401      	add	r1, r0
 800d7ae:	1850      	adds	r0, r2, r1
 800d7b0:	4283      	cmp	r3, r0
 800d7b2:	6011      	str	r1, [r2, #0]
 800d7b4:	d1de      	bne.n	800d774 <_free_r+0x24>
 800d7b6:	6818      	ldr	r0, [r3, #0]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	4401      	add	r1, r0
 800d7bc:	6011      	str	r1, [r2, #0]
 800d7be:	6053      	str	r3, [r2, #4]
 800d7c0:	e7d8      	b.n	800d774 <_free_r+0x24>
 800d7c2:	d902      	bls.n	800d7ca <_free_r+0x7a>
 800d7c4:	230c      	movs	r3, #12
 800d7c6:	602b      	str	r3, [r5, #0]
 800d7c8:	e7d4      	b.n	800d774 <_free_r+0x24>
 800d7ca:	6820      	ldr	r0, [r4, #0]
 800d7cc:	1821      	adds	r1, r4, r0
 800d7ce:	428b      	cmp	r3, r1
 800d7d0:	bf01      	itttt	eq
 800d7d2:	6819      	ldreq	r1, [r3, #0]
 800d7d4:	685b      	ldreq	r3, [r3, #4]
 800d7d6:	1809      	addeq	r1, r1, r0
 800d7d8:	6021      	streq	r1, [r4, #0]
 800d7da:	6063      	str	r3, [r4, #4]
 800d7dc:	6054      	str	r4, [r2, #4]
 800d7de:	e7c9      	b.n	800d774 <_free_r+0x24>
 800d7e0:	bd38      	pop	{r3, r4, r5, pc}
 800d7e2:	bf00      	nop
 800d7e4:	200004a4 	.word	0x200004a4

0800d7e8 <_realloc_r>:
 800d7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ea:	4607      	mov	r7, r0
 800d7ec:	4614      	mov	r4, r2
 800d7ee:	460e      	mov	r6, r1
 800d7f0:	b921      	cbnz	r1, 800d7fc <_realloc_r+0x14>
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d7f8:	f7ff b864 	b.w	800c8c4 <_malloc_r>
 800d7fc:	b922      	cbnz	r2, 800d808 <_realloc_r+0x20>
 800d7fe:	f7ff ffa7 	bl	800d750 <_free_r>
 800d802:	4625      	mov	r5, r4
 800d804:	4628      	mov	r0, r5
 800d806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d808:	f000 f848 	bl	800d89c <_malloc_usable_size_r>
 800d80c:	42a0      	cmp	r0, r4
 800d80e:	d20f      	bcs.n	800d830 <_realloc_r+0x48>
 800d810:	4621      	mov	r1, r4
 800d812:	4638      	mov	r0, r7
 800d814:	f7ff f856 	bl	800c8c4 <_malloc_r>
 800d818:	4605      	mov	r5, r0
 800d81a:	2800      	cmp	r0, #0
 800d81c:	d0f2      	beq.n	800d804 <_realloc_r+0x1c>
 800d81e:	4631      	mov	r1, r6
 800d820:	4622      	mov	r2, r4
 800d822:	f7fe fec7 	bl	800c5b4 <memcpy>
 800d826:	4631      	mov	r1, r6
 800d828:	4638      	mov	r0, r7
 800d82a:	f7ff ff91 	bl	800d750 <_free_r>
 800d82e:	e7e9      	b.n	800d804 <_realloc_r+0x1c>
 800d830:	4635      	mov	r5, r6
 800d832:	e7e7      	b.n	800d804 <_realloc_r+0x1c>

0800d834 <_read_r>:
 800d834:	b538      	push	{r3, r4, r5, lr}
 800d836:	4604      	mov	r4, r0
 800d838:	4608      	mov	r0, r1
 800d83a:	4611      	mov	r1, r2
 800d83c:	2200      	movs	r2, #0
 800d83e:	4d05      	ldr	r5, [pc, #20]	; (800d854 <_read_r+0x20>)
 800d840:	602a      	str	r2, [r5, #0]
 800d842:	461a      	mov	r2, r3
 800d844:	f7f6 fa12 	bl	8003c6c <_read>
 800d848:	1c43      	adds	r3, r0, #1
 800d84a:	d102      	bne.n	800d852 <_read_r+0x1e>
 800d84c:	682b      	ldr	r3, [r5, #0]
 800d84e:	b103      	cbz	r3, 800d852 <_read_r+0x1e>
 800d850:	6023      	str	r3, [r4, #0]
 800d852:	bd38      	pop	{r3, r4, r5, pc}
 800d854:	200015bc 	.word	0x200015bc

0800d858 <_fstat_r>:
 800d858:	b538      	push	{r3, r4, r5, lr}
 800d85a:	2300      	movs	r3, #0
 800d85c:	4d06      	ldr	r5, [pc, #24]	; (800d878 <_fstat_r+0x20>)
 800d85e:	4604      	mov	r4, r0
 800d860:	4608      	mov	r0, r1
 800d862:	4611      	mov	r1, r2
 800d864:	602b      	str	r3, [r5, #0]
 800d866:	f7f6 fa29 	bl	8003cbc <_fstat>
 800d86a:	1c43      	adds	r3, r0, #1
 800d86c:	d102      	bne.n	800d874 <_fstat_r+0x1c>
 800d86e:	682b      	ldr	r3, [r5, #0]
 800d870:	b103      	cbz	r3, 800d874 <_fstat_r+0x1c>
 800d872:	6023      	str	r3, [r4, #0]
 800d874:	bd38      	pop	{r3, r4, r5, pc}
 800d876:	bf00      	nop
 800d878:	200015bc 	.word	0x200015bc

0800d87c <_isatty_r>:
 800d87c:	b538      	push	{r3, r4, r5, lr}
 800d87e:	2300      	movs	r3, #0
 800d880:	4d05      	ldr	r5, [pc, #20]	; (800d898 <_isatty_r+0x1c>)
 800d882:	4604      	mov	r4, r0
 800d884:	4608      	mov	r0, r1
 800d886:	602b      	str	r3, [r5, #0]
 800d888:	f7f6 fa27 	bl	8003cda <_isatty>
 800d88c:	1c43      	adds	r3, r0, #1
 800d88e:	d102      	bne.n	800d896 <_isatty_r+0x1a>
 800d890:	682b      	ldr	r3, [r5, #0]
 800d892:	b103      	cbz	r3, 800d896 <_isatty_r+0x1a>
 800d894:	6023      	str	r3, [r4, #0]
 800d896:	bd38      	pop	{r3, r4, r5, pc}
 800d898:	200015bc 	.word	0x200015bc

0800d89c <_malloc_usable_size_r>:
 800d89c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8a0:	1f18      	subs	r0, r3, #4
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	bfbc      	itt	lt
 800d8a6:	580b      	ldrlt	r3, [r1, r0]
 800d8a8:	18c0      	addlt	r0, r0, r3
 800d8aa:	4770      	bx	lr
 800d8ac:	0000      	movs	r0, r0
	...

0800d8b0 <floor>:
 800d8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d8b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d8bc:	2e13      	cmp	r6, #19
 800d8be:	4602      	mov	r2, r0
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	4607      	mov	r7, r0
 800d8c4:	460c      	mov	r4, r1
 800d8c6:	4605      	mov	r5, r0
 800d8c8:	dc34      	bgt.n	800d934 <floor+0x84>
 800d8ca:	2e00      	cmp	r6, #0
 800d8cc:	da15      	bge.n	800d8fa <floor+0x4a>
 800d8ce:	a334      	add	r3, pc, #208	; (adr r3, 800d9a0 <floor+0xf0>)
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	f7f2 fc4a 	bl	800016c <__adddf3>
 800d8d8:	2200      	movs	r2, #0
 800d8da:	2300      	movs	r3, #0
 800d8dc:	f7f2 fe7a 	bl	80005d4 <__aeabi_dcmpgt>
 800d8e0:	b140      	cbz	r0, 800d8f4 <floor+0x44>
 800d8e2:	2c00      	cmp	r4, #0
 800d8e4:	da59      	bge.n	800d99a <floor+0xea>
 800d8e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d8ea:	ea57 0503 	orrs.w	r5, r7, r3
 800d8ee:	d001      	beq.n	800d8f4 <floor+0x44>
 800d8f0:	2500      	movs	r5, #0
 800d8f2:	4c2d      	ldr	r4, [pc, #180]	; (800d9a8 <floor+0xf8>)
 800d8f4:	4623      	mov	r3, r4
 800d8f6:	462f      	mov	r7, r5
 800d8f8:	e025      	b.n	800d946 <floor+0x96>
 800d8fa:	4a2c      	ldr	r2, [pc, #176]	; (800d9ac <floor+0xfc>)
 800d8fc:	fa42 f806 	asr.w	r8, r2, r6
 800d900:	ea01 0208 	and.w	r2, r1, r8
 800d904:	4302      	orrs	r2, r0
 800d906:	d01e      	beq.n	800d946 <floor+0x96>
 800d908:	a325      	add	r3, pc, #148	; (adr r3, 800d9a0 <floor+0xf0>)
 800d90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90e:	f7f2 fc2d 	bl	800016c <__adddf3>
 800d912:	2200      	movs	r2, #0
 800d914:	2300      	movs	r3, #0
 800d916:	f7f2 fe5d 	bl	80005d4 <__aeabi_dcmpgt>
 800d91a:	2800      	cmp	r0, #0
 800d91c:	d0ea      	beq.n	800d8f4 <floor+0x44>
 800d91e:	2c00      	cmp	r4, #0
 800d920:	bfbe      	ittt	lt
 800d922:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d926:	fa43 f606 	asrlt.w	r6, r3, r6
 800d92a:	19a4      	addlt	r4, r4, r6
 800d92c:	2500      	movs	r5, #0
 800d92e:	ea24 0408 	bic.w	r4, r4, r8
 800d932:	e7df      	b.n	800d8f4 <floor+0x44>
 800d934:	2e33      	cmp	r6, #51	; 0x33
 800d936:	dd0a      	ble.n	800d94e <floor+0x9e>
 800d938:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d93c:	d103      	bne.n	800d946 <floor+0x96>
 800d93e:	f7f2 fc15 	bl	800016c <__adddf3>
 800d942:	4607      	mov	r7, r0
 800d944:	460b      	mov	r3, r1
 800d946:	4638      	mov	r0, r7
 800d948:	4619      	mov	r1, r3
 800d94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d94e:	f04f 32ff 	mov.w	r2, #4294967295
 800d952:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800d956:	fa22 f808 	lsr.w	r8, r2, r8
 800d95a:	ea18 0f00 	tst.w	r8, r0
 800d95e:	d0f2      	beq.n	800d946 <floor+0x96>
 800d960:	a30f      	add	r3, pc, #60	; (adr r3, 800d9a0 <floor+0xf0>)
 800d962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d966:	f7f2 fc01 	bl	800016c <__adddf3>
 800d96a:	2200      	movs	r2, #0
 800d96c:	2300      	movs	r3, #0
 800d96e:	f7f2 fe31 	bl	80005d4 <__aeabi_dcmpgt>
 800d972:	2800      	cmp	r0, #0
 800d974:	d0be      	beq.n	800d8f4 <floor+0x44>
 800d976:	2c00      	cmp	r4, #0
 800d978:	da02      	bge.n	800d980 <floor+0xd0>
 800d97a:	2e14      	cmp	r6, #20
 800d97c:	d103      	bne.n	800d986 <floor+0xd6>
 800d97e:	3401      	adds	r4, #1
 800d980:	ea25 0508 	bic.w	r5, r5, r8
 800d984:	e7b6      	b.n	800d8f4 <floor+0x44>
 800d986:	2301      	movs	r3, #1
 800d988:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d98c:	fa03 f606 	lsl.w	r6, r3, r6
 800d990:	4435      	add	r5, r6
 800d992:	42bd      	cmp	r5, r7
 800d994:	bf38      	it	cc
 800d996:	18e4      	addcc	r4, r4, r3
 800d998:	e7f2      	b.n	800d980 <floor+0xd0>
 800d99a:	2500      	movs	r5, #0
 800d99c:	462c      	mov	r4, r5
 800d99e:	e7a9      	b.n	800d8f4 <floor+0x44>
 800d9a0:	8800759c 	.word	0x8800759c
 800d9a4:	7e37e43c 	.word	0x7e37e43c
 800d9a8:	bff00000 	.word	0xbff00000
 800d9ac:	000fffff 	.word	0x000fffff

0800d9b0 <_init>:
 800d9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9b2:	bf00      	nop
 800d9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9b6:	bc08      	pop	{r3}
 800d9b8:	469e      	mov	lr, r3
 800d9ba:	4770      	bx	lr

0800d9bc <_fini>:
 800d9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9be:	bf00      	nop
 800d9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9c2:	bc08      	pop	{r3}
 800d9c4:	469e      	mov	lr, r3
 800d9c6:	4770      	bx	lr
