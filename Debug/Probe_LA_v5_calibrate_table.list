
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08008030  08008030  00018030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080c4  080080c4  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  080080c4  080080c4  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080c4  080080c4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080c4  080080c4  000180c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080c8  080080c8  000180c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080080cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000edc  20000180  0800824c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000105c  0800824c  0002105c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6f6  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000393d  00000000  00000000  0003a89f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015b8  00000000  00000000  0003e1e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001400  00000000  00000000  0003f798  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000187a7  00000000  00000000  00040b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013b9c  00000000  00000000  0005933f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dcd0  00000000  00000000  0006cedb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eabab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a20  00000000  00000000  000eac28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	08008018 	.word	0x08008018

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	08008018 	.word	0x08008018

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ToggleLDAC>:

// Ссылка на инициализированную переферию
//SPI_HandleTypeDef *hspi1;

// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2102      	movs	r1, #2
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <ToggleLDAC+0x1c>)
 8000166:	f002 f81c 	bl	80021a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 800016a:	2201      	movs	r2, #1
 800016c:	2102      	movs	r1, #2
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <ToggleLDAC+0x1c>)
 8000170:	f002 f817 	bl	80021a2 <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800

0800017c <DAC_AD5322_Ch1>:

// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b086      	sub	sp, #24
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	807b      	strh	r3, [r7, #2]
	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000188:	887b      	ldrh	r3, [r7, #2]
 800018a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800018e:	d302      	bcc.n	8000196 <DAC_AD5322_Ch1+0x1a>
 8000190:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000194:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000196:	2300      	movs	r3, #0
 8000198:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 800019a:	2301      	movs	r3, #1
 800019c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 800019e:	2300      	movs	r3, #0
 80001a0:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 80001a2:	2300      	movs	r3, #0
 80001a4:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 80001a6:	8afb      	ldrh	r3, [r7, #22]
 80001a8:	03db      	lsls	r3, r3, #15
 80001aa:	b21a      	sxth	r2, r3
 80001ac:	8abb      	ldrh	r3, [r7, #20]
 80001ae:	039b      	lsls	r3, r3, #14
 80001b0:	b21b      	sxth	r3, r3
 80001b2:	4313      	orrs	r3, r2
 80001b4:	b21a      	sxth	r2, r3
 80001b6:	8a7b      	ldrh	r3, [r7, #18]
 80001b8:	035b      	lsls	r3, r3, #13
 80001ba:	b21b      	sxth	r3, r3
 80001bc:	4313      	orrs	r3, r2
 80001be:	b21a      	sxth	r2, r3
 80001c0:	8a3b      	ldrh	r3, [r7, #16]
 80001c2:	031b      	lsls	r3, r3, #12
 80001c4:	b21b      	sxth	r3, r3
 80001c6:	4313      	orrs	r3, r2
 80001c8:	b21b      	sxth	r3, r3
 80001ca:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 80001cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80001d0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80001d4:	f023 030f 	bic.w	r3, r3, #15
 80001d8:	b21a      	sxth	r2, r3
 80001da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80001de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80001e2:	b21b      	sxth	r3, r3
 80001e4:	4313      	orrs	r3, r2
 80001e6:	b21b      	sxth	r3, r3
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	81bb      	strh	r3, [r7, #12]

  	// Разрешение передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 80001ec:	2200      	movs	r2, #0
 80001ee:	2110      	movs	r1, #16
 80001f0:	480a      	ldr	r0, [pc, #40]	; (800021c <DAC_AD5322_Ch1+0xa0>)
 80001f2:	f001 ffd6 	bl	80021a2 <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 80001f6:	f107 010c 	add.w	r1, r7, #12
 80001fa:	2301      	movs	r3, #1
 80001fc:	2201      	movs	r2, #1
 80001fe:	6878      	ldr	r0, [r7, #4]
 8000200:	f003 fcb7 	bl	8003b72 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000204:	2201      	movs	r2, #1
 8000206:	2110      	movs	r1, #16
 8000208:	4804      	ldr	r0, [pc, #16]	; (800021c <DAC_AD5322_Ch1+0xa0>)
 800020a:	f001 ffca 	bl	80021a2 <HAL_GPIO_WritePin>

  	ToggleLDAC();
 800020e:	f7ff ffa5 	bl	800015c <ToggleLDAC>
}
 8000212:	bf00      	nop
 8000214:	3718      	adds	r7, #24
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010800 	.word	0x40010800

08000220 <DAC_AD5322_Ch2>:

// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	460b      	mov	r3, r1
 800022a:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 800022c:	887b      	ldrh	r3, [r7, #2]
 800022e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000232:	d302      	bcc.n	800023a <DAC_AD5322_Ch2+0x1a>
 8000234:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000238:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 800023a:	2301      	movs	r3, #1
 800023c:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 800023e:	2301      	movs	r3, #1
 8000240:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000242:	2300      	movs	r3, #0
 8000244:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000246:	2300      	movs	r3, #0
 8000248:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 800024a:	8afb      	ldrh	r3, [r7, #22]
 800024c:	03db      	lsls	r3, r3, #15
 800024e:	b21a      	sxth	r2, r3
 8000250:	8abb      	ldrh	r3, [r7, #20]
 8000252:	039b      	lsls	r3, r3, #14
 8000254:	b21b      	sxth	r3, r3
 8000256:	4313      	orrs	r3, r2
 8000258:	b21a      	sxth	r2, r3
 800025a:	8a7b      	ldrh	r3, [r7, #18]
 800025c:	035b      	lsls	r3, r3, #13
 800025e:	b21b      	sxth	r3, r3
 8000260:	4313      	orrs	r3, r2
 8000262:	b21a      	sxth	r2, r3
 8000264:	8a3b      	ldrh	r3, [r7, #16]
 8000266:	031b      	lsls	r3, r3, #12
 8000268:	b21b      	sxth	r3, r3
 800026a:	4313      	orrs	r3, r2
 800026c:	b21b      	sxth	r3, r3
 800026e:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000270:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000274:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000278:	f023 030f 	bic.w	r3, r3, #15
 800027c:	b21a      	sxth	r2, r3
 800027e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000286:	b21b      	sxth	r3, r3
 8000288:	4313      	orrs	r3, r2
 800028a:	b21b      	sxth	r3, r3
 800028c:	b29b      	uxth	r3, r3
 800028e:	81bb      	strh	r3, [r7, #12]

  	// Разрешение передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	2110      	movs	r1, #16
 8000294:	480a      	ldr	r0, [pc, #40]	; (80002c0 <DAC_AD5322_Ch2+0xa0>)
 8000296:	f001 ff84 	bl	80021a2 <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 800029a:	f107 010c 	add.w	r1, r7, #12
 800029e:	2301      	movs	r3, #1
 80002a0:	2201      	movs	r2, #1
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f003 fc65 	bl	8003b72 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2110      	movs	r1, #16
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <DAC_AD5322_Ch2+0xa0>)
 80002ae:	f001 ff78 	bl	80021a2 <HAL_GPIO_WritePin>

  	ToggleLDAC();
 80002b2:	f7ff ff53 	bl	800015c <ToggleLDAC>
}
 80002b6:	bf00      	nop
 80002b8:	3718      	adds	r7, #24
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40010800 	.word	0x40010800

080002c4 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <DWT_Init+0x24>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	4a06      	ldr	r2, [pc, #24]	; (80002e8 <DWT_Init+0x24>)
 80002ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002d2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <DWT_Init+0x28>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <DWT_Init+0x28>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6013      	str	r3, [r2, #0]
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr
 80002e8:	e000edf0 	.word	0xe000edf0
 80002ec:	e0001000 	.word	0xe0001000

080002f0 <SetDacA>:
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

void SetDacA(uint16_t da) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	80fb      	strh	r3, [r7, #6]
	VDAC_A	= da;
 80002fa:	4a06      	ldr	r2, [pc, #24]	; (8000314 <SetDacA+0x24>)
 80002fc:	88fb      	ldrh	r3, [r7, #6]
 80002fe:	8013      	strh	r3, [r2, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <SetDacA+0x24>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	4619      	mov	r1, r3
 8000306:	4804      	ldr	r0, [pc, #16]	; (8000318 <SetDacA+0x28>)
 8000308:	f7ff ff38 	bl	800017c <DAC_AD5322_Ch1>
}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000000 	.word	0x20000000
 8000318:	200004d0 	.word	0x200004d0

0800031c <SetDacB>:

void SetDacB(uint16_t db) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	80fb      	strh	r3, [r7, #6]
	VDAC_B	= db;
 8000326:	4a06      	ldr	r2, [pc, #24]	; (8000340 <SetDacB+0x24>)
 8000328:	88fb      	ldrh	r3, [r7, #6]
 800032a:	8013      	strh	r3, [r2, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <SetDacB+0x24>)
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	4619      	mov	r1, r3
 8000332:	4804      	ldr	r0, [pc, #16]	; (8000344 <SetDacB+0x28>)
 8000334:	f7ff ff74 	bl	8000220 <DAC_AD5322_Ch2>
}
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000002 	.word	0x20000002
 8000344:	200004d0 	.word	0x200004d0

08000348 <GetDacA>:

uint16_t GetDacA() {
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	return VDAC_A;
 800034c:	4b02      	ldr	r3, [pc, #8]	; (8000358 <GetDacA+0x10>)
 800034e:	881b      	ldrh	r3, [r3, #0]
}
 8000350:	4618      	mov	r0, r3
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	20000000 	.word	0x20000000

0800035c <GetDacB>:

uint16_t GetDacB() {
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	return VDAC_B;
 8000360:	4b02      	ldr	r3, [pc, #8]	; (800036c <GetDacB+0x10>)
 8000362:	881b      	ldrh	r3, [r3, #0]

}
 8000364:	4618      	mov	r0, r3
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	20000002 	.word	0x20000002

08000370 <GetBtnRunState>:
//};

//--------------------------------------------------------------------------


uint8_t GetBtnRunState() {
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00) {
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <GetBtnRunState+0x7c>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d10b      	bne.n	8000394 <GetBtnRunState+0x24>
 800037c:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <GetBtnRunState+0x80>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d107      	bne.n	8000394 <GetBtnRunState+0x24>
		btn1_long_rd	 = 0;
 8000384:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <GetBtnRunState+0x80>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
		btn1_short_rd	 = 0;
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <GetBtnRunState+0x7c>)
 800038c:	2200      	movs	r2, #0
 800038e:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8000390:	2300      	movs	r3, #0
 8000392:	e026      	b.n	80003e2 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00) {
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <GetBtnRunState+0x7c>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d10b      	bne.n	80003b4 <GetBtnRunState+0x44>
 800039c:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <GetBtnRunState+0x80>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d107      	bne.n	80003b4 <GetBtnRunState+0x44>
		btn1_long_rd 	= 0;
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <GetBtnRunState+0x80>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
		btn1_short_rd 	= 0;
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <GetBtnRunState+0x7c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80003b0:	2301      	movs	r3, #1
 80003b2:	e016      	b.n	80003e2 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01) {
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <GetBtnRunState+0x7c>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d10b      	bne.n	80003d4 <GetBtnRunState+0x64>
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <GetBtnRunState+0x80>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d107      	bne.n	80003d4 <GetBtnRunState+0x64>
		btn1_long_rd 	= 0;
 80003c4:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <GetBtnRunState+0x80>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	701a      	strb	r2, [r3, #0]
		btn1_short_rd 	= 0;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <GetBtnRunState+0x7c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80003d0:	2302      	movs	r3, #2
 80003d2:	e006      	b.n	80003e2 <GetBtnRunState+0x72>
	}

	btn1_long_rd 		= 0;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <GetBtnRunState+0x80>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	701a      	strb	r2, [r3, #0]
	btn1_short_rd	 	= 0;
 80003da:	4b04      	ldr	r3, [pc, #16]	; (80003ec <GetBtnRunState+0x7c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]

//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 80003e0:	2300      	movs	r3, #0
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	200001a5 	.word	0x200001a5
 80003f0:	200001a4 	.word	0x200001a4

080003f4 <GetBtnUpState>:

uint8_t GetBtnUpState() {
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00) {
 80003f8:	4b1d      	ldr	r3, [pc, #116]	; (8000470 <GetBtnUpState+0x7c>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d10b      	bne.n	8000418 <GetBtnUpState+0x24>
 8000400:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <GetBtnUpState+0x80>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d107      	bne.n	8000418 <GetBtnUpState+0x24>
		btn2_long_rd	 = 0;
 8000408:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <GetBtnUpState+0x80>)
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
		btn2_short_rd	 = 0;
 800040e:	4b18      	ldr	r3, [pc, #96]	; (8000470 <GetBtnUpState+0x7c>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8000414:	2300      	movs	r3, #0
 8000416:	e026      	b.n	8000466 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00) {
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <GetBtnUpState+0x7c>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d10b      	bne.n	8000438 <GetBtnUpState+0x44>
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <GetBtnUpState+0x80>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d107      	bne.n	8000438 <GetBtnUpState+0x44>
		btn2_long_rd 	= 0;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <GetBtnUpState+0x80>)
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
		btn2_short_rd 	= 0;
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <GetBtnUpState+0x7c>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8000434:	2301      	movs	r3, #1
 8000436:	e016      	b.n	8000466 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01) {
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <GetBtnUpState+0x7c>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d10b      	bne.n	8000458 <GetBtnUpState+0x64>
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <GetBtnUpState+0x80>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d107      	bne.n	8000458 <GetBtnUpState+0x64>
		btn2_long_rd 	= 0;
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <GetBtnUpState+0x80>)
 800044a:	2200      	movs	r2, #0
 800044c:	701a      	strb	r2, [r3, #0]
		btn2_short_rd 	= 0;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <GetBtnUpState+0x7c>)
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8000454:	2302      	movs	r3, #2
 8000456:	e006      	b.n	8000466 <GetBtnUpState+0x72>
	}

	btn2_long_rd 		= 0;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <GetBtnUpState+0x80>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
	btn2_short_rd	 	= 0;
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <GetBtnUpState+0x7c>)
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 8000464:	2300      	movs	r3, #0
}
 8000466:	4618      	mov	r0, r3
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	200001ad 	.word	0x200001ad
 8000474:	200001ac 	.word	0x200001ac

08000478 <GetBtnDownState>:

uint8_t GetBtnDownState() {
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00) {
 800047c:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <GetBtnDownState+0x7c>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d10b      	bne.n	800049c <GetBtnDownState+0x24>
 8000484:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <GetBtnDownState+0x80>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d107      	bne.n	800049c <GetBtnDownState+0x24>
		btn3_long_rd	 = 0;
 800048c:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <GetBtnDownState+0x80>)
 800048e:	2200      	movs	r2, #0
 8000490:	701a      	strb	r2, [r3, #0]
		btn3_short_rd	 = 0;
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <GetBtnDownState+0x7c>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8000498:	2300      	movs	r3, #0
 800049a:	e026      	b.n	80004ea <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00) {
 800049c:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <GetBtnDownState+0x7c>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d10b      	bne.n	80004bc <GetBtnDownState+0x44>
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <GetBtnDownState+0x80>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d107      	bne.n	80004bc <GetBtnDownState+0x44>
		btn3_long_rd 	= 0;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <GetBtnDownState+0x80>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
		btn3_short_rd 	= 0;
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <GetBtnDownState+0x7c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80004b8:	2301      	movs	r3, #1
 80004ba:	e016      	b.n	80004ea <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01) {
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <GetBtnDownState+0x7c>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d10b      	bne.n	80004dc <GetBtnDownState+0x64>
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <GetBtnDownState+0x80>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d107      	bne.n	80004dc <GetBtnDownState+0x64>
		btn3_long_rd 	= 0;
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <GetBtnDownState+0x80>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
		btn3_short_rd 	= 0;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <GetBtnDownState+0x7c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80004d8:	2302      	movs	r3, #2
 80004da:	e006      	b.n	80004ea <GetBtnDownState+0x72>
	}

	btn3_long_rd 		= 0;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <GetBtnDownState+0x80>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
	btn3_short_rd	 	= 0;
 80004e2:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <GetBtnDownState+0x7c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	200001b5 	.word	0x200001b5
 80004f8:	200001b4 	.word	0x200001b4

080004fc <EnableTIM3_PB4>:
	return  inLL_rd;
};

//--------------------------------------------------------------------------

void EnableTIM3_PB4(){
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	 timWork = 1 ;
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <EnableTIM3_PB4+0x14>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	200001b6 	.word	0x200001b6

08000514 <EnableTIM4_PB6>:
//--------------------------------------------------------------------------

void EnableTIM4_PB6(){
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
	 timWork = 0 ;
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <EnableTIM4_PB6+0x14>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	200001b6 	.word	0x200001b6

0800052c <GetTIM3>:
//--------------------------------------------------------------------------

uint16_t GetTIM3(){
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <GetTIM3+0x14>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	b29b      	uxth	r3, r3
}
 8000536:	4618      	mov	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200001b8 	.word	0x200001b8

08000544 <resValTIM3_PB4>:
//--------------------------------------------------------------------------
void resValTIM3_PB4(){
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <resValTIM3_PB4+0x14>)
 800054a:	2200      	movs	r2, #0
 800054c:	801a      	strh	r2, [r3, #0]
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	200001b8 	.word	0x200001b8

0800055c <GetTIM4>:


//--------------------------------------------------------------------------
uint16_t GetTIM4(){
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <GetTIM4+0x14>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	b29b      	uxth	r3, r3
}
 8000566:	4618      	mov	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	200001ba 	.word	0x200001ba

08000574 <resValTIM4_PB6>:
//--------------------------------------------------------------------------
void resValTIM4_PB6(){
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <resValTIM4_PB6+0x14>)
 800057a:	2200      	movs	r2, #0
 800057c:	801a      	strh	r2, [r3, #0]
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	200001ba 	.word	0x200001ba

0800058c <GetADC>:
//--------------------------------------------------------------------------

uint16_t GetADC(){
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	return g_VADC;
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <GetADC+0x14>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	b29b      	uxth	r3, r3
}
 8000596:	4618      	mov	r0, r3
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	2000019c 	.word	0x2000019c

080005a4 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) 				//check if the interrupt comes from ACD1
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <HAL_ADC_ConvCpltCallback+0x28>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d106      	bne.n	80005c4 <HAL_ADC_ConvCpltCallback+0x20>
    {
    	g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80005b8:	f001 f872 	bl	80016a0 <HAL_ADC_GetValue>
 80005bc:	4603      	mov	r3, r0
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_ADC_ConvCpltCallback+0x30>)
 80005c2:	801a      	strh	r2, [r3, #0]
    }
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40012400 	.word	0x40012400
 80005d0:	200004a0 	.word	0x200004a0
 80005d4:	2000019c 	.word	0x2000019c

080005d8 <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3,pulseWidthTIM3,periodTIM4,pulseWidthTIM4;

	if (timWork){
 80005e0:	4b2a      	ldr	r3, [pc, #168]	; (800068c <HAL_TIM_IC_CaptureCallback+0xb4>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d026      	beq.n	8000638 <HAL_TIM_IC_CaptureCallback+0x60>
		if (htim->Instance == TIM3)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a28      	ldr	r2, [pc, #160]	; (8000690 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d147      	bne.n	8000684 <HAL_TIM_IC_CaptureCallback+0xac>
		    {
		        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	7f1b      	ldrb	r3, [r3, #28]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d143      	bne.n	8000684 <HAL_TIM_IC_CaptureCallback+0xac>
		        {
		        	periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80005fc:	2100      	movs	r1, #0
 80005fe:	4825      	ldr	r0, [pc, #148]	; (8000694 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000600:	f003 feaa 	bl	8004358 <HAL_TIM_ReadCapturedValue>
 8000604:	4603      	mov	r3, r0
 8000606:	823b      	strh	r3, [r7, #16]
		        	pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8000608:	2104      	movs	r1, #4
 800060a:	4822      	ldr	r0, [pc, #136]	; (8000694 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800060c:	f003 fea4 	bl	8004358 <HAL_TIM_ReadCapturedValue>
 8000610:	4603      	mov	r3, r0
 8000612:	81fb      	strh	r3, [r7, #14]

		            TIM3->CNT = 0;
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	; 0x24

		            int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 800061a:	8a3a      	ldrh	r2, [r7, #16]
 800061c:	89fb      	ldrh	r3, [r7, #14]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	b29b      	uxth	r3, r3
 8000622:	81bb      	strh	r3, [r7, #12]
		            deltaTIM3	= (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 8000624:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	bfb8      	it	lt
 800062c:	425b      	neglt	r3, r3
 800062e:	81bb      	strh	r3, [r7, #12]
		            g_vTIM3_PB4 = deltaTIM3;
 8000630:	89ba      	ldrh	r2, [r7, #12]
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000634:	801a      	strh	r2, [r3, #0]
		    }
	}



}
 8000636:	e025      	b.n	8000684 <HAL_TIM_IC_CaptureCallback+0xac>
		 if (htim->Instance == TIM4)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a17      	ldr	r2, [pc, #92]	; (800069c <HAL_TIM_IC_CaptureCallback+0xc4>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d120      	bne.n	8000684 <HAL_TIM_IC_CaptureCallback+0xac>
		        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7f1b      	ldrb	r3, [r3, #28]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d11c      	bne.n	8000684 <HAL_TIM_IC_CaptureCallback+0xac>
		        	periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 800064a:	2100      	movs	r1, #0
 800064c:	4814      	ldr	r0, [pc, #80]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800064e:	f003 fe83 	bl	8004358 <HAL_TIM_ReadCapturedValue>
 8000652:	4603      	mov	r3, r0
 8000654:	82fb      	strh	r3, [r7, #22]
		        	pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 8000656:	2104      	movs	r1, #4
 8000658:	4811      	ldr	r0, [pc, #68]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800065a:	f003 fe7d 	bl	8004358 <HAL_TIM_ReadCapturedValue>
 800065e:	4603      	mov	r3, r0
 8000660:	82bb      	strh	r3, [r7, #20]
		            TIM4->CNT = 0;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
		            int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 8000668:	8afa      	ldrh	r2, [r7, #22]
 800066a:	8abb      	ldrh	r3, [r7, #20]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	b29b      	uxth	r3, r3
 8000670:	827b      	strh	r3, [r7, #18]
		            deltaTIM4	= (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 8000672:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000676:	2b00      	cmp	r3, #0
 8000678:	bfb8      	it	lt
 800067a:	425b      	neglt	r3, r3
 800067c:	827b      	strh	r3, [r7, #18]
		            g_vTIM4_PB6 = deltaTIM4;
 800067e:	8a7a      	ldrh	r2, [r7, #18]
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000682:	801a      	strh	r2, [r3, #0]
}
 8000684:	bf00      	nop
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200001b6 	.word	0x200001b6
 8000690:	40000400 	.word	0x40000400
 8000694:	20000460 	.word	0x20000460
 8000698:	200001b8 	.word	0x200001b8
 800069c:	40000800 	.word	0x40000800
 80006a0:	200003e0 	.word	0x200003e0
 80006a4:	200001ba 	.word	0x200001ba

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fde5 	bl	800127c <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 80006b2:	f7ff fe07 	bl	80002c4 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f94f 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 fb0f 	bl	8000cdc <MX_GPIO_Init>
  MX_SPI1_Init();
 80006be:	f000 f9e7 	bl	8000a90 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80006c2:	f006 fe77 	bl	80073b4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80006c6:	f000 f9a5 	bl	8000a14 <MX_ADC1_Init>
  MX_TIM3_Init();
 80006ca:	f000 fa19 	bl	8000b00 <MX_TIM3_Init>
  MX_TIM4_Init();
 80006ce:	f000 fa79 	bl	8000bc4 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80006d2:	f000 fad9 	bl	8000c88 <MX_USART3_UART_Init>
//  s_table->

//--------------------------------------------------------------------------
#if TEST_ADC
//ADC
  HAL_ADCEx_Calibration_Start(&hadc1);
 80006d6:	488a      	ldr	r0, [pc, #552]	; (8000900 <main+0x258>)
 80006d8:	f001 fa3e 	bl	8001b58 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 80006dc:	4888      	ldr	r0, [pc, #544]	; (8000900 <main+0x258>)
 80006de:	f000 ff29 	bl	8001534 <HAL_ADC_Start_IT>
#endif	/* TEST_ADC */

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80006e2:	2100      	movs	r1, #0
 80006e4:	4887      	ldr	r0, [pc, #540]	; (8000904 <main+0x25c>)
 80006e6:	f003 fc2b 	bl	8003f40 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80006ea:	2104      	movs	r1, #4
 80006ec:	4885      	ldr	r0, [pc, #532]	; (8000904 <main+0x25c>)
 80006ee:	f003 fc27 	bl	8003f40 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80006f2:	2100      	movs	r1, #0
 80006f4:	4884      	ldr	r0, [pc, #528]	; (8000908 <main+0x260>)
 80006f6:	f003 fc23 	bl	8003f40 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80006fa:	2104      	movs	r1, #4
 80006fc:	4882      	ldr	r0, [pc, #520]	; (8000908 <main+0x260>)
 80006fe:	f003 fc1f 	bl	8003f40 <HAL_TIM_IC_Start_IT>
	while (1) {

//--------------------------------------------------------------------------
#if  TEST_DAC_WHILE

	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 8000702:	4b82      	ldr	r3, [pc, #520]	; (800090c <main+0x264>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	4619      	mov	r1, r3
 8000708:	4881      	ldr	r0, [pc, #516]	; (8000910 <main+0x268>)
 800070a:	f7ff fd37 	bl	800017c <DAC_AD5322_Ch1>
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 800070e:	4b81      	ldr	r3, [pc, #516]	; (8000914 <main+0x26c>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	4619      	mov	r1, r3
 8000714:	487e      	ldr	r0, [pc, #504]	; (8000910 <main+0x268>)
 8000716:	f7ff fd83 	bl	8000220 <DAC_AD5322_Ch2>
	HAL_Delay(250);
 800071a:	20fa      	movs	r0, #250	; 0xfa
 800071c:	f000 fe10 	bl	8001340 <HAL_Delay>
#endif	/* TEST_DAC_WHILE */
//--------------------------------------------------------------------------
#if  TEST_GPIO_WHILE

		 uint32_t ms = HAL_GetTick();
 8000720:	f000 fe04 	bl	800132c <HAL_GetTick>
 8000724:	6078      	str	r0, [r7, #4]
			  uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин
 8000726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072a:	487b      	ldr	r0, [pc, #492]	; (8000918 <main+0x270>)
 800072c:	f001 fd22 	bl	8002174 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	70fb      	strb	r3, [r7, #3]

			  if(key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d113      	bne.n	8000762 <main+0xba>
 800073a:	4b78      	ldr	r3, [pc, #480]	; (800091c <main+0x274>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d10f      	bne.n	8000762 <main+0xba>
 8000742:	4b77      	ldr	r3, [pc, #476]	; (8000920 <main+0x278>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	2b32      	cmp	r3, #50	; 0x32
 800074c:	d909      	bls.n	8000762 <main+0xba>
			  {
			    short_state1 = 1;
 800074e:	4b73      	ldr	r3, [pc, #460]	; (800091c <main+0x274>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
			    long_state1 = 0;
 8000754:	4b73      	ldr	r3, [pc, #460]	; (8000924 <main+0x27c>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
			    time_key1 = ms;
 800075a:	4a71      	ldr	r2, [pc, #452]	; (8000920 <main+0x278>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	e02e      	b.n	80007c0 <main+0x118>
			  }
			  else if(key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d111      	bne.n	800078c <main+0xe4>
 8000768:	4b6e      	ldr	r3, [pc, #440]	; (8000924 <main+0x27c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d10d      	bne.n	800078c <main+0xe4>
 8000770:	4b6b      	ldr	r3, [pc, #428]	; (8000920 <main+0x278>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800077c:	d906      	bls.n	800078c <main+0xe4>
			  {
			    long_state1 = 1;
 800077e:	4b69      	ldr	r3, [pc, #420]	; (8000924 <main+0x27c>)
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
			    // действие на длинное нажатие
			    btn1_long_rd = 1;
 8000784:	4b68      	ldr	r3, [pc, #416]	; (8000928 <main+0x280>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
 800078a:	e019      	b.n	80007c0 <main+0x118>

			  }
			  else if(key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d116      	bne.n	80007c0 <main+0x118>
 8000792:	4b62      	ldr	r3, [pc, #392]	; (800091c <main+0x274>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d012      	beq.n	80007c0 <main+0x118>
 800079a:	4b61      	ldr	r3, [pc, #388]	; (8000920 <main+0x278>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	2b32      	cmp	r3, #50	; 0x32
 80007a4:	d90c      	bls.n	80007c0 <main+0x118>
			  {
			    short_state1 = 0;
 80007a6:	4b5d      	ldr	r3, [pc, #372]	; (800091c <main+0x274>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
			    time_key1 = ms;
 80007ac:	4a5c      	ldr	r2, [pc, #368]	; (8000920 <main+0x278>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6013      	str	r3, [r2, #0]

			    if(!long_state1)
 80007b2:	4b5c      	ldr	r3, [pc, #368]	; (8000924 <main+0x27c>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d102      	bne.n	80007c0 <main+0x118>
			    {
			      // действие на короткое нажатие
			    	btn1_short_rd = 1;
 80007ba:	4b5c      	ldr	r3, [pc, #368]	; (800092c <main+0x284>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
			    }
			  }
			  uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 80007c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c4:	4854      	ldr	r0, [pc, #336]	; (8000918 <main+0x270>)
 80007c6:	f001 fcd5 	bl	8002174 <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	70bb      	strb	r3, [r7, #2]

			  if(key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 80007ce:	78bb      	ldrb	r3, [r7, #2]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d113      	bne.n	80007fc <main+0x154>
 80007d4:	4b56      	ldr	r3, [pc, #344]	; (8000930 <main+0x288>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d10f      	bne.n	80007fc <main+0x154>
 80007dc:	4b55      	ldr	r3, [pc, #340]	; (8000934 <main+0x28c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	2b32      	cmp	r3, #50	; 0x32
 80007e6:	d909      	bls.n	80007fc <main+0x154>
			  {
			    short_state2 = 1;
 80007e8:	4b51      	ldr	r3, [pc, #324]	; (8000930 <main+0x288>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
			    long_state2 = 0;
 80007ee:	4b52      	ldr	r3, [pc, #328]	; (8000938 <main+0x290>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
			    time_key2 = ms;
 80007f4:	4a4f      	ldr	r2, [pc, #316]	; (8000934 <main+0x28c>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	e02e      	b.n	800085a <main+0x1b2>
			  }
			  else if(key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 80007fc:	78bb      	ldrb	r3, [r7, #2]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d111      	bne.n	8000826 <main+0x17e>
 8000802:	4b4d      	ldr	r3, [pc, #308]	; (8000938 <main+0x290>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d10d      	bne.n	8000826 <main+0x17e>
 800080a:	4b4a      	ldr	r3, [pc, #296]	; (8000934 <main+0x28c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000816:	d906      	bls.n	8000826 <main+0x17e>
			  {
			    long_state2 = 1;
 8000818:	4b47      	ldr	r3, [pc, #284]	; (8000938 <main+0x290>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]

			    // действие на длинное нажатие
			    btn2_long_rd = 1;
 800081e:	4b47      	ldr	r3, [pc, #284]	; (800093c <main+0x294>)
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e019      	b.n	800085a <main+0x1b2>
			  }
			  else if(key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 8000826:	78bb      	ldrb	r3, [r7, #2]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d116      	bne.n	800085a <main+0x1b2>
 800082c:	4b40      	ldr	r3, [pc, #256]	; (8000930 <main+0x288>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d012      	beq.n	800085a <main+0x1b2>
 8000834:	4b3f      	ldr	r3, [pc, #252]	; (8000934 <main+0x28c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	2b32      	cmp	r3, #50	; 0x32
 800083e:	d90c      	bls.n	800085a <main+0x1b2>
			  {
			    short_state2 = 0;
 8000840:	4b3b      	ldr	r3, [pc, #236]	; (8000930 <main+0x288>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
			    time_key2 = ms;
 8000846:	4a3b      	ldr	r2, [pc, #236]	; (8000934 <main+0x28c>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6013      	str	r3, [r2, #0]

			    if(!long_state2)
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <main+0x290>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d102      	bne.n	800085a <main+0x1b2>
			    {
			      // действие на короткое нажатие
			    	btn2_short_rd = 1;
 8000854:	4b3a      	ldr	r3, [pc, #232]	; (8000940 <main+0x298>)
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
			    }
			  }

			  uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 800085a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085e:	482e      	ldr	r0, [pc, #184]	; (8000918 <main+0x270>)
 8000860:	f001 fc88 	bl	8002174 <HAL_GPIO_ReadPin>
 8000864:	4603      	mov	r3, r0
 8000866:	707b      	strb	r3, [r7, #1]
			  if(key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 8000868:	787b      	ldrb	r3, [r7, #1]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d113      	bne.n	8000896 <main+0x1ee>
 800086e:	4b35      	ldr	r3, [pc, #212]	; (8000944 <main+0x29c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10f      	bne.n	8000896 <main+0x1ee>
 8000876:	4b34      	ldr	r3, [pc, #208]	; (8000948 <main+0x2a0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	2b32      	cmp	r3, #50	; 0x32
 8000880:	d909      	bls.n	8000896 <main+0x1ee>
			  {
			    short_state3 = 1;
 8000882:	4b30      	ldr	r3, [pc, #192]	; (8000944 <main+0x29c>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
			    long_state3 = 0;
 8000888:	4b30      	ldr	r3, [pc, #192]	; (800094c <main+0x2a4>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
			    time_key3 = ms;
 800088e:	4a2e      	ldr	r2, [pc, #184]	; (8000948 <main+0x2a0>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	e032      	b.n	80008fc <main+0x254>
			  }
			  else if(key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 8000896:	787b      	ldrb	r3, [r7, #1]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d111      	bne.n	80008c0 <main+0x218>
 800089c:	4b2b      	ldr	r3, [pc, #172]	; (800094c <main+0x2a4>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10d      	bne.n	80008c0 <main+0x218>
 80008a4:	4b28      	ldr	r3, [pc, #160]	; (8000948 <main+0x2a0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008b0:	d906      	bls.n	80008c0 <main+0x218>
			  {
			    long_state3 = 1;
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <main+0x2a4>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
			    // действие на длинное нажатие
				 btn3_long_rd = 1;
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <main+0x2a8>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e01d      	b.n	80008fc <main+0x254>
			  }
			  else if(key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 80008c0:	787b      	ldrb	r3, [r7, #1]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	f47f af1d 	bne.w	8000702 <main+0x5a>
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <main+0x29c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	f43f af18 	beq.w	8000702 <main+0x5a>
 80008d2:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <main+0x2a0>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	2b32      	cmp	r3, #50	; 0x32
 80008dc:	f67f af11 	bls.w	8000702 <main+0x5a>
			  {
			    short_state3 = 0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <main+0x29c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
			    time_key3 = ms;
 80008e6:	4a18      	ldr	r2, [pc, #96]	; (8000948 <main+0x2a0>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6013      	str	r3, [r2, #0]

			    if(!long_state3)
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <main+0x2a4>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	f47f af06 	bne.w	8000702 <main+0x5a>
			    {
			      // действие на короткое нажатие
			    	btn3_short_rd = 1;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <main+0x2ac>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
	while (1) {
 80008fc:	e701      	b.n	8000702 <main+0x5a>
 80008fe:	bf00      	nop
 8000900:	200004a0 	.word	0x200004a0
 8000904:	20000460 	.word	0x20000460
 8000908:	200003e0 	.word	0x200003e0
 800090c:	20000000 	.word	0x20000000
 8000910:	200004d0 	.word	0x200004d0
 8000914:	20000002 	.word	0x20000002
 8000918:	40010c00 	.word	0x40010c00
 800091c:	2000019e 	.word	0x2000019e
 8000920:	200001a0 	.word	0x200001a0
 8000924:	2000019f 	.word	0x2000019f
 8000928:	200001a4 	.word	0x200001a4
 800092c:	200001a5 	.word	0x200001a5
 8000930:	200001a6 	.word	0x200001a6
 8000934:	200001a8 	.word	0x200001a8
 8000938:	200001a7 	.word	0x200001a7
 800093c:	200001ac 	.word	0x200001ac
 8000940:	200001ad 	.word	0x200001ad
 8000944:	200001ae 	.word	0x200001ae
 8000948:	200001b0 	.word	0x200001b0
 800094c:	200001af 	.word	0x200001af
 8000950:	200001b4 	.word	0x200001b4
 8000954:	200001b5 	.word	0x200001b5

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	; 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000962:	2228      	movs	r2, #40	; 0x28
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f007 fb4d 	bl	8008006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000988:	2301      	movs	r3, #1
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000996:	2301      	movs	r3, #1
 8000998:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 faf0 	bl	8002f94 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009ba:	f000 fa1f 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2102      	movs	r1, #2
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fd5a 	bl	8003494 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009e6:	f000 fa09 	bl	8000dfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80009ea:	2312      	movs	r3, #18
 80009ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80009ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 fee6 	bl	80037cc <HAL_RCCEx_PeriphCLKConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a06:	f000 f9f9 	bl	8000dfc <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3750      	adds	r7, #80	; 0x50
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_ADC1_Init+0x74>)
 8000a26:	4a19      	ldr	r2, [pc, #100]	; (8000a8c <MX_ADC1_Init+0x78>)
 8000a28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_ADC1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_ADC1_Init+0x74>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_ADC1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_ADC1_Init+0x74>)
 8000a3e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_ADC1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_ADC1_Init+0x74>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_ADC1_Init+0x74>)
 8000a52:	f000 fc97 	bl	8001384 <HAL_ADC_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a5c:	f000 f9ce 	bl	8000dfc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a60:	2303      	movs	r3, #3
 8000a62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_ADC1_Init+0x74>)
 8000a72:	f000 feed 	bl	8001850 <HAL_ADC_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a7c:	f000 f9be 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200004a0 	.word	0x200004a0
 8000a8c:	40012400 	.word	0x40012400

08000a90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_SPI1_Init+0x68>)
 8000a96:	4a19      	ldr	r2, [pc, #100]	; (8000afc <MX_SPI1_Init+0x6c>)
 8000a98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_SPI1_Init+0x68>)
 8000a9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_SPI1_Init+0x68>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_SPI1_Init+0x68>)
 8000aaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_SPI1_Init+0x68>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_SPI1_Init+0x68>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_SPI1_Init+0x68>)
 8000abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_SPI1_Init+0x68>)
 8000ac6:	2208      	movs	r2, #8
 8000ac8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_SPI1_Init+0x68>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_SPI1_Init+0x68>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_SPI1_Init+0x68>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_SPI1_Init+0x68>)
 8000ade:	220a      	movs	r2, #10
 8000ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_SPI1_Init+0x68>)
 8000ae4:	f002 ffe4 	bl	8003ab0 <HAL_SPI_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000aee:	f000 f985 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200004d0 	.word	0x200004d0
 8000afc:	40013000 	.word	0x40013000

08000b00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b10:	463b      	mov	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b1c:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <MX_TIM3_Init+0xbc>)
 8000b1e:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <MX_TIM3_Init+0xc0>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000b22:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <MX_TIM3_Init+0xbc>)
 8000b24:	2247      	movs	r2, #71	; 0x47
 8000b26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <MX_TIM3_Init+0xbc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 8000b2e:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <MX_TIM3_Init+0xbc>)
 8000b30:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000b34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <MX_TIM3_Init+0xbc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_TIM3_Init+0xbc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b42:	481e      	ldr	r0, [pc, #120]	; (8000bbc <MX_TIM3_Init+0xbc>)
 8000b44:	f003 f9d1 	bl	8003eea <HAL_TIM_IC_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f000 f955 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4816      	ldr	r0, [pc, #88]	; (8000bbc <MX_TIM3_Init+0xbc>)
 8000b62:	f003 fdf4 	bl	800474e <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b6c:	f000 f946 	bl	8000dfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b74:	2301      	movs	r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	4619      	mov	r1, r3
 8000b86:	480d      	ldr	r0, [pc, #52]	; (8000bbc <MX_TIM3_Init+0xbc>)
 8000b88:	f003 fb4a 	bl	8004220 <HAL_TIM_IC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b92:	f000 f933 	bl	8000dfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b96:	2302      	movs	r3, #2
 8000b98:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_TIM3_Init+0xbc>)
 8000ba6:	f003 fb3b 	bl	8004220 <HAL_TIM_IC_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000bb0:	f000 f924 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000460 	.word	0x20000460
 8000bc0:	40000400 	.word	0x40000400

08000bc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <MX_TIM4_Init+0xbc>)
 8000be2:	4a28      	ldr	r2, [pc, #160]	; (8000c84 <MX_TIM4_Init+0xc0>)
 8000be4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <MX_TIM4_Init+0xbc>)
 8000be8:	2247      	movs	r2, #71	; 0x47
 8000bea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bec:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <MX_TIM4_Init+0xbc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 8000bf2:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <MX_TIM4_Init+0xbc>)
 8000bf4:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000bf8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <MX_TIM4_Init+0xbc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <MX_TIM4_Init+0xbc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000c06:	481e      	ldr	r0, [pc, #120]	; (8000c80 <MX_TIM4_Init+0xbc>)
 8000c08:	f003 f96f 	bl	8003eea <HAL_TIM_IC_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000c12:	f000 f8f3 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	4619      	mov	r1, r3
 8000c24:	4816      	ldr	r0, [pc, #88]	; (8000c80 <MX_TIM4_Init+0xbc>)
 8000c26:	f003 fd92 	bl	800474e <HAL_TIMEx_MasterConfigSynchronization>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000c30:	f000 f8e4 	bl	8000dfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480d      	ldr	r0, [pc, #52]	; (8000c80 <MX_TIM4_Init+0xbc>)
 8000c4c:	f003 fae8 	bl	8004220 <HAL_TIM_IC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000c56:	f000 f8d1 	bl	8000dfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	2204      	movs	r2, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_TIM4_Init+0xbc>)
 8000c6a:	f003 fad9 	bl	8004220 <HAL_TIM_IC_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000c74:	f000 f8c2 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200003e0 	.word	0x200003e0
 8000c84:	40000800 	.word	0x40000800

08000c88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <MX_USART3_UART_Init+0x50>)
 8000c90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000c94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000cc0:	f003 fd9b 	bl	80047fa <HAL_UART_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cca:	f000 f897 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000420 	.word	0x20000420
 8000cd8:	40004800 	.word	0x40004800

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf0:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <MX_GPIO_Init+0x110>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a3d      	ldr	r2, [pc, #244]	; (8000dec <MX_GPIO_Init+0x110>)
 8000cf6:	f043 0310 	orr.w	r3, r3, #16
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b3b      	ldr	r3, [pc, #236]	; (8000dec <MX_GPIO_Init+0x110>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0310 	and.w	r3, r3, #16
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d08:	4b38      	ldr	r3, [pc, #224]	; (8000dec <MX_GPIO_Init+0x110>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a37      	ldr	r2, [pc, #220]	; (8000dec <MX_GPIO_Init+0x110>)
 8000d0e:	f043 0320 	orr.w	r3, r3, #32
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b35      	ldr	r3, [pc, #212]	; (8000dec <MX_GPIO_Init+0x110>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0320 	and.w	r3, r3, #32
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b32      	ldr	r3, [pc, #200]	; (8000dec <MX_GPIO_Init+0x110>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a31      	ldr	r2, [pc, #196]	; (8000dec <MX_GPIO_Init+0x110>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <MX_GPIO_Init+0x110>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d38:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <MX_GPIO_Init+0x110>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a2b      	ldr	r2, [pc, #172]	; (8000dec <MX_GPIO_Init+0x110>)
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b29      	ldr	r3, [pc, #164]	; (8000dec <MX_GPIO_Init+0x110>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d56:	4826      	ldr	r0, [pc, #152]	; (8000df0 <MX_GPIO_Init+0x114>)
 8000d58:	f001 fa23 	bl	80021a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f240 4112 	movw	r1, #1042	; 0x412
 8000d62:	4824      	ldr	r0, [pc, #144]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d64:	f001 fa1d 	bl	80021a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	4821      	ldr	r0, [pc, #132]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000d6e:	f001 fa18 	bl	80021a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4819      	ldr	r0, [pc, #100]	; (8000df0 <MX_GPIO_Init+0x114>)
 8000d8c:	f001 f898 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 8000d90:	f240 4316 	movw	r3, #1046	; 0x416
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	4812      	ldr	r0, [pc, #72]	; (8000df4 <MX_GPIO_Init+0x118>)
 8000daa:	f001 f889 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_GPIO_Init+0x11c>)
 8000dc4:	f001 f87c 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000dc8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_GPIO_Init+0x11c>)
 8000dde:	f001 f86f 	bl	8001ec0 <HAL_GPIO_Init>

}
 8000de2:	bf00      	nop
 8000de4:	3720      	adds	r7, #32
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40011000 	.word	0x40011000
 8000df4:	40010800 	.word	0x40010800
 8000df8:	40010c00 	.word	0x40010c00

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_MspInit+0x60>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_MspInit+0x60>)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010000 	.word	0x40010000

08000e6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <HAL_ADC_MspInit+0x7c>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d129      	bne.n	8000ee0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_ADC_MspInit+0x80>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a16      	ldr	r2, [pc, #88]	; (8000eec <HAL_ADC_MspInit+0x80>)
 8000e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_ADC_MspInit+0x80>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_ADC_MspInit+0x80>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_ADC_MspInit+0x80>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_ADC_MspInit+0x80>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <HAL_ADC_MspInit+0x84>)
 8000ecc:	f000 fff8 	bl	8001ec0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2012      	movs	r0, #18
 8000ed6:	f000 ffbc 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000eda:	2012      	movs	r0, #18
 8000edc:	f000 ffd5 	bl	8001e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40012400 	.word	0x40012400
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <HAL_SPI_MspInit+0x70>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d123      	bne.n	8000f5c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_SPI_MspInit+0x74>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <HAL_SPI_MspInit+0x74>)
 8000f1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_SPI_MspInit+0x74>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_SPI_MspInit+0x74>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_SPI_MspInit+0x74>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_SPI_MspInit+0x74>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8000f44:	23a0      	movs	r3, #160	; 0xa0
 8000f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4619      	mov	r1, r3
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <HAL_SPI_MspInit+0x78>)
 8000f58:	f000 ffb2 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40013000 	.word	0x40013000
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010800 	.word	0x40010800

08000f70 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a3b      	ldr	r2, [pc, #236]	; (8001078 <HAL_TIM_IC_MspInit+0x108>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d13e      	bne.n	800100e <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f90:	4b3a      	ldr	r3, [pc, #232]	; (800107c <HAL_TIM_IC_MspInit+0x10c>)
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	4a39      	ldr	r2, [pc, #228]	; (800107c <HAL_TIM_IC_MspInit+0x10c>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	61d3      	str	r3, [r2, #28]
 8000f9c:	4b37      	ldr	r3, [pc, #220]	; (800107c <HAL_TIM_IC_MspInit+0x10c>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	4b34      	ldr	r3, [pc, #208]	; (800107c <HAL_TIM_IC_MspInit+0x10c>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a33      	ldr	r2, [pc, #204]	; (800107c <HAL_TIM_IC_MspInit+0x10c>)
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b31      	ldr	r3, [pc, #196]	; (800107c <HAL_TIM_IC_MspInit+0x10c>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	482b      	ldr	r0, [pc, #172]	; (8001080 <HAL_TIM_IC_MspInit+0x110>)
 8000fd4:	f000 ff74 	bl	8001ec0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <HAL_TIM_IC_MspInit+0x114>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff6:	4a23      	ldr	r2, [pc, #140]	; (8001084 <HAL_TIM_IC_MspInit+0x114>)
 8000ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffa:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	201d      	movs	r0, #29
 8001002:	f000 ff26 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001006:	201d      	movs	r0, #29
 8001008:	f000 ff3f 	bl	8001e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800100c:	e030      	b.n	8001070 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <HAL_TIM_IC_MspInit+0x118>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d12b      	bne.n	8001070 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_TIM_IC_MspInit+0x10c>)
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	4a17      	ldr	r2, [pc, #92]	; (800107c <HAL_TIM_IC_MspInit+0x10c>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	61d3      	str	r3, [r2, #28]
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_TIM_IC_MspInit+0x10c>)
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_TIM_IC_MspInit+0x10c>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a11      	ldr	r2, [pc, #68]	; (800107c <HAL_TIM_IC_MspInit+0x10c>)
 8001036:	f043 0308 	orr.w	r3, r3, #8
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_TIM_IC_MspInit+0x10c>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001048:	2340      	movs	r3, #64	; 0x40
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	4809      	ldr	r0, [pc, #36]	; (8001080 <HAL_TIM_IC_MspInit+0x110>)
 800105c:	f000 ff30 	bl	8001ec0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	201e      	movs	r0, #30
 8001066:	f000 fef4 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800106a:	201e      	movs	r0, #30
 800106c:	f000 ff0d 	bl	8001e8a <HAL_NVIC_EnableIRQ>
}
 8001070:	bf00      	nop
 8001072:	3730      	adds	r7, #48	; 0x30
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40000400 	.word	0x40000400
 800107c:	40021000 	.word	0x40021000
 8001080:	40010c00 	.word	0x40010c00
 8001084:	40010000 	.word	0x40010000
 8001088:	40000800 	.word	0x40000800

0800108c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <HAL_UART_MspInit+0x8c>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d131      	bne.n	8001110 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_UART_MspInit+0x90>)
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	4a1a      	ldr	r2, [pc, #104]	; (800111c <HAL_UART_MspInit+0x90>)
 80010b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b6:	61d3      	str	r3, [r2, #28]
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <HAL_UART_MspInit+0x90>)
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_UART_MspInit+0x90>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_UART_MspInit+0x90>)
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_UART_MspInit+0x90>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4619      	mov	r1, r3
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <HAL_UART_MspInit+0x94>)
 80010f2:	f000 fee5 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4619      	mov	r1, r3
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_UART_MspInit+0x94>)
 800110c:	f000 fed8 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40004800 	.word	0x40004800
 800111c:	40021000 	.word	0x40021000
 8001120:	40010c00 	.word	0x40010c00

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <HardFault_Handler+0x4>

08001136 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <MemManage_Handler+0x4>

0800113c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <BusFault_Handler+0x4>

08001142 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <UsageFault_Handler+0x4>

08001148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001170:	f000 f8ca 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <ADC1_2_IRQHandler+0x10>)
 800117e:	f000 fa9b 	bl	80016b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200004a0 	.word	0x200004a0

0800118c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001192:	f001 f925 	bl	80023e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000df0 	.word	0x20000df0

080011a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <TIM3_IRQHandler+0x10>)
 80011a6:	f002 ff33 	bl	8004010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000460 	.word	0x20000460

080011b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <TIM4_IRQHandler+0x10>)
 80011ba:	f002 ff29 	bl	8004010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200003e0 	.word	0x200003e0

080011c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <SystemInit+0x5c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a14      	ldr	r2, [pc, #80]	; (8001224 <SystemInit+0x5c>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <SystemInit+0x5c>)
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	4911      	ldr	r1, [pc, #68]	; (8001224 <SystemInit+0x5c>)
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <SystemInit+0x60>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <SystemInit+0x5c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <SystemInit+0x5c>)
 80011ea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <SystemInit+0x5c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <SystemInit+0x5c>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <SystemInit+0x5c>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <SystemInit+0x5c>)
 8001206:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800120a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SystemInit+0x5c>)
 800120e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001212:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SystemInit+0x64>)
 8001216:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800121a:	609a      	str	r2, [r3, #8]
#endif 
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	40021000 	.word	0x40021000
 8001228:	f8ff0000 	.word	0xf8ff0000
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001230:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001232:	e003      	b.n	800123c <LoopCopyDataInit>

08001234 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001236:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001238:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800123a:	3104      	adds	r1, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800123c:	480a      	ldr	r0, [pc, #40]	; (8001268 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001240:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001242:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001244:	d3f6      	bcc.n	8001234 <CopyDataInit>
  ldr r2, =_sbss
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001248:	e002      	b.n	8001250 <LoopFillZerobss>

0800124a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800124c:	f842 3b04 	str.w	r3, [r2], #4

08001250 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001252:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001254:	d3f9      	bcc.n	800124a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001256:	f7ff ffb7 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125a:	f006 fea5 	bl	8007fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800125e:	f7ff fa23 	bl	80006a8 <main>
  bx lr
 8001262:	4770      	bx	lr
  ldr r3, =_sidata
 8001264:	080080cc 	.word	0x080080cc
  ldr r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800126c:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8001270:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8001274:	2000105c 	.word	0x2000105c

08001278 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <CAN1_RX1_IRQHandler>
	...

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_Init+0x28>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <HAL_Init+0x28>)
 8001286:	f043 0310 	orr.w	r3, r3, #16
 800128a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128c:	2003      	movs	r0, #3
 800128e:	f000 fdd5 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001292:	2000      	movs	r0, #0
 8001294:	f000 f808 	bl	80012a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001298:	f7ff fdb6 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40022000 	.word	0x40022000

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_InitTick+0x54>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_InitTick+0x58>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fded 	bl	8001ea6 <HAL_SYSTICK_Config>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00e      	b.n	80012f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d80a      	bhi.n	80012f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f000 fdb5 	bl	8001e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_InitTick+0x5c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000004 	.word	0x20000004
 8001300:	2000000c 	.word	0x2000000c
 8001304:	20000008 	.word	0x20000008

08001308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_IncTick+0x1c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_IncTick+0x20>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a03      	ldr	r2, [pc, #12]	; (8001328 <HAL_IncTick+0x20>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	2000000c 	.word	0x2000000c
 8001328:	20000528 	.word	0x20000528

0800132c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b02      	ldr	r3, [pc, #8]	; (800133c <HAL_GetTick+0x10>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	20000528 	.word	0x20000528

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff fff0 	bl	800132c <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d005      	beq.n	8001366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_Delay+0x40>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001366:	bf00      	nop
 8001368:	f7ff ffe0 	bl	800132c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f7      	bhi.n	8001368 <HAL_Delay+0x28>
  {
  }
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2000000c 	.word	0x2000000c

08001384 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e0be      	b.n	8001524 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d109      	bne.n	80013c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff fd52 	bl	8000e6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 fb8b 	bl	8001ae4 <ADC_ConversionStop_Disable>
 80013ce:	4603      	mov	r3, r0
 80013d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f040 8099 	bne.w	8001512 <HAL_ADC_Init+0x18e>
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f040 8095 	bne.w	8001512 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013f0:	f023 0302 	bic.w	r3, r3, #2
 80013f4:	f043 0202 	orr.w	r2, r3, #2
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001404:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7b1b      	ldrb	r3, [r3, #12]
 800140a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800140c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	4313      	orrs	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800141c:	d003      	beq.n	8001426 <HAL_ADC_Init+0xa2>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d102      	bne.n	800142c <HAL_ADC_Init+0xa8>
 8001426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800142a:	e000      	b.n	800142e <HAL_ADC_Init+0xaa>
 800142c:	2300      	movs	r3, #0
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7d1b      	ldrb	r3, [r3, #20]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d119      	bne.n	8001470 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7b1b      	ldrb	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d109      	bne.n	8001458 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	3b01      	subs	r3, #1
 800144a:	035a      	lsls	r2, r3, #13
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	e00b      	b.n	8001470 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	f043 0220 	orr.w	r2, r3, #32
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	f043 0201 	orr.w	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	430a      	orrs	r2, r1
 8001482:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	4b28      	ldr	r3, [pc, #160]	; (800152c <HAL_ADC_Init+0x1a8>)
 800148c:	4013      	ands	r3, r2
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	68b9      	ldr	r1, [r7, #8]
 8001494:	430b      	orrs	r3, r1
 8001496:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014a0:	d003      	beq.n	80014aa <HAL_ADC_Init+0x126>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d104      	bne.n	80014b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	051b      	lsls	r3, r3, #20
 80014b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_ADC_Init+0x1ac>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d10b      	bne.n	80014f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	f023 0303 	bic.w	r3, r3, #3
 80014e6:	f043 0201 	orr.w	r2, r3, #1
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014ee:	e018      	b.n	8001522 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	f023 0312 	bic.w	r3, r3, #18
 80014f8:	f043 0210 	orr.w	r2, r3, #16
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	f043 0201 	orr.w	r2, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001510:	e007      	b.n	8001522 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	f043 0210 	orr.w	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001522:	7dfb      	ldrb	r3, [r7, #23]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	ffe1f7fd 	.word	0xffe1f7fd
 8001530:	ff1f0efe 	.word	0xff1f0efe

08001534 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_ADC_Start_IT+0x1a>
 800154a:	2302      	movs	r3, #2
 800154c:	e0a0      	b.n	8001690 <HAL_ADC_Start_IT+0x15c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 fa72 	bl	8001a40 <ADC_Enable>
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f040 808f 	bne.w	8001686 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a45      	ldr	r2, [pc, #276]	; (8001698 <HAL_ADC_Start_IT+0x164>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d105      	bne.n	8001592 <HAL_ADC_Start_IT+0x5e>
 8001586:	4b45      	ldr	r3, [pc, #276]	; (800169c <HAL_ADC_Start_IT+0x168>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d115      	bne.n	80015be <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d026      	beq.n	80015fa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015bc:	e01d      	b.n	80015fa <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a33      	ldr	r2, [pc, #204]	; (800169c <HAL_ADC_Start_IT+0x168>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d004      	beq.n	80015de <HAL_ADC_Start_IT+0xaa>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a2f      	ldr	r2, [pc, #188]	; (8001698 <HAL_ADC_Start_IT+0x164>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d10d      	bne.n	80015fa <HAL_ADC_Start_IT+0xc6>
 80015de:	4b2f      	ldr	r3, [pc, #188]	; (800169c <HAL_ADC_Start_IT+0x168>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d007      	beq.n	80015fa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	f023 0206 	bic.w	r2, r3, #6
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	62da      	str	r2, [r3, #44]	; 0x2c
 8001612:	e002      	b.n	800161a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f06f 0202 	mvn.w	r2, #2
 800162a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0220 	orr.w	r2, r2, #32
 800163a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001646:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800164a:	d113      	bne.n	8001674 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001650:	4a11      	ldr	r2, [pc, #68]	; (8001698 <HAL_ADC_Start_IT+0x164>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d105      	bne.n	8001662 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_ADC_Start_IT+0x168>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800165e:	2b00      	cmp	r3, #0
 8001660:	d108      	bne.n	8001674 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	e00c      	b.n	800168e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	e003      	b.n	800168e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40012800 	.word	0x40012800
 800169c:	40012400 	.word	0x40012400

080016a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0320 	and.w	r3, r3, #32
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d140      	bne.n	8001750 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d139      	bne.n	8001750 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d105      	bne.n	80016f4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001702:	d11d      	bne.n	8001740 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001708:	2b00      	cmp	r3, #0
 800170a:	d119      	bne.n	8001740 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0220 	bic.w	r2, r2, #32
 800171a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d105      	bne.n	8001740 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	f043 0201 	orr.w	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7fe ff2f 	bl	80005a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f06f 0212 	mvn.w	r2, #18
 800174e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175a:	2b80      	cmp	r3, #128	; 0x80
 800175c:	d14f      	bne.n	80017fe <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b04      	cmp	r3, #4
 800176a:	d148      	bne.n	80017fe <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800178e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001792:	d012      	beq.n	80017ba <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d125      	bne.n	80017ee <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80017ac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017b0:	d11d      	bne.n	80017ee <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d119      	bne.n	80017ee <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017c8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d105      	bne.n	80017ee <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 fa4e 	bl	8001c90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f06f 020c 	mvn.w	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001808:	2b40      	cmp	r3, #64	; 0x40
 800180a:	d114      	bne.n	8001836 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b01      	cmp	r3, #1
 8001818:	d10d      	bne.n	8001836 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f809 	bl	800183e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f06f 0201 	mvn.w	r2, #1
 8001834:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x20>
 800186c:	2302      	movs	r3, #2
 800186e:	e0dc      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x1da>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b06      	cmp	r3, #6
 800187e:	d81c      	bhi.n	80018ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	3b05      	subs	r3, #5
 8001892:	221f      	movs	r2, #31
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	4019      	ands	r1, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	3b05      	subs	r3, #5
 80018ac:	fa00 f203 	lsl.w	r2, r0, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34
 80018b8:	e03c      	b.n	8001934 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d81c      	bhi.n	80018fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	3b23      	subs	r3, #35	; 0x23
 80018d4:	221f      	movs	r2, #31
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	4019      	ands	r1, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	3b23      	subs	r3, #35	; 0x23
 80018ee:	fa00 f203 	lsl.w	r2, r0, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
 80018fa:	e01b      	b.n	8001934 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	3b41      	subs	r3, #65	; 0x41
 800190e:	221f      	movs	r2, #31
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	4019      	ands	r1, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	3b41      	subs	r3, #65	; 0x41
 8001928:	fa00 f203 	lsl.w	r2, r0, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b09      	cmp	r3, #9
 800193a:	d91c      	bls.n	8001976 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68d9      	ldr	r1, [r3, #12]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	3b1e      	subs	r3, #30
 800194e:	2207      	movs	r2, #7
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	4019      	ands	r1, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6898      	ldr	r0, [r3, #8]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	3b1e      	subs	r3, #30
 8001968:	fa00 f203 	lsl.w	r2, r0, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	e019      	b.n	80019aa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6919      	ldr	r1, [r3, #16]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	2207      	movs	r2, #7
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	4019      	ands	r1, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	6898      	ldr	r0, [r3, #8]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	fa00 f203 	lsl.w	r2, r0, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b10      	cmp	r3, #16
 80019b0:	d003      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019b6:	2b11      	cmp	r3, #17
 80019b8:	d132      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_ADC_ConfigChannel+0x1e4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d125      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d126      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019e0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b10      	cmp	r3, #16
 80019e8:	d11a      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <HAL_ADC_ConfigChannel+0x1e8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <HAL_ADC_ConfigChannel+0x1ec>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	0c9a      	lsrs	r2, r3, #18
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a00:	e002      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f9      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x1b2>
 8001a0e:	e007      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	f043 0220 	orr.w	r2, r3, #32
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40012400 	.word	0x40012400
 8001a38:	20000004 	.word	0x20000004
 8001a3c:	431bde83 	.word	0x431bde83

08001a40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d039      	beq.n	8001ad2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0201 	orr.w	r2, r2, #1
 8001a6c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <ADC_Enable+0x9c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1b      	ldr	r2, [pc, #108]	; (8001ae0 <ADC_Enable+0xa0>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	0c9b      	lsrs	r3, r3, #18
 8001a7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a7c:	e002      	b.n	8001a84 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f9      	bne.n	8001a7e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a8a:	f7ff fc4f 	bl	800132c <HAL_GetTick>
 8001a8e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a90:	e018      	b.n	8001ac4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a92:	f7ff fc4b 	bl	800132c <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d911      	bls.n	8001ac4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa4:	f043 0210 	orr.w	r2, r3, #16
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	f043 0201 	orr.w	r2, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e007      	b.n	8001ad4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d1df      	bne.n	8001a92 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000004 	.word	0x20000004
 8001ae0:	431bde83 	.word	0x431bde83

08001ae4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d127      	bne.n	8001b4e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0201 	bic.w	r2, r2, #1
 8001b0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b0e:	f7ff fc0d 	bl	800132c <HAL_GetTick>
 8001b12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b14:	e014      	b.n	8001b40 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b16:	f7ff fc09 	bl	800132c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d90d      	bls.n	8001b40 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	f043 0210 	orr.w	r2, r3, #16
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	f043 0201 	orr.w	r2, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e007      	b.n	8001b50 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d0e3      	beq.n	8001b16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_ADCEx_Calibration_Start+0x1e>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e086      	b.n	8001c84 <HAL_ADCEx_Calibration_Start+0x12c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffb0 	bl	8001ae4 <ADC_ConversionStop_Disable>
 8001b84:	4603      	mov	r3, r0
 8001b86:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d175      	bne.n	8001c7a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b96:	f023 0302 	bic.w	r3, r3, #2
 8001b9a:	f043 0202 	orr.w	r2, r3, #2
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ba2:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <HAL_ADCEx_Calibration_Start+0x134>)
 8001ba4:	681c      	ldr	r4, [r3, #0]
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f001 fec6 	bl	8003938 <HAL_RCCEx_GetPeriphCLKFreq>
 8001bac:	4603      	mov	r3, r0
 8001bae:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001bb2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001bb4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001bb6:	e002      	b.n	8001bbe <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f9      	bne.n	8001bb8 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff3b 	bl	8001a40 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0208 	orr.w	r2, r2, #8
 8001bd8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001bda:	f7ff fba7 	bl	800132c <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001be0:	e014      	b.n	8001c0c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001be2:	f7ff fba3 	bl	800132c <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b0a      	cmp	r3, #10
 8001bee:	d90d      	bls.n	8001c0c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	f023 0312 	bic.w	r3, r3, #18
 8001bf8:	f043 0210 	orr.w	r2, r3, #16
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e03b      	b.n	8001c84 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1e3      	bne.n	8001be2 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0204 	orr.w	r2, r2, #4
 8001c28:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c2a:	f7ff fb7f 	bl	800132c <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c30:	e014      	b.n	8001c5c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c32:	f7ff fb7b 	bl	800132c <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b0a      	cmp	r3, #10
 8001c3e:	d90d      	bls.n	8001c5c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	f023 0312 	bic.w	r3, r3, #18
 8001c48:	f043 0210 	orr.w	r2, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e013      	b.n	8001c84 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1e3      	bne.n	8001c32 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6e:	f023 0303 	bic.w	r3, r3, #3
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd90      	pop	{r4, r7, pc}
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
	...

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4906      	ldr	r1, [pc, #24]	; (8001d3c <__NVIC_EnableIRQ+0x34>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f7ff ff90 	bl	8001d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff2d 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e64:	f7ff ff42 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	6978      	ldr	r0, [r7, #20]
 8001e70:	f7ff ff90 	bl	8001d94 <NVIC_EncodePriority>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff5f 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff35 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffa2 	bl	8001df8 <SysTick_Config>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b08b      	sub	sp, #44	; 0x2c
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed2:	e127      	b.n	8002124 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69fa      	ldr	r2, [r7, #28]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	f040 8116 	bne.w	800211e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d034      	beq.n	8001f64 <HAL_GPIO_Init+0xa4>
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d80d      	bhi.n	8001f1a <HAL_GPIO_Init+0x5a>
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d02b      	beq.n	8001f5a <HAL_GPIO_Init+0x9a>
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d804      	bhi.n	8001f10 <HAL_GPIO_Init+0x50>
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d031      	beq.n	8001f6e <HAL_GPIO_Init+0xae>
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d01c      	beq.n	8001f48 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f0e:	e048      	b.n	8001fa2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d043      	beq.n	8001f9c <HAL_GPIO_Init+0xdc>
 8001f14:	2b11      	cmp	r3, #17
 8001f16:	d01b      	beq.n	8001f50 <HAL_GPIO_Init+0x90>
          break;
 8001f18:	e043      	b.n	8001fa2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f1a:	4a89      	ldr	r2, [pc, #548]	; (8002140 <HAL_GPIO_Init+0x280>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d026      	beq.n	8001f6e <HAL_GPIO_Init+0xae>
 8001f20:	4a87      	ldr	r2, [pc, #540]	; (8002140 <HAL_GPIO_Init+0x280>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d806      	bhi.n	8001f34 <HAL_GPIO_Init+0x74>
 8001f26:	4a87      	ldr	r2, [pc, #540]	; (8002144 <HAL_GPIO_Init+0x284>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d020      	beq.n	8001f6e <HAL_GPIO_Init+0xae>
 8001f2c:	4a86      	ldr	r2, [pc, #536]	; (8002148 <HAL_GPIO_Init+0x288>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01d      	beq.n	8001f6e <HAL_GPIO_Init+0xae>
          break;
 8001f32:	e036      	b.n	8001fa2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f34:	4a85      	ldr	r2, [pc, #532]	; (800214c <HAL_GPIO_Init+0x28c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d019      	beq.n	8001f6e <HAL_GPIO_Init+0xae>
 8001f3a:	4a85      	ldr	r2, [pc, #532]	; (8002150 <HAL_GPIO_Init+0x290>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d016      	beq.n	8001f6e <HAL_GPIO_Init+0xae>
 8001f40:	4a84      	ldr	r2, [pc, #528]	; (8002154 <HAL_GPIO_Init+0x294>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0xae>
          break;
 8001f46:	e02c      	b.n	8001fa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e028      	b.n	8001fa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	3304      	adds	r3, #4
 8001f56:	623b      	str	r3, [r7, #32]
          break;
 8001f58:	e023      	b.n	8001fa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	3308      	adds	r3, #8
 8001f60:	623b      	str	r3, [r7, #32]
          break;
 8001f62:	e01e      	b.n	8001fa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	330c      	adds	r3, #12
 8001f6a:	623b      	str	r3, [r7, #32]
          break;
 8001f6c:	e019      	b.n	8001fa2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f76:	2304      	movs	r3, #4
 8001f78:	623b      	str	r3, [r7, #32]
          break;
 8001f7a:	e012      	b.n	8001fa2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f84:	2308      	movs	r3, #8
 8001f86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	611a      	str	r2, [r3, #16]
          break;
 8001f8e:	e008      	b.n	8001fa2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f90:	2308      	movs	r3, #8
 8001f92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	615a      	str	r2, [r3, #20]
          break;
 8001f9a:	e002      	b.n	8001fa2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
          break;
 8001fa0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2bff      	cmp	r3, #255	; 0xff
 8001fa6:	d801      	bhi.n	8001fac <HAL_GPIO_Init+0xec>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	e001      	b.n	8001fb0 <HAL_GPIO_Init+0xf0>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2bff      	cmp	r3, #255	; 0xff
 8001fb6:	d802      	bhi.n	8001fbe <HAL_GPIO_Init+0xfe>
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	e002      	b.n	8001fc4 <HAL_GPIO_Init+0x104>
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	3b08      	subs	r3, #8
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	210f      	movs	r1, #15
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	6a39      	ldr	r1, [r7, #32]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 8096 	beq.w	800211e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ff2:	4b59      	ldr	r3, [pc, #356]	; (8002158 <HAL_GPIO_Init+0x298>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	4a58      	ldr	r2, [pc, #352]	; (8002158 <HAL_GPIO_Init+0x298>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6193      	str	r3, [r2, #24]
 8001ffe:	4b56      	ldr	r3, [pc, #344]	; (8002158 <HAL_GPIO_Init+0x298>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800200a:	4a54      	ldr	r2, [pc, #336]	; (800215c <HAL_GPIO_Init+0x29c>)
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	3302      	adds	r3, #2
 8002012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002016:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	220f      	movs	r2, #15
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4b      	ldr	r2, [pc, #300]	; (8002160 <HAL_GPIO_Init+0x2a0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_GPIO_Init+0x19e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4a      	ldr	r2, [pc, #296]	; (8002164 <HAL_GPIO_Init+0x2a4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00d      	beq.n	800205a <HAL_GPIO_Init+0x19a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a49      	ldr	r2, [pc, #292]	; (8002168 <HAL_GPIO_Init+0x2a8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <HAL_GPIO_Init+0x196>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a48      	ldr	r2, [pc, #288]	; (800216c <HAL_GPIO_Init+0x2ac>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_GPIO_Init+0x192>
 800204e:	2303      	movs	r3, #3
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x1a0>
 8002052:	2304      	movs	r3, #4
 8002054:	e004      	b.n	8002060 <HAL_GPIO_Init+0x1a0>
 8002056:	2302      	movs	r3, #2
 8002058:	e002      	b.n	8002060 <HAL_GPIO_Init+0x1a0>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_GPIO_Init+0x1a0>
 800205e:	2300      	movs	r3, #0
 8002060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002062:	f002 0203 	and.w	r2, r2, #3
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	4093      	lsls	r3, r2
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002070:	493a      	ldr	r1, [pc, #232]	; (800215c <HAL_GPIO_Init+0x29c>)
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d006      	beq.n	8002098 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800208a:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4938      	ldr	r1, [pc, #224]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
 8002096:	e006      	b.n	80020a6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002098:	4b35      	ldr	r3, [pc, #212]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	43db      	mvns	r3, r3
 80020a0:	4933      	ldr	r1, [pc, #204]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d006      	beq.n	80020c0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020b2:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	492e      	ldr	r1, [pc, #184]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
 80020be:	e006      	b.n	80020ce <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	4929      	ldr	r1, [pc, #164]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020da:	4b25      	ldr	r3, [pc, #148]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	4924      	ldr	r1, [pc, #144]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
 80020e6:	e006      	b.n	80020f6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020e8:	4b21      	ldr	r3, [pc, #132]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	491f      	ldr	r1, [pc, #124]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	491a      	ldr	r1, [pc, #104]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	60cb      	str	r3, [r1, #12]
 800210e:	e006      	b.n	800211e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002110:	4b17      	ldr	r3, [pc, #92]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	43db      	mvns	r3, r3
 8002118:	4915      	ldr	r1, [pc, #84]	; (8002170 <HAL_GPIO_Init+0x2b0>)
 800211a:	4013      	ands	r3, r2
 800211c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	3301      	adds	r3, #1
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	f47f aed0 	bne.w	8001ed4 <HAL_GPIO_Init+0x14>
  }
}
 8002134:	bf00      	nop
 8002136:	372c      	adds	r7, #44	; 0x2c
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	10210000 	.word	0x10210000
 8002144:	10110000 	.word	0x10110000
 8002148:	10120000 	.word	0x10120000
 800214c:	10310000 	.word	0x10310000
 8002150:	10320000 	.word	0x10320000
 8002154:	10220000 	.word	0x10220000
 8002158:	40021000 	.word	0x40021000
 800215c:	40010000 	.word	0x40010000
 8002160:	40010800 	.word	0x40010800
 8002164:	40010c00 	.word	0x40010c00
 8002168:	40011000 	.word	0x40011000
 800216c:	40011400 	.word	0x40011400
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	e001      	b.n	8002196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	807b      	strh	r3, [r7, #2]
 80021ae:	4613      	mov	r3, r2
 80021b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b2:	787b      	ldrb	r3, [r7, #1]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b8:	887a      	ldrh	r2, [r7, #2]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021be:	e003      	b.n	80021c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	041a      	lsls	r2, r3, #16
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	611a      	str	r2, [r3, #16]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d4:	b08b      	sub	sp, #44	; 0x2c
 80021d6:	af06      	add	r7, sp, #24
 80021d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0d3      	b.n	800238c <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d106      	bne.n	80021fe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f005 fc37 	bl	8007a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2203      	movs	r2, #3
 8002202:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f002 fc43 	bl	8004a96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	687e      	ldr	r6, [r7, #4]
 8002218:	466d      	mov	r5, sp
 800221a:	f106 0410 	add.w	r4, r6, #16
 800221e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	602b      	str	r3, [r5, #0]
 8002226:	1d33      	adds	r3, r6, #4
 8002228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222a:	6838      	ldr	r0, [r7, #0]
 800222c:	f002 fc0c 	bl	8004a48 <USB_CoreInit>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2202      	movs	r2, #2
 800223a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0a4      	b.n	800238c <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f002 fc40 	bl	8004ace <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	e035      	b.n	80022c0 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	015b      	lsls	r3, r3, #5
 800225a:	4413      	add	r3, r2
 800225c:	3329      	adds	r3, #41	; 0x29
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	015b      	lsls	r3, r3, #5
 8002268:	4413      	add	r3, r2
 800226a:	3328      	adds	r3, #40	; 0x28
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	b291      	uxth	r1, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	015b      	lsls	r3, r3, #5
 800227a:	4413      	add	r3, r2
 800227c:	3336      	adds	r3, #54	; 0x36
 800227e:	460a      	mov	r2, r1
 8002280:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	015b      	lsls	r3, r3, #5
 8002288:	4413      	add	r3, r2
 800228a:	332b      	adds	r3, #43	; 0x2b
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	015b      	lsls	r3, r3, #5
 8002296:	4413      	add	r3, r2
 8002298:	3338      	adds	r3, #56	; 0x38
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	015b      	lsls	r3, r3, #5
 80022a4:	4413      	add	r3, r2
 80022a6:	333c      	adds	r3, #60	; 0x3c
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	3302      	adds	r3, #2
 80022b2:	015b      	lsls	r3, r3, #5
 80022b4:	4413      	add	r3, r2
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	3301      	adds	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d3c4      	bcc.n	8002254 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	e031      	b.n	8002334 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	015b      	lsls	r3, r3, #5
 80022d6:	4413      	add	r3, r2
 80022d8:	f203 1329 	addw	r3, r3, #297	; 0x129
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	015b      	lsls	r3, r3, #5
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	015b      	lsls	r3, r3, #5
 80022f6:	4413      	add	r3, r2
 80022f8:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	015b      	lsls	r3, r3, #5
 8002306:	4413      	add	r3, r2
 8002308:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	015b      	lsls	r3, r3, #5
 8002316:	4413      	add	r3, r2
 8002318:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	330a      	adds	r3, #10
 8002326:	015b      	lsls	r3, r3, #5
 8002328:	4413      	add	r3, r2
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	3301      	adds	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	429a      	cmp	r2, r3
 800233c:	d3c8      	bcc.n	80022d0 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	687e      	ldr	r6, [r7, #4]
 8002346:	466d      	mov	r5, sp
 8002348:	f106 0410 	add.w	r4, r6, #16
 800234c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800234e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	602b      	str	r3, [r5, #0]
 8002354:	1d33      	adds	r3, r6, #4
 8002356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002358:	6838      	ldr	r0, [r7, #0]
 800235a:	f002 fbc4 	bl	8004ae6 <USB_DevInit>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e00d      	b.n	800238c <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f003 fc02 	bl	8005b8e <USB_DevDisconnect>

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002394 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_PCD_Start+0x16>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e016      	b.n	80023d8 <HAL_PCD_Start+0x44>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80023b2:	2101      	movs	r1, #1
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f005 fdc0 	bl	8007f3a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 fbdb 	bl	8005b7a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f002 fb4d 	bl	8004a68 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f003 fbd8 	bl	8005ba2 <USB_ReadInterrupts>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023fc:	d102      	bne.n	8002404 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 faf2 	bl	80029e8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fbca 	bl	8005ba2 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002418:	d112      	bne.n	8002440 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002422:	b29a      	uxth	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242c:	b292      	uxth	r2, r2
 800242e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f005 fb8f 	bl	8007b56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002438:	2100      	movs	r1, #0
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f8de 	bl	80025fc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f003 fbac 	bl	8005ba2 <USB_ReadInterrupts>
 800244a:	4603      	mov	r3, r0
 800244c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002454:	d10b      	bne.n	800246e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800245e:	b29a      	uxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002468:	b292      	uxth	r2, r2
 800246a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fb95 	bl	8005ba2 <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800247e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002482:	d10b      	bne.n	800249c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800248c:	b29a      	uxth	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002496:	b292      	uxth	r2, r2
 8002498:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f003 fb7e 	bl	8005ba2 <USB_ReadInterrupts>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b0:	d126      	bne.n	8002500 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0204 	bic.w	r2, r2, #4
 80024c4:	b292      	uxth	r2, r2
 80024c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0208 	bic.w	r2, r2, #8
 80024dc:	b292      	uxth	r2, r2
 80024de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f005 fb70 	bl	8007bc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024fa:	b292      	uxth	r2, r2
 80024fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f003 fb4c 	bl	8005ba2 <USB_ReadInterrupts>
 800250a:	4603      	mov	r3, r0
 800250c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002514:	d13d      	bne.n	8002592 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800251e:	b29a      	uxth	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0208 	orr.w	r2, r2, #8
 8002528:	b292      	uxth	r2, r2
 800252a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002536:	b29a      	uxth	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002540:	b292      	uxth	r2, r2
 8002542:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800254e:	b29a      	uxth	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0204 	orr.w	r2, r2, #4
 8002558:	b292      	uxth	r2, r2
 800255a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fb1d 	bl	8005ba2 <USB_ReadInterrupts>
 8002568:	4603      	mov	r3, r0
 800256a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002572:	d10b      	bne.n	800258c <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800257c:	b29a      	uxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002586:	b292      	uxth	r2, r2
 8002588:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f005 fb01 	bl	8007b94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f003 fb03 	bl	8005ba2 <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a6:	d10e      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025ba:	b292      	uxth	r2, r2
 80025bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f005 faba 	bl	8007b3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 fae9 	bl	8005ba2 <USB_ReadInterrupts>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025da:	d10b      	bne.n	80025f4 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025ee:	b292      	uxth	r2, r2
 80025f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_PCD_SetAddress+0x1a>
 8002612:	2302      	movs	r3, #2
 8002614:	e013      	b.n	800263e <HAL_PCD_SetAddress+0x42>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f003 fa90 	bl	8005b54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	4608      	mov	r0, r1
 8002650:	4611      	mov	r1, r2
 8002652:	461a      	mov	r2, r3
 8002654:	4603      	mov	r3, r0
 8002656:	70fb      	strb	r3, [r7, #3]
 8002658:	460b      	mov	r3, r1
 800265a:	803b      	strh	r3, [r7, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002668:	2b00      	cmp	r3, #0
 800266a:	da0b      	bge.n	8002684 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	015b      	lsls	r3, r3, #5
 8002674:	3328      	adds	r3, #40	; 0x28
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2201      	movs	r2, #1
 8002680:	705a      	strb	r2, [r3, #1]
 8002682:	e00b      	b.n	800269c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	015b      	lsls	r3, r3, #5
 800268c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026a8:	883a      	ldrh	r2, [r7, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	78ba      	ldrb	r2, [r7, #2]
 80026b2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d004      	beq.n	80026c6 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026c6:	78bb      	ldrb	r3, [r7, #2]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d102      	bne.n	80026d2 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_PCD_EP_Open+0x9a>
 80026dc:	2302      	movs	r3, #2
 80026de:	e00e      	b.n	80026fe <HAL_PCD_EP_Open+0xb8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68f9      	ldr	r1, [r7, #12]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 fa1e 	bl	8004b30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80026fc:	7afb      	ldrb	r3, [r7, #11]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002716:	2b00      	cmp	r3, #0
 8002718:	da0b      	bge.n	8002732 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	015b      	lsls	r3, r3, #5
 8002722:	3328      	adds	r3, #40	; 0x28
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	705a      	strb	r2, [r3, #1]
 8002730:	e00b      	b.n	800274a <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	015b      	lsls	r3, r3, #5
 800273a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	b2da      	uxtb	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_PCD_EP_Close+0x5e>
 8002760:	2302      	movs	r3, #2
 8002762:	e00e      	b.n	8002782 <HAL_PCD_EP_Close+0x7c>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68f9      	ldr	r1, [r7, #12]
 8002772:	4618      	mov	r0, r3
 8002774:	f002 fcca 	bl	800510c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	460b      	mov	r3, r1
 8002798:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800279a:	7afb      	ldrb	r3, [r7, #11]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	015b      	lsls	r3, r3, #5
 80027a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4413      	add	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2200      	movs	r2, #0
 80027bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2200      	movs	r2, #0
 80027c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027d0:	7afb      	ldrb	r3, [r7, #11]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6979      	ldr	r1, [r7, #20]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 fe29 	bl	8005438 <USB_EPStartXfer>
 80027e6:	e005      	b.n	80027f4 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f002 fe22 	bl	8005438 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	330a      	adds	r3, #10
 8002814:	015b      	lsls	r3, r3, #5
 8002816:	4413      	add	r3, r2
 8002818:	3304      	adds	r3, #4
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	460b      	mov	r3, r1
 8002834:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002836:	7afb      	ldrb	r3, [r7, #11]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	015b      	lsls	r3, r3, #5
 800283e:	3328      	adds	r3, #40	; 0x28
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2200      	movs	r2, #0
 8002856:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2201      	movs	r2, #1
 800285c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800285e:	7afb      	ldrb	r3, [r7, #11]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	b2da      	uxtb	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800286a:	7afb      	ldrb	r3, [r7, #11]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6979      	ldr	r1, [r7, #20]
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fddc 	bl	8005438 <USB_EPStartXfer>
 8002880:	e005      	b.n	800288e <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6979      	ldr	r1, [r7, #20]
 8002888:	4618      	mov	r0, r3
 800288a:	f002 fdd5 	bl	8005438 <USB_EPStartXfer>
  }

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	f003 0207 	and.w	r2, r3, #7
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d901      	bls.n	80028b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e046      	b.n	8002944 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	da0b      	bge.n	80028d6 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	015b      	lsls	r3, r3, #5
 80028c6:	3328      	adds	r3, #40	; 0x28
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	4413      	add	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	705a      	strb	r2, [r3, #1]
 80028d4:	e009      	b.n	80028ea <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	015b      	lsls	r3, r3, #5
 80028da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_PCD_EP_SetStall+0x72>
 8002906:	2302      	movs	r3, #2
 8002908:	e01c      	b.n	8002944 <HAL_PCD_EP_SetStall+0xac>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	4618      	mov	r0, r3
 800291a:	f003 f845 	bl	80059a8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	2b00      	cmp	r3, #0
 8002926:	d108      	bne.n	800293a <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f003 f943 	bl	8005bc0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	429a      	cmp	r2, r3
 8002964:	d901      	bls.n	800296a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e03a      	b.n	80029e0 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800296a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800296e:	2b00      	cmp	r3, #0
 8002970:	da0b      	bge.n	800298a <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	015b      	lsls	r3, r3, #5
 800297a:	3328      	adds	r3, #40	; 0x28
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	705a      	strb	r2, [r3, #1]
 8002988:	e00b      	b.n	80029a2 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	015b      	lsls	r3, r3, #5
 8002992:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_PCD_EP_ClrStall+0x76>
 80029be:	2302      	movs	r3, #2
 80029c0:	e00e      	b.n	80029e0 <HAL_PCD_EP_ClrStall+0x94>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68f9      	ldr	r1, [r7, #12]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f003 f82b 	bl	8005a2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029f0:	e282      	b.n	8002ef8 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029fa:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80029fc:	8afb      	ldrh	r3, [r7, #22]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002a06:	7d7b      	ldrb	r3, [r7, #21]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f040 8142 	bne.w	8002c92 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a0e:	8afb      	ldrh	r3, [r7, #22]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d151      	bne.n	8002abc <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a28:	b29c      	uxth	r4, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3328      	adds	r3, #40	; 0x28
 8002a3e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	3302      	adds	r3, #2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	441a      	add	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f005 f845 	bl	8007b0c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 8234 	beq.w	8002ef8 <PCD_EP_ISR_Handler+0x510>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f040 822f 	bne.w	8002ef8 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	b292      	uxth	r2, r2
 8002aae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002aba:	e21d      	b.n	8002ef8 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ac2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002acc:	8a7b      	ldrh	r3, [r7, #18]
 8002ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d033      	beq.n	8002b3e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3306      	adds	r3, #6
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f003 f8a2 	bl	8005c5e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b26:	4013      	ands	r3, r2
 8002b28:	b29c      	uxth	r4, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002b32:	b292      	uxth	r2, r2
 8002b34:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f004 ffbe 	bl	8007ab8 <HAL_PCD_SetupStageCallback>
 8002b3c:	e1dc      	b.n	8002ef8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f280 81d8 	bge.w	8002ef8 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b54:	4013      	ands	r3, r2
 8002b56:	b29c      	uxth	r4, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002b60:	b292      	uxth	r2, r2
 8002b62:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	3306      	adds	r3, #6
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d019      	beq.n	8002bcc <PCD_EP_ISR_Handler+0x1e4>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6959      	ldr	r1, [r3, #20]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f003 f854 	bl	8005c5e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	441a      	add	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f004 ff88 	bl	8007adc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	461c      	mov	r4, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	441c      	add	r4, r3
 8002bde:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002be2:	461c      	mov	r4, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10e      	bne.n	8002c0a <PCD_EP_ISR_Handler+0x222>
 8002bec:	8823      	ldrh	r3, [r4, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	8023      	strh	r3, [r4, #0]
 8002bf8:	8823      	ldrh	r3, [r4, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	8023      	strh	r3, [r4, #0]
 8002c08:	e02d      	b.n	8002c66 <PCD_EP_ISR_Handler+0x27e>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8002c10:	d812      	bhi.n	8002c38 <PCD_EP_ISR_Handler+0x250>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	085b      	lsrs	r3, r3, #1
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <PCD_EP_ISR_Handler+0x244>
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	029b      	lsls	r3, r3, #10
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	8023      	strh	r3, [r4, #0]
 8002c36:	e016      	b.n	8002c66 <PCD_EP_ISR_Handler+0x27e>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <PCD_EP_ISR_Handler+0x26a>
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	029b      	lsls	r3, r3, #10
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c76:	b29c      	uxth	r4, r3
 8002c78:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002c7c:	b29c      	uxth	r4, r3
 8002c7e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002c82:	b29c      	uxth	r4, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4ba2      	ldr	r3, [pc, #648]	; (8002f14 <PCD_EP_ISR_Handler+0x52c>)
 8002c8a:	4323      	orrs	r3, r4
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	8013      	strh	r3, [r2, #0]
 8002c90:	e132      	b.n	8002ef8 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	7d7b      	ldrb	r3, [r7, #21]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ca2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f280 80d1 	bge.w	8002e4e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	7d7b      	ldrb	r3, [r7, #21]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b29c      	uxth	r4, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	7d7b      	ldrb	r3, [r7, #21]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002cd4:	b292      	uxth	r2, r2
 8002cd6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002cd8:	7d7b      	ldrb	r3, [r7, #21]
 8002cda:	015b      	lsls	r3, r3, #5
 8002cdc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	7b1b      	ldrb	r3, [r3, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d121      	bne.n	8002d32 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	3306      	adds	r3, #6
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d16:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002d18:	8bfb      	ldrh	r3, [r7, #30]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d072      	beq.n	8002e04 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6959      	ldr	r1, [r3, #20]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	88da      	ldrh	r2, [r3, #6]
 8002d2a:	8bfb      	ldrh	r3, [r7, #30]
 8002d2c:	f002 ff97 	bl	8005c5e <USB_ReadPMA>
 8002d30:	e068      	b.n	8002e04 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d021      	beq.n	8002d90 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3302      	adds	r3, #2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d74:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002d76:	8bfb      	ldrh	r3, [r7, #30]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d02a      	beq.n	8002dd2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6959      	ldr	r1, [r3, #20]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	891a      	ldrh	r2, [r3, #8]
 8002d88:	8bfb      	ldrh	r3, [r7, #30]
 8002d8a:	f002 ff68 	bl	8005c5e <USB_ReadPMA>
 8002d8e:	e020      	b.n	8002dd2 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	3306      	adds	r3, #6
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002dba:	8bfb      	ldrh	r3, [r7, #30]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6959      	ldr	r1, [r3, #20]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	895a      	ldrh	r2, [r3, #10]
 8002dcc:	8bfb      	ldrh	r3, [r7, #30]
 8002dce:	f002 ff46 	bl	8005c5e <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dec:	b29c      	uxth	r4, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	441a      	add	r2, r3
 8002dfc:	4b46      	ldr	r3, [pc, #280]	; (8002f18 <PCD_EP_ISR_Handler+0x530>)
 8002dfe:	4323      	orrs	r3, r4
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	69da      	ldr	r2, [r3, #28]
 8002e08:	8bfb      	ldrh	r3, [r7, #30]
 8002e0a:	441a      	add	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	8bfb      	ldrh	r3, [r7, #30]
 8002e16:	441a      	add	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <PCD_EP_ISR_Handler+0x446>
 8002e24:	8bfa      	ldrh	r2, [r7, #30]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d206      	bcs.n	8002e3c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	4619      	mov	r1, r3
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f004 fe51 	bl	8007adc <HAL_PCD_DataOutStageCallback>
 8002e3a:	e008      	b.n	8002e4e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	7819      	ldrb	r1, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff fc9e 	bl	800278a <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e4e:	8a7b      	ldrh	r3, [r7, #18]
 8002e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d04f      	beq.n	8002ef8 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e58:	7d7b      	ldrb	r3, [r7, #21]
 8002e5a:	015b      	lsls	r3, r3, #5
 8002e5c:	3328      	adds	r3, #40	; 0x28
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	7d7b      	ldrb	r3, [r7, #21]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7c:	b29c      	uxth	r4, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	7d7b      	ldrb	r3, [r7, #21]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	441a      	add	r2, r3
 8002e8a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3302      	adds	r3, #2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	441a      	add	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	4619      	mov	r1, r3
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f004 fe14 	bl	8007b0c <HAL_PCD_DataInStageCallback>
 8002ee4:	e008      	b.n	8002ef8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	7819      	ldrb	r1, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff fc97 	bl	8002826 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b21b      	sxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f6ff ad74 	blt.w	80029f2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3724      	adds	r7, #36	; 0x24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd90      	pop	{r4, r7, pc}
 8002f14:	ffff8080 	.word	0xffff8080
 8002f18:	ffff80c0 	.word	0xffff80c0

08002f1c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	607b      	str	r3, [r7, #4]
 8002f26:	460b      	mov	r3, r1
 8002f28:	817b      	strh	r3, [r7, #10]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f2e:	897b      	ldrh	r3, [r7, #10]
 8002f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f3a:	897b      	ldrh	r3, [r7, #10]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	015b      	lsls	r3, r3, #5
 8002f42:	3328      	adds	r3, #40	; 0x28
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	e006      	b.n	8002f5a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f4c:	897b      	ldrh	r3, [r7, #10]
 8002f4e:	015b      	lsls	r3, r3, #5
 8002f50:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f5a:	893b      	ldrh	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d107      	bne.n	8002f70 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2200      	movs	r2, #0
 8002f64:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	80da      	strh	r2, [r3, #6]
 8002f6e:	e00b      	b.n	8002f88 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2201      	movs	r2, #1
 8002f74:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e26c      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8087 	beq.w	80030c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb4:	4b92      	ldr	r3, [pc, #584]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d00c      	beq.n	8002fda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fc0:	4b8f      	ldr	r3, [pc, #572]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d112      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x5e>
 8002fcc:	4b8c      	ldr	r3, [pc, #560]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fda:	4b89      	ldr	r3, [pc, #548]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d06c      	beq.n	80030c0 <HAL_RCC_OscConfig+0x12c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d168      	bne.n	80030c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e246      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x76>
 8002ffc:	4b80      	ldr	r3, [pc, #512]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a7f      	ldr	r2, [pc, #508]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8003002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e02e      	b.n	8003068 <HAL_RCC_OscConfig+0xd4>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0x98>
 8003012:	4b7b      	ldr	r3, [pc, #492]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7a      	ldr	r2, [pc, #488]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8003018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	4b78      	ldr	r3, [pc, #480]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a77      	ldr	r2, [pc, #476]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8003024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e01d      	b.n	8003068 <HAL_RCC_OscConfig+0xd4>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0xbc>
 8003036:	4b72      	ldr	r3, [pc, #456]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a71      	ldr	r2, [pc, #452]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 800303c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4b6f      	ldr	r3, [pc, #444]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a6e      	ldr	r2, [pc, #440]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e00b      	b.n	8003068 <HAL_RCC_OscConfig+0xd4>
 8003050:	4b6b      	ldr	r3, [pc, #428]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a6a      	ldr	r2, [pc, #424]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8003056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b68      	ldr	r3, [pc, #416]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a67      	ldr	r2, [pc, #412]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8003062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003066:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d013      	beq.n	8003098 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe f95c 	bl	800132c <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003078:	f7fe f958 	bl	800132c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	; 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e1fa      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308a:	4b5d      	ldr	r3, [pc, #372]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0xe4>
 8003096:	e014      	b.n	80030c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe f948 	bl	800132c <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe f944 	bl	800132c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e1e6      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b2:	4b53      	ldr	r3, [pc, #332]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x10c>
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d063      	beq.n	8003196 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ce:	4b4c      	ldr	r3, [pc, #304]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030da:	4b49      	ldr	r3, [pc, #292]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d11c      	bne.n	8003120 <HAL_RCC_OscConfig+0x18c>
 80030e6:	4b46      	ldr	r3, [pc, #280]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d116      	bne.n	8003120 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	4b43      	ldr	r3, [pc, #268]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_RCC_OscConfig+0x176>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d001      	beq.n	800310a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e1ba      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310a:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4939      	ldr	r1, [pc, #228]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311e:	e03a      	b.n	8003196 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d020      	beq.n	800316a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003128:	4b36      	ldr	r3, [pc, #216]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fe f8fd 	bl	800132c <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003136:	f7fe f8f9 	bl	800132c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e19b      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003148:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003154:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4927      	ldr	r1, [pc, #156]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 8003164:	4313      	orrs	r3, r2
 8003166:	600b      	str	r3, [r1, #0]
 8003168:	e015      	b.n	8003196 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <HAL_RCC_OscConfig+0x270>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe f8dc 	bl	800132c <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003178:	f7fe f8d8 	bl	800132c <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e17a      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318a:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d03a      	beq.n	8003218 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d019      	beq.n	80031de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031aa:	4b17      	ldr	r3, [pc, #92]	; (8003208 <HAL_RCC_OscConfig+0x274>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b0:	f7fe f8bc 	bl	800132c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b8:	f7fe f8b8 	bl	800132c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e15a      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ca:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031d6:	2001      	movs	r0, #1
 80031d8:	f000 fada 	bl	8003790 <RCC_Delay>
 80031dc:	e01c      	b.n	8003218 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_RCC_OscConfig+0x274>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e4:	f7fe f8a2 	bl	800132c <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ea:	e00f      	b.n	800320c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ec:	f7fe f89e 	bl	800132c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d908      	bls.n	800320c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e140      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	42420000 	.word	0x42420000
 8003208:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320c:	4b9e      	ldr	r3, [pc, #632]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e9      	bne.n	80031ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80a6 	beq.w	8003372 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322a:	4b97      	ldr	r3, [pc, #604]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10d      	bne.n	8003252 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003236:	4b94      	ldr	r3, [pc, #592]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	4a93      	ldr	r2, [pc, #588]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 800323c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003240:	61d3      	str	r3, [r2, #28]
 8003242:	4b91      	ldr	r3, [pc, #580]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324e:	2301      	movs	r3, #1
 8003250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003252:	4b8e      	ldr	r3, [pc, #568]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d118      	bne.n	8003290 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800325e:	4b8b      	ldr	r3, [pc, #556]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a8a      	ldr	r2, [pc, #552]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326a:	f7fe f85f 	bl	800132c <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003272:	f7fe f85b 	bl	800132c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b64      	cmp	r3, #100	; 0x64
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0fd      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003284:	4b81      	ldr	r3, [pc, #516]	; (800348c <HAL_RCC_OscConfig+0x4f8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d106      	bne.n	80032a6 <HAL_RCC_OscConfig+0x312>
 8003298:	4b7b      	ldr	r3, [pc, #492]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	4a7a      	ldr	r2, [pc, #488]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	6213      	str	r3, [r2, #32]
 80032a4:	e02d      	b.n	8003302 <HAL_RCC_OscConfig+0x36e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x334>
 80032ae:	4b76      	ldr	r3, [pc, #472]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	4a75      	ldr	r2, [pc, #468]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	6213      	str	r3, [r2, #32]
 80032ba:	4b73      	ldr	r3, [pc, #460]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	4a72      	ldr	r2, [pc, #456]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80032c0:	f023 0304 	bic.w	r3, r3, #4
 80032c4:	6213      	str	r3, [r2, #32]
 80032c6:	e01c      	b.n	8003302 <HAL_RCC_OscConfig+0x36e>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b05      	cmp	r3, #5
 80032ce:	d10c      	bne.n	80032ea <HAL_RCC_OscConfig+0x356>
 80032d0:	4b6d      	ldr	r3, [pc, #436]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	4a6c      	ldr	r2, [pc, #432]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80032d6:	f043 0304 	orr.w	r3, r3, #4
 80032da:	6213      	str	r3, [r2, #32]
 80032dc:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	4a69      	ldr	r2, [pc, #420]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	6213      	str	r3, [r2, #32]
 80032e8:	e00b      	b.n	8003302 <HAL_RCC_OscConfig+0x36e>
 80032ea:	4b67      	ldr	r3, [pc, #412]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	4a66      	ldr	r2, [pc, #408]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	6213      	str	r3, [r2, #32]
 80032f6:	4b64      	ldr	r3, [pc, #400]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	4a63      	ldr	r2, [pc, #396]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80032fc:	f023 0304 	bic.w	r3, r3, #4
 8003300:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d015      	beq.n	8003336 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330a:	f7fe f80f 	bl	800132c <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003310:	e00a      	b.n	8003328 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7fe f80b 	bl	800132c <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0ab      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003328:	4b57      	ldr	r3, [pc, #348]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0ee      	beq.n	8003312 <HAL_RCC_OscConfig+0x37e>
 8003334:	e014      	b.n	8003360 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003336:	f7fd fff9 	bl	800132c <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333c:	e00a      	b.n	8003354 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333e:	f7fd fff5 	bl	800132c <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f241 3288 	movw	r2, #5000	; 0x1388
 800334c:	4293      	cmp	r3, r2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e095      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003354:	4b4c      	ldr	r3, [pc, #304]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1ee      	bne.n	800333e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003360:	7dfb      	ldrb	r3, [r7, #23]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003366:	4b48      	ldr	r3, [pc, #288]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	4a47      	ldr	r2, [pc, #284]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 800336c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003370:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8081 	beq.w	800347e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800337c:	4b42      	ldr	r3, [pc, #264]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d061      	beq.n	800344c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d146      	bne.n	800341e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003390:	4b3f      	ldr	r3, [pc, #252]	; (8003490 <HAL_RCC_OscConfig+0x4fc>)
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003396:	f7fd ffc9 	bl	800132c <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339e:	f7fd ffc5 	bl	800132c <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e067      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b0:	4b35      	ldr	r3, [pc, #212]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f0      	bne.n	800339e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c4:	d108      	bne.n	80033d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033c6:	4b30      	ldr	r3, [pc, #192]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	492d      	ldr	r1, [pc, #180]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d8:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a19      	ldr	r1, [r3, #32]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	430b      	orrs	r3, r1
 80033ea:	4927      	ldr	r1, [pc, #156]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f0:	4b27      	ldr	r3, [pc, #156]	; (8003490 <HAL_RCC_OscConfig+0x4fc>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fd ff99 	bl	800132c <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fe:	f7fd ff95 	bl	800132c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e037      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003410:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x46a>
 800341c:	e02f      	b.n	800347e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341e:	4b1c      	ldr	r3, [pc, #112]	; (8003490 <HAL_RCC_OscConfig+0x4fc>)
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fd ff82 	bl	800132c <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342c:	f7fd ff7e 	bl	800132c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e020      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343e:	4b12      	ldr	r3, [pc, #72]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x498>
 800344a:	e018      	b.n	800347e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e013      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_OscConfig+0x4f4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	429a      	cmp	r2, r3
 800346a:	d106      	bne.n	800347a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	40007000 	.word	0x40007000
 8003490:	42420060 	.word	0x42420060

08003494 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0d0      	b.n	800364a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034a8:	4b6a      	ldr	r3, [pc, #424]	; (8003654 <HAL_RCC_ClockConfig+0x1c0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d910      	bls.n	80034d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b67      	ldr	r3, [pc, #412]	; (8003654 <HAL_RCC_ClockConfig+0x1c0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 0207 	bic.w	r2, r3, #7
 80034be:	4965      	ldr	r1, [pc, #404]	; (8003654 <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0b8      	b.n	800364a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f0:	4b59      	ldr	r3, [pc, #356]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a58      	ldr	r2, [pc, #352]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003508:	4b53      	ldr	r3, [pc, #332]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	4a52      	ldr	r2, [pc, #328]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 800350e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003512:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003514:	4b50      	ldr	r3, [pc, #320]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	494d      	ldr	r1, [pc, #308]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	4313      	orrs	r3, r2
 8003524:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d040      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b47      	ldr	r3, [pc, #284]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d115      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e07f      	b.n	800364a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003552:	4b41      	ldr	r3, [pc, #260]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e073      	b.n	800364a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003562:	4b3d      	ldr	r3, [pc, #244]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e06b      	b.n	800364a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003572:	4b39      	ldr	r3, [pc, #228]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f023 0203 	bic.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4936      	ldr	r1, [pc, #216]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003584:	f7fd fed2 	bl	800132c <HAL_GetTick>
 8003588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800358c:	f7fd fece 	bl	800132c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e053      	b.n	800364a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 020c 	and.w	r2, r3, #12
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d1eb      	bne.n	800358c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035b4:	4b27      	ldr	r3, [pc, #156]	; (8003654 <HAL_RCC_ClockConfig+0x1c0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d210      	bcs.n	80035e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b24      	ldr	r3, [pc, #144]	; (8003654 <HAL_RCC_ClockConfig+0x1c0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 0207 	bic.w	r2, r3, #7
 80035ca:	4922      	ldr	r1, [pc, #136]	; (8003654 <HAL_RCC_ClockConfig+0x1c0>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b20      	ldr	r3, [pc, #128]	; (8003654 <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e032      	b.n	800364a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4916      	ldr	r1, [pc, #88]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	490e      	ldr	r1, [pc, #56]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 800361e:	4313      	orrs	r3, r2
 8003620:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003622:	f000 f821 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8003626:	4601      	mov	r1, r0
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	4a0a      	ldr	r2, [pc, #40]	; (800365c <HAL_RCC_ClockConfig+0x1c8>)
 8003634:	5cd3      	ldrb	r3, [r2, r3]
 8003636:	fa21 f303 	lsr.w	r3, r1, r3
 800363a:	4a09      	ldr	r2, [pc, #36]	; (8003660 <HAL_RCC_ClockConfig+0x1cc>)
 800363c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_RCC_ClockConfig+0x1d0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd fe30 	bl	80012a8 <HAL_InitTick>

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40022000 	.word	0x40022000
 8003658:	40021000 	.word	0x40021000
 800365c:	080080ac 	.word	0x080080ac
 8003660:	20000004 	.word	0x20000004
 8003664:	20000008 	.word	0x20000008

08003668 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003668:	b490      	push	{r4, r7}
 800366a:	b08a      	sub	sp, #40	; 0x28
 800366c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800366e:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003670:	1d3c      	adds	r4, r7, #4
 8003672:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003674:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003678:	4b28      	ldr	r3, [pc, #160]	; (800371c <HAL_RCC_GetSysClockFreq+0xb4>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	2300      	movs	r3, #0
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003692:	4b23      	ldr	r3, [pc, #140]	; (8003720 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d002      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x40>
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d003      	beq.n	80036ae <HAL_RCC_GetSysClockFreq+0x46>
 80036a6:	e02d      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036a8:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036aa:	623b      	str	r3, [r7, #32]
      break;
 80036ac:	e02d      	b.n	800370a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	0c9b      	lsrs	r3, r3, #18
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036ba:	4413      	add	r3, r2
 80036bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036cc:	4b14      	ldr	r3, [pc, #80]	; (8003720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	0c5b      	lsrs	r3, r3, #17
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036da:	4413      	add	r3, r2
 80036dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036e6:	fb02 f203 	mul.w	r2, r2, r3
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
 80036f2:	e004      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	4a0c      	ldr	r2, [pc, #48]	; (8003728 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036f8:	fb02 f303 	mul.w	r3, r2, r3
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	623b      	str	r3, [r7, #32]
      break;
 8003702:	e002      	b.n	800370a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003706:	623b      	str	r3, [r7, #32]
      break;
 8003708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800370a:	6a3b      	ldr	r3, [r7, #32]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3728      	adds	r7, #40	; 0x28
 8003710:	46bd      	mov	sp, r7
 8003712:	bc90      	pop	{r4, r7}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	08008030 	.word	0x08008030
 800371c:	08008040 	.word	0x08008040
 8003720:	40021000 	.word	0x40021000
 8003724:	007a1200 	.word	0x007a1200
 8003728:	003d0900 	.word	0x003d0900

0800372c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003730:	4b02      	ldr	r3, [pc, #8]	; (800373c <HAL_RCC_GetHCLKFreq+0x10>)
 8003732:	681b      	ldr	r3, [r3, #0]
}
 8003734:	4618      	mov	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	20000004 	.word	0x20000004

08003740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003744:	f7ff fff2 	bl	800372c <HAL_RCC_GetHCLKFreq>
 8003748:	4601      	mov	r1, r0
 800374a:	4b05      	ldr	r3, [pc, #20]	; (8003760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	0a1b      	lsrs	r3, r3, #8
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	4a03      	ldr	r2, [pc, #12]	; (8003764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003756:	5cd3      	ldrb	r3, [r2, r3]
 8003758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800375c:	4618      	mov	r0, r3
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000
 8003764:	080080bc 	.word	0x080080bc

08003768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800376c:	f7ff ffde 	bl	800372c <HAL_RCC_GetHCLKFreq>
 8003770:	4601      	mov	r1, r0
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	0adb      	lsrs	r3, r3, #11
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	4a03      	ldr	r2, [pc, #12]	; (800378c <HAL_RCC_GetPCLK2Freq+0x24>)
 800377e:	5cd3      	ldrb	r3, [r2, r3]
 8003780:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000
 800378c:	080080bc 	.word	0x080080bc

08003790 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <RCC_Delay+0x34>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <RCC_Delay+0x38>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	0a5b      	lsrs	r3, r3, #9
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	fb02 f303 	mul.w	r3, r2, r3
 80037aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037ac:	bf00      	nop
  }
  while (Delay --);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1e5a      	subs	r2, r3, #1
 80037b2:	60fa      	str	r2, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f9      	bne.n	80037ac <RCC_Delay+0x1c>
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000004 	.word	0x20000004
 80037c8:	10624dd3 	.word	0x10624dd3

080037cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d07d      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80037e8:	2300      	movs	r3, #0
 80037ea:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ec:	4b4f      	ldr	r3, [pc, #316]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10d      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f8:	4b4c      	ldr	r3, [pc, #304]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	4a4b      	ldr	r2, [pc, #300]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003802:	61d3      	str	r3, [r2, #28]
 8003804:	4b49      	ldr	r3, [pc, #292]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003810:	2301      	movs	r3, #1
 8003812:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003814:	4b46      	ldr	r3, [pc, #280]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d118      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003820:	4b43      	ldr	r3, [pc, #268]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a42      	ldr	r2, [pc, #264]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382c:	f7fd fd7e 	bl	800132c <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003832:	e008      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003834:	f7fd fd7a 	bl	800132c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	; 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e06d      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003846:	4b3a      	ldr	r3, [pc, #232]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003852:	4b36      	ldr	r3, [pc, #216]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d02e      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	429a      	cmp	r2, r3
 800386e:	d027      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003870:	4b2e      	ldr	r3, [pc, #184]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003878:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800387a:	4b2e      	ldr	r3, [pc, #184]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003880:	4b2c      	ldr	r3, [pc, #176]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003886:	4a29      	ldr	r2, [pc, #164]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d014      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003896:	f7fd fd49 	bl	800132c <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389c:	e00a      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fd fd45 	bl	800132c <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e036      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ee      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4917      	ldr	r1, [pc, #92]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d105      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d8:	4b14      	ldr	r3, [pc, #80]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	4a13      	ldr	r2, [pc, #76]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038f0:	4b0e      	ldr	r3, [pc, #56]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	490b      	ldr	r1, [pc, #44]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	4904      	ldr	r1, [pc, #16]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
 8003930:	40007000 	.word	0x40007000
 8003934:	42420440 	.word	0x42420440

08003938 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b08d      	sub	sp, #52	; 0x34
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003940:	4b55      	ldr	r3, [pc, #340]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003942:	f107 040c 	add.w	r4, r7, #12
 8003946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800394c:	4b53      	ldr	r3, [pc, #332]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
 8003956:	2300      	movs	r3, #0
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800395a:	2300      	movs	r3, #0
 800395c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	2300      	movs	r3, #0
 8003964:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d07f      	beq.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800396c:	2b10      	cmp	r3, #16
 800396e:	d002      	beq.n	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003970:	2b01      	cmp	r3, #1
 8003972:	d048      	beq.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003974:	e08b      	b.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003976:	4b4a      	ldr	r3, [pc, #296]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800397c:	4b48      	ldr	r3, [pc, #288]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d07f      	beq.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	0c9b      	lsrs	r3, r3, #18
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003994:	4413      	add	r3, r2
 8003996:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800399a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d018      	beq.n	80039d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039a6:	4b3e      	ldr	r3, [pc, #248]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	0c5b      	lsrs	r3, r3, #17
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80039b4:	4413      	add	r3, r2
 80039b6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80039c6:	4a37      	ldr	r2, [pc, #220]	; (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d6:	e004      	b.n	80039e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	4a33      	ldr	r2, [pc, #204]	; (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80039e2:	4b2f      	ldr	r3, [pc, #188]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ee:	d102      	bne.n	80039f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80039f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80039f4:	e048      	b.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	4a2c      	ldr	r2, [pc, #176]	; (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a04:	e040      	b.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a16:	d108      	bne.n	8003a2a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a28:	e01f      	b.n	8003a6a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a34:	d109      	bne.n	8003a4a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003a42:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a48:	e00f      	b.n	8003a6a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a54:	d11a      	bne.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003a56:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d014      	beq.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003a62:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a68:	e010      	b.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003a6a:	e00f      	b.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a6c:	f7ff fe7c 	bl	8003768 <HAL_RCC_GetPCLK2Freq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	0b9b      	lsrs	r3, r3, #14
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a86:	e002      	b.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003a88:	bf00      	nop
 8003a8a:	e000      	b.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003a8c:	bf00      	nop
    }
  }
  return (frequency);
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3734      	adds	r7, #52	; 0x34
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd90      	pop	{r4, r7, pc}
 8003a98:	08008044 	.word	0x08008044
 8003a9c:	08008054 	.word	0x08008054
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	007a1200 	.word	0x007a1200
 8003aa8:	003d0900 	.word	0x003d0900
 8003aac:	aaaaaaab 	.word	0xaaaaaaab

08003ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e053      	b.n	8003b6a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d106      	bne.n	8003ae2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7fd fa09 	bl	8000ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	ea42 0103 	orr.w	r1, r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	0c1a      	lsrs	r2, r3, #16
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f002 0204 	and.w	r2, r2, #4
 8003b48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b088      	sub	sp, #32
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	603b      	str	r3, [r7, #0]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_SPI_Transmit+0x22>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e11e      	b.n	8003dd2 <HAL_SPI_Transmit+0x260>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b9c:	f7fd fbc6 	bl	800132c <HAL_GetTick>
 8003ba0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d002      	beq.n	8003bb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bb6:	e103      	b.n	8003dc0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_SPI_Transmit+0x52>
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bc8:	e0fa      	b.n	8003dc0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2203      	movs	r2, #3
 8003bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	88fa      	ldrh	r2, [r7, #6]
 8003be2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	88fa      	ldrh	r2, [r7, #6]
 8003be8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c10:	d107      	bne.n	8003c22 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d007      	beq.n	8003c40 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c48:	d14b      	bne.n	8003ce2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_SPI_Transmit+0xe6>
 8003c52:	8afb      	ldrh	r3, [r7, #22]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d13e      	bne.n	8003cd6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	881a      	ldrh	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	1c9a      	adds	r2, r3, #2
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c7c:	e02b      	b.n	8003cd6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d112      	bne.n	8003cb2 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9c:	1c9a      	adds	r2, r3, #2
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cb0:	e011      	b.n	8003cd6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cb2:	f7fd fb3b 	bl	800132c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d803      	bhi.n	8003cca <HAL_SPI_Transmit+0x158>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc8:	d102      	bne.n	8003cd0 <HAL_SPI_Transmit+0x15e>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cd4:	e074      	b.n	8003dc0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1ce      	bne.n	8003c7e <HAL_SPI_Transmit+0x10c>
 8003ce0:	e04c      	b.n	8003d7c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_SPI_Transmit+0x17e>
 8003cea:	8afb      	ldrh	r3, [r7, #22]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d140      	bne.n	8003d72 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	7812      	ldrb	r2, [r2, #0]
 8003cfc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d16:	e02c      	b.n	8003d72 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d113      	bne.n	8003d4e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	7812      	ldrb	r2, [r2, #0]
 8003d32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d4c:	e011      	b.n	8003d72 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d4e:	f7fd faed 	bl	800132c <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d803      	bhi.n	8003d66 <HAL_SPI_Transmit+0x1f4>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d102      	bne.n	8003d6c <HAL_SPI_Transmit+0x1fa>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d70:	e026      	b.n	8003dc0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1cd      	bne.n	8003d18 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	6839      	ldr	r1, [r7, #0]
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f894 	bl	8003eae <SPI_EndRxTxTransaction>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e000      	b.n	8003dc0 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003dbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	4613      	mov	r3, r2
 8003de8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dea:	e04c      	b.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d048      	beq.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003df4:	f7fd fa9a 	bl	800132c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d902      	bls.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0x30>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d13d      	bne.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e22:	d111      	bne.n	8003e48 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e2c:	d004      	beq.n	8003e38 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e36:	d107      	bne.n	8003e48 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e50:	d10f      	bne.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e00f      	b.n	8003ea6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d1a3      	bne.n	8003dec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b086      	sub	sp, #24
 8003eb2:	af02      	add	r7, sp, #8
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2180      	movs	r1, #128	; 0x80
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff ff88 	bl	8003dda <SPI_WaitFlagStateUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d007      	beq.n	8003ee0 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	f043 0220 	orr.w	r2, r3, #32
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e000      	b.n	8003ee2 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e01d      	b.n	8003f38 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d106      	bne.n	8003f16 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7fd f82d 	bl	8000f70 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3304      	adds	r3, #4
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f000 fa7d 	bl	8004428 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b0c      	cmp	r3, #12
 8003f4e:	d841      	bhi.n	8003fd4 <HAL_TIM_IC_Start_IT+0x94>
 8003f50:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <HAL_TIM_IC_Start_IT+0x18>)
 8003f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f56:	bf00      	nop
 8003f58:	08003f8d 	.word	0x08003f8d
 8003f5c:	08003fd5 	.word	0x08003fd5
 8003f60:	08003fd5 	.word	0x08003fd5
 8003f64:	08003fd5 	.word	0x08003fd5
 8003f68:	08003f9f 	.word	0x08003f9f
 8003f6c:	08003fd5 	.word	0x08003fd5
 8003f70:	08003fd5 	.word	0x08003fd5
 8003f74:	08003fd5 	.word	0x08003fd5
 8003f78:	08003fb1 	.word	0x08003fb1
 8003f7c:	08003fd5 	.word	0x08003fd5
 8003f80:	08003fd5 	.word	0x08003fd5
 8003f84:	08003fd5 	.word	0x08003fd5
 8003f88:	08003fc3 	.word	0x08003fc3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0202 	orr.w	r2, r2, #2
 8003f9a:	60da      	str	r2, [r3, #12]
      break;
 8003f9c:	e01b      	b.n	8003fd6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0204 	orr.w	r2, r2, #4
 8003fac:	60da      	str	r2, [r3, #12]
      break;
 8003fae:	e012      	b.n	8003fd6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0208 	orr.w	r2, r2, #8
 8003fbe:	60da      	str	r2, [r3, #12]
      break;
 8003fc0:	e009      	b.n	8003fd6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0210 	orr.w	r2, r2, #16
 8003fd0:	60da      	str	r2, [r3, #12]
      break;
 8003fd2:	e000      	b.n	8003fd6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003fd4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	6839      	ldr	r1, [r7, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fb91 	bl	8004706 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b06      	cmp	r3, #6
 8003ff4:	d007      	beq.n	8004006 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d122      	bne.n	800406c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b02      	cmp	r3, #2
 8004032:	d11b      	bne.n	800406c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0202 	mvn.w	r2, #2
 800403c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fc fac0 	bl	80005d8 <HAL_TIM_IC_CaptureCallback>
 8004058:	e005      	b.n	8004066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9c9 	bl	80043f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f9cf 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b04      	cmp	r3, #4
 8004078:	d122      	bne.n	80040c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b04      	cmp	r3, #4
 8004086:	d11b      	bne.n	80040c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0204 	mvn.w	r2, #4
 8004090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fc fa96 	bl	80005d8 <HAL_TIM_IC_CaptureCallback>
 80040ac:	e005      	b.n	80040ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f99f 	bl	80043f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f9a5 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d122      	bne.n	8004114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d11b      	bne.n	8004114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0208 	mvn.w	r2, #8
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2204      	movs	r2, #4
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fc fa6c 	bl	80005d8 <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f975 	bl	80043f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f97b 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b10      	cmp	r3, #16
 8004120:	d122      	bne.n	8004168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b10      	cmp	r3, #16
 800412e:	d11b      	bne.n	8004168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0210 	mvn.w	r2, #16
 8004138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2208      	movs	r2, #8
 800413e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fc fa42 	bl	80005d8 <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f94b 	bl	80043f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f951 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b01      	cmp	r3, #1
 8004174:	d10e      	bne.n	8004194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b01      	cmp	r3, #1
 8004182:	d107      	bne.n	8004194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0201 	mvn.w	r2, #1
 800418c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f926 	bl	80043e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	2b80      	cmp	r3, #128	; 0x80
 80041a0:	d10e      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ac:	2b80      	cmp	r3, #128	; 0x80
 80041ae:	d107      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fb14 	bl	80047e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d10e      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d107      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f915 	bl	8004416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d10e      	bne.n	8004218 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b20      	cmp	r3, #32
 8004206:	d107      	bne.n	8004218 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0220 	mvn.w	r2, #32
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fadf 	bl	80047d6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004236:	2302      	movs	r3, #2
 8004238:	e08a      	b.n	8004350 <HAL_TIM_IC_ConfigChannel+0x130>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2202      	movs	r2, #2
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d11b      	bne.n	8004288 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	6819      	ldr	r1, [r3, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f000 f944 	bl	80044ec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 020c 	bic.w	r2, r2, #12
 8004272:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6999      	ldr	r1, [r3, #24]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	619a      	str	r2, [r3, #24]
 8004286:	e05a      	b.n	800433e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b04      	cmp	r3, #4
 800428c:	d11c      	bne.n	80042c8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	6819      	ldr	r1, [r3, #0]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f000 f97f 	bl	80045a0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699a      	ldr	r2, [r3, #24]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6999      	ldr	r1, [r3, #24]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	021a      	lsls	r2, r3, #8
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	619a      	str	r2, [r3, #24]
 80042c6:	e03a      	b.n	800433e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d11b      	bne.n	8004306 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6819      	ldr	r1, [r3, #0]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f000 f99b 	bl	8004618 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69da      	ldr	r2, [r3, #28]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 020c 	bic.w	r2, r2, #12
 80042f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69d9      	ldr	r1, [r3, #28]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	61da      	str	r2, [r3, #28]
 8004304:	e01b      	b.n	800433e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6819      	ldr	r1, [r3, #0]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f000 f9ba 	bl	800468e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004328:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69d9      	ldr	r1, [r3, #28]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	021a      	lsls	r2, r3, #8
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b0c      	cmp	r3, #12
 800436a:	d831      	bhi.n	80043d0 <HAL_TIM_ReadCapturedValue+0x78>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <HAL_TIM_ReadCapturedValue+0x1c>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	080043a9 	.word	0x080043a9
 8004378:	080043d1 	.word	0x080043d1
 800437c:	080043d1 	.word	0x080043d1
 8004380:	080043d1 	.word	0x080043d1
 8004384:	080043b3 	.word	0x080043b3
 8004388:	080043d1 	.word	0x080043d1
 800438c:	080043d1 	.word	0x080043d1
 8004390:	080043d1 	.word	0x080043d1
 8004394:	080043bd 	.word	0x080043bd
 8004398:	080043d1 	.word	0x080043d1
 800439c:	080043d1 	.word	0x080043d1
 80043a0:	080043d1 	.word	0x080043d1
 80043a4:	080043c7 	.word	0x080043c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ae:	60fb      	str	r3, [r7, #12]

      break;
 80043b0:	e00f      	b.n	80043d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	60fb      	str	r3, [r7, #12]

      break;
 80043ba:	e00a      	b.n	80043d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	60fb      	str	r3, [r7, #12]

      break;
 80043c4:	e005      	b.n	80043d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	60fb      	str	r3, [r7, #12]

      break;
 80043ce:	e000      	b.n	80043d2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80043d0:	bf00      	nop
  }

  return tmpreg;
 80043d2:	68fb      	ldr	r3, [r7, #12]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop

080043e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a29      	ldr	r2, [pc, #164]	; (80044e0 <TIM_Base_SetConfig+0xb8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00b      	beq.n	8004458 <TIM_Base_SetConfig+0x30>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004446:	d007      	beq.n	8004458 <TIM_Base_SetConfig+0x30>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a26      	ldr	r2, [pc, #152]	; (80044e4 <TIM_Base_SetConfig+0xbc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_Base_SetConfig+0x30>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a25      	ldr	r2, [pc, #148]	; (80044e8 <TIM_Base_SetConfig+0xc0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d108      	bne.n	800446a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a1c      	ldr	r2, [pc, #112]	; (80044e0 <TIM_Base_SetConfig+0xb8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00b      	beq.n	800448a <TIM_Base_SetConfig+0x62>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004478:	d007      	beq.n	800448a <TIM_Base_SetConfig+0x62>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <TIM_Base_SetConfig+0xbc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d003      	beq.n	800448a <TIM_Base_SetConfig+0x62>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a18      	ldr	r2, [pc, #96]	; (80044e8 <TIM_Base_SetConfig+0xc0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d108      	bne.n	800449c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a07      	ldr	r2, [pc, #28]	; (80044e0 <TIM_Base_SetConfig+0xb8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d103      	bne.n	80044d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	615a      	str	r2, [r3, #20]
}
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000800 	.word	0x40000800

080044ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f023 0201 	bic.w	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4a1f      	ldr	r2, [pc, #124]	; (8004594 <TIM_TI1_SetConfig+0xa8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00b      	beq.n	8004532 <TIM_TI1_SetConfig+0x46>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004520:	d007      	beq.n	8004532 <TIM_TI1_SetConfig+0x46>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4a1c      	ldr	r2, [pc, #112]	; (8004598 <TIM_TI1_SetConfig+0xac>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <TIM_TI1_SetConfig+0x46>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4a1b      	ldr	r2, [pc, #108]	; (800459c <TIM_TI1_SetConfig+0xb0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d101      	bne.n	8004536 <TIM_TI1_SetConfig+0x4a>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <TIM_TI1_SetConfig+0x4c>
 8004536:	2300      	movs	r3, #0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d008      	beq.n	800454e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f023 0303 	bic.w	r3, r3, #3
 8004542:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	e003      	b.n	8004556 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800455c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	b2db      	uxtb	r3, r3
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f023 030a 	bic.w	r3, r3, #10
 8004570:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f003 030a 	and.w	r3, r3, #10
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr
 8004594:	40012c00 	.word	0x40012c00
 8004598:	40000400 	.word	0x40000400
 800459c:	40000800 	.word	0x40000800

080045a0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f023 0210 	bic.w	r2, r3, #16
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	031b      	lsls	r3, r3, #12
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr

08004618 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f023 0303 	bic.w	r3, r3, #3
 8004644:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004654:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	b2db      	uxtb	r3, r3
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004668:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	621a      	str	r2, [r3, #32]
}
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800468e:	b480      	push	{r7}
 8004690:	b087      	sub	sp, #28
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	031b      	lsls	r3, r3, #12
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	031b      	lsls	r3, r3, #12
 80046e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004706:	b480      	push	{r7}
 8004708:	b087      	sub	sp, #28
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	2201      	movs	r2, #1
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a1a      	ldr	r2, [r3, #32]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	43db      	mvns	r3, r3
 8004728:	401a      	ands	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1a      	ldr	r2, [r3, #32]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	431a      	orrs	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	621a      	str	r2, [r3, #32]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr

0800474e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004762:	2302      	movs	r3, #2
 8004764:	e032      	b.n	80047cc <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800479e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr

080047d6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e03f      	b.n	800488c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7fc fc33 	bl	800108c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2224      	movs	r2, #36	; 0x24
 800482a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800483c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f828 	bl	8004894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004852:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004862:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004872:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80048ce:	f023 030c 	bic.w	r3, r3, #12
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	68f9      	ldr	r1, [r7, #12]
 80048d8:	430b      	orrs	r3, r1
 80048da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699a      	ldr	r2, [r3, #24]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a52      	ldr	r2, [pc, #328]	; (8004a40 <UART_SetConfig+0x1ac>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d14e      	bne.n	800499a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048fc:	f7fe ff34 	bl	8003768 <HAL_RCC_GetPCLK2Freq>
 8004900:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	009a      	lsls	r2, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	4a4a      	ldr	r2, [pc, #296]	; (8004a44 <UART_SetConfig+0x1b0>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	0119      	lsls	r1, r3, #4
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009a      	lsls	r2, r3, #2
 800492c:	441a      	add	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	fbb2 f2f3 	udiv	r2, r2, r3
 8004938:	4b42      	ldr	r3, [pc, #264]	; (8004a44 <UART_SetConfig+0x1b0>)
 800493a:	fba3 0302 	umull	r0, r3, r3, r2
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2064      	movs	r0, #100	; 0x64
 8004942:	fb00 f303 	mul.w	r3, r0, r3
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	3332      	adds	r3, #50	; 0x32
 800494c:	4a3d      	ldr	r2, [pc, #244]	; (8004a44 <UART_SetConfig+0x1b0>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004958:	4419      	add	r1, r3
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	009a      	lsls	r2, r3, #2
 8004964:	441a      	add	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004970:	4b34      	ldr	r3, [pc, #208]	; (8004a44 <UART_SetConfig+0x1b0>)
 8004972:	fba3 0302 	umull	r0, r3, r3, r2
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2064      	movs	r0, #100	; 0x64
 800497a:	fb00 f303 	mul.w	r3, r0, r3
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	3332      	adds	r3, #50	; 0x32
 8004984:	4a2f      	ldr	r2, [pc, #188]	; (8004a44 <UART_SetConfig+0x1b0>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	f003 020f 	and.w	r2, r3, #15
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	440a      	add	r2, r1
 8004996:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004998:	e04d      	b.n	8004a36 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800499a:	f7fe fed1 	bl	8003740 <HAL_RCC_GetPCLK1Freq>
 800499e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009a      	lsls	r2, r3, #2
 80049aa:	441a      	add	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b6:	4a23      	ldr	r2, [pc, #140]	; (8004a44 <UART_SetConfig+0x1b0>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	0119      	lsls	r1, r3, #4
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	009a      	lsls	r2, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80049d6:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <UART_SetConfig+0x1b0>)
 80049d8:	fba3 0302 	umull	r0, r3, r3, r2
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	2064      	movs	r0, #100	; 0x64
 80049e0:	fb00 f303 	mul.w	r3, r0, r3
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	3332      	adds	r3, #50	; 0x32
 80049ea:	4a16      	ldr	r2, [pc, #88]	; (8004a44 <UART_SetConfig+0x1b0>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049f6:	4419      	add	r1, r3
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009a      	lsls	r2, r3, #2
 8004a02:	441a      	add	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <UART_SetConfig+0x1b0>)
 8004a10:	fba3 0302 	umull	r0, r3, r3, r2
 8004a14:	095b      	lsrs	r3, r3, #5
 8004a16:	2064      	movs	r0, #100	; 0x64
 8004a18:	fb00 f303 	mul.w	r3, r0, r3
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	3332      	adds	r3, #50	; 0x32
 8004a22:	4a08      	ldr	r2, [pc, #32]	; (8004a44 <UART_SetConfig+0x1b0>)
 8004a24:	fba2 2303 	umull	r2, r3, r2, r3
 8004a28:	095b      	lsrs	r3, r3, #5
 8004a2a:	f003 020f 	and.w	r2, r3, #15
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	440a      	add	r2, r1
 8004a34:	609a      	str	r2, [r3, #8]
}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40013800 	.word	0x40013800
 8004a44:	51eb851f 	.word	0x51eb851f

08004a48 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a48:	b084      	sub	sp, #16
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	f107 0014 	add.w	r0, r7, #20
 8004a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	b004      	add	sp, #16
 8004a66:	4770      	bx	lr

08004a68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a70:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a74:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	89fb      	ldrh	r3, [r7, #14]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr

08004a96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b085      	sub	sp, #20
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a9e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004aa2:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	b21a      	sxth	r2, r3
 8004aae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	b21b      	sxth	r3, r3
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	b21b      	sxth	r3, r3
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr

08004ace <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr

08004ae6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	f107 0014 	add.w	r0, r7, #20
 8004af4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff ffa5 	bl	8004a68 <USB_EnableGlobalInt>

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b2a:	b004      	add	sp, #16
 8004b2c:	4770      	bx	lr
	...

08004b30 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b30:	b490      	push	{r4, r7}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b54:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	78db      	ldrb	r3, [r3, #3]
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d819      	bhi.n	8004b92 <USB_ActivateEndpoint+0x62>
 8004b5e:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <USB_ActivateEndpoint+0x34>)
 8004b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b64:	08004b75 	.word	0x08004b75
 8004b68:	08004b89 	.word	0x08004b89
 8004b6c:	08004b99 	.word	0x08004b99
 8004b70:	08004b7f 	.word	0x08004b7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b74:	89bb      	ldrh	r3, [r7, #12]
 8004b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b7a:	81bb      	strh	r3, [r7, #12]
      break;
 8004b7c:	e00d      	b.n	8004b9a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b7e:	89bb      	ldrh	r3, [r7, #12]
 8004b80:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b84:	81bb      	strh	r3, [r7, #12]
      break;
 8004b86:	e008      	b.n	8004b9a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b88:	89bb      	ldrh	r3, [r7, #12]
 8004b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b8e:	81bb      	strh	r3, [r7, #12]
      break;
 8004b90:	e003      	b.n	8004b9a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	73fb      	strb	r3, [r7, #15]
      break;
 8004b96:	e000      	b.n	8004b9a <USB_ActivateEndpoint+0x6a>
      break;
 8004b98:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	441a      	add	r2, r3
 8004ba4:	89bb      	ldrh	r3, [r7, #12]
 8004ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	b29c      	uxth	r4, r3
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	441a      	add	r2, r3
 8004be6:	4b8a      	ldr	r3, [pc, #552]	; (8004e10 <USB_ActivateEndpoint+0x2e0>)
 8004be8:	4323      	orrs	r3, r4
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	7b1b      	ldrb	r3, [r3, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 8112 	bne.w	8004e1c <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	785b      	ldrb	r3, [r3, #1]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d067      	beq.n	8004cd0 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c00:	687c      	ldr	r4, [r7, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	441c      	add	r4, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	4423      	add	r3, r4
 8004c14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c18:	461c      	mov	r4, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	88db      	ldrh	r3, [r3, #6]
 8004c1e:	085b      	lsrs	r3, r3, #1
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29c      	uxth	r4, r3
 8004c36:	4623      	mov	r3, r4
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d014      	beq.n	8004c6a <USB_ActivateEndpoint+0x13a>
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	b29c      	uxth	r4, r3
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	441a      	add	r2, r3
 8004c62:	4b6c      	ldr	r3, [pc, #432]	; (8004e14 <USB_ActivateEndpoint+0x2e4>)
 8004c64:	4323      	orrs	r3, r4
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	78db      	ldrb	r3, [r3, #3]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d018      	beq.n	8004ca4 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c88:	b29c      	uxth	r4, r3
 8004c8a:	f084 0320 	eor.w	r3, r4, #32
 8004c8e:	b29c      	uxth	r4, r3
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	441a      	add	r2, r3
 8004c9a:	4b5d      	ldr	r3, [pc, #372]	; (8004e10 <USB_ActivateEndpoint+0x2e0>)
 8004c9c:	4323      	orrs	r3, r4
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	8013      	strh	r3, [r2, #0]
 8004ca2:	e22b      	b.n	80050fc <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cba:	b29c      	uxth	r4, r3
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	441a      	add	r2, r3
 8004cc6:	4b52      	ldr	r3, [pc, #328]	; (8004e10 <USB_ActivateEndpoint+0x2e0>)
 8004cc8:	4323      	orrs	r3, r4
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	8013      	strh	r3, [r2, #0]
 8004cce:	e215      	b.n	80050fc <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cd0:	687c      	ldr	r4, [r7, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	441c      	add	r4, r3
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	4423      	add	r3, r4
 8004ce4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ce8:	461c      	mov	r4, r3
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	88db      	ldrh	r3, [r3, #6]
 8004cee:	085b      	lsrs	r3, r3, #1
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004cf8:	687c      	ldr	r4, [r7, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	441c      	add	r4, r3
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	4423      	add	r3, r4
 8004d0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d10:	461c      	mov	r4, r3
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10e      	bne.n	8004d38 <USB_ActivateEndpoint+0x208>
 8004d1a:	8823      	ldrh	r3, [r4, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	8023      	strh	r3, [r4, #0]
 8004d26:	8823      	ldrh	r3, [r4, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	8023      	strh	r3, [r4, #0]
 8004d36:	e02d      	b.n	8004d94 <USB_ActivateEndpoint+0x264>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b3e      	cmp	r3, #62	; 0x3e
 8004d3e:	d812      	bhi.n	8004d66 <USB_ActivateEndpoint+0x236>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <USB_ActivateEndpoint+0x22a>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	3301      	adds	r3, #1
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	029b      	lsls	r3, r3, #10
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	8023      	strh	r3, [r4, #0]
 8004d64:	e016      	b.n	8004d94 <USB_ActivateEndpoint+0x264>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <USB_ActivateEndpoint+0x250>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	60bb      	str	r3, [r7, #8]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	029b      	lsls	r3, r3, #10
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29c      	uxth	r4, r3
 8004da2:	4623      	mov	r3, r4
 8004da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d014      	beq.n	8004dd6 <USB_ActivateEndpoint+0x2a6>
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc2:	b29c      	uxth	r4, r3
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	441a      	add	r2, r3
 8004dce:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <USB_ActivateEndpoint+0x2e8>)
 8004dd0:	4323      	orrs	r3, r4
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dec:	b29c      	uxth	r4, r3
 8004dee:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004df2:	b29c      	uxth	r4, r3
 8004df4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004df8:	b29c      	uxth	r4, r3
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	441a      	add	r2, r3
 8004e04:	4b02      	ldr	r3, [pc, #8]	; (8004e10 <USB_ActivateEndpoint+0x2e0>)
 8004e06:	4323      	orrs	r3, r4
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	8013      	strh	r3, [r2, #0]
 8004e0c:	e176      	b.n	80050fc <USB_ActivateEndpoint+0x5cc>
 8004e0e:	bf00      	nop
 8004e10:	ffff8080 	.word	0xffff8080
 8004e14:	ffff80c0 	.word	0xffff80c0
 8004e18:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e32:	b29c      	uxth	r4, r3
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	4b96      	ldr	r3, [pc, #600]	; (8005098 <USB_ActivateEndpoint+0x568>)
 8004e40:	4323      	orrs	r3, r4
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004e46:	687c      	ldr	r4, [r7, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	441c      	add	r4, r3
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	4423      	add	r3, r4
 8004e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e5e:	461c      	mov	r4, r3
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	891b      	ldrh	r3, [r3, #8]
 8004e64:	085b      	lsrs	r3, r3, #1
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	8023      	strh	r3, [r4, #0]
 8004e6e:	687c      	ldr	r4, [r7, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	441c      	add	r4, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	4423      	add	r3, r4
 8004e82:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004e86:	461c      	mov	r4, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	895b      	ldrh	r3, [r3, #10]
 8004e8c:	085b      	lsrs	r3, r3, #1
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	785b      	ldrb	r3, [r3, #1]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f040 8088 	bne.w	8004fb0 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b29c      	uxth	r4, r3
 8004eae:	4623      	mov	r3, r4
 8004eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d014      	beq.n	8004ee2 <USB_ActivateEndpoint+0x3b2>
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	b29c      	uxth	r4, r3
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	4b70      	ldr	r3, [pc, #448]	; (800509c <USB_ActivateEndpoint+0x56c>)
 8004edc:	4323      	orrs	r3, r4
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29c      	uxth	r4, r3
 8004ef0:	4623      	mov	r3, r4
 8004ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d014      	beq.n	8004f24 <USB_ActivateEndpoint+0x3f4>
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f10:	b29c      	uxth	r4, r3
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	441a      	add	r2, r3
 8004f1c:	4b60      	ldr	r3, [pc, #384]	; (80050a0 <USB_ActivateEndpoint+0x570>)
 8004f1e:	4323      	orrs	r3, r4
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3a:	b29c      	uxth	r4, r3
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	441a      	add	r2, r3
 8004f46:	4b56      	ldr	r3, [pc, #344]	; (80050a0 <USB_ActivateEndpoint+0x570>)
 8004f48:	4323      	orrs	r3, r4
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f64:	b29c      	uxth	r4, r3
 8004f66:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004f6a:	b29c      	uxth	r4, r3
 8004f6c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004f70:	b29c      	uxth	r4, r3
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	441a      	add	r2, r3
 8004f7c:	4b49      	ldr	r3, [pc, #292]	; (80050a4 <USB_ActivateEndpoint+0x574>)
 8004f7e:	4323      	orrs	r3, r4
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f9a:	b29c      	uxth	r4, r3
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	441a      	add	r2, r3
 8004fa6:	4b3f      	ldr	r3, [pc, #252]	; (80050a4 <USB_ActivateEndpoint+0x574>)
 8004fa8:	4323      	orrs	r3, r4
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	8013      	strh	r3, [r2, #0]
 8004fae:	e0a5      	b.n	80050fc <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	b29c      	uxth	r4, r3
 8004fbe:	4623      	mov	r3, r4
 8004fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d014      	beq.n	8004ff2 <USB_ActivateEndpoint+0x4c2>
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	b29c      	uxth	r4, r3
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	441a      	add	r2, r3
 8004fea:	4b2c      	ldr	r3, [pc, #176]	; (800509c <USB_ActivateEndpoint+0x56c>)
 8004fec:	4323      	orrs	r3, r4
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b29c      	uxth	r4, r3
 8005000:	4623      	mov	r3, r4
 8005002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d014      	beq.n	8005034 <USB_ActivateEndpoint+0x504>
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005020:	b29c      	uxth	r4, r3
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	4b1c      	ldr	r3, [pc, #112]	; (80050a0 <USB_ActivateEndpoint+0x570>)
 800502e:	4323      	orrs	r3, r4
 8005030:	b29b      	uxth	r3, r3
 8005032:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504a:	b29c      	uxth	r4, r3
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	441a      	add	r2, r3
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <USB_ActivateEndpoint+0x56c>)
 8005058:	4323      	orrs	r3, r4
 800505a:	b29b      	uxth	r3, r3
 800505c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	78db      	ldrb	r3, [r3, #3]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d020      	beq.n	80050a8 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507c:	b29c      	uxth	r4, r3
 800507e:	f084 0320 	eor.w	r3, r4, #32
 8005082:	b29c      	uxth	r4, r3
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	441a      	add	r2, r3
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <USB_ActivateEndpoint+0x574>)
 8005090:	4323      	orrs	r3, r4
 8005092:	b29b      	uxth	r3, r3
 8005094:	8013      	strh	r3, [r2, #0]
 8005096:	e01c      	b.n	80050d2 <USB_ActivateEndpoint+0x5a2>
 8005098:	ffff8180 	.word	0xffff8180
 800509c:	ffffc080 	.word	0xffffc080
 80050a0:	ffff80c0 	.word	0xffff80c0
 80050a4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050be:	b29c      	uxth	r4, r3
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	441a      	add	r2, r3
 80050ca:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <USB_ActivateEndpoint+0x5d8>)
 80050cc:	4323      	orrs	r3, r4
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e8:	b29c      	uxth	r4, r3
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	441a      	add	r2, r3
 80050f4:	4b04      	ldr	r3, [pc, #16]	; (8005108 <USB_ActivateEndpoint+0x5d8>)
 80050f6:	4323      	orrs	r3, r4
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bc90      	pop	{r4, r7}
 8005106:	4770      	bx	lr
 8005108:	ffff8080 	.word	0xffff8080

0800510c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800510c:	b490      	push	{r4, r7}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	7b1b      	ldrb	r3, [r3, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d171      	bne.n	8005202 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	785b      	ldrb	r3, [r3, #1]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d036      	beq.n	8005194 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29c      	uxth	r4, r3
 8005134:	4623      	mov	r3, r4
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d014      	beq.n	8005168 <USB_DeactivateEndpoint+0x5c>
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005154:	b29c      	uxth	r4, r3
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	441a      	add	r2, r3
 8005160:	4b6b      	ldr	r3, [pc, #428]	; (8005310 <USB_DeactivateEndpoint+0x204>)
 8005162:	4323      	orrs	r3, r4
 8005164:	b29b      	uxth	r3, r3
 8005166:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	b29b      	uxth	r3, r3
 8005176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800517e:	b29c      	uxth	r4, r3
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	441a      	add	r2, r3
 800518a:	4b62      	ldr	r3, [pc, #392]	; (8005314 <USB_DeactivateEndpoint+0x208>)
 800518c:	4323      	orrs	r3, r4
 800518e:	b29b      	uxth	r3, r3
 8005190:	8013      	strh	r3, [r2, #0]
 8005192:	e144      	b.n	800541e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29c      	uxth	r4, r3
 80051a2:	4623      	mov	r3, r4
 80051a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d014      	beq.n	80051d6 <USB_DeactivateEndpoint+0xca>
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c2:	b29c      	uxth	r4, r3
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	441a      	add	r2, r3
 80051ce:	4b52      	ldr	r3, [pc, #328]	; (8005318 <USB_DeactivateEndpoint+0x20c>)
 80051d0:	4323      	orrs	r3, r4
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ec:	b29c      	uxth	r4, r3
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	441a      	add	r2, r3
 80051f8:	4b46      	ldr	r3, [pc, #280]	; (8005314 <USB_DeactivateEndpoint+0x208>)
 80051fa:	4323      	orrs	r3, r4
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	8013      	strh	r3, [r2, #0]
 8005200:	e10d      	b.n	800541e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	785b      	ldrb	r3, [r3, #1]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f040 8088 	bne.w	800531c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	b29c      	uxth	r4, r3
 800521a:	4623      	mov	r3, r4
 800521c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d014      	beq.n	800524e <USB_DeactivateEndpoint+0x142>
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b29b      	uxth	r3, r3
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	b29c      	uxth	r4, r3
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	441a      	add	r2, r3
 8005246:	4b34      	ldr	r3, [pc, #208]	; (8005318 <USB_DeactivateEndpoint+0x20c>)
 8005248:	4323      	orrs	r3, r4
 800524a:	b29b      	uxth	r3, r3
 800524c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	b29c      	uxth	r4, r3
 800525c:	4623      	mov	r3, r4
 800525e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d014      	beq.n	8005290 <USB_DeactivateEndpoint+0x184>
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527c:	b29c      	uxth	r4, r3
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	441a      	add	r2, r3
 8005288:	4b21      	ldr	r3, [pc, #132]	; (8005310 <USB_DeactivateEndpoint+0x204>)
 800528a:	4323      	orrs	r3, r4
 800528c:	b29b      	uxth	r3, r3
 800528e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	b29c      	uxth	r4, r3
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	441a      	add	r2, r3
 80052b2:	4b17      	ldr	r3, [pc, #92]	; (8005310 <USB_DeactivateEndpoint+0x204>)
 80052b4:	4323      	orrs	r3, r4
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d0:	b29c      	uxth	r4, r3
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	441a      	add	r2, r3
 80052dc:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <USB_DeactivateEndpoint+0x208>)
 80052de:	4323      	orrs	r3, r4
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fa:	b29c      	uxth	r4, r3
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	441a      	add	r2, r3
 8005306:	4b03      	ldr	r3, [pc, #12]	; (8005314 <USB_DeactivateEndpoint+0x208>)
 8005308:	4323      	orrs	r3, r4
 800530a:	b29b      	uxth	r3, r3
 800530c:	8013      	strh	r3, [r2, #0]
 800530e:	e086      	b.n	800541e <USB_DeactivateEndpoint+0x312>
 8005310:	ffff80c0 	.word	0xffff80c0
 8005314:	ffff8080 	.word	0xffff8080
 8005318:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29c      	uxth	r4, r3
 800532a:	4623      	mov	r3, r4
 800532c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d014      	beq.n	800535e <USB_DeactivateEndpoint+0x252>
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534a:	b29c      	uxth	r4, r3
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	441a      	add	r2, r3
 8005356:	4b35      	ldr	r3, [pc, #212]	; (800542c <USB_DeactivateEndpoint+0x320>)
 8005358:	4323      	orrs	r3, r4
 800535a:	b29b      	uxth	r3, r3
 800535c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29c      	uxth	r4, r3
 800536c:	4623      	mov	r3, r4
 800536e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d014      	beq.n	80053a0 <USB_DeactivateEndpoint+0x294>
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538c:	b29c      	uxth	r4, r3
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	441a      	add	r2, r3
 8005398:	4b25      	ldr	r3, [pc, #148]	; (8005430 <USB_DeactivateEndpoint+0x324>)
 800539a:	4323      	orrs	r3, r4
 800539c:	b29b      	uxth	r3, r3
 800539e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	b29c      	uxth	r4, r3
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	441a      	add	r2, r3
 80053c2:	4b1a      	ldr	r3, [pc, #104]	; (800542c <USB_DeactivateEndpoint+0x320>)
 80053c4:	4323      	orrs	r3, r4
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e0:	b29c      	uxth	r4, r3
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	441a      	add	r2, r3
 80053ec:	4b11      	ldr	r3, [pc, #68]	; (8005434 <USB_DeactivateEndpoint+0x328>)
 80053ee:	4323      	orrs	r3, r4
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	b29b      	uxth	r3, r3
 8005402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540a:	b29c      	uxth	r4, r3
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	441a      	add	r2, r3
 8005416:	4b07      	ldr	r3, [pc, #28]	; (8005434 <USB_DeactivateEndpoint+0x328>)
 8005418:	4323      	orrs	r3, r4
 800541a:	b29b      	uxth	r3, r3
 800541c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bc90      	pop	{r4, r7}
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	ffffc080 	.word	0xffffc080
 8005430:	ffff80c0 	.word	0xffff80c0
 8005434:	ffff8080 	.word	0xffff8080

08005438 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005438:	b590      	push	{r4, r7, lr}
 800543a:	b08d      	sub	sp, #52	; 0x34
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	785b      	ldrb	r3, [r3, #1]
 8005446:	2b01      	cmp	r3, #1
 8005448:	f040 8160 	bne.w	800570c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	699a      	ldr	r2, [r3, #24]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	429a      	cmp	r2, r3
 8005456:	d909      	bls.n	800546c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	1ad2      	subs	r2, r2, r3
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	619a      	str	r2, [r3, #24]
 800546a:	e005      	b.n	8005478 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2200      	movs	r2, #0
 8005476:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	7b1b      	ldrb	r3, [r3, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d119      	bne.n	80054b4 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	6959      	ldr	r1, [r3, #20]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	88da      	ldrh	r2, [r3, #6]
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	b29b      	uxth	r3, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fba2 	bl	8005bd6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005492:	687c      	ldr	r4, [r7, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800549a:	b29b      	uxth	r3, r3
 800549c:	441c      	add	r4, r3
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	4423      	add	r3, r4
 80054a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054aa:	461c      	mov	r4, r3
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8023      	strh	r3, [r4, #0]
 80054b2:	e10f      	b.n	80056d4 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d065      	beq.n	8005596 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054ca:	687c      	ldr	r4, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d148      	bne.n	8005566 <USB_EPStartXfer+0x12e>
 80054d4:	687c      	ldr	r4, [r7, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054dc:	b29b      	uxth	r3, r3
 80054de:	441c      	add	r4, r3
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	4423      	add	r3, r4
 80054e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054ec:	461c      	mov	r4, r3
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10e      	bne.n	8005512 <USB_EPStartXfer+0xda>
 80054f4:	8823      	ldrh	r3, [r4, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	8023      	strh	r3, [r4, #0]
 8005500:	8823      	ldrh	r3, [r4, #0]
 8005502:	b29b      	uxth	r3, r3
 8005504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550c:	b29b      	uxth	r3, r3
 800550e:	8023      	strh	r3, [r4, #0]
 8005510:	e03d      	b.n	800558e <USB_EPStartXfer+0x156>
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	2b3e      	cmp	r3, #62	; 0x3e
 8005516:	d810      	bhi.n	800553a <USB_EPStartXfer+0x102>
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <USB_EPStartXfer+0xf6>
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	3301      	adds	r3, #1
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	b29b      	uxth	r3, r3
 8005532:	029b      	lsls	r3, r3, #10
 8005534:	b29b      	uxth	r3, r3
 8005536:	8023      	strh	r3, [r4, #0]
 8005538:	e029      	b.n	800558e <USB_EPStartXfer+0x156>
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2b00      	cmp	r3, #0
 8005548:	d102      	bne.n	8005550 <USB_EPStartXfer+0x118>
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	3b01      	subs	r3, #1
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	b29b      	uxth	r3, r3
 8005554:	029b      	lsls	r3, r3, #10
 8005556:	b29b      	uxth	r3, r3
 8005558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800555c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005560:	b29b      	uxth	r3, r3
 8005562:	8023      	strh	r3, [r4, #0]
 8005564:	e013      	b.n	800558e <USB_EPStartXfer+0x156>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	785b      	ldrb	r3, [r3, #1]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d10f      	bne.n	800558e <USB_EPStartXfer+0x156>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005574:	b29b      	uxth	r3, r3
 8005576:	441c      	add	r4, r3
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	4423      	add	r3, r4
 8005580:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	895b      	ldrh	r3, [r3, #10]
 8005592:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005594:	e063      	b.n	800565e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	785b      	ldrb	r3, [r3, #1]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d148      	bne.n	8005630 <USB_EPStartXfer+0x1f8>
 800559e:	687c      	ldr	r4, [r7, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	441c      	add	r4, r3
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	4423      	add	r3, r4
 80055b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055b6:	461c      	mov	r4, r3
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10e      	bne.n	80055dc <USB_EPStartXfer+0x1a4>
 80055be:	8823      	ldrh	r3, [r4, #0]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	8023      	strh	r3, [r4, #0]
 80055ca:	8823      	ldrh	r3, [r4, #0]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	8023      	strh	r3, [r4, #0]
 80055da:	e03d      	b.n	8005658 <USB_EPStartXfer+0x220>
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	2b3e      	cmp	r3, #62	; 0x3e
 80055e0:	d810      	bhi.n	8005604 <USB_EPStartXfer+0x1cc>
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	085b      	lsrs	r3, r3, #1
 80055e6:	623b      	str	r3, [r7, #32]
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <USB_EPStartXfer+0x1c0>
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	3301      	adds	r3, #1
 80055f6:	623b      	str	r3, [r7, #32]
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	029b      	lsls	r3, r3, #10
 80055fe:	b29b      	uxth	r3, r3
 8005600:	8023      	strh	r3, [r4, #0]
 8005602:	e029      	b.n	8005658 <USB_EPStartXfer+0x220>
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	623b      	str	r3, [r7, #32]
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	f003 031f 	and.w	r3, r3, #31
 8005610:	2b00      	cmp	r3, #0
 8005612:	d102      	bne.n	800561a <USB_EPStartXfer+0x1e2>
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	3b01      	subs	r3, #1
 8005618:	623b      	str	r3, [r7, #32]
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	b29b      	uxth	r3, r3
 800561e:	029b      	lsls	r3, r3, #10
 8005620:	b29b      	uxth	r3, r3
 8005622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562a:	b29b      	uxth	r3, r3
 800562c:	8023      	strh	r3, [r4, #0]
 800562e:	e013      	b.n	8005658 <USB_EPStartXfer+0x220>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d10f      	bne.n	8005658 <USB_EPStartXfer+0x220>
 8005638:	687c      	ldr	r4, [r7, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005640:	b29b      	uxth	r3, r3
 8005642:	441c      	add	r4, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	4423      	add	r3, r4
 800564c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005650:	461c      	mov	r4, r3
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	b29b      	uxth	r3, r3
 8005656:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	891b      	ldrh	r3, [r3, #8]
 800565c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6959      	ldr	r1, [r3, #20]
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	b29b      	uxth	r3, r3
 8005666:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fab4 	bl	8005bd6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d115      	bne.n	80056a2 <USB_EPStartXfer+0x26a>
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	b29b      	uxth	r3, r3
 8005684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568c:	b29c      	uxth	r4, r3
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	441a      	add	r2, r3
 8005698:	4b9a      	ldr	r3, [pc, #616]	; (8005904 <USB_EPStartXfer+0x4cc>)
 800569a:	4323      	orrs	r3, r4
 800569c:	b29b      	uxth	r3, r3
 800569e:	8013      	strh	r3, [r2, #0]
 80056a0:	e018      	b.n	80056d4 <USB_EPStartXfer+0x29c>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	785b      	ldrb	r3, [r3, #1]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d114      	bne.n	80056d4 <USB_EPStartXfer+0x29c>
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c0:	b29c      	uxth	r4, r3
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	441a      	add	r2, r3
 80056cc:	4b8e      	ldr	r3, [pc, #568]	; (8005908 <USB_EPStartXfer+0x4d0>)
 80056ce:	4323      	orrs	r3, r4
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ea:	b29c      	uxth	r4, r3
 80056ec:	f084 0310 	eor.w	r3, r4, #16
 80056f0:	b29c      	uxth	r4, r3
 80056f2:	f084 0320 	eor.w	r3, r4, #32
 80056f6:	b29c      	uxth	r4, r3
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	441a      	add	r2, r3
 8005702:	4b82      	ldr	r3, [pc, #520]	; (800590c <USB_EPStartXfer+0x4d4>)
 8005704:	4323      	orrs	r3, r4
 8005706:	b29b      	uxth	r3, r3
 8005708:	8013      	strh	r3, [r2, #0]
 800570a:	e146      	b.n	800599a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	699a      	ldr	r2, [r3, #24]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	429a      	cmp	r2, r3
 8005716:	d909      	bls.n	800572c <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	1ad2      	subs	r2, r2, r3
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	619a      	str	r2, [r3, #24]
 800572a:	e005      	b.n	8005738 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2200      	movs	r2, #0
 8005736:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	7b1b      	ldrb	r3, [r3, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d148      	bne.n	80057d2 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005740:	687c      	ldr	r4, [r7, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005748:	b29b      	uxth	r3, r3
 800574a:	441c      	add	r4, r3
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	4423      	add	r3, r4
 8005754:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005758:	461c      	mov	r4, r3
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10e      	bne.n	800577e <USB_EPStartXfer+0x346>
 8005760:	8823      	ldrh	r3, [r4, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005768:	b29b      	uxth	r3, r3
 800576a:	8023      	strh	r3, [r4, #0]
 800576c:	8823      	ldrh	r3, [r4, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005778:	b29b      	uxth	r3, r3
 800577a:	8023      	strh	r3, [r4, #0]
 800577c:	e0f2      	b.n	8005964 <USB_EPStartXfer+0x52c>
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	2b3e      	cmp	r3, #62	; 0x3e
 8005782:	d810      	bhi.n	80057a6 <USB_EPStartXfer+0x36e>
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <USB_EPStartXfer+0x362>
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	3301      	adds	r3, #1
 8005798:	61fb      	str	r3, [r7, #28]
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	b29b      	uxth	r3, r3
 800579e:	029b      	lsls	r3, r3, #10
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	8023      	strh	r3, [r4, #0]
 80057a4:	e0de      	b.n	8005964 <USB_EPStartXfer+0x52c>
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	095b      	lsrs	r3, r3, #5
 80057aa:	61fb      	str	r3, [r7, #28]
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d102      	bne.n	80057bc <USB_EPStartXfer+0x384>
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	61fb      	str	r3, [r7, #28]
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	029b      	lsls	r3, r3, #10
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	8023      	strh	r3, [r4, #0]
 80057d0:	e0c8      	b.n	8005964 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	785b      	ldrb	r3, [r3, #1]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d148      	bne.n	800586c <USB_EPStartXfer+0x434>
 80057da:	687c      	ldr	r4, [r7, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	441c      	add	r4, r3
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	4423      	add	r3, r4
 80057ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057f2:	461c      	mov	r4, r3
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10e      	bne.n	8005818 <USB_EPStartXfer+0x3e0>
 80057fa:	8823      	ldrh	r3, [r4, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005802:	b29b      	uxth	r3, r3
 8005804:	8023      	strh	r3, [r4, #0]
 8005806:	8823      	ldrh	r3, [r4, #0]
 8005808:	b29b      	uxth	r3, r3
 800580a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005812:	b29b      	uxth	r3, r3
 8005814:	8023      	strh	r3, [r4, #0]
 8005816:	e03d      	b.n	8005894 <USB_EPStartXfer+0x45c>
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	2b3e      	cmp	r3, #62	; 0x3e
 800581c:	d810      	bhi.n	8005840 <USB_EPStartXfer+0x408>
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	085b      	lsrs	r3, r3, #1
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <USB_EPStartXfer+0x3fc>
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	3301      	adds	r3, #1
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	b29b      	uxth	r3, r3
 8005838:	029b      	lsls	r3, r3, #10
 800583a:	b29b      	uxth	r3, r3
 800583c:	8023      	strh	r3, [r4, #0]
 800583e:	e029      	b.n	8005894 <USB_EPStartXfer+0x45c>
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <USB_EPStartXfer+0x41e>
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	3b01      	subs	r3, #1
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	b29b      	uxth	r3, r3
 800585a:	029b      	lsls	r3, r3, #10
 800585c:	b29b      	uxth	r3, r3
 800585e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005866:	b29b      	uxth	r3, r3
 8005868:	8023      	strh	r3, [r4, #0]
 800586a:	e013      	b.n	8005894 <USB_EPStartXfer+0x45c>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	785b      	ldrb	r3, [r3, #1]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d10f      	bne.n	8005894 <USB_EPStartXfer+0x45c>
 8005874:	687c      	ldr	r4, [r7, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587c:	b29b      	uxth	r3, r3
 800587e:	441c      	add	r4, r3
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	4423      	add	r3, r4
 8005888:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800588c:	461c      	mov	r4, r3
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	b29b      	uxth	r3, r3
 8005892:	8023      	strh	r3, [r4, #0]
 8005894:	687c      	ldr	r4, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	785b      	ldrb	r3, [r3, #1]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d14e      	bne.n	800593c <USB_EPStartXfer+0x504>
 800589e:	687c      	ldr	r4, [r7, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	441c      	add	r4, r3
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	4423      	add	r3, r4
 80058b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058b6:	461c      	mov	r4, r3
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10e      	bne.n	80058dc <USB_EPStartXfer+0x4a4>
 80058be:	8823      	ldrh	r3, [r4, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	8023      	strh	r3, [r4, #0]
 80058ca:	8823      	ldrh	r3, [r4, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	8023      	strh	r3, [r4, #0]
 80058da:	e043      	b.n	8005964 <USB_EPStartXfer+0x52c>
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	2b3e      	cmp	r3, #62	; 0x3e
 80058e0:	d816      	bhi.n	8005910 <USB_EPStartXfer+0x4d8>
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	085b      	lsrs	r3, r3, #1
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <USB_EPStartXfer+0x4c0>
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	3301      	adds	r3, #1
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	029b      	lsls	r3, r3, #10
 80058fe:	b29b      	uxth	r3, r3
 8005900:	8023      	strh	r3, [r4, #0]
 8005902:	e02f      	b.n	8005964 <USB_EPStartXfer+0x52c>
 8005904:	ffff80c0 	.word	0xffff80c0
 8005908:	ffffc080 	.word	0xffffc080
 800590c:	ffff8080 	.word	0xffff8080
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	f003 031f 	and.w	r3, r3, #31
 800591c:	2b00      	cmp	r3, #0
 800591e:	d102      	bne.n	8005926 <USB_EPStartXfer+0x4ee>
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	3b01      	subs	r3, #1
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	b29b      	uxth	r3, r3
 800592a:	029b      	lsls	r3, r3, #10
 800592c:	b29b      	uxth	r3, r3
 800592e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005936:	b29b      	uxth	r3, r3
 8005938:	8023      	strh	r3, [r4, #0]
 800593a:	e013      	b.n	8005964 <USB_EPStartXfer+0x52c>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d10f      	bne.n	8005964 <USB_EPStartXfer+0x52c>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800594a:	b29b      	uxth	r3, r3
 800594c:	441c      	add	r4, r3
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	4423      	add	r3, r4
 8005956:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800595a:	613b      	str	r3, [r7, #16]
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	b29a      	uxth	r2, r3
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597a:	b29c      	uxth	r4, r3
 800597c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005980:	b29c      	uxth	r4, r3
 8005982:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005986:	b29c      	uxth	r4, r3
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	441a      	add	r2, r3
 8005992:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <USB_EPStartXfer+0x56c>)
 8005994:	4323      	orrs	r3, r4
 8005996:	b29b      	uxth	r3, r3
 8005998:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3734      	adds	r7, #52	; 0x34
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd90      	pop	{r4, r7, pc}
 80059a4:	ffff8080 	.word	0xffff8080

080059a8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059a8:	b490      	push	{r4, r7}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d018      	beq.n	80059ec <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d0:	b29c      	uxth	r4, r3
 80059d2:	f084 0310 	eor.w	r3, r4, #16
 80059d6:	b29c      	uxth	r4, r3
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	4b11      	ldr	r3, [pc, #68]	; (8005a28 <USB_EPSetStall+0x80>)
 80059e4:	4323      	orrs	r3, r4
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	8013      	strh	r3, [r2, #0]
 80059ea:	e017      	b.n	8005a1c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	b29c      	uxth	r4, r3
 8005a04:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005a08:	b29c      	uxth	r4, r3
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	441a      	add	r2, r3
 8005a14:	4b04      	ldr	r3, [pc, #16]	; (8005a28 <USB_EPSetStall+0x80>)
 8005a16:	4323      	orrs	r3, r4
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc90      	pop	{r4, r7}
 8005a26:	4770      	bx	lr
 8005a28:	ffff8080 	.word	0xffff8080

08005a2c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a2c:	b490      	push	{r4, r7}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	7b1b      	ldrb	r3, [r3, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d17d      	bne.n	8005b3a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	785b      	ldrb	r3, [r3, #1]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d03d      	beq.n	8005ac2 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29c      	uxth	r4, r3
 8005a54:	4623      	mov	r3, r4
 8005a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d014      	beq.n	8005a88 <USB_EPClearStall+0x5c>
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a74:	b29c      	uxth	r4, r3
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	441a      	add	r2, r3
 8005a80:	4b31      	ldr	r3, [pc, #196]	; (8005b48 <USB_EPClearStall+0x11c>)
 8005a82:	4323      	orrs	r3, r4
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	78db      	ldrb	r3, [r3, #3]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d054      	beq.n	8005b3a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa6:	b29c      	uxth	r4, r3
 8005aa8:	f084 0320 	eor.w	r3, r4, #32
 8005aac:	b29c      	uxth	r4, r3
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	441a      	add	r2, r3
 8005ab8:	4b24      	ldr	r3, [pc, #144]	; (8005b4c <USB_EPClearStall+0x120>)
 8005aba:	4323      	orrs	r3, r4
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	8013      	strh	r3, [r2, #0]
 8005ac0:	e03b      	b.n	8005b3a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	b29c      	uxth	r4, r3
 8005ad0:	4623      	mov	r3, r4
 8005ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d014      	beq.n	8005b04 <USB_EPClearStall+0xd8>
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af0:	b29c      	uxth	r4, r3
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	441a      	add	r2, r3
 8005afc:	4b14      	ldr	r3, [pc, #80]	; (8005b50 <USB_EPClearStall+0x124>)
 8005afe:	4323      	orrs	r3, r4
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1a:	b29c      	uxth	r4, r3
 8005b1c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005b20:	b29c      	uxth	r4, r3
 8005b22:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005b26:	b29c      	uxth	r4, r3
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	441a      	add	r2, r3
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <USB_EPClearStall+0x120>)
 8005b34:	4323      	orrs	r3, r4
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc90      	pop	{r4, r7}
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	ffff80c0 	.word	0xffff80c0
 8005b4c:	ffff8080 	.word	0xffff8080
 8005b50:	ffffc080 	.word	0xffffc080

08005b54 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d103      	bne.n	8005b6e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2280      	movs	r2, #128	; 0x80
 8005b6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr

08005b7a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bc80      	pop	{r7}
 8005b8c:	4770      	bx	lr

08005b8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr

08005ba2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr

08005bc0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr

08005bd6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b08d      	sub	sp, #52	; 0x34
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	4611      	mov	r1, r2
 8005be2:	461a      	mov	r2, r3
 8005be4:	460b      	mov	r3, r1
 8005be6:	80fb      	strh	r3, [r7, #6]
 8005be8:	4613      	mov	r3, r2
 8005bea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005bec:	88bb      	ldrh	r3, [r7, #4]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005bfc:	88fb      	ldrh	r3, [r7, #6]
 8005bfe:	005a      	lsls	r2, r3, #1
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c0e:	e01e      	b.n	8005c4e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	3301      	adds	r3, #1
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c38:	3302      	adds	r3, #2
 8005c3a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	3302      	adds	r3, #2
 8005c40:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	3301      	adds	r3, #1
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1dd      	bne.n	8005c10 <USB_WritePMA+0x3a>
  }
}
 8005c54:	bf00      	nop
 8005c56:	3734      	adds	r7, #52	; 0x34
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bc80      	pop	{r7}
 8005c5c:	4770      	bx	lr

08005c5e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b08b      	sub	sp, #44	; 0x2c
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	4611      	mov	r1, r2
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	80fb      	strh	r3, [r7, #6]
 8005c70:	4613      	mov	r3, r2
 8005c72:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005c74:	88bb      	ldrh	r3, [r7, #4]
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005c84:	88fb      	ldrh	r3, [r7, #6]
 8005c86:	005a      	lsls	r2, r3, #1
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c90:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
 8005c96:	e01b      	b.n	8005cd0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	3302      	adds	r3, #2
 8005ca4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	0a1b      	lsrs	r3, r3, #8
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	3302      	adds	r3, #2
 8005cc8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1e0      	bne.n	8005c98 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005cd6:	88bb      	ldrh	r3, [r7, #4]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	701a      	strb	r2, [r3, #0]
  }
}
 8005cf2:	bf00      	nop
 8005cf4:	372c      	adds	r7, #44	; 0x2c
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bc80      	pop	{r7}
 8005cfa:	4770      	bx	lr

08005cfc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	7c1b      	ldrb	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d115      	bne.n	8005d40 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d18:	2202      	movs	r2, #2
 8005d1a:	2181      	movs	r1, #129	; 0x81
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f001 ffd6 	bl	8007cce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	2101      	movs	r1, #1
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 ffcc 	bl	8007cce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005d3e:	e012      	b.n	8005d66 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d40:	2340      	movs	r3, #64	; 0x40
 8005d42:	2202      	movs	r2, #2
 8005d44:	2181      	movs	r1, #129	; 0x81
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f001 ffc1 	bl	8007cce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d52:	2340      	movs	r3, #64	; 0x40
 8005d54:	2202      	movs	r2, #2
 8005d56:	2101      	movs	r1, #1
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 ffb8 	bl	8007cce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d66:	2308      	movs	r3, #8
 8005d68:	2203      	movs	r2, #3
 8005d6a:	2182      	movs	r1, #130	; 0x82
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f001 ffae 	bl	8007cce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d7c:	f002 f8c8 	bl	8007f10 <USBD_static_malloc>
 8005d80:	4602      	mov	r2, r0
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005d92:	2301      	movs	r3, #1
 8005d94:	73fb      	strb	r3, [r7, #15]
 8005d96:	e026      	b.n	8005de6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d9e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	7c1b      	ldrb	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dcc:	2101      	movs	r1, #1
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f002 f867 	bl	8007ea2 <USBD_LL_PrepareReceive>
 8005dd4:	e007      	b.n	8005de6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ddc:	2340      	movs	r3, #64	; 0x40
 8005dde:	2101      	movs	r1, #1
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f002 f85e 	bl	8007ea2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005e00:	2181      	movs	r1, #129	; 0x81
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f001 ff89 	bl	8007d1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005e0e:	2101      	movs	r1, #1
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 ff82 	bl	8007d1a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005e1e:	2182      	movs	r1, #130	; 0x82
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f001 ff7a 	bl	8007d1a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00e      	beq.n	8005e54 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e46:	4618      	mov	r0, r3
 8005e48:	f002 f86e 	bl	8007f28 <USBD_static_free>
    pdev->pClassData = NULL;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d039      	beq.n	8005efc <USBD_CDC_Setup+0x9e>
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d17c      	bne.n	8005f86 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	88db      	ldrh	r3, [r3, #6]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d029      	beq.n	8005ee8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	b25b      	sxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	da11      	bge.n	8005ec2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005eaa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	88d2      	ldrh	r2, [r2, #6]
 8005eb0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005eb2:	6939      	ldr	r1, [r7, #16]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	88db      	ldrh	r3, [r3, #6]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f001 f9f6 	bl	80072ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005ec0:	e068      	b.n	8005f94 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	785a      	ldrb	r2, [r3, #1]
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	88db      	ldrh	r3, [r3, #6]
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005ed8:	6939      	ldr	r1, [r7, #16]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	88db      	ldrh	r3, [r3, #6]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f001 fa11 	bl	8007308 <USBD_CtlPrepareRx>
      break;
 8005ee6:	e055      	b.n	8005f94 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	7850      	ldrb	r0, [r2, #1]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	4798      	blx	r3
      break;
 8005efa:	e04b      	b.n	8005f94 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	785b      	ldrb	r3, [r3, #1]
 8005f00:	2b0a      	cmp	r3, #10
 8005f02:	d017      	beq.n	8005f34 <USBD_CDC_Setup+0xd6>
 8005f04:	2b0b      	cmp	r3, #11
 8005f06:	d029      	beq.n	8005f5c <USBD_CDC_Setup+0xfe>
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d133      	bne.n	8005f74 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d107      	bne.n	8005f26 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005f16:	f107 030c 	add.w	r3, r7, #12
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 f9c4 	bl	80072ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f24:	e02e      	b.n	8005f84 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 f955 	bl	80071d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	75fb      	strb	r3, [r7, #23]
          break;
 8005f32:	e027      	b.n	8005f84 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d107      	bne.n	8005f4e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f3e:	f107 030f 	add.w	r3, r7, #15
 8005f42:	2201      	movs	r2, #1
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f001 f9b0 	bl	80072ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f4c:	e01a      	b.n	8005f84 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f001 f941 	bl	80071d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f56:	2302      	movs	r3, #2
 8005f58:	75fb      	strb	r3, [r7, #23]
          break;
 8005f5a:	e013      	b.n	8005f84 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d00d      	beq.n	8005f82 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 f935 	bl	80071d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005f72:	e006      	b.n	8005f82 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005f74:	6839      	ldr	r1, [r7, #0]
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f001 f92e 	bl	80071d8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	75fb      	strb	r3, [r7, #23]
          break;
 8005f80:	e000      	b.n	8005f84 <USBD_CDC_Setup+0x126>
          break;
 8005f82:	bf00      	nop
      }
      break;
 8005f84:	e006      	b.n	8005f94 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 f925 	bl	80071d8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f8e:	2302      	movs	r3, #2
 8005f90:	75fb      	strb	r3, [r7, #23]
      break;
 8005f92:	bf00      	nop
  }

  return ret;
 8005f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fb8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d037      	beq.n	8006034 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005fc4:	78fa      	ldrb	r2, [r7, #3]
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	331c      	adds	r3, #28
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d026      	beq.n	8006028 <USBD_CDC_DataIn+0x8a>
 8005fda:	78fa      	ldrb	r2, [r7, #3]
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	331c      	adds	r3, #28
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	78fa      	ldrb	r2, [r7, #3]
 8005fee:	68b9      	ldr	r1, [r7, #8]
 8005ff0:	0152      	lsls	r2, r2, #5
 8005ff2:	440a      	add	r2, r1
 8005ff4:	3238      	adds	r2, #56	; 0x38
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ffc:	fb02 f201 	mul.w	r2, r2, r1
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d110      	bne.n	8006028 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006006:	78fa      	ldrb	r2, [r7, #3]
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	331c      	adds	r3, #28
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800601a:	78f9      	ldrb	r1, [r7, #3]
 800601c:	2300      	movs	r3, #0
 800601e:	2200      	movs	r2, #0
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 ff1b 	bl	8007e5c <USBD_LL_Transmit>
 8006026:	e003      	b.n	8006030 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	e000      	b.n	8006036 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006034:	2302      	movs	r3, #2
  }
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	460b      	mov	r3, r1
 8006048:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006050:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006052:	78fb      	ldrb	r3, [r7, #3]
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f001 ff46 	bl	8007ee8 <USBD_LL_GetRxDataSize>
 800605c:	4602      	mov	r2, r0
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00d      	beq.n	800608a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006082:	4611      	mov	r1, r2
 8006084:	4798      	blx	r3

    return USBD_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	e000      	b.n	800608c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800608a:	2302      	movs	r3, #2
  }
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d015      	beq.n	80060da <USBD_CDC_EP0_RxReady+0x46>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80060b4:	2bff      	cmp	r3, #255	; 0xff
 80060b6:	d010      	beq.n	80060da <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80060c6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80060ce:	b292      	uxth	r2, r2
 80060d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	22ff      	movs	r2, #255	; 0xff
 80060d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2243      	movs	r2, #67	; 0x43
 80060f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80060f2:	4b03      	ldr	r3, [pc, #12]	; (8006100 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	20000098 	.word	0x20000098

08006104 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2243      	movs	r2, #67	; 0x43
 8006110:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006112:	4b03      	ldr	r3, [pc, #12]	; (8006120 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	20000054 	.word	0x20000054

08006124 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2243      	movs	r2, #67	; 0x43
 8006130:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006132:	4b03      	ldr	r3, [pc, #12]	; (8006140 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	bc80      	pop	{r7}
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	200000dc 	.word	0x200000dc

08006144 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	220a      	movs	r2, #10
 8006150:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006152:	4b03      	ldr	r3, [pc, #12]	; (8006160 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	bc80      	pop	{r7}
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	20000010 	.word	0x20000010

08006164 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800616e:	2302      	movs	r3, #2
 8006170:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr

08006190 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80061ae:	88fa      	ldrh	r2, [r7, #6]
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	371c      	adds	r7, #28
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr

080061c2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr

080061e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d01c      	beq.n	800623c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006208:	2b00      	cmp	r3, #0
 800620a:	d115      	bne.n	8006238 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800622a:	b29b      	uxth	r3, r3
 800622c:	2181      	movs	r1, #129	; 0x81
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f001 fe14 	bl	8007e5c <USBD_LL_Transmit>

      return USBD_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	e002      	b.n	800623e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800623c:	2302      	movs	r3, #2
  }
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006254:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d017      	beq.n	8006290 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	7c1b      	ldrb	r3, [r3, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d109      	bne.n	800627c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800626e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006272:	2101      	movs	r1, #1
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 fe14 	bl	8007ea2 <USBD_LL_PrepareReceive>
 800627a:	e007      	b.n	800628c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006282:	2340      	movs	r3, #64	; 0x40
 8006284:	2101      	movs	r1, #1
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f001 fe0b 	bl	8007ea2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	e000      	b.n	8006292 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006290:	2302      	movs	r3, #2
  }
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	4613      	mov	r3, r2
 80062a6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80062ae:	2302      	movs	r3, #2
 80062b0:	e01a      	b.n	80062e8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	79fa      	ldrb	r2, [r7, #7]
 80062de:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f001 fc7f 	bl	8007be4 <USBD_LL_Init>

  return USBD_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d006      	beq.n	8006312 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	73fb      	strb	r3, [r7, #15]
 8006310:	e001      	b.n	8006316 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006312:	2302      	movs	r3, #2
 8006314:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006316:	7bfb      	ldrb	r3, [r7, #15]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	bc80      	pop	{r7}
 8006320:	4770      	bx	lr

08006322 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 fcb4 	bl	8007c98 <USBD_LL_Start>

  return USBD_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	bc80      	pop	{r7}
 800634c:	4770      	bx	lr

0800634e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	460b      	mov	r3, r1
 8006358:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800635a:	2302      	movs	r3, #2
 800635c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00c      	beq.n	8006382 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	78fa      	ldrb	r2, [r7, #3]
 8006372:	4611      	mov	r1, r2
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	4798      	blx	r3
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	78fa      	ldrb	r2, [r7, #3]
 80063a2:	4611      	mov	r1, r2
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	4798      	blx	r3

  return USBD_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b082      	sub	sp, #8
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 fecb 	bl	8007160 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063d8:	461a      	mov	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063e6:	f003 031f 	and.w	r3, r3, #31
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d00c      	beq.n	8006408 <USBD_LL_SetupStage+0x56>
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d302      	bcc.n	80063f8 <USBD_LL_SetupStage+0x46>
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d010      	beq.n	8006418 <USBD_LL_SetupStage+0x66>
 80063f6:	e017      	b.n	8006428 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f9cb 	bl	800679c <USBD_StdDevReq>
      break;
 8006406:	e01a      	b.n	800643e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fa2d 	bl	8006870 <USBD_StdItfReq>
      break;
 8006416:	e012      	b.n	800643e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fa6b 	bl	80068fc <USBD_StdEPReq>
      break;
 8006426:	e00a      	b.n	800643e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800642e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006432:	b2db      	uxtb	r3, r3
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 fc8e 	bl	8007d58 <USBD_LL_StallEP>
      break;
 800643c:	bf00      	nop
  }

  return USBD_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	460b      	mov	r3, r1
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006456:	7afb      	ldrb	r3, [r7, #11]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d14b      	bne.n	80064f4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006462:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800646a:	2b03      	cmp	r3, #3
 800646c:	d134      	bne.n	80064d8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	429a      	cmp	r2, r3
 8006478:	d919      	bls.n	80064ae <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	1ad2      	subs	r2, r2, r3
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006490:	429a      	cmp	r2, r3
 8006492:	d203      	bcs.n	800649c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006498:	b29b      	uxth	r3, r3
 800649a:	e002      	b.n	80064a2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 ff4c 	bl	8007344 <USBD_CtlContinueRx>
 80064ac:	e038      	b.n	8006520 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d105      	bne.n	80064d0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 ff49 	bl	8007368 <USBD_CtlSendStatus>
 80064d6:	e023      	b.n	8006520 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064de:	2b05      	cmp	r3, #5
 80064e0:	d11e      	bne.n	8006520 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80064ea:	2100      	movs	r1, #0
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f001 fc33 	bl	8007d58 <USBD_LL_StallEP>
 80064f2:	e015      	b.n	8006520 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00d      	beq.n	800651c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006506:	2b03      	cmp	r3, #3
 8006508:	d108      	bne.n	800651c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	7afa      	ldrb	r2, [r7, #11]
 8006514:	4611      	mov	r1, r2
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	4798      	blx	r3
 800651a:	e001      	b.n	8006520 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800651c:	2302      	movs	r3, #2
 800651e:	e000      	b.n	8006522 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b086      	sub	sp, #24
 800652e:	af00      	add	r7, sp, #0
 8006530:	60f8      	str	r0, [r7, #12]
 8006532:	460b      	mov	r3, r1
 8006534:	607a      	str	r2, [r7, #4]
 8006536:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006538:	7afb      	ldrb	r3, [r7, #11]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d17f      	bne.n	800663e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3314      	adds	r3, #20
 8006542:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800654a:	2b02      	cmp	r3, #2
 800654c:	d15c      	bne.n	8006608 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	429a      	cmp	r2, r3
 8006558:	d915      	bls.n	8006586 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	1ad2      	subs	r2, r2, r3
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	b29b      	uxth	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 feb6 	bl	80072e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006578:	2300      	movs	r3, #0
 800657a:	2200      	movs	r2, #0
 800657c:	2100      	movs	r1, #0
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f001 fc8f 	bl	8007ea2 <USBD_LL_PrepareReceive>
 8006584:	e04e      	b.n	8006624 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	6912      	ldr	r2, [r2, #16]
 800658e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006592:	fb02 f201 	mul.w	r2, r2, r1
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d11c      	bne.n	80065d6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d316      	bcc.n	80065d6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d20f      	bcs.n	80065d6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065b6:	2200      	movs	r2, #0
 80065b8:	2100      	movs	r1, #0
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 fe92 	bl	80072e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065c8:	2300      	movs	r3, #0
 80065ca:	2200      	movs	r2, #0
 80065cc:	2100      	movs	r1, #0
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f001 fc67 	bl	8007ea2 <USBD_LL_PrepareReceive>
 80065d4:	e026      	b.n	8006624 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d105      	bne.n	80065f8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80065f8:	2180      	movs	r1, #128	; 0x80
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f001 fbac 	bl	8007d58 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 fec4 	bl	800738e <USBD_CtlReceiveStatus>
 8006606:	e00d      	b.n	8006624 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800660e:	2b04      	cmp	r3, #4
 8006610:	d004      	beq.n	800661c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006618:	2b00      	cmp	r3, #0
 800661a:	d103      	bne.n	8006624 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800661c:	2180      	movs	r1, #128	; 0x80
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f001 fb9a 	bl	8007d58 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800662a:	2b01      	cmp	r3, #1
 800662c:	d11d      	bne.n	800666a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f7ff fe83 	bl	800633a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800663c:	e015      	b.n	800666a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00d      	beq.n	8006666 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006650:	2b03      	cmp	r3, #3
 8006652:	d108      	bne.n	8006666 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	7afa      	ldrb	r2, [r7, #11]
 800665e:	4611      	mov	r1, r2
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	4798      	blx	r3
 8006664:	e001      	b.n	800666a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006666:	2302      	movs	r3, #2
 8006668:	e000      	b.n	800666c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800667c:	2340      	movs	r3, #64	; 0x40
 800667e:	2200      	movs	r2, #0
 8006680:	2100      	movs	r1, #0
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 fb23 	bl	8007cce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2240      	movs	r2, #64	; 0x40
 8006694:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006698:	2340      	movs	r3, #64	; 0x40
 800669a:	2200      	movs	r2, #0
 800669c:	2180      	movs	r1, #128	; 0x80
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f001 fb15 	bl	8007cce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2240      	movs	r2, #64	; 0x40
 80066ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d009      	beq.n	80066ec <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6852      	ldr	r2, [r2, #4]
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	4611      	mov	r1, r2
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	4798      	blx	r3
  }

  return USBD_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	460b      	mov	r3, r1
 8006700:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	78fa      	ldrb	r2, [r7, #3]
 8006706:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	bc80      	pop	{r7}
 8006712:	4770      	bx	lr

08006714 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2204      	movs	r2, #4
 800672c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr

0800673c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674a:	2b04      	cmp	r3, #4
 800674c:	d105      	bne.n	800675a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr

08006766 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006774:	2b03      	cmp	r3, #3
 8006776:	d10b      	bne.n	8006790 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d004      	beq.n	80067c0 <USBD_StdDevReq+0x24>
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	d002      	beq.n	80067c0 <USBD_StdDevReq+0x24>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d008      	beq.n	80067d0 <USBD_StdDevReq+0x34>
 80067be:	e04c      	b.n	800685a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
      break;
 80067ce:	e049      	b.n	8006864 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	2b09      	cmp	r3, #9
 80067d6:	d83a      	bhi.n	800684e <USBD_StdDevReq+0xb2>
 80067d8:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <USBD_StdDevReq+0x44>)
 80067da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067de:	bf00      	nop
 80067e0:	08006831 	.word	0x08006831
 80067e4:	08006845 	.word	0x08006845
 80067e8:	0800684f 	.word	0x0800684f
 80067ec:	0800683b 	.word	0x0800683b
 80067f0:	0800684f 	.word	0x0800684f
 80067f4:	08006813 	.word	0x08006813
 80067f8:	08006809 	.word	0x08006809
 80067fc:	0800684f 	.word	0x0800684f
 8006800:	08006827 	.word	0x08006827
 8006804:	0800681d 	.word	0x0800681d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f9d4 	bl	8006bb8 <USBD_GetDescriptor>
          break;
 8006810:	e022      	b.n	8006858 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fb37 	bl	8006e88 <USBD_SetAddress>
          break;
 800681a:	e01d      	b.n	8006858 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fb74 	bl	8006f0c <USBD_SetConfig>
          break;
 8006824:	e018      	b.n	8006858 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fbfd 	bl	8007028 <USBD_GetConfig>
          break;
 800682e:	e013      	b.n	8006858 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fc2c 	bl	8007090 <USBD_GetStatus>
          break;
 8006838:	e00e      	b.n	8006858 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fc5a 	bl	80070f6 <USBD_SetFeature>
          break;
 8006842:	e009      	b.n	8006858 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fc69 	bl	800711e <USBD_ClrFeature>
          break;
 800684c:	e004      	b.n	8006858 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fcc1 	bl	80071d8 <USBD_CtlError>
          break;
 8006856:	bf00      	nop
      }
      break;
 8006858:	e004      	b.n	8006864 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fcbb 	bl	80071d8 <USBD_CtlError>
      break;
 8006862:	bf00      	nop
  }

  return ret;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop

08006870 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006886:	2b20      	cmp	r3, #32
 8006888:	d003      	beq.n	8006892 <USBD_StdItfReq+0x22>
 800688a:	2b40      	cmp	r3, #64	; 0x40
 800688c:	d001      	beq.n	8006892 <USBD_StdItfReq+0x22>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d12a      	bne.n	80068e8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006898:	3b01      	subs	r3, #1
 800689a:	2b02      	cmp	r3, #2
 800689c:	d81d      	bhi.n	80068da <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	889b      	ldrh	r3, [r3, #4]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d813      	bhi.n	80068d0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
 80068b6:	4603      	mov	r3, r0
 80068b8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	88db      	ldrh	r3, [r3, #6]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d110      	bne.n	80068e4 <USBD_StdItfReq+0x74>
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10d      	bne.n	80068e4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fd4d 	bl	8007368 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80068ce:	e009      	b.n	80068e4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fc80 	bl	80071d8 <USBD_CtlError>
          break;
 80068d8:	e004      	b.n	80068e4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fc7b 	bl	80071d8 <USBD_CtlError>
          break;
 80068e2:	e000      	b.n	80068e6 <USBD_StdItfReq+0x76>
          break;
 80068e4:	bf00      	nop
      }
      break;
 80068e6:	e004      	b.n	80068f2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fc74 	bl	80071d8 <USBD_CtlError>
      break;
 80068f0:	bf00      	nop
  }

  return USBD_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	889b      	ldrh	r3, [r3, #4]
 800690e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006918:	2b20      	cmp	r3, #32
 800691a:	d004      	beq.n	8006926 <USBD_StdEPReq+0x2a>
 800691c:	2b40      	cmp	r3, #64	; 0x40
 800691e:	d002      	beq.n	8006926 <USBD_StdEPReq+0x2a>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <USBD_StdEPReq+0x3a>
 8006924:	e13d      	b.n	8006ba2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
      break;
 8006934:	e13a      	b.n	8006bac <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800693e:	2b20      	cmp	r3, #32
 8006940:	d10a      	bne.n	8006958 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	4798      	blx	r3
 8006950:	4603      	mov	r3, r0
 8006952:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006954:	7bfb      	ldrb	r3, [r7, #15]
 8006956:	e12a      	b.n	8006bae <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d03e      	beq.n	80069de <USBD_StdEPReq+0xe2>
 8006960:	2b03      	cmp	r3, #3
 8006962:	d002      	beq.n	800696a <USBD_StdEPReq+0x6e>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d070      	beq.n	8006a4a <USBD_StdEPReq+0x14e>
 8006968:	e115      	b.n	8006b96 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006970:	2b02      	cmp	r3, #2
 8006972:	d002      	beq.n	800697a <USBD_StdEPReq+0x7e>
 8006974:	2b03      	cmp	r3, #3
 8006976:	d015      	beq.n	80069a4 <USBD_StdEPReq+0xa8>
 8006978:	e02b      	b.n	80069d2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800697a:	7bbb      	ldrb	r3, [r7, #14]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00c      	beq.n	800699a <USBD_StdEPReq+0x9e>
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	2b80      	cmp	r3, #128	; 0x80
 8006984:	d009      	beq.n	800699a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	4619      	mov	r1, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 f9e4 	bl	8007d58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006990:	2180      	movs	r1, #128	; 0x80
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f001 f9e0 	bl	8007d58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006998:	e020      	b.n	80069dc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fc1b 	bl	80071d8 <USBD_CtlError>
              break;
 80069a2:	e01b      	b.n	80069dc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	885b      	ldrh	r3, [r3, #2]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10e      	bne.n	80069ca <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <USBD_StdEPReq+0xce>
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
 80069b4:	2b80      	cmp	r3, #128	; 0x80
 80069b6:	d008      	beq.n	80069ca <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	88db      	ldrh	r3, [r3, #6]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d104      	bne.n	80069ca <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80069c0:	7bbb      	ldrb	r3, [r7, #14]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 f9c7 	bl	8007d58 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fccc 	bl	8007368 <USBD_CtlSendStatus>

              break;
 80069d0:	e004      	b.n	80069dc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fbff 	bl	80071d8 <USBD_CtlError>
              break;
 80069da:	bf00      	nop
          }
          break;
 80069dc:	e0e0      	b.n	8006ba0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d002      	beq.n	80069ee <USBD_StdEPReq+0xf2>
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d015      	beq.n	8006a18 <USBD_StdEPReq+0x11c>
 80069ec:	e026      	b.n	8006a3c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069ee:	7bbb      	ldrb	r3, [r7, #14]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00c      	beq.n	8006a0e <USBD_StdEPReq+0x112>
 80069f4:	7bbb      	ldrb	r3, [r7, #14]
 80069f6:	2b80      	cmp	r3, #128	; 0x80
 80069f8:	d009      	beq.n	8006a0e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f001 f9aa 	bl	8007d58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006a04:	2180      	movs	r1, #128	; 0x80
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 f9a6 	bl	8007d58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a0c:	e01c      	b.n	8006a48 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fbe1 	bl	80071d8 <USBD_CtlError>
              break;
 8006a16:	e017      	b.n	8006a48 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	885b      	ldrh	r3, [r3, #2]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d112      	bne.n	8006a46 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 f9b1 	bl	8007d96 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fc97 	bl	8007368 <USBD_CtlSendStatus>
              }
              break;
 8006a3a:	e004      	b.n	8006a46 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fbca 	bl	80071d8 <USBD_CtlError>
              break;
 8006a44:	e000      	b.n	8006a48 <USBD_StdEPReq+0x14c>
              break;
 8006a46:	bf00      	nop
          }
          break;
 8006a48:	e0aa      	b.n	8006ba0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d002      	beq.n	8006a5a <USBD_StdEPReq+0x15e>
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d032      	beq.n	8006abe <USBD_StdEPReq+0x1c2>
 8006a58:	e097      	b.n	8006b8a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a5a:	7bbb      	ldrb	r3, [r7, #14]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d007      	beq.n	8006a70 <USBD_StdEPReq+0x174>
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
 8006a62:	2b80      	cmp	r3, #128	; 0x80
 8006a64:	d004      	beq.n	8006a70 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fbb5 	bl	80071d8 <USBD_CtlError>
                break;
 8006a6e:	e091      	b.n	8006b94 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	da0b      	bge.n	8006a90 <USBD_StdEPReq+0x194>
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	3310      	adds	r3, #16
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	e00b      	b.n	8006aa8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fbf8 	bl	80072ac <USBD_CtlSendData>
              break;
 8006abc:	e06a      	b.n	8006b94 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	da11      	bge.n	8006aea <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	f003 020f 	and.w	r2, r3, #15
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	3318      	adds	r3, #24
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d117      	bne.n	8006b10 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fb78 	bl	80071d8 <USBD_CtlError>
                  break;
 8006ae8:	e054      	b.n	8006b94 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006aea:	7bbb      	ldrb	r3, [r7, #14]
 8006aec:	f003 020f 	and.w	r2, r3, #15
 8006af0:	6879      	ldr	r1, [r7, #4]
 8006af2:	4613      	mov	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	440b      	add	r3, r1
 8006afc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d104      	bne.n	8006b10 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fb65 	bl	80071d8 <USBD_CtlError>
                  break;
 8006b0e:	e041      	b.n	8006b94 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	da0b      	bge.n	8006b30 <USBD_StdEPReq+0x234>
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	3310      	adds	r3, #16
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	e00b      	b.n	8006b48 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	4413      	add	r3, r2
 8006b46:	3304      	adds	r3, #4
 8006b48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <USBD_StdEPReq+0x25a>
 8006b50:	7bbb      	ldrb	r3, [r7, #14]
 8006b52:	2b80      	cmp	r3, #128	; 0x80
 8006b54:	d103      	bne.n	8006b5e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	e00e      	b.n	8006b7c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 f936 	bl	8007dd4 <USBD_LL_IsStallEP>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2201      	movs	r2, #1
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	e002      	b.n	8006b7c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fb92 	bl	80072ac <USBD_CtlSendData>
              break;
 8006b88:	e004      	b.n	8006b94 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fb23 	bl	80071d8 <USBD_CtlError>
              break;
 8006b92:	bf00      	nop
          }
          break;
 8006b94:	e004      	b.n	8006ba0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fb1d 	bl	80071d8 <USBD_CtlError>
          break;
 8006b9e:	bf00      	nop
      }
      break;
 8006ba0:	e004      	b.n	8006bac <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fb17 	bl	80071d8 <USBD_CtlError>
      break;
 8006baa:	bf00      	nop
  }

  return ret;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	885b      	ldrh	r3, [r3, #2]
 8006bd2:	0a1b      	lsrs	r3, r3, #8
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	2b06      	cmp	r3, #6
 8006bda:	f200 8128 	bhi.w	8006e2e <USBD_GetDescriptor+0x276>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <USBD_GetDescriptor+0x2c>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006c01 	.word	0x08006c01
 8006be8:	08006c19 	.word	0x08006c19
 8006bec:	08006c59 	.word	0x08006c59
 8006bf0:	08006e2f 	.word	0x08006e2f
 8006bf4:	08006e2f 	.word	0x08006e2f
 8006bf8:	08006dcf 	.word	0x08006dcf
 8006bfc:	08006dfb 	.word	0x08006dfb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	7c12      	ldrb	r2, [r2, #16]
 8006c0c:	f107 0108 	add.w	r1, r7, #8
 8006c10:	4610      	mov	r0, r2
 8006c12:	4798      	blx	r3
 8006c14:	60f8      	str	r0, [r7, #12]
      break;
 8006c16:	e112      	b.n	8006e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	7c1b      	ldrb	r3, [r3, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10d      	bne.n	8006c3c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c28:	f107 0208 	add.w	r2, r7, #8
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	4798      	blx	r3
 8006c30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3301      	adds	r3, #1
 8006c36:	2202      	movs	r2, #2
 8006c38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c3a:	e100      	b.n	8006e3e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	f107 0208 	add.w	r2, r7, #8
 8006c48:	4610      	mov	r0, r2
 8006c4a:	4798      	blx	r3
 8006c4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3301      	adds	r3, #1
 8006c52:	2202      	movs	r2, #2
 8006c54:	701a      	strb	r2, [r3, #0]
      break;
 8006c56:	e0f2      	b.n	8006e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	885b      	ldrh	r3, [r3, #2]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b05      	cmp	r3, #5
 8006c60:	f200 80ac 	bhi.w	8006dbc <USBD_GetDescriptor+0x204>
 8006c64:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <USBD_GetDescriptor+0xb4>)
 8006c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6a:	bf00      	nop
 8006c6c:	08006c85 	.word	0x08006c85
 8006c70:	08006cb9 	.word	0x08006cb9
 8006c74:	08006ced 	.word	0x08006ced
 8006c78:	08006d21 	.word	0x08006d21
 8006c7c:	08006d55 	.word	0x08006d55
 8006c80:	08006d89 	.word	0x08006d89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	7c12      	ldrb	r2, [r2, #16]
 8006c9c:	f107 0108 	add.w	r1, r7, #8
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
 8006ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ca6:	e091      	b.n	8006dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fa94 	bl	80071d8 <USBD_CtlError>
            err++;
 8006cb0:	7afb      	ldrb	r3, [r7, #11]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cb6:	e089      	b.n	8006dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00b      	beq.n	8006cdc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	7c12      	ldrb	r2, [r2, #16]
 8006cd0:	f107 0108 	add.w	r1, r7, #8
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4798      	blx	r3
 8006cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cda:	e077      	b.n	8006dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa7a 	bl	80071d8 <USBD_CtlError>
            err++;
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cea:	e06f      	b.n	8006dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00b      	beq.n	8006d10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	7c12      	ldrb	r2, [r2, #16]
 8006d04:	f107 0108 	add.w	r1, r7, #8
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4798      	blx	r3
 8006d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d0e:	e05d      	b.n	8006dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fa60 	bl	80071d8 <USBD_CtlError>
            err++;
 8006d18:	7afb      	ldrb	r3, [r7, #11]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d1e:	e055      	b.n	8006dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	7c12      	ldrb	r2, [r2, #16]
 8006d38:	f107 0108 	add.w	r1, r7, #8
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4798      	blx	r3
 8006d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d42:	e043      	b.n	8006dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fa46 	bl	80071d8 <USBD_CtlError>
            err++;
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	72fb      	strb	r3, [r7, #11]
          break;
 8006d52:	e03b      	b.n	8006dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00b      	beq.n	8006d78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	7c12      	ldrb	r2, [r2, #16]
 8006d6c:	f107 0108 	add.w	r1, r7, #8
 8006d70:	4610      	mov	r0, r2
 8006d72:	4798      	blx	r3
 8006d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d76:	e029      	b.n	8006dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fa2c 	bl	80071d8 <USBD_CtlError>
            err++;
 8006d80:	7afb      	ldrb	r3, [r7, #11]
 8006d82:	3301      	adds	r3, #1
 8006d84:	72fb      	strb	r3, [r7, #11]
          break;
 8006d86:	e021      	b.n	8006dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00b      	beq.n	8006dac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	7c12      	ldrb	r2, [r2, #16]
 8006da0:	f107 0108 	add.w	r1, r7, #8
 8006da4:	4610      	mov	r0, r2
 8006da6:	4798      	blx	r3
 8006da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006daa:	e00f      	b.n	8006dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa12 	bl	80071d8 <USBD_CtlError>
            err++;
 8006db4:	7afb      	ldrb	r3, [r7, #11]
 8006db6:	3301      	adds	r3, #1
 8006db8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dba:	e007      	b.n	8006dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa0a 	bl	80071d8 <USBD_CtlError>
          err++;
 8006dc4:	7afb      	ldrb	r3, [r7, #11]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006dca:	e038      	b.n	8006e3e <USBD_GetDescriptor+0x286>
 8006dcc:	e037      	b.n	8006e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	7c1b      	ldrb	r3, [r3, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d109      	bne.n	8006dea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dde:	f107 0208 	add.w	r2, r7, #8
 8006de2:	4610      	mov	r0, r2
 8006de4:	4798      	blx	r3
 8006de6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006de8:	e029      	b.n	8006e3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f9f3 	bl	80071d8 <USBD_CtlError>
        err++;
 8006df2:	7afb      	ldrb	r3, [r7, #11]
 8006df4:	3301      	adds	r3, #1
 8006df6:	72fb      	strb	r3, [r7, #11]
      break;
 8006df8:	e021      	b.n	8006e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	7c1b      	ldrb	r3, [r3, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10d      	bne.n	8006e1e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0a:	f107 0208 	add.w	r2, r7, #8
 8006e0e:	4610      	mov	r0, r2
 8006e10:	4798      	blx	r3
 8006e12:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	2207      	movs	r2, #7
 8006e1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e1c:	e00f      	b.n	8006e3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f9d9 	bl	80071d8 <USBD_CtlError>
        err++;
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e2c:	e007      	b.n	8006e3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f9d1 	bl	80071d8 <USBD_CtlError>
      err++;
 8006e36:	7afb      	ldrb	r3, [r7, #11]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e3c:	bf00      	nop
  }

  if (err != 0U)
 8006e3e:	7afb      	ldrb	r3, [r7, #11]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d11c      	bne.n	8006e7e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006e44:	893b      	ldrh	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d011      	beq.n	8006e6e <USBD_GetDescriptor+0x2b6>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	88db      	ldrh	r3, [r3, #6]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00d      	beq.n	8006e6e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	88da      	ldrh	r2, [r3, #6]
 8006e56:	893b      	ldrh	r3, [r7, #8]
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	bf28      	it	cs
 8006e5c:	4613      	movcs	r3, r2
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e62:	893b      	ldrh	r3, [r7, #8]
 8006e64:	461a      	mov	r2, r3
 8006e66:	68f9      	ldr	r1, [r7, #12]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fa1f 	bl	80072ac <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	88db      	ldrh	r3, [r3, #6]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d104      	bne.n	8006e80 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa76 	bl	8007368 <USBD_CtlSendStatus>
 8006e7c:	e000      	b.n	8006e80 <USBD_GetDescriptor+0x2c8>
    return;
 8006e7e:	bf00      	nop
    }
  }
}
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop

08006e88 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	889b      	ldrh	r3, [r3, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d130      	bne.n	8006efc <USBD_SetAddress+0x74>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	88db      	ldrh	r3, [r3, #6]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d12c      	bne.n	8006efc <USBD_SetAddress+0x74>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	885b      	ldrh	r3, [r3, #2]
 8006ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ea8:	d828      	bhi.n	8006efc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	885b      	ldrh	r3, [r3, #2]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebc:	2b03      	cmp	r3, #3
 8006ebe:	d104      	bne.n	8006eca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f988 	bl	80071d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec8:	e01c      	b.n	8006f04 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	7bfa      	ldrb	r2, [r7, #15]
 8006ece:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 ffa1 	bl	8007e1e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fa43 	bl	8007368 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d004      	beq.n	8006ef2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ef0:	e008      	b.n	8006f04 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efa:	e003      	b.n	8006f04 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f96a 	bl	80071d8 <USBD_CtlError>
  }
}
 8006f04:	bf00      	nop
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	885b      	ldrh	r3, [r3, #2]
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	4b41      	ldr	r3, [pc, #260]	; (8007024 <USBD_SetConfig+0x118>)
 8006f1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f20:	4b40      	ldr	r3, [pc, #256]	; (8007024 <USBD_SetConfig+0x118>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d904      	bls.n	8006f32 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f954 	bl	80071d8 <USBD_CtlError>
 8006f30:	e075      	b.n	800701e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d002      	beq.n	8006f42 <USBD_SetConfig+0x36>
 8006f3c:	2b03      	cmp	r3, #3
 8006f3e:	d023      	beq.n	8006f88 <USBD_SetConfig+0x7c>
 8006f40:	e062      	b.n	8007008 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006f42:	4b38      	ldr	r3, [pc, #224]	; (8007024 <USBD_SetConfig+0x118>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d01a      	beq.n	8006f80 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006f4a:	4b36      	ldr	r3, [pc, #216]	; (8007024 <USBD_SetConfig+0x118>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2203      	movs	r2, #3
 8006f58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006f5c:	4b31      	ldr	r3, [pc, #196]	; (8007024 <USBD_SetConfig+0x118>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff f9f3 	bl	800634e <USBD_SetClassConfig>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d104      	bne.n	8006f78 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f931 	bl	80071d8 <USBD_CtlError>
            return;
 8006f76:	e052      	b.n	800701e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f9f5 	bl	8007368 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006f7e:	e04e      	b.n	800701e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f9f1 	bl	8007368 <USBD_CtlSendStatus>
        break;
 8006f86:	e04a      	b.n	800701e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006f88:	4b26      	ldr	r3, [pc, #152]	; (8007024 <USBD_SetConfig+0x118>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d112      	bne.n	8006fb6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006f98:	4b22      	ldr	r3, [pc, #136]	; (8007024 <USBD_SetConfig+0x118>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006fa2:	4b20      	ldr	r3, [pc, #128]	; (8007024 <USBD_SetConfig+0x118>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff f9ef 	bl	800638c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f9da 	bl	8007368 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006fb4:	e033      	b.n	800701e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006fb6:	4b1b      	ldr	r3, [pc, #108]	; (8007024 <USBD_SetConfig+0x118>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d01d      	beq.n	8007000 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff f9dd 	bl	800638c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006fd2:	4b14      	ldr	r3, [pc, #80]	; (8007024 <USBD_SetConfig+0x118>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006fdc:	4b11      	ldr	r3, [pc, #68]	; (8007024 <USBD_SetConfig+0x118>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff f9b3 	bl	800634e <USBD_SetClassConfig>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d104      	bne.n	8006ff8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f8f1 	bl	80071d8 <USBD_CtlError>
            return;
 8006ff6:	e012      	b.n	800701e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f9b5 	bl	8007368 <USBD_CtlSendStatus>
        break;
 8006ffe:	e00e      	b.n	800701e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f9b1 	bl	8007368 <USBD_CtlSendStatus>
        break;
 8007006:	e00a      	b.n	800701e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f8e4 	bl	80071d8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007010:	4b04      	ldr	r3, [pc, #16]	; (8007024 <USBD_SetConfig+0x118>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7ff f9b8 	bl	800638c <USBD_ClrClassConfig>
        break;
 800701c:	bf00      	nop
    }
  }
}
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	200001bc 	.word	0x200001bc

08007028 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	88db      	ldrh	r3, [r3, #6]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d004      	beq.n	8007044 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f8cb 	bl	80071d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007042:	e021      	b.n	8007088 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800704a:	2b01      	cmp	r3, #1
 800704c:	db17      	blt.n	800707e <USBD_GetConfig+0x56>
 800704e:	2b02      	cmp	r3, #2
 8007050:	dd02      	ble.n	8007058 <USBD_GetConfig+0x30>
 8007052:	2b03      	cmp	r3, #3
 8007054:	d00b      	beq.n	800706e <USBD_GetConfig+0x46>
 8007056:	e012      	b.n	800707e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3308      	adds	r3, #8
 8007062:	2201      	movs	r2, #1
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f920 	bl	80072ac <USBD_CtlSendData>
        break;
 800706c:	e00c      	b.n	8007088 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3304      	adds	r3, #4
 8007072:	2201      	movs	r2, #1
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f918 	bl	80072ac <USBD_CtlSendData>
        break;
 800707c:	e004      	b.n	8007088 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f8a9 	bl	80071d8 <USBD_CtlError>
        break;
 8007086:	bf00      	nop
}
 8007088:	bf00      	nop
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a0:	3b01      	subs	r3, #1
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d81e      	bhi.n	80070e4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	88db      	ldrh	r3, [r3, #6]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d004      	beq.n	80070b8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f891 	bl	80071d8 <USBD_CtlError>
        break;
 80070b6:	e01a      	b.n	80070ee <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f043 0202 	orr.w	r2, r3, #2
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	330c      	adds	r3, #12
 80070d8:	2202      	movs	r2, #2
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f8e5 	bl	80072ac <USBD_CtlSendData>
      break;
 80070e2:	e004      	b.n	80070ee <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f876 	bl	80071d8 <USBD_CtlError>
      break;
 80070ec:	bf00      	nop
  }
}
 80070ee:	bf00      	nop
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	885b      	ldrh	r3, [r3, #2]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d106      	bne.n	8007116 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f929 	bl	8007368 <USBD_CtlSendStatus>
  }
}
 8007116:	bf00      	nop
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712e:	3b01      	subs	r3, #1
 8007130:	2b02      	cmp	r3, #2
 8007132:	d80b      	bhi.n	800714c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	885b      	ldrh	r3, [r3, #2]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d10c      	bne.n	8007156 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f90f 	bl	8007368 <USBD_CtlSendStatus>
      }
      break;
 800714a:	e004      	b.n	8007156 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f842 	bl	80071d8 <USBD_CtlError>
      break;
 8007154:	e000      	b.n	8007158 <USBD_ClrFeature+0x3a>
      break;
 8007156:	bf00      	nop
  }
}
 8007158:	bf00      	nop
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781a      	ldrb	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	785a      	ldrb	r2, [r3, #1]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	3302      	adds	r3, #2
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	b29a      	uxth	r2, r3
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	3303      	adds	r3, #3
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	b29b      	uxth	r3, r3
 800718a:	021b      	lsls	r3, r3, #8
 800718c:	b29b      	uxth	r3, r3
 800718e:	4413      	add	r3, r2
 8007190:	b29a      	uxth	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	3304      	adds	r3, #4
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	b29a      	uxth	r2, r3
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	3305      	adds	r3, #5
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	4413      	add	r3, r2
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	3306      	adds	r3, #6
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	3307      	adds	r3, #7
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	4413      	add	r3, r2
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	80da      	strh	r2, [r3, #6]

}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr

080071d8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80071e2:	2180      	movs	r1, #128	; 0x80
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fdb7 	bl	8007d58 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80071ea:	2100      	movs	r1, #0
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fdb3 	bl	8007d58 <USBD_LL_StallEP>
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b086      	sub	sp, #24
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d032      	beq.n	8007276 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f834 	bl	800727e <USBD_GetLen>
 8007216:	4603      	mov	r3, r0
 8007218:	3301      	adds	r3, #1
 800721a:	b29b      	uxth	r3, r3
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	b29a      	uxth	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	75fa      	strb	r2, [r7, #23]
 800722a:	461a      	mov	r2, r3
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4413      	add	r3, r2
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	7812      	ldrb	r2, [r2, #0]
 8007234:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007236:	7dfb      	ldrb	r3, [r7, #23]
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	75fa      	strb	r2, [r7, #23]
 800723c:	461a      	mov	r2, r3
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	4413      	add	r3, r2
 8007242:	2203      	movs	r2, #3
 8007244:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007246:	e012      	b.n	800726e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	60fa      	str	r2, [r7, #12]
 800724e:	7dfa      	ldrb	r2, [r7, #23]
 8007250:	1c51      	adds	r1, r2, #1
 8007252:	75f9      	strb	r1, [r7, #23]
 8007254:	4611      	mov	r1, r2
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	440a      	add	r2, r1
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800725e:	7dfb      	ldrb	r3, [r7, #23]
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	75fa      	strb	r2, [r7, #23]
 8007264:	461a      	mov	r2, r3
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	4413      	add	r3, r2
 800726a:	2200      	movs	r2, #0
 800726c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e8      	bne.n	8007248 <USBD_GetString+0x4e>
    }
  }
}
 8007276:	bf00      	nop
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800728a:	e005      	b.n	8007298 <USBD_GetLen+0x1a>
  {
    len++;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	3301      	adds	r3, #1
 8007290:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3301      	adds	r3, #1
 8007296:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1f5      	bne.n	800728c <USBD_GetLen+0xe>
  }

  return len;
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr

080072ac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	4613      	mov	r3, r2
 80072b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2202      	movs	r2, #2
 80072be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80072c2:	88fa      	ldrh	r2, [r7, #6]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80072c8:	88fa      	ldrh	r2, [r7, #6]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072ce:	88fb      	ldrh	r3, [r7, #6]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	2100      	movs	r1, #0
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 fdc1 	bl	8007e5c <USBD_LL_Transmit>

  return USBD_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072f2:	88fb      	ldrh	r3, [r7, #6]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	2100      	movs	r1, #0
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 fdaf 	bl	8007e5c <USBD_LL_Transmit>

  return USBD_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2203      	movs	r2, #3
 800731a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800731e:	88fa      	ldrh	r2, [r7, #6]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	2100      	movs	r1, #0
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 fdb4 	bl	8007ea2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	4613      	mov	r3, r2
 8007350:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007352:	88fb      	ldrh	r3, [r7, #6]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	2100      	movs	r1, #0
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 fda2 	bl	8007ea2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2204      	movs	r2, #4
 8007374:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007378:	2300      	movs	r3, #0
 800737a:	2200      	movs	r2, #0
 800737c:	2100      	movs	r1, #0
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fd6c 	bl	8007e5c <USBD_LL_Transmit>

  return USBD_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b082      	sub	sp, #8
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2205      	movs	r2, #5
 800739a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800739e:	2300      	movs	r3, #0
 80073a0:	2200      	movs	r2, #0
 80073a2:	2100      	movs	r1, #0
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fd7c 	bl	8007ea2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073b8:	2200      	movs	r2, #0
 80073ba:	4912      	ldr	r1, [pc, #72]	; (8007404 <MX_USB_DEVICE_Init+0x50>)
 80073bc:	4812      	ldr	r0, [pc, #72]	; (8007408 <MX_USB_DEVICE_Init+0x54>)
 80073be:	f7fe ff6c 	bl	800629a <USBD_Init>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80073c8:	f7f9 fd18 	bl	8000dfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80073cc:	490f      	ldr	r1, [pc, #60]	; (800740c <MX_USB_DEVICE_Init+0x58>)
 80073ce:	480e      	ldr	r0, [pc, #56]	; (8007408 <MX_USB_DEVICE_Init+0x54>)
 80073d0:	f7fe ff8e 	bl	80062f0 <USBD_RegisterClass>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80073da:	f7f9 fd0f 	bl	8000dfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80073de:	490c      	ldr	r1, [pc, #48]	; (8007410 <MX_USB_DEVICE_Init+0x5c>)
 80073e0:	4809      	ldr	r0, [pc, #36]	; (8007408 <MX_USB_DEVICE_Init+0x54>)
 80073e2:	f7fe febf 	bl	8006164 <USBD_CDC_RegisterInterface>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80073ec:	f7f9 fd06 	bl	8000dfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80073f0:	4805      	ldr	r0, [pc, #20]	; (8007408 <MX_USB_DEVICE_Init+0x54>)
 80073f2:	f7fe ff96 	bl	8006322 <USBD_Start>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80073fc:	f7f9 fcfe 	bl	8000dfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007400:	bf00      	nop
 8007402:	bd80      	pop	{r7, pc}
 8007404:	20000130 	.word	0x20000130
 8007408:	2000052c 	.word	0x2000052c
 800740c:	2000001c 	.word	0x2000001c
 8007410:	20000120 	.word	0x20000120

08007414 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007418:	2200      	movs	r2, #0
 800741a:	4905      	ldr	r1, [pc, #20]	; (8007430 <CDC_Init_FS+0x1c>)
 800741c:	4805      	ldr	r0, [pc, #20]	; (8007434 <CDC_Init_FS+0x20>)
 800741e:	f7fe feb7 	bl	8006190 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007422:	4905      	ldr	r1, [pc, #20]	; (8007438 <CDC_Init_FS+0x24>)
 8007424:	4803      	ldr	r0, [pc, #12]	; (8007434 <CDC_Init_FS+0x20>)
 8007426:	f7fe fecc 	bl	80061c2 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800742a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800742c:	4618      	mov	r0, r3
 800742e:	bd80      	pop	{r7, pc}
 8007430:	200009f0 	.word	0x200009f0
 8007434:	2000052c 	.word	0x2000052c
 8007438:	200007f0 	.word	0x200007f0

0800743c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8007440:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007442:	4618      	mov	r0, r3
 8007444:	46bd      	mov	sp, r7
 8007446:	bc80      	pop	{r7}
 8007448:	4770      	bx	lr
	...

0800744c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	6039      	str	r1, [r7, #0]
 8007456:	71fb      	strb	r3, [r7, #7]
 8007458:	4613      	mov	r3, r2
 800745a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 800745c:	79fb      	ldrb	r3, [r7, #7]
 800745e:	2b23      	cmp	r3, #35	; 0x23
 8007460:	d84a      	bhi.n	80074f8 <CDC_Control_FS+0xac>
 8007462:	a201      	add	r2, pc, #4	; (adr r2, 8007468 <CDC_Control_FS+0x1c>)
 8007464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007468:	080074f9 	.word	0x080074f9
 800746c:	080074f9 	.word	0x080074f9
 8007470:	080074f9 	.word	0x080074f9
 8007474:	080074f9 	.word	0x080074f9
 8007478:	080074f9 	.word	0x080074f9
 800747c:	080074f9 	.word	0x080074f9
 8007480:	080074f9 	.word	0x080074f9
 8007484:	080074f9 	.word	0x080074f9
 8007488:	080074f9 	.word	0x080074f9
 800748c:	080074f9 	.word	0x080074f9
 8007490:	080074f9 	.word	0x080074f9
 8007494:	080074f9 	.word	0x080074f9
 8007498:	080074f9 	.word	0x080074f9
 800749c:	080074f9 	.word	0x080074f9
 80074a0:	080074f9 	.word	0x080074f9
 80074a4:	080074f9 	.word	0x080074f9
 80074a8:	080074f9 	.word	0x080074f9
 80074ac:	080074f9 	.word	0x080074f9
 80074b0:	080074f9 	.word	0x080074f9
 80074b4:	080074f9 	.word	0x080074f9
 80074b8:	080074f9 	.word	0x080074f9
 80074bc:	080074f9 	.word	0x080074f9
 80074c0:	080074f9 	.word	0x080074f9
 80074c4:	080074f9 	.word	0x080074f9
 80074c8:	080074f9 	.word	0x080074f9
 80074cc:	080074f9 	.word	0x080074f9
 80074d0:	080074f9 	.word	0x080074f9
 80074d4:	080074f9 	.word	0x080074f9
 80074d8:	080074f9 	.word	0x080074f9
 80074dc:	080074f9 	.word	0x080074f9
 80074e0:	080074f9 	.word	0x080074f9
 80074e4:	080074f9 	.word	0x080074f9
 80074e8:	080074f9 	.word	0x080074f9
 80074ec:	080074f9 	.word	0x080074f9
 80074f0:	080074f9 	.word	0x080074f9
 80074f4:	080074f9 	.word	0x080074f9
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80074f8:	bf00      	nop
	}

	return (USBD_OK);
 80074fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	bc80      	pop	{r7}
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop

08007508 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007508:	b590      	push	{r4, r7, lr}
 800750a:	b089      	sub	sp, #36	; 0x24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007512:	6879      	ldr	r1, [r7, #4]
 8007514:	48b3      	ldr	r0, [pc, #716]	; (80077e4 <CDC_Receive_FS+0x2dc>)
 8007516:	f7fe fe54 	bl	80061c2 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800751a:	48b2      	ldr	r0, [pc, #712]	; (80077e4 <CDC_Receive_FS+0x2dc>)
 800751c:	f7fe fe93 	bl	8006246 <USBD_CDC_ReceivePacket>

#define HEX_PC_MODE 		1 // Возможность отправлять команды в виде HEX
#define KOSTIK_MODE 		0 // Возможность отправлять команды в виде строк

#if HEX_PC_MODE
	if (*Len < 1)	return (USBD_OK);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <CDC_Receive_FS+0x24>
 8007528:	2300      	movs	r3, #0
 800752a:	e156      	b.n	80077da <CDC_Receive_FS+0x2d2>

	uint16_t tVal16;
	uint8_t cmd	= Buf[0];
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	77fb      	strb	r3, [r7, #31]
	 */

	//CDC_Transmit_FS(Buf, *Len);

	// Relay:1	[0x01 - 0x01]
	if (cmd == 0x01) {
 8007532:	7ffb      	ldrb	r3, [r7, #31]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d14b      	bne.n	80075d0 <CDC_Receive_FS+0xc8>
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00)) {
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d93b      	bls.n	80075b8 <CDC_Receive_FS+0xb0>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3301      	adds	r3, #1
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d004      	beq.n	8007554 <CDC_Receive_FS+0x4c>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3301      	adds	r3, #1
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d131      	bne.n	80075b8 <CDC_Receive_FS+0xb0>
			if (Buf[1] == 0x01) {
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3301      	adds	r3, #1
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d113      	bne.n	8007586 <CDC_Receive_FS+0x7e>
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 800755e:	2201      	movs	r2, #1
 8007560:	2104      	movs	r1, #4
 8007562:	48a1      	ldr	r0, [pc, #644]	; (80077e8 <CDC_Receive_FS+0x2e0>)
 8007564:	f7fa fe1d 	bl	80021a2 <HAL_GPIO_WritePin>
				RelayState = 0x01;
 8007568:	4ba0      	ldr	r3, [pc, #640]	; (80077ec <CDC_Receive_FS+0x2e4>)
 800756a:	2201      	movs	r2, #1
 800756c:	701a      	strb	r2, [r3, #0]

				UserTxBufferFS[0]	= cmd;
 800756e:	4aa0      	ldr	r2, [pc, #640]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007570:	7ffb      	ldrb	r3, [r7, #31]
 8007572:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1]	= 0x00;	// успешно
 8007574:	4b9e      	ldr	r3, [pc, #632]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007576:	2200      	movs	r2, #0
 8007578:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800757a:	2102      	movs	r1, #2
 800757c:	489c      	ldr	r0, [pc, #624]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 800757e:	f000 f941 	bl	8007804 <CDC_Transmit_FS>
				return (USBD_OK);
 8007582:	2300      	movs	r3, #0
 8007584:	e129      	b.n	80077da <CDC_Receive_FS+0x2d2>

			} else if (Buf[1] == 0x00) {
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	3301      	adds	r3, #1
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d113      	bne.n	80075b8 <CDC_Receive_FS+0xb0>
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8007590:	2200      	movs	r2, #0
 8007592:	2104      	movs	r1, #4
 8007594:	4894      	ldr	r0, [pc, #592]	; (80077e8 <CDC_Receive_FS+0x2e0>)
 8007596:	f7fa fe04 	bl	80021a2 <HAL_GPIO_WritePin>
				RelayState = 0x00;
 800759a:	4b94      	ldr	r3, [pc, #592]	; (80077ec <CDC_Receive_FS+0x2e4>)
 800759c:	2200      	movs	r2, #0
 800759e:	701a      	strb	r2, [r3, #0]

				UserTxBufferFS[0] = cmd;
 80075a0:	4a93      	ldr	r2, [pc, #588]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80075a2:	7ffb      	ldrb	r3, [r7, #31]
 80075a4:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x00;	// успешно
 80075a6:	4b92      	ldr	r3, [pc, #584]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 80075ac:	2102      	movs	r1, #2
 80075ae:	4890      	ldr	r0, [pc, #576]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80075b0:	f000 f928 	bl	8007804 <CDC_Transmit_FS>
				return (USBD_OK);
 80075b4:	2300      	movs	r3, #0
 80075b6:	e110      	b.n	80077da <CDC_Receive_FS+0x2d2>
			}
		}

		UserTxBufferFS[0] = cmd;
 80075b8:	4a8d      	ldr	r2, [pc, #564]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80075ba:	7ffb      	ldrb	r3, [r7, #31]
 80075bc:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;	// ошибка
 80075be:	4b8c      	ldr	r3, [pc, #560]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80075c0:	2201      	movs	r2, #1
 80075c2:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 80075c4:	2102      	movs	r1, #2
 80075c6:	488a      	ldr	r0, [pc, #552]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80075c8:	f000 f91c 	bl	8007804 <CDC_Transmit_FS>
		return (USBD_OK);
 80075cc:	2300      	movs	r3, #0
 80075ce:	e104      	b.n	80077da <CDC_Receive_FS+0x2d2>

	// DA:4095
	} else if (cmd == 0x02) {
 80075d0:	7ffb      	ldrb	r3, [r7, #31]
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d128      	bne.n	8007628 <CDC_Receive_FS+0x120>
		if (*Len >= 3) {
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d918      	bls.n	8007610 <CDC_Receive_FS+0x108>
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 80075de:	f7f8 ffb1 	bl	8000544 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 80075e2:	f7f8 ffc7 	bl	8000574 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3301      	adds	r3, #1
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	83bb      	strh	r3, [r7, #28]
			SetDacA(tVal16);
 80075f0:	8bbb      	ldrh	r3, [r7, #28]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7f8 fe7c 	bl	80002f0 <SetDacA>

			UserTxBufferFS[0] = cmd;
 80075f8:	4a7d      	ldr	r2, [pc, #500]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80075fa:	7ffb      	ldrb	r3, [r7, #31]
 80075fc:	7013      	strb	r3, [r2, #0]
			UserTxBufferFS[1] = 0x00;	// успешно
 80075fe:	4b7c      	ldr	r3, [pc, #496]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007600:	2200      	movs	r2, #0
 8007602:	705a      	strb	r2, [r3, #1]
			CDC_Transmit_FS(UserTxBufferFS, 2);
 8007604:	2102      	movs	r1, #2
 8007606:	487a      	ldr	r0, [pc, #488]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007608:	f000 f8fc 	bl	8007804 <CDC_Transmit_FS>
			return (USBD_OK);
 800760c:	2300      	movs	r3, #0
 800760e:	e0e4      	b.n	80077da <CDC_Receive_FS+0x2d2>
		}

		UserTxBufferFS[0] = cmd;
 8007610:	4a77      	ldr	r2, [pc, #476]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007612:	7ffb      	ldrb	r3, [r7, #31]
 8007614:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;		// ошибка
 8007616:	4b76      	ldr	r3, [pc, #472]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007618:	2201      	movs	r2, #1
 800761a:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800761c:	2102      	movs	r1, #2
 800761e:	4874      	ldr	r0, [pc, #464]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007620:	f000 f8f0 	bl	8007804 <CDC_Transmit_FS>
		return (USBD_OK);
 8007624:	2300      	movs	r3, #0
 8007626:	e0d8      	b.n	80077da <CDC_Receive_FS+0x2d2>

	// DB:4095
	} else if (cmd == 0x03) {
 8007628:	7ffb      	ldrb	r3, [r7, #31]
 800762a:	2b03      	cmp	r3, #3
 800762c:	d128      	bne.n	8007680 <CDC_Receive_FS+0x178>
		if (*Len >= 3) {
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b02      	cmp	r3, #2
 8007634:	d918      	bls.n	8007668 <CDC_Receive_FS+0x160>
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8007636:	f7f8 ff85 	bl	8000544 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 800763a:	f7f8 ff9b 	bl	8000574 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	3301      	adds	r3, #1
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	83bb      	strh	r3, [r7, #28]
			SetDacB(tVal16);
 8007648:	8bbb      	ldrh	r3, [r7, #28]
 800764a:	4618      	mov	r0, r3
 800764c:	f7f8 fe66 	bl	800031c <SetDacB>

			UserTxBufferFS[0] = cmd;
 8007650:	4a67      	ldr	r2, [pc, #412]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007652:	7ffb      	ldrb	r3, [r7, #31]
 8007654:	7013      	strb	r3, [r2, #0]
			UserTxBufferFS[1] = 0x00;	// успешно
 8007656:	4b66      	ldr	r3, [pc, #408]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007658:	2200      	movs	r2, #0
 800765a:	705a      	strb	r2, [r3, #1]
			CDC_Transmit_FS(UserTxBufferFS, 2);
 800765c:	2102      	movs	r1, #2
 800765e:	4864      	ldr	r0, [pc, #400]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007660:	f000 f8d0 	bl	8007804 <CDC_Transmit_FS>
			return (USBD_OK);
 8007664:	2300      	movs	r3, #0
 8007666:	e0b8      	b.n	80077da <CDC_Receive_FS+0x2d2>
		}

		UserTxBufferFS[0] = cmd;
 8007668:	4a61      	ldr	r2, [pc, #388]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 800766a:	7ffb      	ldrb	r3, [r7, #31]
 800766c:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;		// ошибка
 800766e:	4b60      	ldr	r3, [pc, #384]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007670:	2201      	movs	r2, #1
 8007672:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8007674:	2102      	movs	r1, #2
 8007676:	485e      	ldr	r0, [pc, #376]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007678:	f000 f8c4 	bl	8007804 <CDC_Transmit_FS>
		return (USBD_OK);
 800767c:	2300      	movs	r3, #0
 800767e:	e0ac      	b.n	80077da <CDC_Receive_FS+0x2d2>

	// ADC?
	} else if (cmd == 0x04) {
 8007680:	7ffb      	ldrb	r3, [r7, #31]
 8007682:	2b04      	cmp	r3, #4
 8007684:	d10f      	bne.n	80076a6 <CDC_Receive_FS+0x19e>
		tVal16 = GetADC();
 8007686:	f7f8 ff81 	bl	800058c <GetADC>
 800768a:	4603      	mov	r3, r0
 800768c:	83bb      	strh	r3, [r7, #28]
		UserTxBufferFS[0] = cmd;
 800768e:	4a58      	ldr	r2, [pc, #352]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007690:	7ffb      	ldrb	r3, [r7, #31]
 8007692:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 8007694:	4a57      	ldr	r2, [pc, #348]	; (80077f4 <CDC_Receive_FS+0x2ec>)
 8007696:	8bbb      	ldrh	r3, [r7, #28]
 8007698:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 800769a:	2103      	movs	r1, #3
 800769c:	4854      	ldr	r0, [pc, #336]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 800769e:	f000 f8b1 	bl	8007804 <CDC_Transmit_FS>
		return (USBD_OK);
 80076a2:	2300      	movs	r3, #0
 80076a4:	e099      	b.n	80077da <CDC_Receive_FS+0x2d2>

	// Relay?DA?DB?
	} else if (cmd == 0x05) {
 80076a6:	7ffb      	ldrb	r3, [r7, #31]
 80076a8:	2b05      	cmp	r3, #5
 80076aa:	d11a      	bne.n	80076e2 <CDC_Receive_FS+0x1da>
		UserTxBufferFS[0] = cmd;
 80076ac:	4a50      	ldr	r2, [pc, #320]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80076ae:	7ffb      	ldrb	r3, [r7, #31]
 80076b0:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = RelayState;
 80076b2:	4b4e      	ldr	r3, [pc, #312]	; (80077ec <CDC_Receive_FS+0x2e4>)
 80076b4:	781a      	ldrb	r2, [r3, #0]
 80076b6:	4b4e      	ldr	r3, [pc, #312]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80076b8:	705a      	strb	r2, [r3, #1]

		tVal16 = GetDacA();
 80076ba:	f7f8 fe45 	bl	8000348 <GetDacA>
 80076be:	4603      	mov	r3, r0
 80076c0:	83bb      	strh	r3, [r7, #28]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 80076c2:	4a4d      	ldr	r2, [pc, #308]	; (80077f8 <CDC_Receive_FS+0x2f0>)
 80076c4:	8bbb      	ldrh	r3, [r7, #28]
 80076c6:	8013      	strh	r3, [r2, #0]

		tVal16 = GetDacB();
 80076c8:	f7f8 fe48 	bl	800035c <GetDacB>
 80076cc:	4603      	mov	r3, r0
 80076ce:	83bb      	strh	r3, [r7, #28]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 80076d0:	4a4a      	ldr	r2, [pc, #296]	; (80077fc <CDC_Receive_FS+0x2f4>)
 80076d2:	8bbb      	ldrh	r3, [r7, #28]
 80076d4:	8013      	strh	r3, [r2, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 80076d6:	2106      	movs	r1, #6
 80076d8:	4845      	ldr	r0, [pc, #276]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80076da:	f000 f893 	bl	8007804 <CDC_Transmit_FS>
		return (USBD_OK);
 80076de:	2300      	movs	r3, #0
 80076e0:	e07b      	b.n	80077da <CDC_Receive_FS+0x2d2>

	// Btn?
	} else if (cmd == 0x06) {
 80076e2:	7ffb      	ldrb	r3, [r7, #31]
 80076e4:	2b06      	cmp	r3, #6
 80076e6:	d11a      	bne.n	800771e <CDC_Receive_FS+0x216>
		UserTxBufferFS[0] = cmd;
 80076e8:	4a41      	ldr	r2, [pc, #260]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80076ea:	7ffb      	ldrb	r3, [r7, #31]
 80076ec:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 80076ee:	f7f8 fe3f 	bl	8000370 <GetBtnRunState>
 80076f2:	4603      	mov	r3, r0
 80076f4:	461a      	mov	r2, r3
 80076f6:	4b3e      	ldr	r3, [pc, #248]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80076f8:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 80076fa:	f7f8 fe7b 	bl	80003f4 <GetBtnUpState>
 80076fe:	4603      	mov	r3, r0
 8007700:	461a      	mov	r2, r3
 8007702:	4b3b      	ldr	r3, [pc, #236]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007704:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 8007706:	f7f8 feb7 	bl	8000478 <GetBtnDownState>
 800770a:	4603      	mov	r3, r0
 800770c:	461a      	mov	r2, r3
 800770e:	4b38      	ldr	r3, [pc, #224]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007710:	70da      	strb	r2, [r3, #3]

		CDC_Transmit_FS(UserTxBufferFS, 4);
 8007712:	2104      	movs	r1, #4
 8007714:	4836      	ldr	r0, [pc, #216]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007716:	f000 f875 	bl	8007804 <CDC_Transmit_FS>
		return (USBD_OK);
 800771a:	2300      	movs	r3, #0
 800771c:	e05d      	b.n	80077da <CDC_Receive_FS+0x2d2>
	// ID? 
	} else if (cmd == 0x07) {
 800771e:	7ffb      	ldrb	r3, [r7, #31]
 8007720:	2b07      	cmp	r3, #7
 8007722:	d12d      	bne.n	8007780 <CDC_Receive_FS+0x278>
		char str[] = "prb_v0.3";
 8007724:	4a36      	ldr	r2, [pc, #216]	; (8007800 <CDC_Receive_FS+0x2f8>)
 8007726:	f107 0310 	add.w	r3, r7, #16
 800772a:	ca07      	ldmia	r2, {r0, r1, r2}
 800772c:	c303      	stmia	r3!, {r0, r1}
 800772e:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8007730:	4a2f      	ldr	r2, [pc, #188]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007732:	7ffb      	ldrb	r3, [r7, #31]
 8007734:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = strlen(str);
 8007736:	f107 0310 	add.w	r3, r7, #16
 800773a:	4618      	mov	r0, r3
 800773c:	f7f8 fd06 	bl	800014c <strlen>
 8007740:	4603      	mov	r3, r0
 8007742:	b2da      	uxtb	r2, r3
 8007744:	4b2a      	ldr	r3, [pc, #168]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007746:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 8007748:	4c2b      	ldr	r4, [pc, #172]	; (80077f8 <CDC_Receive_FS+0x2f0>)
 800774a:	f107 0310 	add.w	r3, r7, #16
 800774e:	4618      	mov	r0, r3
 8007750:	f7f8 fcfc 	bl	800014c <strlen>
 8007754:	4602      	mov	r2, r0
 8007756:	f107 0310 	add.w	r3, r7, #16
 800775a:	4619      	mov	r1, r3
 800775c:	4620      	mov	r0, r4
 800775e:	f000 fc47 	bl	8007ff0 <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 8007762:	f107 0310 	add.w	r3, r7, #16
 8007766:	4618      	mov	r0, r3
 8007768:	f7f8 fcf0 	bl	800014c <strlen>
 800776c:	4603      	mov	r3, r0
 800776e:	b29b      	uxth	r3, r3
 8007770:	3302      	adds	r3, #2
 8007772:	b29b      	uxth	r3, r3
 8007774:	4619      	mov	r1, r3
 8007776:	481e      	ldr	r0, [pc, #120]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007778:	f000 f844 	bl	8007804 <CDC_Transmit_FS>
		return (USBD_OK);
 800777c:	2300      	movs	r3, #0
 800777e:	e02c      	b.n	80077da <CDC_Receive_FS+0x2d2>
	 * до того момента пока на выходах компараторов не появится 1.
	 * Т.е. каждый раз когда мы меняем входной код - мы запрашиваем контроллер щупа о состоянии выходов компаратора.
	 */

	// inHL?
	} else if (cmd == 0x08) {
 8007780:	7ffb      	ldrb	r3, [r7, #31]
 8007782:	2b08      	cmp	r3, #8
 8007784:	d112      	bne.n	80077ac <CDC_Receive_FS+0x2a4>
		EnableTIM3_PB4();
 8007786:	f7f8 feb9 	bl	80004fc <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 800778a:	f7f8 fecf 	bl	800052c <GetTIM3>
 800778e:	4603      	mov	r3, r0
 8007790:	b29b      	uxth	r3, r3
 8007792:	81fb      	strh	r3, [r7, #14]
		UserTxBufferFS[0] = cmd;
 8007794:	4a16      	ldr	r2, [pc, #88]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 8007796:	7ffb      	ldrb	r3, [r7, #31]
 8007798:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS+1,&temp,sizeof(uint16_t));
 800779a:	4a16      	ldr	r2, [pc, #88]	; (80077f4 <CDC_Receive_FS+0x2ec>)
 800779c:	89fb      	ldrh	r3, [r7, #14]
 800779e:	8013      	strh	r3, [r2, #0]
//	    for(int i = 0;i >= 10; i++ ){
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//			HAL_Delay(250);
//		}

		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 80077a0:	2103      	movs	r1, #3
 80077a2:	4813      	ldr	r0, [pc, #76]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80077a4:	f000 f82e 	bl	8007804 <CDC_Transmit_FS>
		return (USBD_OK);
 80077a8:	2300      	movs	r3, #0
 80077aa:	e016      	b.n	80077da <CDC_Receive_FS+0x2d2>

	// inLL?
	} else if (cmd == 0x09) {
 80077ac:	7ffb      	ldrb	r3, [r7, #31]
 80077ae:	2b09      	cmp	r3, #9
 80077b0:	d112      	bne.n	80077d8 <CDC_Receive_FS+0x2d0>
		EnableTIM4_PB6();
 80077b2:	f7f8 feaf 	bl	8000514 <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 80077b6:	f7f8 fed1 	bl	800055c <GetTIM4>
 80077ba:	4603      	mov	r3, r0
 80077bc:	b29b      	uxth	r3, r3
 80077be:	81bb      	strh	r3, [r7, #12]
		UserTxBufferFS[0] = cmd;
 80077c0:	4a0b      	ldr	r2, [pc, #44]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80077c2:	7ffb      	ldrb	r3, [r7, #31]
 80077c4:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS+1,&temp,sizeof(uint16_t));
 80077c6:	4a0b      	ldr	r2, [pc, #44]	; (80077f4 <CDC_Receive_FS+0x2ec>)
 80077c8:	89bb      	ldrh	r3, [r7, #12]
 80077ca:	8013      	strh	r3, [r2, #0]



		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 80077cc:	2103      	movs	r1, #3
 80077ce:	4808      	ldr	r0, [pc, #32]	; (80077f0 <CDC_Receive_FS+0x2e8>)
 80077d0:	f000 f818 	bl	8007804 <CDC_Transmit_FS>
		return (USBD_OK);
 80077d4:	2300      	movs	r3, #0
 80077d6:	e000      	b.n	80077da <CDC_Receive_FS+0x2d2>

	UserTxBufferFS[0] = cmd;
	UserTxBufferFS[1] = 0x02;	// неизвестная команда
	CDC_Transmit_FS(UserTxBufferFS, 2);
#endif	/* KOSTIK_MODE */
	return (USBD_OK);
 80077d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3724      	adds	r7, #36	; 0x24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd90      	pop	{r4, r7, pc}
 80077e2:	bf00      	nop
 80077e4:	2000052c 	.word	0x2000052c
 80077e8:	40010800 	.word	0x40010800
 80077ec:	200001bd 	.word	0x200001bd
 80077f0:	200009f0 	.word	0x200009f0
 80077f4:	200009f1 	.word	0x200009f1
 80077f8:	200009f2 	.word	0x200009f2
 80077fc:	200009f4 	.word	0x200009f4
 8007800:	08008058 	.word	0x08008058

08007804 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8007814:	4b0d      	ldr	r3, [pc, #52]	; (800784c <CDC_Transmit_FS+0x48>)
 8007816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800781a:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0) {
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8007826:	2301      	movs	r3, #1
 8007828:	e00b      	b.n	8007842 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800782a:	887b      	ldrh	r3, [r7, #2]
 800782c:	461a      	mov	r2, r3
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	4806      	ldr	r0, [pc, #24]	; (800784c <CDC_Transmit_FS+0x48>)
 8007832:	f7fe fcad 	bl	8006190 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007836:	4805      	ldr	r0, [pc, #20]	; (800784c <CDC_Transmit_FS+0x48>)
 8007838:	f7fe fcd6 	bl	80061e8 <USBD_CDC_TransmitPacket>
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007840:	7bfb      	ldrb	r3, [r7, #15]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	2000052c 	.word	0x2000052c

08007850 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	4603      	mov	r3, r0
 8007858:	6039      	str	r1, [r7, #0]
 800785a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2212      	movs	r2, #18
 8007860:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007862:	4b03      	ldr	r3, [pc, #12]	; (8007870 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007864:	4618      	mov	r0, r3
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	bc80      	pop	{r7}
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	2000014c 	.word	0x2000014c

08007874 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	6039      	str	r1, [r7, #0]
 800787e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2204      	movs	r2, #4
 8007884:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007886:	4b03      	ldr	r3, [pc, #12]	; (8007894 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007888:	4618      	mov	r0, r3
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	bc80      	pop	{r7}
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20000160 	.word	0x20000160

08007898 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	6039      	str	r1, [r7, #0]
 80078a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d105      	bne.n	80078b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	4907      	ldr	r1, [pc, #28]	; (80078cc <USBD_FS_ProductStrDescriptor+0x34>)
 80078ae:	4808      	ldr	r0, [pc, #32]	; (80078d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80078b0:	f7ff fca3 	bl	80071fa <USBD_GetString>
 80078b4:	e004      	b.n	80078c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	4904      	ldr	r1, [pc, #16]	; (80078cc <USBD_FS_ProductStrDescriptor+0x34>)
 80078ba:	4805      	ldr	r0, [pc, #20]	; (80078d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80078bc:	f7ff fc9d 	bl	80071fa <USBD_GetString>
  }
  return USBD_StrDesc;
 80078c0:	4b02      	ldr	r3, [pc, #8]	; (80078cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20000bf0 	.word	0x20000bf0
 80078d0:	08008064 	.word	0x08008064

080078d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	6039      	str	r1, [r7, #0]
 80078de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	4904      	ldr	r1, [pc, #16]	; (80078f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80078e4:	4804      	ldr	r0, [pc, #16]	; (80078f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80078e6:	f7ff fc88 	bl	80071fa <USBD_GetString>
  return USBD_StrDesc;
 80078ea:	4b02      	ldr	r3, [pc, #8]	; (80078f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20000bf0 	.word	0x20000bf0
 80078f8:	0800807c 	.word	0x0800807c

080078fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	6039      	str	r1, [r7, #0]
 8007906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	221a      	movs	r2, #26
 800790c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800790e:	f000 f843 	bl	8007998 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007912:	4b02      	ldr	r3, [pc, #8]	; (800791c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	20000164 	.word	0x20000164

08007920 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	6039      	str	r1, [r7, #0]
 800792a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800792c:	79fb      	ldrb	r3, [r7, #7]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d105      	bne.n	800793e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	4907      	ldr	r1, [pc, #28]	; (8007954 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007936:	4808      	ldr	r0, [pc, #32]	; (8007958 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007938:	f7ff fc5f 	bl	80071fa <USBD_GetString>
 800793c:	e004      	b.n	8007948 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	4904      	ldr	r1, [pc, #16]	; (8007954 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007942:	4805      	ldr	r0, [pc, #20]	; (8007958 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007944:	f7ff fc59 	bl	80071fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8007948:	4b02      	ldr	r3, [pc, #8]	; (8007954 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20000bf0 	.word	0x20000bf0
 8007958:	08008090 	.word	0x08008090

0800795c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	6039      	str	r1, [r7, #0]
 8007966:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d105      	bne.n	800797a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	4907      	ldr	r1, [pc, #28]	; (8007990 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007972:	4808      	ldr	r0, [pc, #32]	; (8007994 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007974:	f7ff fc41 	bl	80071fa <USBD_GetString>
 8007978:	e004      	b.n	8007984 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	4904      	ldr	r1, [pc, #16]	; (8007990 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800797e:	4805      	ldr	r0, [pc, #20]	; (8007994 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007980:	f7ff fc3b 	bl	80071fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8007984:	4b02      	ldr	r3, [pc, #8]	; (8007990 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20000bf0 	.word	0x20000bf0
 8007994:	0800809c 	.word	0x0800809c

08007998 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800799e:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <Get_SerialNum+0x44>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079a4:	4b0e      	ldr	r3, [pc, #56]	; (80079e0 <Get_SerialNum+0x48>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079aa:	4b0e      	ldr	r3, [pc, #56]	; (80079e4 <Get_SerialNum+0x4c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4413      	add	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d009      	beq.n	80079d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079be:	2208      	movs	r2, #8
 80079c0:	4909      	ldr	r1, [pc, #36]	; (80079e8 <Get_SerialNum+0x50>)
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 f814 	bl	80079f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079c8:	2204      	movs	r2, #4
 80079ca:	4908      	ldr	r1, [pc, #32]	; (80079ec <Get_SerialNum+0x54>)
 80079cc:	68b8      	ldr	r0, [r7, #8]
 80079ce:	f000 f80f 	bl	80079f0 <IntToUnicode>
  }
}
 80079d2:	bf00      	nop
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	1ffff7e8 	.word	0x1ffff7e8
 80079e0:	1ffff7ec 	.word	0x1ffff7ec
 80079e4:	1ffff7f0 	.word	0x1ffff7f0
 80079e8:	20000166 	.word	0x20000166
 80079ec:	20000176 	.word	0x20000176

080079f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a02:	2300      	movs	r3, #0
 8007a04:	75fb      	strb	r3, [r7, #23]
 8007a06:	e027      	b.n	8007a58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	0f1b      	lsrs	r3, r3, #28
 8007a0c:	2b09      	cmp	r3, #9
 8007a0e:	d80b      	bhi.n	8007a28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	0f1b      	lsrs	r3, r3, #28
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	440b      	add	r3, r1
 8007a20:	3230      	adds	r2, #48	; 0x30
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	e00a      	b.n	8007a3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	0f1b      	lsrs	r3, r3, #28
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	4619      	mov	r1, r3
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	440b      	add	r3, r1
 8007a38:	3237      	adds	r2, #55	; 0x37
 8007a3a:	b2d2      	uxtb	r2, r2
 8007a3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	3301      	adds	r3, #1
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	2200      	movs	r2, #0
 8007a50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
 8007a54:	3301      	adds	r3, #1
 8007a56:	75fb      	strb	r3, [r7, #23]
 8007a58:	7dfa      	ldrb	r2, [r7, #23]
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d3d3      	bcc.n	8007a08 <IntToUnicode+0x18>
  }
}
 8007a60:	bf00      	nop
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr
	...

08007a6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a0d      	ldr	r2, [pc, #52]	; (8007ab0 <HAL_PCD_MspInit+0x44>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d113      	bne.n	8007aa6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007a7e:	4b0d      	ldr	r3, [pc, #52]	; (8007ab4 <HAL_PCD_MspInit+0x48>)
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	4a0c      	ldr	r2, [pc, #48]	; (8007ab4 <HAL_PCD_MspInit+0x48>)
 8007a84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a88:	61d3      	str	r3, [r2, #28]
 8007a8a:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <HAL_PCD_MspInit+0x48>)
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a92:	60fb      	str	r3, [r7, #12]
 8007a94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007a96:	2200      	movs	r2, #0
 8007a98:	2100      	movs	r1, #0
 8007a9a:	2014      	movs	r0, #20
 8007a9c:	f7fa f9d9 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007aa0:	2014      	movs	r0, #20
 8007aa2:	f7fa f9f2 	bl	8001e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	40005c00 	.word	0x40005c00
 8007ab4:	40021000 	.word	0x40021000

08007ab8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007acc:	4619      	mov	r1, r3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	f7fe fc6f 	bl	80063b2 <USBD_LL_SetupStage>
}
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007aee:	78fb      	ldrb	r3, [r7, #3]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	015b      	lsls	r3, r3, #5
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	4619      	mov	r1, r3
 8007b00:	f7fe fca2 	bl	8006448 <USBD_LL_DataOutStage>
}
 8007b04:	bf00      	nop
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	015b      	lsls	r3, r3, #5
 8007b24:	4413      	add	r3, r2
 8007b26:	333c      	adds	r3, #60	; 0x3c
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f7fe fcfc 	bl	800652a <USBD_LL_DataInStage>
}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe fe0c 	bl	8006766 <USBD_LL_SOF>
}
 8007b4e:	bf00      	nop
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b084      	sub	sp, #16
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d001      	beq.n	8007b6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b6a:	f7f9 f947 	bl	8000dfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007b74:	7bfa      	ldrb	r2, [r7, #15]
 8007b76:	4611      	mov	r1, r2
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fe fdbc 	bl	80066f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fe fd75 	bl	8006674 <USBD_LL_Reset>
}
 8007b8a:	bf00      	nop
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe fdb6 	bl	8006714 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bb0:	4b04      	ldr	r3, [pc, #16]	; (8007bc4 <HAL_PCD_SuspendCallback+0x30>)
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	4a03      	ldr	r2, [pc, #12]	; (8007bc4 <HAL_PCD_SuspendCallback+0x30>)
 8007bb6:	f043 0306 	orr.w	r3, r3, #6
 8007bba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	e000ed00 	.word	0xe000ed00

08007bc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fdb0 	bl	800673c <USBD_LL_Resume>
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007bec:	4a28      	ldr	r2, [pc, #160]	; (8007c90 <USBD_LL_Init+0xac>)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a26      	ldr	r2, [pc, #152]	; (8007c90 <USBD_LL_Init+0xac>)
 8007bf8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007bfc:	4b24      	ldr	r3, [pc, #144]	; (8007c90 <USBD_LL_Init+0xac>)
 8007bfe:	4a25      	ldr	r2, [pc, #148]	; (8007c94 <USBD_LL_Init+0xb0>)
 8007c00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007c02:	4b23      	ldr	r3, [pc, #140]	; (8007c90 <USBD_LL_Init+0xac>)
 8007c04:	2208      	movs	r2, #8
 8007c06:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007c08:	4b21      	ldr	r3, [pc, #132]	; (8007c90 <USBD_LL_Init+0xac>)
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007c0e:	4b20      	ldr	r3, [pc, #128]	; (8007c90 <USBD_LL_Init+0xac>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007c14:	4b1e      	ldr	r3, [pc, #120]	; (8007c90 <USBD_LL_Init+0xac>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007c1a:	4b1d      	ldr	r3, [pc, #116]	; (8007c90 <USBD_LL_Init+0xac>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007c20:	481b      	ldr	r0, [pc, #108]	; (8007c90 <USBD_LL_Init+0xac>)
 8007c22:	f7fa fad6 	bl	80021d2 <HAL_PCD_Init>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007c2c:	f7f9 f8e6 	bl	8000dfc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c36:	2318      	movs	r3, #24
 8007c38:	2200      	movs	r2, #0
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	f7fb f96e 	bl	8002f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c46:	2358      	movs	r3, #88	; 0x58
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2180      	movs	r1, #128	; 0x80
 8007c4c:	f7fb f966 	bl	8002f1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c56:	23c0      	movs	r3, #192	; 0xc0
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2181      	movs	r1, #129	; 0x81
 8007c5c:	f7fb f95e 	bl	8002f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c66:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	f7fb f955 	bl	8002f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	2182      	movs	r1, #130	; 0x82
 8007c80:	f7fb f94c 	bl	8002f1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20000df0 	.word	0x20000df0
 8007c94:	40005c00 	.word	0x40005c00

08007c98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fa fb70 	bl	8002394 <HAL_PCD_Start>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 f948 	bl	8007f50 <USBD_Get_USB_Status>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	4608      	mov	r0, r1
 8007cd8:	4611      	mov	r1, r2
 8007cda:	461a      	mov	r2, r3
 8007cdc:	4603      	mov	r3, r0
 8007cde:	70fb      	strb	r3, [r7, #3]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70bb      	strb	r3, [r7, #2]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007cf6:	78bb      	ldrb	r3, [r7, #2]
 8007cf8:	883a      	ldrh	r2, [r7, #0]
 8007cfa:	78f9      	ldrb	r1, [r7, #3]
 8007cfc:	f7fa fca3 	bl	8002646 <HAL_PCD_EP_Open>
 8007d00:	4603      	mov	r3, r0
 8007d02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 f922 	bl	8007f50 <USBD_Get_USB_Status>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d34:	78fa      	ldrb	r2, [r7, #3]
 8007d36:	4611      	mov	r1, r2
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fa fce4 	bl	8002706 <HAL_PCD_EP_Close>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 f903 	bl	8007f50 <USBD_Get_USB_Status>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d72:	78fa      	ldrb	r2, [r7, #3]
 8007d74:	4611      	mov	r1, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fa fd8e 	bl	8002898 <HAL_PCD_EP_SetStall>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 f8e4 	bl	8007f50 <USBD_Get_USB_Status>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	460b      	mov	r3, r1
 8007da0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	4611      	mov	r1, r2
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fa fdc9 	bl	800294c <HAL_PCD_EP_ClrStall>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 f8c5 	bl	8007f50 <USBD_Get_USB_Status>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007de6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	da08      	bge.n	8007e02 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	015b      	lsls	r3, r3, #5
 8007dfa:	4413      	add	r3, r2
 8007dfc:	332a      	adds	r3, #42	; 0x2a
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	e008      	b.n	8007e14 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007e02:	78fb      	ldrb	r3, [r7, #3]
 8007e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	015b      	lsls	r3, r3, #5
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007e12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bc80      	pop	{r7}
 8007e1c:	4770      	bx	lr

08007e1e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	460b      	mov	r3, r1
 8007e28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e38:	78fa      	ldrb	r2, [r7, #3]
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fa fbdd 	bl	80025fc <HAL_PCD_SetAddress>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 f881 	bl	8007f50 <USBD_Get_USB_Status>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	607a      	str	r2, [r7, #4]
 8007e66:	461a      	mov	r2, r3
 8007e68:	460b      	mov	r3, r1
 8007e6a:	72fb      	strb	r3, [r7, #11]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e7e:	893b      	ldrh	r3, [r7, #8]
 8007e80:	7af9      	ldrb	r1, [r7, #11]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	f7fa fccf 	bl	8002826 <HAL_PCD_EP_Transmit>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 f85e 	bl	8007f50 <USBD_Get_USB_Status>
 8007e94:	4603      	mov	r3, r0
 8007e96:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007e98:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b086      	sub	sp, #24
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	461a      	mov	r2, r3
 8007eae:	460b      	mov	r3, r1
 8007eb0:	72fb      	strb	r3, [r7, #11]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ec4:	893b      	ldrh	r3, [r7, #8]
 8007ec6:	7af9      	ldrb	r1, [r7, #11]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	f7fa fc5e 	bl	800278a <HAL_PCD_EP_Receive>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 f83b 	bl	8007f50 <USBD_Get_USB_Status>
 8007eda:	4603      	mov	r3, r0
 8007edc:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8007ede:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007efa:	78fa      	ldrb	r2, [r7, #3]
 8007efc:	4611      	mov	r1, r2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fa fc7d 	bl	80027fe <HAL_PCD_EP_GetRxCount>
 8007f04:	4603      	mov	r3, r0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f18:	4b02      	ldr	r3, [pc, #8]	; (8007f24 <USBD_static_malloc+0x14>)
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bc80      	pop	{r7}
 8007f22:	4770      	bx	lr
 8007f24:	200001c0 	.word	0x200001c0

08007f28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]

}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc80      	pop	{r7}
 8007f38:	4770      	bx	lr

08007f3a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	460b      	mov	r3, r1
 8007f44:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr

08007f50 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f5e:	79fb      	ldrb	r3, [r7, #7]
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d817      	bhi.n	8007f94 <USBD_Get_USB_Status+0x44>
 8007f64:	a201      	add	r2, pc, #4	; (adr r2, 8007f6c <USBD_Get_USB_Status+0x1c>)
 8007f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6a:	bf00      	nop
 8007f6c:	08007f7d 	.word	0x08007f7d
 8007f70:	08007f83 	.word	0x08007f83
 8007f74:	08007f89 	.word	0x08007f89
 8007f78:	08007f8f 	.word	0x08007f8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f80:	e00b      	b.n	8007f9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f82:	2302      	movs	r3, #2
 8007f84:	73fb      	strb	r3, [r7, #15]
    break;
 8007f86:	e008      	b.n	8007f9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f8c:	e005      	b.n	8007f9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f8e:	2302      	movs	r3, #2
 8007f90:	73fb      	strb	r3, [r7, #15]
    break;
 8007f92:	e002      	b.n	8007f9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f94:	2302      	movs	r3, #2
 8007f96:	73fb      	strb	r3, [r7, #15]
    break;
 8007f98:	bf00      	nop
  }
  return usb_status;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3714      	adds	r7, #20
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bc80      	pop	{r7}
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop

08007fa8 <__libc_init_array>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	2500      	movs	r5, #0
 8007fac:	4e0c      	ldr	r6, [pc, #48]	; (8007fe0 <__libc_init_array+0x38>)
 8007fae:	4c0d      	ldr	r4, [pc, #52]	; (8007fe4 <__libc_init_array+0x3c>)
 8007fb0:	1ba4      	subs	r4, r4, r6
 8007fb2:	10a4      	asrs	r4, r4, #2
 8007fb4:	42a5      	cmp	r5, r4
 8007fb6:	d109      	bne.n	8007fcc <__libc_init_array+0x24>
 8007fb8:	f000 f82e 	bl	8008018 <_init>
 8007fbc:	2500      	movs	r5, #0
 8007fbe:	4e0a      	ldr	r6, [pc, #40]	; (8007fe8 <__libc_init_array+0x40>)
 8007fc0:	4c0a      	ldr	r4, [pc, #40]	; (8007fec <__libc_init_array+0x44>)
 8007fc2:	1ba4      	subs	r4, r4, r6
 8007fc4:	10a4      	asrs	r4, r4, #2
 8007fc6:	42a5      	cmp	r5, r4
 8007fc8:	d105      	bne.n	8007fd6 <__libc_init_array+0x2e>
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fd0:	4798      	blx	r3
 8007fd2:	3501      	adds	r5, #1
 8007fd4:	e7ee      	b.n	8007fb4 <__libc_init_array+0xc>
 8007fd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fda:	4798      	blx	r3
 8007fdc:	3501      	adds	r5, #1
 8007fde:	e7f2      	b.n	8007fc6 <__libc_init_array+0x1e>
 8007fe0:	080080c4 	.word	0x080080c4
 8007fe4:	080080c4 	.word	0x080080c4
 8007fe8:	080080c4 	.word	0x080080c4
 8007fec:	080080c8 	.word	0x080080c8

08007ff0 <memcpy>:
 8007ff0:	b510      	push	{r4, lr}
 8007ff2:	1e43      	subs	r3, r0, #1
 8007ff4:	440a      	add	r2, r1
 8007ff6:	4291      	cmp	r1, r2
 8007ff8:	d100      	bne.n	8007ffc <memcpy+0xc>
 8007ffa:	bd10      	pop	{r4, pc}
 8007ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008004:	e7f7      	b.n	8007ff6 <memcpy+0x6>

08008006 <memset>:
 8008006:	4603      	mov	r3, r0
 8008008:	4402      	add	r2, r0
 800800a:	4293      	cmp	r3, r2
 800800c:	d100      	bne.n	8008010 <memset+0xa>
 800800e:	4770      	bx	lr
 8008010:	f803 1b01 	strb.w	r1, [r3], #1
 8008014:	e7f9      	b.n	800800a <memset+0x4>
	...

08008018 <_init>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	bf00      	nop
 800801c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801e:	bc08      	pop	{r3}
 8008020:	469e      	mov	lr, r3
 8008022:	4770      	bx	lr

08008024 <_fini>:
 8008024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008026:	bf00      	nop
 8008028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802a:	bc08      	pop	{r3}
 800802c:	469e      	mov	lr, r3
 800802e:	4770      	bx	lr
