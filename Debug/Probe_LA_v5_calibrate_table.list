
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800ac70  0800ac70  0001ac70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adac  0800adac  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800adac  0800adac  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800adac  0800adac  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adac  0800adac  0001adac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adb0  0800adb0  0001adb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800adb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b8  200001f0  0800afa4  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015a8  0800afa4  000215a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4c4  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a86  00000000  00000000  0003f6dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00044168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  00045828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d5aa  00000000  00000000  00046cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd74  00000000  00000000  0006427a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097687  00000000  00000000  0007ffee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00117675  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065fc  00000000  00000000  001176c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ac58 	.word	0x0800ac58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	0800ac58 	.word	0x0800ac58

0800014c <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2102      	movs	r1, #2
 8000154:	4804      	ldr	r0, [pc, #16]	; (8000168 <ToggleLDAC+0x1c>)
 8000156:	f002 fac0 	bl	80026da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 800015a:	2201      	movs	r2, #1
 800015c:	2102      	movs	r1, #2
 800015e:	4802      	ldr	r0, [pc, #8]	; (8000168 <ToggleLDAC+0x1c>)
 8000160:	f002 fabb 	bl	80026da <HAL_GPIO_WritePin>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}
 8000168:	40010800 	.word	0x40010800

0800016c <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
 8000174:	460b      	mov	r3, r1
 8000176:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	2110      	movs	r1, #16
 800017c:	4808      	ldr	r0, [pc, #32]	; (80001a0 <SendSPI+0x34>)
 800017e:	f002 faac 	bl	80026da <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000182:	1cb9      	adds	r1, r7, #2
 8000184:	2301      	movs	r3, #1
 8000186:	2201      	movs	r2, #1
 8000188:	6878      	ldr	r0, [r7, #4]
 800018a:	f004 fc53 	bl	8004a34 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 800018e:	2201      	movs	r2, #1
 8000190:	2110      	movs	r1, #16
 8000192:	4803      	ldr	r0, [pc, #12]	; (80001a0 <SendSPI+0x34>)
 8000194:	f002 faa1 	bl	80026da <HAL_GPIO_WritePin>

}
 8000198:	bf00      	nop
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	40010800 	.word	0x40010800

080001a4 <DAC_AD5322_Ch1Ch2>:
  	SendSPI(pSPI,out);
  	SendSPI(pSPI,out);
  	ToggleLDAC();
}
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b086      	sub	sp, #24
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
 80001ac:	460b      	mov	r3, r1
 80001ae:	807b      	strh	r3, [r7, #2]
 80001b0:	4613      	mov	r3, r2
 80001b2:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 80001b4:	887b      	ldrh	r3, [r7, #2]
 80001b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001ba:	d302      	bcc.n	80001c2 <DAC_AD5322_Ch1Ch2+0x1e>
 80001bc:	f640 73ff 	movw	r3, #4095	; 0xfff
 80001c0:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 80001c2:	883b      	ldrh	r3, [r7, #0]
 80001c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001c8:	d302      	bcc.n	80001d0 <DAC_AD5322_Ch1Ch2+0x2c>
 80001ca:	f640 73ff 	movw	r3, #4095	; 0xfff
 80001ce:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 80001d0:	2300      	movs	r3, #0
 80001d2:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 80001d4:	2301      	movs	r3, #1
 80001d6:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 80001d8:	2300      	movs	r3, #0
 80001da:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 80001dc:	2300      	movs	r3, #0
 80001de:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 80001e0:	8afb      	ldrh	r3, [r7, #22]
 80001e2:	03db      	lsls	r3, r3, #15
 80001e4:	b21a      	sxth	r2, r3
 80001e6:	8abb      	ldrh	r3, [r7, #20]
 80001e8:	039b      	lsls	r3, r3, #14
 80001ea:	b21b      	sxth	r3, r3
 80001ec:	4313      	orrs	r3, r2
 80001ee:	b21a      	sxth	r2, r3
 80001f0:	8a7b      	ldrh	r3, [r7, #18]
 80001f2:	035b      	lsls	r3, r3, #13
 80001f4:	b21b      	sxth	r3, r3
 80001f6:	4313      	orrs	r3, r2
 80001f8:	b21a      	sxth	r2, r3
 80001fa:	8a3b      	ldrh	r3, [r7, #16]
 80001fc:	031b      	lsls	r3, r3, #12
 80001fe:	b21b      	sxth	r3, r3
 8000200:	4313      	orrs	r3, r2
 8000202:	b21b      	sxth	r3, r3
 8000204:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000206:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800020a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800020e:	f023 030f 	bic.w	r3, r3, #15
 8000212:	b21a      	sxth	r2, r3
 8000214:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800021c:	b21b      	sxth	r3, r3
 800021e:	4313      	orrs	r3, r2
 8000220:	b21b      	sxth	r3, r3
 8000222:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000224:	89bb      	ldrh	r3, [r7, #12]
 8000226:	4619      	mov	r1, r3
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ff9f 	bl	800016c <SendSPI>
  	SendSPI(pSPI,out);
 800022e:	89bb      	ldrh	r3, [r7, #12]
 8000230:	4619      	mov	r1, r3
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f7ff ff9a 	bl	800016c <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000238:	2301      	movs	r3, #1
 800023a:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 800023c:	2301      	movs	r3, #1
 800023e:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000240:	2300      	movs	r3, #0
 8000242:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000244:	2300      	movs	r3, #0
 8000246:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000248:	8afb      	ldrh	r3, [r7, #22]
 800024a:	03db      	lsls	r3, r3, #15
 800024c:	b21a      	sxth	r2, r3
 800024e:	8abb      	ldrh	r3, [r7, #20]
 8000250:	039b      	lsls	r3, r3, #14
 8000252:	b21b      	sxth	r3, r3
 8000254:	4313      	orrs	r3, r2
 8000256:	b21a      	sxth	r2, r3
 8000258:	8a7b      	ldrh	r3, [r7, #18]
 800025a:	035b      	lsls	r3, r3, #13
 800025c:	b21b      	sxth	r3, r3
 800025e:	4313      	orrs	r3, r2
 8000260:	b21a      	sxth	r2, r3
 8000262:	8a3b      	ldrh	r3, [r7, #16]
 8000264:	031b      	lsls	r3, r3, #12
 8000266:	b21b      	sxth	r3, r3
 8000268:	4313      	orrs	r3, r2
 800026a:	b21b      	sxth	r3, r3
 800026c:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 800026e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000272:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000276:	f023 030f 	bic.w	r3, r3, #15
 800027a:	b21a      	sxth	r2, r3
 800027c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000284:	b21b      	sxth	r3, r3
 8000286:	4313      	orrs	r3, r2
 8000288:	b21b      	sxth	r3, r3
 800028a:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 800028c:	89bb      	ldrh	r3, [r7, #12]
 800028e:	4619      	mov	r1, r3
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f7ff ff6b 	bl	800016c <SendSPI>
  	SendSPI(pSPI,out);
 8000296:	89bb      	ldrh	r3, [r7, #12]
 8000298:	4619      	mov	r1, r3
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f7ff ff66 	bl	800016c <SendSPI>
  	ToggleLDAC();
 80002a0:	f7ff ff54 	bl	800014c <ToggleLDAC>
}
 80002a4:	bf00      	nop
 80002a6:	3718      	adds	r7, #24
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <flash_fill_calibTable>:
/*---------------------------------------------------------------------------*/
/*
 * @brief   Test function
 */
void flash_fill_calibTable(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < 254; ++i) {
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	e007      	b.n	80002c8 <flash_fill_calibTable+0x1c>
        DevNVRAM.sector.data[i] = i;
 80002b8:	490c      	ldr	r1, [pc, #48]	; (80002ec <flash_fill_calibTable+0x40>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint32_t i = 0; i < 254; ++i) {
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	3301      	adds	r3, #1
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2bfd      	cmp	r3, #253	; 0xfd
 80002cc:	d9f4      	bls.n	80002b8 <flash_fill_calibTable+0xc>
    }
    DevNVRAM.sector.CheckSum = 0xAAAAAAAA;
 80002ce:	4b07      	ldr	r3, [pc, #28]	; (80002ec <flash_fill_calibTable+0x40>)
 80002d0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80002d4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
    DevNVRAM.sector.NWrite = 0;
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <flash_fill_calibTable+0x40>)
 80002da:	2200      	movs	r2, #0
 80002dc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	200004ec 	.word	0x200004ec

080002f0 <flash_write_calibTable>:
/*
 * @brief   Write calibration table into flash memory
 * @retval  HAL Status
 */
HAL_StatusTypeDef flash_write_calibTable(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b088      	sub	sp, #32
 80002f4:	af00      	add	r7, sp, #0
    /* Create some variables */
    volatile uint32_t   addr    = FLASH_TABLE_START_ADDR;
 80002f6:	4b45      	ldr	r3, [pc, #276]	; (800040c <flash_write_calibTable+0x11c>)
 80002f8:	617b      	str	r3, [r7, #20]
    uint32_t            err     = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	613b      	str	r3, [r7, #16]
    uint32_t            index   = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	61fb      	str	r3, [r7, #28]
    uint8_t             status  = HAL_OK;
 8000302:	2300      	movs	r3, #0
 8000304:	76fb      	strb	r3, [r7, #27]

    /* Compare flash and ram content */
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8000306:	e010      	b.n	800032a <flash_write_calibTable+0x3a>
        if ( DevNVRAM.data32[index] != *(uint32_t *)addr ) {
 8000308:	4a41      	ldr	r2, [pc, #260]	; (8000410 <flash_write_calibTable+0x120>)
 800030a:	69fb      	ldr	r3, [r7, #28]
 800030c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	429a      	cmp	r2, r3
 8000316:	d002      	beq.n	800031e <flash_write_calibTable+0x2e>
            ++err;
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	3301      	adds	r3, #1
 800031c:	613b      	str	r3, [r7, #16]
        }
        index += 1;
 800031e:	69fb      	ldr	r3, [r7, #28]
 8000320:	3301      	adds	r3, #1
 8000322:	61fb      	str	r3, [r7, #28]
        addr += 4;
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	3304      	adds	r3, #4
 8000328:	617b      	str	r3, [r7, #20]
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	4a39      	ldr	r2, [pc, #228]	; (8000414 <flash_write_calibTable+0x124>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d9ea      	bls.n	8000308 <flash_write_calibTable+0x18>
    }

    /* If there are differencies -> write new data in flash */
    if (err > 0) {
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d063      	beq.n	8000400 <flash_write_calibTable+0x110>
        /* Unlock flash */
        if ( HAL_FLASH_Unlock() != HAL_OK ) {
 8000338:	f001 fea4 	bl	8002084 <HAL_FLASH_Unlock>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d003      	beq.n	800034a <flash_write_calibTable+0x5a>
            status = HAL_ERROR;
 8000342:	2301      	movs	r3, #1
 8000344:	76fb      	strb	r3, [r7, #27]
            return status;
 8000346:	7efb      	ldrb	r3, [r7, #27]
 8000348:	e05b      	b.n	8000402 <flash_write_calibTable+0x112>
        }

        /* Erase flash */
        FLASH_EraseInitTypeDef EraseInitStruct = {
 800034a:	463b      	mov	r3, r7
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	605a      	str	r2, [r3, #4]
 8000352:	609a      	str	r2, [r3, #8]
 8000354:	60da      	str	r2, [r3, #12]
 8000356:	4b2d      	ldr	r3, [pc, #180]	; (800040c <flash_write_calibTable+0x11c>)
 8000358:	60bb      	str	r3, [r7, #8]
 800035a:	2301      	movs	r3, #1
 800035c:	60fb      	str	r3, [r7, #12]
                .TypeErase      = FLASH_TYPEERASE_PAGES,
                .PageAddress    = FLASH_TABLE_START_ADDR,
                .NbPages        = 1
        };
        if ( HAL_FLASHEx_Erase(&EraseInitStruct, &err) != HAL_OK ) {
 800035e:	f107 0210 	add.w	r2, r7, #16
 8000362:	463b      	mov	r3, r7
 8000364:	4611      	mov	r1, r2
 8000366:	4618      	mov	r0, r3
 8000368:	f001 ff74 	bl	8002254 <HAL_FLASHEx_Erase>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d003      	beq.n	800037a <flash_write_calibTable+0x8a>
            status = HAL_ERROR;
 8000372:	2301      	movs	r3, #1
 8000374:	76fb      	strb	r3, [r7, #27]
            return status;
 8000376:	7efb      	ldrb	r3, [r7, #27]
 8000378:	e043      	b.n	8000402 <flash_write_calibTable+0x112>
        }
        if ( err != 0xFFFFFFFF ) {
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000380:	d003      	beq.n	800038a <flash_write_calibTable+0x9a>
            status = HAL_ERROR;
 8000382:	2301      	movs	r3, #1
 8000384:	76fb      	strb	r3, [r7, #27]
            return status;
 8000386:	7efb      	ldrb	r3, [r7, #27]
 8000388:	e03b      	b.n	8000402 <flash_write_calibTable+0x112>
        }

        /* Reset variables */
        addr    = FLASH_TABLE_START_ADDR;
 800038a:	4b20      	ldr	r3, [pc, #128]	; (800040c <flash_write_calibTable+0x11c>)
 800038c:	617b      	str	r3, [r7, #20]
        err     = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
        index   = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	61fb      	str	r3, [r7, #28]
        /* Increase number of rewritings */
        DevNVRAM.sector.NWrite += 1;
 8000396:	4b1e      	ldr	r3, [pc, #120]	; (8000410 <flash_write_calibTable+0x120>)
 8000398:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800039c:	3301      	adds	r3, #1
 800039e:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <flash_write_calibTable+0x120>)
 80003a0:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
        /* Calculate calibration table checksum */
        DevNVRAM.sector.CheckSum = HAL_CRC_Calculate( &hcrc,
 80003a4:	22fe      	movs	r2, #254	; 0xfe
 80003a6:	491a      	ldr	r1, [pc, #104]	; (8000410 <flash_write_calibTable+0x120>)
 80003a8:	481b      	ldr	r0, [pc, #108]	; (8000418 <flash_write_calibTable+0x128>)
 80003aa:	f001 fdc8 	bl	8001f3e <HAL_CRC_Calculate>
 80003ae:	4603      	mov	r3, r0
 80003b0:	4a17      	ldr	r2, [pc, #92]	; (8000410 <flash_write_calibTable+0x120>)
 80003b2:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
                                                      (uint32_t*)&DevNVRAM.calibration_table,
                                                      (sizeof(DevNVRAM.calibration_table)/4) );
        /* Write flash */
        while (addr < FLASH_TABLE_STOP_ADDR) {
 80003b6:	e01d      	b.n	80003f4 <flash_write_calibTable+0x104>
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, DevNVRAM.data32[index]) != HAL_OK) {
 80003b8:	6979      	ldr	r1, [r7, #20]
 80003ba:	4a15      	ldr	r2, [pc, #84]	; (8000410 <flash_write_calibTable+0x120>)
 80003bc:	69fb      	ldr	r3, [r7, #28]
 80003be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c2:	461a      	mov	r2, r3
 80003c4:	f04f 0300 	mov.w	r3, #0
 80003c8:	2002      	movs	r0, #2
 80003ca:	f001 fdeb 	bl	8001fa4 <HAL_FLASH_Program>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d002      	beq.n	80003da <flash_write_calibTable+0xea>
                err++;
 80003d4:	693b      	ldr	r3, [r7, #16]
 80003d6:	3301      	adds	r3, #1
 80003d8:	613b      	str	r3, [r7, #16]
            }
            index += 1;
 80003da:	69fb      	ldr	r3, [r7, #28]
 80003dc:	3301      	adds	r3, #1
 80003de:	61fb      	str	r3, [r7, #28]
            addr += 4;
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	3304      	adds	r3, #4
 80003e4:	617b      	str	r3, [r7, #20]
            /* Wait until flash is busy */
            while ( (FLASH->SR & FLASH_SR_BSY) != 0 )
 80003e6:	bf00      	nop
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <flash_write_calibTable+0x12c>)
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d1f9      	bne.n	80003e8 <flash_write_calibTable+0xf8>
        while (addr < FLASH_TABLE_STOP_ADDR) {
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	4a07      	ldr	r2, [pc, #28]	; (8000414 <flash_write_calibTable+0x124>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d9dd      	bls.n	80003b8 <flash_write_calibTable+0xc8>
                ;
        }
        /* Lock flash */
        HAL_FLASH_Lock();
 80003fc:	f001 fe68 	bl	80020d0 <HAL_FLASH_Lock>
    }
    return status;
 8000400:	7efb      	ldrb	r3, [r7, #27]
}
 8000402:	4618      	mov	r0, r3
 8000404:	3720      	adds	r7, #32
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	0801fc00 	.word	0x0801fc00
 8000410:	200004ec 	.word	0x200004ec
 8000414:	0801ffff 	.word	0x0801ffff
 8000418:	200008ec 	.word	0x200008ec
 800041c:	40022000 	.word	0x40022000

08000420 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000428:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800042c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	2b00      	cmp	r3, #0
 8000436:	d013      	beq.n	8000460 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000438:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800043c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000440:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000444:	2b00      	cmp	r3, #0
 8000446:	d00b      	beq.n	8000460 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000448:	e000      	b.n	800044c <ITM_SendChar+0x2c>
    {
      __NOP();
 800044a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800044c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f9      	beq.n	800044a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000456:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	b2d2      	uxtb	r2, r2
 800045e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000460:	687b      	ldr	r3, [r7, #4]
}
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000470:	4b07      	ldr	r3, [pc, #28]	; (8000490 <DWT_Init+0x24>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	4a06      	ldr	r2, [pc, #24]	; (8000490 <DWT_Init+0x24>)
 8000476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800047a:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <DWT_Init+0x28>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <DWT_Init+0x28>)
 8000482:	f043 0301 	orr.w	r3, r3, #1
 8000486:	6013      	str	r3, [r2, #0]
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	e000edf0 	.word	0xe000edf0
 8000494:	e0001000 	.word	0xe0001000

08000498 <_write>:
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
 80004a8:	e009      	b.n	80004be <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	1c5a      	adds	r2, r3, #1
 80004ae:	60ba      	str	r2, [r7, #8]
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff ffb4 	bl	8000420 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	3301      	adds	r3, #1
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	697a      	ldr	r2, [r7, #20]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	dbf1      	blt.n	80004aa <_write+0x12>
	}
	return len;
 80004c6:	687b      	ldr	r3, [r7, #4]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3718      	adds	r7, #24
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <SetAllDAC>:
{
	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table), db);
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
}
void SetAllDAC()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <SetAllDAC+0x18>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <SetAllDAC+0x1c>)
 80004da:	8812      	ldrh	r2, [r2, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	4804      	ldr	r0, [pc, #16]	; (80004f0 <SetAllDAC+0x20>)
 80004e0:	f7ff fe60 	bl	80001a4 <DAC_AD5322_Ch1Ch2>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	2000024c 	.word	0x2000024c
 80004ec:	2000024e 	.word	0x2000024e
 80004f0:	2000096c 	.word	0x2000096c

080004f4 <HAL_TIM_IC_CaptureCallback>:
{
	g_vTIM4_PB6 = 0;
}
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork)
 80004fc:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <HAL_TIM_IC_CaptureCallback+0xb8>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	2b00      	cmp	r3, #0
 8000504:	d027      	beq.n	8000556 <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Instance == TIM3)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a29      	ldr	r2, [pc, #164]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d149      	bne.n	80005a4 <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	7f1b      	ldrb	r3, [r3, #28]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d145      	bne.n	80005a4 <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000518:	2100      	movs	r1, #0
 800051a:	4826      	ldr	r0, [pc, #152]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800051c:	f004 ff5e 	bl	80053dc <HAL_TIM_ReadCapturedValue>
 8000520:	4603      	mov	r3, r0
 8000522:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 8000524:	2104      	movs	r1, #4
 8000526:	4823      	ldr	r0, [pc, #140]	; (80005b4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000528:	f004 ff58 	bl	80053dc <HAL_TIM_ReadCapturedValue>
 800052c:	4603      	mov	r3, r0
 800052e:	81fb      	strh	r3, [r7, #14]
														   TIM_CHANNEL_2);

				TIM3->CNT = 0;
 8000530:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000532:	2200      	movs	r2, #0
 8000534:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 8000536:	8a3a      	ldrh	r2, [r7, #16]
 8000538:	89fb      	ldrh	r3, [r7, #14]
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	b29b      	uxth	r3, r3
 800053e:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 8000540:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000544:	2b00      	cmp	r3, #0
 8000546:	bfb8      	it	lt
 8000548:	425b      	neglt	r3, r3
 800054a:	b29b      	uxth	r3, r3
 800054c:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 800054e:	89ba      	ldrh	r2, [r7, #12]
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000552:	801a      	strh	r2, [r3, #0]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
				g_vTIM4_PB6 = deltaTIM4;
			}
		}
	}
}
 8000554:	e026      	b.n	80005a4 <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a18      	ldr	r2, [pc, #96]	; (80005bc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d121      	bne.n	80005a4 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	7f1b      	ldrb	r3, [r3, #28]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d11d      	bne.n	80005a4 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000568:	2100      	movs	r1, #0
 800056a:	4815      	ldr	r0, [pc, #84]	; (80005c0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800056c:	f004 ff36 	bl	80053dc <HAL_TIM_ReadCapturedValue>
 8000570:	4603      	mov	r3, r0
 8000572:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 8000574:	2104      	movs	r1, #4
 8000576:	4812      	ldr	r0, [pc, #72]	; (80005c0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000578:	f004 ff30 	bl	80053dc <HAL_TIM_ReadCapturedValue>
 800057c:	4603      	mov	r3, r0
 800057e:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000582:	2200      	movs	r2, #0
 8000584:	625a      	str	r2, [r3, #36]	; 0x24
				int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 8000586:	8afa      	ldrh	r2, [r7, #22]
 8000588:	8abb      	ldrh	r3, [r7, #20]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	b29b      	uxth	r3, r3
 800058e:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 8000590:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000594:	2b00      	cmp	r3, #0
 8000596:	bfb8      	it	lt
 8000598:	425b      	neglt	r3, r3
 800059a:	b29b      	uxth	r3, r3
 800059c:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 800059e:	8a7a      	ldrh	r2, [r7, #18]
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80005a2:	801a      	strh	r2, [r3, #0]
}
 80005a4:	bf00      	nop
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000026a 	.word	0x2000026a
 80005b0:	40000400 	.word	0x40000400
 80005b4:	200008f4 	.word	0x200008f4
 80005b8:	2000026c 	.word	0x2000026c
 80005bc:	40000800 	.word	0x40000800
 80005c0:	200004a4 	.word	0x200004a4
 80005c4:	2000026e 	.word	0x2000026e

080005c8 <HAL_ADC_ConvCpltCallback>:
{
	return g_VADC;
}
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <HAL_ADC_ConvCpltCallback+0x28>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d106      	bne.n	80005e8 <HAL_ADC_ConvCpltCallback+0x20>
	{
		g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80005dc:	f001 f884 	bl	80016e8 <HAL_ADC_GetValue>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <HAL_ADC_ConvCpltCallback+0x30>)
 80005e6:	801a      	strh	r2, [r3, #0]
	}
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40012400 	.word	0x40012400
 80005f4:	2000093c 	.word	0x2000093c
 80005f8:	20000270 	.word	0x20000270

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fe81 	bl	8001308 <HAL_Init>

  /* USER CODE BEGIN Init */

/*---------------------------------------------------------------------------*/
#if DWT_INIT
	DWT_Init();
 8000606:	f7ff ff31 	bl	800046c <DWT_Init>
#endif /* DWT_INIT */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f973 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 fb1d 	bl	8000c4c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000612:	f000 fa1f 	bl	8000a54 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000616:	f008 fd41 	bl	800909c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800061a:	f000 f9c9 	bl	80009b0 <MX_ADC1_Init>
  MX_TIM3_Init();
 800061e:	f000 fa51 	bl	8000ac4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000622:	f000 fab1 	bl	8000b88 <MX_TIM4_Init>
  MX_CRC_Init();
 8000626:	f000 fa01 	bl	8000a2c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

/*---------------------------------------------------------------------------*/
#if TEST_UID
  sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 800062a:	4b99      	ldr	r3, [pc, #612]	; (8000890 <main+0x294>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	4b98      	ldr	r3, [pc, #608]	; (8000894 <main+0x298>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	4b97      	ldr	r3, [pc, #604]	; (8000898 <main+0x29c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a96      	ldr	r2, [pc, #600]	; (800089c <main+0x2a0>)
 8000642:	6812      	ldr	r2, [r2, #0]
 8000644:	6812      	ldr	r2, [r2, #0]
 8000646:	9201      	str	r2, [sp, #4]
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	4994      	ldr	r1, [pc, #592]	; (80008a0 <main+0x2a4>)
 8000650:	4894      	ldr	r0, [pc, #592]	; (80008a4 <main+0x2a8>)
 8000652:	f009 f9e7 	bl	8009a24 <siprintf>
  printf(buffer);
 8000656:	4893      	ldr	r0, [pc, #588]	; (80008a4 <main+0x2a8>)
 8000658:	f009 f9cc 	bl	80099f4 <iprintf>
#endif /* TEST_UID */

/*---------------------------------------------------------------------------*/
#if TEST_TIM_CAPTURE
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800065c:	2100      	movs	r1, #0
 800065e:	4892      	ldr	r0, [pc, #584]	; (80008a8 <main+0x2ac>)
 8000660:	f004 fc1a 	bl	8004e98 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000664:	2104      	movs	r1, #4
 8000666:	4890      	ldr	r0, [pc, #576]	; (80008a8 <main+0x2ac>)
 8000668:	f004 fc16 	bl	8004e98 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800066c:	2100      	movs	r1, #0
 800066e:	488f      	ldr	r0, [pc, #572]	; (80008ac <main+0x2b0>)
 8000670:	f004 fc12 	bl	8004e98 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000674:	2104      	movs	r1, #4
 8000676:	488d      	ldr	r0, [pc, #564]	; (80008ac <main+0x2b0>)
 8000678:	f004 fc0e 	bl	8004e98 <HAL_TIM_IC_Start_IT>
#endif /* TEST_TIM_CAPTURE */

/*---------------------------------------------------------------------------*/
#if TEST_DAC
  SetAllDAC();
 800067c:	f7ff ff28 	bl	80004d0 <SetAllDAC>
#endif /* TEST_DAC */

/*---------------------------------------------------------------------------*/
#if TEST_ADC
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000680:	488b      	ldr	r0, [pc, #556]	; (80008b0 <main+0x2b4>)
 8000682:	f001 fa8d 	bl	8001ba0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 8000686:	488a      	ldr	r0, [pc, #552]	; (80008b0 <main+0x2b4>)
 8000688:	f000 ff78 	bl	800157c <HAL_ADC_Start_IT>
#endif /* TEST_ADC */

/*---------------------------------------------------------------------------*/
#if TEST_FLASH_TABLE
  flash_fill_calibTable();
 800068c:	f7ff fe0e 	bl	80002ac <flash_fill_calibTable>
  flash_write_calibTable();
 8000690:	f7ff fe2e 	bl	80002f0 <flash_write_calibTable>
    // TODO: Надо по запросе какая версия калиброчной табцы высылать значения дефолтной таблице...
    //--------------------------------------------------------------------------
*/
#endif /* TEST_FLASH_TABLE */

	uint32_t timme = 0; // для таймера в 10 сек
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// Циклически проверяем соотвествует ли информация в памяти массиву настроек?
		if ((HAL_GetTick() - timme) > 10000) // интервал  10сек
 8000698:	f000 fe8e 	bl	80013b8 <HAL_GetTick>
 800069c:	4602      	mov	r2, r0
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d902      	bls.n	80006b0 <main+0xb4>
				HAL_Delay(100);
				//--------------------------------------------------------------------------
				printf("flash done");
			}*/
#endif /* TEST_FLASH_TABLE */
			timme = HAL_GetTick();
 80006aa:	f000 fe85 	bl	80013b8 <HAL_GetTick>
 80006ae:	60f8      	str	r0, [r7, #12]
		}

//**************************************************************************
#if TEST_READ_BTN //TODO: данная реализация плохо отрабатывает! TODO: Нужно переделать на EXTI+TIM

		uint32_t ms = HAL_GetTick();
 80006b0:	f000 fe82 	bl	80013b8 <HAL_GetTick>
 80006b4:	60b8      	str	r0, [r7, #8]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 80006b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ba:	487e      	ldr	r0, [pc, #504]	; (80008b4 <main+0x2b8>)
 80006bc:	f001 fff6 	bl	80026ac <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	71fb      	strb	r3, [r7, #7]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d113      	bne.n	80006f2 <main+0xf6>
 80006ca:	4b7b      	ldr	r3, [pc, #492]	; (80008b8 <main+0x2bc>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d10f      	bne.n	80006f2 <main+0xf6>
 80006d2:	4b7a      	ldr	r3, [pc, #488]	; (80008bc <main+0x2c0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	2b32      	cmp	r3, #50	; 0x32
 80006dc:	d909      	bls.n	80006f2 <main+0xf6>
		{
			short_state1 = 1;
 80006de:	4b76      	ldr	r3, [pc, #472]	; (80008b8 <main+0x2bc>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 80006e4:	4b76      	ldr	r3, [pc, #472]	; (80008c0 <main+0x2c4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 80006ea:	4a74      	ldr	r2, [pc, #464]	; (80008bc <main+0x2c0>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	e02e      	b.n	8000750 <main+0x154>
		}
		else if (key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d111      	bne.n	800071c <main+0x120>
 80006f8:	4b71      	ldr	r3, [pc, #452]	; (80008c0 <main+0x2c4>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d10d      	bne.n	800071c <main+0x120>
 8000700:	4b6e      	ldr	r3, [pc, #440]	; (80008bc <main+0x2c0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	68ba      	ldr	r2, [r7, #8]
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800070c:	d906      	bls.n	800071c <main+0x120>
		{
			long_state1 = 1;
 800070e:	4b6c      	ldr	r3, [pc, #432]	; (80008c0 <main+0x2c4>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 8000714:	4b6b      	ldr	r3, [pc, #428]	; (80008c4 <main+0x2c8>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	e019      	b.n	8000750 <main+0x154>
		}
		else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d116      	bne.n	8000750 <main+0x154>
 8000722:	4b65      	ldr	r3, [pc, #404]	; (80008b8 <main+0x2bc>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d012      	beq.n	8000750 <main+0x154>
 800072a:	4b64      	ldr	r3, [pc, #400]	; (80008bc <main+0x2c0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	2b32      	cmp	r3, #50	; 0x32
 8000734:	d90c      	bls.n	8000750 <main+0x154>
		{
			short_state1 = 0;
 8000736:	4b60      	ldr	r3, [pc, #384]	; (80008b8 <main+0x2bc>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 800073c:	4a5f      	ldr	r2, [pc, #380]	; (80008bc <main+0x2c0>)
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	6013      	str	r3, [r2, #0]

			if (!long_state1)
 8000742:	4b5f      	ldr	r3, [pc, #380]	; (80008c0 <main+0x2c4>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d102      	bne.n	8000750 <main+0x154>
			{
				// действие на короткое нажатие
				btn1_short_rd = 1;
 800074a:	4b5f      	ldr	r3, [pc, #380]	; (80008c8 <main+0x2cc>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 8000750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000754:	4857      	ldr	r0, [pc, #348]	; (80008b4 <main+0x2b8>)
 8000756:	f001 ffa9 	bl	80026ac <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	71bb      	strb	r3, [r7, #6]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 800075e:	79bb      	ldrb	r3, [r7, #6]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d113      	bne.n	800078c <main+0x190>
 8000764:	4b59      	ldr	r3, [pc, #356]	; (80008cc <main+0x2d0>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10f      	bne.n	800078c <main+0x190>
 800076c:	4b58      	ldr	r3, [pc, #352]	; (80008d0 <main+0x2d4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	68ba      	ldr	r2, [r7, #8]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	2b32      	cmp	r3, #50	; 0x32
 8000776:	d909      	bls.n	800078c <main+0x190>
		{
			short_state2 = 1;
 8000778:	4b54      	ldr	r3, [pc, #336]	; (80008cc <main+0x2d0>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 800077e:	4b55      	ldr	r3, [pc, #340]	; (80008d4 <main+0x2d8>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8000784:	4a52      	ldr	r2, [pc, #328]	; (80008d0 <main+0x2d4>)
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	6013      	str	r3, [r2, #0]
 800078a:	e02e      	b.n	80007ea <main+0x1ee>
		}
		else if (key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d111      	bne.n	80007b6 <main+0x1ba>
 8000792:	4b50      	ldr	r3, [pc, #320]	; (80008d4 <main+0x2d8>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10d      	bne.n	80007b6 <main+0x1ba>
 800079a:	4b4d      	ldr	r3, [pc, #308]	; (80008d0 <main+0x2d4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007a6:	d906      	bls.n	80007b6 <main+0x1ba>
		{
			long_state2 = 1;
 80007a8:	4b4a      	ldr	r3, [pc, #296]	; (80008d4 <main+0x2d8>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 80007ae:	4b4a      	ldr	r3, [pc, #296]	; (80008d8 <main+0x2dc>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
 80007b4:	e019      	b.n	80007ea <main+0x1ee>
		}
		else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d116      	bne.n	80007ea <main+0x1ee>
 80007bc:	4b43      	ldr	r3, [pc, #268]	; (80008cc <main+0x2d0>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d012      	beq.n	80007ea <main+0x1ee>
 80007c4:	4b42      	ldr	r3, [pc, #264]	; (80008d0 <main+0x2d4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	2b32      	cmp	r3, #50	; 0x32
 80007ce:	d90c      	bls.n	80007ea <main+0x1ee>
		{
			short_state2 = 0;
 80007d0:	4b3e      	ldr	r3, [pc, #248]	; (80008cc <main+0x2d0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 80007d6:	4a3e      	ldr	r2, [pc, #248]	; (80008d0 <main+0x2d4>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	6013      	str	r3, [r2, #0]

			if (!long_state2)
 80007dc:	4b3d      	ldr	r3, [pc, #244]	; (80008d4 <main+0x2d8>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d102      	bne.n	80007ea <main+0x1ee>
			{
				// действие на короткое нажатие
				btn2_short_rd = 1;
 80007e4:	4b3d      	ldr	r3, [pc, #244]	; (80008dc <main+0x2e0>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 80007ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ee:	4831      	ldr	r0, [pc, #196]	; (80008b4 <main+0x2b8>)
 80007f0:	f001 ff5c 	bl	80026ac <HAL_GPIO_ReadPin>
 80007f4:	4603      	mov	r3, r0
 80007f6:	717b      	strb	r3, [r7, #5]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 80007f8:	797b      	ldrb	r3, [r7, #5]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d113      	bne.n	8000826 <main+0x22a>
 80007fe:	4b38      	ldr	r3, [pc, #224]	; (80008e0 <main+0x2e4>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10f      	bne.n	8000826 <main+0x22a>
 8000806:	4b37      	ldr	r3, [pc, #220]	; (80008e4 <main+0x2e8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	2b32      	cmp	r3, #50	; 0x32
 8000810:	d909      	bls.n	8000826 <main+0x22a>
		{
			short_state3 = 1;
 8000812:	4b33      	ldr	r3, [pc, #204]	; (80008e0 <main+0x2e4>)
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 8000818:	4b33      	ldr	r3, [pc, #204]	; (80008e8 <main+0x2ec>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 800081e:	4a31      	ldr	r2, [pc, #196]	; (80008e4 <main+0x2e8>)
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	e032      	b.n	800088c <main+0x290>
		}
		else if (key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 8000826:	797b      	ldrb	r3, [r7, #5]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d111      	bne.n	8000850 <main+0x254>
 800082c:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <main+0x2ec>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d10d      	bne.n	8000850 <main+0x254>
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <main+0x2e8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000840:	d906      	bls.n	8000850 <main+0x254>
		{
			long_state3 = 1;
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <main+0x2ec>)
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 8000848:	4b28      	ldr	r3, [pc, #160]	; (80008ec <main+0x2f0>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e01d      	b.n	800088c <main+0x290>
		}
		else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 8000850:	797b      	ldrb	r3, [r7, #5]
 8000852:	2b01      	cmp	r3, #1
 8000854:	f47f af20 	bne.w	8000698 <main+0x9c>
 8000858:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <main+0x2e4>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	f43f af1b 	beq.w	8000698 <main+0x9c>
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <main+0x2e8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	2b32      	cmp	r3, #50	; 0x32
 800086c:	f67f af14 	bls.w	8000698 <main+0x9c>
		{
			short_state3 = 0;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <main+0x2e4>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8000876:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <main+0x2e8>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	6013      	str	r3, [r2, #0]

			if (!long_state3)
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <main+0x2ec>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	f47f af09 	bne.w	8000698 <main+0x9c>
			{
				// действие на короткое нажатие
				btn3_short_rd = 1;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <main+0x2f4>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
	{
 800088c:	e704      	b.n	8000698 <main+0x9c>
 800088e:	bf00      	nop
 8000890:	20000000 	.word	0x20000000
 8000894:	20000004 	.word	0x20000004
 8000898:	20000008 	.word	0x20000008
 800089c:	2000000c 	.word	0x2000000c
 80008a0:	0800ac70 	.word	0x0800ac70
 80008a4:	2000020c 	.word	0x2000020c
 80008a8:	200008f4 	.word	0x200008f4
 80008ac:	200004a4 	.word	0x200004a4
 80008b0:	2000093c 	.word	0x2000093c
 80008b4:	40010c00 	.word	0x40010c00
 80008b8:	20000250 	.word	0x20000250
 80008bc:	20000254 	.word	0x20000254
 80008c0:	20000251 	.word	0x20000251
 80008c4:	20000258 	.word	0x20000258
 80008c8:	20000259 	.word	0x20000259
 80008cc:	2000025a 	.word	0x2000025a
 80008d0:	2000025c 	.word	0x2000025c
 80008d4:	2000025b 	.word	0x2000025b
 80008d8:	20000260 	.word	0x20000260
 80008dc:	20000261 	.word	0x20000261
 80008e0:	20000262 	.word	0x20000262
 80008e4:	20000264 	.word	0x20000264
 80008e8:	20000263 	.word	0x20000263
 80008ec:	20000268 	.word	0x20000268
 80008f0:	20000269 	.word	0x20000269

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fe:	2228      	movs	r2, #40	; 0x28
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f009 f86e 	bl	80099e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000924:	2301      	movs	r3, #1
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000932:	2301      	movs	r3, #1
 8000934:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800093e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000940:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000944:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094a:	4618      	mov	r0, r3
 800094c:	f003 fa6e 	bl	8003e2c <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000956:	f000 fa2f 	bl	8000db8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	230f      	movs	r3, #15
 800095c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2102      	movs	r1, #2
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fcd8 	bl	800432c <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000982:	f000 fa19 	bl	8000db8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000986:	2312      	movs	r3, #18
 8000988:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800098a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800098e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	4618      	mov	r0, r3
 8000998:	f003 fe4e 	bl	8004638 <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009a2:	f000 fa09 	bl	8000db8 <Error_Handler>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3750      	adds	r7, #80	; 0x50
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_ADC1_Init+0x74>)
 80009c2:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <MX_ADC1_Init+0x78>)
 80009c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_ADC1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_ADC1_Init+0x74>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_ADC1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_ADC1_Init+0x74>)
 80009da:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_ADC1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_ADC1_Init+0x74>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <MX_ADC1_Init+0x74>)
 80009ee:	f000 fced 	bl	80013cc <HAL_ADC_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009f8:	f000 f9de 	bl	8000db8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009fc:	2303      	movs	r3, #3
 80009fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000a04:	2302      	movs	r3, #2
 8000a06:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_ADC1_Init+0x74>)
 8000a0e:	f000 ff43 	bl	8001898 <HAL_ADC_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a18:	f000 f9ce 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000093c 	.word	0x2000093c
 8000a28:	40012400 	.word	0x40012400

08000a2c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_CRC_Init+0x20>)
 8000a32:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <MX_CRC_Init+0x24>)
 8000a34:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_CRC_Init+0x20>)
 8000a38:	f001 fa65 	bl	8001f06 <HAL_CRC_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a42:	f000 f9b9 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200008ec 	.word	0x200008ec
 8000a50:	40023000 	.word	0x40023000

08000a54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a5a:	4a19      	ldr	r2, [pc, #100]	; (8000ac0 <MX_SPI1_Init+0x6c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_SPI1_Init+0x68>)
 8000aa2:	220a      	movs	r2, #10
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_SPI1_Init+0x68>)
 8000aa8:	f003 ff40 	bl	800492c <HAL_SPI_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000ab2:	f000 f981 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000096c 	.word	0x2000096c
 8000ac0:	40013000 	.word	0x40013000

08000ac4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <MX_TIM3_Init+0xbc>)
 8000ae2:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <MX_TIM3_Init+0xc0>)
 8000ae4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <MX_TIM3_Init+0xbc>)
 8000ae8:	2247      	movs	r2, #71	; 0x47
 8000aea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aec:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <MX_TIM3_Init+0xbc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <MX_TIM3_Init+0xbc>)
 8000af4:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000af8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_TIM3_Init+0xbc>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_TIM3_Init+0xbc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b06:	481e      	ldr	r0, [pc, #120]	; (8000b80 <MX_TIM3_Init+0xbc>)
 8000b08:	f004 f976 	bl	8004df8 <HAL_TIM_IC_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b12:	f000 f951 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	4619      	mov	r1, r3
 8000b24:	4816      	ldr	r0, [pc, #88]	; (8000b80 <MX_TIM3_Init+0xbc>)
 8000b26:	f004 fe55 	bl	80057d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b30:	f000 f942 	bl	8000db8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b34:	2300      	movs	r3, #0
 8000b36:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b44:	463b      	mov	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_TIM3_Init+0xbc>)
 8000b4c:	f004 fbb2 	bl	80052b4 <HAL_TIM_IC_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b56:	f000 f92f 	bl	8000db8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	2204      	movs	r2, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_TIM3_Init+0xbc>)
 8000b6a:	f004 fba3 	bl	80052b4 <HAL_TIM_IC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000b74:	f000 f920 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200008f4 	.word	0x200008f4
 8000b84:	40000400 	.word	0x40000400

08000b88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <MX_TIM4_Init+0xbc>)
 8000ba6:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <MX_TIM4_Init+0xc0>)
 8000ba8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000baa:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <MX_TIM4_Init+0xbc>)
 8000bac:	2247      	movs	r2, #71	; 0x47
 8000bae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <MX_TIM4_Init+0xbc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <MX_TIM4_Init+0xbc>)
 8000bb8:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000bbc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <MX_TIM4_Init+0xbc>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <MX_TIM4_Init+0xbc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000bca:	481e      	ldr	r0, [pc, #120]	; (8000c44 <MX_TIM4_Init+0xbc>)
 8000bcc:	f004 f914 	bl	8004df8 <HAL_TIM_IC_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000bd6:	f000 f8ef 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4619      	mov	r1, r3
 8000be8:	4816      	ldr	r0, [pc, #88]	; (8000c44 <MX_TIM4_Init+0xbc>)
 8000bea:	f004 fdf3 	bl	80057d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000bf4:	f000 f8e0 	bl	8000db8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480d      	ldr	r0, [pc, #52]	; (8000c44 <MX_TIM4_Init+0xbc>)
 8000c10:	f004 fb50 	bl	80052b4 <HAL_TIM_IC_ConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000c1a:	f000 f8cd 	bl	8000db8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c22:	2302      	movs	r3, #2
 8000c24:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c26:	463b      	mov	r3, r7
 8000c28:	2204      	movs	r2, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_TIM4_Init+0xbc>)
 8000c2e:	f004 fb41 	bl	80052b4 <HAL_TIM_IC_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000c38:	f000 f8be 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200004a4 	.word	0x200004a4
 8000c48:	40000800 	.word	0x40000800

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c60:	4b51      	ldr	r3, [pc, #324]	; (8000da8 <MX_GPIO_Init+0x15c>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a50      	ldr	r2, [pc, #320]	; (8000da8 <MX_GPIO_Init+0x15c>)
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b4e      	ldr	r3, [pc, #312]	; (8000da8 <MX_GPIO_Init+0x15c>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0310 	and.w	r3, r3, #16
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c78:	4b4b      	ldr	r3, [pc, #300]	; (8000da8 <MX_GPIO_Init+0x15c>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a4a      	ldr	r2, [pc, #296]	; (8000da8 <MX_GPIO_Init+0x15c>)
 8000c7e:	f043 0320 	orr.w	r3, r3, #32
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b48      	ldr	r3, [pc, #288]	; (8000da8 <MX_GPIO_Init+0x15c>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0320 	and.w	r3, r3, #32
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b45      	ldr	r3, [pc, #276]	; (8000da8 <MX_GPIO_Init+0x15c>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a44      	ldr	r2, [pc, #272]	; (8000da8 <MX_GPIO_Init+0x15c>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b42      	ldr	r3, [pc, #264]	; (8000da8 <MX_GPIO_Init+0x15c>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca8:	4b3f      	ldr	r3, [pc, #252]	; (8000da8 <MX_GPIO_Init+0x15c>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a3e      	ldr	r2, [pc, #248]	; (8000da8 <MX_GPIO_Init+0x15c>)
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b3c      	ldr	r3, [pc, #240]	; (8000da8 <MX_GPIO_Init+0x15c>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0308 	and.w	r3, r3, #8
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]


  // reset USB DP (D+)
  // инициализируем пин DP как выход
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4835      	ldr	r0, [pc, #212]	; (8000dac <MX_GPIO_Init+0x160>)
 8000cd6:	f001 fb65 	bl	80023a4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // прижимаем DP к "земле"
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce0:	4832      	ldr	r0, [pc, #200]	; (8000dac <MX_GPIO_Init+0x160>)
 8000ce2:	f001 fcfa 	bl	80026da <HAL_GPIO_WritePin>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000cea:	e002      	b.n	8000cf2 <MX_GPIO_Init+0xa6>
 8000cec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cee:	3301      	adds	r3, #1
 8000cf0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cf4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d9f7      	bls.n	8000cec <MX_GPIO_Init+0xa0>

  // переинициализируем пин для работы с USB
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4828      	ldr	r0, [pc, #160]	; (8000dac <MX_GPIO_Init+0x160>)
 8000d0c:	f001 fb4a 	bl	80023a4 <HAL_GPIO_Init>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 8000d10:	2300      	movs	r3, #0
 8000d12:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000d14:	e002      	b.n	8000d1c <MX_GPIO_Init+0xd0>
 8000d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d18:	3301      	adds	r3, #1
 8000d1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d1e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d9f7      	bls.n	8000d16 <MX_GPIO_Init+0xca>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2c:	4820      	ldr	r0, [pc, #128]	; (8000db0 <MX_GPIO_Init+0x164>)
 8000d2e:	f001 fcd4 	bl	80026da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f240 4112 	movw	r1, #1042	; 0x412
 8000d38:	481c      	ldr	r0, [pc, #112]	; (8000dac <MX_GPIO_Init+0x160>)
 8000d3a:	f001 fcce 	bl	80026da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2104      	movs	r1, #4
 8000d42:	481a      	ldr	r0, [pc, #104]	; (8000dac <MX_GPIO_Init+0x160>)
 8000d44:	f001 fcc9 	bl	80026da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2302      	movs	r3, #2
 8000d58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4813      	ldr	r0, [pc, #76]	; (8000db0 <MX_GPIO_Init+0x164>)
 8000d62:	f001 fb1f 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 8000d66:	f240 4316 	movw	r3, #1046	; 0x416
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2302      	movs	r3, #2
 8000d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	480b      	ldr	r0, [pc, #44]	; (8000dac <MX_GPIO_Init+0x160>)
 8000d80:	f001 fb10 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000d84:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4806      	ldr	r0, [pc, #24]	; (8000db4 <MX_GPIO_Init+0x168>)
 8000d9a:	f001 fb03 	bl	80023a4 <HAL_GPIO_Init>

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010800 	.word	0x40010800
 8000db0:	40011000 	.word	0x40011000
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_MspInit+0x5c>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <HAL_MspInit+0x5c>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6193      	str	r3, [r2, #24]
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_MspInit+0x5c>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_MspInit+0x5c>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_MspInit+0x5c>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	61d3      	str	r3, [r2, #28]
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_MspInit+0x5c>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_MspInit+0x60>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <HAL_MspInit+0x60>)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010000 	.word	0x40010000

08000e28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <HAL_ADC_MspInit+0x7c>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d129      	bne.n	8000e9c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e48:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_ADC_MspInit+0x80>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <HAL_ADC_MspInit+0x80>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_ADC_MspInit+0x80>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_ADC_MspInit+0x80>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <HAL_ADC_MspInit+0x80>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_ADC_MspInit+0x80>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e78:	2308      	movs	r3, #8
 8000e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	4619      	mov	r1, r3
 8000e86:	4809      	ldr	r0, [pc, #36]	; (8000eac <HAL_ADC_MspInit+0x84>)
 8000e88:	f001 fa8c 	bl	80023a4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2012      	movs	r0, #18
 8000e92:	f001 f802 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e96:	2012      	movs	r0, #18
 8000e98:	f001 f81b 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40012400 	.word	0x40012400
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010800 	.word	0x40010800

08000eb0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <HAL_CRC_MspInit+0x34>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d10b      	bne.n	8000eda <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_CRC_MspInit+0x38>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_CRC_MspInit+0x38>)
 8000ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ecc:	6153      	str	r3, [r2, #20]
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_CRC_MspInit+0x38>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40023000 	.word	0x40023000
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a15      	ldr	r2, [pc, #84]	; (8000f5c <HAL_SPI_MspInit+0x70>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d123      	bne.n	8000f54 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_SPI_MspInit+0x74>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <HAL_SPI_MspInit+0x74>)
 8000f12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_SPI_MspInit+0x74>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_SPI_MspInit+0x74>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_SPI_MspInit+0x74>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_SPI_MspInit+0x74>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8000f3c:	23a0      	movs	r3, #160	; 0xa0
 8000f3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_SPI_MspInit+0x78>)
 8000f50:	f001 fa28 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40013000 	.word	0x40013000
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010800 	.word	0x40010800

08000f68 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a3b      	ldr	r2, [pc, #236]	; (8001070 <HAL_TIM_IC_MspInit+0x108>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d13e      	bne.n	8001006 <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f88:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <HAL_TIM_IC_MspInit+0x10c>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	4a39      	ldr	r2, [pc, #228]	; (8001074 <HAL_TIM_IC_MspInit+0x10c>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <HAL_TIM_IC_MspInit+0x10c>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	4b34      	ldr	r3, [pc, #208]	; (8001074 <HAL_TIM_IC_MspInit+0x10c>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a33      	ldr	r2, [pc, #204]	; (8001074 <HAL_TIM_IC_MspInit+0x10c>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b31      	ldr	r3, [pc, #196]	; (8001074 <HAL_TIM_IC_MspInit+0x10c>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	482b      	ldr	r0, [pc, #172]	; (8001078 <HAL_TIM_IC_MspInit+0x110>)
 8000fcc:	f001 f9ea 	bl	80023a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000fd0:	4b2a      	ldr	r3, [pc, #168]	; (800107c <HAL_TIM_IC_MspInit+0x114>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fee:	4a23      	ldr	r2, [pc, #140]	; (800107c <HAL_TIM_IC_MspInit+0x114>)
 8000ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff2:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	201d      	movs	r0, #29
 8000ffa:	f000 ff4e 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ffe:	201d      	movs	r0, #29
 8001000:	f000 ff67 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001004:	e030      	b.n	8001068 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1d      	ldr	r2, [pc, #116]	; (8001080 <HAL_TIM_IC_MspInit+0x118>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d12b      	bne.n	8001068 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001010:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_TIM_IC_MspInit+0x10c>)
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_TIM_IC_MspInit+0x10c>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	61d3      	str	r3, [r2, #28]
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_TIM_IC_MspInit+0x10c>)
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_TIM_IC_MspInit+0x10c>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <HAL_TIM_IC_MspInit+0x10c>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_TIM_IC_MspInit+0x10c>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001040:	2340      	movs	r3, #64	; 0x40
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	4809      	ldr	r0, [pc, #36]	; (8001078 <HAL_TIM_IC_MspInit+0x110>)
 8001054:	f001 f9a6 	bl	80023a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	201e      	movs	r0, #30
 800105e:	f000 ff1c 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001062:	201e      	movs	r0, #30
 8001064:	f000 ff35 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
}
 8001068:	bf00      	nop
 800106a:	3730      	adds	r7, #48	; 0x30
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40000400 	.word	0x40000400
 8001074:	40021000 	.word	0x40021000
 8001078:	40010c00 	.word	0x40010c00
 800107c:	40010000 	.word	0x40010000
 8001080:	40000800 	.word	0x40000800

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8001094:	4806      	ldr	r0, [pc, #24]	; (80010b0 <HardFault_Handler+0x20>)
 8001096:	f008 fcad 	bl	80099f4 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <HardFault_Handler+0x20>)
 800109c:	f008 fcaa 	bl	80099f4 <iprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a6:	4803      	ldr	r0, [pc, #12]	; (80010b4 <HardFault_Handler+0x24>)
 80010a8:	f001 fb17 	bl	80026da <HAL_GPIO_WritePin>
	  printf("HardFault_IRQn");
 80010ac:	e7f5      	b.n	800109a <HardFault_Handler+0xa>
 80010ae:	bf00      	nop
 80010b0:	0800ac84 	.word	0x0800ac84
 80010b4:	40011000 	.word	0x40011000

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f2:	f000 f94f 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <ADC1_2_IRQHandler+0x10>)
 8001102:	f000 fafd 	bl	8001700 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000093c 	.word	0x2000093c

08001110 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001116:	f001 fc29 	bl	800296c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200012ac 	.word	0x200012ac

08001124 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <TIM3_IRQHandler+0x10>)
 800112a:	f003 ffbb 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200008f4 	.word	0x200008f4

08001138 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <TIM4_IRQHandler+0x10>)
 800113e:	f003 ffb1 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200004a4 	.word	0x200004a4

0800114c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e00a      	b.n	8001174 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800115e:	f3af 8000 	nop.w
 8001162:	4601      	mov	r1, r0
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	60ba      	str	r2, [r7, #8]
 800116a:	b2ca      	uxtb	r2, r1
 800116c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	429a      	cmp	r2, r3
 800117a:	dbf0      	blt.n	800115e <_read+0x12>
	}

return len;
 800117c:	687b      	ldr	r3, [r7, #4]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
	return -1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ac:	605a      	str	r2, [r3, #4]
	return 0;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <_isatty>:

int _isatty(int file)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	return 1;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b085      	sub	sp, #20
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
	return 0;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
	...

080011e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <_sbrk+0x50>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x16>
		heap_end = &end;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <_sbrk+0x50>)
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <_sbrk+0x54>)
 80011fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <_sbrk+0x50>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <_sbrk+0x50>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	466a      	mov	r2, sp
 800120e:	4293      	cmp	r3, r2
 8001210:	d907      	bls.n	8001222 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001212:	f008 fbbd 	bl	8009990 <__errno>
 8001216:	4603      	mov	r3, r0
 8001218:	220c      	movs	r2, #12
 800121a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	e006      	b.n	8001230 <_sbrk+0x48>
	}

	heap_end += incr;
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <_sbrk+0x50>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a03      	ldr	r2, [pc, #12]	; (8001238 <_sbrk+0x50>)
 800122c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000274 	.word	0x20000274
 800123c:	200015a8 	.word	0x200015a8

08001240 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <SystemInit+0x5c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <SystemInit+0x5c>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <SystemInit+0x5c>)
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	4911      	ldr	r1, [pc, #68]	; (800129c <SystemInit+0x5c>)
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <SystemInit+0x60>)
 8001258:	4013      	ands	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <SystemInit+0x5c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0e      	ldr	r2, [pc, #56]	; (800129c <SystemInit+0x5c>)
 8001262:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <SystemInit+0x5c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <SystemInit+0x5c>)
 8001272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001276:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <SystemInit+0x5c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <SystemInit+0x5c>)
 800127e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001282:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <SystemInit+0x5c>)
 8001286:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800128a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <SystemInit+0x64>)
 800128e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001292:	609a      	str	r2, [r3, #8]
#endif 
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000
 80012a0:	f8ff0000 	.word	0xf8ff0000
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <usb_rx_handler>:
    после компарирования сигнала МК измеряет длительность импульса
    т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета. */
/*---------------------------------------------------------------------------*/

void usb_rx_handler(uint8_t *Buf, uint32_t *Len)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
//        UserTxBufferFS[1] = 0x01; // ошибка
//        CDC_Transmit_FS(UserTxBufferFS, 2);
//        return;
//        //--------------------------------------------------------------------------
//    }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012be:	e003      	b.n	80012c8 <LoopCopyDataInit>

080012c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012c6:	3104      	adds	r1, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012c8:	480a      	ldr	r0, [pc, #40]	; (80012f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012d0:	d3f6      	bcc.n	80012c0 <CopyDataInit>
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012d4:	e002      	b.n	80012dc <LoopFillZerobss>

080012d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012d8:	f842 3b04 	str.w	r3, [r2], #4

080012dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012e0:	d3f9      	bcc.n	80012d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012e2:	f7ff ffad 	bl	8001240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e6:	f008 fb59 	bl	800999c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ea:	f7ff f987 	bl	80005fc <main>
  bx lr
 80012ee:	4770      	bx	lr
  ldr r3, =_sidata
 80012f0:	0800adb4 	.word	0x0800adb4
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012f8:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 80012fc:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8001300:	200015a8 	.word	0x200015a8

08001304 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <CAN1_RX1_IRQHandler>
	...

08001308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_Init+0x28>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_Init+0x28>)
 8001312:	f043 0310 	orr.w	r3, r3, #16
 8001316:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 fdb3 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131e:	2000      	movs	r0, #0
 8001320:	f000 f808 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001324:	f7ff fd4e 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40022000 	.word	0x40022000

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x54>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x58>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fdcb 	bl	8001eee <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00e      	b.n	8001380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d80a      	bhi.n	800137e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 fd93 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <HAL_InitTick+0x5c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000010 	.word	0x20000010
 800138c:	20000018 	.word	0x20000018
 8001390:	20000014 	.word	0x20000014

08001394 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x1c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x20>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <HAL_IncTick+0x20>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000018 	.word	0x20000018
 80013b4:	200009c4 	.word	0x200009c4

080013b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <HAL_GetTick+0x10>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	200009c4 	.word	0x200009c4

080013cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e0be      	b.n	800156c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d109      	bne.n	8001410 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fd0c 	bl	8000e28 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 fb8b 	bl	8001b2c <ADC_ConversionStop_Disable>
 8001416:	4603      	mov	r3, r0
 8001418:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b00      	cmp	r3, #0
 8001424:	f040 8099 	bne.w	800155a <HAL_ADC_Init+0x18e>
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 8095 	bne.w	800155a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001438:	f023 0302 	bic.w	r3, r3, #2
 800143c:	f043 0202 	orr.w	r2, r3, #2
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800144c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7b1b      	ldrb	r3, [r3, #12]
 8001452:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001454:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	4313      	orrs	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001464:	d003      	beq.n	800146e <HAL_ADC_Init+0xa2>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d102      	bne.n	8001474 <HAL_ADC_Init+0xa8>
 800146e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001472:	e000      	b.n	8001476 <HAL_ADC_Init+0xaa>
 8001474:	2300      	movs	r3, #0
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7d1b      	ldrb	r3, [r3, #20]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d119      	bne.n	80014b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7b1b      	ldrb	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d109      	bne.n	80014a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	3b01      	subs	r3, #1
 8001492:	035a      	lsls	r2, r3, #13
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	e00b      	b.n	80014b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	f043 0220 	orr.w	r2, r3, #32
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	f043 0201 	orr.w	r2, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	4b28      	ldr	r3, [pc, #160]	; (8001574 <HAL_ADC_Init+0x1a8>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	68b9      	ldr	r1, [r7, #8]
 80014dc:	430b      	orrs	r3, r1
 80014de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014e8:	d003      	beq.n	80014f2 <HAL_ADC_Init+0x126>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d104      	bne.n	80014fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	051b      	lsls	r3, r3, #20
 80014fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	430a      	orrs	r2, r1
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_ADC_Init+0x1ac>)
 8001518:	4013      	ands	r3, r2
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	429a      	cmp	r2, r3
 800151e:	d10b      	bne.n	8001538 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	f023 0303 	bic.w	r3, r3, #3
 800152e:	f043 0201 	orr.w	r2, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001536:	e018      	b.n	800156a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	f023 0312 	bic.w	r3, r3, #18
 8001540:	f043 0210 	orr.w	r2, r3, #16
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154c:	f043 0201 	orr.w	r2, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001558:	e007      	b.n	800156a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	f043 0210 	orr.w	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800156a:	7dfb      	ldrb	r3, [r7, #23]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	ffe1f7fd 	.word	0xffe1f7fd
 8001578:	ff1f0efe 	.word	0xff1f0efe

0800157c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_ADC_Start_IT+0x1a>
 8001592:	2302      	movs	r3, #2
 8001594:	e0a0      	b.n	80016d8 <HAL_ADC_Start_IT+0x15c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fa72 	bl	8001a88 <ADC_Enable>
 80015a4:	4603      	mov	r3, r0
 80015a6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f040 808f 	bne.w	80016ce <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a45      	ldr	r2, [pc, #276]	; (80016e0 <HAL_ADC_Start_IT+0x164>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d105      	bne.n	80015da <HAL_ADC_Start_IT+0x5e>
 80015ce:	4b45      	ldr	r3, [pc, #276]	; (80016e4 <HAL_ADC_Start_IT+0x168>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d115      	bne.n	8001606 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d026      	beq.n	8001642 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001604:	e01d      	b.n	8001642 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a33      	ldr	r2, [pc, #204]	; (80016e4 <HAL_ADC_Start_IT+0x168>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d004      	beq.n	8001626 <HAL_ADC_Start_IT+0xaa>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <HAL_ADC_Start_IT+0x164>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10d      	bne.n	8001642 <HAL_ADC_Start_IT+0xc6>
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_ADC_Start_IT+0x168>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800163a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	f023 0206 	bic.w	r2, r3, #6
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	62da      	str	r2, [r3, #44]	; 0x2c
 800165a:	e002      	b.n	8001662 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f06f 0202 	mvn.w	r2, #2
 8001672:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0220 	orr.w	r2, r2, #32
 8001682:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800168e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001692:	d113      	bne.n	80016bc <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001698:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <HAL_ADC_Start_IT+0x164>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d105      	bne.n	80016aa <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_ADC_Start_IT+0x168>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d108      	bne.n	80016bc <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	e00c      	b.n	80016d6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	e003      	b.n	80016d6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40012800 	.word	0x40012800
 80016e4:	40012400 	.word	0x40012400

080016e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0320 	and.w	r3, r3, #32
 8001712:	2b20      	cmp	r3, #32
 8001714:	d140      	bne.n	8001798 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b02      	cmp	r3, #2
 8001722:	d139      	bne.n	8001798 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	2b00      	cmp	r3, #0
 800172e:	d105      	bne.n	800173c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001746:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800174a:	d11d      	bne.n	8001788 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001750:	2b00      	cmp	r3, #0
 8001752:	d119      	bne.n	8001788 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0220 	bic.w	r2, r2, #32
 8001762:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7fe ff1d 	bl	80005c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f06f 0212 	mvn.w	r2, #18
 8001796:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a2:	2b80      	cmp	r3, #128	; 0x80
 80017a4:	d14f      	bne.n	8001846 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d148      	bne.n	8001846 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d105      	bne.n	80017cc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80017d6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80017da:	d012      	beq.n	8001802 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d125      	bne.n	8001836 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80017f4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017f8:	d11d      	bne.n	8001836 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d119      	bne.n	8001836 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001810:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	2b00      	cmp	r3, #0
 8001828:	d105      	bne.n	8001836 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 fa4e 	bl	8001cd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f06f 020c 	mvn.w	r2, #12
 8001844:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001850:	2b40      	cmp	r3, #64	; 0x40
 8001852:	d114      	bne.n	800187e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b01      	cmp	r3, #1
 8001860:	d10d      	bne.n	800187e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f809 	bl	8001886 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f06f 0201 	mvn.w	r2, #1
 800187c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x20>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e0dc      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x1da>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b06      	cmp	r3, #6
 80018c6:	d81c      	bhi.n	8001902 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	3b05      	subs	r3, #5
 80018da:	221f      	movs	r2, #31
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4019      	ands	r1, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	3b05      	subs	r3, #5
 80018f4:	fa00 f203 	lsl.w	r2, r0, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001900:	e03c      	b.n	800197c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b0c      	cmp	r3, #12
 8001908:	d81c      	bhi.n	8001944 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	3b23      	subs	r3, #35	; 0x23
 800191c:	221f      	movs	r2, #31
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	4019      	ands	r1, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	3b23      	subs	r3, #35	; 0x23
 8001936:	fa00 f203 	lsl.w	r2, r0, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	631a      	str	r2, [r3, #48]	; 0x30
 8001942:	e01b      	b.n	800197c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	3b41      	subs	r3, #65	; 0x41
 8001956:	221f      	movs	r2, #31
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	4019      	ands	r1, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	3b41      	subs	r3, #65	; 0x41
 8001970:	fa00 f203 	lsl.w	r2, r0, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b09      	cmp	r3, #9
 8001982:	d91c      	bls.n	80019be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68d9      	ldr	r1, [r3, #12]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	3b1e      	subs	r3, #30
 8001996:	2207      	movs	r2, #7
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	4019      	ands	r1, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	6898      	ldr	r0, [r3, #8]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	3b1e      	subs	r3, #30
 80019b0:	fa00 f203 	lsl.w	r2, r0, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	e019      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6919      	ldr	r1, [r3, #16]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	2207      	movs	r2, #7
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	4019      	ands	r1, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	6898      	ldr	r0, [r3, #8]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b10      	cmp	r3, #16
 80019f8:	d003      	beq.n	8001a02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019fe:	2b11      	cmp	r3, #17
 8001a00:	d132      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <HAL_ADC_ConfigChannel+0x1e4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d125      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d126      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a28:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b10      	cmp	r3, #16
 8001a30:	d11a      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a38:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3c:	0c9a      	lsrs	r2, r3, #18
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a48:	e002      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f9      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x1b2>
 8001a56:	e007      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	f043 0220 	orr.w	r2, r3, #32
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	40012400 	.word	0x40012400
 8001a80:	20000010 	.word	0x20000010
 8001a84:	431bde83 	.word	0x431bde83

08001a88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d039      	beq.n	8001b1a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0201 	orr.w	r2, r2, #1
 8001ab4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <ADC_Enable+0x9c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <ADC_Enable+0xa0>)
 8001abc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac0:	0c9b      	lsrs	r3, r3, #18
 8001ac2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ac4:	e002      	b.n	8001acc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f9      	bne.n	8001ac6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ad2:	f7ff fc71 	bl	80013b8 <HAL_GetTick>
 8001ad6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ad8:	e018      	b.n	8001b0c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ada:	f7ff fc6d 	bl	80013b8 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d911      	bls.n	8001b0c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	f043 0210 	orr.w	r2, r3, #16
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e007      	b.n	8001b1c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d1df      	bne.n	8001ada <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000010 	.word	0x20000010
 8001b28:	431bde83 	.word	0x431bde83

08001b2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d127      	bne.n	8001b96 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0201 	bic.w	r2, r2, #1
 8001b54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b56:	f7ff fc2f 	bl	80013b8 <HAL_GetTick>
 8001b5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b5c:	e014      	b.n	8001b88 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b5e:	f7ff fc2b 	bl	80013b8 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d90d      	bls.n	8001b88 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	f043 0210 	orr.w	r2, r3, #16
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e007      	b.n	8001b98 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d0e3      	beq.n	8001b5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_ADCEx_Calibration_Start+0x1e>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e086      	b.n	8001ccc <HAL_ADCEx_Calibration_Start+0x12c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffb0 	bl	8001b2c <ADC_ConversionStop_Disable>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d175      	bne.n	8001cc2 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bde:	f023 0302 	bic.w	r3, r3, #2
 8001be2:	f043 0202 	orr.w	r2, r3, #2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001bea:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_ADCEx_Calibration_Start+0x134>)
 8001bec:	681c      	ldr	r4, [r3, #0]
 8001bee:	2002      	movs	r0, #2
 8001bf0:	f002 fdd8 	bl	80047a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001bfa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001bfc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001bfe:	e002      	b.n	8001c06 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f9      	bne.n	8001c00 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff3b 	bl	8001a88 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0208 	orr.w	r2, r2, #8
 8001c20:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c22:	f7ff fbc9 	bl	80013b8 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c28:	e014      	b.n	8001c54 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c2a:	f7ff fbc5 	bl	80013b8 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b0a      	cmp	r3, #10
 8001c36:	d90d      	bls.n	8001c54 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	f023 0312 	bic.w	r3, r3, #18
 8001c40:	f043 0210 	orr.w	r2, r3, #16
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e03b      	b.n	8001ccc <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1e3      	bne.n	8001c2a <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0204 	orr.w	r2, r2, #4
 8001c70:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c72:	f7ff fba1 	bl	80013b8 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c78:	e014      	b.n	8001ca4 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c7a:	f7ff fb9d 	bl	80013b8 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b0a      	cmp	r3, #10
 8001c86:	d90d      	bls.n	8001ca4 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	f023 0312 	bic.w	r3, r3, #18
 8001c90:	f043 0210 	orr.w	r2, r3, #16
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e013      	b.n	8001ccc <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1e3      	bne.n	8001c7a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	f023 0303 	bic.w	r3, r3, #3
 8001cba:	f043 0201 	orr.w	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd90      	pop	{r4, r7, pc}
 8001cd4:	20000010 	.word	0x20000010

08001cd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
	...

08001cec <__NVIC_SetPriorityGrouping>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4906      	ldr	r1, [pc, #24]	; (8001d84 <__NVIC_EnableIRQ+0x34>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_SetPriority>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	; (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	; (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	; 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <SysTick_Config>:
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f7ff ff90 	bl	8001d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff2d 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff42 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff90 	bl	8001ddc <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5f 	bl	8001d88 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff35 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffa2 	bl	8001e40 <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e00e      	b.n	8001f36 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	795b      	ldrb	r3, [r3, #5]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d105      	bne.n	8001f2e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7fe ffc1 	bl	8000eb0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b087      	sub	sp, #28
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2202      	movs	r2, #2
 8001f52:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	e00a      	b.n	8001f80 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	441a      	add	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d3f0      	bcc.n	8001f6a <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2201      	movs	r2, #1
 8001f94:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001f96:	693b      	ldr	r3, [r7, #16]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001fbe:	4b2f      	ldr	r3, [pc, #188]	; (800207c <HAL_FLASH_Program+0xd8>)
 8001fc0:	7e1b      	ldrb	r3, [r3, #24]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_FLASH_Program+0x26>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e054      	b.n	8002074 <HAL_FLASH_Program+0xd0>
 8001fca:	4b2c      	ldr	r3, [pc, #176]	; (800207c <HAL_FLASH_Program+0xd8>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001fd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fd4:	f000 f8a8 	bl	8002128 <FLASH_WaitForLastOperation>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001fdc:	7dfb      	ldrb	r3, [r7, #23]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d144      	bne.n	800206c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d102      	bne.n	8001fee <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	757b      	strb	r3, [r7, #21]
 8001fec:	e007      	b.n	8001ffe <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d102      	bne.n	8001ffa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	757b      	strb	r3, [r7, #21]
 8001ff8:	e001      	b.n	8001ffe <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	75bb      	strb	r3, [r7, #22]
 8002002:	e02d      	b.n	8002060 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002004:	7dbb      	ldrb	r3, [r7, #22]
 8002006:	005a      	lsls	r2, r3, #1
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	eb02 0c03 	add.w	ip, r2, r3
 800200e:	7dbb      	ldrb	r3, [r7, #22]
 8002010:	0119      	lsls	r1, r3, #4
 8002012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002016:	f1c1 0620 	rsb	r6, r1, #32
 800201a:	f1a1 0020 	sub.w	r0, r1, #32
 800201e:	fa22 f401 	lsr.w	r4, r2, r1
 8002022:	fa03 f606 	lsl.w	r6, r3, r6
 8002026:	4334      	orrs	r4, r6
 8002028:	fa23 f000 	lsr.w	r0, r3, r0
 800202c:	4304      	orrs	r4, r0
 800202e:	fa23 f501 	lsr.w	r5, r3, r1
 8002032:	b2a3      	uxth	r3, r4
 8002034:	4619      	mov	r1, r3
 8002036:	4660      	mov	r0, ip
 8002038:	f000 f85a 	bl	80020f0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800203c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002040:	f000 f872 	bl	8002128 <FLASH_WaitForLastOperation>
 8002044:	4603      	mov	r3, r0
 8002046:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002048:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <HAL_FLASH_Program+0xdc>)
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <HAL_FLASH_Program+0xdc>)
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d107      	bne.n	800206a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800205a:	7dbb      	ldrb	r3, [r7, #22]
 800205c:	3301      	adds	r3, #1
 800205e:	75bb      	strb	r3, [r7, #22]
 8002060:	7dba      	ldrb	r2, [r7, #22]
 8002062:	7d7b      	ldrb	r3, [r7, #21]
 8002064:	429a      	cmp	r2, r3
 8002066:	d3cd      	bcc.n	8002004 <HAL_FLASH_Program+0x60>
 8002068:	e000      	b.n	800206c <HAL_FLASH_Program+0xc8>
      {
        break;
 800206a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_FLASH_Program+0xd8>)
 800206e:	2200      	movs	r2, #0
 8002070:	761a      	strb	r2, [r3, #24]

  return status;
 8002072:	7dfb      	ldrb	r3, [r7, #23]
}
 8002074:	4618      	mov	r0, r3
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207c:	200009c8 	.word	0x200009c8
 8002080:	40022000 	.word	0x40022000

08002084 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_FLASH_Unlock+0x40>)
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00d      	beq.n	80020b6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_FLASH_Unlock+0x40>)
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_FLASH_Unlock+0x44>)
 800209e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_FLASH_Unlock+0x40>)
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <HAL_FLASH_Unlock+0x48>)
 80020a4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <HAL_FLASH_Unlock+0x40>)
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80020b6:	79fb      	ldrb	r3, [r7, #7]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40022000 	.word	0x40022000
 80020c8:	45670123 	.word	0x45670123
 80020cc:	cdef89ab 	.word	0xcdef89ab

080020d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_FLASH_Lock+0x1c>)
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_FLASH_Lock+0x1c>)
 80020da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020de:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40022000 	.word	0x40022000

080020f0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <FLASH_Program_HalfWord+0x30>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <FLASH_Program_HalfWord+0x34>)
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	4a07      	ldr	r2, [pc, #28]	; (8002124 <FLASH_Program_HalfWord+0x34>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	887a      	ldrh	r2, [r7, #2]
 8002112:	801a      	strh	r2, [r3, #0]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	200009c8 	.word	0x200009c8
 8002124:	40022000 	.word	0x40022000

08002128 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff f942 	bl	80013b8 <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002136:	e010      	b.n	800215a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213e:	d00c      	beq.n	800215a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <FLASH_WaitForLastOperation+0x2e>
 8002146:	f7ff f937 	bl	80013b8 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	429a      	cmp	r2, r3
 8002154:	d201      	bcs.n	800215a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e025      	b.n	80021a6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <FLASH_WaitForLastOperation+0x88>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1e8      	bne.n	8002138 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <FLASH_WaitForLastOperation+0x88>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <FLASH_WaitForLastOperation+0x88>)
 8002174:	2220      	movs	r2, #32
 8002176:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <FLASH_WaitForLastOperation+0x88>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10b      	bne.n	800219c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <FLASH_WaitForLastOperation+0x88>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800218c:	2b00      	cmp	r3, #0
 800218e:	d105      	bne.n	800219c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <FLASH_WaitForLastOperation+0x88>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800219c:	f000 f80a 	bl	80021b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40022000 	.word	0x40022000

080021b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80021be:	4b23      	ldr	r3, [pc, #140]	; (800224c <FLASH_SetErrorCode+0x98>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80021ca:	4b21      	ldr	r3, [pc, #132]	; (8002250 <FLASH_SetErrorCode+0x9c>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f043 0302 	orr.w	r3, r3, #2
 80021d2:	4a1f      	ldr	r2, [pc, #124]	; (8002250 <FLASH_SetErrorCode+0x9c>)
 80021d4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f043 0310 	orr.w	r3, r3, #16
 80021dc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <FLASH_SetErrorCode+0x98>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <FLASH_SetErrorCode+0x9c>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	4a17      	ldr	r2, [pc, #92]	; (8002250 <FLASH_SetErrorCode+0x9c>)
 80021f4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <FLASH_SetErrorCode+0x98>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <FLASH_SetErrorCode+0x9c>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <FLASH_SetErrorCode+0x9c>)
 8002214:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <FLASH_SetErrorCode+0x98>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a0c      	ldr	r2, [pc, #48]	; (800224c <FLASH_SetErrorCode+0x98>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f240 1201 	movw	r2, #257	; 0x101
 8002228:	4293      	cmp	r3, r2
 800222a:	d106      	bne.n	800223a <FLASH_SetErrorCode+0x86>
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <FLASH_SetErrorCode+0x98>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	4a06      	ldr	r2, [pc, #24]	; (800224c <FLASH_SetErrorCode+0x98>)
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	61d3      	str	r3, [r2, #28]
}  
 8002238:	e002      	b.n	8002240 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800223a:	4a04      	ldr	r2, [pc, #16]	; (800224c <FLASH_SetErrorCode+0x98>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	60d3      	str	r3, [r2, #12]
}  
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40022000 	.word	0x40022000
 8002250:	200009c8 	.word	0x200009c8

08002254 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002266:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <HAL_FLASHEx_Erase+0xd0>)
 8002268:	7e1b      	ldrb	r3, [r3, #24]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_FLASHEx_Erase+0x1e>
 800226e:	2302      	movs	r3, #2
 8002270:	e053      	b.n	800231a <HAL_FLASHEx_Erase+0xc6>
 8002272:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <HAL_FLASHEx_Erase+0xd0>)
 8002274:	2201      	movs	r2, #1
 8002276:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d116      	bne.n	80022ae <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002280:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002284:	f7ff ff50 	bl	8002128 <FLASH_WaitForLastOperation>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d141      	bne.n	8002312 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800228e:	2001      	movs	r0, #1
 8002290:	f000 f84c 	bl	800232c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002294:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002298:	f7ff ff46 	bl	8002128 <FLASH_WaitForLastOperation>
 800229c:	4603      	mov	r3, r0
 800229e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80022a0:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_FLASHEx_Erase+0xd4>)
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	4a20      	ldr	r2, [pc, #128]	; (8002328 <HAL_FLASHEx_Erase+0xd4>)
 80022a6:	f023 0304 	bic.w	r3, r3, #4
 80022aa:	6113      	str	r3, [r2, #16]
 80022ac:	e031      	b.n	8002312 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80022ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022b2:	f7ff ff39 	bl	8002128 <FLASH_WaitForLastOperation>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d12a      	bne.n	8002312 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	f04f 32ff 	mov.w	r2, #4294967295
 80022c2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	e019      	b.n	8002300 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80022cc:	68b8      	ldr	r0, [r7, #8]
 80022ce:	f000 f849 	bl	8002364 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022d6:	f7ff ff27 	bl	8002128 <FLASH_WaitForLastOperation>
 80022da:	4603      	mov	r3, r0
 80022dc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_FLASHEx_Erase+0xd4>)
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	4a11      	ldr	r2, [pc, #68]	; (8002328 <HAL_FLASHEx_Erase+0xd4>)
 80022e4:	f023 0302 	bic.w	r3, r3, #2
 80022e8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	601a      	str	r2, [r3, #0]
            break;
 80022f6:	e00c      	b.n	8002312 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022fe:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	029a      	lsls	r2, r3, #10
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	429a      	cmp	r2, r3
 8002310:	d3dc      	bcc.n	80022cc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <HAL_FLASHEx_Erase+0xd0>)
 8002314:	2200      	movs	r2, #0
 8002316:	761a      	strb	r2, [r3, #24]

  return status;
 8002318:	7bfb      	ldrb	r3, [r7, #15]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200009c8 	.word	0x200009c8
 8002328:	40022000 	.word	0x40022000

0800232c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <FLASH_MassErase+0x30>)
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <FLASH_MassErase+0x34>)
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	4a08      	ldr	r2, [pc, #32]	; (8002360 <FLASH_MassErase+0x34>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <FLASH_MassErase+0x34>)
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	4a05      	ldr	r2, [pc, #20]	; (8002360 <FLASH_MassErase+0x34>)
 800234c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002350:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	200009c8 	.word	0x200009c8
 8002360:	40022000 	.word	0x40022000

08002364 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <FLASH_PageErase+0x38>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <FLASH_PageErase+0x3c>)
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <FLASH_PageErase+0x3c>)
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800237e:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <FLASH_PageErase+0x3c>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <FLASH_PageErase+0x3c>)
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <FLASH_PageErase+0x3c>)
 800238a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800238e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	200009c8 	.word	0x200009c8
 80023a0:	40022000 	.word	0x40022000

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b08b      	sub	sp, #44	; 0x2c
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023b2:	2300      	movs	r3, #0
 80023b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b6:	e169      	b.n	800268c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023b8:	2201      	movs	r2, #1
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	f040 8158 	bne.w	8002686 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4a9a      	ldr	r2, [pc, #616]	; (8002644 <HAL_GPIO_Init+0x2a0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d05e      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 80023e0:	4a98      	ldr	r2, [pc, #608]	; (8002644 <HAL_GPIO_Init+0x2a0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d875      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 80023e6:	4a98      	ldr	r2, [pc, #608]	; (8002648 <HAL_GPIO_Init+0x2a4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d058      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 80023ec:	4a96      	ldr	r2, [pc, #600]	; (8002648 <HAL_GPIO_Init+0x2a4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d86f      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 80023f2:	4a96      	ldr	r2, [pc, #600]	; (800264c <HAL_GPIO_Init+0x2a8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d052      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 80023f8:	4a94      	ldr	r2, [pc, #592]	; (800264c <HAL_GPIO_Init+0x2a8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d869      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 80023fe:	4a94      	ldr	r2, [pc, #592]	; (8002650 <HAL_GPIO_Init+0x2ac>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d04c      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 8002404:	4a92      	ldr	r2, [pc, #584]	; (8002650 <HAL_GPIO_Init+0x2ac>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d863      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 800240a:	4a92      	ldr	r2, [pc, #584]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d046      	beq.n	800249e <HAL_GPIO_Init+0xfa>
 8002410:	4a90      	ldr	r2, [pc, #576]	; (8002654 <HAL_GPIO_Init+0x2b0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d85d      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 8002416:	2b12      	cmp	r3, #18
 8002418:	d82a      	bhi.n	8002470 <HAL_GPIO_Init+0xcc>
 800241a:	2b12      	cmp	r3, #18
 800241c:	d859      	bhi.n	80024d2 <HAL_GPIO_Init+0x12e>
 800241e:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <HAL_GPIO_Init+0x80>)
 8002420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002424:	0800249f 	.word	0x0800249f
 8002428:	08002479 	.word	0x08002479
 800242c:	0800248b 	.word	0x0800248b
 8002430:	080024cd 	.word	0x080024cd
 8002434:	080024d3 	.word	0x080024d3
 8002438:	080024d3 	.word	0x080024d3
 800243c:	080024d3 	.word	0x080024d3
 8002440:	080024d3 	.word	0x080024d3
 8002444:	080024d3 	.word	0x080024d3
 8002448:	080024d3 	.word	0x080024d3
 800244c:	080024d3 	.word	0x080024d3
 8002450:	080024d3 	.word	0x080024d3
 8002454:	080024d3 	.word	0x080024d3
 8002458:	080024d3 	.word	0x080024d3
 800245c:	080024d3 	.word	0x080024d3
 8002460:	080024d3 	.word	0x080024d3
 8002464:	080024d3 	.word	0x080024d3
 8002468:	08002481 	.word	0x08002481
 800246c:	08002495 	.word	0x08002495
 8002470:	4a79      	ldr	r2, [pc, #484]	; (8002658 <HAL_GPIO_Init+0x2b4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d013      	beq.n	800249e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002476:	e02c      	b.n	80024d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	623b      	str	r3, [r7, #32]
          break;
 800247e:	e029      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	3304      	adds	r3, #4
 8002486:	623b      	str	r3, [r7, #32]
          break;
 8002488:	e024      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	3308      	adds	r3, #8
 8002490:	623b      	str	r3, [r7, #32]
          break;
 8002492:	e01f      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	330c      	adds	r3, #12
 800249a:	623b      	str	r3, [r7, #32]
          break;
 800249c:	e01a      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024a6:	2304      	movs	r3, #4
 80024a8:	623b      	str	r3, [r7, #32]
          break;
 80024aa:	e013      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d105      	bne.n	80024c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b4:	2308      	movs	r3, #8
 80024b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	611a      	str	r2, [r3, #16]
          break;
 80024be:	e009      	b.n	80024d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024c0:	2308      	movs	r3, #8
 80024c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	615a      	str	r2, [r3, #20]
          break;
 80024ca:	e003      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024cc:	2300      	movs	r3, #0
 80024ce:	623b      	str	r3, [r7, #32]
          break;
 80024d0:	e000      	b.n	80024d4 <HAL_GPIO_Init+0x130>
          break;
 80024d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2bff      	cmp	r3, #255	; 0xff
 80024d8:	d801      	bhi.n	80024de <HAL_GPIO_Init+0x13a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	e001      	b.n	80024e2 <HAL_GPIO_Init+0x13e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3304      	adds	r3, #4
 80024e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2bff      	cmp	r3, #255	; 0xff
 80024e8:	d802      	bhi.n	80024f0 <HAL_GPIO_Init+0x14c>
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	e002      	b.n	80024f6 <HAL_GPIO_Init+0x152>
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	3b08      	subs	r3, #8
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	210f      	movs	r1, #15
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	401a      	ands	r2, r3
 8002508:	6a39      	ldr	r1, [r7, #32]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	431a      	orrs	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80b1 	beq.w	8002686 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002524:	4b4d      	ldr	r3, [pc, #308]	; (800265c <HAL_GPIO_Init+0x2b8>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	4a4c      	ldr	r2, [pc, #304]	; (800265c <HAL_GPIO_Init+0x2b8>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6193      	str	r3, [r2, #24]
 8002530:	4b4a      	ldr	r3, [pc, #296]	; (800265c <HAL_GPIO_Init+0x2b8>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800253c:	4a48      	ldr	r2, [pc, #288]	; (8002660 <HAL_GPIO_Init+0x2bc>)
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a40      	ldr	r2, [pc, #256]	; (8002664 <HAL_GPIO_Init+0x2c0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d013      	beq.n	8002590 <HAL_GPIO_Init+0x1ec>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a3f      	ldr	r2, [pc, #252]	; (8002668 <HAL_GPIO_Init+0x2c4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00d      	beq.n	800258c <HAL_GPIO_Init+0x1e8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a3e      	ldr	r2, [pc, #248]	; (800266c <HAL_GPIO_Init+0x2c8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d007      	beq.n	8002588 <HAL_GPIO_Init+0x1e4>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3d      	ldr	r2, [pc, #244]	; (8002670 <HAL_GPIO_Init+0x2cc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_GPIO_Init+0x1e0>
 8002580:	2303      	movs	r3, #3
 8002582:	e006      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002584:	2304      	movs	r3, #4
 8002586:	e004      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002588:	2302      	movs	r3, #2
 800258a:	e002      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_GPIO_Init+0x1ee>
 8002590:	2300      	movs	r3, #0
 8002592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002594:	f002 0203 	and.w	r2, r2, #3
 8002598:	0092      	lsls	r2, r2, #2
 800259a:	4093      	lsls	r3, r2
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025a2:	492f      	ldr	r1, [pc, #188]	; (8002660 <HAL_GPIO_Init+0x2bc>)
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	3302      	adds	r3, #2
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	492c      	ldr	r1, [pc, #176]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	4928      	ldr	r1, [pc, #160]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d006      	beq.n	80025f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025e4:	4b23      	ldr	r3, [pc, #140]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	4922      	ldr	r1, [pc, #136]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
 80025f0:	e006      	b.n	8002600 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	491e      	ldr	r1, [pc, #120]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	4918      	ldr	r1, [pc, #96]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]
 8002618:	e006      	b.n	8002628 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	43db      	mvns	r3, r3
 8002622:	4914      	ldr	r1, [pc, #80]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 8002624:	4013      	ands	r3, r2
 8002626:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d021      	beq.n	8002678 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	490e      	ldr	r1, [pc, #56]	; (8002674 <HAL_GPIO_Init+0x2d0>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	60cb      	str	r3, [r1, #12]
 8002640:	e021      	b.n	8002686 <HAL_GPIO_Init+0x2e2>
 8002642:	bf00      	nop
 8002644:	10320000 	.word	0x10320000
 8002648:	10310000 	.word	0x10310000
 800264c:	10220000 	.word	0x10220000
 8002650:	10210000 	.word	0x10210000
 8002654:	10120000 	.word	0x10120000
 8002658:	10110000 	.word	0x10110000
 800265c:	40021000 	.word	0x40021000
 8002660:	40010000 	.word	0x40010000
 8002664:	40010800 	.word	0x40010800
 8002668:	40010c00 	.word	0x40010c00
 800266c:	40011000 	.word	0x40011000
 8002670:	40011400 	.word	0x40011400
 8002674:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_GPIO_Init+0x304>)
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	43db      	mvns	r3, r3
 8002680:	4909      	ldr	r1, [pc, #36]	; (80026a8 <HAL_GPIO_Init+0x304>)
 8002682:	4013      	ands	r3, r2
 8002684:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	3301      	adds	r3, #1
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	f47f ae8e 	bne.w	80023b8 <HAL_GPIO_Init+0x14>
  }
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	372c      	adds	r7, #44	; 0x2c
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	40010400 	.word	0x40010400

080026ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	887b      	ldrh	r3, [r7, #2]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
 80026c8:	e001      	b.n	80026ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	807b      	strh	r3, [r7, #2]
 80026e6:	4613      	mov	r3, r2
 80026e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026ea:	787b      	ldrb	r3, [r7, #1]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f0:	887a      	ldrh	r2, [r7, #2]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026f6:	e003      	b.n	8002700 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	041a      	lsls	r2, r3, #16
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	611a      	str	r2, [r3, #16]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800270a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800270c:	b08b      	sub	sp, #44	; 0x2c
 800270e:	af06      	add	r7, sp, #24
 8002710:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0fd      	b.n	8002918 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d106      	bne.n	8002736 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f006 fe83 	bl	800943c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2203      	movs	r2, #3
 800273a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 f8dc 	bl	8005900 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	687e      	ldr	r6, [r7, #4]
 8002750:	466d      	mov	r5, sp
 8002752:	f106 0410 	add.w	r4, r6, #16
 8002756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	602b      	str	r3, [r5, #0]
 800275e:	1d33      	adds	r3, r6, #4
 8002760:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002762:	6838      	ldr	r0, [r7, #0]
 8002764:	f003 f8a6 	bl	80058b4 <USB_CoreInit>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2202      	movs	r2, #2
 8002772:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0ce      	b.n	8002918 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f003 f8d7 	bl	8005934 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002786:	2300      	movs	r3, #0
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	e04c      	b.n	8002826 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	440b      	add	r3, r1
 800279c:	3301      	adds	r3, #1
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	440b      	add	r3, r1
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	b298      	uxth	r0, r3
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	440b      	add	r3, r1
 80027c8:	3336      	adds	r3, #54	; 0x36
 80027ca:	4602      	mov	r2, r0
 80027cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	440b      	add	r3, r1
 80027de:	3303      	adds	r3, #3
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	3338      	adds	r3, #56	; 0x38
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	333c      	adds	r3, #60	; 0x3c
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	3340      	adds	r3, #64	; 0x40
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	3301      	adds	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	d3ad      	bcc.n	800278c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	e044      	b.n	80028c0 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002836:	7bfa      	ldrb	r2, [r7, #15]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	440b      	add	r3, r1
 8002844:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	440b      	add	r3, r1
 800285a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800285e:	7bfa      	ldrb	r2, [r7, #15]
 8002860:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	3301      	adds	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d3b5      	bcc.n	8002836 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	687e      	ldr	r6, [r7, #4]
 80028d2:	466d      	mov	r5, sp
 80028d4:	f106 0410 	add.w	r4, r6, #16
 80028d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	602b      	str	r3, [r5, #0]
 80028e0:	1d33      	adds	r3, r6, #4
 80028e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028e4:	6838      	ldr	r0, [r7, #0]
 80028e6:	f003 f831 	bl	800594c <USB_DevInit>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e00d      	b.n	8002918 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f004 ffcb 	bl	80078ac <USB_DevDisconnect>

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002920 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_PCD_Start+0x16>
 8002932:	2302      	movs	r3, #2
 8002934:	e016      	b.n	8002964 <HAL_PCD_Start+0x44>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f002 ffc6 	bl	80058d4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002948:	2101      	movs	r1, #1
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f006 ffe9 	bl	8009922 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f004 ff9f 	bl	8007898 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f004 ffa1 	bl	80078c0 <USB_ReadInterrupts>
 800297e:	4603      	mov	r3, r0
 8002980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002988:	d102      	bne.n	8002990 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fb61 	bl	8003052 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f004 ff93 	bl	80078c0 <USB_ReadInterrupts>
 800299a:	4603      	mov	r3, r0
 800299c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a4:	d112      	bne.n	80029cc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b8:	b292      	uxth	r2, r2
 80029ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f006 fdb7 	bl	8009532 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80029c4:	2100      	movs	r1, #0
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f925 	bl	8002c16 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f004 ff75 	bl	80078c0 <USB_ReadInterrupts>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029e0:	d10b      	bne.n	80029fa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029f4:	b292      	uxth	r2, r2
 80029f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f004 ff5e 	bl	80078c0 <USB_ReadInterrupts>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a0e:	d10b      	bne.n	8002a28 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a22:	b292      	uxth	r2, r2
 8002a24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f004 ff47 	bl	80078c0 <USB_ReadInterrupts>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3c:	d126      	bne.n	8002a8c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0204 	bic.w	r2, r2, #4
 8002a50:	b292      	uxth	r2, r2
 8002a52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0208 	bic.w	r2, r2, #8
 8002a68:	b292      	uxth	r2, r2
 8002a6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f006 fd98 	bl	80095a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a86:	b292      	uxth	r2, r2
 8002a88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 ff15 	bl	80078c0 <USB_ReadInterrupts>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aa0:	f040 8084 	bne.w	8002bac <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	77fb      	strb	r3, [r7, #31]
 8002aa8:	e011      	b.n	8002ace <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	7ffb      	ldrb	r3, [r7, #31]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	441a      	add	r2, r3
 8002ab6:	7ffb      	ldrb	r3, [r7, #31]
 8002ab8:	8812      	ldrh	r2, [r2, #0]
 8002aba:	b292      	uxth	r2, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	f107 0120 	add.w	r1, r7, #32
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002ac8:	7ffb      	ldrb	r3, [r7, #31]
 8002aca:	3301      	adds	r3, #1
 8002acc:	77fb      	strb	r3, [r7, #31]
 8002ace:	7ffb      	ldrb	r3, [r7, #31]
 8002ad0:	2b07      	cmp	r3, #7
 8002ad2:	d9ea      	bls.n	8002aaa <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	b292      	uxth	r2, r2
 8002ae8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	b292      	uxth	r2, r2
 8002b00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002b04:	bf00      	nop
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f6      	beq.n	8002b06 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b2a:	b292      	uxth	r2, r2
 8002b2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	77fb      	strb	r3, [r7, #31]
 8002b34:	e010      	b.n	8002b58 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002b36:	7ffb      	ldrb	r3, [r7, #31]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	7ffa      	ldrb	r2, [r7, #31]
 8002b40:	0092      	lsls	r2, r2, #2
 8002b42:	440a      	add	r2, r1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	f107 0120 	add.w	r1, r7, #32
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002b50:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002b52:	7ffb      	ldrb	r3, [r7, #31]
 8002b54:	3301      	adds	r3, #1
 8002b56:	77fb      	strb	r3, [r7, #31]
 8002b58:	7ffb      	ldrb	r3, [r7, #31]
 8002b5a:	2b07      	cmp	r3, #7
 8002b5c:	d9eb      	bls.n	8002b36 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0208 	orr.w	r2, r2, #8
 8002b70:	b292      	uxth	r2, r2
 8002b72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0204 	orr.w	r2, r2, #4
 8002ba0:	b292      	uxth	r2, r2
 8002ba2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f006 fce2 	bl	8009570 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f004 fe85 	bl	80078c0 <USB_ReadInterrupts>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc0:	d10e      	bne.n	8002be0 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bd4:	b292      	uxth	r2, r2
 8002bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f006 fc9b 	bl	8009516 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f004 fe6b 	bl	80078c0 <USB_ReadInterrupts>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf4:	d10b      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c08:	b292      	uxth	r2, r2
 8002c0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002c0e:	bf00      	nop
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_PCD_SetAddress+0x1a>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e013      	b.n	8002c58 <HAL_PCD_SetAddress+0x42>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f004 fe12 	bl	8007872 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	4608      	mov	r0, r1
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	70fb      	strb	r3, [r7, #3]
 8002c72:	460b      	mov	r3, r1
 8002c74:	803b      	strh	r3, [r7, #0]
 8002c76:	4613      	mov	r3, r2
 8002c78:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	da0e      	bge.n	8002ca4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	705a      	strb	r2, [r3, #1]
 8002ca2:	e00e      	b.n	8002cc2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 0207 	and.w	r2, r3, #7
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cce:	883a      	ldrh	r2, [r7, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	78ba      	ldrb	r2, [r7, #2]
 8002cd8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	785b      	ldrb	r3, [r3, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cec:	78bb      	ldrb	r3, [r7, #2]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d102      	bne.n	8002cf8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_PCD_EP_Open+0xa6>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e00e      	b.n	8002d24 <HAL_PCD_EP_Open+0xc4>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68f9      	ldr	r1, [r7, #12]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f002 fe39 	bl	800598c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002d22:	7afb      	ldrb	r3, [r7, #11]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	da0e      	bge.n	8002d5e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	705a      	strb	r2, [r3, #1]
 8002d5c:	e00e      	b.n	8002d7c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	f003 0207 	and.w	r2, r3, #7
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4413      	add	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_PCD_EP_Close+0x6a>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e00e      	b.n	8002db4 <HAL_PCD_EP_Close+0x88>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68f9      	ldr	r1, [r7, #12]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 f95b 	bl	8006060 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dcc:	7afb      	ldrb	r3, [r7, #11]
 8002dce:	f003 0207 	and.w	r2, r3, #7
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4413      	add	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2200      	movs	r2, #0
 8002df4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e08:	7afb      	ldrb	r3, [r7, #11]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6979      	ldr	r1, [r7, #20]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 fb0d 	bl	8006438 <USB_EPStartXfer>
 8002e1e:	e005      	b.n	8002e2c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6979      	ldr	r1, [r7, #20]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 fb06 	bl	8006438 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	f003 0207 	and.w	r2, r3, #7
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002e58:	681b      	ldr	r3, [r3, #0]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	460b      	mov	r3, r1
 8002e72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e74:	7afb      	ldrb	r3, [r7, #11]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2201      	movs	r2, #1
 8002eae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb0:	7afb      	ldrb	r3, [r7, #11]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ebc:	7afb      	ldrb	r3, [r7, #11]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6979      	ldr	r1, [r7, #20]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f003 fab3 	bl	8006438 <USB_EPStartXfer>
 8002ed2:	e005      	b.n	8002ee0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6979      	ldr	r1, [r7, #20]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f003 faac 	bl	8006438 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	f003 0207 	and.w	r2, r3, #7
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d901      	bls.n	8002f08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e04c      	b.n	8002fa2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	da0e      	bge.n	8002f2e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	705a      	strb	r2, [r3, #1]
 8002f2c:	e00c      	b.n	8002f48 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_PCD_EP_SetStall+0x7e>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e01c      	b.n	8002fa2 <HAL_PCD_EP_SetStall+0xb8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68f9      	ldr	r1, [r7, #12]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f004 fb7e 	bl	8007678 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d108      	bne.n	8002f98 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f004 fca3 	bl	80078de <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	f003 020f 	and.w	r2, r3, #15
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d901      	bls.n	8002fc8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e040      	b.n	800304a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	da0e      	bge.n	8002fee <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	705a      	strb	r2, [r3, #1]
 8002fec:	e00e      	b.n	800300c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	f003 0207 	and.w	r2, r3, #7
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	b2da      	uxtb	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_PCD_EP_ClrStall+0x82>
 8003028:	2302      	movs	r3, #2
 800302a:	e00e      	b.n	800304a <HAL_PCD_EP_ClrStall+0xa0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68f9      	ldr	r1, [r7, #12]
 800303a:	4618      	mov	r0, r3
 800303c:	f004 fb6c 	bl	8007718 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b08e      	sub	sp, #56	; 0x38
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800305a:	e2df      	b.n	800361c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003064:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003066:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003072:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 8158 	bne.w	800332c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800307c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	d152      	bne.n	800312c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003096:	81fb      	strh	r3, [r7, #14]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	89fb      	ldrh	r3, [r7, #14]
 800309e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3328      	adds	r3, #40	; 0x28
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	3302      	adds	r3, #2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	441a      	add	r2, r3
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030ea:	2100      	movs	r1, #0
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f006 f9f8 	bl	80094e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 828e 	beq.w	800361c <PCD_EP_ISR_Handler+0x5ca>
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f040 8289 	bne.w	800361c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003116:	b2da      	uxtb	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	b292      	uxth	r2, r2
 800311e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800312a:	e277      	b.n	800361c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800313c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800313e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003142:	2b00      	cmp	r3, #0
 8003144:	d034      	beq.n	80031b0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800314e:	b29b      	uxth	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	3306      	adds	r3, #6
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	4413      	add	r3, r2
 8003164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003184:	b29b      	uxth	r3, r3
 8003186:	f004 fbfa 	bl	800797e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	b29a      	uxth	r2, r3
 8003192:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003196:	4013      	ands	r3, r2
 8003198:	823b      	strh	r3, [r7, #16]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	8a3a      	ldrh	r2, [r7, #16]
 80031a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031a4:	b292      	uxth	r2, r2
 80031a6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f006 f96d 	bl	8009488 <HAL_PCD_SetupStageCallback>
 80031ae:	e235      	b.n	800361c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031b0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f280 8231 	bge.w	800361c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031c6:	4013      	ands	r3, r2
 80031c8:	83bb      	strh	r3, [r7, #28]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	8bba      	ldrh	r2, [r7, #28]
 80031d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031d4:	b292      	uxth	r2, r2
 80031d6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	3306      	adds	r3, #6
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d019      	beq.n	8003240 <PCD_EP_ISR_Handler+0x1ee>
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d015      	beq.n	8003240 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	6959      	ldr	r1, [r3, #20]
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003224:	b29b      	uxth	r3, r3
 8003226:	f004 fbaa 	bl	800797e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	441a      	add	r2, r3
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003238:	2100      	movs	r1, #0
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f006 f936 	bl	80094ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800324e:	b29b      	uxth	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	4413      	add	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d112      	bne.n	800328e <PCD_EP_ISR_Handler+0x23c>
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003272:	b29a      	uxth	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	801a      	strh	r2, [r3, #0]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003286:	b29a      	uxth	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	801a      	strh	r2, [r3, #0]
 800328c:	e02f      	b.n	80032ee <PCD_EP_ISR_Handler+0x29c>
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b3e      	cmp	r3, #62	; 0x3e
 8003294:	d813      	bhi.n	80032be <PCD_EP_ISR_Handler+0x26c>
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	633b      	str	r3, [r7, #48]	; 0x30
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <PCD_EP_ISR_Handler+0x25e>
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	3301      	adds	r3, #1
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	029b      	lsls	r3, r3, #10
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	801a      	strh	r2, [r3, #0]
 80032bc:	e017      	b.n	80032ee <PCD_EP_ISR_Handler+0x29c>
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	633b      	str	r3, [r7, #48]	; 0x30
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d102      	bne.n	80032d8 <PCD_EP_ISR_Handler+0x286>
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	3b01      	subs	r3, #1
 80032d6:	633b      	str	r3, [r7, #48]	; 0x30
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	b29b      	uxth	r3, r3
 80032dc:	029b      	lsls	r3, r3, #10
 80032de:	b29b      	uxth	r3, r3
 80032e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fe:	827b      	strh	r3, [r7, #18]
 8003300:	8a7b      	ldrh	r3, [r7, #18]
 8003302:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003306:	827b      	strh	r3, [r7, #18]
 8003308:	8a7b      	ldrh	r3, [r7, #18]
 800330a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800330e:	827b      	strh	r3, [r7, #18]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	8a7b      	ldrh	r3, [r7, #18]
 8003316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800331a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800331e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003326:	b29b      	uxth	r3, r3
 8003328:	8013      	strh	r3, [r2, #0]
 800332a:	e177      	b.n	800361c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800333e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003342:	2b00      	cmp	r3, #0
 8003344:	f280 80ea 	bge.w	800351c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29a      	uxth	r2, r3
 800335a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800335e:	4013      	ands	r3, r2
 8003360:	853b      	strh	r3, [r7, #40]	; 0x28
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003376:	b292      	uxth	r2, r2
 8003378:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800337a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4413      	add	r3, r2
 800338e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	7b1b      	ldrb	r3, [r3, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d122      	bne.n	80033de <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	3306      	adds	r3, #6
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80033c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8087 	beq.w	80034d8 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	6959      	ldr	r1, [r3, #20]
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	88da      	ldrh	r2, [r3, #6]
 80033d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033d8:	f004 fad1 	bl	800797e <USB_ReadPMA>
 80033dc:	e07c      	b.n	80034d8 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	78db      	ldrb	r3, [r3, #3]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d108      	bne.n	80033f8 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80033e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033e8:	461a      	mov	r2, r3
 80033ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f923 	bl	8003638 <HAL_PCD_EP_DB_Receive>
 80033f2:	4603      	mov	r3, r0
 80033f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80033f6:	e06f      	b.n	80034d8 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003412:	847b      	strh	r3, [r7, #34]	; 0x22
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	441a      	add	r2, r3
 8003422:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800342c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003430:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003434:	b29b      	uxth	r3, r3
 8003436:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d021      	beq.n	8003496 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800345a:	b29b      	uxth	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	3302      	adds	r3, #2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800347a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800347c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800347e:	2b00      	cmp	r3, #0
 8003480:	d02a      	beq.n	80034d8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	6959      	ldr	r1, [r3, #20]
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	891a      	ldrh	r2, [r3, #8]
 800348e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003490:	f004 fa75 	bl	800797e <USB_ReadPMA>
 8003494:	e020      	b.n	80034d8 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800349e:	b29b      	uxth	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	3306      	adds	r3, #6
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034be:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80034c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	6959      	ldr	r1, [r3, #20]
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	895a      	ldrh	r2, [r3, #10]
 80034d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034d4:	f004 fa53 	bl	800797e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	69da      	ldr	r2, [r3, #28]
 80034dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034de:	441a      	add	r2, r3
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034ea:	441a      	add	r2, r3
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d004      	beq.n	8003502 <PCD_EP_ISR_Handler+0x4b0>
 80034f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d206      	bcs.n	8003510 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	4619      	mov	r1, r3
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f005 ffcf 	bl	80094ac <HAL_PCD_DataOutStageCallback>
 800350e:	e005      	b.n	800351c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003516:	4618      	mov	r0, r3
 8003518:	f002 ff8e 	bl	8006438 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800351c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800351e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003522:	2b00      	cmp	r3, #0
 8003524:	d07a      	beq.n	800361c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003526:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	4413      	add	r3, r2
 8003538:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003554:	843b      	strh	r3, [r7, #32]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	441a      	add	r2, r3
 8003564:	8c3b      	ldrh	r3, [r7, #32]
 8003566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800356a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800356e:	b29b      	uxth	r3, r3
 8003570:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	78db      	ldrb	r3, [r3, #3]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d108      	bne.n	800358c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800357e:	2b02      	cmp	r3, #2
 8003580:	d146      	bne.n	8003610 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003582:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003588:	2b00      	cmp	r3, #0
 800358a:	d141      	bne.n	8003610 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003594:	b29b      	uxth	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	3302      	adds	r3, #2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035b4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	8bfb      	ldrh	r3, [r7, #30]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d906      	bls.n	80035ce <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	699a      	ldr	r2, [r3, #24]
 80035c4:	8bfb      	ldrh	r3, [r7, #30]
 80035c6:	1ad2      	subs	r2, r2, r3
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	619a      	str	r2, [r3, #24]
 80035cc:	e002      	b.n	80035d4 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	2200      	movs	r2, #0
 80035d2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	4619      	mov	r1, r3
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f005 ff7d 	bl	80094e2 <HAL_PCD_DataInStageCallback>
 80035e8:	e018      	b.n	800361c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	8bfb      	ldrh	r3, [r7, #30]
 80035f0:	441a      	add	r2, r3
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	69da      	ldr	r2, [r3, #28]
 80035fa:	8bfb      	ldrh	r3, [r7, #30]
 80035fc:	441a      	add	r2, r3
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003608:	4618      	mov	r0, r3
 800360a:	f002 ff15 	bl	8006438 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800360e:	e005      	b.n	800361c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003610:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003612:	461a      	mov	r2, r3
 8003614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f91b 	bl	8003852 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003624:	b29b      	uxth	r3, r3
 8003626:	b21b      	sxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	f6ff ad17 	blt.w	800305c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3738      	adds	r7, #56	; 0x38
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d07e      	beq.n	800374e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003658:	b29b      	uxth	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	3302      	adds	r3, #2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003678:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	8b7b      	ldrh	r3, [r7, #26]
 8003680:	429a      	cmp	r2, r3
 8003682:	d306      	bcc.n	8003692 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	8b7b      	ldrh	r3, [r7, #26]
 800368a:	1ad2      	subs	r2, r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	619a      	str	r2, [r3, #24]
 8003690:	e002      	b.n	8003698 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2200      	movs	r2, #0
 8003696:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d123      	bne.n	80036e8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	833b      	strh	r3, [r7, #24]
 80036bc:	8b3b      	ldrh	r3, [r7, #24]
 80036be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036c2:	833b      	strh	r3, [r7, #24]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	441a      	add	r2, r3
 80036d2:	8b3b      	ldrh	r3, [r7, #24]
 80036d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01f      	beq.n	8003732 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	b29b      	uxth	r3, r3
 8003704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370c:	82fb      	strh	r3, [r7, #22]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	441a      	add	r2, r3
 800371c:	8afb      	ldrh	r3, [r7, #22]
 800371e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800372a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800372e:	b29b      	uxth	r3, r3
 8003730:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003732:	8b7b      	ldrh	r3, [r7, #26]
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8087 	beq.w	8003848 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6959      	ldr	r1, [r3, #20]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	891a      	ldrh	r2, [r3, #8]
 8003746:	8b7b      	ldrh	r3, [r7, #26]
 8003748:	f004 f919 	bl	800797e <USB_ReadPMA>
 800374c:	e07c      	b.n	8003848 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003756:	b29b      	uxth	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	3306      	adds	r3, #6
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003776:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	8b7b      	ldrh	r3, [r7, #26]
 800377e:	429a      	cmp	r2, r3
 8003780:	d306      	bcc.n	8003790 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	8b7b      	ldrh	r3, [r7, #26]
 8003788:	1ad2      	subs	r2, r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	619a      	str	r2, [r3, #24]
 800378e:	e002      	b.n	8003796 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2200      	movs	r2, #0
 8003794:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d123      	bne.n	80037e6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b8:	83fb      	strh	r3, [r7, #30]
 80037ba:	8bfb      	ldrh	r3, [r7, #30]
 80037bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80037c0:	83fb      	strh	r3, [r7, #30]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	441a      	add	r2, r3
 80037d0:	8bfb      	ldrh	r3, [r7, #30]
 80037d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d11f      	bne.n	8003830 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	83bb      	strh	r3, [r7, #28]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	441a      	add	r2, r3
 800381a:	8bbb      	ldrh	r3, [r7, #28]
 800381c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003828:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800382c:	b29b      	uxth	r3, r3
 800382e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003830:	8b7b      	ldrh	r3, [r7, #26]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	6959      	ldr	r1, [r3, #20]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	895a      	ldrh	r2, [r3, #10]
 8003842:	8b7b      	ldrh	r3, [r7, #26]
 8003844:	f004 f89b 	bl	800797e <USB_ReadPMA>
    }
  }

  return count;
 8003848:	8b7b      	ldrh	r3, [r7, #26]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b094      	sub	sp, #80	; 0x50
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	4613      	mov	r3, r2
 800385e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8138 	beq.w	8003adc <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003874:	b29b      	uxth	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4413      	add	r3, r2
 8003880:	3302      	adds	r3, #2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003894:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	699a      	ldr	r2, [r3, #24]
 800389c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d907      	bls.n	80038b4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	699a      	ldr	r2, [r3, #24]
 80038a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80038ac:	1ad2      	subs	r2, r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	619a      	str	r2, [r3, #24]
 80038b2:	e002      	b.n	80038ba <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2200      	movs	r2, #0
 80038b8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d12c      	bne.n	800391c <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	4619      	mov	r1, r3
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f005 fe0a 	bl	80094e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 823a 	beq.w	8003d4e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f4:	82fb      	strh	r3, [r7, #22]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	441a      	add	r2, r3
 8003904:	8afb      	ldrh	r3, [r7, #22]
 8003906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800390a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800390e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003916:	b29b      	uxth	r3, r3
 8003918:	8013      	strh	r3, [r2, #0]
 800391a:	e218      	b.n	8003d4e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01f      	beq.n	8003966 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003940:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800395e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003962:	b29b      	uxth	r3, r3
 8003964:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800396c:	2b01      	cmp	r3, #1
 800396e:	f040 81ee 	bne.w	8003d4e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800397a:	441a      	add	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	69da      	ldr	r2, [r3, #28]
 8003984:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003988:	441a      	add	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	6a1a      	ldr	r2, [r3, #32]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	429a      	cmp	r2, r3
 8003998:	d309      	bcc.n	80039ae <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	6a1a      	ldr	r2, [r3, #32]
 80039a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a6:	1ad2      	subs	r2, r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	621a      	str	r2, [r3, #32]
 80039ac:	e015      	b.n	80039da <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d107      	bne.n	80039c6 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80039b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80039ba:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80039c4:	e009      	b.n	80039da <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2200      	movs	r2, #0
 80039d8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	785b      	ldrb	r3, [r3, #1]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d155      	bne.n	8003a8e <HAL_PCD_EP_DB_Transmit+0x23c>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	4413      	add	r3, r2
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	011a      	lsls	r2, r3, #4
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d112      	bne.n	8003a36 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	801a      	strh	r2, [r3, #0]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	801a      	strh	r2, [r3, #0]
 8003a34:	e047      	b.n	8003ac6 <HAL_PCD_EP_DB_Transmit+0x274>
 8003a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a38:	2b3e      	cmp	r3, #62	; 0x3e
 8003a3a:	d811      	bhi.n	8003a60 <HAL_PCD_EP_DB_Transmit+0x20e>
 8003a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_PCD_EP_DB_Transmit+0x200>
 8003a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4e:	3301      	adds	r3, #1
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	029b      	lsls	r3, r3, #10
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	e032      	b.n	8003ac6 <HAL_PCD_EP_DB_Transmit+0x274>
 8003a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <HAL_PCD_EP_DB_Transmit+0x224>
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	3b01      	subs	r3, #1
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	029b      	lsls	r3, r3, #10
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	e01b      	b.n	8003ac6 <HAL_PCD_EP_DB_Transmit+0x274>
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	785b      	ldrb	r3, [r3, #1]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d117      	bne.n	8003ac6 <HAL_PCD_EP_DB_Transmit+0x274>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	4413      	add	r3, r2
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	011a      	lsls	r2, r3, #4
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003abc:	623b      	str	r3, [r7, #32]
 8003abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	6959      	ldr	r1, [r3, #20]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	891a      	ldrh	r2, [r3, #8]
 8003ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f003 ff0d 	bl	80078f4 <USB_WritePMA>
 8003ada:	e138      	b.n	8003d4e <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	3306      	adds	r3, #6
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b04:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d307      	bcc.n	8003b24 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	699a      	ldr	r2, [r3, #24]
 8003b18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b1c:	1ad2      	subs	r2, r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	619a      	str	r2, [r3, #24]
 8003b22:	e002      	b.n	8003b2a <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2200      	movs	r2, #0
 8003b28:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d12e      	bne.n	8003b90 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	4619      	mov	r1, r3
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f005 fcd2 	bl	80094e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b3e:	88fb      	ldrh	r3, [r7, #6]
 8003b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f040 8102 	bne.w	8003d4e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b64:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	441a      	add	r2, r3
 8003b76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	8013      	strh	r3, [r2, #0]
 8003b8e:	e0de      	b.n	8003d4e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d11f      	bne.n	8003bda <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb4:	867b      	strh	r3, [r7, #50]	; 0x32
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	441a      	add	r2, r3
 8003bc4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	f040 80b4 	bne.w	8003d4e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003bee:	441a      	add	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003bfc:	441a      	add	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	6a1a      	ldr	r2, [r3, #32]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d309      	bcc.n	8003c22 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c1a:	1ad2      	subs	r2, r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	621a      	str	r2, [r3, #32]
 8003c20:	e015      	b.n	8003c4e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d107      	bne.n	8003c3a <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8003c2a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c2e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c38:	e009      	b.n	8003c4e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2200      	movs	r2, #0
 8003c44:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	643b      	str	r3, [r7, #64]	; 0x40
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	785b      	ldrb	r3, [r3, #1]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d155      	bne.n	8003d08 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	4413      	add	r3, r2
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	011a      	lsls	r2, r3, #4
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c82:	637b      	str	r3, [r7, #52]	; 0x34
 8003c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d112      	bne.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x45e>
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c98:	801a      	strh	r2, [r3, #0]
 8003c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cac:	801a      	strh	r2, [r3, #0]
 8003cae:	e044      	b.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8003cb4:	d811      	bhi.n	8003cda <HAL_PCD_EP_DB_Transmit+0x488>
 8003cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <HAL_PCD_EP_DB_Transmit+0x47a>
 8003cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc8:	3301      	adds	r3, #1
 8003cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	029b      	lsls	r3, r3, #10
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd6:	801a      	strh	r2, [r3, #0]
 8003cd8:	e02f      	b.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <HAL_PCD_EP_DB_Transmit+0x49e>
 8003cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cec:	3b01      	subs	r3, #1
 8003cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	029b      	lsls	r3, r3, #10
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d04:	801a      	strh	r2, [r3, #0]
 8003d06:	e018      	b.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d114      	bne.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1e:	4413      	add	r3, r2
 8003d20:	643b      	str	r3, [r7, #64]	; 0x40
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	011a      	lsls	r2, r3, #4
 8003d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d38:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6959      	ldr	r1, [r3, #20]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	895a      	ldrh	r2, [r3, #10]
 8003d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f003 fdd3 	bl	80078f4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d68:	82bb      	strh	r3, [r7, #20]
 8003d6a:	8abb      	ldrh	r3, [r7, #20]
 8003d6c:	f083 0310 	eor.w	r3, r3, #16
 8003d70:	82bb      	strh	r3, [r7, #20]
 8003d72:	8abb      	ldrh	r3, [r7, #20]
 8003d74:	f083 0320 	eor.w	r3, r3, #32
 8003d78:	82bb      	strh	r3, [r7, #20]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	441a      	add	r2, r3
 8003d88:	8abb      	ldrh	r3, [r7, #20]
 8003d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3750      	adds	r7, #80	; 0x50
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	817b      	strh	r3, [r7, #10]
 8003db6:	4613      	mov	r3, r2
 8003db8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dc6:	897b      	ldrh	r3, [r7, #10]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4413      	add	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	e009      	b.n	8003df2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dde:	897a      	ldrh	r2, [r7, #10]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003df2:	893b      	ldrh	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d107      	bne.n	8003e08 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	80da      	strh	r2, [r3, #6]
 8003e06:	e00b      	b.n	8003e20 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e26c      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8087 	beq.w	8003f5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e4c:	4b92      	ldr	r3, [pc, #584]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 030c 	and.w	r3, r3, #12
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d00c      	beq.n	8003e72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e58:	4b8f      	ldr	r3, [pc, #572]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 030c 	and.w	r3, r3, #12
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d112      	bne.n	8003e8a <HAL_RCC_OscConfig+0x5e>
 8003e64:	4b8c      	ldr	r3, [pc, #560]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e70:	d10b      	bne.n	8003e8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e72:	4b89      	ldr	r3, [pc, #548]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d06c      	beq.n	8003f58 <HAL_RCC_OscConfig+0x12c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d168      	bne.n	8003f58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e246      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x76>
 8003e94:	4b80      	ldr	r3, [pc, #512]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a7f      	ldr	r2, [pc, #508]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	e02e      	b.n	8003f00 <HAL_RCC_OscConfig+0xd4>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x98>
 8003eaa:	4b7b      	ldr	r3, [pc, #492]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a7a      	ldr	r2, [pc, #488]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	4b78      	ldr	r3, [pc, #480]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a77      	ldr	r2, [pc, #476]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e01d      	b.n	8003f00 <HAL_RCC_OscConfig+0xd4>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0xbc>
 8003ece:	4b72      	ldr	r3, [pc, #456]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a71      	ldr	r2, [pc, #452]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b6f      	ldr	r3, [pc, #444]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a6e      	ldr	r2, [pc, #440]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0xd4>
 8003ee8:	4b6b      	ldr	r3, [pc, #428]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a6a      	ldr	r2, [pc, #424]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b68      	ldr	r3, [pc, #416]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a67      	ldr	r2, [pc, #412]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003efe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d013      	beq.n	8003f30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fd fa56 	bl	80013b8 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fd fa52 	bl	80013b8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	; 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e1fa      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b5d      	ldr	r3, [pc, #372]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0xe4>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fd fa42 	bl	80013b8 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fd fa3e 	bl	80013b8 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e1e6      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4a:	4b53      	ldr	r3, [pc, #332]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x10c>
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d063      	beq.n	800402e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f66:	4b4c      	ldr	r3, [pc, #304]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f72:	4b49      	ldr	r3, [pc, #292]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d11c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x18c>
 8003f7e:	4b46      	ldr	r3, [pc, #280]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d116      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8a:	4b43      	ldr	r3, [pc, #268]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x176>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e1ba      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa2:	4b3d      	ldr	r3, [pc, #244]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4939      	ldr	r1, [pc, #228]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb6:	e03a      	b.n	800402e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc0:	4b36      	ldr	r3, [pc, #216]	; (800409c <HAL_RCC_OscConfig+0x270>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc6:	f7fd f9f7 	bl	80013b8 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fce:	f7fd f9f3 	bl	80013b8 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e19b      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b2a      	ldr	r3, [pc, #168]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4927      	ldr	r1, [pc, #156]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]
 8004000:	e015      	b.n	800402e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004002:	4b26      	ldr	r3, [pc, #152]	; (800409c <HAL_RCC_OscConfig+0x270>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fd f9d6 	bl	80013b8 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004010:	f7fd f9d2 	bl	80013b8 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e17a      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d03a      	beq.n	80040b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d019      	beq.n	8004076 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004042:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <HAL_RCC_OscConfig+0x274>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004048:	f7fd f9b6 	bl	80013b8 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004050:	f7fd f9b2 	bl	80013b8 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e15a      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <HAL_RCC_OscConfig+0x26c>)
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800406e:	2001      	movs	r0, #1
 8004070:	f000 fac4 	bl	80045fc <RCC_Delay>
 8004074:	e01c      	b.n	80040b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004076:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <HAL_RCC_OscConfig+0x274>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407c:	f7fd f99c 	bl	80013b8 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004082:	e00f      	b.n	80040a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004084:	f7fd f998 	bl	80013b8 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d908      	bls.n	80040a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e140      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000
 800409c:	42420000 	.word	0x42420000
 80040a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a4:	4b9e      	ldr	r3, [pc, #632]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e9      	bne.n	8004084 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80a6 	beq.w	800420a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040be:	2300      	movs	r3, #0
 80040c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c2:	4b97      	ldr	r3, [pc, #604]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10d      	bne.n	80040ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ce:	4b94      	ldr	r3, [pc, #592]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	4a93      	ldr	r2, [pc, #588]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 80040d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d8:	61d3      	str	r3, [r2, #28]
 80040da:	4b91      	ldr	r3, [pc, #580]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e6:	2301      	movs	r3, #1
 80040e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ea:	4b8e      	ldr	r3, [pc, #568]	; (8004324 <HAL_RCC_OscConfig+0x4f8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d118      	bne.n	8004128 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f6:	4b8b      	ldr	r3, [pc, #556]	; (8004324 <HAL_RCC_OscConfig+0x4f8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a8a      	ldr	r2, [pc, #552]	; (8004324 <HAL_RCC_OscConfig+0x4f8>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004102:	f7fd f959 	bl	80013b8 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410a:	f7fd f955 	bl	80013b8 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b64      	cmp	r3, #100	; 0x64
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e0fd      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411c:	4b81      	ldr	r3, [pc, #516]	; (8004324 <HAL_RCC_OscConfig+0x4f8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d106      	bne.n	800413e <HAL_RCC_OscConfig+0x312>
 8004130:	4b7b      	ldr	r3, [pc, #492]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	4a7a      	ldr	r2, [pc, #488]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	6213      	str	r3, [r2, #32]
 800413c:	e02d      	b.n	800419a <HAL_RCC_OscConfig+0x36e>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0x334>
 8004146:	4b76      	ldr	r3, [pc, #472]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	4a75      	ldr	r2, [pc, #468]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 800414c:	f023 0301 	bic.w	r3, r3, #1
 8004150:	6213      	str	r3, [r2, #32]
 8004152:	4b73      	ldr	r3, [pc, #460]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	4a72      	ldr	r2, [pc, #456]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004158:	f023 0304 	bic.w	r3, r3, #4
 800415c:	6213      	str	r3, [r2, #32]
 800415e:	e01c      	b.n	800419a <HAL_RCC_OscConfig+0x36e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b05      	cmp	r3, #5
 8004166:	d10c      	bne.n	8004182 <HAL_RCC_OscConfig+0x356>
 8004168:	4b6d      	ldr	r3, [pc, #436]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	4a6c      	ldr	r2, [pc, #432]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 800416e:	f043 0304 	orr.w	r3, r3, #4
 8004172:	6213      	str	r3, [r2, #32]
 8004174:	4b6a      	ldr	r3, [pc, #424]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	4a69      	ldr	r2, [pc, #420]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	6213      	str	r3, [r2, #32]
 8004180:	e00b      	b.n	800419a <HAL_RCC_OscConfig+0x36e>
 8004182:	4b67      	ldr	r3, [pc, #412]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	4a66      	ldr	r2, [pc, #408]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	6213      	str	r3, [r2, #32]
 800418e:	4b64      	ldr	r3, [pc, #400]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	4a63      	ldr	r2, [pc, #396]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004194:	f023 0304 	bic.w	r3, r3, #4
 8004198:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d015      	beq.n	80041ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a2:	f7fd f909 	bl	80013b8 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a8:	e00a      	b.n	80041c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041aa:	f7fd f905 	bl	80013b8 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e0ab      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c0:	4b57      	ldr	r3, [pc, #348]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0ee      	beq.n	80041aa <HAL_RCC_OscConfig+0x37e>
 80041cc:	e014      	b.n	80041f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ce:	f7fd f8f3 	bl	80013b8 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d4:	e00a      	b.n	80041ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d6:	f7fd f8ef 	bl	80013b8 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e095      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ec:	4b4c      	ldr	r3, [pc, #304]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1ee      	bne.n	80041d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d105      	bne.n	800420a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fe:	4b48      	ldr	r3, [pc, #288]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	4a47      	ldr	r2, [pc, #284]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004208:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8081 	beq.w	8004316 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004214:	4b42      	ldr	r3, [pc, #264]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f003 030c 	and.w	r3, r3, #12
 800421c:	2b08      	cmp	r3, #8
 800421e:	d061      	beq.n	80042e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	2b02      	cmp	r3, #2
 8004226:	d146      	bne.n	80042b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004228:	4b3f      	ldr	r3, [pc, #252]	; (8004328 <HAL_RCC_OscConfig+0x4fc>)
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422e:	f7fd f8c3 	bl	80013b8 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004236:	f7fd f8bf 	bl	80013b8 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e067      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004248:	4b35      	ldr	r3, [pc, #212]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f0      	bne.n	8004236 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425c:	d108      	bne.n	8004270 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800425e:	4b30      	ldr	r3, [pc, #192]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	492d      	ldr	r1, [pc, #180]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 800426c:	4313      	orrs	r3, r2
 800426e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004270:	4b2b      	ldr	r3, [pc, #172]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a19      	ldr	r1, [r3, #32]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	430b      	orrs	r3, r1
 8004282:	4927      	ldr	r1, [pc, #156]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 8004284:	4313      	orrs	r3, r2
 8004286:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004288:	4b27      	ldr	r3, [pc, #156]	; (8004328 <HAL_RCC_OscConfig+0x4fc>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428e:	f7fd f893 	bl	80013b8 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004296:	f7fd f88f 	bl	80013b8 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e037      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042a8:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCC_OscConfig+0x46a>
 80042b4:	e02f      	b.n	8004316 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b6:	4b1c      	ldr	r3, [pc, #112]	; (8004328 <HAL_RCC_OscConfig+0x4fc>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042bc:	f7fd f87c 	bl	80013b8 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c4:	f7fd f878 	bl	80013b8 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e020      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d6:	4b12      	ldr	r3, [pc, #72]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x498>
 80042e2:	e018      	b.n	8004316 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e013      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCC_OscConfig+0x4f4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	429a      	cmp	r2, r3
 8004302:	d106      	bne.n	8004312 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430e:	429a      	cmp	r2, r3
 8004310:	d001      	beq.n	8004316 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40021000 	.word	0x40021000
 8004324:	40007000 	.word	0x40007000
 8004328:	42420060 	.word	0x42420060

0800432c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e0d0      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004340:	4b6a      	ldr	r3, [pc, #424]	; (80044ec <HAL_RCC_ClockConfig+0x1c0>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d910      	bls.n	8004370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b67      	ldr	r3, [pc, #412]	; (80044ec <HAL_RCC_ClockConfig+0x1c0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 0207 	bic.w	r2, r3, #7
 8004356:	4965      	ldr	r1, [pc, #404]	; (80044ec <HAL_RCC_ClockConfig+0x1c0>)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b63      	ldr	r3, [pc, #396]	; (80044ec <HAL_RCC_ClockConfig+0x1c0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0b8      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d020      	beq.n	80043be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004388:	4b59      	ldr	r3, [pc, #356]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	4a58      	ldr	r2, [pc, #352]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 800438e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004392:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043a0:	4b53      	ldr	r3, [pc, #332]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4a52      	ldr	r2, [pc, #328]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 80043a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ac:	4b50      	ldr	r3, [pc, #320]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	494d      	ldr	r1, [pc, #308]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d040      	beq.n	800444c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d107      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d2:	4b47      	ldr	r3, [pc, #284]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d115      	bne.n	800440a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e07f      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d107      	bne.n	80043fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ea:	4b41      	ldr	r3, [pc, #260]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e073      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fa:	4b3d      	ldr	r3, [pc, #244]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e06b      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800440a:	4b39      	ldr	r3, [pc, #228]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f023 0203 	bic.w	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	4936      	ldr	r1, [pc, #216]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800441c:	f7fc ffcc 	bl	80013b8 <HAL_GetTick>
 8004420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004422:	e00a      	b.n	800443a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004424:	f7fc ffc8 	bl	80013b8 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004432:	4293      	cmp	r3, r2
 8004434:	d901      	bls.n	800443a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e053      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443a:	4b2d      	ldr	r3, [pc, #180]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 020c 	and.w	r2, r3, #12
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	429a      	cmp	r2, r3
 800444a:	d1eb      	bne.n	8004424 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800444c:	4b27      	ldr	r3, [pc, #156]	; (80044ec <HAL_RCC_ClockConfig+0x1c0>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d210      	bcs.n	800447c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445a:	4b24      	ldr	r3, [pc, #144]	; (80044ec <HAL_RCC_ClockConfig+0x1c0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 0207 	bic.w	r2, r3, #7
 8004462:	4922      	ldr	r1, [pc, #136]	; (80044ec <HAL_RCC_ClockConfig+0x1c0>)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	4313      	orrs	r3, r2
 8004468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800446a:	4b20      	ldr	r3, [pc, #128]	; (80044ec <HAL_RCC_ClockConfig+0x1c0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e032      	b.n	80044e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4916      	ldr	r1, [pc, #88]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004496:	4313      	orrs	r3, r2
 8004498:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d009      	beq.n	80044ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044a6:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	490e      	ldr	r1, [pc, #56]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044ba:	f000 f821 	bl	8004500 <HAL_RCC_GetSysClockFreq>
 80044be:	4602      	mov	r2, r0
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	091b      	lsrs	r3, r3, #4
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	490a      	ldr	r1, [pc, #40]	; (80044f4 <HAL_RCC_ClockConfig+0x1c8>)
 80044cc:	5ccb      	ldrb	r3, [r1, r3]
 80044ce:	fa22 f303 	lsr.w	r3, r2, r3
 80044d2:	4a09      	ldr	r2, [pc, #36]	; (80044f8 <HAL_RCC_ClockConfig+0x1cc>)
 80044d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044d6:	4b09      	ldr	r3, [pc, #36]	; (80044fc <HAL_RCC_ClockConfig+0x1d0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fc ff2a 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40022000 	.word	0x40022000
 80044f0:	40021000 	.word	0x40021000
 80044f4:	0800acfc 	.word	0x0800acfc
 80044f8:	20000010 	.word	0x20000010
 80044fc:	20000014 	.word	0x20000014

08004500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004500:	b490      	push	{r4, r7}
 8004502:	b08a      	sub	sp, #40	; 0x28
 8004504:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004508:	1d3c      	adds	r4, r7, #4
 800450a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800450c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004510:	f240 2301 	movw	r3, #513	; 0x201
 8004514:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	2300      	movs	r3, #0
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	2300      	movs	r3, #0
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800452a:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	2b04      	cmp	r3, #4
 8004538:	d002      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x40>
 800453a:	2b08      	cmp	r3, #8
 800453c:	d003      	beq.n	8004546 <HAL_RCC_GetSysClockFreq+0x46>
 800453e:	e02d      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004540:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004542:	623b      	str	r3, [r7, #32]
      break;
 8004544:	e02d      	b.n	80045a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	0c9b      	lsrs	r3, r3, #18
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004552:	4413      	add	r3, r2
 8004554:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004558:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d013      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004564:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	0c5b      	lsrs	r3, r3, #17
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004572:	4413      	add	r3, r2
 8004574:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004578:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800457e:	fb02 f203 	mul.w	r2, r2, r3
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	fbb2 f3f3 	udiv	r3, r2, r3
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
 800458a:	e004      	b.n	8004596 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	4a0b      	ldr	r2, [pc, #44]	; (80045bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004590:	fb02 f303 	mul.w	r3, r2, r3
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	623b      	str	r3, [r7, #32]
      break;
 800459a:	e002      	b.n	80045a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800459e:	623b      	str	r3, [r7, #32]
      break;
 80045a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045a2:	6a3b      	ldr	r3, [r7, #32]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3728      	adds	r7, #40	; 0x28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc90      	pop	{r4, r7}
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	0800ac94 	.word	0x0800ac94
 80045b4:	40021000 	.word	0x40021000
 80045b8:	007a1200 	.word	0x007a1200
 80045bc:	003d0900 	.word	0x003d0900

080045c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c4:	4b02      	ldr	r3, [pc, #8]	; (80045d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80045c6:	681b      	ldr	r3, [r3, #0]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr
 80045d0:	20000010 	.word	0x20000010

080045d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045d8:	f7ff fff2 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	0adb      	lsrs	r3, r3, #11
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	4903      	ldr	r1, [pc, #12]	; (80045f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ea:	5ccb      	ldrb	r3, [r1, r3]
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40021000 	.word	0x40021000
 80045f8:	0800ad0c 	.word	0x0800ad0c

080045fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004604:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <RCC_Delay+0x34>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <RCC_Delay+0x38>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	0a5b      	lsrs	r3, r3, #9
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	fb02 f303 	mul.w	r3, r2, r3
 8004616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004618:	bf00      	nop
  }
  while (Delay --);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1e5a      	subs	r2, r3, #1
 800461e:	60fa      	str	r2, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f9      	bne.n	8004618 <RCC_Delay+0x1c>
}
 8004624:	bf00      	nop
 8004626:	bf00      	nop
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr
 8004630:	20000010 	.word	0x20000010
 8004634:	10624dd3 	.word	0x10624dd3

08004638 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d07d      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004654:	2300      	movs	r3, #0
 8004656:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004658:	4b4f      	ldr	r3, [pc, #316]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10d      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004664:	4b4c      	ldr	r3, [pc, #304]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	4a4b      	ldr	r2, [pc, #300]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466e:	61d3      	str	r3, [r2, #28]
 8004670:	4b49      	ldr	r3, [pc, #292]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800467c:	2301      	movs	r3, #1
 800467e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004680:	4b46      	ldr	r3, [pc, #280]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d118      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800468c:	4b43      	ldr	r3, [pc, #268]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a42      	ldr	r2, [pc, #264]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004696:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004698:	f7fc fe8e 	bl	80013b8 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469e:	e008      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a0:	f7fc fe8a 	bl	80013b8 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	; 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e06d      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b2:	4b3a      	ldr	r3, [pc, #232]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046be:	4b36      	ldr	r3, [pc, #216]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d02e      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d027      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046dc:	4b2e      	ldr	r3, [pc, #184]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046e6:	4b2e      	ldr	r3, [pc, #184]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ec:	4b2c      	ldr	r3, [pc, #176]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046f2:	4a29      	ldr	r2, [pc, #164]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d014      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7fc fe59 	bl	80013b8 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004708:	e00a      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470a:	f7fc fe55 	bl	80013b8 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	f241 3288 	movw	r2, #5000	; 0x1388
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e036      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004720:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0ee      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800472c:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	4917      	ldr	r1, [pc, #92]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473a:	4313      	orrs	r3, r2
 800473c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800473e:	7dfb      	ldrb	r3, [r7, #23]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d105      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004744:	4b14      	ldr	r3, [pc, #80]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	4a13      	ldr	r2, [pc, #76]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800474e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800475c:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	490b      	ldr	r1, [pc, #44]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476a:	4313      	orrs	r3, r2
 800476c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800477a:	4b07      	ldr	r3, [pc, #28]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	4904      	ldr	r1, [pc, #16]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004788:	4313      	orrs	r3, r2
 800478a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40021000 	.word	0x40021000
 800479c:	40007000 	.word	0x40007000
 80047a0:	42420440 	.word	0x42420440

080047a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047a4:	b590      	push	{r4, r7, lr}
 80047a6:	b08d      	sub	sp, #52	; 0x34
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80047ac:	4b5a      	ldr	r3, [pc, #360]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80047ae:	f107 040c 	add.w	r4, r7, #12
 80047b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80047b8:	f240 2301 	movw	r3, #513	; 0x201
 80047bc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
 80047c2:	2300      	movs	r3, #0
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	2300      	movs	r3, #0
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b10      	cmp	r3, #16
 80047dc:	f200 8091 	bhi.w	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d04c      	beq.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d07c      	beq.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80047ec:	e089      	b.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80047ee:	4b4b      	ldr	r3, [pc, #300]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80047f4:	4b49      	ldr	r3, [pc, #292]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8082 	beq.w	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	0c9b      	lsrs	r3, r3, #18
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800480e:	4413      	add	r3, r2
 8004810:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004814:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d018      	beq.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004820:	4b3e      	ldr	r3, [pc, #248]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	0c5b      	lsrs	r3, r3, #17
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800482e:	4413      	add	r3, r2
 8004830:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00d      	beq.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004840:	4a37      	ldr	r2, [pc, #220]	; (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	fbb2 f2f3 	udiv	r2, r2, r3
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	fb02 f303 	mul.w	r3, r2, r3
 800484e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004850:	e004      	b.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	4a33      	ldr	r2, [pc, #204]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800485c:	4b2f      	ldr	r3, [pc, #188]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004868:	d102      	bne.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800486e:	e04a      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4a2c      	ldr	r2, [pc, #176]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	085b      	lsrs	r3, r3, #1
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800487e:	e042      	b.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004880:	4b26      	ldr	r3, [pc, #152]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004890:	d108      	bne.n	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800489c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048a2:	e01f      	b.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ae:	d109      	bne.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80048b0:	4b1a      	ldr	r3, [pc, #104]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80048bc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c2:	e00f      	b.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ce:	d11c      	bne.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80048d0:	4b12      	ldr	r3, [pc, #72]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d016      	beq.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80048dc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80048e0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80048e2:	e012      	b.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80048e4:	e011      	b.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80048e6:	f7ff fe75 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 80048ea:	4602      	mov	r2, r0
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	0b9b      	lsrs	r3, r3, #14
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	3301      	adds	r3, #1
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004900:	e004      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004902:	bf00      	nop
 8004904:	e002      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004906:	bf00      	nop
 8004908:	e000      	b.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800490a:	bf00      	nop
    }
  }
  return (frequency);
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800490e:	4618      	mov	r0, r3
 8004910:	3734      	adds	r7, #52	; 0x34
 8004912:	46bd      	mov	sp, r7
 8004914:	bd90      	pop	{r4, r7, pc}
 8004916:	bf00      	nop
 8004918:	0800aca4 	.word	0x0800aca4
 800491c:	40021000 	.word	0x40021000
 8004920:	007a1200 	.word	0x007a1200
 8004924:	003d0900 	.word	0x003d0900
 8004928:	aaaaaaab 	.word	0xaaaaaaab

0800492c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e076      	b.n	8004a2c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d108      	bne.n	8004958 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800494e:	d009      	beq.n	8004964 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	61da      	str	r2, [r3, #28]
 8004956:	e005      	b.n	8004964 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fc fab4 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800499a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e8:	ea42 0103 	orr.w	r1, r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	0c1a      	lsrs	r2, r3, #16
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f002 0204 	and.w	r2, r2, #4
 8004a0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	69da      	ldr	r2, [r3, #28]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d101      	bne.n	8004a56 <HAL_SPI_Transmit+0x22>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e126      	b.n	8004ca4 <HAL_SPI_Transmit+0x270>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a5e:	f7fc fcab 	bl	80013b8 <HAL_GetTick>
 8004a62:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d002      	beq.n	8004a7a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a74:	2302      	movs	r3, #2
 8004a76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a78:	e10b      	b.n	8004c92 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_SPI_Transmit+0x52>
 8004a80:	88fb      	ldrh	r3, [r7, #6]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a8a:	e102      	b.n	8004c92 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2203      	movs	r2, #3
 8004a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	88fa      	ldrh	r2, [r7, #6]
 8004aa4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	88fa      	ldrh	r2, [r7, #6]
 8004aaa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad2:	d10f      	bne.n	8004af4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004af2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d007      	beq.n	8004b12 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1a:	d14b      	bne.n	8004bb4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <HAL_SPI_Transmit+0xf6>
 8004b24:	8afb      	ldrh	r3, [r7, #22]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d13e      	bne.n	8004ba8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	881a      	ldrh	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	1c9a      	adds	r2, r3, #2
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b4e:	e02b      	b.n	8004ba8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d112      	bne.n	8004b84 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	881a      	ldrh	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	1c9a      	adds	r2, r3, #2
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b82:	e011      	b.n	8004ba8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b84:	f7fc fc18 	bl	80013b8 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d803      	bhi.n	8004b9c <HAL_SPI_Transmit+0x168>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9a:	d102      	bne.n	8004ba2 <HAL_SPI_Transmit+0x16e>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ba6:	e074      	b.n	8004c92 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1ce      	bne.n	8004b50 <HAL_SPI_Transmit+0x11c>
 8004bb2:	e04c      	b.n	8004c4e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <HAL_SPI_Transmit+0x18e>
 8004bbc:	8afb      	ldrh	r3, [r7, #22]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d140      	bne.n	8004c44 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	330c      	adds	r3, #12
 8004bcc:	7812      	ldrb	r2, [r2, #0]
 8004bce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004be8:	e02c      	b.n	8004c44 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d113      	bne.n	8004c20 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	330c      	adds	r3, #12
 8004c02:	7812      	ldrb	r2, [r2, #0]
 8004c04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c1e:	e011      	b.n	8004c44 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c20:	f7fc fbca 	bl	80013b8 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d803      	bhi.n	8004c38 <HAL_SPI_Transmit+0x204>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c36:	d102      	bne.n	8004c3e <HAL_SPI_Transmit+0x20a>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c42:	e026      	b.n	8004c92 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1cd      	bne.n	8004bea <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	6839      	ldr	r1, [r7, #0]
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f8b2 	bl	8004dbc <SPI_EndRxTxTransaction>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10a      	bne.n	8004c82 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	77fb      	strb	r3, [r7, #31]
 8004c8e:	e000      	b.n	8004c92 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3720      	adds	r7, #32
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cbc:	f7fc fb7c 	bl	80013b8 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	4413      	add	r3, r2
 8004cca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ccc:	f7fc fb74 	bl	80013b8 <HAL_GetTick>
 8004cd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cd2:	4b39      	ldr	r3, [pc, #228]	; (8004db8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	015b      	lsls	r3, r3, #5
 8004cd8:	0d1b      	lsrs	r3, r3, #20
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	fb02 f303 	mul.w	r3, r2, r3
 8004ce0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ce2:	e054      	b.n	8004d8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d050      	beq.n	8004d8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cec:	f7fc fb64 	bl	80013b8 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d902      	bls.n	8004d02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d13d      	bne.n	8004d7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d1a:	d111      	bne.n	8004d40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d24:	d004      	beq.n	8004d30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2e:	d107      	bne.n	8004d40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d48:	d10f      	bne.n	8004d6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e017      	b.n	8004dae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4013      	ands	r3, r2
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	bf0c      	ite	eq
 8004d9e:	2301      	moveq	r3, #1
 8004da0:	2300      	movne	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d19b      	bne.n	8004ce4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3720      	adds	r7, #32
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000010 	.word	0x20000010

08004dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f7ff ff6a 	bl	8004cac <SPI_WaitFlagStateUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f043 0220 	orr.w	r2, r3, #32
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e000      	b.n	8004df0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e041      	b.n	8004e8e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fc f8a2 	bl	8000f68 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3304      	adds	r3, #4
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f000 fb38 	bl	80054ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d104      	bne.n	8004eb2 <HAL_TIM_IC_Start_IT+0x1a>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	e013      	b.n	8004eda <HAL_TIM_IC_Start_IT+0x42>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d104      	bne.n	8004ec2 <HAL_TIM_IC_Start_IT+0x2a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	e00b      	b.n	8004eda <HAL_TIM_IC_Start_IT+0x42>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d104      	bne.n	8004ed2 <HAL_TIM_IC_Start_IT+0x3a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	e003      	b.n	8004eda <HAL_TIM_IC_Start_IT+0x42>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d104      	bne.n	8004eec <HAL_TIM_IC_Start_IT+0x54>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	e013      	b.n	8004f14 <HAL_TIM_IC_Start_IT+0x7c>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d104      	bne.n	8004efc <HAL_TIM_IC_Start_IT+0x64>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	e00b      	b.n	8004f14 <HAL_TIM_IC_Start_IT+0x7c>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d104      	bne.n	8004f0c <HAL_TIM_IC_Start_IT+0x74>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	e003      	b.n	8004f14 <HAL_TIM_IC_Start_IT+0x7c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d102      	bne.n	8004f22 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f1c:	7bbb      	ldrb	r3, [r7, #14]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d001      	beq.n	8004f26 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e0b3      	b.n	800508e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d104      	bne.n	8004f36 <HAL_TIM_IC_Start_IT+0x9e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f34:	e013      	b.n	8004f5e <HAL_TIM_IC_Start_IT+0xc6>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d104      	bne.n	8004f46 <HAL_TIM_IC_Start_IT+0xae>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f44:	e00b      	b.n	8004f5e <HAL_TIM_IC_Start_IT+0xc6>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d104      	bne.n	8004f56 <HAL_TIM_IC_Start_IT+0xbe>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f54:	e003      	b.n	8004f5e <HAL_TIM_IC_Start_IT+0xc6>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d104      	bne.n	8004f6e <HAL_TIM_IC_Start_IT+0xd6>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f6c:	e013      	b.n	8004f96 <HAL_TIM_IC_Start_IT+0xfe>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d104      	bne.n	8004f7e <HAL_TIM_IC_Start_IT+0xe6>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f7c:	e00b      	b.n	8004f96 <HAL_TIM_IC_Start_IT+0xfe>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d104      	bne.n	8004f8e <HAL_TIM_IC_Start_IT+0xf6>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f8c:	e003      	b.n	8004f96 <HAL_TIM_IC_Start_IT+0xfe>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2202      	movs	r2, #2
 8004f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b0c      	cmp	r3, #12
 8004f9a:	d841      	bhi.n	8005020 <HAL_TIM_IC_Start_IT+0x188>
 8004f9c:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <HAL_TIM_IC_Start_IT+0x10c>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fd9 	.word	0x08004fd9
 8004fa8:	08005021 	.word	0x08005021
 8004fac:	08005021 	.word	0x08005021
 8004fb0:	08005021 	.word	0x08005021
 8004fb4:	08004feb 	.word	0x08004feb
 8004fb8:	08005021 	.word	0x08005021
 8004fbc:	08005021 	.word	0x08005021
 8004fc0:	08005021 	.word	0x08005021
 8004fc4:	08004ffd 	.word	0x08004ffd
 8004fc8:	08005021 	.word	0x08005021
 8004fcc:	08005021 	.word	0x08005021
 8004fd0:	08005021 	.word	0x08005021
 8004fd4:	0800500f 	.word	0x0800500f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0202 	orr.w	r2, r2, #2
 8004fe6:	60da      	str	r2, [r3, #12]
      break;
 8004fe8:	e01b      	b.n	8005022 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0204 	orr.w	r2, r2, #4
 8004ff8:	60da      	str	r2, [r3, #12]
      break;
 8004ffa:	e012      	b.n	8005022 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0208 	orr.w	r2, r2, #8
 800500a:	60da      	str	r2, [r3, #12]
      break;
 800500c:	e009      	b.n	8005022 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0210 	orr.w	r2, r2, #16
 800501c:	60da      	str	r2, [r3, #12]
      break;
 800501e:	e000      	b.n	8005022 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8005020:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2201      	movs	r2, #1
 8005028:	6839      	ldr	r1, [r7, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fbad 	bl	800578a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a18      	ldr	r2, [pc, #96]	; (8005098 <HAL_TIM_IC_Start_IT+0x200>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00e      	beq.n	8005058 <HAL_TIM_IC_Start_IT+0x1c0>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005042:	d009      	beq.n	8005058 <HAL_TIM_IC_Start_IT+0x1c0>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a14      	ldr	r2, [pc, #80]	; (800509c <HAL_TIM_IC_Start_IT+0x204>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <HAL_TIM_IC_Start_IT+0x1c0>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a13      	ldr	r2, [pc, #76]	; (80050a0 <HAL_TIM_IC_Start_IT+0x208>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d111      	bne.n	800507c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b06      	cmp	r3, #6
 8005068:	d010      	beq.n	800508c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507a:	e007      	b.n	800508c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40000400 	.word	0x40000400
 80050a0:	40000800 	.word	0x40000800

080050a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d122      	bne.n	8005100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d11b      	bne.n	8005100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0202 	mvn.w	r2, #2
 80050d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fb fa04 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 80050ec:	e005      	b.n	80050fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f9c1 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f9c7 	bl	8005488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b04      	cmp	r3, #4
 800510c:	d122      	bne.n	8005154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b04      	cmp	r3, #4
 800511a:	d11b      	bne.n	8005154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0204 	mvn.w	r2, #4
 8005124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fb f9da 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8005140:	e005      	b.n	800514e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f997 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f99d 	bl	8005488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b08      	cmp	r3, #8
 8005160:	d122      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b08      	cmp	r3, #8
 800516e:	d11b      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0208 	mvn.w	r2, #8
 8005178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2204      	movs	r2, #4
 800517e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fb f9b0 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8005194:	e005      	b.n	80051a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f96d 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f973 	bl	8005488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d122      	bne.n	80051fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d11b      	bne.n	80051fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0210 	mvn.w	r2, #16
 80051cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2208      	movs	r2, #8
 80051d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fb f986 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 80051e8:	e005      	b.n	80051f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f943 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f949 	bl	8005488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b01      	cmp	r3, #1
 8005208:	d10e      	bne.n	8005228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b01      	cmp	r3, #1
 8005216:	d107      	bne.n	8005228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0201 	mvn.w	r2, #1
 8005220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f91e 	bl	8005464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005232:	2b80      	cmp	r3, #128	; 0x80
 8005234:	d10e      	bne.n	8005254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005240:	2b80      	cmp	r3, #128	; 0x80
 8005242:	d107      	bne.n	8005254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fb27 	bl	80058a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b40      	cmp	r3, #64	; 0x40
 8005260:	d10e      	bne.n	8005280 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d107      	bne.n	8005280 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f90d 	bl	800549a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b20      	cmp	r3, #32
 800528c:	d10e      	bne.n	80052ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b20      	cmp	r3, #32
 800529a:	d107      	bne.n	80052ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0220 	mvn.w	r2, #32
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 faf2 	bl	8005890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_TIM_IC_ConfigChannel+0x1a>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e082      	b.n	80053d4 <HAL_TIM_IC_ConfigChannel+0x120>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d11b      	bne.n	8005314 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	6819      	ldr	r1, [r3, #0]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f000 f940 	bl	8005570 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 020c 	bic.w	r2, r2, #12
 80052fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6999      	ldr	r1, [r3, #24]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	619a      	str	r2, [r3, #24]
 8005312:	e05a      	b.n	80053ca <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b04      	cmp	r3, #4
 8005318:	d11c      	bne.n	8005354 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	6819      	ldr	r1, [r3, #0]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f000 f97b 	bl	8005624 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800533c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6999      	ldr	r1, [r3, #24]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	021a      	lsls	r2, r3, #8
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	619a      	str	r2, [r3, #24]
 8005352:	e03a      	b.n	80053ca <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b08      	cmp	r3, #8
 8005358:	d11b      	bne.n	8005392 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6819      	ldr	r1, [r3, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f000 f997 	bl	800569c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 020c 	bic.w	r2, r2, #12
 800537c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69d9      	ldr	r1, [r3, #28]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	61da      	str	r2, [r3, #28]
 8005390:	e01b      	b.n	80053ca <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6819      	ldr	r1, [r3, #0]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f000 f9b6 	bl	8005712 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69da      	ldr	r2, [r3, #28]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053b4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69d9      	ldr	r1, [r3, #28]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	021a      	lsls	r2, r3, #8
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b0c      	cmp	r3, #12
 80053ee:	d831      	bhi.n	8005454 <HAL_TIM_ReadCapturedValue+0x78>
 80053f0:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80053f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	0800542d 	.word	0x0800542d
 80053fc:	08005455 	.word	0x08005455
 8005400:	08005455 	.word	0x08005455
 8005404:	08005455 	.word	0x08005455
 8005408:	08005437 	.word	0x08005437
 800540c:	08005455 	.word	0x08005455
 8005410:	08005455 	.word	0x08005455
 8005414:	08005455 	.word	0x08005455
 8005418:	08005441 	.word	0x08005441
 800541c:	08005455 	.word	0x08005455
 8005420:	08005455 	.word	0x08005455
 8005424:	08005455 	.word	0x08005455
 8005428:	0800544b 	.word	0x0800544b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005432:	60fb      	str	r3, [r7, #12]

      break;
 8005434:	e00f      	b.n	8005456 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	60fb      	str	r3, [r7, #12]

      break;
 800543e:	e00a      	b.n	8005456 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005446:	60fb      	str	r3, [r7, #12]

      break;
 8005448:	e005      	b.n	8005456 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	60fb      	str	r3, [r7, #12]

      break;
 8005452:	e000      	b.n	8005456 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005454:	bf00      	nop
  }

  return tmpreg;
 8005456:	68fb      	ldr	r3, [r7, #12]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop

08005464 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	bc80      	pop	{r7}
 8005474:	4770      	bx	lr

08005476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr

08005488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr

0800549a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a29      	ldr	r2, [pc, #164]	; (8005564 <TIM_Base_SetConfig+0xb8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_Base_SetConfig+0x30>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ca:	d007      	beq.n	80054dc <TIM_Base_SetConfig+0x30>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a26      	ldr	r2, [pc, #152]	; (8005568 <TIM_Base_SetConfig+0xbc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_Base_SetConfig+0x30>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a25      	ldr	r2, [pc, #148]	; (800556c <TIM_Base_SetConfig+0xc0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <TIM_Base_SetConfig+0xb8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00b      	beq.n	800550e <TIM_Base_SetConfig+0x62>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fc:	d007      	beq.n	800550e <TIM_Base_SetConfig+0x62>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a19      	ldr	r2, [pc, #100]	; (8005568 <TIM_Base_SetConfig+0xbc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d003      	beq.n	800550e <TIM_Base_SetConfig+0x62>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a18      	ldr	r2, [pc, #96]	; (800556c <TIM_Base_SetConfig+0xc0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d108      	bne.n	8005520 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a07      	ldr	r2, [pc, #28]	; (8005564 <TIM_Base_SetConfig+0xb8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d103      	bne.n	8005554 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	615a      	str	r2, [r3, #20]
}
 800555a:	bf00      	nop
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800

08005570 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	f023 0201 	bic.w	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4a1f      	ldr	r2, [pc, #124]	; (8005618 <TIM_TI1_SetConfig+0xa8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00b      	beq.n	80055b6 <TIM_TI1_SetConfig+0x46>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a4:	d007      	beq.n	80055b6 <TIM_TI1_SetConfig+0x46>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4a1c      	ldr	r2, [pc, #112]	; (800561c <TIM_TI1_SetConfig+0xac>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d003      	beq.n	80055b6 <TIM_TI1_SetConfig+0x46>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a1b      	ldr	r2, [pc, #108]	; (8005620 <TIM_TI1_SetConfig+0xb0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d101      	bne.n	80055ba <TIM_TI1_SetConfig+0x4a>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <TIM_TI1_SetConfig+0x4c>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e003      	b.n	80055da <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f023 030a 	bic.w	r3, r3, #10
 80055f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f003 030a 	and.w	r3, r3, #10
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr
 8005618:	40012c00 	.word	0x40012c00
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800

08005624 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f023 0210 	bic.w	r2, r3, #16
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005662:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	031b      	lsls	r3, r3, #12
 8005668:	b29b      	uxth	r3, r3
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005676:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr

0800569c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f023 0303 	bic.w	r3, r3, #3
 80056c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	621a      	str	r2, [r3, #32]
}
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr

08005712 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005712:	b480      	push	{r7}
 8005714:	b087      	sub	sp, #28
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	607a      	str	r2, [r7, #4]
 800571e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800573e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005750:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	031b      	lsls	r3, r3, #12
 8005756:	b29b      	uxth	r3, r3
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005764:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	031b      	lsls	r3, r3, #12
 800576a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	621a      	str	r2, [r3, #32]
}
 8005780:	bf00      	nop
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	bc80      	pop	{r7}
 8005788:	4770      	bx	lr

0800578a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800578a:	b480      	push	{r7}
 800578c:	b087      	sub	sp, #28
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	2201      	movs	r2, #1
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a1a      	ldr	r2, [r3, #32]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	43db      	mvns	r3, r3
 80057ac:	401a      	ands	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1a      	ldr	r2, [r3, #32]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f003 031f 	and.w	r3, r3, #31
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	fa01 f303 	lsl.w	r3, r1, r3
 80057c2:	431a      	orrs	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	621a      	str	r2, [r3, #32]
}
 80057c8:	bf00      	nop
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr
	...

080057d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e046      	b.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a16      	ldr	r2, [pc, #88]	; (8005884 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00e      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005838:	d009      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a12      	ldr	r2, [pc, #72]	; (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a10      	ldr	r2, [pc, #64]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d10c      	bne.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	4313      	orrs	r3, r2
 800585e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr
 8005884:	40012c00 	.word	0x40012c00
 8005888:	40000400 	.word	0x40000400
 800588c:	40000800 	.word	0x40000800

08005890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	bc80      	pop	{r7}
 80058a0:	4770      	bx	lr

080058a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bc80      	pop	{r7}
 80058b2:	4770      	bx	lr

080058b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80058b4:	b084      	sub	sp, #16
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	f107 0014 	add.w	r0, r7, #20
 80058c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	b004      	add	sp, #16
 80058d2:	4770      	bx	lr

080058d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80058e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005908:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800590c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	b29b      	uxth	r3, r3
 800591a:	43db      	mvns	r3, r3
 800591c:	b29b      	uxth	r3, r3
 800591e:	4013      	ands	r3, r2
 8005920:	b29a      	uxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr

08005934 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	bc80      	pop	{r7}
 800594a:	4770      	bx	lr

0800594c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800594c:	b084      	sub	sp, #16
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	f107 0014 	add.w	r0, r7, #20
 800595a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	b004      	add	sp, #16
 800598a:	4770      	bx	lr

0800598c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800598c:	b480      	push	{r7}
 800598e:	b09b      	sub	sp, #108	; 0x6c
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80059ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	78db      	ldrb	r3, [r3, #3]
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d81f      	bhi.n	80059fe <USB_ActivateEndpoint+0x72>
 80059be:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <USB_ActivateEndpoint+0x38>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	080059d5 	.word	0x080059d5
 80059c8:	080059f1 	.word	0x080059f1
 80059cc:	08005a07 	.word	0x08005a07
 80059d0:	080059e3 	.word	0x080059e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80059d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059e0:	e012      	b.n	8005a08 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80059e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80059ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059ee:	e00b      	b.n	8005a08 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80059f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80059f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80059fc:	e004      	b.n	8005a08 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005a04:	e000      	b.n	8005a08 <USB_ActivateEndpoint+0x7c>
      break;
 8005a06:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	441a      	add	r2, r3
 8005a12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	441a      	add	r2, r3
 8005a58:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	7b1b      	ldrb	r3, [r3, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f040 8149 	bne.w	8005d0c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	785b      	ldrb	r3, [r3, #1]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 8084 	beq.w	8005b8c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	4413      	add	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	011a      	lsls	r2, r3, #4
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	88db      	ldrh	r3, [r3, #6]
 8005aac:	085b      	lsrs	r3, r3, #1
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	81fb      	strh	r3, [r7, #14]
 8005ac6:	89fb      	ldrh	r3, [r7, #14]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01b      	beq.n	8005b08 <USB_ActivateEndpoint+0x17c>
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae6:	81bb      	strh	r3, [r7, #12]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	441a      	add	r2, r3
 8005af2:	89bb      	ldrh	r3, [r7, #12]
 8005af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	78db      	ldrb	r3, [r3, #3]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d020      	beq.n	8005b52 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b26:	813b      	strh	r3, [r7, #8]
 8005b28:	893b      	ldrh	r3, [r7, #8]
 8005b2a:	f083 0320 	eor.w	r3, r3, #32
 8005b2e:	813b      	strh	r3, [r7, #8]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	441a      	add	r2, r3
 8005b3a:	893b      	ldrh	r3, [r7, #8]
 8005b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	8013      	strh	r3, [r2, #0]
 8005b50:	e27f      	b.n	8006052 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b68:	817b      	strh	r3, [r7, #10]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	441a      	add	r2, r3
 8005b74:	897b      	ldrh	r3, [r7, #10]
 8005b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	8013      	strh	r3, [r2, #0]
 8005b8a:	e262      	b.n	8006052 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	4413      	add	r3, r2
 8005b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	011a      	lsls	r2, r3, #4
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	88db      	ldrh	r3, [r3, #6]
 8005bb4:	085b      	lsrs	r3, r3, #1
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	461a      	mov	r2, r3
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	4413      	add	r3, r2
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	011a      	lsls	r2, r3, #4
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	4413      	add	r3, r2
 8005bde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005be2:	623b      	str	r3, [r7, #32]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d112      	bne.n	8005c12 <USB_ActivateEndpoint+0x286>
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	801a      	strh	r2, [r3, #0]
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	801a      	strh	r2, [r3, #0]
 8005c10:	e02f      	b.n	8005c72 <USB_ActivateEndpoint+0x2e6>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b3e      	cmp	r3, #62	; 0x3e
 8005c18:	d813      	bhi.n	8005c42 <USB_ActivateEndpoint+0x2b6>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	085b      	lsrs	r3, r3, #1
 8005c20:	663b      	str	r3, [r7, #96]	; 0x60
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <USB_ActivateEndpoint+0x2a8>
 8005c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c30:	3301      	adds	r3, #1
 8005c32:	663b      	str	r3, [r7, #96]	; 0x60
 8005c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	029b      	lsls	r3, r3, #10
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	e017      	b.n	8005c72 <USB_ActivateEndpoint+0x2e6>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	663b      	str	r3, [r7, #96]	; 0x60
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 031f 	and.w	r3, r3, #31
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d102      	bne.n	8005c5c <USB_ActivateEndpoint+0x2d0>
 8005c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	029b      	lsls	r3, r3, #10
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	83fb      	strh	r3, [r7, #30]
 8005c80:	8bfb      	ldrh	r3, [r7, #30]
 8005c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01b      	beq.n	8005cc2 <USB_ActivateEndpoint+0x336>
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca0:	83bb      	strh	r3, [r7, #28]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	441a      	add	r2, r3
 8005cac:	8bbb      	ldrh	r3, [r7, #28]
 8005cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd8:	837b      	strh	r3, [r7, #26]
 8005cda:	8b7b      	ldrh	r3, [r7, #26]
 8005cdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ce0:	837b      	strh	r3, [r7, #26]
 8005ce2:	8b7b      	ldrh	r3, [r7, #26]
 8005ce4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ce8:	837b      	strh	r3, [r7, #26]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	441a      	add	r2, r3
 8005cf4:	8b7b      	ldrh	r3, [r7, #26]
 8005cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	8013      	strh	r3, [r2, #0]
 8005d0a:	e1a2      	b.n	8006052 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d22:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	441a      	add	r2, r3
 8005d30:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d3c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d58:	4413      	add	r3, r2
 8005d5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	011a      	lsls	r2, r3, #4
 8005d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d6a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	891b      	ldrh	r3, [r3, #8]
 8005d70:	085b      	lsrs	r3, r3, #1
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d8c:	4413      	add	r3, r2
 8005d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	011a      	lsls	r2, r3, #4
 8005d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	895b      	ldrh	r3, [r3, #10]
 8005da4:	085b      	lsrs	r3, r3, #1
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f040 8091 	bne.w	8005edc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005dc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d01b      	beq.n	8005e0a <USB_ActivateEndpoint+0x47e>
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	441a      	add	r2, r3
 8005df4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01b      	beq.n	8005e5a <USB_ActivateEndpoint+0x4ce>
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e38:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	441a      	add	r2, r3
 8005e44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e70:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e78:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e80:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	441a      	add	r2, r3
 8005e8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb8:	867b      	strh	r3, [r7, #50]	; 0x32
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	441a      	add	r2, r3
 8005ec4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	8013      	strh	r3, [r2, #0]
 8005eda:	e0ba      	b.n	8006052 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005eec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01d      	beq.n	8005f34 <USB_ActivateEndpoint+0x5a8>
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	441a      	add	r2, r3
 8005f1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005f44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01d      	beq.n	8005f8c <USB_ActivateEndpoint+0x600>
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	441a      	add	r2, r3
 8005f74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	78db      	ldrb	r3, [r3, #3]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d024      	beq.n	8005fde <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005faa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005fae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fb2:	f083 0320 	eor.w	r3, r3, #32
 8005fb6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	441a      	add	r2, r3
 8005fc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	8013      	strh	r3, [r2, #0]
 8005fdc:	e01d      	b.n	800601a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	441a      	add	r2, r3
 8006002:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006016:	b29b      	uxth	r3, r3
 8006018:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29b      	uxth	r3, r3
 8006028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800602c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006030:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	441a      	add	r2, r3
 800603c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800603e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604e:	b29b      	uxth	r3, r3
 8006050:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006052:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006056:	4618      	mov	r0, r3
 8006058:	376c      	adds	r7, #108	; 0x6c
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr

08006060 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006060:	b480      	push	{r7}
 8006062:	b08d      	sub	sp, #52	; 0x34
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	7b1b      	ldrb	r3, [r3, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f040 808e 	bne.w	8006190 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d044      	beq.n	8006106 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	81bb      	strh	r3, [r7, #12]
 800608a:	89bb      	ldrh	r3, [r7, #12]
 800608c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01b      	beq.n	80060cc <USB_DeactivateEndpoint+0x6c>
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060aa:	817b      	strh	r3, [r7, #10]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	441a      	add	r2, r3
 80060b6:	897b      	ldrh	r3, [r7, #10]
 80060b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e2:	813b      	strh	r3, [r7, #8]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	441a      	add	r2, r3
 80060ee:	893b      	ldrh	r3, [r7, #8]
 80060f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006100:	b29b      	uxth	r3, r3
 8006102:	8013      	strh	r3, [r2, #0]
 8006104:	e192      	b.n	800642c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	827b      	strh	r3, [r7, #18]
 8006114:	8a7b      	ldrh	r3, [r7, #18]
 8006116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01b      	beq.n	8006156 <USB_DeactivateEndpoint+0xf6>
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	b29b      	uxth	r3, r3
 800612c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006134:	823b      	strh	r3, [r7, #16]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	441a      	add	r2, r3
 8006140:	8a3b      	ldrh	r3, [r7, #16]
 8006142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800614a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800614e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006152:	b29b      	uxth	r3, r3
 8006154:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616c:	81fb      	strh	r3, [r7, #14]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	441a      	add	r2, r3
 8006178:	89fb      	ldrh	r3, [r7, #14]
 800617a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800617e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618a:	b29b      	uxth	r3, r3
 800618c:	8013      	strh	r3, [r2, #0]
 800618e:	e14d      	b.n	800642c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f040 80a5 	bne.w	80062e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	843b      	strh	r3, [r7, #32]
 80061a8:	8c3b      	ldrh	r3, [r7, #32]
 80061aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01b      	beq.n	80061ea <USB_DeactivateEndpoint+0x18a>
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c8:	83fb      	strh	r3, [r7, #30]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	441a      	add	r2, r3
 80061d4:	8bfb      	ldrh	r3, [r7, #30]
 80061d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	83bb      	strh	r3, [r7, #28]
 80061f8:	8bbb      	ldrh	r3, [r7, #28]
 80061fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d01b      	beq.n	800623a <USB_DeactivateEndpoint+0x1da>
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006218:	837b      	strh	r3, [r7, #26]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	441a      	add	r2, r3
 8006224:	8b7b      	ldrh	r3, [r7, #26]
 8006226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006232:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006236:	b29b      	uxth	r3, r3
 8006238:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29b      	uxth	r3, r3
 8006248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006250:	833b      	strh	r3, [r7, #24]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	441a      	add	r2, r3
 800625c:	8b3b      	ldrh	r3, [r7, #24]
 800625e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800626e:	b29b      	uxth	r3, r3
 8006270:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006288:	82fb      	strh	r3, [r7, #22]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	441a      	add	r2, r3
 8006294:	8afb      	ldrh	r3, [r7, #22]
 8006296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800629e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c0:	82bb      	strh	r3, [r7, #20]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	441a      	add	r2, r3
 80062cc:	8abb      	ldrh	r3, [r7, #20]
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]
 80062e2:	e0a3      	b.n	800642c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80062f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01b      	beq.n	8006334 <USB_DeactivateEndpoint+0x2d4>
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006312:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	441a      	add	r2, r3
 800631e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800632c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006330:	b29b      	uxth	r3, r3
 8006332:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006342:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01b      	beq.n	8006384 <USB_DeactivateEndpoint+0x324>
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006362:	853b      	strh	r3, [r7, #40]	; 0x28
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	441a      	add	r2, r3
 800636e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800637c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006380:	b29b      	uxth	r3, r3
 8006382:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	441a      	add	r2, r3
 80063a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	441a      	add	r2, r3
 80063de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640a:	847b      	strh	r3, [r7, #34]	; 0x22
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	441a      	add	r2, r3
 8006416:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800641c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006428:	b29b      	uxth	r3, r3
 800642a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3734      	adds	r7, #52	; 0x34
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b0c4      	sub	sp, #272	; 0x110
 800643c:	af00      	add	r7, sp, #0
 800643e:	1d3b      	adds	r3, r7, #4
 8006440:	6018      	str	r0, [r3, #0]
 8006442:	463b      	mov	r3, r7
 8006444:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006446:	463b      	mov	r3, r7
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	785b      	ldrb	r3, [r3, #1]
 800644c:	2b01      	cmp	r3, #1
 800644e:	f040 8557 	bne.w	8006f00 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006452:	463b      	mov	r3, r7
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	699a      	ldr	r2, [r3, #24]
 8006458:	463b      	mov	r3, r7
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	429a      	cmp	r2, r3
 8006460:	d905      	bls.n	800646e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006462:	463b      	mov	r3, r7
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800646c:	e004      	b.n	8006478 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800646e:	463b      	mov	r3, r7
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006478:	463b      	mov	r3, r7
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	7b1b      	ldrb	r3, [r3, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d12c      	bne.n	80064dc <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006482:	463b      	mov	r3, r7
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6959      	ldr	r1, [r3, #20]
 8006488:	463b      	mov	r3, r7
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	88da      	ldrh	r2, [r3, #6]
 800648e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006492:	b29b      	uxth	r3, r3
 8006494:	1d38      	adds	r0, r7, #4
 8006496:	6800      	ldr	r0, [r0, #0]
 8006498:	f001 fa2c 	bl	80078f4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	1d3b      	adds	r3, r7, #4
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	4413      	add	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	463b      	mov	r3, r7
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	011a      	lsls	r2, r3, #4
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	4413      	add	r3, r2
 80064c0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80064c4:	f107 0310 	add.w	r3, r7, #16
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	f107 0310 	add.w	r3, r7, #16
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	801a      	strh	r2, [r3, #0]
 80064d8:	f000 bcdd 	b.w	8006e96 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80064dc:	463b      	mov	r3, r7
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	78db      	ldrb	r3, [r3, #3]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	f040 8347 	bne.w	8006b76 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80064e8:	463b      	mov	r3, r7
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6a1a      	ldr	r2, [r3, #32]
 80064ee:	463b      	mov	r3, r7
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	f240 82eb 	bls.w	8006ad0 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80064fa:	1d3b      	adds	r3, r7, #4
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	463b      	mov	r3, r7
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	b29b      	uxth	r3, r3
 800650c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006514:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006518:	1d3b      	adds	r3, r7, #4
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	463b      	mov	r3, r7
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800652a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006532:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653a:	b29b      	uxth	r3, r3
 800653c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800653e:	463b      	mov	r3, r7
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6a1a      	ldr	r2, [r3, #32]
 8006544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006548:	1ad2      	subs	r2, r2, r3
 800654a:	463b      	mov	r3, r7
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006550:	1d3b      	adds	r3, r7, #4
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	463b      	mov	r3, r7
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 8159 	beq.w	800681e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800656c:	1d3b      	adds	r3, r7, #4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	637b      	str	r3, [r7, #52]	; 0x34
 8006572:	463b      	mov	r3, r7
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d164      	bne.n	8006646 <USB_EPStartXfer+0x20e>
 800657c:	1d3b      	adds	r3, r7, #4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006582:	1d3b      	adds	r3, r7, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800658a:	b29b      	uxth	r3, r3
 800658c:	461a      	mov	r2, r3
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	4413      	add	r3, r2
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006594:	463b      	mov	r3, r7
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	011a      	lsls	r2, r3, #4
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	4413      	add	r3, r2
 80065a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d112      	bne.n	80065d4 <USB_EPStartXfer+0x19c>
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	801a      	strh	r2, [r3, #0]
 80065d2:	e054      	b.n	800667e <USB_EPStartXfer+0x246>
 80065d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065d8:	2b3e      	cmp	r3, #62	; 0x3e
 80065da:	d817      	bhi.n	800660c <USB_EPStartXfer+0x1d4>
 80065dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e0:	085b      	lsrs	r3, r3, #1
 80065e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d004      	beq.n	80065fc <USB_EPStartXfer+0x1c4>
 80065f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f6:	3301      	adds	r3, #1
 80065f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006600:	b29b      	uxth	r3, r3
 8006602:	029b      	lsls	r3, r3, #10
 8006604:	b29a      	uxth	r2, r3
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	801a      	strh	r2, [r3, #0]
 800660a:	e038      	b.n	800667e <USB_EPStartXfer+0x246>
 800660c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800661a:	f003 031f 	and.w	r3, r3, #31
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <USB_EPStartXfer+0x1f4>
 8006622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006626:	3b01      	subs	r3, #1
 8006628:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006630:	b29b      	uxth	r3, r3
 8006632:	029b      	lsls	r3, r3, #10
 8006634:	b29b      	uxth	r3, r3
 8006636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800663a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800663e:	b29a      	uxth	r2, r3
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	801a      	strh	r2, [r3, #0]
 8006644:	e01b      	b.n	800667e <USB_EPStartXfer+0x246>
 8006646:	463b      	mov	r3, r7
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	785b      	ldrb	r3, [r3, #1]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d116      	bne.n	800667e <USB_EPStartXfer+0x246>
 8006650:	1d3b      	adds	r3, r7, #4
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006658:	b29b      	uxth	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665e:	4413      	add	r3, r2
 8006660:	637b      	str	r3, [r7, #52]	; 0x34
 8006662:	463b      	mov	r3, r7
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	011a      	lsls	r2, r3, #4
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666c:	4413      	add	r3, r2
 800666e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006672:	633b      	str	r3, [r7, #48]	; 0x30
 8006674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006678:	b29a      	uxth	r2, r3
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800667e:	463b      	mov	r3, r7
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	895b      	ldrh	r3, [r3, #10]
 8006684:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006688:	463b      	mov	r3, r7
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6959      	ldr	r1, [r3, #20]
 800668e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006692:	b29b      	uxth	r3, r3
 8006694:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006698:	1d38      	adds	r0, r7, #4
 800669a:	6800      	ldr	r0, [r0, #0]
 800669c:	f001 f92a 	bl	80078f4 <USB_WritePMA>
            ep->xfer_buff += len;
 80066a0:	463b      	mov	r3, r7
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695a      	ldr	r2, [r3, #20]
 80066a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066aa:	441a      	add	r2, r3
 80066ac:	463b      	mov	r3, r7
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066b2:	463b      	mov	r3, r7
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6a1a      	ldr	r2, [r3, #32]
 80066b8:	463b      	mov	r3, r7
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d909      	bls.n	80066d6 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80066c2:	463b      	mov	r3, r7
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6a1a      	ldr	r2, [r3, #32]
 80066c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066cc:	1ad2      	subs	r2, r2, r3
 80066ce:	463b      	mov	r3, r7
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	621a      	str	r2, [r3, #32]
 80066d4:	e008      	b.n	80066e8 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80066d6:	463b      	mov	r3, r7
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80066e0:	463b      	mov	r3, r7
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2200      	movs	r2, #0
 80066e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066e8:	463b      	mov	r3, r7
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d164      	bne.n	80067bc <USB_EPStartXfer+0x384>
 80066f2:	1d3b      	adds	r3, r7, #4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	61fb      	str	r3, [r7, #28]
 80066f8:	1d3b      	adds	r3, r7, #4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006700:	b29b      	uxth	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	61fb      	str	r3, [r7, #28]
 800670a:	463b      	mov	r3, r7
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	011a      	lsls	r2, r3, #4
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	4413      	add	r3, r2
 8006716:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800671a:	61bb      	str	r3, [r7, #24]
 800671c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006720:	2b00      	cmp	r3, #0
 8006722:	d112      	bne.n	800674a <USB_EPStartXfer+0x312>
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800672e:	b29a      	uxth	r2, r3
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	801a      	strh	r2, [r3, #0]
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	b29b      	uxth	r3, r3
 800673a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800673e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006742:	b29a      	uxth	r2, r3
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	801a      	strh	r2, [r3, #0]
 8006748:	e057      	b.n	80067fa <USB_EPStartXfer+0x3c2>
 800674a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800674e:	2b3e      	cmp	r3, #62	; 0x3e
 8006750:	d817      	bhi.n	8006782 <USB_EPStartXfer+0x34a>
 8006752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006756:	085b      	lsrs	r3, r3, #1
 8006758:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800675c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <USB_EPStartXfer+0x33a>
 8006768:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800676c:	3301      	adds	r3, #1
 800676e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006772:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006776:	b29b      	uxth	r3, r3
 8006778:	029b      	lsls	r3, r3, #10
 800677a:	b29a      	uxth	r2, r3
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	e03b      	b.n	80067fa <USB_EPStartXfer+0x3c2>
 8006782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800678c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	2b00      	cmp	r3, #0
 8006796:	d104      	bne.n	80067a2 <USB_EPStartXfer+0x36a>
 8006798:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800679c:	3b01      	subs	r3, #1
 800679e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	029b      	lsls	r3, r3, #10
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	801a      	strh	r2, [r3, #0]
 80067ba:	e01e      	b.n	80067fa <USB_EPStartXfer+0x3c2>
 80067bc:	463b      	mov	r3, r7
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d119      	bne.n	80067fa <USB_EPStartXfer+0x3c2>
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
 80067cc:	1d3b      	adds	r3, r7, #4
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	4413      	add	r3, r2
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
 80067de:	463b      	mov	r3, r7
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	011a      	lsls	r2, r3, #4
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	4413      	add	r3, r2
 80067ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067ee:	623b      	str	r3, [r7, #32]
 80067f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067fa:	463b      	mov	r3, r7
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	891b      	ldrh	r3, [r3, #8]
 8006800:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006804:	463b      	mov	r3, r7
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6959      	ldr	r1, [r3, #20]
 800680a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800680e:	b29b      	uxth	r3, r3
 8006810:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006814:	1d38      	adds	r0, r7, #4
 8006816:	6800      	ldr	r0, [r0, #0]
 8006818:	f001 f86c 	bl	80078f4 <USB_WritePMA>
 800681c:	e33b      	b.n	8006e96 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800681e:	463b      	mov	r3, r7
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d164      	bne.n	80068f2 <USB_EPStartXfer+0x4ba>
 8006828:	1d3b      	adds	r3, r7, #4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800682e:	1d3b      	adds	r3, r7, #4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006836:	b29b      	uxth	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683c:	4413      	add	r3, r2
 800683e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006840:	463b      	mov	r3, r7
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	011a      	lsls	r2, r3, #4
 8006848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684a:	4413      	add	r3, r2
 800684c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006850:	64bb      	str	r3, [r7, #72]	; 0x48
 8006852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006856:	2b00      	cmp	r3, #0
 8006858:	d112      	bne.n	8006880 <USB_EPStartXfer+0x448>
 800685a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006864:	b29a      	uxth	r2, r3
 8006866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006868:	801a      	strh	r2, [r3, #0]
 800686a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006878:	b29a      	uxth	r2, r3
 800687a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800687c:	801a      	strh	r2, [r3, #0]
 800687e:	e057      	b.n	8006930 <USB_EPStartXfer+0x4f8>
 8006880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006884:	2b3e      	cmp	r3, #62	; 0x3e
 8006886:	d817      	bhi.n	80068b8 <USB_EPStartXfer+0x480>
 8006888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800688c:	085b      	lsrs	r3, r3, #1
 800688e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <USB_EPStartXfer+0x470>
 800689e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068a2:	3301      	adds	r3, #1
 80068a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	029b      	lsls	r3, r3, #10
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b4:	801a      	strh	r2, [r3, #0]
 80068b6:	e03b      	b.n	8006930 <USB_EPStartXfer+0x4f8>
 80068b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068bc:	095b      	lsrs	r3, r3, #5
 80068be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068c6:	f003 031f 	and.w	r3, r3, #31
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d104      	bne.n	80068d8 <USB_EPStartXfer+0x4a0>
 80068ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d2:	3b01      	subs	r3, #1
 80068d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068dc:	b29b      	uxth	r3, r3
 80068de:	029b      	lsls	r3, r3, #10
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ee:	801a      	strh	r2, [r3, #0]
 80068f0:	e01e      	b.n	8006930 <USB_EPStartXfer+0x4f8>
 80068f2:	463b      	mov	r3, r7
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d119      	bne.n	8006930 <USB_EPStartXfer+0x4f8>
 80068fc:	1d3b      	adds	r3, r7, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	657b      	str	r3, [r7, #84]	; 0x54
 8006902:	1d3b      	adds	r3, r7, #4
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800690a:	b29b      	uxth	r3, r3
 800690c:	461a      	mov	r2, r3
 800690e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006910:	4413      	add	r3, r2
 8006912:	657b      	str	r3, [r7, #84]	; 0x54
 8006914:	463b      	mov	r3, r7
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	011a      	lsls	r2, r3, #4
 800691c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691e:	4413      	add	r3, r2
 8006920:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006924:	653b      	str	r3, [r7, #80]	; 0x50
 8006926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800692a:	b29a      	uxth	r2, r3
 800692c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800692e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006930:	463b      	mov	r3, r7
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	891b      	ldrh	r3, [r3, #8]
 8006936:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800693a:	463b      	mov	r3, r7
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6959      	ldr	r1, [r3, #20]
 8006940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006944:	b29b      	uxth	r3, r3
 8006946:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800694a:	1d38      	adds	r0, r7, #4
 800694c:	6800      	ldr	r0, [r0, #0]
 800694e:	f000 ffd1 	bl	80078f4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006952:	463b      	mov	r3, r7
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	695a      	ldr	r2, [r3, #20]
 8006958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800695c:	441a      	add	r2, r3
 800695e:	463b      	mov	r3, r7
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006964:	463b      	mov	r3, r7
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6a1a      	ldr	r2, [r3, #32]
 800696a:	463b      	mov	r3, r7
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	429a      	cmp	r2, r3
 8006972:	d909      	bls.n	8006988 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8006974:	463b      	mov	r3, r7
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6a1a      	ldr	r2, [r3, #32]
 800697a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800697e:	1ad2      	subs	r2, r2, r3
 8006980:	463b      	mov	r3, r7
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	621a      	str	r2, [r3, #32]
 8006986:	e008      	b.n	800699a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8006988:	463b      	mov	r3, r7
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006992:	463b      	mov	r3, r7
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2200      	movs	r2, #0
 8006998:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800699a:	1d3b      	adds	r3, r7, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	647b      	str	r3, [r7, #68]	; 0x44
 80069a0:	463b      	mov	r3, r7
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d164      	bne.n	8006a74 <USB_EPStartXfer+0x63c>
 80069aa:	1d3b      	adds	r3, r7, #4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069b0:	1d3b      	adds	r3, r7, #4
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	461a      	mov	r2, r3
 80069bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069be:	4413      	add	r3, r2
 80069c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c2:	463b      	mov	r3, r7
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	011a      	lsls	r2, r3, #4
 80069ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069cc:	4413      	add	r3, r2
 80069ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80069d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d112      	bne.n	8006a02 <USB_EPStartXfer+0x5ca>
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	801a      	strh	r2, [r3, #0]
 8006a00:	e054      	b.n	8006aac <USB_EPStartXfer+0x674>
 8006a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a06:	2b3e      	cmp	r3, #62	; 0x3e
 8006a08:	d817      	bhi.n	8006a3a <USB_EPStartXfer+0x602>
 8006a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a0e:	085b      	lsrs	r3, r3, #1
 8006a10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d004      	beq.n	8006a2a <USB_EPStartXfer+0x5f2>
 8006a20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a24:	3301      	adds	r3, #1
 8006a26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	029b      	lsls	r3, r3, #10
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	801a      	strh	r2, [r3, #0]
 8006a38:	e038      	b.n	8006aac <USB_EPStartXfer+0x674>
 8006a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a48:	f003 031f 	and.w	r3, r3, #31
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d104      	bne.n	8006a5a <USB_EPStartXfer+0x622>
 8006a50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a54:	3b01      	subs	r3, #1
 8006a56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006a5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	029b      	lsls	r3, r3, #10
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a70:	801a      	strh	r2, [r3, #0]
 8006a72:	e01b      	b.n	8006aac <USB_EPStartXfer+0x674>
 8006a74:	463b      	mov	r3, r7
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	785b      	ldrb	r3, [r3, #1]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d116      	bne.n	8006aac <USB_EPStartXfer+0x674>
 8006a7e:	1d3b      	adds	r3, r7, #4
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a8c:	4413      	add	r3, r2
 8006a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a90:	463b      	mov	r3, r7
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	011a      	lsls	r2, r3, #4
 8006a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8006aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aaa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006aac:	463b      	mov	r3, r7
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	895b      	ldrh	r3, [r3, #10]
 8006ab2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ab6:	463b      	mov	r3, r7
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6959      	ldr	r1, [r3, #20]
 8006abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006ac6:	1d38      	adds	r0, r7, #4
 8006ac8:	6800      	ldr	r0, [r0, #0]
 8006aca:	f000 ff13 	bl	80078f4 <USB_WritePMA>
 8006ace:	e1e2      	b.n	8006e96 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ad0:	463b      	mov	r3, r7
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006ada:	1d3b      	adds	r3, r7, #4
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	463b      	mov	r3, r7
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006af8:	1d3b      	adds	r3, r7, #4
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	463b      	mov	r3, r7
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	441a      	add	r2, r3
 8006b06:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b1e:	1d3b      	adds	r3, r7, #4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	663b      	str	r3, [r7, #96]	; 0x60
 8006b24:	1d3b      	adds	r3, r7, #4
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	461a      	mov	r2, r3
 8006b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b32:	4413      	add	r3, r2
 8006b34:	663b      	str	r3, [r7, #96]	; 0x60
 8006b36:	463b      	mov	r3, r7
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	011a      	lsls	r2, r3, #4
 8006b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b40:	4413      	add	r3, r2
 8006b42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b52:	463b      	mov	r3, r7
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	891b      	ldrh	r3, [r3, #8]
 8006b58:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6959      	ldr	r1, [r3, #20]
 8006b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006b6c:	1d38      	adds	r0, r7, #4
 8006b6e:	6800      	ldr	r0, [r0, #0]
 8006b70:	f000 fec0 	bl	80078f4 <USB_WritePMA>
 8006b74:	e18f      	b.n	8006e96 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b76:	1d3b      	adds	r3, r7, #4
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 808f 	beq.w	8006cb0 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b92:	1d3b      	adds	r3, r7, #4
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b98:	463b      	mov	r3, r7
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	785b      	ldrb	r3, [r3, #1]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d164      	bne.n	8006c6c <USB_EPStartXfer+0x834>
 8006ba2:	1d3b      	adds	r3, r7, #4
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ba8:	1d3b      	adds	r3, r7, #4
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bb6:	4413      	add	r3, r2
 8006bb8:	673b      	str	r3, [r7, #112]	; 0x70
 8006bba:	463b      	mov	r3, r7
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	011a      	lsls	r2, r3, #4
 8006bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d112      	bne.n	8006bfa <USB_EPStartXfer+0x7c2>
 8006bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be2:	801a      	strh	r2, [r3, #0]
 8006be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf6:	801a      	strh	r2, [r3, #0]
 8006bf8:	e054      	b.n	8006ca4 <USB_EPStartXfer+0x86c>
 8006bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bfe:	2b3e      	cmp	r3, #62	; 0x3e
 8006c00:	d817      	bhi.n	8006c32 <USB_EPStartXfer+0x7fa>
 8006c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c06:	085b      	lsrs	r3, r3, #1
 8006c08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d004      	beq.n	8006c22 <USB_EPStartXfer+0x7ea>
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	029b      	lsls	r3, r3, #10
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c2e:	801a      	strh	r2, [r3, #0]
 8006c30:	e038      	b.n	8006ca4 <USB_EPStartXfer+0x86c>
 8006c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c40:	f003 031f 	and.w	r3, r3, #31
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d104      	bne.n	8006c52 <USB_EPStartXfer+0x81a>
 8006c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	029b      	lsls	r3, r3, #10
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c68:	801a      	strh	r2, [r3, #0]
 8006c6a:	e01b      	b.n	8006ca4 <USB_EPStartXfer+0x86c>
 8006c6c:	463b      	mov	r3, r7
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	785b      	ldrb	r3, [r3, #1]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d116      	bne.n	8006ca4 <USB_EPStartXfer+0x86c>
 8006c76:	1d3b      	adds	r3, r7, #4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c84:	4413      	add	r3, r2
 8006c86:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c88:	463b      	mov	r3, r7
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	011a      	lsls	r2, r3, #4
 8006c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c92:	4413      	add	r3, r2
 8006c94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c98:	677b      	str	r3, [r7, #116]	; 0x74
 8006c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ca2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006ca4:	463b      	mov	r3, r7
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	895b      	ldrh	r3, [r3, #10]
 8006caa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8006cae:	e097      	b.n	8006de0 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cb0:	463b      	mov	r3, r7
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	785b      	ldrb	r3, [r3, #1]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d168      	bne.n	8006d8c <USB_EPStartXfer+0x954>
 8006cba:	1d3b      	adds	r3, r7, #4
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cc2:	1d3b      	adds	r3, r7, #4
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	461a      	mov	r2, r3
 8006cce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cd8:	463b      	mov	r3, r7
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	011a      	lsls	r2, r3, #4
 8006ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d112      	bne.n	8006d1a <USB_EPStartXfer+0x8e2>
 8006cf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d02:	801a      	strh	r2, [r3, #0]
 8006d04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d16:	801a      	strh	r2, [r3, #0]
 8006d18:	e05d      	b.n	8006dd6 <USB_EPStartXfer+0x99e>
 8006d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8006d20:	d817      	bhi.n	8006d52 <USB_EPStartXfer+0x91a>
 8006d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d26:	085b      	lsrs	r3, r3, #1
 8006d28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d004      	beq.n	8006d42 <USB_EPStartXfer+0x90a>
 8006d38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	029b      	lsls	r3, r3, #10
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d4e:	801a      	strh	r2, [r3, #0]
 8006d50:	e041      	b.n	8006dd6 <USB_EPStartXfer+0x99e>
 8006d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <USB_EPStartXfer+0x93a>
 8006d68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	029b      	lsls	r3, r3, #10
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d88:	801a      	strh	r2, [r3, #0]
 8006d8a:	e024      	b.n	8006dd6 <USB_EPStartXfer+0x99e>
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d11f      	bne.n	8006dd6 <USB_EPStartXfer+0x99e>
 8006d96:	1d3b      	adds	r3, r7, #4
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d9e:	1d3b      	adds	r3, r7, #4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	461a      	mov	r2, r3
 8006daa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dae:	4413      	add	r3, r2
 8006db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006db4:	463b      	mov	r3, r7
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	011a      	lsls	r2, r3, #4
 8006dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dd4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006dd6:	463b      	mov	r3, r7
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	891b      	ldrh	r3, [r3, #8]
 8006ddc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006de0:	463b      	mov	r3, r7
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6959      	ldr	r1, [r3, #20]
 8006de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006df0:	1d38      	adds	r0, r7, #4
 8006df2:	6800      	ldr	r0, [r0, #0]
 8006df4:	f000 fd7e 	bl	80078f4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006df8:	463b      	mov	r3, r7
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d122      	bne.n	8006e48 <USB_EPStartXfer+0xa10>
 8006e02:	1d3b      	adds	r3, r7, #4
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	463b      	mov	r3, r7
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006e20:	1d3b      	adds	r3, r7, #4
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	463b      	mov	r3, r7
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	441a      	add	r2, r3
 8006e2e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	8013      	strh	r3, [r2, #0]
 8006e46:	e026      	b.n	8006e96 <USB_EPStartXfer+0xa5e>
 8006e48:	463b      	mov	r3, r7
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	785b      	ldrb	r3, [r3, #1]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d121      	bne.n	8006e96 <USB_EPStartXfer+0xa5e>
 8006e52:	1d3b      	adds	r3, r7, #4
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	463b      	mov	r3, r7
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006e70:	1d3b      	adds	r3, r7, #4
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	463b      	mov	r3, r7
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	441a      	add	r2, r3
 8006e7e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e96:	1d3b      	adds	r3, r7, #4
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f107 020e 	add.w	r2, r7, #14
 8006eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb4:	8013      	strh	r3, [r2, #0]
 8006eb6:	f107 030e 	add.w	r3, r7, #14
 8006eba:	f107 020e 	add.w	r2, r7, #14
 8006ebe:	8812      	ldrh	r2, [r2, #0]
 8006ec0:	f082 0210 	eor.w	r2, r2, #16
 8006ec4:	801a      	strh	r2, [r3, #0]
 8006ec6:	f107 030e 	add.w	r3, r7, #14
 8006eca:	f107 020e 	add.w	r2, r7, #14
 8006ece:	8812      	ldrh	r2, [r2, #0]
 8006ed0:	f082 0220 	eor.w	r2, r2, #32
 8006ed4:	801a      	strh	r2, [r3, #0]
 8006ed6:	1d3b      	adds	r3, r7, #4
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	463b      	mov	r3, r7
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	f107 030e 	add.w	r3, r7, #14
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	8013      	strh	r3, [r2, #0]
 8006efe:	e3b5      	b.n	800766c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006f00:	463b      	mov	r3, r7
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	7b1b      	ldrb	r3, [r3, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f040 8090 	bne.w	800702c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006f0c:	463b      	mov	r3, r7
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	699a      	ldr	r2, [r3, #24]
 8006f12:	463b      	mov	r3, r7
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d90e      	bls.n	8006f3a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006f1c:	463b      	mov	r3, r7
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006f26:	463b      	mov	r3, r7
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	699a      	ldr	r2, [r3, #24]
 8006f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f30:	1ad2      	subs	r2, r2, r3
 8006f32:	463b      	mov	r3, r7
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	619a      	str	r2, [r3, #24]
 8006f38:	e008      	b.n	8006f4c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006f3a:	463b      	mov	r3, r7
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006f44:	463b      	mov	r3, r7
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f4c:	1d3b      	adds	r3, r7, #4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f54:	1d3b      	adds	r3, r7, #4
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f64:	4413      	add	r3, r2
 8006f66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	011a      	lsls	r2, r3, #4
 8006f72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f76:	4413      	add	r3, r2
 8006f78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d116      	bne.n	8006fb6 <USB_EPStartXfer+0xb7e>
 8006f88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f9a:	801a      	strh	r2, [r3, #0]
 8006f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fb2:	801a      	strh	r2, [r3, #0]
 8006fb4:	e32c      	b.n	8007610 <USB_EPStartXfer+0x11d8>
 8006fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fba:	2b3e      	cmp	r3, #62	; 0x3e
 8006fbc:	d818      	bhi.n	8006ff0 <USB_EPStartXfer+0xbb8>
 8006fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fc2:	085b      	lsrs	r3, r3, #1
 8006fc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d004      	beq.n	8006fde <USB_EPStartXfer+0xba6>
 8006fd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fd8:	3301      	adds	r3, #1
 8006fda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006fde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	029b      	lsls	r3, r3, #10
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fec:	801a      	strh	r2, [r3, #0]
 8006fee:	e30f      	b.n	8007610 <USB_EPStartXfer+0x11d8>
 8006ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ff4:	095b      	lsrs	r3, r3, #5
 8006ff6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ffe:	f003 031f 	and.w	r3, r3, #31
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <USB_EPStartXfer+0xbd8>
 8007006:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800700a:	3b01      	subs	r3, #1
 800700c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007010:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007014:	b29b      	uxth	r3, r3
 8007016:	029b      	lsls	r3, r3, #10
 8007018:	b29b      	uxth	r3, r3
 800701a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800701e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007022:	b29a      	uxth	r2, r3
 8007024:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007028:	801a      	strh	r2, [r3, #0]
 800702a:	e2f1      	b.n	8007610 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800702c:	463b      	mov	r3, r7
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	78db      	ldrb	r3, [r3, #3]
 8007032:	2b02      	cmp	r3, #2
 8007034:	f040 818f 	bne.w	8007356 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007038:	463b      	mov	r3, r7
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	785b      	ldrb	r3, [r3, #1]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d175      	bne.n	800712e <USB_EPStartXfer+0xcf6>
 8007042:	1d3b      	adds	r3, r7, #4
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800704a:	1d3b      	adds	r3, r7, #4
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007052:	b29b      	uxth	r3, r3
 8007054:	461a      	mov	r2, r3
 8007056:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800705a:	4413      	add	r3, r2
 800705c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007060:	463b      	mov	r3, r7
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	011a      	lsls	r2, r3, #4
 8007068:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800706c:	4413      	add	r3, r2
 800706e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007072:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007076:	463b      	mov	r3, r7
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d116      	bne.n	80070ae <USB_EPStartXfer+0xc76>
 8007080:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800708c:	b29a      	uxth	r2, r3
 800708e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007092:	801a      	strh	r2, [r3, #0]
 8007094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	b29b      	uxth	r3, r3
 800709c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070aa:	801a      	strh	r2, [r3, #0]
 80070ac:	e065      	b.n	800717a <USB_EPStartXfer+0xd42>
 80070ae:	463b      	mov	r3, r7
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	2b3e      	cmp	r3, #62	; 0x3e
 80070b6:	d81a      	bhi.n	80070ee <USB_EPStartXfer+0xcb6>
 80070b8:	463b      	mov	r3, r7
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	085b      	lsrs	r3, r3, #1
 80070c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070c4:	463b      	mov	r3, r7
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d004      	beq.n	80070dc <USB_EPStartXfer+0xca4>
 80070d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070d6:	3301      	adds	r3, #1
 80070d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	029b      	lsls	r3, r3, #10
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070ea:	801a      	strh	r2, [r3, #0]
 80070ec:	e045      	b.n	800717a <USB_EPStartXfer+0xd42>
 80070ee:	463b      	mov	r3, r7
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070fa:	463b      	mov	r3, r7
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	f003 031f 	and.w	r3, r3, #31
 8007104:	2b00      	cmp	r3, #0
 8007106:	d104      	bne.n	8007112 <USB_EPStartXfer+0xcda>
 8007108:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800710c:	3b01      	subs	r3, #1
 800710e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007112:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007116:	b29b      	uxth	r3, r3
 8007118:	029b      	lsls	r3, r3, #10
 800711a:	b29b      	uxth	r3, r3
 800711c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007124:	b29a      	uxth	r2, r3
 8007126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800712a:	801a      	strh	r2, [r3, #0]
 800712c:	e025      	b.n	800717a <USB_EPStartXfer+0xd42>
 800712e:	463b      	mov	r3, r7
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	785b      	ldrb	r3, [r3, #1]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d120      	bne.n	800717a <USB_EPStartXfer+0xd42>
 8007138:	1d3b      	adds	r3, r7, #4
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007140:	1d3b      	adds	r3, r7, #4
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007148:	b29b      	uxth	r3, r3
 800714a:	461a      	mov	r2, r3
 800714c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007150:	4413      	add	r3, r2
 8007152:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007156:	463b      	mov	r3, r7
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	011a      	lsls	r2, r3, #4
 800715e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007162:	4413      	add	r3, r2
 8007164:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800716c:	463b      	mov	r3, r7
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	b29a      	uxth	r2, r3
 8007174:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007178:	801a      	strh	r2, [r3, #0]
 800717a:	1d3b      	adds	r3, r7, #4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007182:	463b      	mov	r3, r7
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	785b      	ldrb	r3, [r3, #1]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d175      	bne.n	8007278 <USB_EPStartXfer+0xe40>
 800718c:	1d3b      	adds	r3, r7, #4
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007194:	1d3b      	adds	r3, r7, #4
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800719c:	b29b      	uxth	r3, r3
 800719e:	461a      	mov	r2, r3
 80071a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071a4:	4413      	add	r3, r2
 80071a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071aa:	463b      	mov	r3, r7
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	011a      	lsls	r2, r3, #4
 80071b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071b6:	4413      	add	r3, r2
 80071b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071c0:	463b      	mov	r3, r7
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d116      	bne.n	80071f8 <USB_EPStartXfer+0xdc0>
 80071ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071dc:	801a      	strh	r2, [r3, #0]
 80071de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071f4:	801a      	strh	r2, [r3, #0]
 80071f6:	e061      	b.n	80072bc <USB_EPStartXfer+0xe84>
 80071f8:	463b      	mov	r3, r7
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007200:	d81a      	bhi.n	8007238 <USB_EPStartXfer+0xe00>
 8007202:	463b      	mov	r3, r7
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	085b      	lsrs	r3, r3, #1
 800720a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800720e:	463b      	mov	r3, r7
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d004      	beq.n	8007226 <USB_EPStartXfer+0xdee>
 800721c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007220:	3301      	adds	r3, #1
 8007222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722a:	b29b      	uxth	r3, r3
 800722c:	029b      	lsls	r3, r3, #10
 800722e:	b29a      	uxth	r2, r3
 8007230:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007234:	801a      	strh	r2, [r3, #0]
 8007236:	e041      	b.n	80072bc <USB_EPStartXfer+0xe84>
 8007238:	463b      	mov	r3, r7
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	095b      	lsrs	r3, r3, #5
 8007240:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007244:	463b      	mov	r3, r7
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f003 031f 	and.w	r3, r3, #31
 800724e:	2b00      	cmp	r3, #0
 8007250:	d104      	bne.n	800725c <USB_EPStartXfer+0xe24>
 8007252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007256:	3b01      	subs	r3, #1
 8007258:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007260:	b29b      	uxth	r3, r3
 8007262:	029b      	lsls	r3, r3, #10
 8007264:	b29b      	uxth	r3, r3
 8007266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800726a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726e:	b29a      	uxth	r2, r3
 8007270:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007274:	801a      	strh	r2, [r3, #0]
 8007276:	e021      	b.n	80072bc <USB_EPStartXfer+0xe84>
 8007278:	463b      	mov	r3, r7
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	785b      	ldrb	r3, [r3, #1]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d11c      	bne.n	80072bc <USB_EPStartXfer+0xe84>
 8007282:	1d3b      	adds	r3, r7, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800728a:	b29b      	uxth	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007292:	4413      	add	r3, r2
 8007294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007298:	463b      	mov	r3, r7
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	011a      	lsls	r2, r3, #4
 80072a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072a4:	4413      	add	r3, r2
 80072a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80072ae:	463b      	mov	r3, r7
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072ba:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80072bc:	463b      	mov	r3, r7
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 81a4 	beq.w	8007610 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80072c8:	1d3b      	adds	r3, r7, #4
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	463b      	mov	r3, r7
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072dc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80072e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <USB_EPStartXfer+0xebc>
 80072e8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80072ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10d      	bne.n	8007310 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072f4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80072f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f040 8187 	bne.w	8007610 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007302:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730a:	2b00      	cmp	r3, #0
 800730c:	f040 8180 	bne.w	8007610 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007310:	1d3b      	adds	r3, r7, #4
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	463b      	mov	r3, r7
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	b29b      	uxth	r3, r3
 8007322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800732e:	1d3b      	adds	r3, r7, #4
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	463b      	mov	r3, r7
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	441a      	add	r2, r3
 800733c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800734c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007350:	b29b      	uxth	r3, r3
 8007352:	8013      	strh	r3, [r2, #0]
 8007354:	e15c      	b.n	8007610 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007356:	463b      	mov	r3, r7
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	78db      	ldrb	r3, [r3, #3]
 800735c:	2b01      	cmp	r3, #1
 800735e:	f040 8155 	bne.w	800760c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007362:	463b      	mov	r3, r7
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	699a      	ldr	r2, [r3, #24]
 8007368:	463b      	mov	r3, r7
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	429a      	cmp	r2, r3
 8007370:	d90e      	bls.n	8007390 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8007372:	463b      	mov	r3, r7
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800737c:	463b      	mov	r3, r7
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699a      	ldr	r2, [r3, #24]
 8007382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007386:	1ad2      	subs	r2, r2, r3
 8007388:	463b      	mov	r3, r7
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	619a      	str	r2, [r3, #24]
 800738e:	e008      	b.n	80073a2 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8007390:	463b      	mov	r3, r7
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800739a:	463b      	mov	r3, r7
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2200      	movs	r2, #0
 80073a0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80073a2:	463b      	mov	r3, r7
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	785b      	ldrb	r3, [r3, #1]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d16f      	bne.n	800748c <USB_EPStartXfer+0x1054>
 80073ac:	1d3b      	adds	r3, r7, #4
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073b4:	1d3b      	adds	r3, r7, #4
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073bc:	b29b      	uxth	r3, r3
 80073be:	461a      	mov	r2, r3
 80073c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80073c4:	4413      	add	r3, r2
 80073c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073ca:	463b      	mov	r3, r7
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	011a      	lsls	r2, r3, #4
 80073d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80073d6:	4413      	add	r3, r2
 80073d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d116      	bne.n	8007416 <USB_EPStartXfer+0xfde>
 80073e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b29b      	uxth	r3, r3
 8007404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800740c:	b29a      	uxth	r2, r3
 800740e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007412:	801a      	strh	r2, [r3, #0]
 8007414:	e05f      	b.n	80074d6 <USB_EPStartXfer+0x109e>
 8007416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800741a:	2b3e      	cmp	r3, #62	; 0x3e
 800741c:	d818      	bhi.n	8007450 <USB_EPStartXfer+0x1018>
 800741e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007428:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <USB_EPStartXfer+0x1006>
 8007434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007438:	3301      	adds	r3, #1
 800743a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800743e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007442:	b29b      	uxth	r3, r3
 8007444:	029b      	lsls	r3, r3, #10
 8007446:	b29a      	uxth	r2, r3
 8007448:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	e042      	b.n	80074d6 <USB_EPStartXfer+0x109e>
 8007450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007454:	095b      	lsrs	r3, r3, #5
 8007456:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800745a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800745e:	f003 031f 	and.w	r3, r3, #31
 8007462:	2b00      	cmp	r3, #0
 8007464:	d104      	bne.n	8007470 <USB_EPStartXfer+0x1038>
 8007466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800746a:	3b01      	subs	r3, #1
 800746c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007474:	b29b      	uxth	r3, r3
 8007476:	029b      	lsls	r3, r3, #10
 8007478:	b29b      	uxth	r3, r3
 800747a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800747e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007482:	b29a      	uxth	r2, r3
 8007484:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007488:	801a      	strh	r2, [r3, #0]
 800748a:	e024      	b.n	80074d6 <USB_EPStartXfer+0x109e>
 800748c:	463b      	mov	r3, r7
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d11f      	bne.n	80074d6 <USB_EPStartXfer+0x109e>
 8007496:	1d3b      	adds	r3, r7, #4
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800749e:	1d3b      	adds	r3, r7, #4
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	461a      	mov	r2, r3
 80074aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074ae:	4413      	add	r3, r2
 80074b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074b4:	463b      	mov	r3, r7
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	011a      	lsls	r2, r3, #4
 80074bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074c0:	4413      	add	r3, r2
 80074c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80074ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074d4:	801a      	strh	r2, [r3, #0]
 80074d6:	1d3b      	adds	r3, r7, #4
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074de:	463b      	mov	r3, r7
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	785b      	ldrb	r3, [r3, #1]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d16f      	bne.n	80075c8 <USB_EPStartXfer+0x1190>
 80074e8:	1d3b      	adds	r3, r7, #4
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074f0:	1d3b      	adds	r3, r7, #4
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	461a      	mov	r2, r3
 80074fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007500:	4413      	add	r3, r2
 8007502:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007506:	463b      	mov	r3, r7
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	011a      	lsls	r2, r3, #4
 800750e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007512:	4413      	add	r3, r2
 8007514:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007518:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800751c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d116      	bne.n	8007552 <USB_EPStartXfer+0x111a>
 8007524:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007530:	b29a      	uxth	r2, r3
 8007532:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007536:	801a      	strh	r2, [r3, #0]
 8007538:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007548:	b29a      	uxth	r2, r3
 800754a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800754e:	801a      	strh	r2, [r3, #0]
 8007550:	e05e      	b.n	8007610 <USB_EPStartXfer+0x11d8>
 8007552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007556:	2b3e      	cmp	r3, #62	; 0x3e
 8007558:	d818      	bhi.n	800758c <USB_EPStartXfer+0x1154>
 800755a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800755e:	085b      	lsrs	r3, r3, #1
 8007560:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d004      	beq.n	800757a <USB_EPStartXfer+0x1142>
 8007570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007574:	3301      	adds	r3, #1
 8007576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800757a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800757e:	b29b      	uxth	r3, r3
 8007580:	029b      	lsls	r3, r3, #10
 8007582:	b29a      	uxth	r2, r3
 8007584:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007588:	801a      	strh	r2, [r3, #0]
 800758a:	e041      	b.n	8007610 <USB_EPStartXfer+0x11d8>
 800758c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800759a:	f003 031f 	and.w	r3, r3, #31
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d104      	bne.n	80075ac <USB_EPStartXfer+0x1174>
 80075a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075a6:	3b01      	subs	r3, #1
 80075a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	029b      	lsls	r3, r3, #10
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075be:	b29a      	uxth	r2, r3
 80075c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075c4:	801a      	strh	r2, [r3, #0]
 80075c6:	e023      	b.n	8007610 <USB_EPStartXfer+0x11d8>
 80075c8:	463b      	mov	r3, r7
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	785b      	ldrb	r3, [r3, #1]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d11e      	bne.n	8007610 <USB_EPStartXfer+0x11d8>
 80075d2:	1d3b      	adds	r3, r7, #4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075da:	b29b      	uxth	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075e2:	4413      	add	r3, r2
 80075e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075e8:	463b      	mov	r3, r7
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	011a      	lsls	r2, r3, #4
 80075f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075f4:	4413      	add	r3, r2
 80075f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007602:	b29a      	uxth	r2, r3
 8007604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007608:	801a      	strh	r2, [r3, #0]
 800760a:	e001      	b.n	8007610 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e02e      	b.n	800766e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007610:	1d3b      	adds	r3, r7, #4
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	463b      	mov	r3, r7
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b29b      	uxth	r3, r3
 8007622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800762e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007632:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007636:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800763a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800763e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007642:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007646:	1d3b      	adds	r3, r7, #4
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	463b      	mov	r3, r7
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	441a      	add	r2, r3
 8007654:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800765c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007668:	b29b      	uxth	r3, r3
 800766a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	785b      	ldrb	r3, [r3, #1]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d020      	beq.n	80076cc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	b29b      	uxth	r3, r3
 8007698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800769c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a0:	81bb      	strh	r3, [r7, #12]
 80076a2:	89bb      	ldrh	r3, [r7, #12]
 80076a4:	f083 0310 	eor.w	r3, r3, #16
 80076a8:	81bb      	strh	r3, [r7, #12]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	441a      	add	r2, r3
 80076b4:	89bb      	ldrh	r3, [r7, #12]
 80076b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	8013      	strh	r3, [r2, #0]
 80076ca:	e01f      	b.n	800770c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	b29b      	uxth	r3, r3
 80076da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e2:	81fb      	strh	r3, [r7, #14]
 80076e4:	89fb      	ldrh	r3, [r7, #14]
 80076e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076ea:	81fb      	strh	r3, [r7, #14]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	441a      	add	r2, r3
 80076f6:	89fb      	ldrh	r3, [r7, #14]
 80076f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007708:	b29b      	uxth	r3, r3
 800770a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	bc80      	pop	{r7}
 8007716:	4770      	bx	lr

08007718 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007718:	b480      	push	{r7}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	7b1b      	ldrb	r3, [r3, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	f040 809d 	bne.w	8007866 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	785b      	ldrb	r3, [r3, #1]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d04c      	beq.n	80077ce <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	823b      	strh	r3, [r7, #16]
 8007742:	8a3b      	ldrh	r3, [r7, #16]
 8007744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01b      	beq.n	8007784 <USB_EPClearStall+0x6c>
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	b29b      	uxth	r3, r3
 800775a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800775e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007762:	81fb      	strh	r3, [r7, #14]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	441a      	add	r2, r3
 800776e:	89fb      	ldrh	r3, [r7, #14]
 8007770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800777c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007780:	b29b      	uxth	r3, r3
 8007782:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	78db      	ldrb	r3, [r3, #3]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d06c      	beq.n	8007866 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	b29b      	uxth	r3, r3
 800779a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800779e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a2:	81bb      	strh	r3, [r7, #12]
 80077a4:	89bb      	ldrh	r3, [r7, #12]
 80077a6:	f083 0320 	eor.w	r3, r3, #32
 80077aa:	81bb      	strh	r3, [r7, #12]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	441a      	add	r2, r3
 80077b6:	89bb      	ldrh	r3, [r7, #12]
 80077b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	8013      	strh	r3, [r2, #0]
 80077cc:	e04b      	b.n	8007866 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	82fb      	strh	r3, [r7, #22]
 80077dc:	8afb      	ldrh	r3, [r7, #22]
 80077de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d01b      	beq.n	800781e <USB_EPClearStall+0x106>
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fc:	82bb      	strh	r3, [r7, #20]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	441a      	add	r2, r3
 8007808:	8abb      	ldrh	r3, [r7, #20]
 800780a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800780e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800781a:	b29b      	uxth	r3, r3
 800781c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	b29b      	uxth	r3, r3
 800782c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007834:	827b      	strh	r3, [r7, #18]
 8007836:	8a7b      	ldrh	r3, [r7, #18]
 8007838:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800783c:	827b      	strh	r3, [r7, #18]
 800783e:	8a7b      	ldrh	r3, [r7, #18]
 8007840:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007844:	827b      	strh	r3, [r7, #18]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	441a      	add	r2, r3
 8007850:	8a7b      	ldrh	r3, [r7, #18]
 8007852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800785a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800785e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007862:	b29b      	uxth	r3, r3
 8007864:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	371c      	adds	r7, #28
 800786c:	46bd      	mov	sp, r7
 800786e:	bc80      	pop	{r7}
 8007870:	4770      	bx	lr

08007872 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	460b      	mov	r3, r1
 800787c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d103      	bne.n	800788c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2280      	movs	r2, #128	; 0x80
 8007888:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	bc80      	pop	{r7}
 8007896:	4770      	bx	lr

08007898 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bc80      	pop	{r7}
 80078aa:	4770      	bx	lr

080078ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bc80      	pop	{r7}
 80078be:	4770      	bx	lr

080078c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80078d2:	68fb      	ldr	r3, [r7, #12]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	bc80      	pop	{r7}
 80078dc:	4770      	bx	lr

080078de <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bc80      	pop	{r7}
 80078f2:	4770      	bx	lr

080078f4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b08d      	sub	sp, #52	; 0x34
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	4611      	mov	r1, r2
 8007900:	461a      	mov	r2, r3
 8007902:	460b      	mov	r3, r1
 8007904:	80fb      	strh	r3, [r7, #6]
 8007906:	4613      	mov	r3, r2
 8007908:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800790a:	88bb      	ldrh	r3, [r7, #4]
 800790c:	3301      	adds	r3, #1
 800790e:	085b      	lsrs	r3, r3, #1
 8007910:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800791a:	88fb      	ldrh	r3, [r7, #6]
 800791c:	005a      	lsls	r2, r3, #1
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007926:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800792c:	e01e      	b.n	800796c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	3301      	adds	r3, #1
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	021b      	lsls	r3, r3, #8
 8007942:	b29b      	uxth	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	4313      	orrs	r3, r2
 800794a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	b29a      	uxth	r2, r3
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	3302      	adds	r3, #2
 8007958:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	3302      	adds	r3, #2
 800795e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	3301      	adds	r3, #1
 8007964:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007968:	3b01      	subs	r3, #1
 800796a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800796c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1dd      	bne.n	800792e <USB_WritePMA+0x3a>
  }
}
 8007972:	bf00      	nop
 8007974:	bf00      	nop
 8007976:	3734      	adds	r7, #52	; 0x34
 8007978:	46bd      	mov	sp, r7
 800797a:	bc80      	pop	{r7}
 800797c:	4770      	bx	lr

0800797e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800797e:	b480      	push	{r7}
 8007980:	b08b      	sub	sp, #44	; 0x2c
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	4611      	mov	r1, r2
 800798a:	461a      	mov	r2, r3
 800798c:	460b      	mov	r3, r1
 800798e:	80fb      	strh	r3, [r7, #6]
 8007990:	4613      	mov	r3, r2
 8007992:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007994:	88bb      	ldrh	r3, [r7, #4]
 8007996:	085b      	lsrs	r3, r3, #1
 8007998:	b29b      	uxth	r3, r3
 800799a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079a4:	88fb      	ldrh	r3, [r7, #6]
 80079a6:	005a      	lsls	r2, r3, #1
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079b0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	627b      	str	r3, [r7, #36]	; 0x24
 80079b6:	e01b      	b.n	80079f0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	3302      	adds	r3, #2
 80079c4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	3301      	adds	r3, #1
 80079d2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	0a1b      	lsrs	r3, r3, #8
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	3301      	adds	r3, #1
 80079e2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	3302      	adds	r3, #2
 80079e8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	3b01      	subs	r3, #1
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e0      	bne.n	80079b8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80079f6:	88bb      	ldrh	r3, [r7, #4]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d007      	beq.n	8007a12 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	701a      	strb	r2, [r3, #0]
  }
}
 8007a12:	bf00      	nop
 8007a14:	372c      	adds	r7, #44	; 0x2c
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bc80      	pop	{r7}
 8007a1a:	4770      	bx	lr

08007a1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	7c1b      	ldrb	r3, [r3, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d115      	bne.n	8007a60 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a38:	2202      	movs	r2, #2
 8007a3a:	2181      	movs	r1, #129	; 0x81
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 fe34 	bl	80096aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	2101      	movs	r1, #1
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 fe2a 	bl	80096aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007a5e:	e012      	b.n	8007a86 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a60:	2340      	movs	r3, #64	; 0x40
 8007a62:	2202      	movs	r2, #2
 8007a64:	2181      	movs	r1, #129	; 0x81
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 fe1f 	bl	80096aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a72:	2340      	movs	r3, #64	; 0x40
 8007a74:	2202      	movs	r2, #2
 8007a76:	2101      	movs	r1, #1
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 fe16 	bl	80096aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a86:	2308      	movs	r3, #8
 8007a88:	2203      	movs	r2, #3
 8007a8a:	2182      	movs	r1, #130	; 0x82
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 fe0c 	bl	80096aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a9c:	f001 ff2c 	bl	80098f8 <USBD_static_malloc>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d102      	bne.n	8007ab8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	73fb      	strb	r3, [r7, #15]
 8007ab6:	e026      	b.n	8007b06 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007abe:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	7c1b      	ldrb	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d109      	bne.n	8007af6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007aec:	2101      	movs	r1, #1
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 fecc 	bl	800988c <USBD_LL_PrepareReceive>
 8007af4:	e007      	b.n	8007b06 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007afc:	2340      	movs	r3, #64	; 0x40
 8007afe:	2101      	movs	r1, #1
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 fec3 	bl	800988c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007b20:	2181      	movs	r1, #129	; 0x81
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 fde7 	bl	80096f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007b2e:	2101      	movs	r1, #1
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 fde0 	bl	80096f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007b3e:	2182      	movs	r1, #130	; 0x82
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 fdd8 	bl	80096f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00e      	beq.n	8007b74 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b66:	4618      	mov	r0, r3
 8007b68:	f001 fed2 	bl	8009910 <USBD_static_free>
    pdev->pClassData = NULL;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b086      	sub	sp, #24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d039      	beq.n	8007c1c <USBD_CDC_Setup+0x9e>
 8007ba8:	2b20      	cmp	r3, #32
 8007baa:	d17f      	bne.n	8007cac <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	88db      	ldrh	r3, [r3, #6]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d029      	beq.n	8007c08 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	b25b      	sxtb	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	da11      	bge.n	8007be2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007bca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	88d2      	ldrh	r2, [r2, #6]
 8007bd0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007bd2:	6939      	ldr	r1, [r7, #16]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	88db      	ldrh	r3, [r3, #6]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f001 f9d9 	bl	8008f92 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007be0:	e06b      	b.n	8007cba <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	785a      	ldrb	r2, [r3, #1]
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	88db      	ldrh	r3, [r3, #6]
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007bf8:	6939      	ldr	r1, [r7, #16]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	88db      	ldrh	r3, [r3, #6]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f001 f9f4 	bl	8008fee <USBD_CtlPrepareRx>
      break;
 8007c06:	e058      	b.n	8007cba <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	7850      	ldrb	r0, [r2, #1]
 8007c14:	2200      	movs	r2, #0
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	4798      	blx	r3
      break;
 8007c1a:	e04e      	b.n	8007cba <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	785b      	ldrb	r3, [r3, #1]
 8007c20:	2b0b      	cmp	r3, #11
 8007c22:	d02e      	beq.n	8007c82 <USBD_CDC_Setup+0x104>
 8007c24:	2b0b      	cmp	r3, #11
 8007c26:	dc38      	bgt.n	8007c9a <USBD_CDC_Setup+0x11c>
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <USBD_CDC_Setup+0xb4>
 8007c2c:	2b0a      	cmp	r3, #10
 8007c2e:	d014      	beq.n	8007c5a <USBD_CDC_Setup+0xdc>
 8007c30:	e033      	b.n	8007c9a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d107      	bne.n	8007c4c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007c3c:	f107 030c 	add.w	r3, r7, #12
 8007c40:	2202      	movs	r2, #2
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 f9a4 	bl	8008f92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c4a:	e02e      	b.n	8007caa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f001 f935 	bl	8008ebe <USBD_CtlError>
            ret = USBD_FAIL;
 8007c54:	2302      	movs	r3, #2
 8007c56:	75fb      	strb	r3, [r7, #23]
          break;
 8007c58:	e027      	b.n	8007caa <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d107      	bne.n	8007c74 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c64:	f107 030f 	add.w	r3, r7, #15
 8007c68:	2201      	movs	r2, #1
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 f990 	bl	8008f92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c72:	e01a      	b.n	8007caa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f001 f921 	bl	8008ebe <USBD_CtlError>
            ret = USBD_FAIL;
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	75fb      	strb	r3, [r7, #23]
          break;
 8007c80:	e013      	b.n	8007caa <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d00d      	beq.n	8007ca8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f001 f915 	bl	8008ebe <USBD_CtlError>
            ret = USBD_FAIL;
 8007c94:	2302      	movs	r3, #2
 8007c96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c98:	e006      	b.n	8007ca8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 f90e 	bl	8008ebe <USBD_CtlError>
          ret = USBD_FAIL;
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ca6:	e000      	b.n	8007caa <USBD_CDC_Setup+0x12c>
          break;
 8007ca8:	bf00      	nop
      }
      break;
 8007caa:	e006      	b.n	8007cba <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f001 f905 	bl	8008ebe <USBD_CtlError>
      ret = USBD_FAIL;
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb8:	bf00      	nop
  }

  return ret;
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cde:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d03a      	beq.n	8007d60 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007cea:	78fa      	ldrb	r2, [r7, #3]
 8007cec:	6879      	ldr	r1, [r7, #4]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	440b      	add	r3, r1
 8007cf8:	331c      	adds	r3, #28
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d029      	beq.n	8007d54 <USBD_CDC_DataIn+0x90>
 8007d00:	78fa      	ldrb	r2, [r7, #3]
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	4613      	mov	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	440b      	add	r3, r1
 8007d0e:	331c      	adds	r3, #28
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	78f9      	ldrb	r1, [r7, #3]
 8007d14:	68b8      	ldr	r0, [r7, #8]
 8007d16:	460b      	mov	r3, r1
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	00db      	lsls	r3, r3, #3
 8007d1e:	4403      	add	r3, r0
 8007d20:	3338      	adds	r3, #56	; 0x38
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d28:	fb03 f301 	mul.w	r3, r3, r1
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d110      	bne.n	8007d54 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007d32:	78fa      	ldrb	r2, [r7, #3]
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	4613      	mov	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	440b      	add	r3, r1
 8007d40:	331c      	adds	r3, #28
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d46:	78f9      	ldrb	r1, [r7, #3]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 fd7a 	bl	8009846 <USBD_LL_Transmit>
 8007d52:	e003      	b.n	8007d5c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e000      	b.n	8007d62 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007d60:	2302      	movs	r3, #2
  }
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d7e:	78fb      	ldrb	r3, [r7, #3]
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 fda5 	bl	80098d2 <USBD_LL_GetRxDataSize>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00d      	beq.n	8007db6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007dae:	4611      	mov	r1, r2
 8007db0:	4798      	blx	r3

    return USBD_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	e000      	b.n	8007db8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007db6:	2302      	movs	r3, #2
  }
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dce:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d015      	beq.n	8007e06 <USBD_CDC_EP0_RxReady+0x46>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007de0:	2bff      	cmp	r3, #255	; 0xff
 8007de2:	d010      	beq.n	8007e06 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007df2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007dfa:	b292      	uxth	r2, r2
 8007dfc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	22ff      	movs	r2, #255	; 0xff
 8007e02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2243      	movs	r2, #67	; 0x43
 8007e1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007e1e:	4b03      	ldr	r3, [pc, #12]	; (8007e2c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bc80      	pop	{r7}
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	200000a4 	.word	0x200000a4

08007e30 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2243      	movs	r2, #67	; 0x43
 8007e3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007e3e:	4b03      	ldr	r3, [pc, #12]	; (8007e4c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bc80      	pop	{r7}
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	20000060 	.word	0x20000060

08007e50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2243      	movs	r2, #67	; 0x43
 8007e5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007e5e:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bc80      	pop	{r7}
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	200000e8 	.word	0x200000e8

08007e70 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	220a      	movs	r2, #10
 8007e7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007e7e:	4b03      	ldr	r3, [pc, #12]	; (8007e8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bc80      	pop	{r7}
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	2000001c 	.word	0x2000001c

08007e90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d005      	beq.n	8007eb0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bc80      	pop	{r7}
 8007eba:	4770      	bx	lr

08007ebc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007eda:	88fa      	ldrh	r2, [r7, #6]
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	371c      	adds	r7, #28
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bc80      	pop	{r7}
 8007eec:	4770      	bx	lr

08007eee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b085      	sub	sp, #20
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bc80      	pop	{r7}
 8007f12:	4770      	bx	lr

08007f14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d017      	beq.n	8007f5e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	7c1b      	ldrb	r3, [r3, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d109      	bne.n	8007f4a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f40:	2101      	movs	r1, #1
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 fca2 	bl	800988c <USBD_LL_PrepareReceive>
 8007f48:	e007      	b.n	8007f5a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f50:	2340      	movs	r3, #64	; 0x40
 8007f52:	2101      	movs	r1, #1
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f001 fc99 	bl	800988c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e000      	b.n	8007f60 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007f5e:	2302      	movs	r3, #2
  }
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	4613      	mov	r3, r2
 8007f74:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e01a      	b.n	8007fb6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	79fa      	ldrb	r2, [r7, #7]
 8007fac:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f001 fb06 	bl	80095c0 <USBD_LL_Init>

  return USBD_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b085      	sub	sp, #20
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d006      	beq.n	8007fe0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]
 8007fde:	e001      	b.n	8007fe4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr

08007ff0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 fb3b 	bl	8009674 <USBD_LL_Start>

  return USBD_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	bc80      	pop	{r7}
 800801a:	4770      	bx	lr

0800801c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008028:	2302      	movs	r3, #2
 800802a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00c      	beq.n	8008050 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	78fa      	ldrb	r2, [r7, #3]
 8008040:	4611      	mov	r1, r2
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008050:	7bfb      	ldrb	r3, [r7, #15]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b082      	sub	sp, #8
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	78fa      	ldrb	r2, [r7, #3]
 8008070:	4611      	mov	r1, r2
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	4798      	blx	r3

  return USBD_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fed7 	bl	8008e46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80080a6:	461a      	mov	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80080b4:	f003 031f 	and.w	r3, r3, #31
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d016      	beq.n	80080ea <USBD_LL_SetupStage+0x6a>
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d81c      	bhi.n	80080fa <USBD_LL_SetupStage+0x7a>
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <USBD_LL_SetupStage+0x4a>
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d008      	beq.n	80080da <USBD_LL_SetupStage+0x5a>
 80080c8:	e017      	b.n	80080fa <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080d0:	4619      	mov	r1, r3
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f9ca 	bl	800846c <USBD_StdDevReq>
      break;
 80080d8:	e01a      	b.n	8008110 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fa2c 	bl	8008540 <USBD_StdItfReq>
      break;
 80080e8:	e012      	b.n	8008110 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fa6c 	bl	80085d0 <USBD_StdEPReq>
      break;
 80080f8:	e00a      	b.n	8008110 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008100:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008104:	b2db      	uxtb	r3, r3
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 fb13 	bl	8009734 <USBD_LL_StallEP>
      break;
 800810e:	bf00      	nop
  }

  return USBD_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b086      	sub	sp, #24
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	460b      	mov	r3, r1
 8008124:	607a      	str	r2, [r7, #4]
 8008126:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008128:	7afb      	ldrb	r3, [r7, #11]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d14b      	bne.n	80081c6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008134:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800813c:	2b03      	cmp	r3, #3
 800813e:	d134      	bne.n	80081aa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	68da      	ldr	r2, [r3, #12]
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	429a      	cmp	r2, r3
 800814a:	d919      	bls.n	8008180 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	1ad2      	subs	r2, r2, r3
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008162:	429a      	cmp	r2, r3
 8008164:	d203      	bcs.n	800816e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800816a:	b29b      	uxth	r3, r3
 800816c:	e002      	b.n	8008174 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008172:	b29b      	uxth	r3, r3
 8008174:	461a      	mov	r2, r3
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 ff56 	bl	800902a <USBD_CtlContinueRx>
 800817e:	e038      	b.n	80081f2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00a      	beq.n	80081a2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008192:	2b03      	cmp	r3, #3
 8008194:	d105      	bne.n	80081a2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 ff53 	bl	800904e <USBD_CtlSendStatus>
 80081a8:	e023      	b.n	80081f2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081b0:	2b05      	cmp	r3, #5
 80081b2:	d11e      	bne.n	80081f2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80081bc:	2100      	movs	r1, #0
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f001 fab8 	bl	8009734 <USBD_LL_StallEP>
 80081c4:	e015      	b.n	80081f2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00d      	beq.n	80081ee <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80081d8:	2b03      	cmp	r3, #3
 80081da:	d108      	bne.n	80081ee <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	7afa      	ldrb	r2, [r7, #11]
 80081e6:	4611      	mov	r1, r2
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	4798      	blx	r3
 80081ec:	e001      	b.n	80081f2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081ee:	2302      	movs	r3, #2
 80081f0:	e000      	b.n	80081f4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	460b      	mov	r3, r1
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800820a:	7afb      	ldrb	r3, [r7, #11]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d17f      	bne.n	8008310 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3314      	adds	r3, #20
 8008214:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800821c:	2b02      	cmp	r3, #2
 800821e:	d15c      	bne.n	80082da <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	429a      	cmp	r2, r3
 800822a:	d915      	bls.n	8008258 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	68da      	ldr	r2, [r3, #12]
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	1ad2      	subs	r2, r2, r3
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	b29b      	uxth	r3, r3
 8008240:	461a      	mov	r2, r3
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f000 fec0 	bl	8008fca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800824a:	2300      	movs	r3, #0
 800824c:	2200      	movs	r2, #0
 800824e:	2100      	movs	r1, #0
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f001 fb1b 	bl	800988c <USBD_LL_PrepareReceive>
 8008256:	e04e      	b.n	80082f6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	697a      	ldr	r2, [r7, #20]
 800825e:	6912      	ldr	r2, [r2, #16]
 8008260:	fbb3 f1f2 	udiv	r1, r3, r2
 8008264:	fb02 f201 	mul.w	r2, r2, r1
 8008268:	1a9b      	subs	r3, r3, r2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d11c      	bne.n	80082a8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008276:	429a      	cmp	r2, r3
 8008278:	d316      	bcc.n	80082a8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	689a      	ldr	r2, [r3, #8]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008284:	429a      	cmp	r2, r3
 8008286:	d20f      	bcs.n	80082a8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008288:	2200      	movs	r2, #0
 800828a:	2100      	movs	r1, #0
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 fe9c 	bl	8008fca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800829a:	2300      	movs	r3, #0
 800829c:	2200      	movs	r2, #0
 800829e:	2100      	movs	r1, #0
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f001 faf3 	bl	800988c <USBD_LL_PrepareReceive>
 80082a6:	e026      	b.n	80082f6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00a      	beq.n	80082ca <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d105      	bne.n	80082ca <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80082ca:	2180      	movs	r1, #128	; 0x80
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f001 fa31 	bl	8009734 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 fece 	bl	8009074 <USBD_CtlReceiveStatus>
 80082d8:	e00d      	b.n	80082f6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082e0:	2b04      	cmp	r3, #4
 80082e2:	d004      	beq.n	80082ee <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d103      	bne.n	80082f6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80082ee:	2180      	movs	r1, #128	; 0x80
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f001 fa1f 	bl	8009734 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d11d      	bne.n	800833c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7ff fe81 	bl	8008008 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800830e:	e015      	b.n	800833c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00d      	beq.n	8008338 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008322:	2b03      	cmp	r3, #3
 8008324:	d108      	bne.n	8008338 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	7afa      	ldrb	r2, [r7, #11]
 8008330:	4611      	mov	r1, r2
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	4798      	blx	r3
 8008336:	e001      	b.n	800833c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008338:	2302      	movs	r3, #2
 800833a:	e000      	b.n	800833e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800834e:	2340      	movs	r3, #64	; 0x40
 8008350:	2200      	movs	r2, #0
 8008352:	2100      	movs	r1, #0
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 f9a8 	bl	80096aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2240      	movs	r2, #64	; 0x40
 8008366:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800836a:	2340      	movs	r3, #64	; 0x40
 800836c:	2200      	movs	r2, #0
 800836e:	2180      	movs	r1, #128	; 0x80
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 f99a 	bl	80096aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2240      	movs	r2, #64	; 0x40
 8008380:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d009      	beq.n	80083be <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	6852      	ldr	r2, [r2, #4]
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	4611      	mov	r1, r2
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	4798      	blx	r3
  }

  return USBD_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bc80      	pop	{r7}
 80083e4:	4770      	bx	lr

080083e6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2204      	movs	r2, #4
 80083fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	bc80      	pop	{r7}
 800840c:	4770      	bx	lr

0800840e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800841c:	2b04      	cmp	r3, #4
 800841e:	d105      	bne.n	800842c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	bc80      	pop	{r7}
 8008436:	4770      	bx	lr

08008438 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008446:	2b03      	cmp	r3, #3
 8008448:	d10b      	bne.n	8008462 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d005      	beq.n	8008462 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008482:	2b40      	cmp	r3, #64	; 0x40
 8008484:	d005      	beq.n	8008492 <USBD_StdDevReq+0x26>
 8008486:	2b40      	cmp	r3, #64	; 0x40
 8008488:	d84f      	bhi.n	800852a <USBD_StdDevReq+0xbe>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d009      	beq.n	80084a2 <USBD_StdDevReq+0x36>
 800848e:	2b20      	cmp	r3, #32
 8008490:	d14b      	bne.n	800852a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	4798      	blx	r3
      break;
 80084a0:	e048      	b.n	8008534 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	785b      	ldrb	r3, [r3, #1]
 80084a6:	2b09      	cmp	r3, #9
 80084a8:	d839      	bhi.n	800851e <USBD_StdDevReq+0xb2>
 80084aa:	a201      	add	r2, pc, #4	; (adr r2, 80084b0 <USBD_StdDevReq+0x44>)
 80084ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b0:	08008501 	.word	0x08008501
 80084b4:	08008515 	.word	0x08008515
 80084b8:	0800851f 	.word	0x0800851f
 80084bc:	0800850b 	.word	0x0800850b
 80084c0:	0800851f 	.word	0x0800851f
 80084c4:	080084e3 	.word	0x080084e3
 80084c8:	080084d9 	.word	0x080084d9
 80084cc:	0800851f 	.word	0x0800851f
 80084d0:	080084f7 	.word	0x080084f7
 80084d4:	080084ed 	.word	0x080084ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f9dc 	bl	8008898 <USBD_GetDescriptor>
          break;
 80084e0:	e022      	b.n	8008528 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fb3f 	bl	8008b68 <USBD_SetAddress>
          break;
 80084ea:	e01d      	b.n	8008528 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fb7e 	bl	8008bf0 <USBD_SetConfig>
          break;
 80084f4:	e018      	b.n	8008528 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fc07 	bl	8008d0c <USBD_GetConfig>
          break;
 80084fe:	e013      	b.n	8008528 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fc37 	bl	8008d76 <USBD_GetStatus>
          break;
 8008508:	e00e      	b.n	8008528 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fc65 	bl	8008ddc <USBD_SetFeature>
          break;
 8008512:	e009      	b.n	8008528 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fc74 	bl	8008e04 <USBD_ClrFeature>
          break;
 800851c:	e004      	b.n	8008528 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fccc 	bl	8008ebe <USBD_CtlError>
          break;
 8008526:	bf00      	nop
      }
      break;
 8008528:	e004      	b.n	8008534 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fcc6 	bl	8008ebe <USBD_CtlError>
      break;
 8008532:	bf00      	nop
  }

  return ret;
 8008534:	7bfb      	ldrb	r3, [r7, #15]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop

08008540 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008556:	2b40      	cmp	r3, #64	; 0x40
 8008558:	d005      	beq.n	8008566 <USBD_StdItfReq+0x26>
 800855a:	2b40      	cmp	r3, #64	; 0x40
 800855c:	d82e      	bhi.n	80085bc <USBD_StdItfReq+0x7c>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <USBD_StdItfReq+0x26>
 8008562:	2b20      	cmp	r3, #32
 8008564:	d12a      	bne.n	80085bc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800856c:	3b01      	subs	r3, #1
 800856e:	2b02      	cmp	r3, #2
 8008570:	d81d      	bhi.n	80085ae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	889b      	ldrh	r3, [r3, #4]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b01      	cmp	r3, #1
 800857a:	d813      	bhi.n	80085a4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	4798      	blx	r3
 800858a:	4603      	mov	r3, r0
 800858c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	88db      	ldrh	r3, [r3, #6]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d110      	bne.n	80085b8 <USBD_StdItfReq+0x78>
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10d      	bne.n	80085b8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fd56 	bl	800904e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085a2:	e009      	b.n	80085b8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fc89 	bl	8008ebe <USBD_CtlError>
          break;
 80085ac:	e004      	b.n	80085b8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fc84 	bl	8008ebe <USBD_CtlError>
          break;
 80085b6:	e000      	b.n	80085ba <USBD_StdItfReq+0x7a>
          break;
 80085b8:	bf00      	nop
      }
      break;
 80085ba:	e004      	b.n	80085c6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fc7d 	bl	8008ebe <USBD_CtlError>
      break;
 80085c4:	bf00      	nop
  }

  return USBD_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	889b      	ldrh	r3, [r3, #4]
 80085e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ec:	2b40      	cmp	r3, #64	; 0x40
 80085ee:	d007      	beq.n	8008600 <USBD_StdEPReq+0x30>
 80085f0:	2b40      	cmp	r3, #64	; 0x40
 80085f2:	f200 8146 	bhi.w	8008882 <USBD_StdEPReq+0x2b2>
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00a      	beq.n	8008610 <USBD_StdEPReq+0x40>
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	f040 8141 	bne.w	8008882 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	4798      	blx	r3
      break;
 800860e:	e13d      	b.n	800888c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008618:	2b20      	cmp	r3, #32
 800861a:	d10a      	bne.n	8008632 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	4798      	blx	r3
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	e12d      	b.n	800888e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b03      	cmp	r3, #3
 8008638:	d007      	beq.n	800864a <USBD_StdEPReq+0x7a>
 800863a:	2b03      	cmp	r3, #3
 800863c:	f300 811b 	bgt.w	8008876 <USBD_StdEPReq+0x2a6>
 8008640:	2b00      	cmp	r3, #0
 8008642:	d072      	beq.n	800872a <USBD_StdEPReq+0x15a>
 8008644:	2b01      	cmp	r3, #1
 8008646:	d03a      	beq.n	80086be <USBD_StdEPReq+0xee>
 8008648:	e115      	b.n	8008876 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008650:	2b02      	cmp	r3, #2
 8008652:	d002      	beq.n	800865a <USBD_StdEPReq+0x8a>
 8008654:	2b03      	cmp	r3, #3
 8008656:	d015      	beq.n	8008684 <USBD_StdEPReq+0xb4>
 8008658:	e02b      	b.n	80086b2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00c      	beq.n	800867a <USBD_StdEPReq+0xaa>
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	2b80      	cmp	r3, #128	; 0x80
 8008664:	d009      	beq.n	800867a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008666:	7bbb      	ldrb	r3, [r7, #14]
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f001 f862 	bl	8009734 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008670:	2180      	movs	r1, #128	; 0x80
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f001 f85e 	bl	8009734 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008678:	e020      	b.n	80086bc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fc1e 	bl	8008ebe <USBD_CtlError>
              break;
 8008682:	e01b      	b.n	80086bc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	885b      	ldrh	r3, [r3, #2]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10e      	bne.n	80086aa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00b      	beq.n	80086aa <USBD_StdEPReq+0xda>
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	2b80      	cmp	r3, #128	; 0x80
 8008696:	d008      	beq.n	80086aa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	88db      	ldrh	r3, [r3, #6]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d104      	bne.n	80086aa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 f845 	bl	8009734 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fccf 	bl	800904e <USBD_CtlSendStatus>

              break;
 80086b0:	e004      	b.n	80086bc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fc02 	bl	8008ebe <USBD_CtlError>
              break;
 80086ba:	bf00      	nop
          }
          break;
 80086bc:	e0e0      	b.n	8008880 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d002      	beq.n	80086ce <USBD_StdEPReq+0xfe>
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d015      	beq.n	80086f8 <USBD_StdEPReq+0x128>
 80086cc:	e026      	b.n	800871c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00c      	beq.n	80086ee <USBD_StdEPReq+0x11e>
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b80      	cmp	r3, #128	; 0x80
 80086d8:	d009      	beq.n	80086ee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f001 f828 	bl	8009734 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80086e4:	2180      	movs	r1, #128	; 0x80
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f001 f824 	bl	8009734 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086ec:	e01c      	b.n	8008728 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fbe4 	bl	8008ebe <USBD_CtlError>
              break;
 80086f6:	e017      	b.n	8008728 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	885b      	ldrh	r3, [r3, #2]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d112      	bne.n	8008726 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008706:	2b00      	cmp	r3, #0
 8008708:	d004      	beq.n	8008714 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 f82f 	bl	8009772 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fc9a 	bl	800904e <USBD_CtlSendStatus>
              }
              break;
 800871a:	e004      	b.n	8008726 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fbcd 	bl	8008ebe <USBD_CtlError>
              break;
 8008724:	e000      	b.n	8008728 <USBD_StdEPReq+0x158>
              break;
 8008726:	bf00      	nop
          }
          break;
 8008728:	e0aa      	b.n	8008880 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008730:	2b02      	cmp	r3, #2
 8008732:	d002      	beq.n	800873a <USBD_StdEPReq+0x16a>
 8008734:	2b03      	cmp	r3, #3
 8008736:	d032      	beq.n	800879e <USBD_StdEPReq+0x1ce>
 8008738:	e097      	b.n	800886a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d007      	beq.n	8008750 <USBD_StdEPReq+0x180>
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	2b80      	cmp	r3, #128	; 0x80
 8008744:	d004      	beq.n	8008750 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 fbb8 	bl	8008ebe <USBD_CtlError>
                break;
 800874e:	e091      	b.n	8008874 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008750:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008754:	2b00      	cmp	r3, #0
 8008756:	da0b      	bge.n	8008770 <USBD_StdEPReq+0x1a0>
 8008758:	7bbb      	ldrb	r3, [r7, #14]
 800875a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800875e:	4613      	mov	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	3310      	adds	r3, #16
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	4413      	add	r3, r2
 800876c:	3304      	adds	r3, #4
 800876e:	e00b      	b.n	8008788 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008776:	4613      	mov	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	4413      	add	r3, r2
 8008786:	3304      	adds	r3, #4
 8008788:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2200      	movs	r2, #0
 800878e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2202      	movs	r2, #2
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fbfb 	bl	8008f92 <USBD_CtlSendData>
              break;
 800879c:	e06a      	b.n	8008874 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800879e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	da11      	bge.n	80087ca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	f003 020f 	and.w	r2, r3, #15
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	440b      	add	r3, r1
 80087b8:	3318      	adds	r3, #24
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d117      	bne.n	80087f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fb7b 	bl	8008ebe <USBD_CtlError>
                  break;
 80087c8:	e054      	b.n	8008874 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	f003 020f 	and.w	r2, r3, #15
 80087d0:	6879      	ldr	r1, [r7, #4]
 80087d2:	4613      	mov	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	440b      	add	r3, r1
 80087dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d104      	bne.n	80087f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fb68 	bl	8008ebe <USBD_CtlError>
                  break;
 80087ee:	e041      	b.n	8008874 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	da0b      	bge.n	8008810 <USBD_StdEPReq+0x240>
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	3310      	adds	r3, #16
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	4413      	add	r3, r2
 800880c:	3304      	adds	r3, #4
 800880e:	e00b      	b.n	8008828 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008816:	4613      	mov	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	4413      	add	r3, r2
 8008826:	3304      	adds	r3, #4
 8008828:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800882a:	7bbb      	ldrb	r3, [r7, #14]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <USBD_StdEPReq+0x266>
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	2b80      	cmp	r3, #128	; 0x80
 8008834:	d103      	bne.n	800883e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	2200      	movs	r2, #0
 800883a:	601a      	str	r2, [r3, #0]
 800883c:	e00e      	b.n	800885c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 ffb4 	bl	80097b0 <USBD_LL_IsStallEP>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d003      	beq.n	8008856 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2201      	movs	r2, #1
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	e002      	b.n	800885c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	2202      	movs	r2, #2
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fb95 	bl	8008f92 <USBD_CtlSendData>
              break;
 8008868:	e004      	b.n	8008874 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fb26 	bl	8008ebe <USBD_CtlError>
              break;
 8008872:	bf00      	nop
          }
          break;
 8008874:	e004      	b.n	8008880 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fb20 	bl	8008ebe <USBD_CtlError>
          break;
 800887e:	bf00      	nop
      }
      break;
 8008880:	e004      	b.n	800888c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fb1a 	bl	8008ebe <USBD_CtlError>
      break;
 800888a:	bf00      	nop
  }

  return ret;
 800888c:	7bfb      	ldrb	r3, [r7, #15]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088aa:	2300      	movs	r3, #0
 80088ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	885b      	ldrh	r3, [r3, #2]
 80088b2:	0a1b      	lsrs	r3, r3, #8
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	3b01      	subs	r3, #1
 80088b8:	2b06      	cmp	r3, #6
 80088ba:	f200 8128 	bhi.w	8008b0e <USBD_GetDescriptor+0x276>
 80088be:	a201      	add	r2, pc, #4	; (adr r2, 80088c4 <USBD_GetDescriptor+0x2c>)
 80088c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c4:	080088e1 	.word	0x080088e1
 80088c8:	080088f9 	.word	0x080088f9
 80088cc:	08008939 	.word	0x08008939
 80088d0:	08008b0f 	.word	0x08008b0f
 80088d4:	08008b0f 	.word	0x08008b0f
 80088d8:	08008aaf 	.word	0x08008aaf
 80088dc:	08008adb 	.word	0x08008adb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	7c12      	ldrb	r2, [r2, #16]
 80088ec:	f107 0108 	add.w	r1, r7, #8
 80088f0:	4610      	mov	r0, r2
 80088f2:	4798      	blx	r3
 80088f4:	60f8      	str	r0, [r7, #12]
      break;
 80088f6:	e112      	b.n	8008b1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	7c1b      	ldrb	r3, [r3, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10d      	bne.n	800891c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008908:	f107 0208 	add.w	r2, r7, #8
 800890c:	4610      	mov	r0, r2
 800890e:	4798      	blx	r3
 8008910:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3301      	adds	r3, #1
 8008916:	2202      	movs	r2, #2
 8008918:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800891a:	e100      	b.n	8008b1e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008924:	f107 0208 	add.w	r2, r7, #8
 8008928:	4610      	mov	r0, r2
 800892a:	4798      	blx	r3
 800892c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3301      	adds	r3, #1
 8008932:	2202      	movs	r2, #2
 8008934:	701a      	strb	r2, [r3, #0]
      break;
 8008936:	e0f2      	b.n	8008b1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	885b      	ldrh	r3, [r3, #2]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b05      	cmp	r3, #5
 8008940:	f200 80ac 	bhi.w	8008a9c <USBD_GetDescriptor+0x204>
 8008944:	a201      	add	r2, pc, #4	; (adr r2, 800894c <USBD_GetDescriptor+0xb4>)
 8008946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894a:	bf00      	nop
 800894c:	08008965 	.word	0x08008965
 8008950:	08008999 	.word	0x08008999
 8008954:	080089cd 	.word	0x080089cd
 8008958:	08008a01 	.word	0x08008a01
 800895c:	08008a35 	.word	0x08008a35
 8008960:	08008a69 	.word	0x08008a69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00b      	beq.n	8008988 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	7c12      	ldrb	r2, [r2, #16]
 800897c:	f107 0108 	add.w	r1, r7, #8
 8008980:	4610      	mov	r0, r2
 8008982:	4798      	blx	r3
 8008984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008986:	e091      	b.n	8008aac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa97 	bl	8008ebe <USBD_CtlError>
            err++;
 8008990:	7afb      	ldrb	r3, [r7, #11]
 8008992:	3301      	adds	r3, #1
 8008994:	72fb      	strb	r3, [r7, #11]
          break;
 8008996:	e089      	b.n	8008aac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	7c12      	ldrb	r2, [r2, #16]
 80089b0:	f107 0108 	add.w	r1, r7, #8
 80089b4:	4610      	mov	r0, r2
 80089b6:	4798      	blx	r3
 80089b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ba:	e077      	b.n	8008aac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa7d 	bl	8008ebe <USBD_CtlError>
            err++;
 80089c4:	7afb      	ldrb	r3, [r7, #11]
 80089c6:	3301      	adds	r3, #1
 80089c8:	72fb      	strb	r3, [r7, #11]
          break;
 80089ca:	e06f      	b.n	8008aac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00b      	beq.n	80089f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	7c12      	ldrb	r2, [r2, #16]
 80089e4:	f107 0108 	add.w	r1, r7, #8
 80089e8:	4610      	mov	r0, r2
 80089ea:	4798      	blx	r3
 80089ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ee:	e05d      	b.n	8008aac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fa63 	bl	8008ebe <USBD_CtlError>
            err++;
 80089f8:	7afb      	ldrb	r3, [r7, #11]
 80089fa:	3301      	adds	r3, #1
 80089fc:	72fb      	strb	r3, [r7, #11]
          break;
 80089fe:	e055      	b.n	8008aac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00b      	beq.n	8008a24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	7c12      	ldrb	r2, [r2, #16]
 8008a18:	f107 0108 	add.w	r1, r7, #8
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	4798      	blx	r3
 8008a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a22:	e043      	b.n	8008aac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fa49 	bl	8008ebe <USBD_CtlError>
            err++;
 8008a2c:	7afb      	ldrb	r3, [r7, #11]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	72fb      	strb	r3, [r7, #11]
          break;
 8008a32:	e03b      	b.n	8008aac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00b      	beq.n	8008a58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	7c12      	ldrb	r2, [r2, #16]
 8008a4c:	f107 0108 	add.w	r1, r7, #8
 8008a50:	4610      	mov	r0, r2
 8008a52:	4798      	blx	r3
 8008a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a56:	e029      	b.n	8008aac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fa2f 	bl	8008ebe <USBD_CtlError>
            err++;
 8008a60:	7afb      	ldrb	r3, [r7, #11]
 8008a62:	3301      	adds	r3, #1
 8008a64:	72fb      	strb	r3, [r7, #11]
          break;
 8008a66:	e021      	b.n	8008aac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00b      	beq.n	8008a8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	7c12      	ldrb	r2, [r2, #16]
 8008a80:	f107 0108 	add.w	r1, r7, #8
 8008a84:	4610      	mov	r0, r2
 8008a86:	4798      	blx	r3
 8008a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a8a:	e00f      	b.n	8008aac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fa15 	bl	8008ebe <USBD_CtlError>
            err++;
 8008a94:	7afb      	ldrb	r3, [r7, #11]
 8008a96:	3301      	adds	r3, #1
 8008a98:	72fb      	strb	r3, [r7, #11]
          break;
 8008a9a:	e007      	b.n	8008aac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fa0d 	bl	8008ebe <USBD_CtlError>
          err++;
 8008aa4:	7afb      	ldrb	r3, [r7, #11]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008aaa:	e038      	b.n	8008b1e <USBD_GetDescriptor+0x286>
 8008aac:	e037      	b.n	8008b1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	7c1b      	ldrb	r3, [r3, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d109      	bne.n	8008aca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008abe:	f107 0208 	add.w	r2, r7, #8
 8008ac2:	4610      	mov	r0, r2
 8008ac4:	4798      	blx	r3
 8008ac6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ac8:	e029      	b.n	8008b1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f9f6 	bl	8008ebe <USBD_CtlError>
        err++;
 8008ad2:	7afb      	ldrb	r3, [r7, #11]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ad8:	e021      	b.n	8008b1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	7c1b      	ldrb	r3, [r3, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10d      	bne.n	8008afe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aea:	f107 0208 	add.w	r2, r7, #8
 8008aee:	4610      	mov	r0, r2
 8008af0:	4798      	blx	r3
 8008af2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	3301      	adds	r3, #1
 8008af8:	2207      	movs	r2, #7
 8008afa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008afc:	e00f      	b.n	8008b1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f9dc 	bl	8008ebe <USBD_CtlError>
        err++;
 8008b06:	7afb      	ldrb	r3, [r7, #11]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b0c:	e007      	b.n	8008b1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f9d4 	bl	8008ebe <USBD_CtlError>
      err++;
 8008b16:	7afb      	ldrb	r3, [r7, #11]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b1c:	bf00      	nop
  }

  if (err != 0U)
 8008b1e:	7afb      	ldrb	r3, [r7, #11]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d11c      	bne.n	8008b5e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008b24:	893b      	ldrh	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d011      	beq.n	8008b4e <USBD_GetDescriptor+0x2b6>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	88db      	ldrh	r3, [r3, #6]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00d      	beq.n	8008b4e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	88da      	ldrh	r2, [r3, #6]
 8008b36:	893b      	ldrh	r3, [r7, #8]
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	bf28      	it	cs
 8008b3c:	4613      	movcs	r3, r2
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b42:	893b      	ldrh	r3, [r7, #8]
 8008b44:	461a      	mov	r2, r3
 8008b46:	68f9      	ldr	r1, [r7, #12]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fa22 	bl	8008f92 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	88db      	ldrh	r3, [r3, #6]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d104      	bne.n	8008b60 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fa79 	bl	800904e <USBD_CtlSendStatus>
 8008b5c:	e000      	b.n	8008b60 <USBD_GetDescriptor+0x2c8>
    return;
 8008b5e:	bf00      	nop
    }
  }
}
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop

08008b68 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	889b      	ldrh	r3, [r3, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d130      	bne.n	8008bdc <USBD_SetAddress+0x74>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	88db      	ldrh	r3, [r3, #6]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d12c      	bne.n	8008bdc <USBD_SetAddress+0x74>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	885b      	ldrh	r3, [r3, #2]
 8008b86:	2b7f      	cmp	r3, #127	; 0x7f
 8008b88:	d828      	bhi.n	8008bdc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	885b      	ldrh	r3, [r3, #2]
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	d104      	bne.n	8008baa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f98b 	bl	8008ebe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba8:	e01d      	b.n	8008be6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	7bfa      	ldrb	r2, [r7, #15]
 8008bae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fe26 	bl	8009808 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fa46 	bl	800904e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d004      	beq.n	8008bd2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd0:	e009      	b.n	8008be6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bda:	e004      	b.n	8008be6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f96d 	bl	8008ebe <USBD_CtlError>
  }
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	885b      	ldrh	r3, [r3, #2]
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	4b41      	ldr	r3, [pc, #260]	; (8008d08 <USBD_SetConfig+0x118>)
 8008c02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c04:	4b40      	ldr	r3, [pc, #256]	; (8008d08 <USBD_SetConfig+0x118>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d904      	bls.n	8008c16 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f955 	bl	8008ebe <USBD_CtlError>
 8008c14:	e075      	b.n	8008d02 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d002      	beq.n	8008c26 <USBD_SetConfig+0x36>
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d023      	beq.n	8008c6c <USBD_SetConfig+0x7c>
 8008c24:	e062      	b.n	8008cec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008c26:	4b38      	ldr	r3, [pc, #224]	; (8008d08 <USBD_SetConfig+0x118>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d01a      	beq.n	8008c64 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008c2e:	4b36      	ldr	r3, [pc, #216]	; (8008d08 <USBD_SetConfig+0x118>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c40:	4b31      	ldr	r3, [pc, #196]	; (8008d08 <USBD_SetConfig+0x118>)
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	4619      	mov	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7ff f9e8 	bl	800801c <USBD_SetClassConfig>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d104      	bne.n	8008c5c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f932 	bl	8008ebe <USBD_CtlError>
            return;
 8008c5a:	e052      	b.n	8008d02 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f9f6 	bl	800904e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c62:	e04e      	b.n	8008d02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f9f2 	bl	800904e <USBD_CtlSendStatus>
        break;
 8008c6a:	e04a      	b.n	8008d02 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008c6c:	4b26      	ldr	r3, [pc, #152]	; (8008d08 <USBD_SetConfig+0x118>)
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d112      	bne.n	8008c9a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2202      	movs	r2, #2
 8008c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008c7c:	4b22      	ldr	r3, [pc, #136]	; (8008d08 <USBD_SetConfig+0x118>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	461a      	mov	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008c86:	4b20      	ldr	r3, [pc, #128]	; (8008d08 <USBD_SetConfig+0x118>)
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff f9e4 	bl	800805a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f9db 	bl	800904e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c98:	e033      	b.n	8008d02 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008c9a:	4b1b      	ldr	r3, [pc, #108]	; (8008d08 <USBD_SetConfig+0x118>)
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d01d      	beq.n	8008ce4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff f9d2 	bl	800805a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008cb6:	4b14      	ldr	r3, [pc, #80]	; (8008d08 <USBD_SetConfig+0x118>)
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008cc0:	4b11      	ldr	r3, [pc, #68]	; (8008d08 <USBD_SetConfig+0x118>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff f9a8 	bl	800801c <USBD_SetClassConfig>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d104      	bne.n	8008cdc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f8f2 	bl	8008ebe <USBD_CtlError>
            return;
 8008cda:	e012      	b.n	8008d02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f9b6 	bl	800904e <USBD_CtlSendStatus>
        break;
 8008ce2:	e00e      	b.n	8008d02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f9b2 	bl	800904e <USBD_CtlSendStatus>
        break;
 8008cea:	e00a      	b.n	8008d02 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f8e5 	bl	8008ebe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008cf4:	4b04      	ldr	r3, [pc, #16]	; (8008d08 <USBD_SetConfig+0x118>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7ff f9ad 	bl	800805a <USBD_ClrClassConfig>
        break;
 8008d00:	bf00      	nop
    }
  }
}
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	20000278 	.word	0x20000278

08008d0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	88db      	ldrh	r3, [r3, #6]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d004      	beq.n	8008d28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f8cc 	bl	8008ebe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d26:	e022      	b.n	8008d6e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	dc02      	bgt.n	8008d38 <USBD_GetConfig+0x2c>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	dc03      	bgt.n	8008d3e <USBD_GetConfig+0x32>
 8008d36:	e015      	b.n	8008d64 <USBD_GetConfig+0x58>
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d00b      	beq.n	8008d54 <USBD_GetConfig+0x48>
 8008d3c:	e012      	b.n	8008d64 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3308      	adds	r3, #8
 8008d48:	2201      	movs	r2, #1
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f920 	bl	8008f92 <USBD_CtlSendData>
        break;
 8008d52:	e00c      	b.n	8008d6e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3304      	adds	r3, #4
 8008d58:	2201      	movs	r2, #1
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f918 	bl	8008f92 <USBD_CtlSendData>
        break;
 8008d62:	e004      	b.n	8008d6e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f8a9 	bl	8008ebe <USBD_CtlError>
        break;
 8008d6c:	bf00      	nop
}
 8008d6e:	bf00      	nop
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b082      	sub	sp, #8
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d86:	3b01      	subs	r3, #1
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d81e      	bhi.n	8008dca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	88db      	ldrh	r3, [r3, #6]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d004      	beq.n	8008d9e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f891 	bl	8008ebe <USBD_CtlError>
        break;
 8008d9c:	e01a      	b.n	8008dd4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d005      	beq.n	8008dba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f043 0202 	orr.w	r2, r3, #2
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	330c      	adds	r3, #12
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f8e5 	bl	8008f92 <USBD_CtlSendData>
      break;
 8008dc8:	e004      	b.n	8008dd4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f876 	bl	8008ebe <USBD_CtlError>
      break;
 8008dd2:	bf00      	nop
  }
}
 8008dd4:	bf00      	nop
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	885b      	ldrh	r3, [r3, #2]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d106      	bne.n	8008dfc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f929 	bl	800904e <USBD_CtlSendStatus>
  }
}
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e14:	3b01      	subs	r3, #1
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d80b      	bhi.n	8008e32 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	885b      	ldrh	r3, [r3, #2]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d10c      	bne.n	8008e3c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f90f 	bl	800904e <USBD_CtlSendStatus>
      }
      break;
 8008e30:	e004      	b.n	8008e3c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f842 	bl	8008ebe <USBD_CtlError>
      break;
 8008e3a:	e000      	b.n	8008e3e <USBD_ClrFeature+0x3a>
      break;
 8008e3c:	bf00      	nop
  }
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b083      	sub	sp, #12
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	781a      	ldrb	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	785a      	ldrb	r2, [r3, #1]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	3302      	adds	r3, #2
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	3303      	adds	r3, #3
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	021b      	lsls	r3, r3, #8
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	4413      	add	r3, r2
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	3305      	adds	r3, #5
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	021b      	lsls	r3, r3, #8
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	4413      	add	r3, r2
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	3306      	adds	r3, #6
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	3307      	adds	r3, #7
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	4413      	add	r3, r2
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	80da      	strh	r2, [r3, #6]

}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bc80      	pop	{r7}
 8008ebc:	4770      	bx	lr

08008ebe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b082      	sub	sp, #8
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008ec8:	2180      	movs	r1, #128	; 0x80
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fc32 	bl	8009734 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fc2e 	bl	8009734 <USBD_LL_StallEP>
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d032      	beq.n	8008f5c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 f834 	bl	8008f64 <USBD_GetLen>
 8008efc:	4603      	mov	r3, r0
 8008efe:	3301      	adds	r3, #1
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	75fa      	strb	r2, [r7, #23]
 8008f10:	461a      	mov	r2, r3
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	4413      	add	r3, r2
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	7812      	ldrb	r2, [r2, #0]
 8008f1a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	75fa      	strb	r2, [r7, #23]
 8008f22:	461a      	mov	r2, r3
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	4413      	add	r3, r2
 8008f28:	2203      	movs	r2, #3
 8008f2a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f2c:	e012      	b.n	8008f54 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	1c5a      	adds	r2, r3, #1
 8008f32:	60fa      	str	r2, [r7, #12]
 8008f34:	7dfa      	ldrb	r2, [r7, #23]
 8008f36:	1c51      	adds	r1, r2, #1
 8008f38:	75f9      	strb	r1, [r7, #23]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	440a      	add	r2, r1
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	75fa      	strb	r2, [r7, #23]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4413      	add	r3, r2
 8008f50:	2200      	movs	r2, #0
 8008f52:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1e8      	bne.n	8008f2e <USBD_GetString+0x4e>
    }
  }
}
 8008f5c:	bf00      	nop
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008f70:	e005      	b.n	8008f7e <USBD_GetLen+0x1a>
  {
    len++;
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	3301      	adds	r3, #1
 8008f76:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1f5      	bne.n	8008f72 <USBD_GetLen+0xe>
  }

  return len;
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bc80      	pop	{r7}
 8008f90:	4770      	bx	lr

08008f92 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b084      	sub	sp, #16
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fa8:	88fa      	ldrh	r2, [r7, #6]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008fae:	88fa      	ldrh	r2, [r7, #6]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fb4:	88fb      	ldrh	r3, [r7, #6]
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	2100      	movs	r1, #0
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 fc43 	bl	8009846 <USBD_LL_Transmit>

  return USBD_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	60b9      	str	r1, [r7, #8]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fd8:	88fb      	ldrh	r3, [r7, #6]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	2100      	movs	r1, #0
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 fc31 	bl	8009846 <USBD_LL_Transmit>

  return USBD_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2203      	movs	r2, #3
 8009000:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009004:	88fa      	ldrh	r2, [r7, #6]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800900c:	88fa      	ldrh	r2, [r7, #6]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009014:	88fb      	ldrh	r3, [r7, #6]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	2100      	movs	r1, #0
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f000 fc36 	bl	800988c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	4613      	mov	r3, r2
 8009036:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009038:	88fb      	ldrh	r3, [r7, #6]
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	2100      	movs	r1, #0
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f000 fc24 	bl	800988c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b082      	sub	sp, #8
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2204      	movs	r2, #4
 800905a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800905e:	2300      	movs	r3, #0
 8009060:	2200      	movs	r2, #0
 8009062:	2100      	movs	r1, #0
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 fbee 	bl	8009846 <USBD_LL_Transmit>

  return USBD_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2205      	movs	r2, #5
 8009080:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009084:	2300      	movs	r3, #0
 8009086:	2200      	movs	r2, #0
 8009088:	2100      	movs	r1, #0
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fbfe 	bl	800988c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
	...

0800909c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090a0:	2200      	movs	r2, #0
 80090a2:	4912      	ldr	r1, [pc, #72]	; (80090ec <MX_USB_DEVICE_Init+0x50>)
 80090a4:	4812      	ldr	r0, [pc, #72]	; (80090f0 <MX_USB_DEVICE_Init+0x54>)
 80090a6:	f7fe ff5f 	bl	8007f68 <USBD_Init>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090b0:	f7f7 fe82 	bl	8000db8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090b4:	490f      	ldr	r1, [pc, #60]	; (80090f4 <MX_USB_DEVICE_Init+0x58>)
 80090b6:	480e      	ldr	r0, [pc, #56]	; (80090f0 <MX_USB_DEVICE_Init+0x54>)
 80090b8:	f7fe ff81 	bl	8007fbe <USBD_RegisterClass>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090c2:	f7f7 fe79 	bl	8000db8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090c6:	490c      	ldr	r1, [pc, #48]	; (80090f8 <MX_USB_DEVICE_Init+0x5c>)
 80090c8:	4809      	ldr	r0, [pc, #36]	; (80090f0 <MX_USB_DEVICE_Init+0x54>)
 80090ca:	f7fe fee1 	bl	8007e90 <USBD_CDC_RegisterInterface>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090d4:	f7f7 fe70 	bl	8000db8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090d8:	4805      	ldr	r0, [pc, #20]	; (80090f0 <MX_USB_DEVICE_Init+0x54>)
 80090da:	f7fe ff89 	bl	8007ff0 <USBD_Start>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090e4:	f7f7 fe68 	bl	8000db8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090e8:	bf00      	nop
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	2000013c 	.word	0x2000013c
 80090f0:	200009e8 	.word	0x200009e8
 80090f4:	20000028 	.word	0x20000028
 80090f8:	2000012c 	.word	0x2000012c

080090fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009100:	2200      	movs	r2, #0
 8009102:	4905      	ldr	r1, [pc, #20]	; (8009118 <CDC_Init_FS+0x1c>)
 8009104:	4805      	ldr	r0, [pc, #20]	; (800911c <CDC_Init_FS+0x20>)
 8009106:	f7fe fed9 	bl	8007ebc <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800910a:	4905      	ldr	r1, [pc, #20]	; (8009120 <CDC_Init_FS+0x24>)
 800910c:	4803      	ldr	r0, [pc, #12]	; (800911c <CDC_Init_FS+0x20>)
 800910e:	f7fe feee 	bl	8007eee <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8009112:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009114:	4618      	mov	r0, r3
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20000eac 	.word	0x20000eac
 800911c:	200009e8 	.word	0x200009e8
 8009120:	20000cac 	.word	0x20000cac

08009124 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009124:	b480      	push	{r7}
 8009126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8009128:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800912a:	4618      	mov	r0, r3
 800912c:	46bd      	mov	sp, r7
 800912e:	bc80      	pop	{r7}
 8009130:	4770      	bx	lr
	...

08009134 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	6039      	str	r1, [r7, #0]
 800913e:	71fb      	strb	r3, [r7, #7]
 8009140:	4613      	mov	r3, r2
 8009142:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 8009144:	79fb      	ldrb	r3, [r7, #7]
 8009146:	2b23      	cmp	r3, #35	; 0x23
 8009148:	d84a      	bhi.n	80091e0 <CDC_Control_FS+0xac>
 800914a:	a201      	add	r2, pc, #4	; (adr r2, 8009150 <CDC_Control_FS+0x1c>)
 800914c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009150:	080091e1 	.word	0x080091e1
 8009154:	080091e1 	.word	0x080091e1
 8009158:	080091e1 	.word	0x080091e1
 800915c:	080091e1 	.word	0x080091e1
 8009160:	080091e1 	.word	0x080091e1
 8009164:	080091e1 	.word	0x080091e1
 8009168:	080091e1 	.word	0x080091e1
 800916c:	080091e1 	.word	0x080091e1
 8009170:	080091e1 	.word	0x080091e1
 8009174:	080091e1 	.word	0x080091e1
 8009178:	080091e1 	.word	0x080091e1
 800917c:	080091e1 	.word	0x080091e1
 8009180:	080091e1 	.word	0x080091e1
 8009184:	080091e1 	.word	0x080091e1
 8009188:	080091e1 	.word	0x080091e1
 800918c:	080091e1 	.word	0x080091e1
 8009190:	080091e1 	.word	0x080091e1
 8009194:	080091e1 	.word	0x080091e1
 8009198:	080091e1 	.word	0x080091e1
 800919c:	080091e1 	.word	0x080091e1
 80091a0:	080091e1 	.word	0x080091e1
 80091a4:	080091e1 	.word	0x080091e1
 80091a8:	080091e1 	.word	0x080091e1
 80091ac:	080091e1 	.word	0x080091e1
 80091b0:	080091e1 	.word	0x080091e1
 80091b4:	080091e1 	.word	0x080091e1
 80091b8:	080091e1 	.word	0x080091e1
 80091bc:	080091e1 	.word	0x080091e1
 80091c0:	080091e1 	.word	0x080091e1
 80091c4:	080091e1 	.word	0x080091e1
 80091c8:	080091e1 	.word	0x080091e1
 80091cc:	080091e1 	.word	0x080091e1
 80091d0:	080091e1 	.word	0x080091e1
 80091d4:	080091e1 	.word	0x080091e1
 80091d8:	080091e1 	.word	0x080091e1
 80091dc:	080091e1 	.word	0x080091e1
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80091e0:	bf00      	nop
	}

	return (USBD_OK);
 80091e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bc80      	pop	{r7}
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop

080091f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091fa:	6879      	ldr	r1, [r7, #4]
 80091fc:	4807      	ldr	r0, [pc, #28]	; (800921c <CDC_Receive_FS+0x2c>)
 80091fe:	f7fe fe76 	bl	8007eee <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009202:	4806      	ldr	r0, [pc, #24]	; (800921c <CDC_Receive_FS+0x2c>)
 8009204:	f7fe fe86 	bl	8007f14 <USBD_CDC_ReceivePacket>

	usb_rx_handler(Buf, Len);
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7f8 f84c 	bl	80012a8 <usb_rx_handler>

	return (USBD_OK);
 8009210:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	200009e8 	.word	0x200009e8

08009220 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	4603      	mov	r3, r0
 8009228:	6039      	str	r1, [r7, #0]
 800922a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	2212      	movs	r2, #18
 8009230:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009232:	4b03      	ldr	r3, [pc, #12]	; (8009240 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009234:	4618      	mov	r0, r3
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	bc80      	pop	{r7}
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	20000158 	.word	0x20000158

08009244 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	6039      	str	r1, [r7, #0]
 800924e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2204      	movs	r2, #4
 8009254:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009256:	4b03      	ldr	r3, [pc, #12]	; (8009264 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009258:	4618      	mov	r0, r3
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	bc80      	pop	{r7}
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	2000016c 	.word	0x2000016c

08009268 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d105      	bne.n	8009286 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	4907      	ldr	r1, [pc, #28]	; (800929c <USBD_FS_ProductStrDescriptor+0x34>)
 800927e:	4808      	ldr	r0, [pc, #32]	; (80092a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009280:	f7ff fe2e 	bl	8008ee0 <USBD_GetString>
 8009284:	e004      	b.n	8009290 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	4904      	ldr	r1, [pc, #16]	; (800929c <USBD_FS_ProductStrDescriptor+0x34>)
 800928a:	4805      	ldr	r0, [pc, #20]	; (80092a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800928c:	f7ff fe28 	bl	8008ee0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009290:	4b02      	ldr	r3, [pc, #8]	; (800929c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	200010ac 	.word	0x200010ac
 80092a0:	0800acb4 	.word	0x0800acb4

080092a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4603      	mov	r3, r0
 80092ac:	6039      	str	r1, [r7, #0]
 80092ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	4904      	ldr	r1, [pc, #16]	; (80092c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092b4:	4804      	ldr	r0, [pc, #16]	; (80092c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092b6:	f7ff fe13 	bl	8008ee0 <USBD_GetString>
  return USBD_StrDesc;
 80092ba:	4b02      	ldr	r3, [pc, #8]	; (80092c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	200010ac 	.word	0x200010ac
 80092c8:	0800accc 	.word	0x0800accc

080092cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	4603      	mov	r3, r0
 80092d4:	6039      	str	r1, [r7, #0]
 80092d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	221a      	movs	r2, #26
 80092dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092de:	f000 f843 	bl	8009368 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092e2:	4b02      	ldr	r3, [pc, #8]	; (80092ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	20000170 	.word	0x20000170

080092f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	6039      	str	r1, [r7, #0]
 80092fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092fc:	79fb      	ldrb	r3, [r7, #7]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d105      	bne.n	800930e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	4907      	ldr	r1, [pc, #28]	; (8009324 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009306:	4808      	ldr	r0, [pc, #32]	; (8009328 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009308:	f7ff fdea 	bl	8008ee0 <USBD_GetString>
 800930c:	e004      	b.n	8009318 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	4904      	ldr	r1, [pc, #16]	; (8009324 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009312:	4805      	ldr	r0, [pc, #20]	; (8009328 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009314:	f7ff fde4 	bl	8008ee0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009318:	4b02      	ldr	r3, [pc, #8]	; (8009324 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	200010ac 	.word	0x200010ac
 8009328:	0800ace0 	.word	0x0800ace0

0800932c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	4603      	mov	r3, r0
 8009334:	6039      	str	r1, [r7, #0]
 8009336:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009338:	79fb      	ldrb	r3, [r7, #7]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d105      	bne.n	800934a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	4907      	ldr	r1, [pc, #28]	; (8009360 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009342:	4808      	ldr	r0, [pc, #32]	; (8009364 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009344:	f7ff fdcc 	bl	8008ee0 <USBD_GetString>
 8009348:	e004      	b.n	8009354 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	4904      	ldr	r1, [pc, #16]	; (8009360 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800934e:	4805      	ldr	r0, [pc, #20]	; (8009364 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009350:	f7ff fdc6 	bl	8008ee0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009354:	4b02      	ldr	r3, [pc, #8]	; (8009360 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009356:	4618      	mov	r0, r3
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	200010ac 	.word	0x200010ac
 8009364:	0800acec 	.word	0x0800acec

08009368 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800936e:	4b0f      	ldr	r3, [pc, #60]	; (80093ac <Get_SerialNum+0x44>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009374:	4b0e      	ldr	r3, [pc, #56]	; (80093b0 <Get_SerialNum+0x48>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800937a:	4b0e      	ldr	r3, [pc, #56]	; (80093b4 <Get_SerialNum+0x4c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4413      	add	r3, r2
 8009386:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d009      	beq.n	80093a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800938e:	2208      	movs	r2, #8
 8009390:	4909      	ldr	r1, [pc, #36]	; (80093b8 <Get_SerialNum+0x50>)
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 f814 	bl	80093c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009398:	2204      	movs	r2, #4
 800939a:	4908      	ldr	r1, [pc, #32]	; (80093bc <Get_SerialNum+0x54>)
 800939c:	68b8      	ldr	r0, [r7, #8]
 800939e:	f000 f80f 	bl	80093c0 <IntToUnicode>
  }
}
 80093a2:	bf00      	nop
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	1ffff7e8 	.word	0x1ffff7e8
 80093b0:	1ffff7ec 	.word	0x1ffff7ec
 80093b4:	1ffff7f0 	.word	0x1ffff7f0
 80093b8:	20000172 	.word	0x20000172
 80093bc:	20000182 	.word	0x20000182

080093c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	4613      	mov	r3, r2
 80093cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093d2:	2300      	movs	r3, #0
 80093d4:	75fb      	strb	r3, [r7, #23]
 80093d6:	e027      	b.n	8009428 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	0f1b      	lsrs	r3, r3, #28
 80093dc:	2b09      	cmp	r3, #9
 80093de:	d80b      	bhi.n	80093f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	0f1b      	lsrs	r3, r3, #28
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	4619      	mov	r1, r3
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	440b      	add	r3, r1
 80093f0:	3230      	adds	r2, #48	; 0x30
 80093f2:	b2d2      	uxtb	r2, r2
 80093f4:	701a      	strb	r2, [r3, #0]
 80093f6:	e00a      	b.n	800940e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	0f1b      	lsrs	r3, r3, #28
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	005b      	lsls	r3, r3, #1
 8009402:	4619      	mov	r1, r3
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	440b      	add	r3, r1
 8009408:	3237      	adds	r2, #55	; 0x37
 800940a:	b2d2      	uxtb	r2, r2
 800940c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	011b      	lsls	r3, r3, #4
 8009412:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009414:	7dfb      	ldrb	r3, [r7, #23]
 8009416:	005b      	lsls	r3, r3, #1
 8009418:	3301      	adds	r3, #1
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	4413      	add	r3, r2
 800941e:	2200      	movs	r2, #0
 8009420:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	3301      	adds	r3, #1
 8009426:	75fb      	strb	r3, [r7, #23]
 8009428:	7dfa      	ldrb	r2, [r7, #23]
 800942a:	79fb      	ldrb	r3, [r7, #7]
 800942c:	429a      	cmp	r2, r3
 800942e:	d3d3      	bcc.n	80093d8 <IntToUnicode+0x18>
  }
}
 8009430:	bf00      	nop
 8009432:	bf00      	nop
 8009434:	371c      	adds	r7, #28
 8009436:	46bd      	mov	sp, r7
 8009438:	bc80      	pop	{r7}
 800943a:	4770      	bx	lr

0800943c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a0d      	ldr	r2, [pc, #52]	; (8009480 <HAL_PCD_MspInit+0x44>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d113      	bne.n	8009476 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800944e:	4b0d      	ldr	r3, [pc, #52]	; (8009484 <HAL_PCD_MspInit+0x48>)
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	4a0c      	ldr	r2, [pc, #48]	; (8009484 <HAL_PCD_MspInit+0x48>)
 8009454:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009458:	61d3      	str	r3, [r2, #28]
 800945a:	4b0a      	ldr	r3, [pc, #40]	; (8009484 <HAL_PCD_MspInit+0x48>)
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009466:	2200      	movs	r2, #0
 8009468:	2100      	movs	r1, #0
 800946a:	2014      	movs	r0, #20
 800946c:	f7f8 fd15 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009470:	2014      	movs	r0, #20
 8009472:	f7f8 fd2e 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009476:	bf00      	nop
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	40005c00 	.word	0x40005c00
 8009484:	40021000 	.word	0x40021000

08009488 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800949c:	4619      	mov	r1, r3
 800949e:	4610      	mov	r0, r2
 80094a0:	f7fe fdee 	bl	8008080 <USBD_LL_SetupStage>
}
 80094a4:	bf00      	nop
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	460b      	mov	r3, r1
 80094b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80094be:	78fa      	ldrb	r2, [r7, #3]
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	00db      	lsls	r3, r3, #3
 80094ca:	440b      	add	r3, r1
 80094cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	78fb      	ldrb	r3, [r7, #3]
 80094d4:	4619      	mov	r1, r3
 80094d6:	f7fe fe20 	bl	800811a <USBD_LL_DataOutStage>
}
 80094da:	bf00      	nop
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	460b      	mov	r3, r1
 80094ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80094f4:	78fa      	ldrb	r2, [r7, #3]
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	4613      	mov	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	440b      	add	r3, r1
 8009502:	333c      	adds	r3, #60	; 0x3c
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	78fb      	ldrb	r3, [r7, #3]
 8009508:	4619      	mov	r1, r3
 800950a:	f7fe fe77 	bl	80081fc <USBD_LL_DataInStage>
}
 800950e:	bf00      	nop
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009524:	4618      	mov	r0, r3
 8009526:	f7fe ff87 	bl	8008438 <USBD_LL_SOF>
}
 800952a:	bf00      	nop
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800953a:	2301      	movs	r3, #1
 800953c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	2b02      	cmp	r3, #2
 8009544:	d001      	beq.n	800954a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009546:	f7f7 fc37 	bl	8000db8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009550:	7bfa      	ldrb	r2, [r7, #15]
 8009552:	4611      	mov	r1, r2
 8009554:	4618      	mov	r0, r3
 8009556:	f7fe ff37 	bl	80083c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009560:	4618      	mov	r0, r3
 8009562:	f7fe fef0 	bl	8008346 <USBD_LL_Reset>
}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe ff31 	bl	80083e6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d005      	beq.n	8009598 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800958c:	4b04      	ldr	r3, [pc, #16]	; (80095a0 <HAL_PCD_SuspendCallback+0x30>)
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	4a03      	ldr	r2, [pc, #12]	; (80095a0 <HAL_PCD_SuspendCallback+0x30>)
 8009592:	f043 0306 	orr.w	r3, r3, #6
 8009596:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009598:	bf00      	nop
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	e000ed00 	.word	0xe000ed00

080095a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe ff2b 	bl	800840e <USBD_LL_Resume>
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80095c8:	4a28      	ldr	r2, [pc, #160]	; (800966c <USBD_LL_Init+0xac>)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a26      	ldr	r2, [pc, #152]	; (800966c <USBD_LL_Init+0xac>)
 80095d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80095d8:	4b24      	ldr	r3, [pc, #144]	; (800966c <USBD_LL_Init+0xac>)
 80095da:	4a25      	ldr	r2, [pc, #148]	; (8009670 <USBD_LL_Init+0xb0>)
 80095dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80095de:	4b23      	ldr	r3, [pc, #140]	; (800966c <USBD_LL_Init+0xac>)
 80095e0:	2208      	movs	r2, #8
 80095e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80095e4:	4b21      	ldr	r3, [pc, #132]	; (800966c <USBD_LL_Init+0xac>)
 80095e6:	2202      	movs	r2, #2
 80095e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80095ea:	4b20      	ldr	r3, [pc, #128]	; (800966c <USBD_LL_Init+0xac>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80095f0:	4b1e      	ldr	r3, [pc, #120]	; (800966c <USBD_LL_Init+0xac>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80095f6:	4b1d      	ldr	r3, [pc, #116]	; (800966c <USBD_LL_Init+0xac>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80095fc:	481b      	ldr	r0, [pc, #108]	; (800966c <USBD_LL_Init+0xac>)
 80095fe:	f7f9 f884 	bl	800270a <HAL_PCD_Init>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009608:	f7f7 fbd6 	bl	8000db8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009612:	2318      	movs	r3, #24
 8009614:	2200      	movs	r2, #0
 8009616:	2100      	movs	r1, #0
 8009618:	f7fa fbc6 	bl	8003da8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009622:	2358      	movs	r3, #88	; 0x58
 8009624:	2200      	movs	r2, #0
 8009626:	2180      	movs	r1, #128	; 0x80
 8009628:	f7fa fbbe 	bl	8003da8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009632:	23c0      	movs	r3, #192	; 0xc0
 8009634:	2200      	movs	r2, #0
 8009636:	2181      	movs	r1, #129	; 0x81
 8009638:	f7fa fbb6 	bl	8003da8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009642:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009646:	2200      	movs	r2, #0
 8009648:	2101      	movs	r1, #1
 800964a:	f7fa fbad 	bl	8003da8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009658:	2200      	movs	r2, #0
 800965a:	2182      	movs	r1, #130	; 0x82
 800965c:	f7fa fba4 	bl	8003da8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	200012ac 	.word	0x200012ac
 8009670:	40005c00 	.word	0x40005c00

08009674 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009680:	2300      	movs	r3, #0
 8009682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800968a:	4618      	mov	r0, r3
 800968c:	f7f9 f948 	bl	8002920 <HAL_PCD_Start>
 8009690:	4603      	mov	r3, r0
 8009692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009694:	7bfb      	ldrb	r3, [r7, #15]
 8009696:	4618      	mov	r0, r3
 8009698:	f000 f94e 	bl	8009938 <USBD_Get_USB_Status>
 800969c:	4603      	mov	r3, r0
 800969e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	4608      	mov	r0, r1
 80096b4:	4611      	mov	r1, r2
 80096b6:	461a      	mov	r2, r3
 80096b8:	4603      	mov	r3, r0
 80096ba:	70fb      	strb	r3, [r7, #3]
 80096bc:	460b      	mov	r3, r1
 80096be:	70bb      	strb	r3, [r7, #2]
 80096c0:	4613      	mov	r3, r2
 80096c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096d2:	78bb      	ldrb	r3, [r7, #2]
 80096d4:	883a      	ldrh	r2, [r7, #0]
 80096d6:	78f9      	ldrb	r1, [r7, #3]
 80096d8:	f7f9 fac2 	bl	8002c60 <HAL_PCD_EP_Open>
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 f928 	bl	8009938 <USBD_Get_USB_Status>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	460b      	mov	r3, r1
 8009700:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009710:	78fa      	ldrb	r2, [r7, #3]
 8009712:	4611      	mov	r1, r2
 8009714:	4618      	mov	r0, r3
 8009716:	f7f9 fb09 	bl	8002d2c <HAL_PCD_EP_Close>
 800971a:	4603      	mov	r3, r0
 800971c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	4618      	mov	r0, r3
 8009722:	f000 f909 	bl	8009938 <USBD_Get_USB_Status>
 8009726:	4603      	mov	r3, r0
 8009728:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800972a:	7bbb      	ldrb	r3, [r7, #14]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800974e:	78fa      	ldrb	r2, [r7, #3]
 8009750:	4611      	mov	r1, r2
 8009752:	4618      	mov	r0, r3
 8009754:	f7f9 fbc9 	bl	8002eea <HAL_PCD_EP_SetStall>
 8009758:	4603      	mov	r3, r0
 800975a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 f8ea 	bl	8009938 <USBD_Get_USB_Status>
 8009764:	4603      	mov	r3, r0
 8009766:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009768:	7bbb      	ldrb	r3, [r7, #14]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b084      	sub	sp, #16
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	460b      	mov	r3, r1
 800977c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800978c:	78fa      	ldrb	r2, [r7, #3]
 800978e:	4611      	mov	r1, r2
 8009790:	4618      	mov	r0, r3
 8009792:	f7f9 fc0a 	bl	8002faa <HAL_PCD_EP_ClrStall>
 8009796:	4603      	mov	r3, r0
 8009798:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	4618      	mov	r0, r3
 800979e:	f000 f8cb 	bl	8009938 <USBD_Get_USB_Status>
 80097a2:	4603      	mov	r3, r0
 80097a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	da0c      	bge.n	80097e6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097d2:	68f9      	ldr	r1, [r7, #12]
 80097d4:	1c5a      	adds	r2, r3, #1
 80097d6:	4613      	mov	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	00db      	lsls	r3, r3, #3
 80097de:	440b      	add	r3, r1
 80097e0:	3302      	adds	r3, #2
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	e00b      	b.n	80097fe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097e6:	78fb      	ldrb	r3, [r7, #3]
 80097e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ec:	68f9      	ldr	r1, [r7, #12]
 80097ee:	4613      	mov	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	00db      	lsls	r3, r3, #3
 80097f6:	440b      	add	r3, r1
 80097f8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80097fc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	bc80      	pop	{r7}
 8009806:	4770      	bx	lr

08009808 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009822:	78fa      	ldrb	r2, [r7, #3]
 8009824:	4611      	mov	r1, r2
 8009826:	4618      	mov	r0, r3
 8009828:	f7f9 f9f5 	bl	8002c16 <HAL_PCD_SetAddress>
 800982c:	4603      	mov	r3, r0
 800982e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	4618      	mov	r0, r3
 8009834:	f000 f880 	bl	8009938 <USBD_Get_USB_Status>
 8009838:	4603      	mov	r3, r0
 800983a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800983c:	7bbb      	ldrb	r3, [r7, #14]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b086      	sub	sp, #24
 800984a:	af00      	add	r7, sp, #0
 800984c:	60f8      	str	r0, [r7, #12]
 800984e:	607a      	str	r2, [r7, #4]
 8009850:	461a      	mov	r2, r3
 8009852:	460b      	mov	r3, r1
 8009854:	72fb      	strb	r3, [r7, #11]
 8009856:	4613      	mov	r3, r2
 8009858:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009868:	893b      	ldrh	r3, [r7, #8]
 800986a:	7af9      	ldrb	r1, [r7, #11]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	f7f9 faf9 	bl	8002e64 <HAL_PCD_EP_Transmit>
 8009872:	4603      	mov	r3, r0
 8009874:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009876:	7dfb      	ldrb	r3, [r7, #23]
 8009878:	4618      	mov	r0, r3
 800987a:	f000 f85d 	bl	8009938 <USBD_Get_USB_Status>
 800987e:	4603      	mov	r3, r0
 8009880:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009882:	7dbb      	ldrb	r3, [r7, #22]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	607a      	str	r2, [r7, #4]
 8009896:	461a      	mov	r2, r3
 8009898:	460b      	mov	r3, r1
 800989a:	72fb      	strb	r3, [r7, #11]
 800989c:	4613      	mov	r3, r2
 800989e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098ae:	893b      	ldrh	r3, [r7, #8]
 80098b0:	7af9      	ldrb	r1, [r7, #11]
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	f7f9 fa82 	bl	8002dbc <HAL_PCD_EP_Receive>
 80098b8:	4603      	mov	r3, r0
 80098ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098bc:	7dfb      	ldrb	r3, [r7, #23]
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 f83a 	bl	8009938 <USBD_Get_USB_Status>
 80098c4:	4603      	mov	r3, r0
 80098c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b082      	sub	sp, #8
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	460b      	mov	r3, r1
 80098dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098e4:	78fa      	ldrb	r2, [r7, #3]
 80098e6:	4611      	mov	r1, r2
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7f9 faa4 	bl	8002e36 <HAL_PCD_EP_GetRxCount>
 80098ee:	4603      	mov	r3, r0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009900:	4b02      	ldr	r3, [pc, #8]	; (800990c <USBD_static_malloc+0x14>)
}
 8009902:	4618      	mov	r0, r3
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	bc80      	pop	{r7}
 800990a:	4770      	bx	lr
 800990c:	2000027c 	.word	0x2000027c

08009910 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]

}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	bc80      	pop	{r7}
 8009920:	4770      	bx	lr

08009922 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009922:	b480      	push	{r7}
 8009924:	b083      	sub	sp, #12
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
 800992a:	460b      	mov	r3, r1
 800992c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800992e:	bf00      	nop
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	bc80      	pop	{r7}
 8009936:	4770      	bx	lr

08009938 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009942:	2300      	movs	r3, #0
 8009944:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009946:	79fb      	ldrb	r3, [r7, #7]
 8009948:	2b03      	cmp	r3, #3
 800994a:	d817      	bhi.n	800997c <USBD_Get_USB_Status+0x44>
 800994c:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <USBD_Get_USB_Status+0x1c>)
 800994e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009952:	bf00      	nop
 8009954:	08009965 	.word	0x08009965
 8009958:	0800996b 	.word	0x0800996b
 800995c:	08009971 	.word	0x08009971
 8009960:	08009977 	.word	0x08009977
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009964:	2300      	movs	r3, #0
 8009966:	73fb      	strb	r3, [r7, #15]
    break;
 8009968:	e00b      	b.n	8009982 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800996a:	2302      	movs	r3, #2
 800996c:	73fb      	strb	r3, [r7, #15]
    break;
 800996e:	e008      	b.n	8009982 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009970:	2301      	movs	r3, #1
 8009972:	73fb      	strb	r3, [r7, #15]
    break;
 8009974:	e005      	b.n	8009982 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009976:	2302      	movs	r3, #2
 8009978:	73fb      	strb	r3, [r7, #15]
    break;
 800997a:	e002      	b.n	8009982 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800997c:	2302      	movs	r3, #2
 800997e:	73fb      	strb	r3, [r7, #15]
    break;
 8009980:	bf00      	nop
  }
  return usb_status;
 8009982:	7bfb      	ldrb	r3, [r7, #15]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	bc80      	pop	{r7}
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop

08009990 <__errno>:
 8009990:	4b01      	ldr	r3, [pc, #4]	; (8009998 <__errno+0x8>)
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	2000018c 	.word	0x2000018c

0800999c <__libc_init_array>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	2600      	movs	r6, #0
 80099a0:	4d0c      	ldr	r5, [pc, #48]	; (80099d4 <__libc_init_array+0x38>)
 80099a2:	4c0d      	ldr	r4, [pc, #52]	; (80099d8 <__libc_init_array+0x3c>)
 80099a4:	1b64      	subs	r4, r4, r5
 80099a6:	10a4      	asrs	r4, r4, #2
 80099a8:	42a6      	cmp	r6, r4
 80099aa:	d109      	bne.n	80099c0 <__libc_init_array+0x24>
 80099ac:	f001 f954 	bl	800ac58 <_init>
 80099b0:	2600      	movs	r6, #0
 80099b2:	4d0a      	ldr	r5, [pc, #40]	; (80099dc <__libc_init_array+0x40>)
 80099b4:	4c0a      	ldr	r4, [pc, #40]	; (80099e0 <__libc_init_array+0x44>)
 80099b6:	1b64      	subs	r4, r4, r5
 80099b8:	10a4      	asrs	r4, r4, #2
 80099ba:	42a6      	cmp	r6, r4
 80099bc:	d105      	bne.n	80099ca <__libc_init_array+0x2e>
 80099be:	bd70      	pop	{r4, r5, r6, pc}
 80099c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c4:	4798      	blx	r3
 80099c6:	3601      	adds	r6, #1
 80099c8:	e7ee      	b.n	80099a8 <__libc_init_array+0xc>
 80099ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ce:	4798      	blx	r3
 80099d0:	3601      	adds	r6, #1
 80099d2:	e7f2      	b.n	80099ba <__libc_init_array+0x1e>
 80099d4:	0800adac 	.word	0x0800adac
 80099d8:	0800adac 	.word	0x0800adac
 80099dc:	0800adac 	.word	0x0800adac
 80099e0:	0800adb0 	.word	0x0800adb0

080099e4 <memset>:
 80099e4:	4603      	mov	r3, r0
 80099e6:	4402      	add	r2, r0
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d100      	bne.n	80099ee <memset+0xa>
 80099ec:	4770      	bx	lr
 80099ee:	f803 1b01 	strb.w	r1, [r3], #1
 80099f2:	e7f9      	b.n	80099e8 <memset+0x4>

080099f4 <iprintf>:
 80099f4:	b40f      	push	{r0, r1, r2, r3}
 80099f6:	4b0a      	ldr	r3, [pc, #40]	; (8009a20 <iprintf+0x2c>)
 80099f8:	b513      	push	{r0, r1, r4, lr}
 80099fa:	681c      	ldr	r4, [r3, #0]
 80099fc:	b124      	cbz	r4, 8009a08 <iprintf+0x14>
 80099fe:	69a3      	ldr	r3, [r4, #24]
 8009a00:	b913      	cbnz	r3, 8009a08 <iprintf+0x14>
 8009a02:	4620      	mov	r0, r4
 8009a04:	f000 f886 	bl	8009b14 <__sinit>
 8009a08:	ab05      	add	r3, sp, #20
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	9a04      	ldr	r2, [sp, #16]
 8009a0e:	68a1      	ldr	r1, [r4, #8]
 8009a10:	9301      	str	r3, [sp, #4]
 8009a12:	f000 fafd 	bl	800a010 <_vfiprintf_r>
 8009a16:	b002      	add	sp, #8
 8009a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a1c:	b004      	add	sp, #16
 8009a1e:	4770      	bx	lr
 8009a20:	2000018c 	.word	0x2000018c

08009a24 <siprintf>:
 8009a24:	b40e      	push	{r1, r2, r3}
 8009a26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a2a:	b500      	push	{lr}
 8009a2c:	b09c      	sub	sp, #112	; 0x70
 8009a2e:	ab1d      	add	r3, sp, #116	; 0x74
 8009a30:	9002      	str	r0, [sp, #8]
 8009a32:	9006      	str	r0, [sp, #24]
 8009a34:	9107      	str	r1, [sp, #28]
 8009a36:	9104      	str	r1, [sp, #16]
 8009a38:	4808      	ldr	r0, [pc, #32]	; (8009a5c <siprintf+0x38>)
 8009a3a:	4909      	ldr	r1, [pc, #36]	; (8009a60 <siprintf+0x3c>)
 8009a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a40:	9105      	str	r1, [sp, #20]
 8009a42:	6800      	ldr	r0, [r0, #0]
 8009a44:	a902      	add	r1, sp, #8
 8009a46:	9301      	str	r3, [sp, #4]
 8009a48:	f000 f9ba 	bl	8009dc0 <_svfiprintf_r>
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	9b02      	ldr	r3, [sp, #8]
 8009a50:	701a      	strb	r2, [r3, #0]
 8009a52:	b01c      	add	sp, #112	; 0x70
 8009a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a58:	b003      	add	sp, #12
 8009a5a:	4770      	bx	lr
 8009a5c:	2000018c 	.word	0x2000018c
 8009a60:	ffff0208 	.word	0xffff0208

08009a64 <std>:
 8009a64:	2300      	movs	r3, #0
 8009a66:	b510      	push	{r4, lr}
 8009a68:	4604      	mov	r4, r0
 8009a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8009a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a72:	6083      	str	r3, [r0, #8]
 8009a74:	8181      	strh	r1, [r0, #12]
 8009a76:	6643      	str	r3, [r0, #100]	; 0x64
 8009a78:	81c2      	strh	r2, [r0, #14]
 8009a7a:	6183      	str	r3, [r0, #24]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	2208      	movs	r2, #8
 8009a80:	305c      	adds	r0, #92	; 0x5c
 8009a82:	f7ff ffaf 	bl	80099e4 <memset>
 8009a86:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <std+0x38>)
 8009a88:	6224      	str	r4, [r4, #32]
 8009a8a:	6263      	str	r3, [r4, #36]	; 0x24
 8009a8c:	4b04      	ldr	r3, [pc, #16]	; (8009aa0 <std+0x3c>)
 8009a8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a90:	4b04      	ldr	r3, [pc, #16]	; (8009aa4 <std+0x40>)
 8009a92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a94:	4b04      	ldr	r3, [pc, #16]	; (8009aa8 <std+0x44>)
 8009a96:	6323      	str	r3, [r4, #48]	; 0x30
 8009a98:	bd10      	pop	{r4, pc}
 8009a9a:	bf00      	nop
 8009a9c:	0800a5bd 	.word	0x0800a5bd
 8009aa0:	0800a5df 	.word	0x0800a5df
 8009aa4:	0800a617 	.word	0x0800a617
 8009aa8:	0800a63b 	.word	0x0800a63b

08009aac <_cleanup_r>:
 8009aac:	4901      	ldr	r1, [pc, #4]	; (8009ab4 <_cleanup_r+0x8>)
 8009aae:	f000 b8af 	b.w	8009c10 <_fwalk_reent>
 8009ab2:	bf00      	nop
 8009ab4:	0800a915 	.word	0x0800a915

08009ab8 <__sfmoreglue>:
 8009ab8:	b570      	push	{r4, r5, r6, lr}
 8009aba:	2568      	movs	r5, #104	; 0x68
 8009abc:	1e4a      	subs	r2, r1, #1
 8009abe:	4355      	muls	r5, r2
 8009ac0:	460e      	mov	r6, r1
 8009ac2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ac6:	f000 f8c5 	bl	8009c54 <_malloc_r>
 8009aca:	4604      	mov	r4, r0
 8009acc:	b140      	cbz	r0, 8009ae0 <__sfmoreglue+0x28>
 8009ace:	2100      	movs	r1, #0
 8009ad0:	e9c0 1600 	strd	r1, r6, [r0]
 8009ad4:	300c      	adds	r0, #12
 8009ad6:	60a0      	str	r0, [r4, #8]
 8009ad8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009adc:	f7ff ff82 	bl	80099e4 <memset>
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}

08009ae4 <__sfp_lock_acquire>:
 8009ae4:	4801      	ldr	r0, [pc, #4]	; (8009aec <__sfp_lock_acquire+0x8>)
 8009ae6:	f000 b8b3 	b.w	8009c50 <__retarget_lock_acquire_recursive>
 8009aea:	bf00      	nop
 8009aec:	200015a0 	.word	0x200015a0

08009af0 <__sfp_lock_release>:
 8009af0:	4801      	ldr	r0, [pc, #4]	; (8009af8 <__sfp_lock_release+0x8>)
 8009af2:	f000 b8ae 	b.w	8009c52 <__retarget_lock_release_recursive>
 8009af6:	bf00      	nop
 8009af8:	200015a0 	.word	0x200015a0

08009afc <__sinit_lock_acquire>:
 8009afc:	4801      	ldr	r0, [pc, #4]	; (8009b04 <__sinit_lock_acquire+0x8>)
 8009afe:	f000 b8a7 	b.w	8009c50 <__retarget_lock_acquire_recursive>
 8009b02:	bf00      	nop
 8009b04:	2000159b 	.word	0x2000159b

08009b08 <__sinit_lock_release>:
 8009b08:	4801      	ldr	r0, [pc, #4]	; (8009b10 <__sinit_lock_release+0x8>)
 8009b0a:	f000 b8a2 	b.w	8009c52 <__retarget_lock_release_recursive>
 8009b0e:	bf00      	nop
 8009b10:	2000159b 	.word	0x2000159b

08009b14 <__sinit>:
 8009b14:	b510      	push	{r4, lr}
 8009b16:	4604      	mov	r4, r0
 8009b18:	f7ff fff0 	bl	8009afc <__sinit_lock_acquire>
 8009b1c:	69a3      	ldr	r3, [r4, #24]
 8009b1e:	b11b      	cbz	r3, 8009b28 <__sinit+0x14>
 8009b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b24:	f7ff bff0 	b.w	8009b08 <__sinit_lock_release>
 8009b28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b2c:	6523      	str	r3, [r4, #80]	; 0x50
 8009b2e:	4b13      	ldr	r3, [pc, #76]	; (8009b7c <__sinit+0x68>)
 8009b30:	4a13      	ldr	r2, [pc, #76]	; (8009b80 <__sinit+0x6c>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b36:	42a3      	cmp	r3, r4
 8009b38:	bf08      	it	eq
 8009b3a:	2301      	moveq	r3, #1
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	bf08      	it	eq
 8009b40:	61a3      	streq	r3, [r4, #24]
 8009b42:	f000 f81f 	bl	8009b84 <__sfp>
 8009b46:	6060      	str	r0, [r4, #4]
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f000 f81b 	bl	8009b84 <__sfp>
 8009b4e:	60a0      	str	r0, [r4, #8]
 8009b50:	4620      	mov	r0, r4
 8009b52:	f000 f817 	bl	8009b84 <__sfp>
 8009b56:	2200      	movs	r2, #0
 8009b58:	2104      	movs	r1, #4
 8009b5a:	60e0      	str	r0, [r4, #12]
 8009b5c:	6860      	ldr	r0, [r4, #4]
 8009b5e:	f7ff ff81 	bl	8009a64 <std>
 8009b62:	2201      	movs	r2, #1
 8009b64:	2109      	movs	r1, #9
 8009b66:	68a0      	ldr	r0, [r4, #8]
 8009b68:	f7ff ff7c 	bl	8009a64 <std>
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	2112      	movs	r1, #18
 8009b70:	68e0      	ldr	r0, [r4, #12]
 8009b72:	f7ff ff77 	bl	8009a64 <std>
 8009b76:	2301      	movs	r3, #1
 8009b78:	61a3      	str	r3, [r4, #24]
 8009b7a:	e7d1      	b.n	8009b20 <__sinit+0xc>
 8009b7c:	0800ad14 	.word	0x0800ad14
 8009b80:	08009aad 	.word	0x08009aad

08009b84 <__sfp>:
 8009b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b86:	4607      	mov	r7, r0
 8009b88:	f7ff ffac 	bl	8009ae4 <__sfp_lock_acquire>
 8009b8c:	4b1e      	ldr	r3, [pc, #120]	; (8009c08 <__sfp+0x84>)
 8009b8e:	681e      	ldr	r6, [r3, #0]
 8009b90:	69b3      	ldr	r3, [r6, #24]
 8009b92:	b913      	cbnz	r3, 8009b9a <__sfp+0x16>
 8009b94:	4630      	mov	r0, r6
 8009b96:	f7ff ffbd 	bl	8009b14 <__sinit>
 8009b9a:	3648      	adds	r6, #72	; 0x48
 8009b9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	d503      	bpl.n	8009bac <__sfp+0x28>
 8009ba4:	6833      	ldr	r3, [r6, #0]
 8009ba6:	b30b      	cbz	r3, 8009bec <__sfp+0x68>
 8009ba8:	6836      	ldr	r6, [r6, #0]
 8009baa:	e7f7      	b.n	8009b9c <__sfp+0x18>
 8009bac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009bb0:	b9d5      	cbnz	r5, 8009be8 <__sfp+0x64>
 8009bb2:	4b16      	ldr	r3, [pc, #88]	; (8009c0c <__sfp+0x88>)
 8009bb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bb8:	60e3      	str	r3, [r4, #12]
 8009bba:	6665      	str	r5, [r4, #100]	; 0x64
 8009bbc:	f000 f847 	bl	8009c4e <__retarget_lock_init_recursive>
 8009bc0:	f7ff ff96 	bl	8009af0 <__sfp_lock_release>
 8009bc4:	2208      	movs	r2, #8
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009bcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009bd0:	6025      	str	r5, [r4, #0]
 8009bd2:	61a5      	str	r5, [r4, #24]
 8009bd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009bd8:	f7ff ff04 	bl	80099e4 <memset>
 8009bdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009be0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009be4:	4620      	mov	r0, r4
 8009be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be8:	3468      	adds	r4, #104	; 0x68
 8009bea:	e7d9      	b.n	8009ba0 <__sfp+0x1c>
 8009bec:	2104      	movs	r1, #4
 8009bee:	4638      	mov	r0, r7
 8009bf0:	f7ff ff62 	bl	8009ab8 <__sfmoreglue>
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	6030      	str	r0, [r6, #0]
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d1d5      	bne.n	8009ba8 <__sfp+0x24>
 8009bfc:	f7ff ff78 	bl	8009af0 <__sfp_lock_release>
 8009c00:	230c      	movs	r3, #12
 8009c02:	603b      	str	r3, [r7, #0]
 8009c04:	e7ee      	b.n	8009be4 <__sfp+0x60>
 8009c06:	bf00      	nop
 8009c08:	0800ad14 	.word	0x0800ad14
 8009c0c:	ffff0001 	.word	0xffff0001

08009c10 <_fwalk_reent>:
 8009c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c14:	4606      	mov	r6, r0
 8009c16:	4688      	mov	r8, r1
 8009c18:	2700      	movs	r7, #0
 8009c1a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c22:	f1b9 0901 	subs.w	r9, r9, #1
 8009c26:	d505      	bpl.n	8009c34 <_fwalk_reent+0x24>
 8009c28:	6824      	ldr	r4, [r4, #0]
 8009c2a:	2c00      	cmp	r4, #0
 8009c2c:	d1f7      	bne.n	8009c1e <_fwalk_reent+0xe>
 8009c2e:	4638      	mov	r0, r7
 8009c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c34:	89ab      	ldrh	r3, [r5, #12]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d907      	bls.n	8009c4a <_fwalk_reent+0x3a>
 8009c3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	d003      	beq.n	8009c4a <_fwalk_reent+0x3a>
 8009c42:	4629      	mov	r1, r5
 8009c44:	4630      	mov	r0, r6
 8009c46:	47c0      	blx	r8
 8009c48:	4307      	orrs	r7, r0
 8009c4a:	3568      	adds	r5, #104	; 0x68
 8009c4c:	e7e9      	b.n	8009c22 <_fwalk_reent+0x12>

08009c4e <__retarget_lock_init_recursive>:
 8009c4e:	4770      	bx	lr

08009c50 <__retarget_lock_acquire_recursive>:
 8009c50:	4770      	bx	lr

08009c52 <__retarget_lock_release_recursive>:
 8009c52:	4770      	bx	lr

08009c54 <_malloc_r>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	1ccd      	adds	r5, r1, #3
 8009c58:	f025 0503 	bic.w	r5, r5, #3
 8009c5c:	3508      	adds	r5, #8
 8009c5e:	2d0c      	cmp	r5, #12
 8009c60:	bf38      	it	cc
 8009c62:	250c      	movcc	r5, #12
 8009c64:	2d00      	cmp	r5, #0
 8009c66:	4606      	mov	r6, r0
 8009c68:	db01      	blt.n	8009c6e <_malloc_r+0x1a>
 8009c6a:	42a9      	cmp	r1, r5
 8009c6c:	d903      	bls.n	8009c76 <_malloc_r+0x22>
 8009c6e:	230c      	movs	r3, #12
 8009c70:	6033      	str	r3, [r6, #0]
 8009c72:	2000      	movs	r0, #0
 8009c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c76:	f000 ff35 	bl	800aae4 <__malloc_lock>
 8009c7a:	4921      	ldr	r1, [pc, #132]	; (8009d00 <_malloc_r+0xac>)
 8009c7c:	680a      	ldr	r2, [r1, #0]
 8009c7e:	4614      	mov	r4, r2
 8009c80:	b99c      	cbnz	r4, 8009caa <_malloc_r+0x56>
 8009c82:	4f20      	ldr	r7, [pc, #128]	; (8009d04 <_malloc_r+0xb0>)
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	b923      	cbnz	r3, 8009c92 <_malloc_r+0x3e>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f000 fc86 	bl	800a59c <_sbrk_r>
 8009c90:	6038      	str	r0, [r7, #0]
 8009c92:	4629      	mov	r1, r5
 8009c94:	4630      	mov	r0, r6
 8009c96:	f000 fc81 	bl	800a59c <_sbrk_r>
 8009c9a:	1c43      	adds	r3, r0, #1
 8009c9c:	d123      	bne.n	8009ce6 <_malloc_r+0x92>
 8009c9e:	230c      	movs	r3, #12
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	6033      	str	r3, [r6, #0]
 8009ca4:	f000 ff24 	bl	800aaf0 <__malloc_unlock>
 8009ca8:	e7e3      	b.n	8009c72 <_malloc_r+0x1e>
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	1b5b      	subs	r3, r3, r5
 8009cae:	d417      	bmi.n	8009ce0 <_malloc_r+0x8c>
 8009cb0:	2b0b      	cmp	r3, #11
 8009cb2:	d903      	bls.n	8009cbc <_malloc_r+0x68>
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	441c      	add	r4, r3
 8009cb8:	6025      	str	r5, [r4, #0]
 8009cba:	e004      	b.n	8009cc6 <_malloc_r+0x72>
 8009cbc:	6863      	ldr	r3, [r4, #4]
 8009cbe:	42a2      	cmp	r2, r4
 8009cc0:	bf0c      	ite	eq
 8009cc2:	600b      	streq	r3, [r1, #0]
 8009cc4:	6053      	strne	r3, [r2, #4]
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f000 ff12 	bl	800aaf0 <__malloc_unlock>
 8009ccc:	f104 000b 	add.w	r0, r4, #11
 8009cd0:	1d23      	adds	r3, r4, #4
 8009cd2:	f020 0007 	bic.w	r0, r0, #7
 8009cd6:	1ac2      	subs	r2, r0, r3
 8009cd8:	d0cc      	beq.n	8009c74 <_malloc_r+0x20>
 8009cda:	1a1b      	subs	r3, r3, r0
 8009cdc:	50a3      	str	r3, [r4, r2]
 8009cde:	e7c9      	b.n	8009c74 <_malloc_r+0x20>
 8009ce0:	4622      	mov	r2, r4
 8009ce2:	6864      	ldr	r4, [r4, #4]
 8009ce4:	e7cc      	b.n	8009c80 <_malloc_r+0x2c>
 8009ce6:	1cc4      	adds	r4, r0, #3
 8009ce8:	f024 0403 	bic.w	r4, r4, #3
 8009cec:	42a0      	cmp	r0, r4
 8009cee:	d0e3      	beq.n	8009cb8 <_malloc_r+0x64>
 8009cf0:	1a21      	subs	r1, r4, r0
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f000 fc52 	bl	800a59c <_sbrk_r>
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	d1dd      	bne.n	8009cb8 <_malloc_r+0x64>
 8009cfc:	e7cf      	b.n	8009c9e <_malloc_r+0x4a>
 8009cfe:	bf00      	nop
 8009d00:	2000049c 	.word	0x2000049c
 8009d04:	200004a0 	.word	0x200004a0

08009d08 <__ssputs_r>:
 8009d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d0c:	688e      	ldr	r6, [r1, #8]
 8009d0e:	4682      	mov	sl, r0
 8009d10:	429e      	cmp	r6, r3
 8009d12:	460c      	mov	r4, r1
 8009d14:	4690      	mov	r8, r2
 8009d16:	461f      	mov	r7, r3
 8009d18:	d838      	bhi.n	8009d8c <__ssputs_r+0x84>
 8009d1a:	898a      	ldrh	r2, [r1, #12]
 8009d1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d20:	d032      	beq.n	8009d88 <__ssputs_r+0x80>
 8009d22:	6825      	ldr	r5, [r4, #0]
 8009d24:	6909      	ldr	r1, [r1, #16]
 8009d26:	3301      	adds	r3, #1
 8009d28:	eba5 0901 	sub.w	r9, r5, r1
 8009d2c:	6965      	ldr	r5, [r4, #20]
 8009d2e:	444b      	add	r3, r9
 8009d30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d38:	106d      	asrs	r5, r5, #1
 8009d3a:	429d      	cmp	r5, r3
 8009d3c:	bf38      	it	cc
 8009d3e:	461d      	movcc	r5, r3
 8009d40:	0553      	lsls	r3, r2, #21
 8009d42:	d531      	bpl.n	8009da8 <__ssputs_r+0xa0>
 8009d44:	4629      	mov	r1, r5
 8009d46:	f7ff ff85 	bl	8009c54 <_malloc_r>
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	b950      	cbnz	r0, 8009d64 <__ssputs_r+0x5c>
 8009d4e:	230c      	movs	r3, #12
 8009d50:	f04f 30ff 	mov.w	r0, #4294967295
 8009d54:	f8ca 3000 	str.w	r3, [sl]
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d5e:	81a3      	strh	r3, [r4, #12]
 8009d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d64:	464a      	mov	r2, r9
 8009d66:	6921      	ldr	r1, [r4, #16]
 8009d68:	f000 fe94 	bl	800aa94 <memcpy>
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d76:	81a3      	strh	r3, [r4, #12]
 8009d78:	6126      	str	r6, [r4, #16]
 8009d7a:	444e      	add	r6, r9
 8009d7c:	6026      	str	r6, [r4, #0]
 8009d7e:	463e      	mov	r6, r7
 8009d80:	6165      	str	r5, [r4, #20]
 8009d82:	eba5 0509 	sub.w	r5, r5, r9
 8009d86:	60a5      	str	r5, [r4, #8]
 8009d88:	42be      	cmp	r6, r7
 8009d8a:	d900      	bls.n	8009d8e <__ssputs_r+0x86>
 8009d8c:	463e      	mov	r6, r7
 8009d8e:	4632      	mov	r2, r6
 8009d90:	4641      	mov	r1, r8
 8009d92:	6820      	ldr	r0, [r4, #0]
 8009d94:	f000 fe8c 	bl	800aab0 <memmove>
 8009d98:	68a3      	ldr	r3, [r4, #8]
 8009d9a:	6822      	ldr	r2, [r4, #0]
 8009d9c:	1b9b      	subs	r3, r3, r6
 8009d9e:	4432      	add	r2, r6
 8009da0:	2000      	movs	r0, #0
 8009da2:	60a3      	str	r3, [r4, #8]
 8009da4:	6022      	str	r2, [r4, #0]
 8009da6:	e7db      	b.n	8009d60 <__ssputs_r+0x58>
 8009da8:	462a      	mov	r2, r5
 8009daa:	f000 fef3 	bl	800ab94 <_realloc_r>
 8009dae:	4606      	mov	r6, r0
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d1e1      	bne.n	8009d78 <__ssputs_r+0x70>
 8009db4:	4650      	mov	r0, sl
 8009db6:	6921      	ldr	r1, [r4, #16]
 8009db8:	f000 fea0 	bl	800aafc <_free_r>
 8009dbc:	e7c7      	b.n	8009d4e <__ssputs_r+0x46>
	...

08009dc0 <_svfiprintf_r>:
 8009dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc4:	4698      	mov	r8, r3
 8009dc6:	898b      	ldrh	r3, [r1, #12]
 8009dc8:	4607      	mov	r7, r0
 8009dca:	061b      	lsls	r3, r3, #24
 8009dcc:	460d      	mov	r5, r1
 8009dce:	4614      	mov	r4, r2
 8009dd0:	b09d      	sub	sp, #116	; 0x74
 8009dd2:	d50e      	bpl.n	8009df2 <_svfiprintf_r+0x32>
 8009dd4:	690b      	ldr	r3, [r1, #16]
 8009dd6:	b963      	cbnz	r3, 8009df2 <_svfiprintf_r+0x32>
 8009dd8:	2140      	movs	r1, #64	; 0x40
 8009dda:	f7ff ff3b 	bl	8009c54 <_malloc_r>
 8009dde:	6028      	str	r0, [r5, #0]
 8009de0:	6128      	str	r0, [r5, #16]
 8009de2:	b920      	cbnz	r0, 8009dee <_svfiprintf_r+0x2e>
 8009de4:	230c      	movs	r3, #12
 8009de6:	603b      	str	r3, [r7, #0]
 8009de8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dec:	e0d1      	b.n	8009f92 <_svfiprintf_r+0x1d2>
 8009dee:	2340      	movs	r3, #64	; 0x40
 8009df0:	616b      	str	r3, [r5, #20]
 8009df2:	2300      	movs	r3, #0
 8009df4:	9309      	str	r3, [sp, #36]	; 0x24
 8009df6:	2320      	movs	r3, #32
 8009df8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dfc:	2330      	movs	r3, #48	; 0x30
 8009dfe:	f04f 0901 	mov.w	r9, #1
 8009e02:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009fac <_svfiprintf_r+0x1ec>
 8009e0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e0e:	4623      	mov	r3, r4
 8009e10:	469a      	mov	sl, r3
 8009e12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e16:	b10a      	cbz	r2, 8009e1c <_svfiprintf_r+0x5c>
 8009e18:	2a25      	cmp	r2, #37	; 0x25
 8009e1a:	d1f9      	bne.n	8009e10 <_svfiprintf_r+0x50>
 8009e1c:	ebba 0b04 	subs.w	fp, sl, r4
 8009e20:	d00b      	beq.n	8009e3a <_svfiprintf_r+0x7a>
 8009e22:	465b      	mov	r3, fp
 8009e24:	4622      	mov	r2, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	4638      	mov	r0, r7
 8009e2a:	f7ff ff6d 	bl	8009d08 <__ssputs_r>
 8009e2e:	3001      	adds	r0, #1
 8009e30:	f000 80aa 	beq.w	8009f88 <_svfiprintf_r+0x1c8>
 8009e34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e36:	445a      	add	r2, fp
 8009e38:	9209      	str	r2, [sp, #36]	; 0x24
 8009e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f000 80a2 	beq.w	8009f88 <_svfiprintf_r+0x1c8>
 8009e44:	2300      	movs	r3, #0
 8009e46:	f04f 32ff 	mov.w	r2, #4294967295
 8009e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e4e:	f10a 0a01 	add.w	sl, sl, #1
 8009e52:	9304      	str	r3, [sp, #16]
 8009e54:	9307      	str	r3, [sp, #28]
 8009e56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e5a:	931a      	str	r3, [sp, #104]	; 0x68
 8009e5c:	4654      	mov	r4, sl
 8009e5e:	2205      	movs	r2, #5
 8009e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e64:	4851      	ldr	r0, [pc, #324]	; (8009fac <_svfiprintf_r+0x1ec>)
 8009e66:	f000 fe07 	bl	800aa78 <memchr>
 8009e6a:	9a04      	ldr	r2, [sp, #16]
 8009e6c:	b9d8      	cbnz	r0, 8009ea6 <_svfiprintf_r+0xe6>
 8009e6e:	06d0      	lsls	r0, r2, #27
 8009e70:	bf44      	itt	mi
 8009e72:	2320      	movmi	r3, #32
 8009e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e78:	0711      	lsls	r1, r2, #28
 8009e7a:	bf44      	itt	mi
 8009e7c:	232b      	movmi	r3, #43	; 0x2b
 8009e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e82:	f89a 3000 	ldrb.w	r3, [sl]
 8009e86:	2b2a      	cmp	r3, #42	; 0x2a
 8009e88:	d015      	beq.n	8009eb6 <_svfiprintf_r+0xf6>
 8009e8a:	4654      	mov	r4, sl
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	f04f 0c0a 	mov.w	ip, #10
 8009e92:	9a07      	ldr	r2, [sp, #28]
 8009e94:	4621      	mov	r1, r4
 8009e96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e9a:	3b30      	subs	r3, #48	; 0x30
 8009e9c:	2b09      	cmp	r3, #9
 8009e9e:	d94e      	bls.n	8009f3e <_svfiprintf_r+0x17e>
 8009ea0:	b1b0      	cbz	r0, 8009ed0 <_svfiprintf_r+0x110>
 8009ea2:	9207      	str	r2, [sp, #28]
 8009ea4:	e014      	b.n	8009ed0 <_svfiprintf_r+0x110>
 8009ea6:	eba0 0308 	sub.w	r3, r0, r8
 8009eaa:	fa09 f303 	lsl.w	r3, r9, r3
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	46a2      	mov	sl, r4
 8009eb2:	9304      	str	r3, [sp, #16]
 8009eb4:	e7d2      	b.n	8009e5c <_svfiprintf_r+0x9c>
 8009eb6:	9b03      	ldr	r3, [sp, #12]
 8009eb8:	1d19      	adds	r1, r3, #4
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	9103      	str	r1, [sp, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	bfbb      	ittet	lt
 8009ec2:	425b      	neglt	r3, r3
 8009ec4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ec8:	9307      	strge	r3, [sp, #28]
 8009eca:	9307      	strlt	r3, [sp, #28]
 8009ecc:	bfb8      	it	lt
 8009ece:	9204      	strlt	r2, [sp, #16]
 8009ed0:	7823      	ldrb	r3, [r4, #0]
 8009ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ed4:	d10c      	bne.n	8009ef0 <_svfiprintf_r+0x130>
 8009ed6:	7863      	ldrb	r3, [r4, #1]
 8009ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8009eda:	d135      	bne.n	8009f48 <_svfiprintf_r+0x188>
 8009edc:	9b03      	ldr	r3, [sp, #12]
 8009ede:	3402      	adds	r4, #2
 8009ee0:	1d1a      	adds	r2, r3, #4
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	9203      	str	r2, [sp, #12]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	bfb8      	it	lt
 8009eea:	f04f 33ff 	movlt.w	r3, #4294967295
 8009eee:	9305      	str	r3, [sp, #20]
 8009ef0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fbc <_svfiprintf_r+0x1fc>
 8009ef4:	2203      	movs	r2, #3
 8009ef6:	4650      	mov	r0, sl
 8009ef8:	7821      	ldrb	r1, [r4, #0]
 8009efa:	f000 fdbd 	bl	800aa78 <memchr>
 8009efe:	b140      	cbz	r0, 8009f12 <_svfiprintf_r+0x152>
 8009f00:	2340      	movs	r3, #64	; 0x40
 8009f02:	eba0 000a 	sub.w	r0, r0, sl
 8009f06:	fa03 f000 	lsl.w	r0, r3, r0
 8009f0a:	9b04      	ldr	r3, [sp, #16]
 8009f0c:	3401      	adds	r4, #1
 8009f0e:	4303      	orrs	r3, r0
 8009f10:	9304      	str	r3, [sp, #16]
 8009f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f16:	2206      	movs	r2, #6
 8009f18:	4825      	ldr	r0, [pc, #148]	; (8009fb0 <_svfiprintf_r+0x1f0>)
 8009f1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f1e:	f000 fdab 	bl	800aa78 <memchr>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	d038      	beq.n	8009f98 <_svfiprintf_r+0x1d8>
 8009f26:	4b23      	ldr	r3, [pc, #140]	; (8009fb4 <_svfiprintf_r+0x1f4>)
 8009f28:	bb1b      	cbnz	r3, 8009f72 <_svfiprintf_r+0x1b2>
 8009f2a:	9b03      	ldr	r3, [sp, #12]
 8009f2c:	3307      	adds	r3, #7
 8009f2e:	f023 0307 	bic.w	r3, r3, #7
 8009f32:	3308      	adds	r3, #8
 8009f34:	9303      	str	r3, [sp, #12]
 8009f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f38:	4433      	add	r3, r6
 8009f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f3c:	e767      	b.n	8009e0e <_svfiprintf_r+0x4e>
 8009f3e:	460c      	mov	r4, r1
 8009f40:	2001      	movs	r0, #1
 8009f42:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f46:	e7a5      	b.n	8009e94 <_svfiprintf_r+0xd4>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f04f 0c0a 	mov.w	ip, #10
 8009f4e:	4619      	mov	r1, r3
 8009f50:	3401      	adds	r4, #1
 8009f52:	9305      	str	r3, [sp, #20]
 8009f54:	4620      	mov	r0, r4
 8009f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f5a:	3a30      	subs	r2, #48	; 0x30
 8009f5c:	2a09      	cmp	r2, #9
 8009f5e:	d903      	bls.n	8009f68 <_svfiprintf_r+0x1a8>
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d0c5      	beq.n	8009ef0 <_svfiprintf_r+0x130>
 8009f64:	9105      	str	r1, [sp, #20]
 8009f66:	e7c3      	b.n	8009ef0 <_svfiprintf_r+0x130>
 8009f68:	4604      	mov	r4, r0
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f70:	e7f0      	b.n	8009f54 <_svfiprintf_r+0x194>
 8009f72:	ab03      	add	r3, sp, #12
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	462a      	mov	r2, r5
 8009f78:	4638      	mov	r0, r7
 8009f7a:	4b0f      	ldr	r3, [pc, #60]	; (8009fb8 <_svfiprintf_r+0x1f8>)
 8009f7c:	a904      	add	r1, sp, #16
 8009f7e:	f3af 8000 	nop.w
 8009f82:	1c42      	adds	r2, r0, #1
 8009f84:	4606      	mov	r6, r0
 8009f86:	d1d6      	bne.n	8009f36 <_svfiprintf_r+0x176>
 8009f88:	89ab      	ldrh	r3, [r5, #12]
 8009f8a:	065b      	lsls	r3, r3, #25
 8009f8c:	f53f af2c 	bmi.w	8009de8 <_svfiprintf_r+0x28>
 8009f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f92:	b01d      	add	sp, #116	; 0x74
 8009f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f98:	ab03      	add	r3, sp, #12
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	462a      	mov	r2, r5
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <_svfiprintf_r+0x1f8>)
 8009fa2:	a904      	add	r1, sp, #16
 8009fa4:	f000 f9d4 	bl	800a350 <_printf_i>
 8009fa8:	e7eb      	b.n	8009f82 <_svfiprintf_r+0x1c2>
 8009faa:	bf00      	nop
 8009fac:	0800ad78 	.word	0x0800ad78
 8009fb0:	0800ad82 	.word	0x0800ad82
 8009fb4:	00000000 	.word	0x00000000
 8009fb8:	08009d09 	.word	0x08009d09
 8009fbc:	0800ad7e 	.word	0x0800ad7e

08009fc0 <__sfputc_r>:
 8009fc0:	6893      	ldr	r3, [r2, #8]
 8009fc2:	b410      	push	{r4}
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	6093      	str	r3, [r2, #8]
 8009fca:	da07      	bge.n	8009fdc <__sfputc_r+0x1c>
 8009fcc:	6994      	ldr	r4, [r2, #24]
 8009fce:	42a3      	cmp	r3, r4
 8009fd0:	db01      	blt.n	8009fd6 <__sfputc_r+0x16>
 8009fd2:	290a      	cmp	r1, #10
 8009fd4:	d102      	bne.n	8009fdc <__sfputc_r+0x1c>
 8009fd6:	bc10      	pop	{r4}
 8009fd8:	f000 bb34 	b.w	800a644 <__swbuf_r>
 8009fdc:	6813      	ldr	r3, [r2, #0]
 8009fde:	1c58      	adds	r0, r3, #1
 8009fe0:	6010      	str	r0, [r2, #0]
 8009fe2:	7019      	strb	r1, [r3, #0]
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	bc10      	pop	{r4}
 8009fe8:	4770      	bx	lr

08009fea <__sfputs_r>:
 8009fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fec:	4606      	mov	r6, r0
 8009fee:	460f      	mov	r7, r1
 8009ff0:	4614      	mov	r4, r2
 8009ff2:	18d5      	adds	r5, r2, r3
 8009ff4:	42ac      	cmp	r4, r5
 8009ff6:	d101      	bne.n	8009ffc <__sfputs_r+0x12>
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	e007      	b.n	800a00c <__sfputs_r+0x22>
 8009ffc:	463a      	mov	r2, r7
 8009ffe:	4630      	mov	r0, r6
 800a000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a004:	f7ff ffdc 	bl	8009fc0 <__sfputc_r>
 800a008:	1c43      	adds	r3, r0, #1
 800a00a:	d1f3      	bne.n	8009ff4 <__sfputs_r+0xa>
 800a00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a010 <_vfiprintf_r>:
 800a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	460d      	mov	r5, r1
 800a016:	4614      	mov	r4, r2
 800a018:	4698      	mov	r8, r3
 800a01a:	4606      	mov	r6, r0
 800a01c:	b09d      	sub	sp, #116	; 0x74
 800a01e:	b118      	cbz	r0, 800a028 <_vfiprintf_r+0x18>
 800a020:	6983      	ldr	r3, [r0, #24]
 800a022:	b90b      	cbnz	r3, 800a028 <_vfiprintf_r+0x18>
 800a024:	f7ff fd76 	bl	8009b14 <__sinit>
 800a028:	4b89      	ldr	r3, [pc, #548]	; (800a250 <_vfiprintf_r+0x240>)
 800a02a:	429d      	cmp	r5, r3
 800a02c:	d11b      	bne.n	800a066 <_vfiprintf_r+0x56>
 800a02e:	6875      	ldr	r5, [r6, #4]
 800a030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a032:	07d9      	lsls	r1, r3, #31
 800a034:	d405      	bmi.n	800a042 <_vfiprintf_r+0x32>
 800a036:	89ab      	ldrh	r3, [r5, #12]
 800a038:	059a      	lsls	r2, r3, #22
 800a03a:	d402      	bmi.n	800a042 <_vfiprintf_r+0x32>
 800a03c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a03e:	f7ff fe07 	bl	8009c50 <__retarget_lock_acquire_recursive>
 800a042:	89ab      	ldrh	r3, [r5, #12]
 800a044:	071b      	lsls	r3, r3, #28
 800a046:	d501      	bpl.n	800a04c <_vfiprintf_r+0x3c>
 800a048:	692b      	ldr	r3, [r5, #16]
 800a04a:	b9eb      	cbnz	r3, 800a088 <_vfiprintf_r+0x78>
 800a04c:	4629      	mov	r1, r5
 800a04e:	4630      	mov	r0, r6
 800a050:	f000 fb5c 	bl	800a70c <__swsetup_r>
 800a054:	b1c0      	cbz	r0, 800a088 <_vfiprintf_r+0x78>
 800a056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a058:	07dc      	lsls	r4, r3, #31
 800a05a:	d50e      	bpl.n	800a07a <_vfiprintf_r+0x6a>
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295
 800a060:	b01d      	add	sp, #116	; 0x74
 800a062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a066:	4b7b      	ldr	r3, [pc, #492]	; (800a254 <_vfiprintf_r+0x244>)
 800a068:	429d      	cmp	r5, r3
 800a06a:	d101      	bne.n	800a070 <_vfiprintf_r+0x60>
 800a06c:	68b5      	ldr	r5, [r6, #8]
 800a06e:	e7df      	b.n	800a030 <_vfiprintf_r+0x20>
 800a070:	4b79      	ldr	r3, [pc, #484]	; (800a258 <_vfiprintf_r+0x248>)
 800a072:	429d      	cmp	r5, r3
 800a074:	bf08      	it	eq
 800a076:	68f5      	ldreq	r5, [r6, #12]
 800a078:	e7da      	b.n	800a030 <_vfiprintf_r+0x20>
 800a07a:	89ab      	ldrh	r3, [r5, #12]
 800a07c:	0598      	lsls	r0, r3, #22
 800a07e:	d4ed      	bmi.n	800a05c <_vfiprintf_r+0x4c>
 800a080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a082:	f7ff fde6 	bl	8009c52 <__retarget_lock_release_recursive>
 800a086:	e7e9      	b.n	800a05c <_vfiprintf_r+0x4c>
 800a088:	2300      	movs	r3, #0
 800a08a:	9309      	str	r3, [sp, #36]	; 0x24
 800a08c:	2320      	movs	r3, #32
 800a08e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a092:	2330      	movs	r3, #48	; 0x30
 800a094:	f04f 0901 	mov.w	r9, #1
 800a098:	f8cd 800c 	str.w	r8, [sp, #12]
 800a09c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a25c <_vfiprintf_r+0x24c>
 800a0a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0a4:	4623      	mov	r3, r4
 800a0a6:	469a      	mov	sl, r3
 800a0a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0ac:	b10a      	cbz	r2, 800a0b2 <_vfiprintf_r+0xa2>
 800a0ae:	2a25      	cmp	r2, #37	; 0x25
 800a0b0:	d1f9      	bne.n	800a0a6 <_vfiprintf_r+0x96>
 800a0b2:	ebba 0b04 	subs.w	fp, sl, r4
 800a0b6:	d00b      	beq.n	800a0d0 <_vfiprintf_r+0xc0>
 800a0b8:	465b      	mov	r3, fp
 800a0ba:	4622      	mov	r2, r4
 800a0bc:	4629      	mov	r1, r5
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f7ff ff93 	bl	8009fea <__sfputs_r>
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	f000 80aa 	beq.w	800a21e <_vfiprintf_r+0x20e>
 800a0ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0cc:	445a      	add	r2, fp
 800a0ce:	9209      	str	r2, [sp, #36]	; 0x24
 800a0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f000 80a2 	beq.w	800a21e <_vfiprintf_r+0x20e>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0e4:	f10a 0a01 	add.w	sl, sl, #1
 800a0e8:	9304      	str	r3, [sp, #16]
 800a0ea:	9307      	str	r3, [sp, #28]
 800a0ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0f0:	931a      	str	r3, [sp, #104]	; 0x68
 800a0f2:	4654      	mov	r4, sl
 800a0f4:	2205      	movs	r2, #5
 800a0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0fa:	4858      	ldr	r0, [pc, #352]	; (800a25c <_vfiprintf_r+0x24c>)
 800a0fc:	f000 fcbc 	bl	800aa78 <memchr>
 800a100:	9a04      	ldr	r2, [sp, #16]
 800a102:	b9d8      	cbnz	r0, 800a13c <_vfiprintf_r+0x12c>
 800a104:	06d1      	lsls	r1, r2, #27
 800a106:	bf44      	itt	mi
 800a108:	2320      	movmi	r3, #32
 800a10a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a10e:	0713      	lsls	r3, r2, #28
 800a110:	bf44      	itt	mi
 800a112:	232b      	movmi	r3, #43	; 0x2b
 800a114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a118:	f89a 3000 	ldrb.w	r3, [sl]
 800a11c:	2b2a      	cmp	r3, #42	; 0x2a
 800a11e:	d015      	beq.n	800a14c <_vfiprintf_r+0x13c>
 800a120:	4654      	mov	r4, sl
 800a122:	2000      	movs	r0, #0
 800a124:	f04f 0c0a 	mov.w	ip, #10
 800a128:	9a07      	ldr	r2, [sp, #28]
 800a12a:	4621      	mov	r1, r4
 800a12c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a130:	3b30      	subs	r3, #48	; 0x30
 800a132:	2b09      	cmp	r3, #9
 800a134:	d94e      	bls.n	800a1d4 <_vfiprintf_r+0x1c4>
 800a136:	b1b0      	cbz	r0, 800a166 <_vfiprintf_r+0x156>
 800a138:	9207      	str	r2, [sp, #28]
 800a13a:	e014      	b.n	800a166 <_vfiprintf_r+0x156>
 800a13c:	eba0 0308 	sub.w	r3, r0, r8
 800a140:	fa09 f303 	lsl.w	r3, r9, r3
 800a144:	4313      	orrs	r3, r2
 800a146:	46a2      	mov	sl, r4
 800a148:	9304      	str	r3, [sp, #16]
 800a14a:	e7d2      	b.n	800a0f2 <_vfiprintf_r+0xe2>
 800a14c:	9b03      	ldr	r3, [sp, #12]
 800a14e:	1d19      	adds	r1, r3, #4
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	9103      	str	r1, [sp, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	bfbb      	ittet	lt
 800a158:	425b      	neglt	r3, r3
 800a15a:	f042 0202 	orrlt.w	r2, r2, #2
 800a15e:	9307      	strge	r3, [sp, #28]
 800a160:	9307      	strlt	r3, [sp, #28]
 800a162:	bfb8      	it	lt
 800a164:	9204      	strlt	r2, [sp, #16]
 800a166:	7823      	ldrb	r3, [r4, #0]
 800a168:	2b2e      	cmp	r3, #46	; 0x2e
 800a16a:	d10c      	bne.n	800a186 <_vfiprintf_r+0x176>
 800a16c:	7863      	ldrb	r3, [r4, #1]
 800a16e:	2b2a      	cmp	r3, #42	; 0x2a
 800a170:	d135      	bne.n	800a1de <_vfiprintf_r+0x1ce>
 800a172:	9b03      	ldr	r3, [sp, #12]
 800a174:	3402      	adds	r4, #2
 800a176:	1d1a      	adds	r2, r3, #4
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	9203      	str	r2, [sp, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	bfb8      	it	lt
 800a180:	f04f 33ff 	movlt.w	r3, #4294967295
 800a184:	9305      	str	r3, [sp, #20]
 800a186:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a26c <_vfiprintf_r+0x25c>
 800a18a:	2203      	movs	r2, #3
 800a18c:	4650      	mov	r0, sl
 800a18e:	7821      	ldrb	r1, [r4, #0]
 800a190:	f000 fc72 	bl	800aa78 <memchr>
 800a194:	b140      	cbz	r0, 800a1a8 <_vfiprintf_r+0x198>
 800a196:	2340      	movs	r3, #64	; 0x40
 800a198:	eba0 000a 	sub.w	r0, r0, sl
 800a19c:	fa03 f000 	lsl.w	r0, r3, r0
 800a1a0:	9b04      	ldr	r3, [sp, #16]
 800a1a2:	3401      	adds	r4, #1
 800a1a4:	4303      	orrs	r3, r0
 800a1a6:	9304      	str	r3, [sp, #16]
 800a1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ac:	2206      	movs	r2, #6
 800a1ae:	482c      	ldr	r0, [pc, #176]	; (800a260 <_vfiprintf_r+0x250>)
 800a1b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1b4:	f000 fc60 	bl	800aa78 <memchr>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d03f      	beq.n	800a23c <_vfiprintf_r+0x22c>
 800a1bc:	4b29      	ldr	r3, [pc, #164]	; (800a264 <_vfiprintf_r+0x254>)
 800a1be:	bb1b      	cbnz	r3, 800a208 <_vfiprintf_r+0x1f8>
 800a1c0:	9b03      	ldr	r3, [sp, #12]
 800a1c2:	3307      	adds	r3, #7
 800a1c4:	f023 0307 	bic.w	r3, r3, #7
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	9303      	str	r3, [sp, #12]
 800a1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ce:	443b      	add	r3, r7
 800a1d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d2:	e767      	b.n	800a0a4 <_vfiprintf_r+0x94>
 800a1d4:	460c      	mov	r4, r1
 800a1d6:	2001      	movs	r0, #1
 800a1d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1dc:	e7a5      	b.n	800a12a <_vfiprintf_r+0x11a>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f04f 0c0a 	mov.w	ip, #10
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	3401      	adds	r4, #1
 800a1e8:	9305      	str	r3, [sp, #20]
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1f0:	3a30      	subs	r2, #48	; 0x30
 800a1f2:	2a09      	cmp	r2, #9
 800a1f4:	d903      	bls.n	800a1fe <_vfiprintf_r+0x1ee>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d0c5      	beq.n	800a186 <_vfiprintf_r+0x176>
 800a1fa:	9105      	str	r1, [sp, #20]
 800a1fc:	e7c3      	b.n	800a186 <_vfiprintf_r+0x176>
 800a1fe:	4604      	mov	r4, r0
 800a200:	2301      	movs	r3, #1
 800a202:	fb0c 2101 	mla	r1, ip, r1, r2
 800a206:	e7f0      	b.n	800a1ea <_vfiprintf_r+0x1da>
 800a208:	ab03      	add	r3, sp, #12
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	462a      	mov	r2, r5
 800a20e:	4630      	mov	r0, r6
 800a210:	4b15      	ldr	r3, [pc, #84]	; (800a268 <_vfiprintf_r+0x258>)
 800a212:	a904      	add	r1, sp, #16
 800a214:	f3af 8000 	nop.w
 800a218:	4607      	mov	r7, r0
 800a21a:	1c78      	adds	r0, r7, #1
 800a21c:	d1d6      	bne.n	800a1cc <_vfiprintf_r+0x1bc>
 800a21e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a220:	07d9      	lsls	r1, r3, #31
 800a222:	d405      	bmi.n	800a230 <_vfiprintf_r+0x220>
 800a224:	89ab      	ldrh	r3, [r5, #12]
 800a226:	059a      	lsls	r2, r3, #22
 800a228:	d402      	bmi.n	800a230 <_vfiprintf_r+0x220>
 800a22a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a22c:	f7ff fd11 	bl	8009c52 <__retarget_lock_release_recursive>
 800a230:	89ab      	ldrh	r3, [r5, #12]
 800a232:	065b      	lsls	r3, r3, #25
 800a234:	f53f af12 	bmi.w	800a05c <_vfiprintf_r+0x4c>
 800a238:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a23a:	e711      	b.n	800a060 <_vfiprintf_r+0x50>
 800a23c:	ab03      	add	r3, sp, #12
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	462a      	mov	r2, r5
 800a242:	4630      	mov	r0, r6
 800a244:	4b08      	ldr	r3, [pc, #32]	; (800a268 <_vfiprintf_r+0x258>)
 800a246:	a904      	add	r1, sp, #16
 800a248:	f000 f882 	bl	800a350 <_printf_i>
 800a24c:	e7e4      	b.n	800a218 <_vfiprintf_r+0x208>
 800a24e:	bf00      	nop
 800a250:	0800ad38 	.word	0x0800ad38
 800a254:	0800ad58 	.word	0x0800ad58
 800a258:	0800ad18 	.word	0x0800ad18
 800a25c:	0800ad78 	.word	0x0800ad78
 800a260:	0800ad82 	.word	0x0800ad82
 800a264:	00000000 	.word	0x00000000
 800a268:	08009feb 	.word	0x08009feb
 800a26c:	0800ad7e 	.word	0x0800ad7e

0800a270 <_printf_common>:
 800a270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a274:	4616      	mov	r6, r2
 800a276:	4699      	mov	r9, r3
 800a278:	688a      	ldr	r2, [r1, #8]
 800a27a:	690b      	ldr	r3, [r1, #16]
 800a27c:	4607      	mov	r7, r0
 800a27e:	4293      	cmp	r3, r2
 800a280:	bfb8      	it	lt
 800a282:	4613      	movlt	r3, r2
 800a284:	6033      	str	r3, [r6, #0]
 800a286:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a28a:	460c      	mov	r4, r1
 800a28c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a290:	b10a      	cbz	r2, 800a296 <_printf_common+0x26>
 800a292:	3301      	adds	r3, #1
 800a294:	6033      	str	r3, [r6, #0]
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	0699      	lsls	r1, r3, #26
 800a29a:	bf42      	ittt	mi
 800a29c:	6833      	ldrmi	r3, [r6, #0]
 800a29e:	3302      	addmi	r3, #2
 800a2a0:	6033      	strmi	r3, [r6, #0]
 800a2a2:	6825      	ldr	r5, [r4, #0]
 800a2a4:	f015 0506 	ands.w	r5, r5, #6
 800a2a8:	d106      	bne.n	800a2b8 <_printf_common+0x48>
 800a2aa:	f104 0a19 	add.w	sl, r4, #25
 800a2ae:	68e3      	ldr	r3, [r4, #12]
 800a2b0:	6832      	ldr	r2, [r6, #0]
 800a2b2:	1a9b      	subs	r3, r3, r2
 800a2b4:	42ab      	cmp	r3, r5
 800a2b6:	dc28      	bgt.n	800a30a <_printf_common+0x9a>
 800a2b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2bc:	1e13      	subs	r3, r2, #0
 800a2be:	6822      	ldr	r2, [r4, #0]
 800a2c0:	bf18      	it	ne
 800a2c2:	2301      	movne	r3, #1
 800a2c4:	0692      	lsls	r2, r2, #26
 800a2c6:	d42d      	bmi.n	800a324 <_printf_common+0xb4>
 800a2c8:	4649      	mov	r1, r9
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2d0:	47c0      	blx	r8
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	d020      	beq.n	800a318 <_printf_common+0xa8>
 800a2d6:	6823      	ldr	r3, [r4, #0]
 800a2d8:	68e5      	ldr	r5, [r4, #12]
 800a2da:	f003 0306 	and.w	r3, r3, #6
 800a2de:	2b04      	cmp	r3, #4
 800a2e0:	bf18      	it	ne
 800a2e2:	2500      	movne	r5, #0
 800a2e4:	6832      	ldr	r2, [r6, #0]
 800a2e6:	f04f 0600 	mov.w	r6, #0
 800a2ea:	68a3      	ldr	r3, [r4, #8]
 800a2ec:	bf08      	it	eq
 800a2ee:	1aad      	subeq	r5, r5, r2
 800a2f0:	6922      	ldr	r2, [r4, #16]
 800a2f2:	bf08      	it	eq
 800a2f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	bfc4      	itt	gt
 800a2fc:	1a9b      	subgt	r3, r3, r2
 800a2fe:	18ed      	addgt	r5, r5, r3
 800a300:	341a      	adds	r4, #26
 800a302:	42b5      	cmp	r5, r6
 800a304:	d11a      	bne.n	800a33c <_printf_common+0xcc>
 800a306:	2000      	movs	r0, #0
 800a308:	e008      	b.n	800a31c <_printf_common+0xac>
 800a30a:	2301      	movs	r3, #1
 800a30c:	4652      	mov	r2, sl
 800a30e:	4649      	mov	r1, r9
 800a310:	4638      	mov	r0, r7
 800a312:	47c0      	blx	r8
 800a314:	3001      	adds	r0, #1
 800a316:	d103      	bne.n	800a320 <_printf_common+0xb0>
 800a318:	f04f 30ff 	mov.w	r0, #4294967295
 800a31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a320:	3501      	adds	r5, #1
 800a322:	e7c4      	b.n	800a2ae <_printf_common+0x3e>
 800a324:	2030      	movs	r0, #48	; 0x30
 800a326:	18e1      	adds	r1, r4, r3
 800a328:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a32c:	1c5a      	adds	r2, r3, #1
 800a32e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a332:	4422      	add	r2, r4
 800a334:	3302      	adds	r3, #2
 800a336:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a33a:	e7c5      	b.n	800a2c8 <_printf_common+0x58>
 800a33c:	2301      	movs	r3, #1
 800a33e:	4622      	mov	r2, r4
 800a340:	4649      	mov	r1, r9
 800a342:	4638      	mov	r0, r7
 800a344:	47c0      	blx	r8
 800a346:	3001      	adds	r0, #1
 800a348:	d0e6      	beq.n	800a318 <_printf_common+0xa8>
 800a34a:	3601      	adds	r6, #1
 800a34c:	e7d9      	b.n	800a302 <_printf_common+0x92>
	...

0800a350 <_printf_i>:
 800a350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a354:	460c      	mov	r4, r1
 800a356:	7e27      	ldrb	r7, [r4, #24]
 800a358:	4691      	mov	r9, r2
 800a35a:	2f78      	cmp	r7, #120	; 0x78
 800a35c:	4680      	mov	r8, r0
 800a35e:	469a      	mov	sl, r3
 800a360:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a362:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a366:	d807      	bhi.n	800a378 <_printf_i+0x28>
 800a368:	2f62      	cmp	r7, #98	; 0x62
 800a36a:	d80a      	bhi.n	800a382 <_printf_i+0x32>
 800a36c:	2f00      	cmp	r7, #0
 800a36e:	f000 80d9 	beq.w	800a524 <_printf_i+0x1d4>
 800a372:	2f58      	cmp	r7, #88	; 0x58
 800a374:	f000 80a4 	beq.w	800a4c0 <_printf_i+0x170>
 800a378:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a37c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a380:	e03a      	b.n	800a3f8 <_printf_i+0xa8>
 800a382:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a386:	2b15      	cmp	r3, #21
 800a388:	d8f6      	bhi.n	800a378 <_printf_i+0x28>
 800a38a:	a001      	add	r0, pc, #4	; (adr r0, 800a390 <_printf_i+0x40>)
 800a38c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a390:	0800a3e9 	.word	0x0800a3e9
 800a394:	0800a3fd 	.word	0x0800a3fd
 800a398:	0800a379 	.word	0x0800a379
 800a39c:	0800a379 	.word	0x0800a379
 800a3a0:	0800a379 	.word	0x0800a379
 800a3a4:	0800a379 	.word	0x0800a379
 800a3a8:	0800a3fd 	.word	0x0800a3fd
 800a3ac:	0800a379 	.word	0x0800a379
 800a3b0:	0800a379 	.word	0x0800a379
 800a3b4:	0800a379 	.word	0x0800a379
 800a3b8:	0800a379 	.word	0x0800a379
 800a3bc:	0800a50b 	.word	0x0800a50b
 800a3c0:	0800a42d 	.word	0x0800a42d
 800a3c4:	0800a4ed 	.word	0x0800a4ed
 800a3c8:	0800a379 	.word	0x0800a379
 800a3cc:	0800a379 	.word	0x0800a379
 800a3d0:	0800a52d 	.word	0x0800a52d
 800a3d4:	0800a379 	.word	0x0800a379
 800a3d8:	0800a42d 	.word	0x0800a42d
 800a3dc:	0800a379 	.word	0x0800a379
 800a3e0:	0800a379 	.word	0x0800a379
 800a3e4:	0800a4f5 	.word	0x0800a4f5
 800a3e8:	680b      	ldr	r3, [r1, #0]
 800a3ea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a3ee:	1d1a      	adds	r2, r3, #4
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	600a      	str	r2, [r1, #0]
 800a3f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e0a4      	b.n	800a546 <_printf_i+0x1f6>
 800a3fc:	6825      	ldr	r5, [r4, #0]
 800a3fe:	6808      	ldr	r0, [r1, #0]
 800a400:	062e      	lsls	r6, r5, #24
 800a402:	f100 0304 	add.w	r3, r0, #4
 800a406:	d50a      	bpl.n	800a41e <_printf_i+0xce>
 800a408:	6805      	ldr	r5, [r0, #0]
 800a40a:	600b      	str	r3, [r1, #0]
 800a40c:	2d00      	cmp	r5, #0
 800a40e:	da03      	bge.n	800a418 <_printf_i+0xc8>
 800a410:	232d      	movs	r3, #45	; 0x2d
 800a412:	426d      	negs	r5, r5
 800a414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a418:	230a      	movs	r3, #10
 800a41a:	485e      	ldr	r0, [pc, #376]	; (800a594 <_printf_i+0x244>)
 800a41c:	e019      	b.n	800a452 <_printf_i+0x102>
 800a41e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a422:	6805      	ldr	r5, [r0, #0]
 800a424:	600b      	str	r3, [r1, #0]
 800a426:	bf18      	it	ne
 800a428:	b22d      	sxthne	r5, r5
 800a42a:	e7ef      	b.n	800a40c <_printf_i+0xbc>
 800a42c:	680b      	ldr	r3, [r1, #0]
 800a42e:	6825      	ldr	r5, [r4, #0]
 800a430:	1d18      	adds	r0, r3, #4
 800a432:	6008      	str	r0, [r1, #0]
 800a434:	0628      	lsls	r0, r5, #24
 800a436:	d501      	bpl.n	800a43c <_printf_i+0xec>
 800a438:	681d      	ldr	r5, [r3, #0]
 800a43a:	e002      	b.n	800a442 <_printf_i+0xf2>
 800a43c:	0669      	lsls	r1, r5, #25
 800a43e:	d5fb      	bpl.n	800a438 <_printf_i+0xe8>
 800a440:	881d      	ldrh	r5, [r3, #0]
 800a442:	2f6f      	cmp	r7, #111	; 0x6f
 800a444:	bf0c      	ite	eq
 800a446:	2308      	moveq	r3, #8
 800a448:	230a      	movne	r3, #10
 800a44a:	4852      	ldr	r0, [pc, #328]	; (800a594 <_printf_i+0x244>)
 800a44c:	2100      	movs	r1, #0
 800a44e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a452:	6866      	ldr	r6, [r4, #4]
 800a454:	2e00      	cmp	r6, #0
 800a456:	bfa8      	it	ge
 800a458:	6821      	ldrge	r1, [r4, #0]
 800a45a:	60a6      	str	r6, [r4, #8]
 800a45c:	bfa4      	itt	ge
 800a45e:	f021 0104 	bicge.w	r1, r1, #4
 800a462:	6021      	strge	r1, [r4, #0]
 800a464:	b90d      	cbnz	r5, 800a46a <_printf_i+0x11a>
 800a466:	2e00      	cmp	r6, #0
 800a468:	d04d      	beq.n	800a506 <_printf_i+0x1b6>
 800a46a:	4616      	mov	r6, r2
 800a46c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a470:	fb03 5711 	mls	r7, r3, r1, r5
 800a474:	5dc7      	ldrb	r7, [r0, r7]
 800a476:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a47a:	462f      	mov	r7, r5
 800a47c:	42bb      	cmp	r3, r7
 800a47e:	460d      	mov	r5, r1
 800a480:	d9f4      	bls.n	800a46c <_printf_i+0x11c>
 800a482:	2b08      	cmp	r3, #8
 800a484:	d10b      	bne.n	800a49e <_printf_i+0x14e>
 800a486:	6823      	ldr	r3, [r4, #0]
 800a488:	07df      	lsls	r7, r3, #31
 800a48a:	d508      	bpl.n	800a49e <_printf_i+0x14e>
 800a48c:	6923      	ldr	r3, [r4, #16]
 800a48e:	6861      	ldr	r1, [r4, #4]
 800a490:	4299      	cmp	r1, r3
 800a492:	bfde      	ittt	le
 800a494:	2330      	movle	r3, #48	; 0x30
 800a496:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a49a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a49e:	1b92      	subs	r2, r2, r6
 800a4a0:	6122      	str	r2, [r4, #16]
 800a4a2:	464b      	mov	r3, r9
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	4640      	mov	r0, r8
 800a4a8:	f8cd a000 	str.w	sl, [sp]
 800a4ac:	aa03      	add	r2, sp, #12
 800a4ae:	f7ff fedf 	bl	800a270 <_printf_common>
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	d14c      	bne.n	800a550 <_printf_i+0x200>
 800a4b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ba:	b004      	add	sp, #16
 800a4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c0:	4834      	ldr	r0, [pc, #208]	; (800a594 <_printf_i+0x244>)
 800a4c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a4c6:	680e      	ldr	r6, [r1, #0]
 800a4c8:	6823      	ldr	r3, [r4, #0]
 800a4ca:	f856 5b04 	ldr.w	r5, [r6], #4
 800a4ce:	061f      	lsls	r7, r3, #24
 800a4d0:	600e      	str	r6, [r1, #0]
 800a4d2:	d514      	bpl.n	800a4fe <_printf_i+0x1ae>
 800a4d4:	07d9      	lsls	r1, r3, #31
 800a4d6:	bf44      	itt	mi
 800a4d8:	f043 0320 	orrmi.w	r3, r3, #32
 800a4dc:	6023      	strmi	r3, [r4, #0]
 800a4de:	b91d      	cbnz	r5, 800a4e8 <_printf_i+0x198>
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	f023 0320 	bic.w	r3, r3, #32
 800a4e6:	6023      	str	r3, [r4, #0]
 800a4e8:	2310      	movs	r3, #16
 800a4ea:	e7af      	b.n	800a44c <_printf_i+0xfc>
 800a4ec:	6823      	ldr	r3, [r4, #0]
 800a4ee:	f043 0320 	orr.w	r3, r3, #32
 800a4f2:	6023      	str	r3, [r4, #0]
 800a4f4:	2378      	movs	r3, #120	; 0x78
 800a4f6:	4828      	ldr	r0, [pc, #160]	; (800a598 <_printf_i+0x248>)
 800a4f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4fc:	e7e3      	b.n	800a4c6 <_printf_i+0x176>
 800a4fe:	065e      	lsls	r6, r3, #25
 800a500:	bf48      	it	mi
 800a502:	b2ad      	uxthmi	r5, r5
 800a504:	e7e6      	b.n	800a4d4 <_printf_i+0x184>
 800a506:	4616      	mov	r6, r2
 800a508:	e7bb      	b.n	800a482 <_printf_i+0x132>
 800a50a:	680b      	ldr	r3, [r1, #0]
 800a50c:	6826      	ldr	r6, [r4, #0]
 800a50e:	1d1d      	adds	r5, r3, #4
 800a510:	6960      	ldr	r0, [r4, #20]
 800a512:	600d      	str	r5, [r1, #0]
 800a514:	0635      	lsls	r5, r6, #24
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	d501      	bpl.n	800a51e <_printf_i+0x1ce>
 800a51a:	6018      	str	r0, [r3, #0]
 800a51c:	e002      	b.n	800a524 <_printf_i+0x1d4>
 800a51e:	0671      	lsls	r1, r6, #25
 800a520:	d5fb      	bpl.n	800a51a <_printf_i+0x1ca>
 800a522:	8018      	strh	r0, [r3, #0]
 800a524:	2300      	movs	r3, #0
 800a526:	4616      	mov	r6, r2
 800a528:	6123      	str	r3, [r4, #16]
 800a52a:	e7ba      	b.n	800a4a2 <_printf_i+0x152>
 800a52c:	680b      	ldr	r3, [r1, #0]
 800a52e:	1d1a      	adds	r2, r3, #4
 800a530:	600a      	str	r2, [r1, #0]
 800a532:	681e      	ldr	r6, [r3, #0]
 800a534:	2100      	movs	r1, #0
 800a536:	4630      	mov	r0, r6
 800a538:	6862      	ldr	r2, [r4, #4]
 800a53a:	f000 fa9d 	bl	800aa78 <memchr>
 800a53e:	b108      	cbz	r0, 800a544 <_printf_i+0x1f4>
 800a540:	1b80      	subs	r0, r0, r6
 800a542:	6060      	str	r0, [r4, #4]
 800a544:	6863      	ldr	r3, [r4, #4]
 800a546:	6123      	str	r3, [r4, #16]
 800a548:	2300      	movs	r3, #0
 800a54a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a54e:	e7a8      	b.n	800a4a2 <_printf_i+0x152>
 800a550:	4632      	mov	r2, r6
 800a552:	4649      	mov	r1, r9
 800a554:	4640      	mov	r0, r8
 800a556:	6923      	ldr	r3, [r4, #16]
 800a558:	47d0      	blx	sl
 800a55a:	3001      	adds	r0, #1
 800a55c:	d0ab      	beq.n	800a4b6 <_printf_i+0x166>
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	079b      	lsls	r3, r3, #30
 800a562:	d413      	bmi.n	800a58c <_printf_i+0x23c>
 800a564:	68e0      	ldr	r0, [r4, #12]
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	4298      	cmp	r0, r3
 800a56a:	bfb8      	it	lt
 800a56c:	4618      	movlt	r0, r3
 800a56e:	e7a4      	b.n	800a4ba <_printf_i+0x16a>
 800a570:	2301      	movs	r3, #1
 800a572:	4632      	mov	r2, r6
 800a574:	4649      	mov	r1, r9
 800a576:	4640      	mov	r0, r8
 800a578:	47d0      	blx	sl
 800a57a:	3001      	adds	r0, #1
 800a57c:	d09b      	beq.n	800a4b6 <_printf_i+0x166>
 800a57e:	3501      	adds	r5, #1
 800a580:	68e3      	ldr	r3, [r4, #12]
 800a582:	9903      	ldr	r1, [sp, #12]
 800a584:	1a5b      	subs	r3, r3, r1
 800a586:	42ab      	cmp	r3, r5
 800a588:	dcf2      	bgt.n	800a570 <_printf_i+0x220>
 800a58a:	e7eb      	b.n	800a564 <_printf_i+0x214>
 800a58c:	2500      	movs	r5, #0
 800a58e:	f104 0619 	add.w	r6, r4, #25
 800a592:	e7f5      	b.n	800a580 <_printf_i+0x230>
 800a594:	0800ad89 	.word	0x0800ad89
 800a598:	0800ad9a 	.word	0x0800ad9a

0800a59c <_sbrk_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	2300      	movs	r3, #0
 800a5a0:	4d05      	ldr	r5, [pc, #20]	; (800a5b8 <_sbrk_r+0x1c>)
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	4608      	mov	r0, r1
 800a5a6:	602b      	str	r3, [r5, #0]
 800a5a8:	f7f6 fe1e 	bl	80011e8 <_sbrk>
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	d102      	bne.n	800a5b6 <_sbrk_r+0x1a>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	b103      	cbz	r3, 800a5b6 <_sbrk_r+0x1a>
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
 800a5b8:	200015a4 	.word	0x200015a4

0800a5bc <__sread>:
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	460c      	mov	r4, r1
 800a5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c4:	f000 fb0c 	bl	800abe0 <_read_r>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	bfab      	itete	ge
 800a5cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a5d0:	181b      	addge	r3, r3, r0
 800a5d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5d6:	bfac      	ite	ge
 800a5d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5da:	81a3      	strhlt	r3, [r4, #12]
 800a5dc:	bd10      	pop	{r4, pc}

0800a5de <__swrite>:
 800a5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e2:	461f      	mov	r7, r3
 800a5e4:	898b      	ldrh	r3, [r1, #12]
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	05db      	lsls	r3, r3, #23
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	4616      	mov	r6, r2
 800a5ee:	d505      	bpl.n	800a5fc <__swrite+0x1e>
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f8:	f000 f9c8 	bl	800a98c <_lseek_r>
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	4632      	mov	r2, r6
 800a600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a604:	81a3      	strh	r3, [r4, #12]
 800a606:	4628      	mov	r0, r5
 800a608:	463b      	mov	r3, r7
 800a60a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a60e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a612:	f000 b869 	b.w	800a6e8 <_write_r>

0800a616 <__sseek>:
 800a616:	b510      	push	{r4, lr}
 800a618:	460c      	mov	r4, r1
 800a61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61e:	f000 f9b5 	bl	800a98c <_lseek_r>
 800a622:	1c43      	adds	r3, r0, #1
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	bf15      	itete	ne
 800a628:	6560      	strne	r0, [r4, #84]	; 0x54
 800a62a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a62e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a632:	81a3      	strheq	r3, [r4, #12]
 800a634:	bf18      	it	ne
 800a636:	81a3      	strhne	r3, [r4, #12]
 800a638:	bd10      	pop	{r4, pc}

0800a63a <__sclose>:
 800a63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a63e:	f000 b8d3 	b.w	800a7e8 <_close_r>
	...

0800a644 <__swbuf_r>:
 800a644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a646:	460e      	mov	r6, r1
 800a648:	4614      	mov	r4, r2
 800a64a:	4605      	mov	r5, r0
 800a64c:	b118      	cbz	r0, 800a656 <__swbuf_r+0x12>
 800a64e:	6983      	ldr	r3, [r0, #24]
 800a650:	b90b      	cbnz	r3, 800a656 <__swbuf_r+0x12>
 800a652:	f7ff fa5f 	bl	8009b14 <__sinit>
 800a656:	4b21      	ldr	r3, [pc, #132]	; (800a6dc <__swbuf_r+0x98>)
 800a658:	429c      	cmp	r4, r3
 800a65a:	d12b      	bne.n	800a6b4 <__swbuf_r+0x70>
 800a65c:	686c      	ldr	r4, [r5, #4]
 800a65e:	69a3      	ldr	r3, [r4, #24]
 800a660:	60a3      	str	r3, [r4, #8]
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	071a      	lsls	r2, r3, #28
 800a666:	d52f      	bpl.n	800a6c8 <__swbuf_r+0x84>
 800a668:	6923      	ldr	r3, [r4, #16]
 800a66a:	b36b      	cbz	r3, 800a6c8 <__swbuf_r+0x84>
 800a66c:	6923      	ldr	r3, [r4, #16]
 800a66e:	6820      	ldr	r0, [r4, #0]
 800a670:	b2f6      	uxtb	r6, r6
 800a672:	1ac0      	subs	r0, r0, r3
 800a674:	6963      	ldr	r3, [r4, #20]
 800a676:	4637      	mov	r7, r6
 800a678:	4283      	cmp	r3, r0
 800a67a:	dc04      	bgt.n	800a686 <__swbuf_r+0x42>
 800a67c:	4621      	mov	r1, r4
 800a67e:	4628      	mov	r0, r5
 800a680:	f000 f948 	bl	800a914 <_fflush_r>
 800a684:	bb30      	cbnz	r0, 800a6d4 <__swbuf_r+0x90>
 800a686:	68a3      	ldr	r3, [r4, #8]
 800a688:	3001      	adds	r0, #1
 800a68a:	3b01      	subs	r3, #1
 800a68c:	60a3      	str	r3, [r4, #8]
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	1c5a      	adds	r2, r3, #1
 800a692:	6022      	str	r2, [r4, #0]
 800a694:	701e      	strb	r6, [r3, #0]
 800a696:	6963      	ldr	r3, [r4, #20]
 800a698:	4283      	cmp	r3, r0
 800a69a:	d004      	beq.n	800a6a6 <__swbuf_r+0x62>
 800a69c:	89a3      	ldrh	r3, [r4, #12]
 800a69e:	07db      	lsls	r3, r3, #31
 800a6a0:	d506      	bpl.n	800a6b0 <__swbuf_r+0x6c>
 800a6a2:	2e0a      	cmp	r6, #10
 800a6a4:	d104      	bne.n	800a6b0 <__swbuf_r+0x6c>
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	f000 f933 	bl	800a914 <_fflush_r>
 800a6ae:	b988      	cbnz	r0, 800a6d4 <__swbuf_r+0x90>
 800a6b0:	4638      	mov	r0, r7
 800a6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6b4:	4b0a      	ldr	r3, [pc, #40]	; (800a6e0 <__swbuf_r+0x9c>)
 800a6b6:	429c      	cmp	r4, r3
 800a6b8:	d101      	bne.n	800a6be <__swbuf_r+0x7a>
 800a6ba:	68ac      	ldr	r4, [r5, #8]
 800a6bc:	e7cf      	b.n	800a65e <__swbuf_r+0x1a>
 800a6be:	4b09      	ldr	r3, [pc, #36]	; (800a6e4 <__swbuf_r+0xa0>)
 800a6c0:	429c      	cmp	r4, r3
 800a6c2:	bf08      	it	eq
 800a6c4:	68ec      	ldreq	r4, [r5, #12]
 800a6c6:	e7ca      	b.n	800a65e <__swbuf_r+0x1a>
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f000 f81e 	bl	800a70c <__swsetup_r>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	d0cb      	beq.n	800a66c <__swbuf_r+0x28>
 800a6d4:	f04f 37ff 	mov.w	r7, #4294967295
 800a6d8:	e7ea      	b.n	800a6b0 <__swbuf_r+0x6c>
 800a6da:	bf00      	nop
 800a6dc:	0800ad38 	.word	0x0800ad38
 800a6e0:	0800ad58 	.word	0x0800ad58
 800a6e4:	0800ad18 	.word	0x0800ad18

0800a6e8 <_write_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	4d05      	ldr	r5, [pc, #20]	; (800a708 <_write_r+0x20>)
 800a6f4:	602a      	str	r2, [r5, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f7f5 fece 	bl	8000498 <_write>
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	d102      	bne.n	800a706 <_write_r+0x1e>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	b103      	cbz	r3, 800a706 <_write_r+0x1e>
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	200015a4 	.word	0x200015a4

0800a70c <__swsetup_r>:
 800a70c:	4b32      	ldr	r3, [pc, #200]	; (800a7d8 <__swsetup_r+0xcc>)
 800a70e:	b570      	push	{r4, r5, r6, lr}
 800a710:	681d      	ldr	r5, [r3, #0]
 800a712:	4606      	mov	r6, r0
 800a714:	460c      	mov	r4, r1
 800a716:	b125      	cbz	r5, 800a722 <__swsetup_r+0x16>
 800a718:	69ab      	ldr	r3, [r5, #24]
 800a71a:	b913      	cbnz	r3, 800a722 <__swsetup_r+0x16>
 800a71c:	4628      	mov	r0, r5
 800a71e:	f7ff f9f9 	bl	8009b14 <__sinit>
 800a722:	4b2e      	ldr	r3, [pc, #184]	; (800a7dc <__swsetup_r+0xd0>)
 800a724:	429c      	cmp	r4, r3
 800a726:	d10f      	bne.n	800a748 <__swsetup_r+0x3c>
 800a728:	686c      	ldr	r4, [r5, #4]
 800a72a:	89a3      	ldrh	r3, [r4, #12]
 800a72c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a730:	0719      	lsls	r1, r3, #28
 800a732:	d42c      	bmi.n	800a78e <__swsetup_r+0x82>
 800a734:	06dd      	lsls	r5, r3, #27
 800a736:	d411      	bmi.n	800a75c <__swsetup_r+0x50>
 800a738:	2309      	movs	r3, #9
 800a73a:	6033      	str	r3, [r6, #0]
 800a73c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a740:	f04f 30ff 	mov.w	r0, #4294967295
 800a744:	81a3      	strh	r3, [r4, #12]
 800a746:	e03e      	b.n	800a7c6 <__swsetup_r+0xba>
 800a748:	4b25      	ldr	r3, [pc, #148]	; (800a7e0 <__swsetup_r+0xd4>)
 800a74a:	429c      	cmp	r4, r3
 800a74c:	d101      	bne.n	800a752 <__swsetup_r+0x46>
 800a74e:	68ac      	ldr	r4, [r5, #8]
 800a750:	e7eb      	b.n	800a72a <__swsetup_r+0x1e>
 800a752:	4b24      	ldr	r3, [pc, #144]	; (800a7e4 <__swsetup_r+0xd8>)
 800a754:	429c      	cmp	r4, r3
 800a756:	bf08      	it	eq
 800a758:	68ec      	ldreq	r4, [r5, #12]
 800a75a:	e7e6      	b.n	800a72a <__swsetup_r+0x1e>
 800a75c:	0758      	lsls	r0, r3, #29
 800a75e:	d512      	bpl.n	800a786 <__swsetup_r+0x7a>
 800a760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a762:	b141      	cbz	r1, 800a776 <__swsetup_r+0x6a>
 800a764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a768:	4299      	cmp	r1, r3
 800a76a:	d002      	beq.n	800a772 <__swsetup_r+0x66>
 800a76c:	4630      	mov	r0, r6
 800a76e:	f000 f9c5 	bl	800aafc <_free_r>
 800a772:	2300      	movs	r3, #0
 800a774:	6363      	str	r3, [r4, #52]	; 0x34
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	2300      	movs	r3, #0
 800a780:	6063      	str	r3, [r4, #4]
 800a782:	6923      	ldr	r3, [r4, #16]
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	f043 0308 	orr.w	r3, r3, #8
 800a78c:	81a3      	strh	r3, [r4, #12]
 800a78e:	6923      	ldr	r3, [r4, #16]
 800a790:	b94b      	cbnz	r3, 800a7a6 <__swsetup_r+0x9a>
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a79c:	d003      	beq.n	800a7a6 <__swsetup_r+0x9a>
 800a79e:	4621      	mov	r1, r4
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f000 f929 	bl	800a9f8 <__smakebuf_r>
 800a7a6:	89a0      	ldrh	r0, [r4, #12]
 800a7a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7ac:	f010 0301 	ands.w	r3, r0, #1
 800a7b0:	d00a      	beq.n	800a7c8 <__swsetup_r+0xbc>
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	60a3      	str	r3, [r4, #8]
 800a7b6:	6963      	ldr	r3, [r4, #20]
 800a7b8:	425b      	negs	r3, r3
 800a7ba:	61a3      	str	r3, [r4, #24]
 800a7bc:	6923      	ldr	r3, [r4, #16]
 800a7be:	b943      	cbnz	r3, 800a7d2 <__swsetup_r+0xc6>
 800a7c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7c4:	d1ba      	bne.n	800a73c <__swsetup_r+0x30>
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}
 800a7c8:	0781      	lsls	r1, r0, #30
 800a7ca:	bf58      	it	pl
 800a7cc:	6963      	ldrpl	r3, [r4, #20]
 800a7ce:	60a3      	str	r3, [r4, #8]
 800a7d0:	e7f4      	b.n	800a7bc <__swsetup_r+0xb0>
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	e7f7      	b.n	800a7c6 <__swsetup_r+0xba>
 800a7d6:	bf00      	nop
 800a7d8:	2000018c 	.word	0x2000018c
 800a7dc:	0800ad38 	.word	0x0800ad38
 800a7e0:	0800ad58 	.word	0x0800ad58
 800a7e4:	0800ad18 	.word	0x0800ad18

0800a7e8 <_close_r>:
 800a7e8:	b538      	push	{r3, r4, r5, lr}
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	4d05      	ldr	r5, [pc, #20]	; (800a804 <_close_r+0x1c>)
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	4608      	mov	r0, r1
 800a7f2:	602b      	str	r3, [r5, #0]
 800a7f4:	f7f6 fcc7 	bl	8001186 <_close>
 800a7f8:	1c43      	adds	r3, r0, #1
 800a7fa:	d102      	bne.n	800a802 <_close_r+0x1a>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	b103      	cbz	r3, 800a802 <_close_r+0x1a>
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	200015a4 	.word	0x200015a4

0800a808 <__sflush_r>:
 800a808:	898a      	ldrh	r2, [r1, #12]
 800a80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a80e:	4605      	mov	r5, r0
 800a810:	0710      	lsls	r0, r2, #28
 800a812:	460c      	mov	r4, r1
 800a814:	d458      	bmi.n	800a8c8 <__sflush_r+0xc0>
 800a816:	684b      	ldr	r3, [r1, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dc05      	bgt.n	800a828 <__sflush_r+0x20>
 800a81c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a81e:	2b00      	cmp	r3, #0
 800a820:	dc02      	bgt.n	800a828 <__sflush_r+0x20>
 800a822:	2000      	movs	r0, #0
 800a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a82a:	2e00      	cmp	r6, #0
 800a82c:	d0f9      	beq.n	800a822 <__sflush_r+0x1a>
 800a82e:	2300      	movs	r3, #0
 800a830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a834:	682f      	ldr	r7, [r5, #0]
 800a836:	602b      	str	r3, [r5, #0]
 800a838:	d032      	beq.n	800a8a0 <__sflush_r+0x98>
 800a83a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	075a      	lsls	r2, r3, #29
 800a840:	d505      	bpl.n	800a84e <__sflush_r+0x46>
 800a842:	6863      	ldr	r3, [r4, #4]
 800a844:	1ac0      	subs	r0, r0, r3
 800a846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a848:	b10b      	cbz	r3, 800a84e <__sflush_r+0x46>
 800a84a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a84c:	1ac0      	subs	r0, r0, r3
 800a84e:	2300      	movs	r3, #0
 800a850:	4602      	mov	r2, r0
 800a852:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a854:	4628      	mov	r0, r5
 800a856:	6a21      	ldr	r1, [r4, #32]
 800a858:	47b0      	blx	r6
 800a85a:	1c43      	adds	r3, r0, #1
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	d106      	bne.n	800a86e <__sflush_r+0x66>
 800a860:	6829      	ldr	r1, [r5, #0]
 800a862:	291d      	cmp	r1, #29
 800a864:	d82c      	bhi.n	800a8c0 <__sflush_r+0xb8>
 800a866:	4a2a      	ldr	r2, [pc, #168]	; (800a910 <__sflush_r+0x108>)
 800a868:	40ca      	lsrs	r2, r1
 800a86a:	07d6      	lsls	r6, r2, #31
 800a86c:	d528      	bpl.n	800a8c0 <__sflush_r+0xb8>
 800a86e:	2200      	movs	r2, #0
 800a870:	6062      	str	r2, [r4, #4]
 800a872:	6922      	ldr	r2, [r4, #16]
 800a874:	04d9      	lsls	r1, r3, #19
 800a876:	6022      	str	r2, [r4, #0]
 800a878:	d504      	bpl.n	800a884 <__sflush_r+0x7c>
 800a87a:	1c42      	adds	r2, r0, #1
 800a87c:	d101      	bne.n	800a882 <__sflush_r+0x7a>
 800a87e:	682b      	ldr	r3, [r5, #0]
 800a880:	b903      	cbnz	r3, 800a884 <__sflush_r+0x7c>
 800a882:	6560      	str	r0, [r4, #84]	; 0x54
 800a884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a886:	602f      	str	r7, [r5, #0]
 800a888:	2900      	cmp	r1, #0
 800a88a:	d0ca      	beq.n	800a822 <__sflush_r+0x1a>
 800a88c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a890:	4299      	cmp	r1, r3
 800a892:	d002      	beq.n	800a89a <__sflush_r+0x92>
 800a894:	4628      	mov	r0, r5
 800a896:	f000 f931 	bl	800aafc <_free_r>
 800a89a:	2000      	movs	r0, #0
 800a89c:	6360      	str	r0, [r4, #52]	; 0x34
 800a89e:	e7c1      	b.n	800a824 <__sflush_r+0x1c>
 800a8a0:	6a21      	ldr	r1, [r4, #32]
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	47b0      	blx	r6
 800a8a8:	1c41      	adds	r1, r0, #1
 800a8aa:	d1c7      	bne.n	800a83c <__sflush_r+0x34>
 800a8ac:	682b      	ldr	r3, [r5, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d0c4      	beq.n	800a83c <__sflush_r+0x34>
 800a8b2:	2b1d      	cmp	r3, #29
 800a8b4:	d001      	beq.n	800a8ba <__sflush_r+0xb2>
 800a8b6:	2b16      	cmp	r3, #22
 800a8b8:	d101      	bne.n	800a8be <__sflush_r+0xb6>
 800a8ba:	602f      	str	r7, [r5, #0]
 800a8bc:	e7b1      	b.n	800a822 <__sflush_r+0x1a>
 800a8be:	89a3      	ldrh	r3, [r4, #12]
 800a8c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c4:	81a3      	strh	r3, [r4, #12]
 800a8c6:	e7ad      	b.n	800a824 <__sflush_r+0x1c>
 800a8c8:	690f      	ldr	r7, [r1, #16]
 800a8ca:	2f00      	cmp	r7, #0
 800a8cc:	d0a9      	beq.n	800a822 <__sflush_r+0x1a>
 800a8ce:	0793      	lsls	r3, r2, #30
 800a8d0:	bf18      	it	ne
 800a8d2:	2300      	movne	r3, #0
 800a8d4:	680e      	ldr	r6, [r1, #0]
 800a8d6:	bf08      	it	eq
 800a8d8:	694b      	ldreq	r3, [r1, #20]
 800a8da:	eba6 0807 	sub.w	r8, r6, r7
 800a8de:	600f      	str	r7, [r1, #0]
 800a8e0:	608b      	str	r3, [r1, #8]
 800a8e2:	f1b8 0f00 	cmp.w	r8, #0
 800a8e6:	dd9c      	ble.n	800a822 <__sflush_r+0x1a>
 800a8e8:	4643      	mov	r3, r8
 800a8ea:	463a      	mov	r2, r7
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	6a21      	ldr	r1, [r4, #32]
 800a8f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8f2:	47b0      	blx	r6
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	dc06      	bgt.n	800a906 <__sflush_r+0xfe>
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a902:	81a3      	strh	r3, [r4, #12]
 800a904:	e78e      	b.n	800a824 <__sflush_r+0x1c>
 800a906:	4407      	add	r7, r0
 800a908:	eba8 0800 	sub.w	r8, r8, r0
 800a90c:	e7e9      	b.n	800a8e2 <__sflush_r+0xda>
 800a90e:	bf00      	nop
 800a910:	20400001 	.word	0x20400001

0800a914 <_fflush_r>:
 800a914:	b538      	push	{r3, r4, r5, lr}
 800a916:	690b      	ldr	r3, [r1, #16]
 800a918:	4605      	mov	r5, r0
 800a91a:	460c      	mov	r4, r1
 800a91c:	b913      	cbnz	r3, 800a924 <_fflush_r+0x10>
 800a91e:	2500      	movs	r5, #0
 800a920:	4628      	mov	r0, r5
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	b118      	cbz	r0, 800a92e <_fflush_r+0x1a>
 800a926:	6983      	ldr	r3, [r0, #24]
 800a928:	b90b      	cbnz	r3, 800a92e <_fflush_r+0x1a>
 800a92a:	f7ff f8f3 	bl	8009b14 <__sinit>
 800a92e:	4b14      	ldr	r3, [pc, #80]	; (800a980 <_fflush_r+0x6c>)
 800a930:	429c      	cmp	r4, r3
 800a932:	d11b      	bne.n	800a96c <_fflush_r+0x58>
 800a934:	686c      	ldr	r4, [r5, #4]
 800a936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d0ef      	beq.n	800a91e <_fflush_r+0xa>
 800a93e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a940:	07d0      	lsls	r0, r2, #31
 800a942:	d404      	bmi.n	800a94e <_fflush_r+0x3a>
 800a944:	0599      	lsls	r1, r3, #22
 800a946:	d402      	bmi.n	800a94e <_fflush_r+0x3a>
 800a948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a94a:	f7ff f981 	bl	8009c50 <__retarget_lock_acquire_recursive>
 800a94e:	4628      	mov	r0, r5
 800a950:	4621      	mov	r1, r4
 800a952:	f7ff ff59 	bl	800a808 <__sflush_r>
 800a956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a958:	4605      	mov	r5, r0
 800a95a:	07da      	lsls	r2, r3, #31
 800a95c:	d4e0      	bmi.n	800a920 <_fflush_r+0xc>
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	059b      	lsls	r3, r3, #22
 800a962:	d4dd      	bmi.n	800a920 <_fflush_r+0xc>
 800a964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a966:	f7ff f974 	bl	8009c52 <__retarget_lock_release_recursive>
 800a96a:	e7d9      	b.n	800a920 <_fflush_r+0xc>
 800a96c:	4b05      	ldr	r3, [pc, #20]	; (800a984 <_fflush_r+0x70>)
 800a96e:	429c      	cmp	r4, r3
 800a970:	d101      	bne.n	800a976 <_fflush_r+0x62>
 800a972:	68ac      	ldr	r4, [r5, #8]
 800a974:	e7df      	b.n	800a936 <_fflush_r+0x22>
 800a976:	4b04      	ldr	r3, [pc, #16]	; (800a988 <_fflush_r+0x74>)
 800a978:	429c      	cmp	r4, r3
 800a97a:	bf08      	it	eq
 800a97c:	68ec      	ldreq	r4, [r5, #12]
 800a97e:	e7da      	b.n	800a936 <_fflush_r+0x22>
 800a980:	0800ad38 	.word	0x0800ad38
 800a984:	0800ad58 	.word	0x0800ad58
 800a988:	0800ad18 	.word	0x0800ad18

0800a98c <_lseek_r>:
 800a98c:	b538      	push	{r3, r4, r5, lr}
 800a98e:	4604      	mov	r4, r0
 800a990:	4608      	mov	r0, r1
 800a992:	4611      	mov	r1, r2
 800a994:	2200      	movs	r2, #0
 800a996:	4d05      	ldr	r5, [pc, #20]	; (800a9ac <_lseek_r+0x20>)
 800a998:	602a      	str	r2, [r5, #0]
 800a99a:	461a      	mov	r2, r3
 800a99c:	f7f6 fc17 	bl	80011ce <_lseek>
 800a9a0:	1c43      	adds	r3, r0, #1
 800a9a2:	d102      	bne.n	800a9aa <_lseek_r+0x1e>
 800a9a4:	682b      	ldr	r3, [r5, #0]
 800a9a6:	b103      	cbz	r3, 800a9aa <_lseek_r+0x1e>
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	200015a4 	.word	0x200015a4

0800a9b0 <__swhatbuf_r>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	460e      	mov	r6, r1
 800a9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b8:	4614      	mov	r4, r2
 800a9ba:	2900      	cmp	r1, #0
 800a9bc:	461d      	mov	r5, r3
 800a9be:	b096      	sub	sp, #88	; 0x58
 800a9c0:	da07      	bge.n	800a9d2 <__swhatbuf_r+0x22>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	602b      	str	r3, [r5, #0]
 800a9c6:	89b3      	ldrh	r3, [r6, #12]
 800a9c8:	061a      	lsls	r2, r3, #24
 800a9ca:	d410      	bmi.n	800a9ee <__swhatbuf_r+0x3e>
 800a9cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9d0:	e00e      	b.n	800a9f0 <__swhatbuf_r+0x40>
 800a9d2:	466a      	mov	r2, sp
 800a9d4:	f000 f916 	bl	800ac04 <_fstat_r>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	dbf2      	blt.n	800a9c2 <__swhatbuf_r+0x12>
 800a9dc:	9a01      	ldr	r2, [sp, #4]
 800a9de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9e6:	425a      	negs	r2, r3
 800a9e8:	415a      	adcs	r2, r3
 800a9ea:	602a      	str	r2, [r5, #0]
 800a9ec:	e7ee      	b.n	800a9cc <__swhatbuf_r+0x1c>
 800a9ee:	2340      	movs	r3, #64	; 0x40
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	6023      	str	r3, [r4, #0]
 800a9f4:	b016      	add	sp, #88	; 0x58
 800a9f6:	bd70      	pop	{r4, r5, r6, pc}

0800a9f8 <__smakebuf_r>:
 800a9f8:	898b      	ldrh	r3, [r1, #12]
 800a9fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9fc:	079d      	lsls	r5, r3, #30
 800a9fe:	4606      	mov	r6, r0
 800aa00:	460c      	mov	r4, r1
 800aa02:	d507      	bpl.n	800aa14 <__smakebuf_r+0x1c>
 800aa04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa08:	6023      	str	r3, [r4, #0]
 800aa0a:	6123      	str	r3, [r4, #16]
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	6163      	str	r3, [r4, #20]
 800aa10:	b002      	add	sp, #8
 800aa12:	bd70      	pop	{r4, r5, r6, pc}
 800aa14:	466a      	mov	r2, sp
 800aa16:	ab01      	add	r3, sp, #4
 800aa18:	f7ff ffca 	bl	800a9b0 <__swhatbuf_r>
 800aa1c:	9900      	ldr	r1, [sp, #0]
 800aa1e:	4605      	mov	r5, r0
 800aa20:	4630      	mov	r0, r6
 800aa22:	f7ff f917 	bl	8009c54 <_malloc_r>
 800aa26:	b948      	cbnz	r0, 800aa3c <__smakebuf_r+0x44>
 800aa28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa2c:	059a      	lsls	r2, r3, #22
 800aa2e:	d4ef      	bmi.n	800aa10 <__smakebuf_r+0x18>
 800aa30:	f023 0303 	bic.w	r3, r3, #3
 800aa34:	f043 0302 	orr.w	r3, r3, #2
 800aa38:	81a3      	strh	r3, [r4, #12]
 800aa3a:	e7e3      	b.n	800aa04 <__smakebuf_r+0xc>
 800aa3c:	4b0d      	ldr	r3, [pc, #52]	; (800aa74 <__smakebuf_r+0x7c>)
 800aa3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa40:	89a3      	ldrh	r3, [r4, #12]
 800aa42:	6020      	str	r0, [r4, #0]
 800aa44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa48:	81a3      	strh	r3, [r4, #12]
 800aa4a:	9b00      	ldr	r3, [sp, #0]
 800aa4c:	6120      	str	r0, [r4, #16]
 800aa4e:	6163      	str	r3, [r4, #20]
 800aa50:	9b01      	ldr	r3, [sp, #4]
 800aa52:	b15b      	cbz	r3, 800aa6c <__smakebuf_r+0x74>
 800aa54:	4630      	mov	r0, r6
 800aa56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa5a:	f000 f8e5 	bl	800ac28 <_isatty_r>
 800aa5e:	b128      	cbz	r0, 800aa6c <__smakebuf_r+0x74>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	f023 0303 	bic.w	r3, r3, #3
 800aa66:	f043 0301 	orr.w	r3, r3, #1
 800aa6a:	81a3      	strh	r3, [r4, #12]
 800aa6c:	89a0      	ldrh	r0, [r4, #12]
 800aa6e:	4305      	orrs	r5, r0
 800aa70:	81a5      	strh	r5, [r4, #12]
 800aa72:	e7cd      	b.n	800aa10 <__smakebuf_r+0x18>
 800aa74:	08009aad 	.word	0x08009aad

0800aa78 <memchr>:
 800aa78:	4603      	mov	r3, r0
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	b2c9      	uxtb	r1, r1
 800aa7e:	4402      	add	r2, r0
 800aa80:	4293      	cmp	r3, r2
 800aa82:	4618      	mov	r0, r3
 800aa84:	d101      	bne.n	800aa8a <memchr+0x12>
 800aa86:	2000      	movs	r0, #0
 800aa88:	e003      	b.n	800aa92 <memchr+0x1a>
 800aa8a:	7804      	ldrb	r4, [r0, #0]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	428c      	cmp	r4, r1
 800aa90:	d1f6      	bne.n	800aa80 <memchr+0x8>
 800aa92:	bd10      	pop	{r4, pc}

0800aa94 <memcpy>:
 800aa94:	440a      	add	r2, r1
 800aa96:	4291      	cmp	r1, r2
 800aa98:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa9c:	d100      	bne.n	800aaa0 <memcpy+0xc>
 800aa9e:	4770      	bx	lr
 800aaa0:	b510      	push	{r4, lr}
 800aaa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaa6:	4291      	cmp	r1, r2
 800aaa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aaac:	d1f9      	bne.n	800aaa2 <memcpy+0xe>
 800aaae:	bd10      	pop	{r4, pc}

0800aab0 <memmove>:
 800aab0:	4288      	cmp	r0, r1
 800aab2:	b510      	push	{r4, lr}
 800aab4:	eb01 0402 	add.w	r4, r1, r2
 800aab8:	d902      	bls.n	800aac0 <memmove+0x10>
 800aaba:	4284      	cmp	r4, r0
 800aabc:	4623      	mov	r3, r4
 800aabe:	d807      	bhi.n	800aad0 <memmove+0x20>
 800aac0:	1e43      	subs	r3, r0, #1
 800aac2:	42a1      	cmp	r1, r4
 800aac4:	d008      	beq.n	800aad8 <memmove+0x28>
 800aac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aace:	e7f8      	b.n	800aac2 <memmove+0x12>
 800aad0:	4601      	mov	r1, r0
 800aad2:	4402      	add	r2, r0
 800aad4:	428a      	cmp	r2, r1
 800aad6:	d100      	bne.n	800aada <memmove+0x2a>
 800aad8:	bd10      	pop	{r4, pc}
 800aada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aae2:	e7f7      	b.n	800aad4 <memmove+0x24>

0800aae4 <__malloc_lock>:
 800aae4:	4801      	ldr	r0, [pc, #4]	; (800aaec <__malloc_lock+0x8>)
 800aae6:	f7ff b8b3 	b.w	8009c50 <__retarget_lock_acquire_recursive>
 800aaea:	bf00      	nop
 800aaec:	2000159c 	.word	0x2000159c

0800aaf0 <__malloc_unlock>:
 800aaf0:	4801      	ldr	r0, [pc, #4]	; (800aaf8 <__malloc_unlock+0x8>)
 800aaf2:	f7ff b8ae 	b.w	8009c52 <__retarget_lock_release_recursive>
 800aaf6:	bf00      	nop
 800aaf8:	2000159c 	.word	0x2000159c

0800aafc <_free_r>:
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	4605      	mov	r5, r0
 800ab00:	2900      	cmp	r1, #0
 800ab02:	d043      	beq.n	800ab8c <_free_r+0x90>
 800ab04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab08:	1f0c      	subs	r4, r1, #4
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	bfb8      	it	lt
 800ab0e:	18e4      	addlt	r4, r4, r3
 800ab10:	f7ff ffe8 	bl	800aae4 <__malloc_lock>
 800ab14:	4a1e      	ldr	r2, [pc, #120]	; (800ab90 <_free_r+0x94>)
 800ab16:	6813      	ldr	r3, [r2, #0]
 800ab18:	4610      	mov	r0, r2
 800ab1a:	b933      	cbnz	r3, 800ab2a <_free_r+0x2e>
 800ab1c:	6063      	str	r3, [r4, #4]
 800ab1e:	6014      	str	r4, [r2, #0]
 800ab20:	4628      	mov	r0, r5
 800ab22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab26:	f7ff bfe3 	b.w	800aaf0 <__malloc_unlock>
 800ab2a:	42a3      	cmp	r3, r4
 800ab2c:	d90a      	bls.n	800ab44 <_free_r+0x48>
 800ab2e:	6821      	ldr	r1, [r4, #0]
 800ab30:	1862      	adds	r2, r4, r1
 800ab32:	4293      	cmp	r3, r2
 800ab34:	bf01      	itttt	eq
 800ab36:	681a      	ldreq	r2, [r3, #0]
 800ab38:	685b      	ldreq	r3, [r3, #4]
 800ab3a:	1852      	addeq	r2, r2, r1
 800ab3c:	6022      	streq	r2, [r4, #0]
 800ab3e:	6063      	str	r3, [r4, #4]
 800ab40:	6004      	str	r4, [r0, #0]
 800ab42:	e7ed      	b.n	800ab20 <_free_r+0x24>
 800ab44:	461a      	mov	r2, r3
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	b10b      	cbz	r3, 800ab4e <_free_r+0x52>
 800ab4a:	42a3      	cmp	r3, r4
 800ab4c:	d9fa      	bls.n	800ab44 <_free_r+0x48>
 800ab4e:	6811      	ldr	r1, [r2, #0]
 800ab50:	1850      	adds	r0, r2, r1
 800ab52:	42a0      	cmp	r0, r4
 800ab54:	d10b      	bne.n	800ab6e <_free_r+0x72>
 800ab56:	6820      	ldr	r0, [r4, #0]
 800ab58:	4401      	add	r1, r0
 800ab5a:	1850      	adds	r0, r2, r1
 800ab5c:	4283      	cmp	r3, r0
 800ab5e:	6011      	str	r1, [r2, #0]
 800ab60:	d1de      	bne.n	800ab20 <_free_r+0x24>
 800ab62:	6818      	ldr	r0, [r3, #0]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	4401      	add	r1, r0
 800ab68:	6011      	str	r1, [r2, #0]
 800ab6a:	6053      	str	r3, [r2, #4]
 800ab6c:	e7d8      	b.n	800ab20 <_free_r+0x24>
 800ab6e:	d902      	bls.n	800ab76 <_free_r+0x7a>
 800ab70:	230c      	movs	r3, #12
 800ab72:	602b      	str	r3, [r5, #0]
 800ab74:	e7d4      	b.n	800ab20 <_free_r+0x24>
 800ab76:	6820      	ldr	r0, [r4, #0]
 800ab78:	1821      	adds	r1, r4, r0
 800ab7a:	428b      	cmp	r3, r1
 800ab7c:	bf01      	itttt	eq
 800ab7e:	6819      	ldreq	r1, [r3, #0]
 800ab80:	685b      	ldreq	r3, [r3, #4]
 800ab82:	1809      	addeq	r1, r1, r0
 800ab84:	6021      	streq	r1, [r4, #0]
 800ab86:	6063      	str	r3, [r4, #4]
 800ab88:	6054      	str	r4, [r2, #4]
 800ab8a:	e7c9      	b.n	800ab20 <_free_r+0x24>
 800ab8c:	bd38      	pop	{r3, r4, r5, pc}
 800ab8e:	bf00      	nop
 800ab90:	2000049c 	.word	0x2000049c

0800ab94 <_realloc_r>:
 800ab94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab96:	4607      	mov	r7, r0
 800ab98:	4614      	mov	r4, r2
 800ab9a:	460e      	mov	r6, r1
 800ab9c:	b921      	cbnz	r1, 800aba8 <_realloc_r+0x14>
 800ab9e:	4611      	mov	r1, r2
 800aba0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aba4:	f7ff b856 	b.w	8009c54 <_malloc_r>
 800aba8:	b922      	cbnz	r2, 800abb4 <_realloc_r+0x20>
 800abaa:	f7ff ffa7 	bl	800aafc <_free_r>
 800abae:	4625      	mov	r5, r4
 800abb0:	4628      	mov	r0, r5
 800abb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abb4:	f000 f848 	bl	800ac48 <_malloc_usable_size_r>
 800abb8:	42a0      	cmp	r0, r4
 800abba:	d20f      	bcs.n	800abdc <_realloc_r+0x48>
 800abbc:	4621      	mov	r1, r4
 800abbe:	4638      	mov	r0, r7
 800abc0:	f7ff f848 	bl	8009c54 <_malloc_r>
 800abc4:	4605      	mov	r5, r0
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d0f2      	beq.n	800abb0 <_realloc_r+0x1c>
 800abca:	4631      	mov	r1, r6
 800abcc:	4622      	mov	r2, r4
 800abce:	f7ff ff61 	bl	800aa94 <memcpy>
 800abd2:	4631      	mov	r1, r6
 800abd4:	4638      	mov	r0, r7
 800abd6:	f7ff ff91 	bl	800aafc <_free_r>
 800abda:	e7e9      	b.n	800abb0 <_realloc_r+0x1c>
 800abdc:	4635      	mov	r5, r6
 800abde:	e7e7      	b.n	800abb0 <_realloc_r+0x1c>

0800abe0 <_read_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4604      	mov	r4, r0
 800abe4:	4608      	mov	r0, r1
 800abe6:	4611      	mov	r1, r2
 800abe8:	2200      	movs	r2, #0
 800abea:	4d05      	ldr	r5, [pc, #20]	; (800ac00 <_read_r+0x20>)
 800abec:	602a      	str	r2, [r5, #0]
 800abee:	461a      	mov	r2, r3
 800abf0:	f7f6 faac 	bl	800114c <_read>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	d102      	bne.n	800abfe <_read_r+0x1e>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	b103      	cbz	r3, 800abfe <_read_r+0x1e>
 800abfc:	6023      	str	r3, [r4, #0]
 800abfe:	bd38      	pop	{r3, r4, r5, pc}
 800ac00:	200015a4 	.word	0x200015a4

0800ac04 <_fstat_r>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	2300      	movs	r3, #0
 800ac08:	4d06      	ldr	r5, [pc, #24]	; (800ac24 <_fstat_r+0x20>)
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	4608      	mov	r0, r1
 800ac0e:	4611      	mov	r1, r2
 800ac10:	602b      	str	r3, [r5, #0]
 800ac12:	f7f6 fac3 	bl	800119c <_fstat>
 800ac16:	1c43      	adds	r3, r0, #1
 800ac18:	d102      	bne.n	800ac20 <_fstat_r+0x1c>
 800ac1a:	682b      	ldr	r3, [r5, #0]
 800ac1c:	b103      	cbz	r3, 800ac20 <_fstat_r+0x1c>
 800ac1e:	6023      	str	r3, [r4, #0]
 800ac20:	bd38      	pop	{r3, r4, r5, pc}
 800ac22:	bf00      	nop
 800ac24:	200015a4 	.word	0x200015a4

0800ac28 <_isatty_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	4d05      	ldr	r5, [pc, #20]	; (800ac44 <_isatty_r+0x1c>)
 800ac2e:	4604      	mov	r4, r0
 800ac30:	4608      	mov	r0, r1
 800ac32:	602b      	str	r3, [r5, #0]
 800ac34:	f7f6 fac1 	bl	80011ba <_isatty>
 800ac38:	1c43      	adds	r3, r0, #1
 800ac3a:	d102      	bne.n	800ac42 <_isatty_r+0x1a>
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	b103      	cbz	r3, 800ac42 <_isatty_r+0x1a>
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	bd38      	pop	{r3, r4, r5, pc}
 800ac44:	200015a4 	.word	0x200015a4

0800ac48 <_malloc_usable_size_r>:
 800ac48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac4c:	1f18      	subs	r0, r3, #4
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	bfbc      	itt	lt
 800ac52:	580b      	ldrlt	r3, [r1, r0]
 800ac54:	18c0      	addlt	r0, r0, r3
 800ac56:	4770      	bx	lr

0800ac58 <_init>:
 800ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5a:	bf00      	nop
 800ac5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac5e:	bc08      	pop	{r3}
 800ac60:	469e      	mov	lr, r3
 800ac62:	4770      	bx	lr

0800ac64 <_fini>:
 800ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac66:	bf00      	nop
 800ac68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6a:	bc08      	pop	{r3}
 800ac6c:	469e      	mov	lr, r3
 800ac6e:	4770      	bx	lr
