
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800a9ec  0800a9ec  0001a9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab30  0800ab30  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab30  0800ab30  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab30  0800ab30  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab30  0800ab30  0001ab30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab34  0800ab34  0001ab34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800ab38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001370  20000228  0800ad5c  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001598  0800ad5c  00021598  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   000232d4  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005346  00000000  00000000  00043521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00048868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  00049f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec0c  00000000  00000000  0004b400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de69  00000000  00000000  0006a00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097e26  00000000  00000000  00087e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011fc9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006474  00000000  00000000  0011fcf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000228 	.word	0x20000228
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a9d4 	.word	0x0800a9d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000022c 	.word	0x2000022c
 8000148:	0800a9d4 	.word	0x0800a9d4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2102      	movs	r1, #2
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <ToggleLDAC+0x1c>)
 8000166:	f002 fc84 	bl	8002a72 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 800016a:	2201      	movs	r2, #1
 800016c:	2102      	movs	r1, #2
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <ToggleLDAC+0x1c>)
 8000170:	f002 fc7f 	bl	8002a72 <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800

0800017c <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	4808      	ldr	r0, [pc, #32]	; (80001b0 <SendSPI+0x34>)
 800018e:	f002 fc70 	bl	8002a72 <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000192:	1cb9      	adds	r1, r7, #2
 8000194:	2301      	movs	r3, #1
 8000196:	2201      	movs	r2, #1
 8000198:	6878      	ldr	r0, [r7, #4]
 800019a:	f004 fd4f 	bl	8004c3c <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 800019e:	2201      	movs	r2, #1
 80001a0:	2110      	movs	r1, #16
 80001a2:	4803      	ldr	r0, [pc, #12]	; (80001b0 <SendSPI+0x34>)
 80001a4:	f002 fc65 	bl	8002a72 <HAL_GPIO_WritePin>

}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	40010800 	.word	0x40010800

080001b4 <DAC_AD5322_Ch1Ch2>:
  	SendSPI(pSPI,out);
  	SendSPI(pSPI,out);
  	ToggleLDAC();
}
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	460b      	mov	r3, r1
 80001be:	807b      	strh	r3, [r7, #2]
 80001c0:	4613      	mov	r3, r2
 80001c2:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 80001c4:	887b      	ldrh	r3, [r7, #2]
 80001c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001ca:	d302      	bcc.n	80001d2 <DAC_AD5322_Ch1Ch2+0x1e>
 80001cc:	f640 73ff 	movw	r3, #4095	; 0xfff
 80001d0:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 80001d2:	883b      	ldrh	r3, [r7, #0]
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d302      	bcc.n	80001e0 <DAC_AD5322_Ch1Ch2+0x2c>
 80001da:	f640 73ff 	movw	r3, #4095	; 0xfff
 80001de:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 80001e0:	2300      	movs	r3, #0
 80001e2:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 80001e4:	2301      	movs	r3, #1
 80001e6:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 80001e8:	2300      	movs	r3, #0
 80001ea:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 80001ec:	2300      	movs	r3, #0
 80001ee:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 80001f0:	8afb      	ldrh	r3, [r7, #22]
 80001f2:	03db      	lsls	r3, r3, #15
 80001f4:	b21a      	sxth	r2, r3
 80001f6:	8abb      	ldrh	r3, [r7, #20]
 80001f8:	039b      	lsls	r3, r3, #14
 80001fa:	b21b      	sxth	r3, r3
 80001fc:	4313      	orrs	r3, r2
 80001fe:	b21a      	sxth	r2, r3
 8000200:	8a7b      	ldrh	r3, [r7, #18]
 8000202:	035b      	lsls	r3, r3, #13
 8000204:	b21b      	sxth	r3, r3
 8000206:	4313      	orrs	r3, r2
 8000208:	b21a      	sxth	r2, r3
 800020a:	8a3b      	ldrh	r3, [r7, #16]
 800020c:	031b      	lsls	r3, r3, #12
 800020e:	b21b      	sxth	r3, r3
 8000210:	4313      	orrs	r3, r2
 8000212:	b21b      	sxth	r3, r3
 8000214:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800021a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800021e:	f023 030f 	bic.w	r3, r3, #15
 8000222:	b21a      	sxth	r2, r3
 8000224:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800022c:	b21b      	sxth	r3, r3
 800022e:	4313      	orrs	r3, r2
 8000230:	b21b      	sxth	r3, r3
 8000232:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000234:	89bb      	ldrh	r3, [r7, #12]
 8000236:	4619      	mov	r1, r3
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f7ff ff9f 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 800023e:	89bb      	ldrh	r3, [r7, #12]
 8000240:	4619      	mov	r1, r3
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	f7ff ff9a 	bl	800017c <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000248:	2301      	movs	r3, #1
 800024a:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 800024c:	2301      	movs	r3, #1
 800024e:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000250:	2300      	movs	r3, #0
 8000252:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000254:	2300      	movs	r3, #0
 8000256:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000258:	8afb      	ldrh	r3, [r7, #22]
 800025a:	03db      	lsls	r3, r3, #15
 800025c:	b21a      	sxth	r2, r3
 800025e:	8abb      	ldrh	r3, [r7, #20]
 8000260:	039b      	lsls	r3, r3, #14
 8000262:	b21b      	sxth	r3, r3
 8000264:	4313      	orrs	r3, r2
 8000266:	b21a      	sxth	r2, r3
 8000268:	8a7b      	ldrh	r3, [r7, #18]
 800026a:	035b      	lsls	r3, r3, #13
 800026c:	b21b      	sxth	r3, r3
 800026e:	4313      	orrs	r3, r2
 8000270:	b21a      	sxth	r2, r3
 8000272:	8a3b      	ldrh	r3, [r7, #16]
 8000274:	031b      	lsls	r3, r3, #12
 8000276:	b21b      	sxth	r3, r3
 8000278:	4313      	orrs	r3, r2
 800027a:	b21b      	sxth	r3, r3
 800027c:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 800027e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000282:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000286:	f023 030f 	bic.w	r3, r3, #15
 800028a:	b21a      	sxth	r2, r3
 800028c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000294:	b21b      	sxth	r3, r3
 8000296:	4313      	orrs	r3, r2
 8000298:	b21b      	sxth	r3, r3
 800029a:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 800029c:	89bb      	ldrh	r3, [r7, #12]
 800029e:	4619      	mov	r1, r3
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f7ff ff6b 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 80002a6:	89bb      	ldrh	r3, [r7, #12]
 80002a8:	4619      	mov	r1, r3
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f7ff ff66 	bl	800017c <SendSPI>
  	ToggleLDAC();
 80002b0:	f7ff ff54 	bl	800015c <ToggleLDAC>
}
 80002b4:	bf00      	nop
 80002b6:	3718      	adds	r7, #24
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <btn_run_get_state>:

/*
 * @brief   Get run button state
 * @retval  One of three state : not pressed(0x00), short press(0x01), long press(0x02)
 */
uint8_t btn_run_get_state(void) {
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
    uint8_t state = BTN_NOT_PRESSED;
 80002c2:	2300      	movs	r3, #0
 80002c4:	71fb      	strb	r3, [r7, #7]

    if ( btn_pin_12.was_short_pressed == 1 ) {
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <btn_run_get_state+0x38>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d105      	bne.n	80002da <btn_run_get_state+0x1e>
        state = BTN_SHORT_PRESS;
 80002ce:	2301      	movs	r3, #1
 80002d0:	71fb      	strb	r3, [r7, #7]
        btn_pin_12.was_short_pressed = 0;
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <btn_run_get_state+0x38>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
 80002d8:	e005      	b.n	80002e6 <btn_run_get_state+0x2a>
    }
    else if ( btn_pin_12.is_long_press == 1 ) {
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <btn_run_get_state+0x38>)
 80002dc:	785b      	ldrb	r3, [r3, #1]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d101      	bne.n	80002e6 <btn_run_get_state+0x2a>
        state = BTN_LONG_PRESS;
 80002e2:	2302      	movs	r3, #2
 80002e4:	71fb      	strb	r3, [r7, #7]
    }

    return state;
 80002e6:	79fb      	ldrb	r3, [r7, #7]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000248 	.word	0x20000248

080002f8 <btn_up_get_state>:

/*
 * @brief   Get up button state
 * @retval  One of three state : not pressed, short press, long press
 */
uint8_t btn_up_get_state(void) {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
    uint8_t state = BTN_NOT_PRESSED;
 80002fe:	2300      	movs	r3, #0
 8000300:	71fb      	strb	r3, [r7, #7]

    if ( btn_pin_13.was_short_pressed == 1 ) {
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <btn_up_get_state+0x30>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d102      	bne.n	8000310 <btn_up_get_state+0x18>
        state = BTN_SHORT_PRESS;
 800030a:	2301      	movs	r3, #1
 800030c:	71fb      	strb	r3, [r7, #7]
 800030e:	e005      	b.n	800031c <btn_up_get_state+0x24>
    }
    else if ( btn_pin_13.is_long_press == 1 ) {
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <btn_up_get_state+0x30>)
 8000312:	785b      	ldrb	r3, [r3, #1]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d101      	bne.n	800031c <btn_up_get_state+0x24>
        state = BTN_LONG_PRESS;
 8000318:	2302      	movs	r3, #2
 800031a:	71fb      	strb	r3, [r7, #7]
    }

    return state;
 800031c:	79fb      	ldrb	r3, [r7, #7]
}
 800031e:	4618      	mov	r0, r3
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr
 8000328:	20000250 	.word	0x20000250

0800032c <btn_down_get_state>:

/*
 * @brief   Get down button state
 * @retval  One of three state : not pressed, short press, long press
 */
uint8_t btn_down_get_state(void) {
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
    uint8_t state = BTN_NOT_PRESSED;
 8000332:	2300      	movs	r3, #0
 8000334:	71fb      	strb	r3, [r7, #7]

    if ( btn_pin_14.was_short_pressed == 1 ) {
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <btn_down_get_state+0x30>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d102      	bne.n	8000344 <btn_down_get_state+0x18>
        state = BTN_SHORT_PRESS;
 800033e:	2301      	movs	r3, #1
 8000340:	71fb      	strb	r3, [r7, #7]
 8000342:	e005      	b.n	8000350 <btn_down_get_state+0x24>
    }
    else if ( btn_pin_14.is_long_press == 1 ) {
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <btn_down_get_state+0x30>)
 8000346:	785b      	ldrb	r3, [r3, #1]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d101      	bne.n	8000350 <btn_down_get_state+0x24>
        state = BTN_LONG_PRESS;
 800034c:	2302      	movs	r3, #2
 800034e:	71fb      	strb	r3, [r7, #7]
    }

    return state;
 8000350:	79fb      	ldrb	r3, [r7, #7]
}
 8000352:	4618      	mov	r0, r3
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	20000258 	.word	0x20000258

08000360 <HAL_GPIO_EXTI_Callback>:

/*
 * @brief   GPIO EXTI Callback for buttons
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000370:	d058      	beq.n	8000424 <HAL_GPIO_EXTI_Callback+0xc4>
 8000372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000376:	f300 8081 	bgt.w	800047c <HAL_GPIO_EXTI_Callback+0x11c>
 800037a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800037e:	d003      	beq.n	8000388 <HAL_GPIO_EXTI_Callback+0x28>
 8000380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000384:	d027      	beq.n	80003d6 <HAL_GPIO_EXTI_Callback+0x76>
                        btn_pin_13.is_long_press = 0;
                    }
                }
                break;
    };
}
 8000386:	e079      	b.n	800047c <HAL_GPIO_EXTI_Callback+0x11c>
            if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET ) {
 8000388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800038c:	483d      	ldr	r0, [pc, #244]	; (8000484 <HAL_GPIO_EXTI_Callback+0x124>)
 800038e:	f002 fb59 	bl	8002a44 <HAL_GPIO_ReadPin>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d103      	bne.n	80003a0 <HAL_GPIO_EXTI_Callback+0x40>
                btn_pin_12.is_count_started = 1;
 8000398:	4b3b      	ldr	r3, [pc, #236]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 800039a:	2201      	movs	r2, #1
 800039c:	709a      	strb	r2, [r3, #2]
            break;
 800039e:	e068      	b.n	8000472 <HAL_GPIO_EXTI_Callback+0x112>
                if ( btn_pin_12.counter > 40 ||
 80003a0:	4b39      	ldr	r3, [pc, #228]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 80003a2:	889b      	ldrh	r3, [r3, #4]
 80003a4:	2b28      	cmp	r3, #40	; 0x28
 80003a6:	d804      	bhi.n	80003b2 <HAL_GPIO_EXTI_Callback+0x52>
                     btn_pin_12.counter < 800 ) {
 80003a8:	4b37      	ldr	r3, [pc, #220]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 80003aa:	889b      	ldrh	r3, [r3, #4]
                if ( btn_pin_12.counter > 40 ||
 80003ac:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80003b0:	d209      	bcs.n	80003c6 <HAL_GPIO_EXTI_Callback+0x66>
                    btn_pin_12.was_short_pressed = 1;
 80003b2:	4b35      	ldr	r3, [pc, #212]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	701a      	strb	r2, [r3, #0]
                    btn_pin_12.counter    = 0;
 80003b8:	4b33      	ldr	r3, [pc, #204]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	809a      	strh	r2, [r3, #4]
                    btn_pin_12.is_count_started = 0;
 80003be:	4b32      	ldr	r3, [pc, #200]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	709a      	strb	r2, [r3, #2]
                    break;
 80003c4:	e05a      	b.n	800047c <HAL_GPIO_EXTI_Callback+0x11c>
                if ( btn_pin_12.is_long_press == 1 ) {
 80003c6:	4b30      	ldr	r3, [pc, #192]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 80003c8:	785b      	ldrb	r3, [r3, #1]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d151      	bne.n	8000472 <HAL_GPIO_EXTI_Callback+0x112>
                    btn_pin_12.is_long_press = 0;
 80003ce:	4b2e      	ldr	r3, [pc, #184]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	705a      	strb	r2, [r3, #1]
            break;
 80003d4:	e04d      	b.n	8000472 <HAL_GPIO_EXTI_Callback+0x112>
                if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET ) {
 80003d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003da:	482a      	ldr	r0, [pc, #168]	; (8000484 <HAL_GPIO_EXTI_Callback+0x124>)
 80003dc:	f002 fb32 	bl	8002a44 <HAL_GPIO_ReadPin>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d103      	bne.n	80003ee <HAL_GPIO_EXTI_Callback+0x8e>
                    btn_pin_13.is_count_started = 1;
 80003e6:	4b29      	ldr	r3, [pc, #164]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	709a      	strb	r2, [r3, #2]
                break;
 80003ec:	e043      	b.n	8000476 <HAL_GPIO_EXTI_Callback+0x116>
                    if ( btn_pin_13.counter > 40 ||
 80003ee:	4b27      	ldr	r3, [pc, #156]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 80003f0:	889b      	ldrh	r3, [r3, #4]
 80003f2:	2b28      	cmp	r3, #40	; 0x28
 80003f4:	d804      	bhi.n	8000400 <HAL_GPIO_EXTI_Callback+0xa0>
                         btn_pin_13.counter < 800 ) {
 80003f6:	4b25      	ldr	r3, [pc, #148]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 80003f8:	889b      	ldrh	r3, [r3, #4]
                    if ( btn_pin_13.counter > 40 ||
 80003fa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80003fe:	d209      	bcs.n	8000414 <HAL_GPIO_EXTI_Callback+0xb4>
                        btn_pin_13.was_short_pressed = 1;
 8000400:	4b22      	ldr	r3, [pc, #136]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 8000402:	2201      	movs	r2, #1
 8000404:	701a      	strb	r2, [r3, #0]
                        btn_pin_13.counter    = 0;
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 8000408:	2200      	movs	r2, #0
 800040a:	809a      	strh	r2, [r3, #4]
                        btn_pin_13.is_count_started = 0;
 800040c:	4b1f      	ldr	r3, [pc, #124]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 800040e:	2200      	movs	r2, #0
 8000410:	709a      	strb	r2, [r3, #2]
                        break;
 8000412:	e033      	b.n	800047c <HAL_GPIO_EXTI_Callback+0x11c>
                    if ( btn_pin_13.is_long_press == 1 ) {
 8000414:	4b1d      	ldr	r3, [pc, #116]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 8000416:	785b      	ldrb	r3, [r3, #1]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d12c      	bne.n	8000476 <HAL_GPIO_EXTI_Callback+0x116>
                        btn_pin_13.is_long_press = 0;
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 800041e:	2200      	movs	r2, #0
 8000420:	705a      	strb	r2, [r3, #1]
                break;
 8000422:	e028      	b.n	8000476 <HAL_GPIO_EXTI_Callback+0x116>
                if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET ) {
 8000424:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000428:	4816      	ldr	r0, [pc, #88]	; (8000484 <HAL_GPIO_EXTI_Callback+0x124>)
 800042a:	f002 fb0b 	bl	8002a44 <HAL_GPIO_ReadPin>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d103      	bne.n	800043c <HAL_GPIO_EXTI_Callback+0xdc>
                    btn_pin_14.is_count_started = 1;
 8000434:	4b16      	ldr	r3, [pc, #88]	; (8000490 <HAL_GPIO_EXTI_Callback+0x130>)
 8000436:	2201      	movs	r2, #1
 8000438:	709a      	strb	r2, [r3, #2]
                break;
 800043a:	e01e      	b.n	800047a <HAL_GPIO_EXTI_Callback+0x11a>
                    if ( btn_pin_14.counter > 40 ||
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <HAL_GPIO_EXTI_Callback+0x130>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	2b28      	cmp	r3, #40	; 0x28
 8000442:	d804      	bhi.n	800044e <HAL_GPIO_EXTI_Callback+0xee>
                         btn_pin_14.counter < 800 ) {
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_GPIO_EXTI_Callback+0x130>)
 8000446:	889b      	ldrh	r3, [r3, #4]
                    if ( btn_pin_14.counter > 40 ||
 8000448:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800044c:	d209      	bcs.n	8000462 <HAL_GPIO_EXTI_Callback+0x102>
                        btn_pin_13.was_short_pressed = 1;
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 8000450:	2201      	movs	r2, #1
 8000452:	701a      	strb	r2, [r3, #0]
                        btn_pin_14.counter    = 0;
 8000454:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <HAL_GPIO_EXTI_Callback+0x130>)
 8000456:	2200      	movs	r2, #0
 8000458:	809a      	strh	r2, [r3, #4]
                        btn_pin_14.is_count_started = 0;
 800045a:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <HAL_GPIO_EXTI_Callback+0x130>)
 800045c:	2200      	movs	r2, #0
 800045e:	709a      	strb	r2, [r3, #2]
                        break;
 8000460:	e00c      	b.n	800047c <HAL_GPIO_EXTI_Callback+0x11c>
                    if ( btn_pin_13.is_long_press == 1 ) {
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 8000464:	785b      	ldrb	r3, [r3, #1]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d107      	bne.n	800047a <HAL_GPIO_EXTI_Callback+0x11a>
                        btn_pin_13.is_long_press = 0;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 800046c:	2200      	movs	r2, #0
 800046e:	705a      	strb	r2, [r3, #1]
                break;
 8000470:	e003      	b.n	800047a <HAL_GPIO_EXTI_Callback+0x11a>
            break;
 8000472:	bf00      	nop
 8000474:	e002      	b.n	800047c <HAL_GPIO_EXTI_Callback+0x11c>
                break;
 8000476:	bf00      	nop
 8000478:	e000      	b.n	800047c <HAL_GPIO_EXTI_Callback+0x11c>
                break;
 800047a:	bf00      	nop
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40010c00 	.word	0x40010c00
 8000488:	20000248 	.word	0x20000248
 800048c:	20000250 	.word	0x20000250
 8000490:	20000258 	.word	0x20000258

08000494 <crc_read_from_flash>:
/*
 * @brief   Read calibration table CRC from flash memory
 * @param   Output variable for CRC
 */
void crc_read_from_flash(uint32_t *crc)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800049a:	af00      	add	r7, sp, #0
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	6018      	str	r0, [r3, #0]
    struct FLASH_Sector s;
    memcpy( &s, (uint32_t*)FLASH_TABLE_START_ADDR, sizeof(struct FLASH_Sector) );
 80004a0:	f107 0308 	add.w	r3, r7, #8
 80004a4:	4a09      	ldr	r2, [pc, #36]	; (80004cc <crc_read_from_flash+0x38>)
 80004a6:	4618      	mov	r0, r3
 80004a8:	4611      	mov	r1, r2
 80004aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ae:	461a      	mov	r2, r3
 80004b0:	f009 fb1a 	bl	8009ae8 <memcpy>
    *crc = s.CheckSum;
 80004b4:	f107 0308 	add.w	r3, r7, #8
 80004b8:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	601a      	str	r2, [r3, #0]
}
 80004c2:	bf00      	nop
 80004c4:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	0801fc00 	.word	0x0801fc00

080004d0 <flash_is_calibTable_null>:
/*
 * @brief   Checks is there any calibration values in flash memory
 * @retval  Status (0x01) or (0x00) if there is table or no
 */
uint8_t flash_is_calibTable_null(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80004d6:	af00      	add	r7, sp, #0
    Table_t t;
    volatile uint32_t addr = FLASH_TABLE_START_ADDR;
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4a0c      	ldr	r2, [pc, #48]	; (800050c <flash_is_calibTable_null+0x3c>)
 80004dc:	601a      	str	r2, [r3, #0]

    /* Копируем значения из флеш-памяти во временную переменную для
     * того, чтобы проверить значение поля MagicNum. Копируем 50 байт
     * с запасом, вдруг если в структуре Table_t изменятся какие-либо
     * поля и адрес поля MagicNum в флеш-памяти будет другой. */
    memcpy( &t, (uint32_t*)addr, 50 );
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4619      	mov	r1, r3
 80004e4:	f107 0308 	add.w	r3, r7, #8
 80004e8:	2232      	movs	r2, #50	; 0x32
 80004ea:	4618      	mov	r0, r3
 80004ec:	f009 fafc 	bl	8009ae8 <memcpy>

    if ( t.MagicNum == MAGIC_KEY ) {
 80004f0:	f107 0308 	add.w	r3, r7, #8
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a06      	ldr	r2, [pc, #24]	; (8000510 <flash_is_calibTable_null+0x40>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d101      	bne.n	8000500 <flash_is_calibTable_null+0x30>
        return 0x01;
 80004fc:	2301      	movs	r3, #1
 80004fe:	e000      	b.n	8000502 <flash_is_calibTable_null+0x32>
    }

    return 0x00;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	0801fc00 	.word	0x0801fc00
 8000510:	48151623 	.word	0x48151623

08000514 <flash_write_calibTable>:
/*
 * @brief   Write calibration table into flash memory
 * @retval  HAL Status
 */
HAL_StatusTypeDef flash_write_calibTable(union NVRAM *ram)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    /* Create some variables */
    volatile uint32_t   addr    = FLASH_TABLE_START_ADDR;
 800051c:	4b4a      	ldr	r3, [pc, #296]	; (8000648 <flash_write_calibTable+0x134>)
 800051e:	61fb      	str	r3, [r7, #28]
    uint32_t            err     = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
    uint32_t            index   = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t             status  = HAL_OK;
 8000528:	2300      	movs	r3, #0
 800052a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Compare flash and ram content */
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 800052e:	e010      	b.n	8000552 <flash_write_calibTable+0x3e>
        if ( ram->data32[index] != *(uint32_t*)addr ) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000534:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000538:	69fb      	ldr	r3, [r7, #28]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	429a      	cmp	r2, r3
 800053e:	d002      	beq.n	8000546 <flash_write_calibTable+0x32>
            ++err;
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	3301      	adds	r3, #1
 8000544:	61bb      	str	r3, [r7, #24]
        }
        index += 1;
 8000546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000548:	3301      	adds	r3, #1
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
        addr += 4;
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	3304      	adds	r3, #4
 8000550:	61fb      	str	r3, [r7, #28]
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	4a3d      	ldr	r2, [pc, #244]	; (800064c <flash_write_calibTable+0x138>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d9ea      	bls.n	8000530 <flash_write_calibTable+0x1c>
    }

    /* If there are differencies -> write new data in flash */
    if (err > 0) {
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d06d      	beq.n	800063c <flash_write_calibTable+0x128>
        /* Unlock flash */
        if ( HAL_FLASH_Unlock() != HAL_OK ) {
 8000560:	f001 ff5c 	bl	800241c <HAL_FLASH_Unlock>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <flash_write_calibTable+0x62>
            status = HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            return status;
 8000570:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000574:	e064      	b.n	8000640 <flash_write_calibTable+0x12c>
        }

        /* Erase flash */
        FLASH_EraseInitTypeDef EraseInitStruct = {
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	4b30      	ldr	r3, [pc, #192]	; (8000648 <flash_write_calibTable+0x134>)
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	2301      	movs	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
                .TypeErase      = FLASH_TYPEERASE_PAGES,
                .PageAddress    = FLASH_TABLE_START_ADDR,
                .NbPages        = 1
        };
        if ( HAL_FLASHEx_Erase(&EraseInitStruct, &err) != HAL_OK ) {
 800058c:	f107 0218 	add.w	r2, r7, #24
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	4611      	mov	r1, r2
 8000596:	4618      	mov	r0, r3
 8000598:	f002 f828 	bl	80025ec <HAL_FLASHEx_Erase>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d005      	beq.n	80005ae <flash_write_calibTable+0x9a>
            status = HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            return status;
 80005a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005ac:	e048      	b.n	8000640 <flash_write_calibTable+0x12c>
        }
        if ( err != 0xFFFFFFFF ) {
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b4:	d005      	beq.n	80005c2 <flash_write_calibTable+0xae>
            status = HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
 80005b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            return status;
 80005bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005c0:	e03e      	b.n	8000640 <flash_write_calibTable+0x12c>
        }

        /* Reset variables */
        addr    = FLASH_TABLE_START_ADDR;
 80005c2:	4b21      	ldr	r3, [pc, #132]	; (8000648 <flash_write_calibTable+0x134>)
 80005c4:	61fb      	str	r3, [r7, #28]
        err     = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
        index   = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
        /* Increase number of rewritings */
        ram->sector.NWrite += 1;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 80005d4:	1c5a      	adds	r2, r3, #1
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
        /* Calculate calibration table checksum */
        ram->sector.CheckSum = HAL_CRC_Calculate( &hcrc,
                                                  (uint32_t*)&(ram->calibration_table),
 80005dc:	687b      	ldr	r3, [r7, #4]
        ram->sector.CheckSum = HAL_CRC_Calculate( &hcrc,
 80005de:	22fe      	movs	r2, #254	; 0xfe
 80005e0:	4619      	mov	r1, r3
 80005e2:	481b      	ldr	r0, [pc, #108]	; (8000650 <flash_write_calibTable+0x13c>)
 80005e4:	f001 fe77 	bl	80022d6 <HAL_CRC_Calculate>
 80005e8:	4602      	mov	r2, r0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
                                                  (sizeof(ram->calibration_table)/4) );
        /* Write flash */
        while (addr < FLASH_TABLE_STOP_ADDR) {
 80005f0:	e01e      	b.n	8000630 <flash_write_calibTable+0x11c>
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, ram->data32[index]) != HAL_OK) {
 80005f2:	69f9      	ldr	r1, [r7, #28]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005fc:	461a      	mov	r2, r3
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	2002      	movs	r0, #2
 8000604:	f001 fe9a 	bl	800233c <HAL_FLASH_Program>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d002      	beq.n	8000614 <flash_write_calibTable+0x100>
                err++;
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	3301      	adds	r3, #1
 8000612:	61bb      	str	r3, [r7, #24]
            }
            index += 1;
 8000614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000616:	3301      	adds	r3, #1
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
            addr += 4;
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	3304      	adds	r3, #4
 800061e:	61fb      	str	r3, [r7, #28]
            /* Wait until flash is busy */
            while ( (FLASH->SR & FLASH_SR_BSY) != 0 ) continue;
 8000620:	e000      	b.n	8000624 <flash_write_calibTable+0x110>
 8000622:	bf00      	nop
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <flash_write_calibTable+0x140>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1f8      	bne.n	8000622 <flash_write_calibTable+0x10e>
        while (addr < FLASH_TABLE_STOP_ADDR) {
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	4a06      	ldr	r2, [pc, #24]	; (800064c <flash_write_calibTable+0x138>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d9dc      	bls.n	80005f2 <flash_write_calibTable+0xde>
        }
        /* Lock flash */
        HAL_FLASH_Lock();
 8000638:	f001 ff16 	bl	8002468 <HAL_FLASH_Lock>
    }
    return status;
 800063c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000640:	4618      	mov	r0, r3
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	0801fc00 	.word	0x0801fc00
 800064c:	0801ffff 	.word	0x0801ffff
 8000650:	200008dc 	.word	0x200008dc
 8000654:	40022000 	.word	0x40022000

08000658 <flash_read_sector>:
/*---------------------------------------------------------------------------*/
/*
 * @brief   Read calibration table from flash memory and write it to some variable
 */
void flash_read_sector(union NVRAM *ram)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    volatile uint32_t addr = FLASH_TABLE_START_ADDR;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <flash_read_sector+0x24>)
 8000662:	60fb      	str	r3, [r7, #12]
    memcpy( ram, (uint32_t*)addr, sizeof(struct FLASH_Sector) );
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800066a:	4619      	mov	r1, r3
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f009 fa3b 	bl	8009ae8 <memcpy>
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	0801fc00 	.word	0x0801fc00

08000680 <calib_table_create_default>:
extern union NVRAM DevNVRAM;

/*---------------------------------------------------------------------------*/

void calib_table_create_default(Table_t *ct)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    ct->dacValA_m12[0]  = 0x159;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f240 1259 	movw	r2, #345	; 0x159
 800068e:	831a      	strh	r2, [r3, #24]
    ct->dacValA_m12[1]  = 0x182;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000696:	835a      	strh	r2, [r3, #26]
    ct->dacValA_m12[2]  = 0x225;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f240 2225 	movw	r2, #549	; 0x225
 800069e:	839a      	strh	r2, [r3, #28]
    ct->dacValA_m12[3]  = 0x309;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f240 3209 	movw	r2, #777	; 0x309
 80006a6:	83da      	strh	r2, [r3, #30]
    ct->dacValA_m12[4]  = 0x3eb;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80006ae:	841a      	strh	r2, [r3, #32]
    ct->dacValA_m12[5]  = 0x4cd;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f240 42cd 	movw	r2, #1229	; 0x4cd
 80006b6:	845a      	strh	r2, [r3, #34]	; 0x22
    ct->dacValA_m12[6]  = 0x5b0;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f44f 62b6 	mov.w	r2, #1456	; 0x5b0
 80006be:	849a      	strh	r2, [r3, #36]	; 0x24
    ct->dacValA_m12[7]  = 0x693;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f240 6293 	movw	r2, #1683	; 0x693
 80006c6:	84da      	strh	r2, [r3, #38]	; 0x26
    ct->dacValA_m12[8]  = 0x777;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f240 7277 	movw	r2, #1911	; 0x777
 80006ce:	851a      	strh	r2, [r3, #40]	; 0x28
    ct->dacValA_m12[9]  = 0x861;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f640 0261 	movw	r2, #2145	; 0x861
 80006d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    ct->dacValA_m12[10] = 0x93c;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f640 123c 	movw	r2, #2364	; 0x93c
 80006de:	859a      	strh	r2, [r3, #44]	; 0x2c
    ct->dacValA_m12[11] = 0xa20;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f44f 6222 	mov.w	r2, #2592	; 0xa20
 80006e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    ct->dacValA_m12[12] = 0xb04;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f640 3204 	movw	r2, #2820	; 0xb04
 80006ee:	861a      	strh	r2, [r3, #48]	; 0x30
    ct->dacValA_m12[13] = 0xbe5;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f640 32e5 	movw	r2, #3045	; 0xbe5
 80006f6:	865a      	strh	r2, [r3, #50]	; 0x32
    ct->dacValA_m12[14] = 0xcc7;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f640 42c7 	movw	r2, #3271	; 0xcc7
 80006fe:	869a      	strh	r2, [r3, #52]	; 0x34
    ct->dacValA_m12[15] = 0xda9;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f640 52a9 	movw	r2, #3497	; 0xda9
 8000706:	86da      	strh	r2, [r3, #54]	; 0x36
    ct->dacValA_m12[16] = 0xe62;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f640 6262 	movw	r2, #3682	; 0xe62
 800070e:	871a      	strh	r2, [r3, #56]	; 0x38
    ct->dacValA_m12[17] = 0xe96;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f640 6296 	movw	r2, #3734	; 0xe96
 8000716:	875a      	strh	r2, [r3, #58]	; 0x3a
    ct->dacValA_m12[18] = 0xeac;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f640 62ac 	movw	r2, #3756	; 0xeac
 800071e:	879a      	strh	r2, [r3, #60]	; 0x3c

    ct->dacValB_m12[0]  = 0x145;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f240 1245 	movw	r2, #325	; 0x145
 8000726:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
    ct->dacValB_m12[1]  = 0x16e;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8000730:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
    ct->dacValB_m12[2]  = 0x212;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f240 2212 	movw	r2, #530	; 0x212
 800073a:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
    ct->dacValB_m12[3]  = 0x2f0;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8000744:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
    ct->dacValB_m12[4]  = 0x3d2;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f240 32d2 	movw	r2, #978	; 0x3d2
 800074e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
    ct->dacValB_m12[5]  = 0x4b4;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8000758:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
    ct->dacValB_m12[6]  = 0x597;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f240 5297 	movw	r2, #1431	; 0x597
 8000762:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    ct->dacValB_m12[7]  = 0x67a;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f240 627a 	movw	r2, #1658	; 0x67a
 800076c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    ct->dacValB_m12[8]  = 0x75e;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f240 725e 	movw	r2, #1886	; 0x75e
 8000776:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
    ct->dacValB_m12[9]  = 0x84a;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f640 024a 	movw	r2, #2122	; 0x84a
 8000780:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
    ct->dacValB_m12[10] = 0x923;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f640 1223 	movw	r2, #2339	; 0x923
 800078a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
    ct->dacValB_m12[11] = 0xa07;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f640 2207 	movw	r2, #2567	; 0xa07
 8000794:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
    ct->dacValB_m12[12] = 0xae8;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f640 22e8 	movw	r2, #2792	; 0xae8
 800079e:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
    ct->dacValB_m12[13] = 0xbcc;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f640 32cc 	movw	r2, #3020	; 0xbcc
 80007a8:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
    ct->dacValB_m12[14] = 0xcae;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f640 42ae 	movw	r2, #3246	; 0xcae
 80007b2:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
    ct->dacValB_m12[15] = 0xd90;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f44f 6259 	mov.w	r2, #3472	; 0xd90
 80007bc:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
    ct->dacValB_m12[16] = 0xe49;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f640 6249 	movw	r2, #3657	; 0xe49
 80007c6:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
    ct->dacValB_m12[17] = 0xe7b;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f640 627b 	movw	r2, #3707	; 0xe7b
 80007d0:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
    ct->dacValB_m12[18] = 0xe92;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f640 6292 	movw	r2, #3730	; 0xe92
 80007da:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

    ct->dacValA_m27[0]  = 0x0;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
    /* TODO: Добавить код заполнения таблицы для 27 В значениями
     * по умолчанию */
    ct->dacValA_m27[1]  = 0x1000;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007ec:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172

    ct->dacValB_m27[0]  = 0x0;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
    ct->dacValB_m27[1]  = 0x1000;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007fe:	f8a3 22b6 	strh.w	r2, [r3, #694]	; 0x2b6
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <calib_table_init>:
/*
 * @brief   Fill some fields in @Table_t structure and read calibrate values
 *          from flash.
 */
void calib_table_init(Table_t *ct)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    if ( flash_is_calibTable_null() == 0x00 ) {
 8000814:	f7ff fe5c 	bl	80004d0 <flash_is_calibTable_null>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d126      	bne.n	800086c <calib_table_init+0x60>
        ct->Firmware = FIRMWARE_NUMBER;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2205      	movs	r2, #5
 8000822:	805a      	strh	r2, [r3, #2]
        ct->Hardwire = HARDWIRE_NUMBER;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2206      	movs	r2, #6
 8000828:	801a      	strh	r2, [r3, #0]
        ct->MagicNum = MAGIC_KEY;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a13      	ldr	r2, [pc, #76]	; (800087c <calib_table_init+0x70>)
 800082e:	615a      	str	r2, [r3, #20]
        ct->SN       = SERIAL_NUMBER;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2201      	movs	r2, #1
 8000834:	611a      	str	r2, [r3, #16]

        ct->calibration_step = 1040;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800083c:	809a      	strh	r2, [r3, #4]
        ct->volt_min_mode_12 = -9360;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f64d 3270 	movw	r2, #56176	; 0xdb70
 8000844:	80da      	strh	r2, [r3, #6]
        ct->volt_max_mode_12 = 9360;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f242 4290 	movw	r2, #9360	; 0x2490
 800084c:	811a      	strh	r2, [r3, #8]
        ct->volt_min_mode_27 = -27000;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f249 6288 	movw	r2, #38536	; 0x9688
 8000854:	815a      	strh	r2, [r3, #10]
        ct->volt_max_mode_27 = 27000;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f646 1278 	movw	r2, #27000	; 0x6978
 800085c:	819a      	strh	r2, [r3, #12]

        /* Заполнение калибровочной таблицы значениями по умолчанию */
        calib_table_create_default(ct);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ff0e 	bl	8000680 <calib_table_create_default>
        /* Запись дефолтных значений во флеш-память */
        flash_write_calibTable( &DevNVRAM );
 8000864:	4806      	ldr	r0, [pc, #24]	; (8000880 <calib_table_init+0x74>)
 8000866:	f7ff fe55 	bl	8000514 <flash_write_calibTable>
    }
    else {
        /* Чтение таблицы из флеш-памяти в переменную DevNVRAM */
        flash_read_sector( &DevNVRAM );
    }
}
 800086a:	e002      	b.n	8000872 <calib_table_init+0x66>
        flash_read_sector( &DevNVRAM );
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <calib_table_init+0x74>)
 800086e:	f7ff fef3 	bl	8000658 <flash_read_sector>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	48151623 	.word	0x48151623
 8000880:	200004dc 	.word	0x200004dc

08000884 <SetAllDAC>:
{
//	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table), db);
//	DAC_AD5322_Ch2(&hspi1, VDAC_B);
}
inline void SetAllDAC()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <SetAllDAC+0x18>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <SetAllDAC+0x1c>)
 800088e:	8812      	ldrh	r2, [r2, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <SetAllDAC+0x20>)
 8000894:	f7ff fc8e 	bl	80001b4 <DAC_AD5322_Ch1Ch2>
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000025e 	.word	0x2000025e
 80008a0:	20000260 	.word	0x20000260
 80008a4:	2000095c 	.word	0x2000095c

080008a8 <GetDacA>:
inline uint16_t GetDacA()
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
	return VDAC_A;
 80008ac:	4b02      	ldr	r3, [pc, #8]	; (80008b8 <GetDacA+0x10>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	2000025e 	.word	0x2000025e

080008bc <GetDacB>:
inline uint16_t GetDacB()
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
	return VDAC_B;
 80008c0:	4b02      	ldr	r3, [pc, #8]	; (80008cc <GetDacB+0x10>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	20000260 	.word	0x20000260

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d4:	f001 f88a 	bl	80019ec <HAL_Init>
#endif /* DWT_INIT */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d8:	f000 f81e 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008dc:	f000 f9c8 	bl	8000c70 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008e0:	f000 f8ca 	bl	8000a78 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80008e4:	f008 fba8 	bl	8009038 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80008e8:	f000 f874 	bl	80009d4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80008ec:	f000 f8fc 	bl	8000ae8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008f0:	f000 f95c 	bl	8000bac <MX_TIM4_Init>
  MX_CRC_Init();
 80008f4:	f000 f8ac 	bl	8000a50 <MX_CRC_Init>
  HAL_ADC_Start_IT(&hadc1);
#endif /* TEST_ADC */

/*---------------------------------------------------------------------------*/

  calib_table_init( &DevNVRAM.calibration_table );
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <main+0x40>)
 80008fa:	f7ff ff87 	bl	800080c <calib_table_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
	    if ( usb_rx_data.is_received == true ) {
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <main+0x44>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d0fb      	beq.n	80008fe <main+0x2e>
	        usb_rx_handler(&usb_rx_data);
 8000906:	4803      	ldr	r0, [pc, #12]	; (8000914 <main+0x44>)
 8000908:	f000 fd0e 	bl	8001328 <usb_rx_handler>
	    if ( usb_rx_data.is_received == true ) {
 800090c:	e7f7      	b.n	80008fe <main+0x2e>
 800090e:	bf00      	nop
 8000910:	200004dc 	.word	0x200004dc
 8000914:	20000000 	.word	0x20000000

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	; 0x50
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000922:	2228      	movs	r2, #40	; 0x28
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f009 f8ec 	bl	8009b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000948:	2301      	movs	r3, #1
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800094c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000956:	2301      	movs	r3, #1
 8000958:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000964:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000968:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fc42 	bl	80041f8 <HAL_RCC_OscConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800097a:	f000 fa07 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	230f      	movs	r3, #15
 8000980:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800098a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2102      	movs	r1, #2
 800099a:	4618      	mov	r0, r3
 800099c:	f003 feac 	bl	80046f8 <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009a6:	f000 f9f1 	bl	8000d8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80009aa:	2312      	movs	r3, #18
 80009ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80009ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4618      	mov	r0, r3
 80009bc:	f004 f804 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009c6:	f000 f9e1 	bl	8000d8c <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3750      	adds	r7, #80	; 0x50
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_ADC1_Init+0x74>)
 80009e6:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <MX_ADC1_Init+0x78>)
 80009e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_ADC1_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_ADC1_Init+0x74>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_ADC1_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_ADC1_Init+0x74>)
 80009fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_ADC1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_ADC1_Init+0x74>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_ADC1_Init+0x74>)
 8000a12:	f001 f84d 	bl	8001ab0 <HAL_ADC_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a1c:	f000 f9b6 	bl	8000d8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a20:	2303      	movs	r3, #3
 8000a22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a24:	2301      	movs	r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_ADC1_Init+0x74>)
 8000a32:	f001 f9eb 	bl	8001e0c <HAL_ADC_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a3c:	f000 f9a6 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000092c 	.word	0x2000092c
 8000a4c:	40012400 	.word	0x40012400

08000a50 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_CRC_Init+0x20>)
 8000a56:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <MX_CRC_Init+0x24>)
 8000a58:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_CRC_Init+0x20>)
 8000a5c:	f001 fc1f 	bl	800229e <HAL_CRC_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a66:	f000 f991 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200008dc 	.word	0x200008dc
 8000a74:	40023000 	.word	0x40023000

08000a78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_SPI1_Init+0x68>)
 8000a7e:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <MX_SPI1_Init+0x6c>)
 8000a80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_SPI1_Init+0x68>)
 8000a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_SPI1_Init+0x68>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_SPI1_Init+0x68>)
 8000a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_SPI1_Init+0x68>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_SPI1_Init+0x68>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_SPI1_Init+0x68>)
 8000aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aaa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_SPI1_Init+0x68>)
 8000aae:	2208      	movs	r2, #8
 8000ab0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_SPI1_Init+0x68>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_SPI1_Init+0x68>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_SPI1_Init+0x68>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_SPI1_Init+0x68>)
 8000ac6:	220a      	movs	r2, #10
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_SPI1_Init+0x68>)
 8000acc:	f004 f832 	bl	8004b34 <HAL_SPI_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000ad6:	f000 f959 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000095c 	.word	0x2000095c
 8000ae4:	40013000 	.word	0x40013000

08000ae8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aee:	f107 0310 	add.w	r3, r7, #16
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000af8:	463b      	mov	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b04:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <MX_TIM3_Init+0xbc>)
 8000b06:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <MX_TIM3_Init+0xc0>)
 8000b08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MX_TIM3_Init+0xbc>)
 8000b0c:	2247      	movs	r2, #71	; 0x47
 8000b0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_TIM3_Init+0xbc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <MX_TIM3_Init+0xbc>)
 8000b18:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000b1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_TIM3_Init+0xbc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_TIM3_Init+0xbc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b2a:	481e      	ldr	r0, [pc, #120]	; (8000ba4 <MX_TIM3_Init+0xbc>)
 8000b2c:	f004 fa68 	bl	8005000 <HAL_TIM_IC_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b36:	f000 f929 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4619      	mov	r1, r3
 8000b48:	4816      	ldr	r0, [pc, #88]	; (8000ba4 <MX_TIM3_Init+0xbc>)
 8000b4a:	f004 fde1 	bl	8005710 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b54:	f000 f91a 	bl	8000d8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b68:	463b      	mov	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <MX_TIM3_Init+0xbc>)
 8000b70:	f004 fb9d 	bl	80052ae <HAL_TIM_IC_ConfigChannel>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b7a:	f000 f907 	bl	8000d8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b82:	2302      	movs	r3, #2
 8000b84:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b86:	463b      	mov	r3, r7
 8000b88:	2204      	movs	r2, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_TIM3_Init+0xbc>)
 8000b8e:	f004 fb8e 	bl	80052ae <HAL_TIM_IC_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000b98:	f000 f8f8 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200008e4 	.word	0x200008e4
 8000ba8:	40000400 	.word	0x40000400

08000bac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bc8:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <MX_TIM4_Init+0xbc>)
 8000bca:	4a28      	ldr	r2, [pc, #160]	; (8000c6c <MX_TIM4_Init+0xc0>)
 8000bcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <MX_TIM4_Init+0xbc>)
 8000bd0:	2247      	movs	r2, #71	; 0x47
 8000bd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <MX_TIM4_Init+0xbc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 8000bda:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <MX_TIM4_Init+0xbc>)
 8000bdc:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000be0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <MX_TIM4_Init+0xbc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be8:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_TIM4_Init+0xbc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000bee:	481e      	ldr	r0, [pc, #120]	; (8000c68 <MX_TIM4_Init+0xbc>)
 8000bf0:	f004 fa06 	bl	8005000 <HAL_TIM_IC_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000bfa:	f000 f8c7 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4816      	ldr	r0, [pc, #88]	; (8000c68 <MX_TIM4_Init+0xbc>)
 8000c0e:	f004 fd7f 	bl	8005710 <HAL_TIMEx_MasterConfigSynchronization>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000c18:	f000 f8b8 	bl	8000d8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c20:	2301      	movs	r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	4619      	mov	r1, r3
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <MX_TIM4_Init+0xbc>)
 8000c34:	f004 fb3b 	bl	80052ae <HAL_TIM_IC_ConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000c3e:	f000 f8a5 	bl	8000d8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c42:	2302      	movs	r3, #2
 8000c44:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c46:	2302      	movs	r3, #2
 8000c48:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_TIM4_Init+0xbc>)
 8000c52:	f004 fb2c 	bl	80052ae <HAL_TIM_IC_ConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000c5c:	f000 f896 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000494 	.word	0x20000494
 8000c6c:	40000800 	.word	0x40000800

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a3b      	ldr	r2, [pc, #236]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000c8a:	f043 0310 	orr.w	r3, r3, #16
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0310 	and.w	r3, r3, #16
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9c:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a35      	ldr	r2, [pc, #212]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000ca2:	f043 0320 	orr.w	r3, r3, #32
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0320 	and.w	r3, r3, #32
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a2f      	ldr	r2, [pc, #188]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a29      	ldr	r2, [pc, #164]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_GPIO_Init+0x108>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]

  /* User code
   * Typically cleared while code generaiton */

  USB_Reset();
 8000ce4:	f008 f9d8 	bl	8009098 <USB_Reset>

  /* End of user code */

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cee:	4823      	ldr	r0, [pc, #140]	; (8000d7c <MX_GPIO_Init+0x10c>)
 8000cf0:	f001 febf 	bl	8002a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f240 4112 	movw	r1, #1042	; 0x412
 8000cfa:	4821      	ldr	r0, [pc, #132]	; (8000d80 <MX_GPIO_Init+0x110>)
 8000cfc:	f001 feb9 	bl	8002a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2104      	movs	r1, #4
 8000d04:	481e      	ldr	r0, [pc, #120]	; (8000d80 <MX_GPIO_Init+0x110>)
 8000d06:	f001 feb4 	bl	8002a72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	4816      	ldr	r0, [pc, #88]	; (8000d7c <MX_GPIO_Init+0x10c>)
 8000d24:	f001 fd0a 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 8000d28:	f240 4316 	movw	r3, #1046	; 0x416
 8000d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480f      	ldr	r0, [pc, #60]	; (8000d80 <MX_GPIO_Init+0x110>)
 8000d42:	f001 fcfb 	bl	800273c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000d46:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <MX_GPIO_Init+0x114>)
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480b      	ldr	r0, [pc, #44]	; (8000d88 <MX_GPIO_Init+0x118>)
 8000d5c:	f001 fcee 	bl	800273c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2100      	movs	r1, #0
 8000d64:	2028      	movs	r0, #40	; 0x28
 8000d66:	f001 fa64 	bl	8002232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d6a:	2028      	movs	r0, #40	; 0x28
 8000d6c:	f001 fa7d 	bl	800226a <HAL_NVIC_EnableIRQ>

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40011000 	.word	0x40011000
 8000d80:	40010800 	.word	0x40010800
 8000d84:	10310000 	.word	0x10310000
 8000d88:	40010c00 	.word	0x40010c00

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_MspInit+0x5c>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <HAL_MspInit+0x5c>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6193      	str	r3, [r2, #24]
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_MspInit+0x5c>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_MspInit+0x5c>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_MspInit+0x5c>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_MspInit+0x5c>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_MspInit+0x60>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_MspInit+0x60>)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010000 	.word	0x40010000

08000dfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a18      	ldr	r2, [pc, #96]	; (8000e78 <HAL_ADC_MspInit+0x7c>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d129      	bne.n	8000e70 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_ADC_MspInit+0x80>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <HAL_ADC_MspInit+0x80>)
 8000e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_ADC_MspInit+0x80>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_ADC_MspInit+0x80>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HAL_ADC_MspInit+0x80>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_ADC_MspInit+0x80>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e50:	2303      	movs	r3, #3
 8000e52:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4809      	ldr	r0, [pc, #36]	; (8000e80 <HAL_ADC_MspInit+0x84>)
 8000e5c:	f001 fc6e 	bl	800273c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2012      	movs	r0, #18
 8000e66:	f001 f9e4 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e6a:	2012      	movs	r0, #18
 8000e6c:	f001 f9fd 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40012400 	.word	0x40012400
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010800 	.word	0x40010800

08000e84 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <HAL_CRC_MspInit+0x34>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10b      	bne.n	8000eae <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_CRC_MspInit+0x38>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_CRC_MspInit+0x38>)
 8000e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea0:	6153      	str	r3, [r2, #20]
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_CRC_MspInit+0x38>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40023000 	.word	0x40023000
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <HAL_SPI_MspInit+0x70>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d123      	bne.n	8000f28 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_SPI_MspInit+0x74>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <HAL_SPI_MspInit+0x74>)
 8000ee6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_SPI_MspInit+0x74>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_SPI_MspInit+0x74>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_SPI_MspInit+0x74>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_SPI_MspInit+0x74>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8000f10:	23a0      	movs	r3, #160	; 0xa0
 8000f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_SPI_MspInit+0x78>)
 8000f24:	f001 fc0a 	bl	800273c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40013000 	.word	0x40013000
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010800 	.word	0x40010800

08000f3c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a3b      	ldr	r2, [pc, #236]	; (8001044 <HAL_TIM_IC_MspInit+0x108>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d13e      	bne.n	8000fda <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f5c:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <HAL_TIM_IC_MspInit+0x10c>)
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	4a39      	ldr	r2, [pc, #228]	; (8001048 <HAL_TIM_IC_MspInit+0x10c>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	61d3      	str	r3, [r2, #28]
 8000f68:	4b37      	ldr	r3, [pc, #220]	; (8001048 <HAL_TIM_IC_MspInit+0x10c>)
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
 8000f72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <HAL_TIM_IC_MspInit+0x10c>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a33      	ldr	r2, [pc, #204]	; (8001048 <HAL_TIM_IC_MspInit+0x10c>)
 8000f7a:	f043 0308 	orr.w	r3, r3, #8
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b31      	ldr	r3, [pc, #196]	; (8001048 <HAL_TIM_IC_MspInit+0x10c>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	482b      	ldr	r0, [pc, #172]	; (800104c <HAL_TIM_IC_MspInit+0x110>)
 8000fa0:	f001 fbcc 	bl	800273c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_TIM_IC_MspInit+0x114>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fc2:	4a23      	ldr	r2, [pc, #140]	; (8001050 <HAL_TIM_IC_MspInit+0x114>)
 8000fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc6:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	201d      	movs	r0, #29
 8000fce:	f001 f930 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fd2:	201d      	movs	r0, #29
 8000fd4:	f001 f949 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fd8:	e030      	b.n	800103c <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a1d      	ldr	r2, [pc, #116]	; (8001054 <HAL_TIM_IC_MspInit+0x118>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d12b      	bne.n	800103c <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_TIM_IC_MspInit+0x10c>)
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	4a17      	ldr	r2, [pc, #92]	; (8001048 <HAL_TIM_IC_MspInit+0x10c>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	61d3      	str	r3, [r2, #28]
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_TIM_IC_MspInit+0x10c>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_TIM_IC_MspInit+0x10c>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a11      	ldr	r2, [pc, #68]	; (8001048 <HAL_TIM_IC_MspInit+0x10c>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_TIM_IC_MspInit+0x10c>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001014:	2340      	movs	r3, #64	; 0x40
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	4809      	ldr	r0, [pc, #36]	; (800104c <HAL_TIM_IC_MspInit+0x110>)
 8001028:	f001 fb88 	bl	800273c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	201e      	movs	r0, #30
 8001032:	f001 f8fe 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001036:	201e      	movs	r0, #30
 8001038:	f001 f917 	bl	800226a <HAL_NVIC_EnableIRQ>
}
 800103c:	bf00      	nop
 800103e:	3730      	adds	r7, #48	; 0x30
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40000400 	.word	0x40000400
 8001048:	40021000 	.word	0x40021000
 800104c:	40010c00 	.word	0x40010c00
 8001050:	40010000 	.word	0x40010000
 8001054:	40000800 	.word	0x40000800

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	  printf("HardFault_IRQn");
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <HardFault_Handler+0x4>

0800106a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <MemManage_Handler+0x4>

08001070 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <BusFault_Handler+0x4>

08001076 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <UsageFault_Handler+0x4>

0800107c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    if ( btn_pin_12.is_count_started == 1 ) {
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <SysTick_Handler+0x78>)
 80010a6:	789b      	ldrb	r3, [r3, #2]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d10d      	bne.n	80010c8 <SysTick_Handler+0x28>
        ++btn_pin_12.counter;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <SysTick_Handler+0x78>)
 80010ae:	889b      	ldrh	r3, [r3, #4]
 80010b0:	3301      	adds	r3, #1
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <SysTick_Handler+0x78>)
 80010b6:	809a      	strh	r2, [r3, #4]
        if ( btn_pin_12.counter > 1000 ) {
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <SysTick_Handler+0x78>)
 80010ba:	889b      	ldrh	r3, [r3, #4]
 80010bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010c0:	d902      	bls.n	80010c8 <SysTick_Handler+0x28>
            btn_pin_12.is_long_press = 1;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <SysTick_Handler+0x78>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	705a      	strb	r2, [r3, #1]
        }
    }
    if ( btn_pin_13.is_count_started == 1 ) {
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <SysTick_Handler+0x7c>)
 80010ca:	789b      	ldrb	r3, [r3, #2]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10d      	bne.n	80010ec <SysTick_Handler+0x4c>
        ++btn_pin_13.counter;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <SysTick_Handler+0x7c>)
 80010d2:	889b      	ldrh	r3, [r3, #4]
 80010d4:	3301      	adds	r3, #1
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <SysTick_Handler+0x7c>)
 80010da:	809a      	strh	r2, [r3, #4]
        if ( btn_pin_13.counter > 1000 ) {
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <SysTick_Handler+0x7c>)
 80010de:	889b      	ldrh	r3, [r3, #4]
 80010e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010e4:	d902      	bls.n	80010ec <SysTick_Handler+0x4c>
            btn_pin_13.is_long_press = 1;
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <SysTick_Handler+0x7c>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	705a      	strb	r2, [r3, #1]
        }
    }
    if ( btn_pin_14.is_count_started == 1 ) {
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <SysTick_Handler+0x80>)
 80010ee:	789b      	ldrb	r3, [r3, #2]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d10d      	bne.n	8001110 <SysTick_Handler+0x70>
        ++btn_pin_14.counter;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <SysTick_Handler+0x80>)
 80010f6:	889b      	ldrh	r3, [r3, #4]
 80010f8:	3301      	adds	r3, #1
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <SysTick_Handler+0x80>)
 80010fe:	809a      	strh	r2, [r3, #4]
        if ( btn_pin_14.counter > 1000 ) {
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <SysTick_Handler+0x80>)
 8001102:	889b      	ldrh	r3, [r3, #4]
 8001104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001108:	d902      	bls.n	8001110 <SysTick_Handler+0x70>
            btn_pin_14.is_long_press = 1;
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <SysTick_Handler+0x80>)
 800110c:	2201      	movs	r2, #1
 800110e:	705a      	strb	r2, [r3, #1]
        }
    }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001110:	f000 fcb2 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000248 	.word	0x20000248
 800111c:	20000250 	.word	0x20000250
 8001120:	20000258 	.word	0x20000258

08001124 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <ADC1_2_IRQHandler+0x10>)
 800112a:	f000 fd99 	bl	8001c60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000092c 	.word	0x2000092c

08001138 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800113e:	f001 fdfa 	bl	8002d36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000129c 	.word	0x2000129c

0800114c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <TIM3_IRQHandler+0x10>)
 8001152:	f003 ffa4 	bl	800509e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200008e4 	.word	0x200008e4

08001160 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <TIM4_IRQHandler+0x10>)
 8001166:	f003 ff9a 	bl	800509e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000494 	.word	0x20000494

08001174 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001178:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800117c:	f001 fc92 	bl	8002aa4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001180:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001184:	f001 fc8e 	bl	8002aa4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001188:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800118c:	f001 fc8a 	bl	8002aa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e00a      	b.n	80011bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011a6:	f3af 8000 	nop.w
 80011aa:	4601      	mov	r1, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	60ba      	str	r2, [r7, #8]
 80011b2:	b2ca      	uxtb	r2, r1
 80011b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf0      	blt.n	80011a6 <_read+0x12>
	}

return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e009      	b.n	80011f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbf1      	blt.n	80011e0 <_write+0x12>
	}
	return len;
 80011fc:	687b      	ldr	r3, [r7, #4]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_close>:

int _close(int file)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	return -1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122c:	605a      	str	r2, [r3, #4]
	return 0;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <_isatty>:

int _isatty(int file)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	return 1;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800124e:	b480      	push	{r7}
 8001250:	b085      	sub	sp, #20
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
	return 0;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
	...

08001268 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <_sbrk+0x50>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <_sbrk+0x16>
		heap_end = &end;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <_sbrk+0x50>)
 800127a:	4a10      	ldr	r2, [pc, #64]	; (80012bc <_sbrk+0x54>)
 800127c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <_sbrk+0x50>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <_sbrk+0x50>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	466a      	mov	r2, sp
 800128e:	4293      	cmp	r3, r2
 8001290:	d907      	bls.n	80012a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001292:	f008 fbff 	bl	8009a94 <__errno>
 8001296:	4603      	mov	r3, r0
 8001298:	220c      	movs	r2, #12
 800129a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	e006      	b.n	80012b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <_sbrk+0x50>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a03      	ldr	r2, [pc, #12]	; (80012b8 <_sbrk+0x50>)
 80012ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000264 	.word	0x20000264
 80012bc:	20001598 	.word	0x20001598

080012c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <SystemInit+0x5c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <SystemInit+0x5c>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <SystemInit+0x5c>)
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	4911      	ldr	r1, [pc, #68]	; (800131c <SystemInit+0x5c>)
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <SystemInit+0x60>)
 80012d8:	4013      	ands	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <SystemInit+0x5c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <SystemInit+0x5c>)
 80012e2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80012e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <SystemInit+0x5c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0a      	ldr	r2, [pc, #40]	; (800131c <SystemInit+0x5c>)
 80012f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <SystemInit+0x5c>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <SystemInit+0x5c>)
 80012fe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001302:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SystemInit+0x5c>)
 8001306:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800130a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <SystemInit+0x64>)
 800130e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001312:	609a      	str	r2, [r3, #8]
#endif 
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	40021000 	.word	0x40021000
 8001320:	f8ff0000 	.word	0xf8ff0000
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <usb_rx_handler>:
 * @brief   USB package handler
 * @note    Len <= 64
 * @retval  HAL Status
 */
HAL_StatusTypeDef usb_rx_handler(usb_rx_data_type *usb)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b0a1      	sub	sp, #132	; 0x84
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    if ( usb->is_received != true ||
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	f083 0301 	eor.w	r3, r3, #1
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d103      	bne.n	8001346 <usb_rx_handler+0x1e>
         usb->is_handled  != false )
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	785b      	ldrb	r3, [r3, #1]
    if ( usb->is_received != true ||
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <usb_rx_handler+0x22>
    {
        /* Если пакет ещё не принят или уже обработан, то
         * ошибка - обрабатывать либо ещё, либо уже нечего. */
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e320      	b.n	800198c <usb_rx_handler+0x664>
    }
    usb->is_received = false;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]

    /*-MAIN HANDLER CODE-----------------------------------------------------*/

    if ( usb->len < 1 || usb->len > 64 ) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	789b      	ldrb	r3, [r3, #2]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <usb_rx_handler+0x38>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	789b      	ldrb	r3, [r3, #2]
 800135c:	2b40      	cmp	r3, #64	; 0x40
 800135e:	d901      	bls.n	8001364 <usb_rx_handler+0x3c>
        /* Если размер пакета не соответствует нормальному - ошибка */
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e313      	b.n	800198c <usb_rx_handler+0x664>
     * такого размера будет достаточно. */
    uint8_t     usb_tx_buff[64];
    /* 16-ти битовая переменная для установки значения ЦАП */
    uint16_t    tVal16;
    /* Переменная, содержащая текущую команду, сделана для удобства */
    uint8_t     cmd = usb->buff[0];
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	78db      	ldrb	r3, [r3, #3]
 8001368:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    switch (cmd) {
 800136c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001370:	3b01      	subs	r3, #1
 8001372:	2b0d      	cmp	r3, #13
 8001374:	f200 82fe 	bhi.w	8001974 <usb_rx_handler+0x64c>
 8001378:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <usb_rx_handler+0x58>)
 800137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137e:	bf00      	nop
 8001380:	080013b9 	.word	0x080013b9
 8001384:	08001439 	.word	0x08001439
 8001388:	08001465 	.word	0x08001465
 800138c:	08001491 	.word	0x08001491
 8001390:	080014b1 	.word	0x080014b1
 8001394:	080014f3 	.word	0x080014f3
 8001398:	08001527 	.word	0x08001527
 800139c:	0800158b 	.word	0x0800158b
 80013a0:	080015af 	.word	0x080015af
 80013a4:	080015d3 	.word	0x080015d3
 80013a8:	0800197f 	.word	0x0800197f
 80013ac:	080018d1 	.word	0x080018d1
 80013b0:	080018fb 	.word	0x080018fb
 80013b4:	08001939 	.word	0x08001939
        /* Команда включения реле */
        case 0x01 :
            if ( usb->len >= 2 && (usb->buff[1] == 0x01 || usb->buff[1] == 0x00) ) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	789b      	ldrb	r3, [r3, #2]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d92d      	bls.n	800141c <usb_rx_handler+0xf4>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	791b      	ldrb	r3, [r3, #4]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d003      	beq.n	80013d0 <usb_rx_handler+0xa8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	791b      	ldrb	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d125      	bne.n	800141c <usb_rx_handler+0xf4>

                HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2104      	movs	r1, #4
 80013d4:	48c4      	ldr	r0, [pc, #784]	; (80016e8 <usb_rx_handler+0x3c0>)
 80013d6:	f001 fb4c 	bl	8002a72 <HAL_GPIO_WritePin>

                if ( usb->buff[1] == 0x01 ) {
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	791b      	ldrb	r3, [r3, #4]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d109      	bne.n	80013f6 <usb_rx_handler+0xce>
                    relay_state = M12;
 80013e2:	4bc2      	ldr	r3, [pc, #776]	; (80016ec <usb_rx_handler+0x3c4>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
                    printf("RelayState:12V - %d \n", relay_state);
 80013e8:	4bc0      	ldr	r3, [pc, #768]	; (80016ec <usb_rx_handler+0x3c4>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	48c0      	ldr	r0, [pc, #768]	; (80016f0 <usb_rx_handler+0x3c8>)
 80013f0:	f008 fb90 	bl	8009b14 <iprintf>
 80013f4:	e00c      	b.n	8001410 <usb_rx_handler+0xe8>
                }
                else if (usb->buff[1] == 0x00) {
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	791b      	ldrb	r3, [r3, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d108      	bne.n	8001410 <usb_rx_handler+0xe8>
                    relay_state = M27;
 80013fe:	4bbb      	ldr	r3, [pc, #748]	; (80016ec <usb_rx_handler+0x3c4>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
                    printf("RelayState:27V - %d \n", relay_state);
 8001404:	4bb9      	ldr	r3, [pc, #740]	; (80016ec <usb_rx_handler+0x3c4>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	48ba      	ldr	r0, [pc, #744]	; (80016f4 <usb_rx_handler+0x3cc>)
 800140c:	f008 fb82 	bl	8009b14 <iprintf>
                }
                SetAllDAC();
 8001410:	f7ff fa38 	bl	8000884 <SetAllDAC>
                usb_tx_buff[1] = 0x00; // успешно
 8001414:	2300      	movs	r3, #0
 8001416:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800141a:	e002      	b.n	8001422 <usb_rx_handler+0xfa>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 800141c:	2301      	movs	r3, #1
 800141e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }

            usb_tx_buff[0] = cmd;
 8001422:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001426:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            CDC_Transmit_FS(usb_tx_buff, 2);
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	2102      	movs	r1, #2
 8001430:	4618      	mov	r0, r3
 8001432:	f007 ff51 	bl	80092d8 <CDC_Transmit_FS>
            break;
 8001436:	e2a5      	b.n	8001984 <usb_rx_handler+0x65c>

        /* Команда калибровки ЦАП А */
        case 0x02 :
            if (usb->len >= 3) {
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	789b      	ldrb	r3, [r3, #2]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d903      	bls.n	8001448 <usb_rx_handler+0x120>
//                resValTIM4_PB6(); // обнуление переменной для проведения калибровки
//                memcpy(&tVal16, usb->buff + 1, sizeof(tVal16));
//                SetDacA(tVal16);
//                printf("DacA: %d\n", tVal16);

                usb_tx_buff[1] = 0x00; // успешно
 8001440:	2300      	movs	r3, #0
 8001442:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001446:	e002      	b.n	800144e <usb_rx_handler+0x126>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 8001448:	2301      	movs	r3, #1
 800144a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            usb_tx_buff[0] = cmd;
 800144e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001452:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            CDC_Transmit_FS(usb_tx_buff, 2);
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	2102      	movs	r1, #2
 800145c:	4618      	mov	r0, r3
 800145e:	f007 ff3b 	bl	80092d8 <CDC_Transmit_FS>
            break;
 8001462:	e28f      	b.n	8001984 <usb_rx_handler+0x65c>

        /* Команда калибровки ЦАП В */
        case 0x03 :
            if (usb->len >= 3) {
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	789b      	ldrb	r3, [r3, #2]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d903      	bls.n	8001474 <usb_rx_handler+0x14c>
//                resValTIM4_PB6(); // обнуление переменной для проведения калиброки
//                memcpy(&tVal16, usb->buff + 1, sizeof(tVal16));
//                SetDacB(tVal16);
//                printf("DacB: %d \n", tVal16);

                usb_tx_buff[1] = 0x00; // успешно
 800146c:	2300      	movs	r3, #0
 800146e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001472:	e002      	b.n	800147a <usb_rx_handler+0x152>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 8001474:	2301      	movs	r3, #1
 8001476:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            usb_tx_buff[0] = cmd;
 800147a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800147e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            CDC_Transmit_FS(usb_tx_buff, 2);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2102      	movs	r1, #2
 8001488:	4618      	mov	r0, r3
 800148a:	f007 ff25 	bl	80092d8 <CDC_Transmit_FS>
            break;
 800148e:	e279      	b.n	8001984 <usb_rx_handler+0x65c>

        /* Команда запроса значения АЦП */
        case 0x04 :
//            tVal16 = GetADC();
            usb_tx_buff[0] = cmd;
 8001490:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001494:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            memcpy(usb_tx_buff + 1, &tVal16, sizeof(tVal16));
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	3301      	adds	r3, #1
 800149e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80014a0:	801a      	strh	r2, [r3, #0]
            CDC_Transmit_FS(usb_tx_buff, 3);
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	2103      	movs	r1, #3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f007 ff15 	bl	80092d8 <CDC_Transmit_FS>
            break;
 80014ae:	e269      	b.n	8001984 <usb_rx_handler+0x65c>

        /* Команда запроса состояния ЦАПов */
        case 0x05 :
            usb_tx_buff[0] = cmd;
 80014b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            usb_tx_buff[1] = relay_state;
 80014b8:	4b8c      	ldr	r3, [pc, #560]	; (80016ec <usb_rx_handler+0x3c4>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

            tVal16 = GetDacA();
 80014c0:	f7ff f9f2 	bl	80008a8 <GetDacA>
 80014c4:	4603      	mov	r3, r0
 80014c6:	847b      	strh	r3, [r7, #34]	; 0x22
            memcpy(usb_tx_buff + 2, &tVal16, sizeof(tVal16));
 80014c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014cc:	3302      	adds	r3, #2
 80014ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80014d0:	801a      	strh	r2, [r3, #0]

            tVal16 = GetDacB();
 80014d2:	f7ff f9f3 	bl	80008bc <GetDacB>
 80014d6:	4603      	mov	r3, r0
 80014d8:	847b      	strh	r3, [r7, #34]	; 0x22
            memcpy(usb_tx_buff + 4, &tVal16, sizeof(tVal16));
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	3304      	adds	r3, #4
 80014e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80014e2:	801a      	strh	r2, [r3, #0]

            CDC_Transmit_FS(usb_tx_buff, 6);
 80014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e8:	2106      	movs	r1, #6
 80014ea:	4618      	mov	r0, r3
 80014ec:	f007 fef4 	bl	80092d8 <CDC_Transmit_FS>
            break;
 80014f0:	e248      	b.n	8001984 <usb_rx_handler+0x65c>

        /* Команда запроса состояния кнопок */
        case 0x06 :
            usb_tx_buff[0] = cmd;
 80014f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            usb_tx_buff[1] = btn_run_get_state();
 80014fa:	f7fe fedf 	bl	80002bc <btn_run_get_state>
 80014fe:	4603      	mov	r3, r0
 8001500:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            usb_tx_buff[2] = btn_up_get_state();
 8001504:	f7fe fef8 	bl	80002f8 <btn_up_get_state>
 8001508:	4603      	mov	r3, r0
 800150a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            usb_tx_buff[3] = btn_down_get_state();
 800150e:	f7fe ff0d 	bl	800032c <btn_down_get_state>
 8001512:	4603      	mov	r3, r0
 8001514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            CDC_Transmit_FS(usb_tx_buff, 4);
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	2104      	movs	r1, #4
 800151e:	4618      	mov	r0, r3
 8001520:	f007 feda 	bl	80092d8 <CDC_Transmit_FS>
            break;
 8001524:	e22e      	b.n	8001984 <usb_rx_handler+0x65c>
            };
            memcpy(str, "SN", strlen("SN"));
            itoa(SN_DEFINE, str + 2, 16);
            */

            char str[] = {"prb_v0.3"};
 8001526:	4a74      	ldr	r2, [pc, #464]	; (80016f8 <usb_rx_handler+0x3d0>)
 8001528:	f107 0318 	add.w	r3, r7, #24
 800152c:	ca07      	ldmia	r2, {r0, r1, r2}
 800152e:	c303      	stmia	r3!, {r0, r1}
 8001530:	701a      	strb	r2, [r3, #0]

            usb_tx_buff[0] = cmd;
 8001532:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001536:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            usb_tx_buff[1] = strlen(str);
 800153a:	f107 0318 	add.w	r3, r7, #24
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe fe04 	bl	800014c <strlen>
 8001544:	4603      	mov	r3, r0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            memcpy(usb_tx_buff + 2, str, strlen(str));
 800154c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001550:	3402      	adds	r4, #2
 8001552:	f107 0318 	add.w	r3, r7, #24
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe fdf8 	bl	800014c <strlen>
 800155c:	4602      	mov	r2, r0
 800155e:	f107 0318 	add.w	r3, r7, #24
 8001562:	4619      	mov	r1, r3
 8001564:	4620      	mov	r0, r4
 8001566:	f008 fabf 	bl	8009ae8 <memcpy>
            CDC_Transmit_FS(usb_tx_buff, strlen(str) + 2);
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe fdec 	bl	800014c <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29b      	uxth	r3, r3
 8001578:	3302      	adds	r3, #2
 800157a:	b29a      	uxth	r2, r3
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f007 fea8 	bl	80092d8 <CDC_Transmit_FS>
            break;
 8001588:	e1fc      	b.n	8001984 <usb_rx_handler+0x65c>
        /* Команда запроса измеренной длительности */
        case 0x08 :
        {
//            EnableTIM3_PB4();
//            uint16_t temp = GetTIM3();
            uint16_t temp = 0x00;
 800158a:	2300      	movs	r3, #0
 800158c:	82fb      	strh	r3, [r7, #22]
            usb_tx_buff[0] = cmd;
 800158e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001592:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            memcpy(usb_tx_buff + 1, &temp, sizeof(uint16_t));
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	3301      	adds	r3, #1
 800159c:	8afa      	ldrh	r2, [r7, #22]
 800159e:	801a      	strh	r2, [r3, #0]
            CDC_Transmit_FS(usb_tx_buff, 1 + sizeof(uint16_t));
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	2103      	movs	r1, #3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f007 fe96 	bl	80092d8 <CDC_Transmit_FS>
            break;
 80015ac:	e1ea      	b.n	8001984 <usb_rx_handler+0x65c>
        /* Команда запроса измеренной длительности */
        case 0x09 :
        {
//            EnableTIM4_PB6();
//            uint16_t temp = GetTIM4();
            uint16_t temp = 0x00;
 80015ae:	2300      	movs	r3, #0
 80015b0:	82bb      	strh	r3, [r7, #20]
            usb_tx_buff[0] = cmd;
 80015b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            memcpy(usb_tx_buff + 1, &temp, sizeof(uint16_t));
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	3301      	adds	r3, #1
 80015c0:	8aba      	ldrh	r2, [r7, #20]
 80015c2:	801a      	strh	r2, [r3, #0]
            CDC_Transmit_FS(usb_tx_buff, 1 + sizeof(uint16_t));
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	2103      	movs	r1, #3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f007 fe84 	bl	80092d8 <CDC_Transmit_FS>
            break;
 80015d0:	e1d8      	b.n	8001984 <usb_rx_handler+0x65c>
        case 0x0A :
        {
            /* Константа для обозначения максимального количества передаваемых значений.
             * Определяется максимальным количеством байт, передаваемых по USB за раз.
             * (64(всего) - 6(команда))/2(так как числа 2-х байтовые) = 29*/
            const uint8_t usb_max_calib_value = 29;
 80015d2:	231d      	movs	r3, #29
 80015d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            /* Значение для ответа на команду, 0х00 - успешное выполнение */
            usb_tx_buff[6] = 0x00;
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            /* В буффер для отправки ответа заносим номер таблицы */
            usb_tx_buff[1] = usb->buff[1];
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	791b      	ldrb	r3, [r3, #4]
 80015e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            /* dataStartNumber  - номер ячейки, с которой начинается запись
             * dataEndNumber    - номер последней ячейки, в которую должны записываться данные
             * dataOffset       - разница между ними */
            uint16_t dataStartNumber, dataEndNumber, dataOffset;

            memcpy(&dataStartNumber, &usb->buff[2], sizeof(uint16_t));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3305      	adds	r3, #5
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	827b      	strh	r3, [r7, #18]
            memcpy(&dataOffset, &usb->buff[4], sizeof(uint16_t));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3307      	adds	r3, #7
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	823b      	strh	r3, [r7, #16]
            dataEndNumber = dataStartNumber + dataOffset;
 80015fa:	8a7a      	ldrh	r2, [r7, #18]
 80015fc:	8a3b      	ldrh	r3, [r7, #16]
 80015fe:	4413      	add	r3, r2
 8001600:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

            switch (usb->buff[1]) {
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	791b      	ldrb	r3, [r3, #4]
 8001608:	2b03      	cmp	r3, #3
 800160a:	f200 8145 	bhi.w	8001898 <usb_rx_handler+0x570>
 800160e:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <usb_rx_handler+0x2ec>)
 8001610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001614:	08001625 	.word	0x08001625
 8001618:	080016b9 	.word	0x080016b9
 800161c:	08001769 	.word	0x08001769
 8001620:	080017fd 	.word	0x080017fd
                case 0x00 :
                {
                    if (dataStartNumber >= MAX_VAL_M12 ||
 8001624:	8a7b      	ldrh	r3, [r7, #18]
 8001626:	2b55      	cmp	r3, #85	; 0x55
 8001628:	d809      	bhi.n	800163e <usb_rx_handler+0x316>
 800162a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800162e:	2b56      	cmp	r3, #86	; 0x56
 8001630:	d805      	bhi.n	800163e <usb_rx_handler+0x316>
                        dataEndNumber > MAX_VAL_M12    ||
                        dataOffset > usb_max_calib_value) {
 8001632:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001636:	b29a      	uxth	r2, r3
 8001638:	8a3b      	ldrh	r3, [r7, #16]
                        dataEndNumber > MAX_VAL_M12    ||
 800163a:	429a      	cmp	r2, r3
 800163c:	d203      	bcs.n	8001646 <usb_rx_handler+0x31e>
                        usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 800163e:	2301      	movs	r3, #1
 8001640:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                        break;
 8001644:	e12c      	b.n	80018a0 <usb_rx_handler+0x578>
                    }

                    uint8_t i_usb    = 6;
 8001646:	2306      	movs	r3, #6
 8001648:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                    uint16_t i_calib = dataStartNumber;
 800164c:	8a7b      	ldrh	r3, [r7, #18]
 800164e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

                    while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 8001652:	e017      	b.n	8001684 <usb_rx_handler+0x35c>

                        memcpy( &DevNVRAM.calibration_table.dacValA_m12[i_calib],
 8001654:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001658:	330c      	adds	r3, #12
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4a27      	ldr	r2, [pc, #156]	; (80016fc <usb_rx_handler+0x3d4>)
 800165e:	4413      	add	r3, r2
                                &usb->buff[i_usb],
 8001660:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	440a      	add	r2, r1
 8001668:	3203      	adds	r2, #3
 800166a:	8812      	ldrh	r2, [r2, #0]
 800166c:	b292      	uxth	r2, r2
                        memcpy( &DevNVRAM.calibration_table.dacValA_m12[i_calib],
 800166e:	801a      	strh	r2, [r3, #0]
                                sizeof(uint16_t) );

                        i_usb   += 2;
 8001670:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001674:	3302      	adds	r3, #2
 8001676:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
                        i_calib += 1;
 800167a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800167e:	3301      	adds	r3, #1
 8001680:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
                    while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 8001684:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001688:	2b3f      	cmp	r3, #63	; 0x3f
 800168a:	d805      	bhi.n	8001698 <usb_rx_handler+0x370>
 800168c:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8001690:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001694:	429a      	cmp	r2, r3
 8001696:	d3dd      	bcc.n	8001654 <usb_rx_handler+0x32c>
                    }
                    /* Обнуляем правую оставшуюся часть массива, для того, чтобы в
                     * таблице не оставалось мусорных данных */
                    memset( &DevNVRAM.calibration_table.dacValA_m12[dataEndNumber],
 8001698:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800169c:	330c      	adds	r3, #12
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4a16      	ldr	r2, [pc, #88]	; (80016fc <usb_rx_handler+0x3d4>)
 80016a2:	1898      	adds	r0, r3, r2
                            0x00,
                            (MAX_VAL_M12 - dataEndNumber) * sizeof(uint16_t) );
 80016a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80016a8:	f1c3 0356 	rsb	r3, r3, #86	; 0x56
                    memset( &DevNVRAM.calibration_table.dacValA_m12[dataEndNumber],
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	461a      	mov	r2, r3
 80016b0:	2100      	movs	r1, #0
 80016b2:	f008 fa27 	bl	8009b04 <memset>
                    break;
 80016b6:	e0f3      	b.n	80018a0 <usb_rx_handler+0x578>

                }
                case 0x01 :
                {
                    if (dataStartNumber >= MAX_VAL_M12 ||
 80016b8:	8a7b      	ldrh	r3, [r7, #18]
 80016ba:	2b55      	cmp	r3, #85	; 0x55
 80016bc:	d809      	bhi.n	80016d2 <usb_rx_handler+0x3aa>
 80016be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80016c2:	2b56      	cmp	r3, #86	; 0x56
 80016c4:	d805      	bhi.n	80016d2 <usb_rx_handler+0x3aa>
                         dataEndNumber > MAX_VAL_M12    ||
                         dataOffset > usb_max_calib_value) {
 80016c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	8a3b      	ldrh	r3, [r7, #16]
                         dataEndNumber > MAX_VAL_M12    ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d203      	bcs.n	80016da <usb_rx_handler+0x3b2>
                         usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 80016d2:	2301      	movs	r3, #1
 80016d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                         break;
 80016d8:	e0e2      	b.n	80018a0 <usb_rx_handler+0x578>
                     }

                     uint8_t i_usb    = 6;
 80016da:	2306      	movs	r3, #6
 80016dc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
                     uint16_t i_calib = dataStartNumber;
 80016e0:	8a7b      	ldrh	r3, [r7, #18]
 80016e2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 80016e6:	e024      	b.n	8001732 <usb_rx_handler+0x40a>
 80016e8:	40010800 	.word	0x40010800
 80016ec:	20000043 	.word	0x20000043
 80016f0:	0800a9ec 	.word	0x0800a9ec
 80016f4:	0800aa04 	.word	0x0800aa04
 80016f8:	0800aa1c 	.word	0x0800aa1c
 80016fc:	200004dc 	.word	0x200004dc

                         memcpy( &DevNVRAM.calibration_table.dacValB_m12[i_calib],
 8001700:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001704:	3360      	adds	r3, #96	; 0x60
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4aa2      	ldr	r2, [pc, #648]	; (8001994 <usb_rx_handler+0x66c>)
 800170a:	4413      	add	r3, r2
 800170c:	3304      	adds	r3, #4
                                 &usb->buff[i_usb],
 800170e:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	440a      	add	r2, r1
 8001716:	3203      	adds	r2, #3
 8001718:	8812      	ldrh	r2, [r2, #0]
 800171a:	b292      	uxth	r2, r2
                         memcpy( &DevNVRAM.calibration_table.dacValB_m12[i_calib],
 800171c:	801a      	strh	r2, [r3, #0]
                                 sizeof(uint16_t) );

                         i_usb   += 2;
 800171e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001722:	3302      	adds	r3, #2
 8001724:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
                         i_calib += 1;
 8001728:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800172c:	3301      	adds	r3, #1
 800172e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 8001732:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001736:	2b3f      	cmp	r3, #63	; 0x3f
 8001738:	d805      	bhi.n	8001746 <usb_rx_handler+0x41e>
 800173a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800173e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001742:	429a      	cmp	r2, r3
 8001744:	d3dc      	bcc.n	8001700 <usb_rx_handler+0x3d8>
                     }
                     /* Обнуляем правую оставшуюся часть массива, для того, чтобы в
                      * таблице не оставалось мусорных данных */
                     memset( &DevNVRAM.calibration_table.dacValB_m12[dataEndNumber],
 8001746:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800174a:	3360      	adds	r3, #96	; 0x60
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4a91      	ldr	r2, [pc, #580]	; (8001994 <usb_rx_handler+0x66c>)
 8001750:	4413      	add	r3, r2
 8001752:	1d18      	adds	r0, r3, #4
                             0x00,
                             (MAX_VAL_M12 - dataEndNumber) * sizeof(uint16_t) );
 8001754:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001758:	f1c3 0356 	rsb	r3, r3, #86	; 0x56
                     memset( &DevNVRAM.calibration_table.dacValB_m12[dataEndNumber],
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	461a      	mov	r2, r3
 8001760:	2100      	movs	r1, #0
 8001762:	f008 f9cf 	bl	8009b04 <memset>
                     break;
 8001766:	e09b      	b.n	80018a0 <usb_rx_handler+0x578>

                }
                case 0x02 :
                {
                    if (dataStartNumber >= MAX_VAL_M27 ||
 8001768:	8a7b      	ldrh	r3, [r7, #18]
 800176a:	2ba1      	cmp	r3, #161	; 0xa1
 800176c:	d809      	bhi.n	8001782 <usb_rx_handler+0x45a>
 800176e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001772:	2ba2      	cmp	r3, #162	; 0xa2
 8001774:	d805      	bhi.n	8001782 <usb_rx_handler+0x45a>
                         dataEndNumber > MAX_VAL_M27    ||
                         dataOffset > usb_max_calib_value) {
 8001776:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800177a:	b29a      	uxth	r2, r3
 800177c:	8a3b      	ldrh	r3, [r7, #16]
                         dataEndNumber > MAX_VAL_M27    ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d203      	bcs.n	800178a <usb_rx_handler+0x462>
                         usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 8001782:	2301      	movs	r3, #1
 8001784:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                         break;
 8001788:	e08a      	b.n	80018a0 <usb_rx_handler+0x578>
                     }

                     uint8_t i_usb    = 6;
 800178a:	2306      	movs	r3, #6
 800178c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                     uint16_t i_calib = dataStartNumber;
 8001790:	8a7b      	ldrh	r3, [r7, #18]
 8001792:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 8001796:	e017      	b.n	80017c8 <usb_rx_handler+0x4a0>

                         memcpy( &DevNVRAM.calibration_table.dacValA_m27[i_calib],
 8001798:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800179c:	33b8      	adds	r3, #184	; 0xb8
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4a7c      	ldr	r2, [pc, #496]	; (8001994 <usb_rx_handler+0x66c>)
 80017a2:	4413      	add	r3, r2
                                 &usb->buff[i_usb],
 80017a4:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	440a      	add	r2, r1
 80017ac:	3203      	adds	r2, #3
 80017ae:	8812      	ldrh	r2, [r2, #0]
 80017b0:	b292      	uxth	r2, r2
                         memcpy( &DevNVRAM.calibration_table.dacValA_m27[i_calib],
 80017b2:	801a      	strh	r2, [r3, #0]
                                 sizeof(uint16_t) );

                         i_usb   += 2;
 80017b4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80017b8:	3302      	adds	r3, #2
 80017ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                         i_calib += 1;
 80017be:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80017c2:	3301      	adds	r3, #1
 80017c4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 80017c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80017cc:	2b3f      	cmp	r3, #63	; 0x3f
 80017ce:	d805      	bhi.n	80017dc <usb_rx_handler+0x4b4>
 80017d0:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80017d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80017d8:	429a      	cmp	r2, r3
 80017da:	d3dd      	bcc.n	8001798 <usb_rx_handler+0x470>
                     }
                     /* Обнуляем правую оставшуюся часть массива, для того, чтобы в
                      * таблице не оставалось мусорных данных */
                     memset( &DevNVRAM.calibration_table.dacValA_m27[dataEndNumber],
 80017dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80017e0:	33b8      	adds	r3, #184	; 0xb8
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4a6b      	ldr	r2, [pc, #428]	; (8001994 <usb_rx_handler+0x66c>)
 80017e6:	1898      	adds	r0, r3, r2
                             0x00,
                             (MAX_VAL_M27 - dataEndNumber) * sizeof(uint16_t) );
 80017e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80017ec:	f1c3 03a2 	rsb	r3, r3, #162	; 0xa2
                     memset( &DevNVRAM.calibration_table.dacValA_m27[dataEndNumber],
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	461a      	mov	r2, r3
 80017f4:	2100      	movs	r1, #0
 80017f6:	f008 f985 	bl	8009b04 <memset>
                     break;
 80017fa:	e051      	b.n	80018a0 <usb_rx_handler+0x578>

                }
                case 0x03 :
                {
                    if (dataStartNumber >= MAX_VAL_M27 ||
 80017fc:	8a7b      	ldrh	r3, [r7, #18]
 80017fe:	2ba1      	cmp	r3, #161	; 0xa1
 8001800:	d809      	bhi.n	8001816 <usb_rx_handler+0x4ee>
 8001802:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001806:	2ba2      	cmp	r3, #162	; 0xa2
 8001808:	d805      	bhi.n	8001816 <usb_rx_handler+0x4ee>
                         dataEndNumber > MAX_VAL_M27    ||
                         dataOffset > usb_max_calib_value) {
 800180a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800180e:	b29a      	uxth	r2, r3
 8001810:	8a3b      	ldrh	r3, [r7, #16]
                         dataEndNumber > MAX_VAL_M27    ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d203      	bcs.n	800181e <usb_rx_handler+0x4f6>
                         usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 8001816:	2301      	movs	r3, #1
 8001818:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                         break;
 800181c:	e040      	b.n	80018a0 <usb_rx_handler+0x578>
                     }

                     uint8_t i_usb    = 6;
 800181e:	2306      	movs	r3, #6
 8001820:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                     uint16_t i_calib = dataStartNumber;
 8001824:	8a7b      	ldrh	r3, [r7, #18]
 8001826:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 800182a:	e019      	b.n	8001860 <usb_rx_handler+0x538>

                         memcpy( &DevNVRAM.calibration_table.dacValB_m27[i_calib],
 800182c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001830:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4a57      	ldr	r2, [pc, #348]	; (8001994 <usb_rx_handler+0x66c>)
 8001838:	4413      	add	r3, r2
 800183a:	3304      	adds	r3, #4
                                 &usb->buff[i_usb],
 800183c:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	440a      	add	r2, r1
 8001844:	3203      	adds	r2, #3
 8001846:	8812      	ldrh	r2, [r2, #0]
 8001848:	b292      	uxth	r2, r2
                         memcpy( &DevNVRAM.calibration_table.dacValB_m27[i_calib],
 800184a:	801a      	strh	r2, [r3, #0]
                                 sizeof(uint16_t) );

                         i_usb   += 2;
 800184c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001850:	3302      	adds	r3, #2
 8001852:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                         i_calib += 1;
 8001856:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800185a:	3301      	adds	r3, #1
 800185c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 8001860:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001864:	2b3f      	cmp	r3, #63	; 0x3f
 8001866:	d805      	bhi.n	8001874 <usb_rx_handler+0x54c>
 8001868:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800186c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001870:	429a      	cmp	r2, r3
 8001872:	d3db      	bcc.n	800182c <usb_rx_handler+0x504>
                     }
                     /* Обнуляем правую оставшуюся часть массива, для того, чтобы в
                      * таблице не оставалось мусорных данных */
                     memset( &DevNVRAM.calibration_table.dacValB_m27[dataEndNumber],
 8001874:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001878:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4a45      	ldr	r2, [pc, #276]	; (8001994 <usb_rx_handler+0x66c>)
 8001880:	4413      	add	r3, r2
 8001882:	1d18      	adds	r0, r3, #4
                             0x00,
                             (MAX_VAL_M27 - dataEndNumber) * sizeof(uint16_t) );
 8001884:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001888:	f1c3 03a2 	rsb	r3, r3, #162	; 0xa2
                     memset( &DevNVRAM.calibration_table.dacValB_m27[dataEndNumber],
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	461a      	mov	r2, r3
 8001890:	2100      	movs	r1, #0
 8001892:	f008 f937 	bl	8009b04 <memset>
                     break;
 8001896:	e003      	b.n	80018a0 <usb_rx_handler+0x578>

                }
                default :
                    usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 8001898:	2301      	movs	r3, #1
 800189a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    break;
 800189e:	bf00      	nop
            };

            usb_tx_buff[0] = cmd;
 80018a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            memcpy(usb_tx_buff + 2, &dataStartNumber, sizeof(uint16_t));
 80018a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ac:	3302      	adds	r3, #2
 80018ae:	8a7a      	ldrh	r2, [r7, #18]
 80018b0:	801a      	strh	r2, [r3, #0]
            memcpy(usb_tx_buff + 4, &dataOffset, sizeof(uint16_t));
 80018b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b6:	3304      	adds	r3, #4
 80018b8:	8a3a      	ldrh	r2, [r7, #16]
 80018ba:	801a      	strh	r2, [r3, #0]
            usb_tx_buff[2 + 2 * sizeof(uint16_t) + 1] = 0x00;
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            CDC_Transmit_FS(usb_tx_buff, 7);
 80018c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c6:	2107      	movs	r1, #7
 80018c8:	4618      	mov	r0, r3
 80018ca:	f007 fd05 	bl	80092d8 <CDC_Transmit_FS>
        }
            break;
 80018ce:	e059      	b.n	8001984 <usb_rx_handler+0x65c>
//        case 0x0B :
//        {
        case 0x0C :
        {
            uint32_t crc;
            crc_read_from_flash(&crc);
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fddd 	bl	8000494 <crc_read_from_flash>
            usb_tx_buff[0] = cmd;
 80018da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80018e2:	68fb      	ldr	r3, [r7, #12]
            memcpy( &usb_tx_buff[1], &crc, 4 );
 80018e4:	f8c7 3025 	str.w	r3, [r7, #37]	; 0x25
            CDC_Transmit_FS(usb_tx_buff, 5 );
 80018e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ec:	2105      	movs	r1, #5
 80018ee:	4618      	mov	r0, r3
 80018f0:	f007 fcf2 	bl	80092d8 <CDC_Transmit_FS>
            int a = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	66bb      	str	r3, [r7, #104]	; 0x68
        }
            break;
 80018f8:	e044      	b.n	8001984 <usb_rx_handler+0x65c>
        case 0x0D :
        {
//        case 0x0C :
//        {
            /* Правильная команда тут - 0х0D, изменено для тестирования */
            if (usb->len >= 2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	789b      	ldrb	r3, [r3, #2]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d90c      	bls.n	800191c <usb_rx_handler+0x5f4>
            {
                changeTableFlag = true;
 8001902:	4b25      	ldr	r3, [pc, #148]	; (8001998 <usb_rx_handler+0x670>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
                if ( flash_write_calibTable( &DevNVRAM ) != HAL_OK ) {
 8001908:	4822      	ldr	r0, [pc, #136]	; (8001994 <usb_rx_handler+0x66c>)
 800190a:	f7fe fe03 	bl	8000514 <flash_write_calibTable>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d136      	bne.n	8001982 <usb_rx_handler+0x65a>
                    break;
                }
                usb_tx_buff[1] = 0x00; // успешно
 8001914:	2300      	movs	r3, #0
 8001916:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800191a:	e002      	b.n	8001922 <usb_rx_handler+0x5fa>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 800191c:	2301      	movs	r3, #1
 800191e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            usb_tx_buff[0] = cmd;
 8001922:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001926:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            CDC_Transmit_FS(usb_tx_buff, 2);
 800192a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192e:	2102      	movs	r1, #2
 8001930:	4618      	mov	r0, r3
 8001932:	f007 fcd1 	bl	80092d8 <CDC_Transmit_FS>
            break;
 8001936:	e025      	b.n	8001984 <usb_rx_handler+0x65c>
        }

        /* Команда приема шага калибровки */
        case 0x0E :
        {
            if (usb->len < 10) {
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	789b      	ldrb	r3, [r3, #2]
 800193c:	2b09      	cmp	r3, #9
 800193e:	d802      	bhi.n	8001946 <usb_rx_handler+0x61e>
                usb_tx_buff[1] = 0x01;  // ошибка
 8001940:	2301      	movs	r3, #1
 8001942:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }

            const uint8_t number_calib_parameters = 5;
 8001946:	2305      	movs	r3, #5
 8001948:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
            memcpy( &DevNVRAM.calibration_table.calibration_step,
                    &usb->buff[1],
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	1d19      	adds	r1, r3, #4
            memcpy( &DevNVRAM.calibration_table.calibration_step,
 8001950:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	461a      	mov	r2, r3
 8001958:	4810      	ldr	r0, [pc, #64]	; (800199c <usb_rx_handler+0x674>)
 800195a:	f008 f8c5 	bl	8009ae8 <memcpy>
                    sizeof(uint16_t) * number_calib_parameters );

            usb_tx_buff[0] = cmd;
 800195e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001962:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            CDC_Transmit_FS(usb_tx_buff, 2);
 8001966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196a:	2102      	movs	r1, #2
 800196c:	4618      	mov	r0, r3
 800196e:	f007 fcb3 	bl	80092d8 <CDC_Transmit_FS>
            break;
 8001972:	e007      	b.n	8001984 <usb_rx_handler+0x65c>
        }

        /* По умолчанию, если прочитанная команда не соответствует ни одной команде
         * в протоколе, отправляем в ответ просто 0, как сигнал ошибки. */
        default:
            CDC_Transmit_FS(0, 1);
 8001974:	2101      	movs	r1, #1
 8001976:	2000      	movs	r0, #0
 8001978:	f007 fcae 	bl	80092d8 <CDC_Transmit_FS>
 800197c:	e002      	b.n	8001984 <usb_rx_handler+0x65c>
            break;
 800197e:	bf00      	nop
 8001980:	e000      	b.n	8001984 <usb_rx_handler+0x65c>
                    break;
 8001982:	bf00      	nop
    };

    /*-END MAIN HANDLER CODE-------------------------------------------------*/

    usb->is_handled = true;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	705a      	strb	r2, [r3, #1]

    return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3784      	adds	r7, #132	; 0x84
 8001990:	46bd      	mov	sp, r7
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	200004dc 	.word	0x200004dc
 8001998:	20000244 	.word	0x20000244
 800199c:	200004e0 	.word	0x200004e0

080019a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019a2:	e003      	b.n	80019ac <LoopCopyDataInit>

080019a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80019a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019aa:	3104      	adds	r1, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019ac:	480a      	ldr	r0, [pc, #40]	; (80019d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80019b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019b4:	d3f6      	bcc.n	80019a4 <CopyDataInit>
  ldr r2, =_sbss
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80019b8:	e002      	b.n	80019c0 <LoopFillZerobss>

080019ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80019bc:	f842 3b04 	str.w	r3, [r2], #4

080019c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80019c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019c4:	d3f9      	bcc.n	80019ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019c6:	f7ff fc7b 	bl	80012c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ca:	f008 f869 	bl	8009aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ce:	f7fe ff7f 	bl	80008d0 <main>
  bx lr
 80019d2:	4770      	bx	lr
  ldr r3, =_sidata
 80019d4:	0800ab38 	.word	0x0800ab38
  ldr r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019dc:	20000224 	.word	0x20000224
  ldr r2, =_sbss
 80019e0:	20000228 	.word	0x20000228
  ldr r3, = _ebss
 80019e4:	20001598 	.word	0x20001598

080019e8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <CAN1_RX1_IRQHandler>
	...

080019ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_Init+0x28>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_Init+0x28>)
 80019f6:	f043 0310 	orr.w	r3, r3, #16
 80019fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 fc0d 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f808 	bl	8001a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a08:	f7ff f9c6 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40022000 	.word	0x40022000

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_InitTick+0x54>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x58>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fc25 	bl	8002286 <HAL_SYSTICK_Config>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00e      	b.n	8001a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d80a      	bhi.n	8001a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f000 fbed 	bl	8002232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a58:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_InitTick+0x5c>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e000      	b.n	8001a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000044 	.word	0x20000044
 8001a70:	2000004c 	.word	0x2000004c
 8001a74:	20000048 	.word	0x20000048

08001a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_IncTick+0x1c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_IncTick+0x20>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a03      	ldr	r2, [pc, #12]	; (8001a98 <HAL_IncTick+0x20>)
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	2000004c 	.word	0x2000004c
 8001a98:	200009b4 	.word	0x200009b4

08001a9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b02      	ldr	r3, [pc, #8]	; (8001aac <HAL_GetTick+0x10>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	200009b4 	.word	0x200009b4

08001ab0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0be      	b.n	8001c50 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d109      	bne.n	8001af4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff f984 	bl	8000dfc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 fa81 	bl	8001ffc <ADC_ConversionStop_Disable>
 8001afa:	4603      	mov	r3, r0
 8001afc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 8099 	bne.w	8001c3e <HAL_ADC_Init+0x18e>
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8095 	bne.w	8001c3e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b1c:	f023 0302 	bic.w	r3, r3, #2
 8001b20:	f043 0202 	orr.w	r2, r3, #2
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7b1b      	ldrb	r3, [r3, #12]
 8001b36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b48:	d003      	beq.n	8001b52 <HAL_ADC_Init+0xa2>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d102      	bne.n	8001b58 <HAL_ADC_Init+0xa8>
 8001b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b56:	e000      	b.n	8001b5a <HAL_ADC_Init+0xaa>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7d1b      	ldrb	r3, [r3, #20]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d119      	bne.n	8001b9c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7b1b      	ldrb	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d109      	bne.n	8001b84 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	035a      	lsls	r2, r3, #13
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	e00b      	b.n	8001b9c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	f043 0220 	orr.w	r2, r3, #32
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <HAL_ADC_Init+0x1a8>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bcc:	d003      	beq.n	8001bd6 <HAL_ADC_Init+0x126>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d104      	bne.n	8001be0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	051b      	lsls	r3, r3, #20
 8001bde:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_ADC_Init+0x1ac>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d10b      	bne.n	8001c1c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	f023 0303 	bic.w	r3, r3, #3
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c1a:	e018      	b.n	8001c4e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	f023 0312 	bic.w	r3, r3, #18
 8001c24:	f043 0210 	orr.w	r2, r3, #16
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c3c:	e007      	b.n	8001c4e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	f043 0210 	orr.w	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	ffe1f7fd 	.word	0xffe1f7fd
 8001c5c:	ff1f0efe 	.word	0xff1f0efe

08001c60 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	d140      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d139      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d105      	bne.n	8001c9c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ca6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001caa:	d11d      	bne.n	8001ce8 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d119      	bne.n	8001ce8 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0220 	bic.w	r2, r2, #32
 8001cc2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d105      	bne.n	8001ce8 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f87c 	bl	8001de6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f06f 0212 	mvn.w	r2, #18
 8001cf6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	2b80      	cmp	r3, #128	; 0x80
 8001d04:	d14f      	bne.n	8001da6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d148      	bne.n	8001da6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d105      	bne.n	8001d2c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001d36:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001d3a:	d012      	beq.n	8001d62 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d125      	bne.n	8001d96 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001d54:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d58:	d11d      	bne.n	8001d96 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d119      	bne.n	8001d96 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d70:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d105      	bne.n	8001d96 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f96a 	bl	8002070 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 020c 	mvn.w	r2, #12
 8001da4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db0:	2b40      	cmp	r3, #64	; 0x40
 8001db2:	d114      	bne.n	8001dde <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d10d      	bne.n	8001dde <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f812 	bl	8001df8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0201 	mvn.w	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x20>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e0dc      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x1da>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b06      	cmp	r3, #6
 8001e3a:	d81c      	bhi.n	8001e76 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3b05      	subs	r3, #5
 8001e4e:	221f      	movs	r2, #31
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	4019      	ands	r1, r3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b05      	subs	r3, #5
 8001e68:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34
 8001e74:	e03c      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d81c      	bhi.n	8001eb8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3b23      	subs	r3, #35	; 0x23
 8001e90:	221f      	movs	r2, #31
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	4019      	ands	r1, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3b23      	subs	r3, #35	; 0x23
 8001eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8001eb6:	e01b      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3b41      	subs	r3, #65	; 0x41
 8001eca:	221f      	movs	r2, #31
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4019      	ands	r1, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3b41      	subs	r3, #65	; 0x41
 8001ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b09      	cmp	r3, #9
 8001ef6:	d91c      	bls.n	8001f32 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68d9      	ldr	r1, [r3, #12]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	3b1e      	subs	r3, #30
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	4019      	ands	r1, r3
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6898      	ldr	r0, [r3, #8]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	3b1e      	subs	r3, #30
 8001f24:	fa00 f203 	lsl.w	r2, r0, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	60da      	str	r2, [r3, #12]
 8001f30:	e019      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6919      	ldr	r1, [r3, #16]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	2207      	movs	r2, #7
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4019      	ands	r1, r3
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	6898      	ldr	r0, [r3, #8]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d003      	beq.n	8001f76 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f72:	2b11      	cmp	r3, #17
 8001f74:	d132      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d125      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d126      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f9c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b10      	cmp	r3, #16
 8001fa4:	d11a      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a13      	ldr	r2, [pc, #76]	; (8001ff8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001fac:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb0:	0c9a      	lsrs	r2, r3, #18
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fbc:	e002      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f9      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x1b2>
 8001fca:	e007      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	f043 0220 	orr.w	r2, r3, #32
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	40012400 	.word	0x40012400
 8001ff4:	20000044 	.word	0x20000044
 8001ff8:	431bde83 	.word	0x431bde83

08001ffc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	d127      	bne.n	8002066 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002026:	f7ff fd39 	bl	8001a9c <HAL_GetTick>
 800202a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800202c:	e014      	b.n	8002058 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800202e:	f7ff fd35 	bl	8001a9c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d90d      	bls.n	8002058 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	f043 0210 	orr.w	r2, r3, #16
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e007      	b.n	8002068 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d0e3      	beq.n	800202e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
	...

08002084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a0:	4013      	ands	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b6:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	60d3      	str	r3, [r2, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <__NVIC_GetPriorityGrouping+0x18>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	f003 0307 	and.w	r3, r3, #7
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	db0b      	blt.n	8002112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	f003 021f 	and.w	r2, r3, #31
 8002100:	4906      	ldr	r1, [pc, #24]	; (800211c <__NVIC_EnableIRQ+0x34>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	2001      	movs	r0, #1
 800210a:	fa00 f202 	lsl.w	r2, r0, r2
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	e000e100 	.word	0xe000e100

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db0a      	blt.n	800214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	; (800216c <__NVIC_SetPriority+0x4c>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	440b      	add	r3, r1
 8002144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002148:	e00a      	b.n	8002160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4908      	ldr	r1, [pc, #32]	; (8002170 <__NVIC_SetPriority+0x50>)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3b04      	subs	r3, #4
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	440b      	add	r3, r1
 800215e:	761a      	strb	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000e100 	.word	0xe000e100
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	; 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e8:	d301      	bcc.n	80021ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00f      	b.n	800220e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <SysTick_Config+0x40>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f6:	210f      	movs	r1, #15
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f7ff ff90 	bl	8002120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <SysTick_Config+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <SysTick_Config+0x40>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff2d 	bl	8002084 <__NVIC_SetPriorityGrouping>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002244:	f7ff ff42 	bl	80020cc <__NVIC_GetPriorityGrouping>
 8002248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7ff ff90 	bl	8002174 <NVIC_EncodePriority>
 8002254:	4602      	mov	r2, r0
 8002256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff5f 	bl	8002120 <__NVIC_SetPriority>
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff35 	bl	80020e8 <__NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffa2 	bl	80021d8 <SysTick_Config>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e00e      	b.n	80022ce <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	795b      	ldrb	r3, [r3, #5]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d105      	bne.n	80022c6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7fe fddf 	bl	8000e84 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b087      	sub	sp, #28
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2202      	movs	r2, #2
 80022ea:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e00a      	b.n	8002318 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	441a      	add	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	d3f0      	bcc.n	8002302 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800232e:	693b      	ldr	r3, [r7, #16]
}
 8002330:	4618      	mov	r0, r3
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
	...

0800233c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800233c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002356:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <HAL_FLASH_Program+0xd8>)
 8002358:	7e1b      	ldrb	r3, [r3, #24]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_FLASH_Program+0x26>
 800235e:	2302      	movs	r3, #2
 8002360:	e054      	b.n	800240c <HAL_FLASH_Program+0xd0>
 8002362:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <HAL_FLASH_Program+0xd8>)
 8002364:	2201      	movs	r2, #1
 8002366:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002368:	f24c 3050 	movw	r0, #50000	; 0xc350
 800236c:	f000 f8a8 	bl	80024c0 <FLASH_WaitForLastOperation>
 8002370:	4603      	mov	r3, r0
 8002372:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d144      	bne.n	8002404 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d102      	bne.n	8002386 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002380:	2301      	movs	r3, #1
 8002382:	757b      	strb	r3, [r7, #21]
 8002384:	e007      	b.n	8002396 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d102      	bne.n	8002392 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800238c:	2302      	movs	r3, #2
 800238e:	757b      	strb	r3, [r7, #21]
 8002390:	e001      	b.n	8002396 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002392:	2304      	movs	r3, #4
 8002394:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002396:	2300      	movs	r3, #0
 8002398:	75bb      	strb	r3, [r7, #22]
 800239a:	e02d      	b.n	80023f8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800239c:	7dbb      	ldrb	r3, [r7, #22]
 800239e:	005a      	lsls	r2, r3, #1
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	eb02 0c03 	add.w	ip, r2, r3
 80023a6:	7dbb      	ldrb	r3, [r7, #22]
 80023a8:	0119      	lsls	r1, r3, #4
 80023aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023ae:	f1c1 0620 	rsb	r6, r1, #32
 80023b2:	f1a1 0020 	sub.w	r0, r1, #32
 80023b6:	fa22 f401 	lsr.w	r4, r2, r1
 80023ba:	fa03 f606 	lsl.w	r6, r3, r6
 80023be:	4334      	orrs	r4, r6
 80023c0:	fa23 f000 	lsr.w	r0, r3, r0
 80023c4:	4304      	orrs	r4, r0
 80023c6:	fa23 f501 	lsr.w	r5, r3, r1
 80023ca:	b2a3      	uxth	r3, r4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4660      	mov	r0, ip
 80023d0:	f000 f85a 	bl	8002488 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023d8:	f000 f872 	bl	80024c0 <FLASH_WaitForLastOperation>
 80023dc:	4603      	mov	r3, r0
 80023de:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <HAL_FLASH_Program+0xdc>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <HAL_FLASH_Program+0xdc>)
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d107      	bne.n	8002402 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80023f2:	7dbb      	ldrb	r3, [r7, #22]
 80023f4:	3301      	adds	r3, #1
 80023f6:	75bb      	strb	r3, [r7, #22]
 80023f8:	7dba      	ldrb	r2, [r7, #22]
 80023fa:	7d7b      	ldrb	r3, [r7, #21]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d3cd      	bcc.n	800239c <HAL_FLASH_Program+0x60>
 8002400:	e000      	b.n	8002404 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002402:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_FLASH_Program+0xd8>)
 8002406:	2200      	movs	r2, #0
 8002408:	761a      	strb	r2, [r3, #24]

  return status;
 800240a:	7dfb      	ldrb	r3, [r7, #23]
}
 800240c:	4618      	mov	r0, r3
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002414:	200009b8 	.word	0x200009b8
 8002418:	40022000 	.word	0x40022000

0800241c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <HAL_FLASH_Unlock+0x40>)
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00d      	beq.n	800244e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_FLASH_Unlock+0x40>)
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <HAL_FLASH_Unlock+0x44>)
 8002436:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <HAL_FLASH_Unlock+0x40>)
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <HAL_FLASH_Unlock+0x48>)
 800243c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <HAL_FLASH_Unlock+0x40>)
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800244e:	79fb      	ldrb	r3, [r7, #7]
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40022000 	.word	0x40022000
 8002460:	45670123 	.word	0x45670123
 8002464:	cdef89ab 	.word	0xcdef89ab

08002468 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_FLASH_Lock+0x1c>)
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_FLASH_Lock+0x1c>)
 8002472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002476:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40022000 	.word	0x40022000

08002488 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <FLASH_Program_HalfWord+0x30>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <FLASH_Program_HalfWord+0x34>)
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	4a07      	ldr	r2, [pc, #28]	; (80024bc <FLASH_Program_HalfWord+0x34>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	887a      	ldrh	r2, [r7, #2]
 80024aa:	801a      	strh	r2, [r3, #0]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	200009b8 	.word	0x200009b8
 80024bc:	40022000 	.word	0x40022000

080024c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff fae8 	bl	8001a9c <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80024ce:	e010      	b.n	80024f2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d6:	d00c      	beq.n	80024f2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <FLASH_WaitForLastOperation+0x2e>
 80024de:	f7ff fadd 	bl	8001a9c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d201      	bcs.n	80024f2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e025      	b.n	800253e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <FLASH_WaitForLastOperation+0x88>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1e8      	bne.n	80024d0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <FLASH_WaitForLastOperation+0x88>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <FLASH_WaitForLastOperation+0x88>)
 800250c:	2220      	movs	r2, #32
 800250e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <FLASH_WaitForLastOperation+0x88>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10b      	bne.n	8002534 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800251c:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <FLASH_WaitForLastOperation+0x88>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <FLASH_WaitForLastOperation+0x88>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002534:	f000 f80a 	bl	800254c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000

0800254c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <FLASH_SetErrorCode+0x98>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002562:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <FLASH_SetErrorCode+0x9c>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f043 0302 	orr.w	r3, r3, #2
 800256a:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <FLASH_SetErrorCode+0x9c>)
 800256c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f043 0310 	orr.w	r3, r3, #16
 8002574:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <FLASH_SetErrorCode+0x98>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <FLASH_SetErrorCode+0x9c>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <FLASH_SetErrorCode+0x9c>)
 800258c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <FLASH_SetErrorCode+0x98>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <FLASH_SetErrorCode+0x9c>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f043 0304 	orr.w	r3, r3, #4
 80025aa:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <FLASH_SetErrorCode+0x9c>)
 80025ac:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <FLASH_SetErrorCode+0x98>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <FLASH_SetErrorCode+0x98>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f240 1201 	movw	r2, #257	; 0x101
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d106      	bne.n	80025d2 <FLASH_SetErrorCode+0x86>
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <FLASH_SetErrorCode+0x98>)
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4a06      	ldr	r2, [pc, #24]	; (80025e4 <FLASH_SetErrorCode+0x98>)
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	61d3      	str	r3, [r2, #28]
}  
 80025d0:	e002      	b.n	80025d8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80025d2:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <FLASH_SetErrorCode+0x98>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	60d3      	str	r3, [r2, #12]
}  
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40022000 	.word	0x40022000
 80025e8:	200009b8 	.word	0x200009b8

080025ec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025fe:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <HAL_FLASHEx_Erase+0xd0>)
 8002600:	7e1b      	ldrb	r3, [r3, #24]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_FLASHEx_Erase+0x1e>
 8002606:	2302      	movs	r3, #2
 8002608:	e053      	b.n	80026b2 <HAL_FLASHEx_Erase+0xc6>
 800260a:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <HAL_FLASHEx_Erase+0xd0>)
 800260c:	2201      	movs	r2, #1
 800260e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d116      	bne.n	8002646 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002618:	f24c 3050 	movw	r0, #50000	; 0xc350
 800261c:	f7ff ff50 	bl	80024c0 <FLASH_WaitForLastOperation>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d141      	bne.n	80026aa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002626:	2001      	movs	r0, #1
 8002628:	f000 f84c 	bl	80026c4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800262c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002630:	f7ff ff46 	bl	80024c0 <FLASH_WaitForLastOperation>
 8002634:	4603      	mov	r3, r0
 8002636:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <HAL_FLASHEx_Erase+0xd4>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	4a20      	ldr	r2, [pc, #128]	; (80026c0 <HAL_FLASHEx_Erase+0xd4>)
 800263e:	f023 0304 	bic.w	r3, r3, #4
 8002642:	6113      	str	r3, [r2, #16]
 8002644:	e031      	b.n	80026aa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002646:	f24c 3050 	movw	r0, #50000	; 0xc350
 800264a:	f7ff ff39 	bl	80024c0 <FLASH_WaitForLastOperation>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d12a      	bne.n	80026aa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	f04f 32ff 	mov.w	r2, #4294967295
 800265a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	e019      	b.n	8002698 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002664:	68b8      	ldr	r0, [r7, #8]
 8002666:	f000 f849 	bl	80026fc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800266a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800266e:	f7ff ff27 	bl	80024c0 <FLASH_WaitForLastOperation>
 8002672:	4603      	mov	r3, r0
 8002674:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_FLASHEx_Erase+0xd4>)
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <HAL_FLASHEx_Erase+0xd4>)
 800267c:	f023 0302 	bic.w	r3, r3, #2
 8002680:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	601a      	str	r2, [r3, #0]
            break;
 800268e:	e00c      	b.n	80026aa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002696:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	029a      	lsls	r2, r3, #10
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d3dc      	bcc.n	8002664 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <HAL_FLASHEx_Erase+0xd0>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	761a      	strb	r2, [r3, #24]

  return status;
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200009b8 	.word	0x200009b8
 80026c0:	40022000 	.word	0x40022000

080026c4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <FLASH_MassErase+0x30>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <FLASH_MassErase+0x34>)
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <FLASH_MassErase+0x34>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <FLASH_MassErase+0x34>)
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <FLASH_MassErase+0x34>)
 80026e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026e8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	200009b8 	.word	0x200009b8
 80026f8:	40022000 	.word	0x40022000

080026fc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <FLASH_PageErase+0x38>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <FLASH_PageErase+0x3c>)
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <FLASH_PageErase+0x3c>)
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <FLASH_PageErase+0x3c>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <FLASH_PageErase+0x3c>)
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	4a05      	ldr	r2, [pc, #20]	; (8002738 <FLASH_PageErase+0x3c>)
 8002722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002726:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	200009b8 	.word	0x200009b8
 8002738:	40022000 	.word	0x40022000

0800273c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800273c:	b480      	push	{r7}
 800273e:	b08b      	sub	sp, #44	; 0x2c
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002746:	2300      	movs	r3, #0
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274e:	e169      	b.n	8002a24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002750:	2201      	movs	r2, #1
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	429a      	cmp	r2, r3
 800276a:	f040 8158 	bne.w	8002a1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4a9a      	ldr	r2, [pc, #616]	; (80029dc <HAL_GPIO_Init+0x2a0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d05e      	beq.n	8002836 <HAL_GPIO_Init+0xfa>
 8002778:	4a98      	ldr	r2, [pc, #608]	; (80029dc <HAL_GPIO_Init+0x2a0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d875      	bhi.n	800286a <HAL_GPIO_Init+0x12e>
 800277e:	4a98      	ldr	r2, [pc, #608]	; (80029e0 <HAL_GPIO_Init+0x2a4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d058      	beq.n	8002836 <HAL_GPIO_Init+0xfa>
 8002784:	4a96      	ldr	r2, [pc, #600]	; (80029e0 <HAL_GPIO_Init+0x2a4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d86f      	bhi.n	800286a <HAL_GPIO_Init+0x12e>
 800278a:	4a96      	ldr	r2, [pc, #600]	; (80029e4 <HAL_GPIO_Init+0x2a8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d052      	beq.n	8002836 <HAL_GPIO_Init+0xfa>
 8002790:	4a94      	ldr	r2, [pc, #592]	; (80029e4 <HAL_GPIO_Init+0x2a8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d869      	bhi.n	800286a <HAL_GPIO_Init+0x12e>
 8002796:	4a94      	ldr	r2, [pc, #592]	; (80029e8 <HAL_GPIO_Init+0x2ac>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d04c      	beq.n	8002836 <HAL_GPIO_Init+0xfa>
 800279c:	4a92      	ldr	r2, [pc, #584]	; (80029e8 <HAL_GPIO_Init+0x2ac>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d863      	bhi.n	800286a <HAL_GPIO_Init+0x12e>
 80027a2:	4a92      	ldr	r2, [pc, #584]	; (80029ec <HAL_GPIO_Init+0x2b0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d046      	beq.n	8002836 <HAL_GPIO_Init+0xfa>
 80027a8:	4a90      	ldr	r2, [pc, #576]	; (80029ec <HAL_GPIO_Init+0x2b0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d85d      	bhi.n	800286a <HAL_GPIO_Init+0x12e>
 80027ae:	2b12      	cmp	r3, #18
 80027b0:	d82a      	bhi.n	8002808 <HAL_GPIO_Init+0xcc>
 80027b2:	2b12      	cmp	r3, #18
 80027b4:	d859      	bhi.n	800286a <HAL_GPIO_Init+0x12e>
 80027b6:	a201      	add	r2, pc, #4	; (adr r2, 80027bc <HAL_GPIO_Init+0x80>)
 80027b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027bc:	08002837 	.word	0x08002837
 80027c0:	08002811 	.word	0x08002811
 80027c4:	08002823 	.word	0x08002823
 80027c8:	08002865 	.word	0x08002865
 80027cc:	0800286b 	.word	0x0800286b
 80027d0:	0800286b 	.word	0x0800286b
 80027d4:	0800286b 	.word	0x0800286b
 80027d8:	0800286b 	.word	0x0800286b
 80027dc:	0800286b 	.word	0x0800286b
 80027e0:	0800286b 	.word	0x0800286b
 80027e4:	0800286b 	.word	0x0800286b
 80027e8:	0800286b 	.word	0x0800286b
 80027ec:	0800286b 	.word	0x0800286b
 80027f0:	0800286b 	.word	0x0800286b
 80027f4:	0800286b 	.word	0x0800286b
 80027f8:	0800286b 	.word	0x0800286b
 80027fc:	0800286b 	.word	0x0800286b
 8002800:	08002819 	.word	0x08002819
 8002804:	0800282d 	.word	0x0800282d
 8002808:	4a79      	ldr	r2, [pc, #484]	; (80029f0 <HAL_GPIO_Init+0x2b4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800280e:	e02c      	b.n	800286a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	623b      	str	r3, [r7, #32]
          break;
 8002816:	e029      	b.n	800286c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	3304      	adds	r3, #4
 800281e:	623b      	str	r3, [r7, #32]
          break;
 8002820:	e024      	b.n	800286c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	3308      	adds	r3, #8
 8002828:	623b      	str	r3, [r7, #32]
          break;
 800282a:	e01f      	b.n	800286c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	330c      	adds	r3, #12
 8002832:	623b      	str	r3, [r7, #32]
          break;
 8002834:	e01a      	b.n	800286c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800283e:	2304      	movs	r3, #4
 8002840:	623b      	str	r3, [r7, #32]
          break;
 8002842:	e013      	b.n	800286c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d105      	bne.n	8002858 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800284c:	2308      	movs	r3, #8
 800284e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	611a      	str	r2, [r3, #16]
          break;
 8002856:	e009      	b.n	800286c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002858:	2308      	movs	r3, #8
 800285a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	615a      	str	r2, [r3, #20]
          break;
 8002862:	e003      	b.n	800286c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002864:	2300      	movs	r3, #0
 8002866:	623b      	str	r3, [r7, #32]
          break;
 8002868:	e000      	b.n	800286c <HAL_GPIO_Init+0x130>
          break;
 800286a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	2bff      	cmp	r3, #255	; 0xff
 8002870:	d801      	bhi.n	8002876 <HAL_GPIO_Init+0x13a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	e001      	b.n	800287a <HAL_GPIO_Init+0x13e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3304      	adds	r3, #4
 800287a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2bff      	cmp	r3, #255	; 0xff
 8002880:	d802      	bhi.n	8002888 <HAL_GPIO_Init+0x14c>
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	e002      	b.n	800288e <HAL_GPIO_Init+0x152>
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	3b08      	subs	r3, #8
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	210f      	movs	r1, #15
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	401a      	ands	r2, r3
 80028a0:	6a39      	ldr	r1, [r7, #32]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	431a      	orrs	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80b1 	beq.w	8002a1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028bc:	4b4d      	ldr	r3, [pc, #308]	; (80029f4 <HAL_GPIO_Init+0x2b8>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	4a4c      	ldr	r2, [pc, #304]	; (80029f4 <HAL_GPIO_Init+0x2b8>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6193      	str	r3, [r2, #24]
 80028c8:	4b4a      	ldr	r3, [pc, #296]	; (80029f4 <HAL_GPIO_Init+0x2b8>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028d4:	4a48      	ldr	r2, [pc, #288]	; (80029f8 <HAL_GPIO_Init+0x2bc>)
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	3302      	adds	r3, #2
 80028dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	220f      	movs	r2, #15
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4013      	ands	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a40      	ldr	r2, [pc, #256]	; (80029fc <HAL_GPIO_Init+0x2c0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <HAL_GPIO_Init+0x1ec>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a3f      	ldr	r2, [pc, #252]	; (8002a00 <HAL_GPIO_Init+0x2c4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00d      	beq.n	8002924 <HAL_GPIO_Init+0x1e8>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a3e      	ldr	r2, [pc, #248]	; (8002a04 <HAL_GPIO_Init+0x2c8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d007      	beq.n	8002920 <HAL_GPIO_Init+0x1e4>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a3d      	ldr	r2, [pc, #244]	; (8002a08 <HAL_GPIO_Init+0x2cc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d101      	bne.n	800291c <HAL_GPIO_Init+0x1e0>
 8002918:	2303      	movs	r3, #3
 800291a:	e006      	b.n	800292a <HAL_GPIO_Init+0x1ee>
 800291c:	2304      	movs	r3, #4
 800291e:	e004      	b.n	800292a <HAL_GPIO_Init+0x1ee>
 8002920:	2302      	movs	r3, #2
 8002922:	e002      	b.n	800292a <HAL_GPIO_Init+0x1ee>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_GPIO_Init+0x1ee>
 8002928:	2300      	movs	r3, #0
 800292a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292c:	f002 0203 	and.w	r2, r2, #3
 8002930:	0092      	lsls	r2, r2, #2
 8002932:	4093      	lsls	r3, r2
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800293a:	492f      	ldr	r1, [pc, #188]	; (80029f8 <HAL_GPIO_Init+0x2bc>)
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	3302      	adds	r3, #2
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d006      	beq.n	8002962 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002954:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <HAL_GPIO_Init+0x2d0>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	492c      	ldr	r1, [pc, #176]	; (8002a0c <HAL_GPIO_Init+0x2d0>)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]
 8002960:	e006      	b.n	8002970 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002962:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <HAL_GPIO_Init+0x2d0>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	43db      	mvns	r3, r3
 800296a:	4928      	ldr	r1, [pc, #160]	; (8002a0c <HAL_GPIO_Init+0x2d0>)
 800296c:	4013      	ands	r3, r2
 800296e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d006      	beq.n	800298a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800297c:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <HAL_GPIO_Init+0x2d0>)
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4922      	ldr	r1, [pc, #136]	; (8002a0c <HAL_GPIO_Init+0x2d0>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
 8002988:	e006      	b.n	8002998 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_GPIO_Init+0x2d0>)
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	43db      	mvns	r3, r3
 8002992:	491e      	ldr	r1, [pc, #120]	; (8002a0c <HAL_GPIO_Init+0x2d0>)
 8002994:	4013      	ands	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d006      	beq.n	80029b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029a4:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_GPIO_Init+0x2d0>)
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	4918      	ldr	r1, [pc, #96]	; (8002a0c <HAL_GPIO_Init+0x2d0>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]
 80029b0:	e006      	b.n	80029c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <HAL_GPIO_Init+0x2d0>)
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	4914      	ldr	r1, [pc, #80]	; (8002a0c <HAL_GPIO_Init+0x2d0>)
 80029bc:	4013      	ands	r3, r2
 80029be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d021      	beq.n	8002a10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <HAL_GPIO_Init+0x2d0>)
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	490e      	ldr	r1, [pc, #56]	; (8002a0c <HAL_GPIO_Init+0x2d0>)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60cb      	str	r3, [r1, #12]
 80029d8:	e021      	b.n	8002a1e <HAL_GPIO_Init+0x2e2>
 80029da:	bf00      	nop
 80029dc:	10320000 	.word	0x10320000
 80029e0:	10310000 	.word	0x10310000
 80029e4:	10220000 	.word	0x10220000
 80029e8:	10210000 	.word	0x10210000
 80029ec:	10120000 	.word	0x10120000
 80029f0:	10110000 	.word	0x10110000
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40010000 	.word	0x40010000
 80029fc:	40010800 	.word	0x40010800
 8002a00:	40010c00 	.word	0x40010c00
 8002a04:	40011000 	.word	0x40011000
 8002a08:	40011400 	.word	0x40011400
 8002a0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_GPIO_Init+0x304>)
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	4909      	ldr	r1, [pc, #36]	; (8002a40 <HAL_GPIO_Init+0x304>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	3301      	adds	r3, #1
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f47f ae8e 	bne.w	8002750 <HAL_GPIO_Init+0x14>
  }
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	372c      	adds	r7, #44	; 0x2c
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	40010400 	.word	0x40010400

08002a44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	e001      	b.n	8002a66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	807b      	strh	r3, [r7, #2]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a82:	787b      	ldrb	r3, [r7, #1]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a88:	887a      	ldrh	r2, [r7, #2]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a8e:	e003      	b.n	8002a98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a90:	887b      	ldrh	r3, [r7, #2]
 8002a92:	041a      	lsls	r2, r3, #16
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	611a      	str	r2, [r3, #16]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
	...

08002aa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d006      	beq.n	8002ac8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fd fc4c 	bl	8000360 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40010400 	.word	0x40010400

08002ad4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ad6:	b08b      	sub	sp, #44	; 0x2c
 8002ad8:	af06      	add	r7, sp, #24
 8002ada:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0fd      	b.n	8002ce2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f006 fd20 	bl	8009540 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2203      	movs	r2, #3
 8002b04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f002 fe95 	bl	800583c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	687e      	ldr	r6, [r7, #4]
 8002b1a:	466d      	mov	r5, sp
 8002b1c:	f106 0410 	add.w	r4, r6, #16
 8002b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	602b      	str	r3, [r5, #0]
 8002b28:	1d33      	adds	r3, r6, #4
 8002b2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b2c:	6838      	ldr	r0, [r7, #0]
 8002b2e:	f002 fe5f 	bl	80057f0 <USB_CoreInit>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0ce      	b.n	8002ce2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f002 fe90 	bl	8005870 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b50:	2300      	movs	r3, #0
 8002b52:	73fb      	strb	r3, [r7, #15]
 8002b54:	e04c      	b.n	8002bf0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	3301      	adds	r3, #1
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	b298      	uxth	r0, r3
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	3336      	adds	r3, #54	; 0x36
 8002b94:	4602      	mov	r2, r0
 8002b96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3303      	adds	r3, #3
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	3338      	adds	r3, #56	; 0x38
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	333c      	adds	r3, #60	; 0x3c
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	3340      	adds	r3, #64	; 0x40
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	3301      	adds	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d3ad      	bcc.n	8002b56 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	e044      	b.n	8002c8a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	3301      	adds	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d3b5      	bcc.n	8002c00 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	687e      	ldr	r6, [r7, #4]
 8002c9c:	466d      	mov	r5, sp
 8002c9e:	f106 0410 	add.w	r4, r6, #16
 8002ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	602b      	str	r3, [r5, #0]
 8002caa:	1d33      	adds	r3, r6, #4
 8002cac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cae:	6838      	ldr	r0, [r7, #0]
 8002cb0:	f002 fdea 	bl	8005888 <USB_DevInit>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e00d      	b.n	8002ce2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f004 fd84 	bl	80077e8 <USB_DevDisconnect>

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_PCD_Start+0x16>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e016      	b.n	8002d2e <HAL_PCD_Start+0x44>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f002 fd7f 	bl	8005810 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d12:	2101      	movs	r1, #1
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f006 fe86 	bl	8009a26 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f004 fd58 	bl	80077d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b088      	sub	sp, #32
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f004 fd5a 	bl	80077fc <USB_ReadInterrupts>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d52:	d102      	bne.n	8002d5a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fb61 	bl	800341c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 fd4c 	bl	80077fc <USB_ReadInterrupts>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6e:	d112      	bne.n	8002d96 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d82:	b292      	uxth	r2, r2
 8002d84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f006 fc54 	bl	8009636 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d8e:	2100      	movs	r1, #0
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f925 	bl	8002fe0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f004 fd2e 	bl	80077fc <USB_ReadInterrupts>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002daa:	d10b      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dbe:	b292      	uxth	r2, r2
 8002dc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f004 fd17 	bl	80077fc <USB_ReadInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd8:	d10b      	bne.n	8002df2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dec:	b292      	uxth	r2, r2
 8002dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f004 fd00 	bl	80077fc <USB_ReadInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e06:	d126      	bne.n	8002e56 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0204 	bic.w	r2, r2, #4
 8002e1a:	b292      	uxth	r2, r2
 8002e1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0208 	bic.w	r2, r2, #8
 8002e32:	b292      	uxth	r2, r2
 8002e34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f006 fc35 	bl	80096a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e50:	b292      	uxth	r2, r2
 8002e52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f004 fcce 	bl	80077fc <USB_ReadInterrupts>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e6a:	f040 8084 	bne.w	8002f76 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	77fb      	strb	r3, [r7, #31]
 8002e72:	e011      	b.n	8002e98 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	7ffb      	ldrb	r3, [r7, #31]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	441a      	add	r2, r3
 8002e80:	7ffb      	ldrb	r3, [r7, #31]
 8002e82:	8812      	ldrh	r2, [r2, #0]
 8002e84:	b292      	uxth	r2, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	f107 0120 	add.w	r1, r7, #32
 8002e8c:	440b      	add	r3, r1
 8002e8e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002e92:	7ffb      	ldrb	r3, [r7, #31]
 8002e94:	3301      	adds	r3, #1
 8002e96:	77fb      	strb	r3, [r7, #31]
 8002e98:	7ffb      	ldrb	r3, [r7, #31]
 8002e9a:	2b07      	cmp	r3, #7
 8002e9c:	d9ea      	bls.n	8002e74 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0201 	orr.w	r2, r2, #1
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	b292      	uxth	r2, r2
 8002eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002ece:	bf00      	nop
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f6      	beq.n	8002ed0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef4:	b292      	uxth	r2, r2
 8002ef6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e010      	b.n	8002f22 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002f00:	7ffb      	ldrb	r3, [r7, #31]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	4611      	mov	r1, r2
 8002f08:	7ffa      	ldrb	r2, [r7, #31]
 8002f0a:	0092      	lsls	r2, r2, #2
 8002f0c:	440a      	add	r2, r1
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	f107 0120 	add.w	r1, r7, #32
 8002f14:	440b      	add	r3, r1
 8002f16:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002f1a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002f1c:	7ffb      	ldrb	r3, [r7, #31]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	77fb      	strb	r3, [r7, #31]
 8002f22:	7ffb      	ldrb	r3, [r7, #31]
 8002f24:	2b07      	cmp	r3, #7
 8002f26:	d9eb      	bls.n	8002f00 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0208 	orr.w	r2, r2, #8
 8002f3a:	b292      	uxth	r2, r2
 8002f3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f52:	b292      	uxth	r2, r2
 8002f54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0204 	orr.w	r2, r2, #4
 8002f6a:	b292      	uxth	r2, r2
 8002f6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f006 fb7f 	bl	8009674 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f004 fc3e 	bl	80077fc <USB_ReadInterrupts>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f8a:	d10e      	bne.n	8002faa <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f9e:	b292      	uxth	r2, r2
 8002fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f006 fb38 	bl	800961a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f004 fc24 	bl	80077fc <USB_ReadInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fd2:	b292      	uxth	r2, r2
 8002fd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_PCD_SetAddress+0x1a>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e013      	b.n	8003022 <HAL_PCD_SetAddress+0x42>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f004 fbcb 	bl	80077ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	4608      	mov	r0, r1
 8003034:	4611      	mov	r1, r2
 8003036:	461a      	mov	r2, r3
 8003038:	4603      	mov	r3, r0
 800303a:	70fb      	strb	r3, [r7, #3]
 800303c:	460b      	mov	r3, r1
 800303e:	803b      	strh	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800304c:	2b00      	cmp	r3, #0
 800304e:	da0e      	bge.n	800306e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	705a      	strb	r2, [r3, #1]
 800306c:	e00e      	b.n	800308c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	f003 0207 	and.w	r2, r3, #7
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4413      	add	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	b2da      	uxtb	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003098:	883a      	ldrh	r2, [r7, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	78ba      	ldrb	r2, [r7, #2]
 80030a2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	785b      	ldrb	r3, [r3, #1]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d004      	beq.n	80030b6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030b6:	78bb      	ldrb	r3, [r7, #2]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d102      	bne.n	80030c2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_PCD_EP_Open+0xa6>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e00e      	b.n	80030ee <HAL_PCD_EP_Open+0xc4>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68f9      	ldr	r1, [r7, #12]
 80030de:	4618      	mov	r0, r3
 80030e0:	f002 fbf2 	bl	80058c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80030ec:	7afb      	ldrb	r3, [r7, #11]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003106:	2b00      	cmp	r3, #0
 8003108:	da0e      	bge.n	8003128 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	705a      	strb	r2, [r3, #1]
 8003126:	e00e      	b.n	8003146 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	f003 0207 	and.w	r2, r3, #7
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_PCD_EP_Close+0x6a>
 800315c:	2302      	movs	r3, #2
 800315e:	e00e      	b.n	800317e <HAL_PCD_EP_Close+0x88>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68f9      	ldr	r1, [r7, #12]
 800316e:	4618      	mov	r0, r3
 8003170:	f002 ff14 	bl	8005f9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	460b      	mov	r3, r1
 8003194:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003196:	7afb      	ldrb	r3, [r7, #11]
 8003198:	f003 0207 	and.w	r2, r3, #7
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2200      	movs	r2, #0
 80031c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c6:	7afb      	ldrb	r3, [r7, #11]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031d2:	7afb      	ldrb	r3, [r7, #11]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6979      	ldr	r1, [r7, #20]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f003 f8c6 	bl	8006374 <USB_EPStartXfer>
 80031e8:	e005      	b.n	80031f6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6979      	ldr	r1, [r7, #20]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 f8bf 	bl	8006374 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	f003 0207 	and.w	r2, r3, #7
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003222:	681b      	ldr	r3, [r3, #0]
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr

0800322e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b086      	sub	sp, #24
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	460b      	mov	r3, r1
 800323c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800323e:	7afb      	ldrb	r3, [r7, #11]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4413      	add	r3, r2
 8003252:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2200      	movs	r2, #0
 8003272:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2201      	movs	r2, #1
 8003278:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800327a:	7afb      	ldrb	r3, [r7, #11]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	b2da      	uxtb	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003286:	7afb      	ldrb	r3, [r7, #11]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6979      	ldr	r1, [r7, #20]
 8003296:	4618      	mov	r0, r3
 8003298:	f003 f86c 	bl	8006374 <USB_EPStartXfer>
 800329c:	e005      	b.n	80032aa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6979      	ldr	r1, [r7, #20]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f003 f865 	bl	8006374 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	f003 0207 	and.w	r2, r3, #7
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d901      	bls.n	80032d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e04c      	b.n	800336c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	da0e      	bge.n	80032f8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	4413      	add	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	705a      	strb	r2, [r3, #1]
 80032f6:	e00c      	b.n	8003312 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_PCD_EP_SetStall+0x7e>
 800332e:	2302      	movs	r3, #2
 8003330:	e01c      	b.n	800336c <HAL_PCD_EP_SetStall+0xb8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	4618      	mov	r0, r3
 8003342:	f004 f937 	bl	80075b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	2b00      	cmp	r3, #0
 800334e:	d108      	bne.n	8003362 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f004 fa5c 	bl	800781a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	f003 020f 	and.w	r2, r3, #15
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	429a      	cmp	r2, r3
 800338c:	d901      	bls.n	8003392 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e040      	b.n	8003414 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003396:	2b00      	cmp	r3, #0
 8003398:	da0e      	bge.n	80033b8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	705a      	strb	r2, [r3, #1]
 80033b6:	e00e      	b.n	80033d6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	f003 0207 	and.w	r2, r3, #7
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_PCD_EP_ClrStall+0x82>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e00e      	b.n	8003414 <HAL_PCD_EP_ClrStall+0xa0>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68f9      	ldr	r1, [r7, #12]
 8003404:	4618      	mov	r0, r3
 8003406:	f004 f925 	bl	8007654 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08e      	sub	sp, #56	; 0x38
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003424:	e2df      	b.n	80039e6 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800342e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003430:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800343c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003440:	2b00      	cmp	r3, #0
 8003442:	f040 8158 	bne.w	80036f6 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003446:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	d152      	bne.n	80034f6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b29b      	uxth	r3, r3
 8003458:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800345c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003460:	81fb      	strh	r3, [r7, #14]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	89fb      	ldrh	r3, [r7, #14]
 8003468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800346c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003470:	b29b      	uxth	r3, r3
 8003472:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3328      	adds	r3, #40	; 0x28
 8003478:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003482:	b29b      	uxth	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	3302      	adds	r3, #2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	4413      	add	r3, r2
 8003498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	441a      	add	r2, r3
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80034b4:	2100      	movs	r1, #0
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f006 f895 	bl	80095e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 828e 	beq.w	80039e6 <PCD_EP_ISR_Handler+0x5ca>
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 8289 	bne.w	80039e6 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	b292      	uxth	r2, r2
 80034e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034f4:	e277      	b.n	80039e6 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003506:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350c:	2b00      	cmp	r3, #0
 800350e:	d034      	beq.n	800357a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003518:	b29b      	uxth	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	3306      	adds	r3, #6
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	4413      	add	r3, r2
 800352e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800354e:	b29b      	uxth	r3, r3
 8003550:	f004 f9b3 	bl	80078ba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	b29a      	uxth	r2, r3
 800355c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003560:	4013      	ands	r3, r2
 8003562:	823b      	strh	r3, [r7, #16]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	8a3a      	ldrh	r2, [r7, #16]
 800356a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800356e:	b292      	uxth	r2, r2
 8003570:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f006 f80a 	bl	800958c <HAL_PCD_SetupStageCallback>
 8003578:	e235      	b.n	80039e6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800357a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800357e:	2b00      	cmp	r3, #0
 8003580:	f280 8231 	bge.w	80039e6 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	b29a      	uxth	r2, r3
 800358c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003590:	4013      	ands	r3, r2
 8003592:	83bb      	strh	r3, [r7, #28]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	8bba      	ldrh	r2, [r7, #28]
 800359a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800359e:	b292      	uxth	r2, r2
 80035a0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	3306      	adds	r3, #6
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d019      	beq.n	800360a <PCD_EP_ISR_Handler+0x1ee>
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d015      	beq.n	800360a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	6959      	ldr	r1, [r3, #20]
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f004 f963 	bl	80078ba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	441a      	add	r2, r3
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003602:	2100      	movs	r1, #0
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f005 ffd3 	bl	80095b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003618:	b29b      	uxth	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	4413      	add	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d112      	bne.n	8003658 <PCD_EP_ISR_Handler+0x23c>
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800363c:	b29a      	uxth	r2, r3
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	801a      	strh	r2, [r3, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800364c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003650:	b29a      	uxth	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	801a      	strh	r2, [r3, #0]
 8003656:	e02f      	b.n	80036b8 <PCD_EP_ISR_Handler+0x29c>
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b3e      	cmp	r3, #62	; 0x3e
 800365e:	d813      	bhi.n	8003688 <PCD_EP_ISR_Handler+0x26c>
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	085b      	lsrs	r3, r3, #1
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <PCD_EP_ISR_Handler+0x25e>
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	3301      	adds	r3, #1
 8003678:	633b      	str	r3, [r7, #48]	; 0x30
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	b29b      	uxth	r3, r3
 800367e:	029b      	lsls	r3, r3, #10
 8003680:	b29a      	uxth	r2, r3
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	801a      	strh	r2, [r3, #0]
 8003686:	e017      	b.n	80036b8 <PCD_EP_ISR_Handler+0x29c>
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	633b      	str	r3, [r7, #48]	; 0x30
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <PCD_EP_ISR_Handler+0x286>
 800369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369e:	3b01      	subs	r3, #1
 80036a0:	633b      	str	r3, [r7, #48]	; 0x30
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	029b      	lsls	r3, r3, #10
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c8:	827b      	strh	r3, [r7, #18]
 80036ca:	8a7b      	ldrh	r3, [r7, #18]
 80036cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036d0:	827b      	strh	r3, [r7, #18]
 80036d2:	8a7b      	ldrh	r3, [r7, #18]
 80036d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036d8:	827b      	strh	r3, [r7, #18]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	8a7b      	ldrh	r3, [r7, #18]
 80036e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	8013      	strh	r3, [r2, #0]
 80036f4:	e177      	b.n	80039e6 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003708:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800370c:	2b00      	cmp	r3, #0
 800370e:	f280 80ea 	bge.w	80038e6 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	b29a      	uxth	r2, r3
 8003724:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003728:	4013      	ands	r3, r2
 800372a:	853b      	strh	r3, [r7, #40]	; 0x28
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800373c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003740:	b292      	uxth	r2, r2
 8003742:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003744:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4413      	add	r3, r2
 8003758:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	7b1b      	ldrb	r3, [r3, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d122      	bne.n	80037a8 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800376a:	b29b      	uxth	r3, r3
 800376c:	461a      	mov	r2, r3
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	3306      	adds	r3, #6
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6812      	ldr	r2, [r2, #0]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800378a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800378c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8087 	beq.w	80038a2 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	6959      	ldr	r1, [r3, #20]
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	88da      	ldrh	r2, [r3, #6]
 80037a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037a2:	f004 f88a 	bl	80078ba <USB_ReadPMA>
 80037a6:	e07c      	b.n	80038a2 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	78db      	ldrb	r3, [r3, #3]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d108      	bne.n	80037c2 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037b2:	461a      	mov	r2, r3
 80037b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f923 	bl	8003a02 <HAL_PCD_EP_DB_Receive>
 80037bc:	4603      	mov	r3, r0
 80037be:	86fb      	strh	r3, [r7, #54]	; 0x36
 80037c0:	e06f      	b.n	80038a2 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037dc:	847b      	strh	r3, [r7, #34]	; 0x22
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	441a      	add	r2, r3
 80037ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037fe:	b29b      	uxth	r3, r3
 8003800:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d021      	beq.n	8003860 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003824:	b29b      	uxth	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4413      	add	r3, r2
 8003830:	3302      	adds	r3, #2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003844:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003846:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003848:	2b00      	cmp	r3, #0
 800384a:	d02a      	beq.n	80038a2 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	6959      	ldr	r1, [r3, #20]
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	891a      	ldrh	r2, [r3, #8]
 8003858:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800385a:	f004 f82e 	bl	80078ba <USB_ReadPMA>
 800385e:	e020      	b.n	80038a2 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003868:	b29b      	uxth	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	3306      	adds	r3, #6
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003888:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800388a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6818      	ldr	r0, [r3, #0]
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	6959      	ldr	r1, [r3, #20]
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	895a      	ldrh	r2, [r3, #10]
 800389c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800389e:	f004 f80c 	bl	80078ba <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038a8:	441a      	add	r2, r3
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038b4:	441a      	add	r2, r3
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <PCD_EP_ISR_Handler+0x4b0>
 80038c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d206      	bcs.n	80038da <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	4619      	mov	r1, r3
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f005 fe6c 	bl	80095b0 <HAL_PCD_DataOutStageCallback>
 80038d8:	e005      	b.n	80038e6 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038e0:	4618      	mov	r0, r3
 80038e2:	f002 fd47 	bl	8006374 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80038e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d07a      	beq.n	80039e6 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80038f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	b29b      	uxth	r3, r3
 8003916:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800391a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391e:	843b      	strh	r3, [r7, #32]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	441a      	add	r2, r3
 800392e:	8c3b      	ldrh	r3, [r7, #32]
 8003930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003938:	b29b      	uxth	r3, r3
 800393a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	78db      	ldrb	r3, [r3, #3]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d108      	bne.n	8003956 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003948:	2b02      	cmp	r3, #2
 800394a:	d146      	bne.n	80039da <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800394c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d141      	bne.n	80039da <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800395e:	b29b      	uxth	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4413      	add	r3, r2
 800396a:	3302      	adds	r3, #2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6812      	ldr	r2, [r2, #0]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800397e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	8bfb      	ldrh	r3, [r7, #30]
 8003986:	429a      	cmp	r2, r3
 8003988:	d906      	bls.n	8003998 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	8bfb      	ldrh	r3, [r7, #30]
 8003990:	1ad2      	subs	r2, r2, r3
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	619a      	str	r2, [r3, #24]
 8003996:	e002      	b.n	800399e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	2200      	movs	r2, #0
 800399c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	4619      	mov	r1, r3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f005 fe1a 	bl	80095e6 <HAL_PCD_DataInStageCallback>
 80039b2:	e018      	b.n	80039e6 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	8bfb      	ldrh	r3, [r7, #30]
 80039ba:	441a      	add	r2, r3
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	8bfb      	ldrh	r3, [r7, #30]
 80039c6:	441a      	add	r2, r3
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039d2:	4618      	mov	r0, r3
 80039d4:	f002 fcce 	bl	8006374 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80039d8:	e005      	b.n	80039e6 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80039da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039dc:	461a      	mov	r2, r3
 80039de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f91b 	bl	8003c1c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	b21b      	sxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f6ff ad17 	blt.w	8003426 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3738      	adds	r7, #56	; 0x38
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b088      	sub	sp, #32
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d07e      	beq.n	8003b18 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3302      	adds	r3, #2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a42:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	8b7b      	ldrh	r3, [r7, #26]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d306      	bcc.n	8003a5c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	8b7b      	ldrh	r3, [r7, #26]
 8003a54:	1ad2      	subs	r2, r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	619a      	str	r2, [r3, #24]
 8003a5a:	e002      	b.n	8003a62 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d123      	bne.n	8003ab2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a84:	833b      	strh	r3, [r7, #24]
 8003a86:	8b3b      	ldrh	r3, [r7, #24]
 8003a88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a8c:	833b      	strh	r3, [r7, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	441a      	add	r2, r3
 8003a9c:	8b3b      	ldrh	r3, [r7, #24]
 8003a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01f      	beq.n	8003afc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad6:	82fb      	strh	r3, [r7, #22]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	441a      	add	r2, r3
 8003ae6:	8afb      	ldrh	r3, [r7, #22]
 8003ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003afc:	8b7b      	ldrh	r3, [r7, #26]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 8087 	beq.w	8003c12 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6959      	ldr	r1, [r3, #20]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	891a      	ldrh	r2, [r3, #8]
 8003b10:	8b7b      	ldrh	r3, [r7, #26]
 8003b12:	f003 fed2 	bl	80078ba <USB_ReadPMA>
 8003b16:	e07c      	b.n	8003c12 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3306      	adds	r3, #6
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b40:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	8b7b      	ldrh	r3, [r7, #26]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d306      	bcc.n	8003b5a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	699a      	ldr	r2, [r3, #24]
 8003b50:	8b7b      	ldrh	r3, [r7, #26]
 8003b52:	1ad2      	subs	r2, r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	619a      	str	r2, [r3, #24]
 8003b58:	e002      	b.n	8003b60 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d123      	bne.n	8003bb0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b82:	83fb      	strh	r3, [r7, #30]
 8003b84:	8bfb      	ldrh	r3, [r7, #30]
 8003b86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b8a:	83fb      	strh	r3, [r7, #30]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	441a      	add	r2, r3
 8003b9a:	8bfb      	ldrh	r3, [r7, #30]
 8003b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d11f      	bne.n	8003bfa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd4:	83bb      	strh	r3, [r7, #28]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	441a      	add	r2, r3
 8003be4:	8bbb      	ldrh	r3, [r7, #28]
 8003be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bfa:	8b7b      	ldrh	r3, [r7, #26]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	6959      	ldr	r1, [r3, #20]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	895a      	ldrh	r2, [r3, #10]
 8003c0c:	8b7b      	ldrh	r3, [r7, #26]
 8003c0e:	f003 fe54 	bl	80078ba <USB_ReadPMA>
    }
  }

  return count;
 8003c12:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b094      	sub	sp, #80	; 0x50
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8138 	beq.w	8003ea6 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	3302      	adds	r3, #2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d907      	bls.n	8003c7e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	699a      	ldr	r2, [r3, #24]
 8003c72:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003c76:	1ad2      	subs	r2, r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	619a      	str	r2, [r3, #24]
 8003c7c:	e002      	b.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2200      	movs	r2, #0
 8003c82:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d12c      	bne.n	8003ce6 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	4619      	mov	r1, r3
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f005 fca7 	bl	80095e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 823a 	beq.w	8004118 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	82fb      	strh	r3, [r7, #22]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	441a      	add	r2, r3
 8003cce:	8afb      	ldrh	r3, [r7, #22]
 8003cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	8013      	strh	r3, [r2, #0]
 8003ce4:	e218      	b.n	8004118 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01f      	beq.n	8003d30 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0a:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	441a      	add	r2, r3
 8003d1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	f040 81ee 	bne.w	8004118 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003d44:	441a      	add	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003d52:	441a      	add	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	6a1a      	ldr	r2, [r3, #32]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d309      	bcc.n	8003d78 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6a1a      	ldr	r2, [r3, #32]
 8003d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d70:	1ad2      	subs	r2, r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	621a      	str	r2, [r3, #32]
 8003d76:	e015      	b.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d107      	bne.n	8003d90 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8003d80:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003d84:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d8e:	e009      	b.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2200      	movs	r2, #0
 8003da2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	785b      	ldrb	r3, [r3, #1]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d155      	bne.n	8003e58 <HAL_PCD_EP_DB_Transmit+0x23c>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	011a      	lsls	r2, r3, #4
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d112      	bne.n	8003e00 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	801a      	strh	r2, [r3, #0]
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	801a      	strh	r2, [r3, #0]
 8003dfe:	e047      	b.n	8003e90 <HAL_PCD_EP_DB_Transmit+0x274>
 8003e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e02:	2b3e      	cmp	r3, #62	; 0x3e
 8003e04:	d811      	bhi.n	8003e2a <HAL_PCD_EP_DB_Transmit+0x20e>
 8003e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_PCD_EP_DB_Transmit+0x200>
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	3301      	adds	r3, #1
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	029b      	lsls	r3, r3, #10
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	801a      	strh	r2, [r3, #0]
 8003e28:	e032      	b.n	8003e90 <HAL_PCD_EP_DB_Transmit+0x274>
 8003e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x224>
 8003e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	029b      	lsls	r3, r3, #10
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	801a      	strh	r2, [r3, #0]
 8003e56:	e01b      	b.n	8003e90 <HAL_PCD_EP_DB_Transmit+0x274>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	785b      	ldrb	r3, [r3, #1]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d117      	bne.n	8003e90 <HAL_PCD_EP_DB_Transmit+0x274>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	4413      	add	r3, r2
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	011a      	lsls	r2, r3, #4
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	4413      	add	r3, r2
 8003e82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e86:	623b      	str	r3, [r7, #32]
 8003e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	6959      	ldr	r1, [r3, #20]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	891a      	ldrh	r2, [r3, #8]
 8003e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f003 fcc6 	bl	8007830 <USB_WritePMA>
 8003ea4:	e138      	b.n	8004118 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	3306      	adds	r3, #6
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ece:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d307      	bcc.n	8003eee <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ee6:	1ad2      	subs	r2, r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	619a      	str	r2, [r3, #24]
 8003eec:	e002      	b.n	8003ef4 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d12e      	bne.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	4619      	mov	r1, r3
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f005 fb6f 	bl	80095e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f040 8102 	bne.w	8004118 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	441a      	add	r2, r3
 8003f40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	8013      	strh	r3, [r2, #0]
 8003f58:	e0de      	b.n	8004118 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d11f      	bne.n	8003fa4 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7e:	867b      	strh	r3, [r7, #50]	; 0x32
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	441a      	add	r2, r3
 8003f8e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	f040 80b4 	bne.w	8004118 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003fb8:	441a      	add	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003fc6:	441a      	add	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	6a1a      	ldr	r2, [r3, #32]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d309      	bcc.n	8003fec <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	6a1a      	ldr	r2, [r3, #32]
 8003fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe4:	1ad2      	subs	r2, r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	621a      	str	r2, [r3, #32]
 8003fea:	e015      	b.n	8004018 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d107      	bne.n	8004004 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8003ff4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ff8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004002:	e009      	b.n	8004018 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2200      	movs	r2, #0
 800400e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	643b      	str	r3, [r7, #64]	; 0x40
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	785b      	ldrb	r3, [r3, #1]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d155      	bne.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	63bb      	str	r3, [r7, #56]	; 0x38
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004034:	b29b      	uxth	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	4413      	add	r3, r2
 800403c:	63bb      	str	r3, [r7, #56]	; 0x38
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	011a      	lsls	r2, r3, #4
 8004044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004046:	4413      	add	r3, r2
 8004048:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800404c:	637b      	str	r3, [r7, #52]	; 0x34
 800404e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004050:	2b00      	cmp	r3, #0
 8004052:	d112      	bne.n	800407a <HAL_PCD_EP_DB_Transmit+0x45e>
 8004054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800405e:	b29a      	uxth	r2, r3
 8004060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004062:	801a      	strh	r2, [r3, #0]
 8004064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800406e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004072:	b29a      	uxth	r2, r3
 8004074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004076:	801a      	strh	r2, [r3, #0]
 8004078:	e044      	b.n	8004104 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800407a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800407c:	2b3e      	cmp	r3, #62	; 0x3e
 800407e:	d811      	bhi.n	80040a4 <HAL_PCD_EP_DB_Transmit+0x488>
 8004080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004092:	3301      	adds	r3, #1
 8004094:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004098:	b29b      	uxth	r3, r3
 800409a:	029b      	lsls	r3, r3, #10
 800409c:	b29a      	uxth	r2, r3
 800409e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a0:	801a      	strh	r2, [r3, #0]
 80040a2:	e02f      	b.n	8004104 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80040a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d102      	bne.n	80040ba <HAL_PCD_EP_DB_Transmit+0x49e>
 80040b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b6:	3b01      	subs	r3, #1
 80040b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040bc:	b29b      	uxth	r3, r3
 80040be:	029b      	lsls	r3, r3, #10
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ce:	801a      	strh	r2, [r3, #0]
 80040d0:	e018      	b.n	8004104 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	785b      	ldrb	r3, [r3, #1]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d114      	bne.n	8004104 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e8:	4413      	add	r3, r2
 80040ea:	643b      	str	r3, [r7, #64]	; 0x40
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	011a      	lsls	r2, r3, #4
 80040f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f4:	4413      	add	r3, r2
 80040f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040fe:	b29a      	uxth	r2, r3
 8004100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004102:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	6959      	ldr	r1, [r3, #20]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	895a      	ldrh	r2, [r3, #10]
 8004110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004112:	b29b      	uxth	r3, r3
 8004114:	f003 fb8c 	bl	8007830 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004132:	82bb      	strh	r3, [r7, #20]
 8004134:	8abb      	ldrh	r3, [r7, #20]
 8004136:	f083 0310 	eor.w	r3, r3, #16
 800413a:	82bb      	strh	r3, [r7, #20]
 800413c:	8abb      	ldrh	r3, [r7, #20]
 800413e:	f083 0320 	eor.w	r3, r3, #32
 8004142:	82bb      	strh	r3, [r7, #20]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	441a      	add	r2, r3
 8004152:	8abb      	ldrh	r3, [r7, #20]
 8004154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800415c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004164:	b29b      	uxth	r3, r3
 8004166:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3750      	adds	r7, #80	; 0x50
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004172:	b480      	push	{r7}
 8004174:	b087      	sub	sp, #28
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	817b      	strh	r3, [r7, #10]
 8004180:	4613      	mov	r3, r2
 8004182:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004184:	897b      	ldrh	r3, [r7, #10]
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00b      	beq.n	80041a8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004190:	897b      	ldrh	r3, [r7, #10]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e009      	b.n	80041bc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041a8:	897a      	ldrh	r2, [r7, #10]
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80041bc:	893b      	ldrh	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d107      	bne.n	80041d2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2200      	movs	r2, #0
 80041c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	80da      	strh	r2, [r3, #6]
 80041d0:	e00b      	b.n	80041ea <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2201      	movs	r2, #1
 80041d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	b29a      	uxth	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
	...

080041f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e26c      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8087 	beq.w	8004326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004218:	4b92      	ldr	r3, [pc, #584]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 030c 	and.w	r3, r3, #12
 8004220:	2b04      	cmp	r3, #4
 8004222:	d00c      	beq.n	800423e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004224:	4b8f      	ldr	r3, [pc, #572]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 030c 	and.w	r3, r3, #12
 800422c:	2b08      	cmp	r3, #8
 800422e:	d112      	bne.n	8004256 <HAL_RCC_OscConfig+0x5e>
 8004230:	4b8c      	ldr	r3, [pc, #560]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423c:	d10b      	bne.n	8004256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800423e:	4b89      	ldr	r3, [pc, #548]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d06c      	beq.n	8004324 <HAL_RCC_OscConfig+0x12c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d168      	bne.n	8004324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e246      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425e:	d106      	bne.n	800426e <HAL_RCC_OscConfig+0x76>
 8004260:	4b80      	ldr	r3, [pc, #512]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a7f      	ldr	r2, [pc, #508]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 8004266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	e02e      	b.n	80042cc <HAL_RCC_OscConfig+0xd4>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10c      	bne.n	8004290 <HAL_RCC_OscConfig+0x98>
 8004276:	4b7b      	ldr	r3, [pc, #492]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a7a      	ldr	r2, [pc, #488]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 800427c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	4b78      	ldr	r3, [pc, #480]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a77      	ldr	r2, [pc, #476]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 8004288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e01d      	b.n	80042cc <HAL_RCC_OscConfig+0xd4>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004298:	d10c      	bne.n	80042b4 <HAL_RCC_OscConfig+0xbc>
 800429a:	4b72      	ldr	r3, [pc, #456]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a71      	ldr	r2, [pc, #452]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	4b6f      	ldr	r3, [pc, #444]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a6e      	ldr	r2, [pc, #440]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e00b      	b.n	80042cc <HAL_RCC_OscConfig+0xd4>
 80042b4:	4b6b      	ldr	r3, [pc, #428]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a6a      	ldr	r2, [pc, #424]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	4b68      	ldr	r3, [pc, #416]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a67      	ldr	r2, [pc, #412]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 80042c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d013      	beq.n	80042fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d4:	f7fd fbe2 	bl	8001a9c <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042dc:	f7fd fbde 	bl	8001a9c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b64      	cmp	r3, #100	; 0x64
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e1fa      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ee:	4b5d      	ldr	r3, [pc, #372]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0xe4>
 80042fa:	e014      	b.n	8004326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fd fbce 	bl	8001a9c <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004304:	f7fd fbca 	bl	8001a9c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	; 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e1e6      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004316:	4b53      	ldr	r3, [pc, #332]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x10c>
 8004322:	e000      	b.n	8004326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d063      	beq.n	80043fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004332:	4b4c      	ldr	r3, [pc, #304]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00b      	beq.n	8004356 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800433e:	4b49      	ldr	r3, [pc, #292]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b08      	cmp	r3, #8
 8004348:	d11c      	bne.n	8004384 <HAL_RCC_OscConfig+0x18c>
 800434a:	4b46      	ldr	r3, [pc, #280]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d116      	bne.n	8004384 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004356:	4b43      	ldr	r3, [pc, #268]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_RCC_OscConfig+0x176>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d001      	beq.n	800436e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e1ba      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436e:	4b3d      	ldr	r3, [pc, #244]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4939      	ldr	r1, [pc, #228]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004382:	e03a      	b.n	80043fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d020      	beq.n	80043ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800438c:	4b36      	ldr	r3, [pc, #216]	; (8004468 <HAL_RCC_OscConfig+0x270>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004392:	f7fd fb83 	bl	8001a9c <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439a:	f7fd fb7f 	bl	8001a9c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e19b      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ac:	4b2d      	ldr	r3, [pc, #180]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0f0      	beq.n	800439a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b8:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4927      	ldr	r1, [pc, #156]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	600b      	str	r3, [r1, #0]
 80043cc:	e015      	b.n	80043fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ce:	4b26      	ldr	r3, [pc, #152]	; (8004468 <HAL_RCC_OscConfig+0x270>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7fd fb62 	bl	8001a9c <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043dc:	f7fd fb5e 	bl	8001a9c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e17a      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d03a      	beq.n	800447c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d019      	beq.n	8004442 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800440e:	4b17      	ldr	r3, [pc, #92]	; (800446c <HAL_RCC_OscConfig+0x274>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004414:	f7fd fb42 	bl	8001a9c <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800441c:	f7fd fb3e 	bl	8001a9c <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e15a      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442e:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <HAL_RCC_OscConfig+0x26c>)
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800443a:	2001      	movs	r0, #1
 800443c:	f000 faa6 	bl	800498c <RCC_Delay>
 8004440:	e01c      	b.n	800447c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <HAL_RCC_OscConfig+0x274>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004448:	f7fd fb28 	bl	8001a9c <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800444e:	e00f      	b.n	8004470 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004450:	f7fd fb24 	bl	8001a9c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d908      	bls.n	8004470 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e140      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	42420000 	.word	0x42420000
 800446c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004470:	4b9e      	ldr	r3, [pc, #632]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e9      	bne.n	8004450 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80a6 	beq.w	80045d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800448a:	2300      	movs	r3, #0
 800448c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448e:	4b97      	ldr	r3, [pc, #604]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10d      	bne.n	80044b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800449a:	4b94      	ldr	r3, [pc, #592]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	4a93      	ldr	r2, [pc, #588]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 80044a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a4:	61d3      	str	r3, [r2, #28]
 80044a6:	4b91      	ldr	r3, [pc, #580]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b2:	2301      	movs	r3, #1
 80044b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b6:	4b8e      	ldr	r3, [pc, #568]	; (80046f0 <HAL_RCC_OscConfig+0x4f8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d118      	bne.n	80044f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044c2:	4b8b      	ldr	r3, [pc, #556]	; (80046f0 <HAL_RCC_OscConfig+0x4f8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a8a      	ldr	r2, [pc, #552]	; (80046f0 <HAL_RCC_OscConfig+0x4f8>)
 80044c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ce:	f7fd fae5 	bl	8001a9c <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d6:	f7fd fae1 	bl	8001a9c <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b64      	cmp	r3, #100	; 0x64
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e0fd      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e8:	4b81      	ldr	r3, [pc, #516]	; (80046f0 <HAL_RCC_OscConfig+0x4f8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d106      	bne.n	800450a <HAL_RCC_OscConfig+0x312>
 80044fc:	4b7b      	ldr	r3, [pc, #492]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	4a7a      	ldr	r2, [pc, #488]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	6213      	str	r3, [r2, #32]
 8004508:	e02d      	b.n	8004566 <HAL_RCC_OscConfig+0x36e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10c      	bne.n	800452c <HAL_RCC_OscConfig+0x334>
 8004512:	4b76      	ldr	r3, [pc, #472]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	4a75      	ldr	r2, [pc, #468]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	6213      	str	r3, [r2, #32]
 800451e:	4b73      	ldr	r3, [pc, #460]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	4a72      	ldr	r2, [pc, #456]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004524:	f023 0304 	bic.w	r3, r3, #4
 8004528:	6213      	str	r3, [r2, #32]
 800452a:	e01c      	b.n	8004566 <HAL_RCC_OscConfig+0x36e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b05      	cmp	r3, #5
 8004532:	d10c      	bne.n	800454e <HAL_RCC_OscConfig+0x356>
 8004534:	4b6d      	ldr	r3, [pc, #436]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4a6c      	ldr	r2, [pc, #432]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 800453a:	f043 0304 	orr.w	r3, r3, #4
 800453e:	6213      	str	r3, [r2, #32]
 8004540:	4b6a      	ldr	r3, [pc, #424]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	4a69      	ldr	r2, [pc, #420]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6213      	str	r3, [r2, #32]
 800454c:	e00b      	b.n	8004566 <HAL_RCC_OscConfig+0x36e>
 800454e:	4b67      	ldr	r3, [pc, #412]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	4a66      	ldr	r2, [pc, #408]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	6213      	str	r3, [r2, #32]
 800455a:	4b64      	ldr	r3, [pc, #400]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	4a63      	ldr	r2, [pc, #396]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004560:	f023 0304 	bic.w	r3, r3, #4
 8004564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d015      	beq.n	800459a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456e:	f7fd fa95 	bl	8001a9c <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004574:	e00a      	b.n	800458c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004576:	f7fd fa91 	bl	8001a9c <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f241 3288 	movw	r2, #5000	; 0x1388
 8004584:	4293      	cmp	r3, r2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e0ab      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458c:	4b57      	ldr	r3, [pc, #348]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0ee      	beq.n	8004576 <HAL_RCC_OscConfig+0x37e>
 8004598:	e014      	b.n	80045c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459a:	f7fd fa7f 	bl	8001a9c <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a0:	e00a      	b.n	80045b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a2:	f7fd fa7b 	bl	8001a9c <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e095      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b8:	4b4c      	ldr	r3, [pc, #304]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1ee      	bne.n	80045a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d105      	bne.n	80045d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ca:	4b48      	ldr	r3, [pc, #288]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	4a47      	ldr	r2, [pc, #284]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 80045d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 8081 	beq.w	80046e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045e0:	4b42      	ldr	r3, [pc, #264]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d061      	beq.n	80046b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d146      	bne.n	8004682 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f4:	4b3f      	ldr	r3, [pc, #252]	; (80046f4 <HAL_RCC_OscConfig+0x4fc>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fa:	f7fd fa4f 	bl	8001a9c <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004602:	f7fd fa4b 	bl	8001a9c <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e067      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004614:	4b35      	ldr	r3, [pc, #212]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f0      	bne.n	8004602 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	d108      	bne.n	800463c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800462a:	4b30      	ldr	r3, [pc, #192]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	492d      	ldr	r1, [pc, #180]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004638:	4313      	orrs	r3, r2
 800463a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800463c:	4b2b      	ldr	r3, [pc, #172]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a19      	ldr	r1, [r3, #32]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	430b      	orrs	r3, r1
 800464e:	4927      	ldr	r1, [pc, #156]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004650:	4313      	orrs	r3, r2
 8004652:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004654:	4b27      	ldr	r3, [pc, #156]	; (80046f4 <HAL_RCC_OscConfig+0x4fc>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465a:	f7fd fa1f 	bl	8001a9c <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004662:	f7fd fa1b 	bl	8001a9c <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e037      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCC_OscConfig+0x46a>
 8004680:	e02f      	b.n	80046e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004682:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <HAL_RCC_OscConfig+0x4fc>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004688:	f7fd fa08 	bl	8001a9c <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004690:	f7fd fa04 	bl	8001a9c <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e020      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x498>
 80046ae:	e018      	b.n	80046e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e013      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCC_OscConfig+0x4f4>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d106      	bne.n	80046de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046da:	429a      	cmp	r2, r3
 80046dc:	d001      	beq.n	80046e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40007000 	.word	0x40007000
 80046f4:	42420060 	.word	0x42420060

080046f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0d0      	b.n	80048ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800470c:	4b6a      	ldr	r3, [pc, #424]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d910      	bls.n	800473c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471a:	4b67      	ldr	r3, [pc, #412]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 0207 	bic.w	r2, r3, #7
 8004722:	4965      	ldr	r1, [pc, #404]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	4313      	orrs	r3, r2
 8004728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472a:	4b63      	ldr	r3, [pc, #396]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0b8      	b.n	80048ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d020      	beq.n	800478a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004754:	4b59      	ldr	r3, [pc, #356]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4a58      	ldr	r2, [pc, #352]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 800475a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800475e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800476c:	4b53      	ldr	r3, [pc, #332]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	4a52      	ldr	r2, [pc, #328]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004772:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004776:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004778:	4b50      	ldr	r3, [pc, #320]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	494d      	ldr	r1, [pc, #308]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004786:	4313      	orrs	r3, r2
 8004788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d040      	beq.n	8004818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d107      	bne.n	80047ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	4b47      	ldr	r3, [pc, #284]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d115      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e07f      	b.n	80048ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b6:	4b41      	ldr	r3, [pc, #260]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e073      	b.n	80048ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c6:	4b3d      	ldr	r3, [pc, #244]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e06b      	b.n	80048ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d6:	4b39      	ldr	r3, [pc, #228]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f023 0203 	bic.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4936      	ldr	r1, [pc, #216]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e8:	f7fd f958 	bl	8001a9c <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f0:	f7fd f954 	bl	8001a9c <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e053      	b.n	80048ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	4b2d      	ldr	r3, [pc, #180]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 020c 	and.w	r2, r3, #12
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	429a      	cmp	r2, r3
 8004816:	d1eb      	bne.n	80047f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004818:	4b27      	ldr	r3, [pc, #156]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d210      	bcs.n	8004848 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b24      	ldr	r3, [pc, #144]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 0207 	bic.w	r2, r3, #7
 800482e:	4922      	ldr	r1, [pc, #136]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e032      	b.n	80048ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004854:	4b19      	ldr	r3, [pc, #100]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4916      	ldr	r1, [pc, #88]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004862:	4313      	orrs	r3, r2
 8004864:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004872:	4b12      	ldr	r3, [pc, #72]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	490e      	ldr	r1, [pc, #56]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004886:	f000 f821 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 800488a:	4602      	mov	r2, r0
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	490a      	ldr	r1, [pc, #40]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004898:	5ccb      	ldrb	r3, [r1, r3]
 800489a:	fa22 f303 	lsr.w	r3, r2, r3
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <HAL_RCC_ClockConfig+0x1cc>)
 80048a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048a2:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_RCC_ClockConfig+0x1d0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fd f8b6 	bl	8001a18 <HAL_InitTick>

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40022000 	.word	0x40022000
 80048bc:	40021000 	.word	0x40021000
 80048c0:	0800aa88 	.word	0x0800aa88
 80048c4:	20000044 	.word	0x20000044
 80048c8:	20000048 	.word	0x20000048

080048cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048cc:	b490      	push	{r4, r7}
 80048ce:	b08a      	sub	sp, #40	; 0x28
 80048d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048d2:	4b2a      	ldr	r3, [pc, #168]	; (800497c <HAL_RCC_GetSysClockFreq+0xb0>)
 80048d4:	1d3c      	adds	r4, r7, #4
 80048d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80048dc:	f240 2301 	movw	r3, #513	; 0x201
 80048e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	2300      	movs	r3, #0
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048f6:	4b22      	ldr	r3, [pc, #136]	; (8004980 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b04      	cmp	r3, #4
 8004904:	d002      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0x40>
 8004906:	2b08      	cmp	r3, #8
 8004908:	d003      	beq.n	8004912 <HAL_RCC_GetSysClockFreq+0x46>
 800490a:	e02d      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800490c:	4b1d      	ldr	r3, [pc, #116]	; (8004984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800490e:	623b      	str	r3, [r7, #32]
      break;
 8004910:	e02d      	b.n	800496e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	0c9b      	lsrs	r3, r3, #18
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800491e:	4413      	add	r3, r2
 8004920:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004924:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d013      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004930:	4b13      	ldr	r3, [pc, #76]	; (8004980 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	0c5b      	lsrs	r3, r3, #17
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800493e:	4413      	add	r3, r2
 8004940:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004944:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	4a0e      	ldr	r2, [pc, #56]	; (8004984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800494a:	fb02 f203 	mul.w	r2, r2, r3
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	fbb2 f3f3 	udiv	r3, r2, r3
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
 8004956:	e004      	b.n	8004962 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4a0b      	ldr	r2, [pc, #44]	; (8004988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800495c:	fb02 f303 	mul.w	r3, r2, r3
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	623b      	str	r3, [r7, #32]
      break;
 8004966:	e002      	b.n	800496e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800496a:	623b      	str	r3, [r7, #32]
      break;
 800496c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800496e:	6a3b      	ldr	r3, [r7, #32]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3728      	adds	r7, #40	; 0x28
 8004974:	46bd      	mov	sp, r7
 8004976:	bc90      	pop	{r4, r7}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	0800aa28 	.word	0x0800aa28
 8004980:	40021000 	.word	0x40021000
 8004984:	007a1200 	.word	0x007a1200
 8004988:	003d0900 	.word	0x003d0900

0800498c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004994:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <RCC_Delay+0x34>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <RCC_Delay+0x38>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	0a5b      	lsrs	r3, r3, #9
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049a8:	bf00      	nop
  }
  while (Delay --);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1e5a      	subs	r2, r3, #1
 80049ae:	60fa      	str	r2, [r7, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f9      	bne.n	80049a8 <RCC_Delay+0x1c>
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	20000044 	.word	0x20000044
 80049c4:	10624dd3 	.word	0x10624dd3

080049c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d07d      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80049e4:	2300      	movs	r3, #0
 80049e6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e8:	4b4f      	ldr	r3, [pc, #316]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10d      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f4:	4b4c      	ldr	r3, [pc, #304]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	4a4b      	ldr	r2, [pc, #300]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fe:	61d3      	str	r3, [r2, #28]
 8004a00:	4b49      	ldr	r3, [pc, #292]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a10:	4b46      	ldr	r3, [pc, #280]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d118      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1c:	4b43      	ldr	r3, [pc, #268]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a42      	ldr	r2, [pc, #264]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a28:	f7fd f838 	bl	8001a9c <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2e:	e008      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a30:	f7fd f834 	bl	8001a9c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	; 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e06d      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a42:	4b3a      	ldr	r3, [pc, #232]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a4e:	4b36      	ldr	r3, [pc, #216]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d02e      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d027      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a6c:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a76:	4b2e      	ldr	r3, [pc, #184]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a7c:	4b2c      	ldr	r3, [pc, #176]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a82:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d014      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a92:	f7fd f803 	bl	8001a9c <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a98:	e00a      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9a:	f7fc ffff 	bl	8001a9c <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e036      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0ee      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4917      	ldr	r1, [pc, #92]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ace:	7dfb      	ldrb	r3, [r7, #23]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d105      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ad4:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ade:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	490b      	ldr	r1, [pc, #44]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d008      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4904      	ldr	r1, [pc, #16]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40007000 	.word	0x40007000
 8004b30:	42420440 	.word	0x42420440

08004b34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e076      	b.n	8004c34 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d108      	bne.n	8004b60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b56:	d009      	beq.n	8004b6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	61da      	str	r2, [r3, #28]
 8004b5e:	e005      	b.n	8004b6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fc f99a 	bl	8000ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf0:	ea42 0103 	orr.w	r1, r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	0c1a      	lsrs	r2, r3, #16
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f002 0204 	and.w	r2, r2, #4
 8004c12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_SPI_Transmit+0x22>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e126      	b.n	8004eac <HAL_SPI_Transmit+0x270>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c66:	f7fc ff19 	bl	8001a9c <HAL_GetTick>
 8004c6a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c6c:	88fb      	ldrh	r3, [r7, #6]
 8004c6e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d002      	beq.n	8004c82 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c80:	e10b      	b.n	8004e9a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <HAL_SPI_Transmit+0x52>
 8004c88:	88fb      	ldrh	r3, [r7, #6]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d102      	bne.n	8004c94 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c92:	e102      	b.n	8004e9a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2203      	movs	r2, #3
 8004c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	88fa      	ldrh	r2, [r7, #6]
 8004cac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	88fa      	ldrh	r2, [r7, #6]
 8004cb2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cda:	d10f      	bne.n	8004cfc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cfa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d007      	beq.n	8004d1a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d22:	d14b      	bne.n	8004dbc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_SPI_Transmit+0xf6>
 8004d2c:	8afb      	ldrh	r3, [r7, #22]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d13e      	bne.n	8004db0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	881a      	ldrh	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	1c9a      	adds	r2, r3, #2
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d56:	e02b      	b.n	8004db0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d112      	bne.n	8004d8c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	881a      	ldrh	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	1c9a      	adds	r2, r3, #2
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d8a:	e011      	b.n	8004db0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d8c:	f7fc fe86 	bl	8001a9c <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d803      	bhi.n	8004da4 <HAL_SPI_Transmit+0x168>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	d102      	bne.n	8004daa <HAL_SPI_Transmit+0x16e>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dae:	e074      	b.n	8004e9a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1ce      	bne.n	8004d58 <HAL_SPI_Transmit+0x11c>
 8004dba:	e04c      	b.n	8004e56 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_SPI_Transmit+0x18e>
 8004dc4:	8afb      	ldrh	r3, [r7, #22]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d140      	bne.n	8004e4c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	330c      	adds	r3, #12
 8004dd4:	7812      	ldrb	r2, [r2, #0]
 8004dd6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004df0:	e02c      	b.n	8004e4c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d113      	bne.n	8004e28 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	7812      	ldrb	r2, [r2, #0]
 8004e0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e26:	e011      	b.n	8004e4c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e28:	f7fc fe38 	bl	8001a9c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d803      	bhi.n	8004e40 <HAL_SPI_Transmit+0x204>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3e:	d102      	bne.n	8004e46 <HAL_SPI_Transmit+0x20a>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e4a:	e026      	b.n	8004e9a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1cd      	bne.n	8004df2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f8b2 	bl	8004fc4 <SPI_EndRxTxTransaction>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	77fb      	strb	r3, [r7, #31]
 8004e96:	e000      	b.n	8004e9a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e98:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3720      	adds	r7, #32
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ec4:	f7fc fdea 	bl	8001a9c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	1a9b      	subs	r3, r3, r2
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ed4:	f7fc fde2 	bl	8001a9c <HAL_GetTick>
 8004ed8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eda:	4b39      	ldr	r3, [pc, #228]	; (8004fc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	015b      	lsls	r3, r3, #5
 8004ee0:	0d1b      	lsrs	r3, r3, #20
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	fb02 f303 	mul.w	r3, r2, r3
 8004ee8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eea:	e054      	b.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d050      	beq.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ef4:	f7fc fdd2 	bl	8001a9c <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d902      	bls.n	8004f0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d13d      	bne.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f22:	d111      	bne.n	8004f48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2c:	d004      	beq.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f36:	d107      	bne.n	8004f48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f50:	d10f      	bne.n	8004f72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e017      	b.n	8004fb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d19b      	bne.n	8004eec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3720      	adds	r7, #32
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000044 	.word	0x20000044

08004fc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	2180      	movs	r1, #128	; 0x80
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7ff ff6a 	bl	8004eb4 <SPI_WaitFlagStateUntilTimeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	f043 0220 	orr.w	r2, r3, #32
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e000      	b.n	8004ff8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e041      	b.n	8005096 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fb ff88 	bl	8000f3c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3304      	adds	r3, #4
 800503c:	4619      	mov	r1, r3
 800503e:	4610      	mov	r0, r2
 8005040:	f000 f9f6 	bl	8005430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d122      	bne.n	80050fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d11b      	bne.n	80050fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f06f 0202 	mvn.w	r2, #2
 80050ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f98a 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 80050e6:	e005      	b.n	80050f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f97d 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f98c 	bl	800540c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b04      	cmp	r3, #4
 8005106:	d122      	bne.n	800514e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b04      	cmp	r3, #4
 8005114:	d11b      	bne.n	800514e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f06f 0204 	mvn.w	r2, #4
 800511e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f960 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 800513a:	e005      	b.n	8005148 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f953 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f962 	bl	800540c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b08      	cmp	r3, #8
 800515a:	d122      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b08      	cmp	r3, #8
 8005168:	d11b      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f06f 0208 	mvn.w	r2, #8
 8005172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2204      	movs	r2, #4
 8005178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f936 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 800518e:	e005      	b.n	800519c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f929 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f938 	bl	800540c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d122      	bne.n	80051f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b10      	cmp	r3, #16
 80051bc:	d11b      	bne.n	80051f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0210 	mvn.w	r2, #16
 80051c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2208      	movs	r2, #8
 80051cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f90c 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 80051e2:	e005      	b.n	80051f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f8ff 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f90e 	bl	800540c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b01      	cmp	r3, #1
 8005202:	d10e      	bne.n	8005222 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b01      	cmp	r3, #1
 8005210:	d107      	bne.n	8005222 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f06f 0201 	mvn.w	r2, #1
 800521a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f8da 	bl	80053d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522c:	2b80      	cmp	r3, #128	; 0x80
 800522e:	d10e      	bne.n	800524e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	2b80      	cmp	r3, #128	; 0x80
 800523c:	d107      	bne.n	800524e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fac8 	bl	80057de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b40      	cmp	r3, #64	; 0x40
 800525a:	d10e      	bne.n	800527a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005266:	2b40      	cmp	r3, #64	; 0x40
 8005268:	d107      	bne.n	800527a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f8d2 	bl	800541e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b20      	cmp	r3, #32
 8005286:	d10e      	bne.n	80052a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b20      	cmp	r3, #32
 8005294:	d107      	bne.n	80052a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f06f 0220 	mvn.w	r2, #32
 800529e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fa93 	bl	80057cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_TIM_IC_ConfigChannel+0x1a>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e082      	b.n	80053ce <HAL_TIM_IC_ConfigChannel+0x120>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d11b      	bne.n	800530e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f000 f905 	bl	80054f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 020c 	bic.w	r2, r2, #12
 80052f8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6999      	ldr	r1, [r3, #24]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	619a      	str	r2, [r3, #24]
 800530c:	e05a      	b.n	80053c4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d11c      	bne.n	800534e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6819      	ldr	r1, [r3, #0]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f000 f940 	bl	80055a8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005336:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6999      	ldr	r1, [r3, #24]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	021a      	lsls	r2, r3, #8
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	619a      	str	r2, [r3, #24]
 800534c:	e03a      	b.n	80053c4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d11b      	bne.n	800538c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	6819      	ldr	r1, [r3, #0]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f000 f95c 	bl	8005620 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69da      	ldr	r2, [r3, #28]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 020c 	bic.w	r2, r2, #12
 8005376:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69d9      	ldr	r1, [r3, #28]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	61da      	str	r2, [r3, #28]
 800538a:	e01b      	b.n	80053c4 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6819      	ldr	r1, [r3, #0]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f000 f97b 	bl	8005696 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69da      	ldr	r2, [r3, #28]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69d9      	ldr	r1, [r3, #28]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	021a      	lsls	r2, r3, #8
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr

08005430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a29      	ldr	r2, [pc, #164]	; (80054e8 <TIM_Base_SetConfig+0xb8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00b      	beq.n	8005460 <TIM_Base_SetConfig+0x30>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544e:	d007      	beq.n	8005460 <TIM_Base_SetConfig+0x30>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a26      	ldr	r2, [pc, #152]	; (80054ec <TIM_Base_SetConfig+0xbc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_Base_SetConfig+0x30>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a25      	ldr	r2, [pc, #148]	; (80054f0 <TIM_Base_SetConfig+0xc0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d108      	bne.n	8005472 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a1c      	ldr	r2, [pc, #112]	; (80054e8 <TIM_Base_SetConfig+0xb8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <TIM_Base_SetConfig+0x62>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005480:	d007      	beq.n	8005492 <TIM_Base_SetConfig+0x62>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a19      	ldr	r2, [pc, #100]	; (80054ec <TIM_Base_SetConfig+0xbc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_Base_SetConfig+0x62>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <TIM_Base_SetConfig+0xc0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a07      	ldr	r2, [pc, #28]	; (80054e8 <TIM_Base_SetConfig+0xb8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d103      	bne.n	80054d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	615a      	str	r2, [r3, #20]
}
 80054de:	bf00      	nop
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr
 80054e8:	40012c00 	.word	0x40012c00
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40000800 	.word	0x40000800

080054f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f023 0201 	bic.w	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4a1f      	ldr	r2, [pc, #124]	; (800559c <TIM_TI1_SetConfig+0xa8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00b      	beq.n	800553a <TIM_TI1_SetConfig+0x46>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005528:	d007      	beq.n	800553a <TIM_TI1_SetConfig+0x46>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4a1c      	ldr	r2, [pc, #112]	; (80055a0 <TIM_TI1_SetConfig+0xac>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d003      	beq.n	800553a <TIM_TI1_SetConfig+0x46>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4a1b      	ldr	r2, [pc, #108]	; (80055a4 <TIM_TI1_SetConfig+0xb0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d101      	bne.n	800553e <TIM_TI1_SetConfig+0x4a>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <TIM_TI1_SetConfig+0x4c>
 800553e:	2300      	movs	r3, #0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d008      	beq.n	8005556 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f023 0303 	bic.w	r3, r3, #3
 800554a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	e003      	b.n	800555e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	b2db      	uxtb	r3, r3
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f023 030a 	bic.w	r3, r3, #10
 8005578:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f003 030a 	and.w	r3, r3, #10
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	621a      	str	r2, [r3, #32]
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40000400 	.word	0x40000400
 80055a4:	40000800 	.word	0x40000800

080055a8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f023 0210 	bic.w	r2, r3, #16
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	031b      	lsls	r3, r3, #12
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	621a      	str	r2, [r3, #32]
}
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr

08005620 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f023 0303 	bic.w	r3, r3, #3
 800564c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800565c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	b2db      	uxtb	r3, r3
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005670:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	621a      	str	r2, [r3, #32]
}
 800568c:	bf00      	nop
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr

08005696 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005696:	b480      	push	{r7}
 8005698:	b087      	sub	sp, #28
 800569a:	af00      	add	r7, sp, #0
 800569c:	60f8      	str	r0, [r7, #12]
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	031b      	lsls	r3, r3, #12
 80056da:	b29b      	uxth	r3, r3
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	031b      	lsls	r3, r3, #12
 80056ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	621a      	str	r2, [r3, #32]
}
 8005704:	bf00      	nop
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr
	...

08005710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005724:	2302      	movs	r3, #2
 8005726:	e046      	b.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a16      	ldr	r2, [pc, #88]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005774:	d009      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a12      	ldr	r2, [pc, #72]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a10      	ldr	r2, [pc, #64]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d10c      	bne.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005790:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	4313      	orrs	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr
 80057c0:	40012c00 	.word	0x40012c00
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800

080057cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr

080057de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057f0:	b084      	sub	sp, #16
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	f107 0014 	add.w	r0, r7, #20
 80057fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	b004      	add	sp, #16
 800580e:	4770      	bx	lr

08005810 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005820:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005824:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	b29a      	uxth	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	bc80      	pop	{r7}
 800583a:	4770      	bx	lr

0800583c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005844:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005848:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	b29b      	uxth	r3, r3
 8005856:	43db      	mvns	r3, r3
 8005858:	b29b      	uxth	r3, r3
 800585a:	4013      	ands	r3, r2
 800585c:	b29a      	uxth	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr

08005870 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr

08005888 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005888:	b084      	sub	sp, #16
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	f107 0014 	add.w	r0, r7, #20
 8005896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	b004      	add	sp, #16
 80058c6:	4770      	bx	lr

080058c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b09b      	sub	sp, #108	; 0x6c
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	78db      	ldrb	r3, [r3, #3]
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d81f      	bhi.n	800593a <USB_ActivateEndpoint+0x72>
 80058fa:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <USB_ActivateEndpoint+0x38>)
 80058fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005900:	08005911 	.word	0x08005911
 8005904:	0800592d 	.word	0x0800592d
 8005908:	08005943 	.word	0x08005943
 800590c:	0800591f 	.word	0x0800591f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005910:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005914:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005918:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800591c:	e012      	b.n	8005944 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800591e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005922:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005926:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800592a:	e00b      	b.n	8005944 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800592c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005930:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005934:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005938:	e004      	b.n	8005944 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005940:	e000      	b.n	8005944 <USB_ActivateEndpoint+0x7c>
      break;
 8005942:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	441a      	add	r2, r3
 800594e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800595a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005962:	b29b      	uxth	r3, r3
 8005964:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	b29b      	uxth	r3, r3
 8005974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597c:	b29a      	uxth	r2, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	4313      	orrs	r3, r2
 8005986:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	441a      	add	r2, r3
 8005994:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	7b1b      	ldrb	r3, [r3, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f040 8149 	bne.w	8005c48 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 8084 	beq.w	8005ac8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	4413      	add	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	011a      	lsls	r2, r3, #4
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e2:	613b      	str	r3, [r7, #16]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	88db      	ldrh	r3, [r3, #6]
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	81fb      	strh	r3, [r7, #14]
 8005a02:	89fb      	ldrh	r3, [r7, #14]
 8005a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01b      	beq.n	8005a44 <USB_ActivateEndpoint+0x17c>
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a22:	81bb      	strh	r3, [r7, #12]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	441a      	add	r2, r3
 8005a2e:	89bb      	ldrh	r3, [r7, #12]
 8005a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	78db      	ldrb	r3, [r3, #3]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d020      	beq.n	8005a8e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a62:	813b      	strh	r3, [r7, #8]
 8005a64:	893b      	ldrh	r3, [r7, #8]
 8005a66:	f083 0320 	eor.w	r3, r3, #32
 8005a6a:	813b      	strh	r3, [r7, #8]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	441a      	add	r2, r3
 8005a76:	893b      	ldrh	r3, [r7, #8]
 8005a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	8013      	strh	r3, [r2, #0]
 8005a8c:	e27f      	b.n	8005f8e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa4:	817b      	strh	r3, [r7, #10]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	441a      	add	r2, r3
 8005ab0:	897b      	ldrh	r3, [r7, #10]
 8005ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	8013      	strh	r3, [r2, #0]
 8005ac6:	e262      	b.n	8005f8e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	4413      	add	r3, r2
 8005ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	011a      	lsls	r2, r3, #4
 8005ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	88db      	ldrh	r3, [r3, #6]
 8005af0:	085b      	lsrs	r3, r3, #1
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	4413      	add	r3, r2
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	011a      	lsls	r2, r3, #4
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	4413      	add	r3, r2
 8005b1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b1e:	623b      	str	r3, [r7, #32]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d112      	bne.n	8005b4e <USB_ActivateEndpoint+0x286>
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	801a      	strh	r2, [r3, #0]
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	801a      	strh	r2, [r3, #0]
 8005b4c:	e02f      	b.n	8005bae <USB_ActivateEndpoint+0x2e6>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b3e      	cmp	r3, #62	; 0x3e
 8005b54:	d813      	bhi.n	8005b7e <USB_ActivateEndpoint+0x2b6>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	085b      	lsrs	r3, r3, #1
 8005b5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <USB_ActivateEndpoint+0x2a8>
 8005b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	663b      	str	r3, [r7, #96]	; 0x60
 8005b70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	029b      	lsls	r3, r3, #10
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	801a      	strh	r2, [r3, #0]
 8005b7c:	e017      	b.n	8005bae <USB_ActivateEndpoint+0x2e6>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	663b      	str	r3, [r7, #96]	; 0x60
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 031f 	and.w	r3, r3, #31
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d102      	bne.n	8005b98 <USB_ActivateEndpoint+0x2d0>
 8005b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b94:	3b01      	subs	r3, #1
 8005b96:	663b      	str	r3, [r7, #96]	; 0x60
 8005b98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	029b      	lsls	r3, r3, #10
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	83fb      	strh	r3, [r7, #30]
 8005bbc:	8bfb      	ldrh	r3, [r7, #30]
 8005bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d01b      	beq.n	8005bfe <USB_ActivateEndpoint+0x336>
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bdc:	83bb      	strh	r3, [r7, #28]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	441a      	add	r2, r3
 8005be8:	8bbb      	ldrh	r3, [r7, #28]
 8005bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c14:	837b      	strh	r3, [r7, #26]
 8005c16:	8b7b      	ldrh	r3, [r7, #26]
 8005c18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c1c:	837b      	strh	r3, [r7, #26]
 8005c1e:	8b7b      	ldrh	r3, [r7, #26]
 8005c20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c24:	837b      	strh	r3, [r7, #26]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	441a      	add	r2, r3
 8005c30:	8b7b      	ldrh	r3, [r7, #26]
 8005c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	8013      	strh	r3, [r2, #0]
 8005c46:	e1a2      	b.n	8005f8e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	441a      	add	r2, r3
 8005c6c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c78:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c94:	4413      	add	r3, r2
 8005c96:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	011a      	lsls	r2, r3, #4
 8005c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ca6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	891b      	ldrh	r3, [r3, #8]
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb6:	801a      	strh	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	653b      	str	r3, [r7, #80]	; 0x50
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc8:	4413      	add	r3, r2
 8005cca:	653b      	str	r3, [r7, #80]	; 0x50
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	011a      	lsls	r2, r3, #4
 8005cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	895b      	ldrh	r3, [r3, #10]
 8005ce0:	085b      	lsrs	r3, r3, #1
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f040 8091 	bne.w	8005e18 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005d04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d01b      	beq.n	8005d46 <USB_ActivateEndpoint+0x47e>
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d24:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	441a      	add	r2, r3
 8005d30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d01b      	beq.n	8005d96 <USB_ActivateEndpoint+0x4ce>
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d74:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	441a      	add	r2, r3
 8005d80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dac:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005dae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005db0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005db4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005db6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005db8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dbc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	441a      	add	r2, r3
 8005dc8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df4:	867b      	strh	r3, [r7, #50]	; 0x32
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	441a      	add	r2, r3
 8005e00:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	8013      	strh	r3, [r2, #0]
 8005e16:	e0ba      	b.n	8005f8e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005e28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01d      	beq.n	8005e70 <USB_ActivateEndpoint+0x5a8>
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	441a      	add	r2, r3
 8005e58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01d      	beq.n	8005ec8 <USB_ActivateEndpoint+0x600>
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	441a      	add	r2, r3
 8005eb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	78db      	ldrb	r3, [r3, #3]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d024      	beq.n	8005f1a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005eea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005eee:	f083 0320 	eor.w	r3, r3, #32
 8005ef2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	441a      	add	r2, r3
 8005f00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	8013      	strh	r3, [r2, #0]
 8005f18:	e01d      	b.n	8005f56 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	441a      	add	r2, r3
 8005f3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	441a      	add	r2, r3
 8005f78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005f8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	376c      	adds	r7, #108	; 0x6c
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr

08005f9c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b08d      	sub	sp, #52	; 0x34
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	7b1b      	ldrb	r3, [r3, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 808e 	bne.w	80060cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d044      	beq.n	8006042 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	81bb      	strh	r3, [r7, #12]
 8005fc6:	89bb      	ldrh	r3, [r7, #12]
 8005fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01b      	beq.n	8006008 <USB_DeactivateEndpoint+0x6c>
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	817b      	strh	r3, [r7, #10]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	441a      	add	r2, r3
 8005ff2:	897b      	ldrh	r3, [r7, #10]
 8005ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006000:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006004:	b29b      	uxth	r3, r3
 8006006:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601e:	813b      	strh	r3, [r7, #8]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	441a      	add	r2, r3
 800602a:	893b      	ldrh	r3, [r7, #8]
 800602c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603c:	b29b      	uxth	r3, r3
 800603e:	8013      	strh	r3, [r2, #0]
 8006040:	e192      	b.n	8006368 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	827b      	strh	r3, [r7, #18]
 8006050:	8a7b      	ldrh	r3, [r7, #18]
 8006052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01b      	beq.n	8006092 <USB_DeactivateEndpoint+0xf6>
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006070:	823b      	strh	r3, [r7, #16]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	441a      	add	r2, r3
 800607c:	8a3b      	ldrh	r3, [r7, #16]
 800607e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006086:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800608a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a8:	81fb      	strh	r3, [r7, #14]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	441a      	add	r2, r3
 80060b4:	89fb      	ldrh	r3, [r7, #14]
 80060b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	8013      	strh	r3, [r2, #0]
 80060ca:	e14d      	b.n	8006368 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f040 80a5 	bne.w	8006220 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	843b      	strh	r3, [r7, #32]
 80060e4:	8c3b      	ldrh	r3, [r7, #32]
 80060e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01b      	beq.n	8006126 <USB_DeactivateEndpoint+0x18a>
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006104:	83fb      	strh	r3, [r7, #30]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	8bfb      	ldrh	r3, [r7, #30]
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	83bb      	strh	r3, [r7, #28]
 8006134:	8bbb      	ldrh	r3, [r7, #28]
 8006136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01b      	beq.n	8006176 <USB_DeactivateEndpoint+0x1da>
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29b      	uxth	r3, r3
 800614c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006154:	837b      	strh	r3, [r7, #26]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	441a      	add	r2, r3
 8006160:	8b7b      	ldrh	r3, [r7, #26]
 8006162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800616a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006172:	b29b      	uxth	r3, r3
 8006174:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618c:	833b      	strh	r3, [r7, #24]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	441a      	add	r2, r3
 8006198:	8b3b      	ldrh	r3, [r7, #24]
 800619a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c4:	82fb      	strh	r3, [r7, #22]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	441a      	add	r2, r3
 80061d0:	8afb      	ldrh	r3, [r7, #22]
 80061d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061fc:	82bb      	strh	r3, [r7, #20]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	441a      	add	r2, r3
 8006208:	8abb      	ldrh	r3, [r7, #20]
 800620a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800620e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621a:	b29b      	uxth	r3, r3
 800621c:	8013      	strh	r3, [r2, #0]
 800621e:	e0a3      	b.n	8006368 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800622e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01b      	beq.n	8006270 <USB_DeactivateEndpoint+0x2d4>
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800625c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800627e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01b      	beq.n	80062c0 <USB_DeactivateEndpoint+0x324>
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	853b      	strh	r3, [r7, #40]	; 0x28
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	441a      	add	r2, r3
 80062aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80062ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062bc:	b29b      	uxth	r3, r3
 80062be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	441a      	add	r2, r3
 80062e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	441a      	add	r2, r3
 800631a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800631c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632c:	b29b      	uxth	r3, r3
 800632e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006346:	847b      	strh	r3, [r7, #34]	; 0x22
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	441a      	add	r2, r3
 8006352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800635c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006364:	b29b      	uxth	r3, r3
 8006366:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3734      	adds	r7, #52	; 0x34
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr

08006374 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b0c4      	sub	sp, #272	; 0x110
 8006378:	af00      	add	r7, sp, #0
 800637a:	1d3b      	adds	r3, r7, #4
 800637c:	6018      	str	r0, [r3, #0]
 800637e:	463b      	mov	r3, r7
 8006380:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006382:	463b      	mov	r3, r7
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	785b      	ldrb	r3, [r3, #1]
 8006388:	2b01      	cmp	r3, #1
 800638a:	f040 8557 	bne.w	8006e3c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800638e:	463b      	mov	r3, r7
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	699a      	ldr	r2, [r3, #24]
 8006394:	463b      	mov	r3, r7
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	429a      	cmp	r2, r3
 800639c:	d905      	bls.n	80063aa <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800639e:	463b      	mov	r3, r7
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063a8:	e004      	b.n	80063b4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80063aa:	463b      	mov	r3, r7
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80063b4:	463b      	mov	r3, r7
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	7b1b      	ldrb	r3, [r3, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d12c      	bne.n	8006418 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80063be:	463b      	mov	r3, r7
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6959      	ldr	r1, [r3, #20]
 80063c4:	463b      	mov	r3, r7
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	88da      	ldrh	r2, [r3, #6]
 80063ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	1d38      	adds	r0, r7, #4
 80063d2:	6800      	ldr	r0, [r0, #0]
 80063d4:	f001 fa2c 	bl	8007830 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063d8:	1d3b      	adds	r3, r7, #4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	1d3b      	adds	r3, r7, #4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	4413      	add	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	463b      	mov	r3, r7
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	011a      	lsls	r2, r3, #4
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	4413      	add	r3, r2
 80063fc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006400:	f107 0310 	add.w	r3, r7, #16
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800640a:	b29a      	uxth	r2, r3
 800640c:	f107 0310 	add.w	r3, r7, #16
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	801a      	strh	r2, [r3, #0]
 8006414:	f000 bcdd 	b.w	8006dd2 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006418:	463b      	mov	r3, r7
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	78db      	ldrb	r3, [r3, #3]
 800641e:	2b02      	cmp	r3, #2
 8006420:	f040 8347 	bne.w	8006ab2 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006424:	463b      	mov	r3, r7
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6a1a      	ldr	r2, [r3, #32]
 800642a:	463b      	mov	r3, r7
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	429a      	cmp	r2, r3
 8006432:	f240 82eb 	bls.w	8006a0c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	463b      	mov	r3, r7
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29b      	uxth	r3, r3
 8006448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006450:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006454:	1d3b      	adds	r3, r7, #4
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	463b      	mov	r3, r7
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	441a      	add	r2, r3
 8006462:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006476:	b29b      	uxth	r3, r3
 8006478:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800647a:	463b      	mov	r3, r7
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006484:	1ad2      	subs	r2, r2, r3
 8006486:	463b      	mov	r3, r7
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800648c:	1d3b      	adds	r3, r7, #4
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	463b      	mov	r3, r7
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	b29b      	uxth	r3, r3
 800649e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 8159 	beq.w	800675a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064a8:	1d3b      	adds	r3, r7, #4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
 80064ae:	463b      	mov	r3, r7
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	785b      	ldrb	r3, [r3, #1]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d164      	bne.n	8006582 <USB_EPStartXfer+0x20e>
 80064b8:	1d3b      	adds	r3, r7, #4
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064be:	1d3b      	adds	r3, r7, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064cc:	4413      	add	r3, r2
 80064ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064d0:	463b      	mov	r3, r7
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	011a      	lsls	r2, r3, #4
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	4413      	add	r3, r2
 80064dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d112      	bne.n	8006510 <USB_EPStartXfer+0x19c>
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	801a      	strh	r2, [r3, #0]
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006508:	b29a      	uxth	r2, r3
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	801a      	strh	r2, [r3, #0]
 800650e:	e054      	b.n	80065ba <USB_EPStartXfer+0x246>
 8006510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006514:	2b3e      	cmp	r3, #62	; 0x3e
 8006516:	d817      	bhi.n	8006548 <USB_EPStartXfer+0x1d4>
 8006518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800651c:	085b      	lsrs	r3, r3, #1
 800651e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006522:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <USB_EPStartXfer+0x1c4>
 800652e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006532:	3301      	adds	r3, #1
 8006534:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653c:	b29b      	uxth	r3, r3
 800653e:	029b      	lsls	r3, r3, #10
 8006540:	b29a      	uxth	r2, r3
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	801a      	strh	r2, [r3, #0]
 8006546:	e038      	b.n	80065ba <USB_EPStartXfer+0x246>
 8006548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006556:	f003 031f 	and.w	r3, r3, #31
 800655a:	2b00      	cmp	r3, #0
 800655c:	d104      	bne.n	8006568 <USB_EPStartXfer+0x1f4>
 800655e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006562:	3b01      	subs	r3, #1
 8006564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656c:	b29b      	uxth	r3, r3
 800656e:	029b      	lsls	r3, r3, #10
 8006570:	b29b      	uxth	r3, r3
 8006572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657a:	b29a      	uxth	r2, r3
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	e01b      	b.n	80065ba <USB_EPStartXfer+0x246>
 8006582:	463b      	mov	r3, r7
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	785b      	ldrb	r3, [r3, #1]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d116      	bne.n	80065ba <USB_EPStartXfer+0x246>
 800658c:	1d3b      	adds	r3, r7, #4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006594:	b29b      	uxth	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659a:	4413      	add	r3, r2
 800659c:	637b      	str	r3, [r7, #52]	; 0x34
 800659e:	463b      	mov	r3, r7
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	011a      	lsls	r2, r3, #4
 80065a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a8:	4413      	add	r3, r2
 80065aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065ae:	633b      	str	r3, [r7, #48]	; 0x30
 80065b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065ba:	463b      	mov	r3, r7
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	895b      	ldrh	r3, [r3, #10]
 80065c0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065c4:	463b      	mov	r3, r7
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6959      	ldr	r1, [r3, #20]
 80065ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80065d4:	1d38      	adds	r0, r7, #4
 80065d6:	6800      	ldr	r0, [r0, #0]
 80065d8:	f001 f92a 	bl	8007830 <USB_WritePMA>
            ep->xfer_buff += len;
 80065dc:	463b      	mov	r3, r7
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695a      	ldr	r2, [r3, #20]
 80065e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e6:	441a      	add	r2, r3
 80065e8:	463b      	mov	r3, r7
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065ee:	463b      	mov	r3, r7
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6a1a      	ldr	r2, [r3, #32]
 80065f4:	463b      	mov	r3, r7
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d909      	bls.n	8006612 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80065fe:	463b      	mov	r3, r7
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6a1a      	ldr	r2, [r3, #32]
 8006604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006608:	1ad2      	subs	r2, r2, r3
 800660a:	463b      	mov	r3, r7
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	621a      	str	r2, [r3, #32]
 8006610:	e008      	b.n	8006624 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006612:	463b      	mov	r3, r7
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800661c:	463b      	mov	r3, r7
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2200      	movs	r2, #0
 8006622:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006624:	463b      	mov	r3, r7
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	785b      	ldrb	r3, [r3, #1]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d164      	bne.n	80066f8 <USB_EPStartXfer+0x384>
 800662e:	1d3b      	adds	r3, r7, #4
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	1d3b      	adds	r3, r7, #4
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663c:	b29b      	uxth	r3, r3
 800663e:	461a      	mov	r2, r3
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	463b      	mov	r3, r7
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	011a      	lsls	r2, r3, #4
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	4413      	add	r3, r2
 8006652:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800665c:	2b00      	cmp	r3, #0
 800665e:	d112      	bne.n	8006686 <USB_EPStartXfer+0x312>
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800666a:	b29a      	uxth	r2, r3
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	801a      	strh	r2, [r3, #0]
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	b29b      	uxth	r3, r3
 8006676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800667e:	b29a      	uxth	r2, r3
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	e057      	b.n	8006736 <USB_EPStartXfer+0x3c2>
 8006686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800668a:	2b3e      	cmp	r3, #62	; 0x3e
 800668c:	d817      	bhi.n	80066be <USB_EPStartXfer+0x34a>
 800668e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006692:	085b      	lsrs	r3, r3, #1
 8006694:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d004      	beq.n	80066ae <USB_EPStartXfer+0x33a>
 80066a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066a8:	3301      	adds	r3, #1
 80066aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	029b      	lsls	r3, r3, #10
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	801a      	strh	r2, [r3, #0]
 80066bc:	e03b      	b.n	8006736 <USB_EPStartXfer+0x3c2>
 80066be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066cc:	f003 031f 	and.w	r3, r3, #31
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <USB_EPStartXfer+0x36a>
 80066d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066d8:	3b01      	subs	r3, #1
 80066da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80066de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	029b      	lsls	r3, r3, #10
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	801a      	strh	r2, [r3, #0]
 80066f6:	e01e      	b.n	8006736 <USB_EPStartXfer+0x3c2>
 80066f8:	463b      	mov	r3, r7
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	785b      	ldrb	r3, [r3, #1]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d119      	bne.n	8006736 <USB_EPStartXfer+0x3c2>
 8006702:	1d3b      	adds	r3, r7, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
 8006708:	1d3b      	adds	r3, r7, #4
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006710:	b29b      	uxth	r3, r3
 8006712:	461a      	mov	r2, r3
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	4413      	add	r3, r2
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
 800671a:	463b      	mov	r3, r7
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	011a      	lsls	r2, r3, #4
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	4413      	add	r3, r2
 8006726:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800672a:	623b      	str	r3, [r7, #32]
 800672c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006730:	b29a      	uxth	r2, r3
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006736:	463b      	mov	r3, r7
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	891b      	ldrh	r3, [r3, #8]
 800673c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006740:	463b      	mov	r3, r7
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6959      	ldr	r1, [r3, #20]
 8006746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800674a:	b29b      	uxth	r3, r3
 800674c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006750:	1d38      	adds	r0, r7, #4
 8006752:	6800      	ldr	r0, [r0, #0]
 8006754:	f001 f86c 	bl	8007830 <USB_WritePMA>
 8006758:	e33b      	b.n	8006dd2 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800675a:	463b      	mov	r3, r7
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d164      	bne.n	800682e <USB_EPStartXfer+0x4ba>
 8006764:	1d3b      	adds	r3, r7, #4
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	64fb      	str	r3, [r7, #76]	; 0x4c
 800676a:	1d3b      	adds	r3, r7, #4
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006772:	b29b      	uxth	r3, r3
 8006774:	461a      	mov	r2, r3
 8006776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006778:	4413      	add	r3, r2
 800677a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800677c:	463b      	mov	r3, r7
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	011a      	lsls	r2, r3, #4
 8006784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006786:	4413      	add	r3, r2
 8006788:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800678c:	64bb      	str	r3, [r7, #72]	; 0x48
 800678e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d112      	bne.n	80067bc <USB_EPStartXfer+0x448>
 8006796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a4:	801a      	strh	r2, [r3, #0]
 80067a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067b8:	801a      	strh	r2, [r3, #0]
 80067ba:	e057      	b.n	800686c <USB_EPStartXfer+0x4f8>
 80067bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c0:	2b3e      	cmp	r3, #62	; 0x3e
 80067c2:	d817      	bhi.n	80067f4 <USB_EPStartXfer+0x480>
 80067c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c8:	085b      	lsrs	r3, r3, #1
 80067ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d004      	beq.n	80067e4 <USB_EPStartXfer+0x470>
 80067da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067de:	3301      	adds	r3, #1
 80067e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	029b      	lsls	r3, r3, #10
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f0:	801a      	strh	r2, [r3, #0]
 80067f2:	e03b      	b.n	800686c <USB_EPStartXfer+0x4f8>
 80067f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <USB_EPStartXfer+0x4a0>
 800680a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800680e:	3b01      	subs	r3, #1
 8006810:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006818:	b29b      	uxth	r3, r3
 800681a:	029b      	lsls	r3, r3, #10
 800681c:	b29b      	uxth	r3, r3
 800681e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006826:	b29a      	uxth	r2, r3
 8006828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800682a:	801a      	strh	r2, [r3, #0]
 800682c:	e01e      	b.n	800686c <USB_EPStartXfer+0x4f8>
 800682e:	463b      	mov	r3, r7
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	785b      	ldrb	r3, [r3, #1]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d119      	bne.n	800686c <USB_EPStartXfer+0x4f8>
 8006838:	1d3b      	adds	r3, r7, #4
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	657b      	str	r3, [r7, #84]	; 0x54
 800683e:	1d3b      	adds	r3, r7, #4
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006846:	b29b      	uxth	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800684c:	4413      	add	r3, r2
 800684e:	657b      	str	r3, [r7, #84]	; 0x54
 8006850:	463b      	mov	r3, r7
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	011a      	lsls	r2, r3, #4
 8006858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800685a:	4413      	add	r3, r2
 800685c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006860:	653b      	str	r3, [r7, #80]	; 0x50
 8006862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006866:	b29a      	uxth	r2, r3
 8006868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800686c:	463b      	mov	r3, r7
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	891b      	ldrh	r3, [r3, #8]
 8006872:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006876:	463b      	mov	r3, r7
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6959      	ldr	r1, [r3, #20]
 800687c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006880:	b29b      	uxth	r3, r3
 8006882:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006886:	1d38      	adds	r0, r7, #4
 8006888:	6800      	ldr	r0, [r0, #0]
 800688a:	f000 ffd1 	bl	8007830 <USB_WritePMA>
            ep->xfer_buff += len;
 800688e:	463b      	mov	r3, r7
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695a      	ldr	r2, [r3, #20]
 8006894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006898:	441a      	add	r2, r3
 800689a:	463b      	mov	r3, r7
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80068a0:	463b      	mov	r3, r7
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6a1a      	ldr	r2, [r3, #32]
 80068a6:	463b      	mov	r3, r7
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d909      	bls.n	80068c4 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80068b0:	463b      	mov	r3, r7
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6a1a      	ldr	r2, [r3, #32]
 80068b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ba:	1ad2      	subs	r2, r2, r3
 80068bc:	463b      	mov	r3, r7
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	621a      	str	r2, [r3, #32]
 80068c2:	e008      	b.n	80068d6 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80068c4:	463b      	mov	r3, r7
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80068ce:	463b      	mov	r3, r7
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2200      	movs	r2, #0
 80068d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068d6:	1d3b      	adds	r3, r7, #4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	647b      	str	r3, [r7, #68]	; 0x44
 80068dc:	463b      	mov	r3, r7
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d164      	bne.n	80069b0 <USB_EPStartXfer+0x63c>
 80068e6:	1d3b      	adds	r3, r7, #4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ec:	1d3b      	adds	r3, r7, #4
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fa:	4413      	add	r3, r2
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068fe:	463b      	mov	r3, r7
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	011a      	lsls	r2, r3, #4
 8006906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006908:	4413      	add	r3, r2
 800690a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800690e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006914:	2b00      	cmp	r3, #0
 8006916:	d112      	bne.n	800693e <USB_EPStartXfer+0x5ca>
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006922:	b29a      	uxth	r2, r3
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	801a      	strh	r2, [r3, #0]
 8006928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006936:	b29a      	uxth	r2, r3
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	e054      	b.n	80069e8 <USB_EPStartXfer+0x674>
 800693e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006942:	2b3e      	cmp	r3, #62	; 0x3e
 8006944:	d817      	bhi.n	8006976 <USB_EPStartXfer+0x602>
 8006946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800694a:	085b      	lsrs	r3, r3, #1
 800694c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d004      	beq.n	8006966 <USB_EPStartXfer+0x5f2>
 800695c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006960:	3301      	adds	r3, #1
 8006962:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006966:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800696a:	b29b      	uxth	r3, r3
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	b29a      	uxth	r2, r3
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	801a      	strh	r2, [r3, #0]
 8006974:	e038      	b.n	80069e8 <USB_EPStartXfer+0x674>
 8006976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006984:	f003 031f 	and.w	r3, r3, #31
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <USB_EPStartXfer+0x622>
 800698c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006990:	3b01      	subs	r3, #1
 8006992:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800699a:	b29b      	uxth	r3, r3
 800699c:	029b      	lsls	r3, r3, #10
 800699e:	b29b      	uxth	r3, r3
 80069a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	801a      	strh	r2, [r3, #0]
 80069ae:	e01b      	b.n	80069e8 <USB_EPStartXfer+0x674>
 80069b0:	463b      	mov	r3, r7
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d116      	bne.n	80069e8 <USB_EPStartXfer+0x674>
 80069ba:	1d3b      	adds	r3, r7, #4
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	461a      	mov	r2, r3
 80069c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c8:	4413      	add	r3, r2
 80069ca:	647b      	str	r3, [r7, #68]	; 0x44
 80069cc:	463b      	mov	r3, r7
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	011a      	lsls	r2, r3, #4
 80069d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d6:	4413      	add	r3, r2
 80069d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069dc:	643b      	str	r3, [r7, #64]	; 0x40
 80069de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069e8:	463b      	mov	r3, r7
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	895b      	ldrh	r3, [r3, #10]
 80069ee:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069f2:	463b      	mov	r3, r7
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6959      	ldr	r1, [r3, #20]
 80069f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006a02:	1d38      	adds	r0, r7, #4
 8006a04:	6800      	ldr	r0, [r0, #0]
 8006a06:	f000 ff13 	bl	8007830 <USB_WritePMA>
 8006a0a:	e1e2      	b.n	8006dd2 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006a0c:	463b      	mov	r3, r7
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006a16:	1d3b      	adds	r3, r7, #4
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	463b      	mov	r3, r7
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a30:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006a34:	1d3b      	adds	r3, r7, #4
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	463b      	mov	r3, r7
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	441a      	add	r2, r3
 8006a42:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a5a:	1d3b      	adds	r3, r7, #4
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	663b      	str	r3, [r7, #96]	; 0x60
 8006a60:	1d3b      	adds	r3, r7, #4
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a6e:	4413      	add	r3, r2
 8006a70:	663b      	str	r3, [r7, #96]	; 0x60
 8006a72:	463b      	mov	r3, r7
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	011a      	lsls	r2, r3, #4
 8006a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a8c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a8e:	463b      	mov	r3, r7
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	891b      	ldrh	r3, [r3, #8]
 8006a94:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a98:	463b      	mov	r3, r7
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6959      	ldr	r1, [r3, #20]
 8006a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006aa8:	1d38      	adds	r0, r7, #4
 8006aaa:	6800      	ldr	r0, [r0, #0]
 8006aac:	f000 fec0 	bl	8007830 <USB_WritePMA>
 8006ab0:	e18f      	b.n	8006dd2 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ab2:	1d3b      	adds	r3, r7, #4
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	463b      	mov	r3, r7
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 808f 	beq.w	8006bec <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ace:	1d3b      	adds	r3, r7, #4
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ad4:	463b      	mov	r3, r7
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	785b      	ldrb	r3, [r3, #1]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d164      	bne.n	8006ba8 <USB_EPStartXfer+0x834>
 8006ade:	1d3b      	adds	r3, r7, #4
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	673b      	str	r3, [r7, #112]	; 0x70
 8006ae4:	1d3b      	adds	r3, r7, #4
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006af2:	4413      	add	r3, r2
 8006af4:	673b      	str	r3, [r7, #112]	; 0x70
 8006af6:	463b      	mov	r3, r7
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	011a      	lsls	r2, r3, #4
 8006afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b00:	4413      	add	r3, r2
 8006b02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d112      	bne.n	8006b36 <USB_EPStartXfer+0x7c2>
 8006b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	801a      	strh	r2, [r3, #0]
 8006b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b32:	801a      	strh	r2, [r3, #0]
 8006b34:	e054      	b.n	8006be0 <USB_EPStartXfer+0x86c>
 8006b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8006b3c:	d817      	bhi.n	8006b6e <USB_EPStartXfer+0x7fa>
 8006b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b42:	085b      	lsrs	r3, r3, #1
 8006b44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d004      	beq.n	8006b5e <USB_EPStartXfer+0x7ea>
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	3301      	adds	r3, #1
 8006b5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	029b      	lsls	r3, r3, #10
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6a:	801a      	strh	r2, [r3, #0]
 8006b6c:	e038      	b.n	8006be0 <USB_EPStartXfer+0x86c>
 8006b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b7c:	f003 031f 	and.w	r3, r3, #31
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d104      	bne.n	8006b8e <USB_EPStartXfer+0x81a>
 8006b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	029b      	lsls	r3, r3, #10
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba4:	801a      	strh	r2, [r3, #0]
 8006ba6:	e01b      	b.n	8006be0 <USB_EPStartXfer+0x86c>
 8006ba8:	463b      	mov	r3, r7
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	785b      	ldrb	r3, [r3, #1]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d116      	bne.n	8006be0 <USB_EPStartXfer+0x86c>
 8006bb2:	1d3b      	adds	r3, r7, #4
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bc0:	4413      	add	r3, r2
 8006bc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bc4:	463b      	mov	r3, r7
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	011a      	lsls	r2, r3, #4
 8006bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bce:	4413      	add	r3, r2
 8006bd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bd4:	677b      	str	r3, [r7, #116]	; 0x74
 8006bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bde:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006be0:	463b      	mov	r3, r7
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	895b      	ldrh	r3, [r3, #10]
 8006be6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8006bea:	e097      	b.n	8006d1c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bec:	463b      	mov	r3, r7
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	785b      	ldrb	r3, [r3, #1]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d168      	bne.n	8006cc8 <USB_EPStartXfer+0x954>
 8006bf6:	1d3b      	adds	r3, r7, #4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bfe:	1d3b      	adds	r3, r7, #4
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c0e:	4413      	add	r3, r2
 8006c10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c14:	463b      	mov	r3, r7
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	011a      	lsls	r2, r3, #4
 8006c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c20:	4413      	add	r3, r2
 8006c22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d112      	bne.n	8006c56 <USB_EPStartXfer+0x8e2>
 8006c30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c3e:	801a      	strh	r2, [r3, #0]
 8006c40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c52:	801a      	strh	r2, [r3, #0]
 8006c54:	e05d      	b.n	8006d12 <USB_EPStartXfer+0x99e>
 8006c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c5c:	d817      	bhi.n	8006c8e <USB_EPStartXfer+0x91a>
 8006c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c62:	085b      	lsrs	r3, r3, #1
 8006c64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <USB_EPStartXfer+0x90a>
 8006c74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c78:	3301      	adds	r3, #1
 8006c7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	029b      	lsls	r3, r3, #10
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c8a:	801a      	strh	r2, [r3, #0]
 8006c8c:	e041      	b.n	8006d12 <USB_EPStartXfer+0x99e>
 8006c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c9c:	f003 031f 	and.w	r3, r3, #31
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d104      	bne.n	8006cae <USB_EPStartXfer+0x93a>
 8006ca4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006cae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	029b      	lsls	r3, r3, #10
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cc4:	801a      	strh	r2, [r3, #0]
 8006cc6:	e024      	b.n	8006d12 <USB_EPStartXfer+0x99e>
 8006cc8:	463b      	mov	r3, r7
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	785b      	ldrb	r3, [r3, #1]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d11f      	bne.n	8006d12 <USB_EPStartXfer+0x99e>
 8006cd2:	1d3b      	adds	r3, r7, #4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cda:	1d3b      	adds	r3, r7, #4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cea:	4413      	add	r3, r2
 8006cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cf0:	463b      	mov	r3, r7
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	011a      	lsls	r2, r3, #4
 8006cf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d12:	463b      	mov	r3, r7
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	891b      	ldrh	r3, [r3, #8]
 8006d18:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6959      	ldr	r1, [r3, #20]
 8006d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006d2c:	1d38      	adds	r0, r7, #4
 8006d2e:	6800      	ldr	r0, [r0, #0]
 8006d30:	f000 fd7e 	bl	8007830 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006d34:	463b      	mov	r3, r7
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	785b      	ldrb	r3, [r3, #1]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d122      	bne.n	8006d84 <USB_EPStartXfer+0xa10>
 8006d3e:	1d3b      	adds	r3, r7, #4
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	463b      	mov	r3, r7
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d58:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006d5c:	1d3b      	adds	r3, r7, #4
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	463b      	mov	r3, r7
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	441a      	add	r2, r3
 8006d6a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	8013      	strh	r3, [r2, #0]
 8006d82:	e026      	b.n	8006dd2 <USB_EPStartXfer+0xa5e>
 8006d84:	463b      	mov	r3, r7
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d121      	bne.n	8006dd2 <USB_EPStartXfer+0xa5e>
 8006d8e:	1d3b      	adds	r3, r7, #4
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	463b      	mov	r3, r7
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006dac:	1d3b      	adds	r3, r7, #4
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	463b      	mov	r3, r7
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	441a      	add	r2, r3
 8006dba:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006dd2:	1d3b      	adds	r3, r7, #4
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	463b      	mov	r3, r7
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f107 020e 	add.w	r2, r7, #14
 8006de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df0:	8013      	strh	r3, [r2, #0]
 8006df2:	f107 030e 	add.w	r3, r7, #14
 8006df6:	f107 020e 	add.w	r2, r7, #14
 8006dfa:	8812      	ldrh	r2, [r2, #0]
 8006dfc:	f082 0210 	eor.w	r2, r2, #16
 8006e00:	801a      	strh	r2, [r3, #0]
 8006e02:	f107 030e 	add.w	r3, r7, #14
 8006e06:	f107 020e 	add.w	r2, r7, #14
 8006e0a:	8812      	ldrh	r2, [r2, #0]
 8006e0c:	f082 0220 	eor.w	r2, r2, #32
 8006e10:	801a      	strh	r2, [r3, #0]
 8006e12:	1d3b      	adds	r3, r7, #4
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	463b      	mov	r3, r7
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	441a      	add	r2, r3
 8006e20:	f107 030e 	add.w	r3, r7, #14
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	8013      	strh	r3, [r2, #0]
 8006e3a:	e3b5      	b.n	80075a8 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e3c:	463b      	mov	r3, r7
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	7b1b      	ldrb	r3, [r3, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f040 8090 	bne.w	8006f68 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006e48:	463b      	mov	r3, r7
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	463b      	mov	r3, r7
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d90e      	bls.n	8006e76 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006e58:	463b      	mov	r3, r7
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006e62:	463b      	mov	r3, r7
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	699a      	ldr	r2, [r3, #24]
 8006e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e6c:	1ad2      	subs	r2, r2, r3
 8006e6e:	463b      	mov	r3, r7
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	619a      	str	r2, [r3, #24]
 8006e74:	e008      	b.n	8006e88 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006e76:	463b      	mov	r3, r7
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006e80:	463b      	mov	r3, r7
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2200      	movs	r2, #0
 8006e86:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e88:	1d3b      	adds	r3, r7, #4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e90:	1d3b      	adds	r3, r7, #4
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ea6:	463b      	mov	r3, r7
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	011a      	lsls	r2, r3, #4
 8006eae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006eb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d116      	bne.n	8006ef2 <USB_EPStartXfer+0xb7e>
 8006ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ed6:	801a      	strh	r2, [r3, #0]
 8006ed8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eee:	801a      	strh	r2, [r3, #0]
 8006ef0:	e32c      	b.n	800754c <USB_EPStartXfer+0x11d8>
 8006ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8006ef8:	d818      	bhi.n	8006f2c <USB_EPStartXfer+0xbb8>
 8006efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006efe:	085b      	lsrs	r3, r3, #1
 8006f00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d004      	beq.n	8006f1a <USB_EPStartXfer+0xba6>
 8006f10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f14:	3301      	adds	r3, #1
 8006f16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	029b      	lsls	r3, r3, #10
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f28:	801a      	strh	r2, [r3, #0]
 8006f2a:	e30f      	b.n	800754c <USB_EPStartXfer+0x11d8>
 8006f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f30:	095b      	lsrs	r3, r3, #5
 8006f32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d104      	bne.n	8006f4c <USB_EPStartXfer+0xbd8>
 8006f42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f46:	3b01      	subs	r3, #1
 8006f48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	029b      	lsls	r3, r3, #10
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f64:	801a      	strh	r2, [r3, #0]
 8006f66:	e2f1      	b.n	800754c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006f68:	463b      	mov	r3, r7
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	78db      	ldrb	r3, [r3, #3]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	f040 818f 	bne.w	8007292 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f74:	463b      	mov	r3, r7
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	785b      	ldrb	r3, [r3, #1]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d175      	bne.n	800706a <USB_EPStartXfer+0xcf6>
 8006f7e:	1d3b      	adds	r3, r7, #4
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f86:	1d3b      	adds	r3, r7, #4
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f96:	4413      	add	r3, r2
 8006f98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f9c:	463b      	mov	r3, r7
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	011a      	lsls	r2, r3, #4
 8006fa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fa8:	4413      	add	r3, r2
 8006faa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fb2:	463b      	mov	r3, r7
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d116      	bne.n	8006fea <USB_EPStartXfer+0xc76>
 8006fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fce:	801a      	strh	r2, [r3, #0]
 8006fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fe6:	801a      	strh	r2, [r3, #0]
 8006fe8:	e065      	b.n	80070b6 <USB_EPStartXfer+0xd42>
 8006fea:	463b      	mov	r3, r7
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ff2:	d81a      	bhi.n	800702a <USB_EPStartXfer+0xcb6>
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	085b      	lsrs	r3, r3, #1
 8006ffc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007000:	463b      	mov	r3, r7
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <USB_EPStartXfer+0xca4>
 800700e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007012:	3301      	adds	r3, #1
 8007014:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007018:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800701c:	b29b      	uxth	r3, r3
 800701e:	029b      	lsls	r3, r3, #10
 8007020:	b29a      	uxth	r2, r3
 8007022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007026:	801a      	strh	r2, [r3, #0]
 8007028:	e045      	b.n	80070b6 <USB_EPStartXfer+0xd42>
 800702a:	463b      	mov	r3, r7
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	095b      	lsrs	r3, r3, #5
 8007032:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007036:	463b      	mov	r3, r7
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f003 031f 	and.w	r3, r3, #31
 8007040:	2b00      	cmp	r3, #0
 8007042:	d104      	bne.n	800704e <USB_EPStartXfer+0xcda>
 8007044:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007048:	3b01      	subs	r3, #1
 800704a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800704e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007052:	b29b      	uxth	r3, r3
 8007054:	029b      	lsls	r3, r3, #10
 8007056:	b29b      	uxth	r3, r3
 8007058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007060:	b29a      	uxth	r2, r3
 8007062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	e025      	b.n	80070b6 <USB_EPStartXfer+0xd42>
 800706a:	463b      	mov	r3, r7
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	785b      	ldrb	r3, [r3, #1]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d120      	bne.n	80070b6 <USB_EPStartXfer+0xd42>
 8007074:	1d3b      	adds	r3, r7, #4
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800707c:	1d3b      	adds	r3, r7, #4
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007084:	b29b      	uxth	r3, r3
 8007086:	461a      	mov	r2, r3
 8007088:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800708c:	4413      	add	r3, r2
 800708e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007092:	463b      	mov	r3, r7
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	011a      	lsls	r2, r3, #4
 800709a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800709e:	4413      	add	r3, r2
 80070a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070a8:	463b      	mov	r3, r7
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070b4:	801a      	strh	r2, [r3, #0]
 80070b6:	1d3b      	adds	r3, r7, #4
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070be:	463b      	mov	r3, r7
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	785b      	ldrb	r3, [r3, #1]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d175      	bne.n	80071b4 <USB_EPStartXfer+0xe40>
 80070c8:	1d3b      	adds	r3, r7, #4
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070d0:	1d3b      	adds	r3, r7, #4
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070d8:	b29b      	uxth	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070e0:	4413      	add	r3, r2
 80070e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070e6:	463b      	mov	r3, r7
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	011a      	lsls	r2, r3, #4
 80070ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070f2:	4413      	add	r3, r2
 80070f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070fc:	463b      	mov	r3, r7
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d116      	bne.n	8007134 <USB_EPStartXfer+0xdc0>
 8007106:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29b      	uxth	r3, r3
 800710e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007112:	b29a      	uxth	r2, r3
 8007114:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007118:	801a      	strh	r2, [r3, #0]
 800711a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	b29b      	uxth	r3, r3
 8007122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712a:	b29a      	uxth	r2, r3
 800712c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007130:	801a      	strh	r2, [r3, #0]
 8007132:	e061      	b.n	80071f8 <USB_EPStartXfer+0xe84>
 8007134:	463b      	mov	r3, r7
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b3e      	cmp	r3, #62	; 0x3e
 800713c:	d81a      	bhi.n	8007174 <USB_EPStartXfer+0xe00>
 800713e:	463b      	mov	r3, r7
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	085b      	lsrs	r3, r3, #1
 8007146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800714a:	463b      	mov	r3, r7
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <USB_EPStartXfer+0xdee>
 8007158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715c:	3301      	adds	r3, #1
 800715e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007166:	b29b      	uxth	r3, r3
 8007168:	029b      	lsls	r3, r3, #10
 800716a:	b29a      	uxth	r2, r3
 800716c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007170:	801a      	strh	r2, [r3, #0]
 8007172:	e041      	b.n	80071f8 <USB_EPStartXfer+0xe84>
 8007174:	463b      	mov	r3, r7
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	095b      	lsrs	r3, r3, #5
 800717c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007180:	463b      	mov	r3, r7
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f003 031f 	and.w	r3, r3, #31
 800718a:	2b00      	cmp	r3, #0
 800718c:	d104      	bne.n	8007198 <USB_EPStartXfer+0xe24>
 800718e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007192:	3b01      	subs	r3, #1
 8007194:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719c:	b29b      	uxth	r3, r3
 800719e:	029b      	lsls	r3, r3, #10
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071b0:	801a      	strh	r2, [r3, #0]
 80071b2:	e021      	b.n	80071f8 <USB_EPStartXfer+0xe84>
 80071b4:	463b      	mov	r3, r7
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	785b      	ldrb	r3, [r3, #1]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d11c      	bne.n	80071f8 <USB_EPStartXfer+0xe84>
 80071be:	1d3b      	adds	r3, r7, #4
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	461a      	mov	r2, r3
 80071ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071ce:	4413      	add	r3, r2
 80071d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071d4:	463b      	mov	r3, r7
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	011a      	lsls	r2, r3, #4
 80071dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071e0:	4413      	add	r3, r2
 80071e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80071ea:	463b      	mov	r3, r7
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071f6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80071f8:	463b      	mov	r3, r7
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 81a4 	beq.w	800754c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007204:	1d3b      	adds	r3, r7, #4
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	463b      	mov	r3, r7
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007218:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800721c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d005      	beq.n	8007230 <USB_EPStartXfer+0xebc>
 8007224:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10d      	bne.n	800724c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007230:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007238:	2b00      	cmp	r3, #0
 800723a:	f040 8187 	bne.w	800754c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800723e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007246:	2b00      	cmp	r3, #0
 8007248:	f040 8180 	bne.w	800754c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800724c:	1d3b      	adds	r3, r7, #4
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	463b      	mov	r3, r7
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	b29b      	uxth	r3, r3
 800725e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007266:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800726a:	1d3b      	adds	r3, r7, #4
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	463b      	mov	r3, r7
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	441a      	add	r2, r3
 8007278:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800727c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007288:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800728c:	b29b      	uxth	r3, r3
 800728e:	8013      	strh	r3, [r2, #0]
 8007290:	e15c      	b.n	800754c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007292:	463b      	mov	r3, r7
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	78db      	ldrb	r3, [r3, #3]
 8007298:	2b01      	cmp	r3, #1
 800729a:	f040 8155 	bne.w	8007548 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800729e:	463b      	mov	r3, r7
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	699a      	ldr	r2, [r3, #24]
 80072a4:	463b      	mov	r3, r7
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d90e      	bls.n	80072cc <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80072ae:	463b      	mov	r3, r7
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80072b8:	463b      	mov	r3, r7
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699a      	ldr	r2, [r3, #24]
 80072be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072c2:	1ad2      	subs	r2, r2, r3
 80072c4:	463b      	mov	r3, r7
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	619a      	str	r2, [r3, #24]
 80072ca:	e008      	b.n	80072de <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80072cc:	463b      	mov	r3, r7
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80072d6:	463b      	mov	r3, r7
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2200      	movs	r2, #0
 80072dc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80072de:	463b      	mov	r3, r7
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	785b      	ldrb	r3, [r3, #1]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d16f      	bne.n	80073c8 <USB_EPStartXfer+0x1054>
 80072e8:	1d3b      	adds	r3, r7, #4
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072f0:	1d3b      	adds	r3, r7, #4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	461a      	mov	r2, r3
 80072fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007300:	4413      	add	r3, r2
 8007302:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007306:	463b      	mov	r3, r7
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	011a      	lsls	r2, r3, #4
 800730e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007312:	4413      	add	r3, r2
 8007314:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007318:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800731c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d116      	bne.n	8007352 <USB_EPStartXfer+0xfde>
 8007324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007330:	b29a      	uxth	r2, r3
 8007332:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007336:	801a      	strh	r2, [r3, #0]
 8007338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	b29b      	uxth	r3, r3
 8007340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007348:	b29a      	uxth	r2, r3
 800734a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800734e:	801a      	strh	r2, [r3, #0]
 8007350:	e05f      	b.n	8007412 <USB_EPStartXfer+0x109e>
 8007352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007356:	2b3e      	cmp	r3, #62	; 0x3e
 8007358:	d818      	bhi.n	800738c <USB_EPStartXfer+0x1018>
 800735a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d004      	beq.n	800737a <USB_EPStartXfer+0x1006>
 8007370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007374:	3301      	adds	r3, #1
 8007376:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800737a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737e:	b29b      	uxth	r3, r3
 8007380:	029b      	lsls	r3, r3, #10
 8007382:	b29a      	uxth	r2, r3
 8007384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	e042      	b.n	8007412 <USB_EPStartXfer+0x109e>
 800738c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800739a:	f003 031f 	and.w	r3, r3, #31
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d104      	bne.n	80073ac <USB_EPStartXfer+0x1038>
 80073a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073a6:	3b01      	subs	r3, #1
 80073a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	029b      	lsls	r3, r3, #10
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073be:	b29a      	uxth	r2, r3
 80073c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073c4:	801a      	strh	r2, [r3, #0]
 80073c6:	e024      	b.n	8007412 <USB_EPStartXfer+0x109e>
 80073c8:	463b      	mov	r3, r7
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	785b      	ldrb	r3, [r3, #1]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d11f      	bne.n	8007412 <USB_EPStartXfer+0x109e>
 80073d2:	1d3b      	adds	r3, r7, #4
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073da:	1d3b      	adds	r3, r7, #4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	461a      	mov	r2, r3
 80073e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073ea:	4413      	add	r3, r2
 80073ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073f0:	463b      	mov	r3, r7
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	011a      	lsls	r2, r3, #4
 80073f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073fc:	4413      	add	r3, r2
 80073fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800740a:	b29a      	uxth	r2, r3
 800740c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007410:	801a      	strh	r2, [r3, #0]
 8007412:	1d3b      	adds	r3, r7, #4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800741a:	463b      	mov	r3, r7
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	785b      	ldrb	r3, [r3, #1]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d16f      	bne.n	8007504 <USB_EPStartXfer+0x1190>
 8007424:	1d3b      	adds	r3, r7, #4
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800742c:	1d3b      	adds	r3, r7, #4
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007434:	b29b      	uxth	r3, r3
 8007436:	461a      	mov	r2, r3
 8007438:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800743c:	4413      	add	r3, r2
 800743e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007442:	463b      	mov	r3, r7
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	011a      	lsls	r2, r3, #4
 800744a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800744e:	4413      	add	r3, r2
 8007450:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007454:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d116      	bne.n	800748e <USB_EPStartXfer+0x111a>
 8007460:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800746c:	b29a      	uxth	r2, r3
 800746e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007472:	801a      	strh	r2, [r3, #0]
 8007474:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007484:	b29a      	uxth	r2, r3
 8007486:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800748a:	801a      	strh	r2, [r3, #0]
 800748c:	e05e      	b.n	800754c <USB_EPStartXfer+0x11d8>
 800748e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007492:	2b3e      	cmp	r3, #62	; 0x3e
 8007494:	d818      	bhi.n	80074c8 <USB_EPStartXfer+0x1154>
 8007496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <USB_EPStartXfer+0x1142>
 80074ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074b0:	3301      	adds	r3, #1
 80074b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	029b      	lsls	r3, r3, #10
 80074be:	b29a      	uxth	r2, r3
 80074c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80074c4:	801a      	strh	r2, [r3, #0]
 80074c6:	e041      	b.n	800754c <USB_EPStartXfer+0x11d8>
 80074c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074d6:	f003 031f 	and.w	r3, r3, #31
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d104      	bne.n	80074e8 <USB_EPStartXfer+0x1174>
 80074de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074e2:	3b01      	subs	r3, #1
 80074e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	029b      	lsls	r3, r3, #10
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007500:	801a      	strh	r2, [r3, #0]
 8007502:	e023      	b.n	800754c <USB_EPStartXfer+0x11d8>
 8007504:	463b      	mov	r3, r7
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d11e      	bne.n	800754c <USB_EPStartXfer+0x11d8>
 800750e:	1d3b      	adds	r3, r7, #4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007516:	b29b      	uxth	r3, r3
 8007518:	461a      	mov	r2, r3
 800751a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800751e:	4413      	add	r3, r2
 8007520:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007524:	463b      	mov	r3, r7
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	011a      	lsls	r2, r3, #4
 800752c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007530:	4413      	add	r3, r2
 8007532:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007536:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800753a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800753e:	b29a      	uxth	r2, r3
 8007540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007544:	801a      	strh	r2, [r3, #0]
 8007546:	e001      	b.n	800754c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e02e      	b.n	80075aa <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800754c:	1d3b      	adds	r3, r7, #4
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	463b      	mov	r3, r7
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007566:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800756a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800756e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007572:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007576:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800757a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800757e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007582:	1d3b      	adds	r3, r7, #4
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	463b      	mov	r3, r7
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	441a      	add	r2, r3
 8007590:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800759c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	785b      	ldrb	r3, [r3, #1]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d020      	beq.n	8007608 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075dc:	81bb      	strh	r3, [r7, #12]
 80075de:	89bb      	ldrh	r3, [r7, #12]
 80075e0:	f083 0310 	eor.w	r3, r3, #16
 80075e4:	81bb      	strh	r3, [r7, #12]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	441a      	add	r2, r3
 80075f0:	89bb      	ldrh	r3, [r7, #12]
 80075f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007602:	b29b      	uxth	r3, r3
 8007604:	8013      	strh	r3, [r2, #0]
 8007606:	e01f      	b.n	8007648 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	b29b      	uxth	r3, r3
 8007616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800761a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761e:	81fb      	strh	r3, [r7, #14]
 8007620:	89fb      	ldrh	r3, [r7, #14]
 8007622:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007626:	81fb      	strh	r3, [r7, #14]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	441a      	add	r2, r3
 8007632:	89fb      	ldrh	r3, [r7, #14]
 8007634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007644:	b29b      	uxth	r3, r3
 8007646:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	bc80      	pop	{r7}
 8007652:	4770      	bx	lr

08007654 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	7b1b      	ldrb	r3, [r3, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f040 809d 	bne.w	80077a2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	785b      	ldrb	r3, [r3, #1]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d04c      	beq.n	800770a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	823b      	strh	r3, [r7, #16]
 800767e:	8a3b      	ldrh	r3, [r7, #16]
 8007680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007684:	2b00      	cmp	r3, #0
 8007686:	d01b      	beq.n	80076c0 <USB_EPClearStall+0x6c>
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	b29b      	uxth	r3, r3
 8007696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800769a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769e:	81fb      	strh	r3, [r7, #14]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	441a      	add	r2, r3
 80076aa:	89fb      	ldrh	r3, [r7, #14]
 80076ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076bc:	b29b      	uxth	r3, r3
 80076be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	78db      	ldrb	r3, [r3, #3]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d06c      	beq.n	80077a2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076de:	81bb      	strh	r3, [r7, #12]
 80076e0:	89bb      	ldrh	r3, [r7, #12]
 80076e2:	f083 0320 	eor.w	r3, r3, #32
 80076e6:	81bb      	strh	r3, [r7, #12]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	441a      	add	r2, r3
 80076f2:	89bb      	ldrh	r3, [r7, #12]
 80076f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007704:	b29b      	uxth	r3, r3
 8007706:	8013      	strh	r3, [r2, #0]
 8007708:	e04b      	b.n	80077a2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	82fb      	strh	r3, [r7, #22]
 8007718:	8afb      	ldrh	r3, [r7, #22]
 800771a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01b      	beq.n	800775a <USB_EPClearStall+0x106>
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007738:	82bb      	strh	r3, [r7, #20]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	441a      	add	r2, r3
 8007744:	8abb      	ldrh	r3, [r7, #20]
 8007746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800774a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800774e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007756:	b29b      	uxth	r3, r3
 8007758:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	b29b      	uxth	r3, r3
 8007768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800776c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007770:	827b      	strh	r3, [r7, #18]
 8007772:	8a7b      	ldrh	r3, [r7, #18]
 8007774:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007778:	827b      	strh	r3, [r7, #18]
 800777a:	8a7b      	ldrh	r3, [r7, #18]
 800777c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007780:	827b      	strh	r3, [r7, #18]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	441a      	add	r2, r3
 800778c:	8a7b      	ldrh	r3, [r7, #18]
 800778e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800779a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800779e:	b29b      	uxth	r3, r3
 80077a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	371c      	adds	r7, #28
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr

080077ae <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	460b      	mov	r3, r1
 80077b8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2280      	movs	r2, #128	; 0x80
 80077c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr

080077d4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr

080077e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bc80      	pop	{r7}
 80077fa:	4770      	bx	lr

080077fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800780a:	b29b      	uxth	r3, r3
 800780c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800780e:	68fb      	ldr	r3, [r7, #12]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	bc80      	pop	{r7}
 8007818:	4770      	bx	lr

0800781a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr

08007830 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007830:	b480      	push	{r7}
 8007832:	b08d      	sub	sp, #52	; 0x34
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	4611      	mov	r1, r2
 800783c:	461a      	mov	r2, r3
 800783e:	460b      	mov	r3, r1
 8007840:	80fb      	strh	r3, [r7, #6]
 8007842:	4613      	mov	r3, r2
 8007844:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007846:	88bb      	ldrh	r3, [r7, #4]
 8007848:	3301      	adds	r3, #1
 800784a:	085b      	lsrs	r3, r3, #1
 800784c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007856:	88fb      	ldrh	r3, [r7, #6]
 8007858:	005a      	lsls	r2, r3, #1
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	4413      	add	r3, r2
 800785e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007862:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007868:	e01e      	b.n	80078a8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	3301      	adds	r3, #1
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	b29b      	uxth	r3, r3
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	b29b      	uxth	r3, r3
 8007880:	461a      	mov	r2, r3
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	b29a      	uxth	r2, r3
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	3302      	adds	r3, #2
 8007894:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007898:	3302      	adds	r3, #2
 800789a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	3301      	adds	r3, #1
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	3b01      	subs	r3, #1
 80078a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1dd      	bne.n	800786a <USB_WritePMA+0x3a>
  }
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	3734      	adds	r7, #52	; 0x34
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bc80      	pop	{r7}
 80078b8:	4770      	bx	lr

080078ba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b08b      	sub	sp, #44	; 0x2c
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	4611      	mov	r1, r2
 80078c6:	461a      	mov	r2, r3
 80078c8:	460b      	mov	r3, r1
 80078ca:	80fb      	strh	r3, [r7, #6]
 80078cc:	4613      	mov	r3, r2
 80078ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80078d0:	88bb      	ldrh	r3, [r7, #4]
 80078d2:	085b      	lsrs	r3, r3, #1
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	005a      	lsls	r2, r3, #1
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078ec:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
 80078f2:	e01b      	b.n	800792c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	3302      	adds	r3, #2
 8007900:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	b2da      	uxtb	r2, r3
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	3301      	adds	r3, #1
 800790e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	b2da      	uxtb	r2, r3
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	3301      	adds	r3, #1
 800791e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	3302      	adds	r3, #2
 8007924:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	3b01      	subs	r3, #1
 800792a:	627b      	str	r3, [r7, #36]	; 0x24
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e0      	bne.n	80078f4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007932:	88bb      	ldrh	r3, [r7, #4]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	b29b      	uxth	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d007      	beq.n	800794e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	b29b      	uxth	r3, r3
 8007944:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	b2da      	uxtb	r2, r3
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	701a      	strb	r2, [r3, #0]
  }
}
 800794e:	bf00      	nop
 8007950:	372c      	adds	r7, #44	; 0x2c
 8007952:	46bd      	mov	sp, r7
 8007954:	bc80      	pop	{r7}
 8007956:	4770      	bx	lr

08007958 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	7c1b      	ldrb	r3, [r3, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d115      	bne.n	800799c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007974:	2202      	movs	r2, #2
 8007976:	2181      	movs	r1, #129	; 0x81
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 ff18 	bl	80097ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007988:	2202      	movs	r2, #2
 800798a:	2101      	movs	r1, #1
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f001 ff0e 	bl	80097ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800799a:	e012      	b.n	80079c2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800799c:	2340      	movs	r3, #64	; 0x40
 800799e:	2202      	movs	r2, #2
 80079a0:	2181      	movs	r1, #129	; 0x81
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 ff03 	bl	80097ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079ae:	2340      	movs	r3, #64	; 0x40
 80079b0:	2202      	movs	r2, #2
 80079b2:	2101      	movs	r1, #1
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 fefa 	bl	80097ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079c2:	2308      	movs	r3, #8
 80079c4:	2203      	movs	r2, #3
 80079c6:	2182      	movs	r1, #130	; 0x82
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 fef0 	bl	80097ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80079d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80079d8:	f002 f810 	bl	80099fc <USBD_static_malloc>
 80079dc:	4602      	mov	r2, r0
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d102      	bne.n	80079f4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80079ee:	2301      	movs	r3, #1
 80079f0:	73fb      	strb	r3, [r7, #15]
 80079f2:	e026      	b.n	8007a42 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	7c1b      	ldrb	r3, [r3, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d109      	bne.n	8007a32 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a28:	2101      	movs	r1, #1
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 ffb0 	bl	8009990 <USBD_LL_PrepareReceive>
 8007a30:	e007      	b.n	8007a42 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a38:	2340      	movs	r3, #64	; 0x40
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 ffa7 	bl	8009990 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007a5c:	2181      	movs	r1, #129	; 0x81
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 fecb 	bl	80097fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 fec4 	bl	80097fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a7a:	2182      	movs	r1, #130	; 0x82
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 febc 	bl	80097fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00e      	beq.n	8007ab0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f001 ffb6 	bl	8009a14 <USBD_static_free>
    pdev->pClassData = NULL;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b086      	sub	sp, #24
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aca:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d039      	beq.n	8007b58 <USBD_CDC_Setup+0x9e>
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d17f      	bne.n	8007be8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	88db      	ldrh	r3, [r3, #6]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d029      	beq.n	8007b44 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	b25b      	sxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	da11      	bge.n	8007b1e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007b06:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	88d2      	ldrh	r2, [r2, #6]
 8007b0c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007b0e:	6939      	ldr	r1, [r7, #16]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	88db      	ldrh	r3, [r3, #6]
 8007b14:	461a      	mov	r2, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f001 fa09 	bl	8008f2e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007b1c:	e06b      	b.n	8007bf6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	785a      	ldrb	r2, [r3, #1]
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	88db      	ldrh	r3, [r3, #6]
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007b34:	6939      	ldr	r1, [r7, #16]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	88db      	ldrh	r3, [r3, #6]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 fa24 	bl	8008f8a <USBD_CtlPrepareRx>
      break;
 8007b42:	e058      	b.n	8007bf6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	7850      	ldrb	r0, [r2, #1]
 8007b50:	2200      	movs	r2, #0
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	4798      	blx	r3
      break;
 8007b56:	e04e      	b.n	8007bf6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	785b      	ldrb	r3, [r3, #1]
 8007b5c:	2b0b      	cmp	r3, #11
 8007b5e:	d02e      	beq.n	8007bbe <USBD_CDC_Setup+0x104>
 8007b60:	2b0b      	cmp	r3, #11
 8007b62:	dc38      	bgt.n	8007bd6 <USBD_CDC_Setup+0x11c>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <USBD_CDC_Setup+0xb4>
 8007b68:	2b0a      	cmp	r3, #10
 8007b6a:	d014      	beq.n	8007b96 <USBD_CDC_Setup+0xdc>
 8007b6c:	e033      	b.n	8007bd6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d107      	bne.n	8007b88 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007b78:	f107 030c 	add.w	r3, r7, #12
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 f9d4 	bl	8008f2e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b86:	e02e      	b.n	8007be6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 f965 	bl	8008e5a <USBD_CtlError>
            ret = USBD_FAIL;
 8007b90:	2302      	movs	r3, #2
 8007b92:	75fb      	strb	r3, [r7, #23]
          break;
 8007b94:	e027      	b.n	8007be6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d107      	bne.n	8007bb0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ba0:	f107 030f 	add.w	r3, r7, #15
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 f9c0 	bl	8008f2e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bae:	e01a      	b.n	8007be6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 f951 	bl	8008e5a <USBD_CtlError>
            ret = USBD_FAIL;
 8007bb8:	2302      	movs	r3, #2
 8007bba:	75fb      	strb	r3, [r7, #23]
          break;
 8007bbc:	e013      	b.n	8007be6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d00d      	beq.n	8007be4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f001 f945 	bl	8008e5a <USBD_CtlError>
            ret = USBD_FAIL;
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bd4:	e006      	b.n	8007be4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 f93e 	bl	8008e5a <USBD_CtlError>
          ret = USBD_FAIL;
 8007bde:	2302      	movs	r3, #2
 8007be0:	75fb      	strb	r3, [r7, #23]
          break;
 8007be2:	e000      	b.n	8007be6 <USBD_CDC_Setup+0x12c>
          break;
 8007be4:	bf00      	nop
      }
      break;
 8007be6:	e006      	b.n	8007bf6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f001 f935 	bl	8008e5a <USBD_CtlError>
      ret = USBD_FAIL;
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf4:	bf00      	nop
  }

  return ret;
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c12:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c1a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d03a      	beq.n	8007c9c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c26:	78fa      	ldrb	r2, [r7, #3]
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	440b      	add	r3, r1
 8007c34:	331c      	adds	r3, #28
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d029      	beq.n	8007c90 <USBD_CDC_DataIn+0x90>
 8007c3c:	78fa      	ldrb	r2, [r7, #3]
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	4613      	mov	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	440b      	add	r3, r1
 8007c4a:	331c      	adds	r3, #28
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	78f9      	ldrb	r1, [r7, #3]
 8007c50:	68b8      	ldr	r0, [r7, #8]
 8007c52:	460b      	mov	r3, r1
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	00db      	lsls	r3, r3, #3
 8007c5a:	4403      	add	r3, r0
 8007c5c:	3338      	adds	r3, #56	; 0x38
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c64:	fb03 f301 	mul.w	r3, r3, r1
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d110      	bne.n	8007c90 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007c6e:	78fa      	ldrb	r2, [r7, #3]
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	331c      	adds	r3, #28
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c82:	78f9      	ldrb	r1, [r7, #3]
 8007c84:	2300      	movs	r3, #0
 8007c86:	2200      	movs	r2, #0
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 fe5e 	bl	800994a <USBD_LL_Transmit>
 8007c8e:	e003      	b.n	8007c98 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e000      	b.n	8007c9e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007c9c:	2302      	movs	r3, #2
  }
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fe89 	bl	80099d6 <USBD_LL_GetRxDataSize>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00d      	beq.n	8007cf2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007cea:	4611      	mov	r1, r2
 8007cec:	4798      	blx	r3

    return USBD_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e000      	b.n	8007cf4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007cf2:	2302      	movs	r3, #2
  }
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d015      	beq.n	8007d42 <USBD_CDC_EP0_RxReady+0x46>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d1c:	2bff      	cmp	r3, #255	; 0xff
 8007d1e:	d010      	beq.n	8007d42 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007d2e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d36:	b292      	uxth	r2, r2
 8007d38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	22ff      	movs	r2, #255	; 0xff
 8007d3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2243      	movs	r2, #67	; 0x43
 8007d58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007d5a:	4b03      	ldr	r3, [pc, #12]	; (8007d68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bc80      	pop	{r7}
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	200000d8 	.word	0x200000d8

08007d6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2243      	movs	r2, #67	; 0x43
 8007d78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007d7a:	4b03      	ldr	r3, [pc, #12]	; (8007d88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bc80      	pop	{r7}
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	20000094 	.word	0x20000094

08007d8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2243      	movs	r2, #67	; 0x43
 8007d98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007d9a:	4b03      	ldr	r3, [pc, #12]	; (8007da8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bc80      	pop	{r7}
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	2000011c 	.word	0x2000011c

08007dac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	220a      	movs	r2, #10
 8007db8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007dba:	4b03      	ldr	r3, [pc, #12]	; (8007dc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bc80      	pop	{r7}
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	20000050 	.word	0x20000050

08007dcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d005      	beq.n	8007dec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bc80      	pop	{r7}
 8007df6:	4770      	bx	lr

08007df8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	4613      	mov	r3, r2
 8007e04:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e16:	88fa      	ldrh	r2, [r7, #6]
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	371c      	adds	r7, #28
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bc80      	pop	{r7}
 8007e28:	4770      	bx	lr

08007e2a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b085      	sub	sp, #20
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr

08007e50 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d01c      	beq.n	8007ea4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d115      	bne.n	8007ea0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	2181      	movs	r1, #129	; 0x81
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 fd57 	bl	800994a <USBD_LL_Transmit>

      return USBD_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	e002      	b.n	8007ea6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e000      	b.n	8007ea6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007ea4:	2302      	movs	r3, #2
  }
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b084      	sub	sp, #16
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d017      	beq.n	8007ef8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	7c1b      	ldrb	r3, [r3, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d109      	bne.n	8007ee4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eda:	2101      	movs	r1, #1
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 fd57 	bl	8009990 <USBD_LL_PrepareReceive>
 8007ee2:	e007      	b.n	8007ef4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007eea:	2340      	movs	r3, #64	; 0x40
 8007eec:	2101      	movs	r1, #1
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fd4e 	bl	8009990 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	e000      	b.n	8007efa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007ef8:	2302      	movs	r3, #2
  }
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f16:	2302      	movs	r3, #2
 8007f18:	e01a      	b.n	8007f50 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	79fa      	ldrb	r2, [r7, #7]
 8007f46:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f001 fbbb 	bl	80096c4 <USBD_LL_Init>

  return USBD_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d006      	beq.n	8007f7a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]
 8007f78:	e001      	b.n	8007f7e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bc80      	pop	{r7}
 8007f88:	4770      	bx	lr

08007f8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f001 fbf0 	bl	8009778 <USBD_LL_Start>

  return USBD_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr

08007fb6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00c      	beq.n	8007fea <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	78fa      	ldrb	r2, [r7, #3]
 8007fda:	4611      	mov	r1, r2
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	4798      	blx	r3
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	78fa      	ldrb	r2, [r7, #3]
 800800a:	4611      	mov	r1, r2
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	4798      	blx	r3

  return USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	4618      	mov	r0, r3
 800802e:	f000 fed8 	bl	8008de2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008040:	461a      	mov	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800804e:	f003 031f 	and.w	r3, r3, #31
 8008052:	2b02      	cmp	r3, #2
 8008054:	d016      	beq.n	8008084 <USBD_LL_SetupStage+0x6a>
 8008056:	2b02      	cmp	r3, #2
 8008058:	d81c      	bhi.n	8008094 <USBD_LL_SetupStage+0x7a>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <USBD_LL_SetupStage+0x4a>
 800805e:	2b01      	cmp	r3, #1
 8008060:	d008      	beq.n	8008074 <USBD_LL_SetupStage+0x5a>
 8008062:	e017      	b.n	8008094 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f9cb 	bl	8008408 <USBD_StdDevReq>
      break;
 8008072:	e01a      	b.n	80080aa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fa2d 	bl	80084dc <USBD_StdItfReq>
      break;
 8008082:	e012      	b.n	80080aa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fa6d 	bl	800856c <USBD_StdEPReq>
      break;
 8008092:	e00a      	b.n	80080aa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800809a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 fbc8 	bl	8009838 <USBD_LL_StallEP>
      break;
 80080a8:	bf00      	nop
  }

  return USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	460b      	mov	r3, r1
 80080be:	607a      	str	r2, [r7, #4]
 80080c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80080c2:	7afb      	ldrb	r3, [r7, #11]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d14b      	bne.n	8008160 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d134      	bne.n	8008144 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d919      	bls.n	800811a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	1ad2      	subs	r2, r2, r3
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	68da      	ldr	r2, [r3, #12]
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d203      	bcs.n	8008108 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008104:	b29b      	uxth	r3, r3
 8008106:	e002      	b.n	800810e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800810c:	b29b      	uxth	r3, r3
 800810e:	461a      	mov	r2, r3
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f000 ff57 	bl	8008fc6 <USBD_CtlContinueRx>
 8008118:	e038      	b.n	800818c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00a      	beq.n	800813c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800812c:	2b03      	cmp	r3, #3
 800812e:	d105      	bne.n	800813c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 ff54 	bl	8008fea <USBD_CtlSendStatus>
 8008142:	e023      	b.n	800818c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800814a:	2b05      	cmp	r3, #5
 800814c:	d11e      	bne.n	800818c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008156:	2100      	movs	r1, #0
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f001 fb6d 	bl	8009838 <USBD_LL_StallEP>
 800815e:	e015      	b.n	800818c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00d      	beq.n	8008188 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008172:	2b03      	cmp	r3, #3
 8008174:	d108      	bne.n	8008188 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	7afa      	ldrb	r2, [r7, #11]
 8008180:	4611      	mov	r1, r2
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	4798      	blx	r3
 8008186:	e001      	b.n	800818c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008188:	2302      	movs	r3, #2
 800818a:	e000      	b.n	800818e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b086      	sub	sp, #24
 800819a:	af00      	add	r7, sp, #0
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	460b      	mov	r3, r1
 80081a0:	607a      	str	r2, [r7, #4]
 80081a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80081a4:	7afb      	ldrb	r3, [r7, #11]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d17f      	bne.n	80082aa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3314      	adds	r3, #20
 80081ae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d15c      	bne.n	8008274 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d915      	bls.n	80081f2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	1ad2      	subs	r2, r2, r3
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	461a      	mov	r2, r3
 80081dc:	6879      	ldr	r1, [r7, #4]
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 fec1 	bl	8008f66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081e4:	2300      	movs	r3, #0
 80081e6:	2200      	movs	r2, #0
 80081e8:	2100      	movs	r1, #0
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f001 fbd0 	bl	8009990 <USBD_LL_PrepareReceive>
 80081f0:	e04e      	b.n	8008290 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	6912      	ldr	r2, [r2, #16]
 80081fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80081fe:	fb02 f201 	mul.w	r2, r2, r1
 8008202:	1a9b      	subs	r3, r3, r2
 8008204:	2b00      	cmp	r3, #0
 8008206:	d11c      	bne.n	8008242 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	689a      	ldr	r2, [r3, #8]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008210:	429a      	cmp	r2, r3
 8008212:	d316      	bcc.n	8008242 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800821e:	429a      	cmp	r2, r3
 8008220:	d20f      	bcs.n	8008242 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008222:	2200      	movs	r2, #0
 8008224:	2100      	movs	r1, #0
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 fe9d 	bl	8008f66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008234:	2300      	movs	r3, #0
 8008236:	2200      	movs	r2, #0
 8008238:	2100      	movs	r1, #0
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f001 fba8 	bl	8009990 <USBD_LL_PrepareReceive>
 8008240:	e026      	b.n	8008290 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008254:	2b03      	cmp	r3, #3
 8008256:	d105      	bne.n	8008264 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008264:	2180      	movs	r1, #128	; 0x80
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f001 fae6 	bl	8009838 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 fecf 	bl	8009010 <USBD_CtlReceiveStatus>
 8008272:	e00d      	b.n	8008290 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800827a:	2b04      	cmp	r3, #4
 800827c:	d004      	beq.n	8008288 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008284:	2b00      	cmp	r3, #0
 8008286:	d103      	bne.n	8008290 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008288:	2180      	movs	r1, #128	; 0x80
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f001 fad4 	bl	8009838 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008296:	2b01      	cmp	r3, #1
 8008298:	d11d      	bne.n	80082d6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f7ff fe81 	bl	8007fa2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80082a8:	e015      	b.n	80082d6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00d      	beq.n	80082d2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d108      	bne.n	80082d2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	7afa      	ldrb	r2, [r7, #11]
 80082ca:	4611      	mov	r1, r2
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	4798      	blx	r3
 80082d0:	e001      	b.n	80082d6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082d2:	2302      	movs	r3, #2
 80082d4:	e000      	b.n	80082d8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3718      	adds	r7, #24
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082e8:	2340      	movs	r3, #64	; 0x40
 80082ea:	2200      	movs	r2, #0
 80082ec:	2100      	movs	r1, #0
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 fa5d 	bl	80097ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2240      	movs	r2, #64	; 0x40
 8008300:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008304:	2340      	movs	r3, #64	; 0x40
 8008306:	2200      	movs	r2, #0
 8008308:	2180      	movs	r1, #128	; 0x80
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f001 fa4f 	bl	80097ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2240      	movs	r2, #64	; 0x40
 800831a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008340:	2b00      	cmp	r3, #0
 8008342:	d009      	beq.n	8008358 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6852      	ldr	r2, [r2, #4]
 8008350:	b2d2      	uxtb	r2, r2
 8008352:	4611      	mov	r1, r2
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	4798      	blx	r3
  }

  return USBD_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	460b      	mov	r3, r1
 800836c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	78fa      	ldrb	r2, [r7, #3]
 8008372:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	bc80      	pop	{r7}
 800837e:	4770      	bx	lr

08008380 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2204      	movs	r2, #4
 8008398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bc80      	pop	{r7}
 80083a6:	4770      	bx	lr

080083a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	d105      	bne.n	80083c6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bc80      	pop	{r7}
 80083d0:	4770      	bx	lr

080083d2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b082      	sub	sp, #8
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d10b      	bne.n	80083fc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800841e:	2b40      	cmp	r3, #64	; 0x40
 8008420:	d005      	beq.n	800842e <USBD_StdDevReq+0x26>
 8008422:	2b40      	cmp	r3, #64	; 0x40
 8008424:	d84f      	bhi.n	80084c6 <USBD_StdDevReq+0xbe>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d009      	beq.n	800843e <USBD_StdDevReq+0x36>
 800842a:	2b20      	cmp	r3, #32
 800842c:	d14b      	bne.n	80084c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	4798      	blx	r3
      break;
 800843c:	e048      	b.n	80084d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	785b      	ldrb	r3, [r3, #1]
 8008442:	2b09      	cmp	r3, #9
 8008444:	d839      	bhi.n	80084ba <USBD_StdDevReq+0xb2>
 8008446:	a201      	add	r2, pc, #4	; (adr r2, 800844c <USBD_StdDevReq+0x44>)
 8008448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844c:	0800849d 	.word	0x0800849d
 8008450:	080084b1 	.word	0x080084b1
 8008454:	080084bb 	.word	0x080084bb
 8008458:	080084a7 	.word	0x080084a7
 800845c:	080084bb 	.word	0x080084bb
 8008460:	0800847f 	.word	0x0800847f
 8008464:	08008475 	.word	0x08008475
 8008468:	080084bb 	.word	0x080084bb
 800846c:	08008493 	.word	0x08008493
 8008470:	08008489 	.word	0x08008489
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f9dc 	bl	8008834 <USBD_GetDescriptor>
          break;
 800847c:	e022      	b.n	80084c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fb3f 	bl	8008b04 <USBD_SetAddress>
          break;
 8008486:	e01d      	b.n	80084c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fb7e 	bl	8008b8c <USBD_SetConfig>
          break;
 8008490:	e018      	b.n	80084c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fc07 	bl	8008ca8 <USBD_GetConfig>
          break;
 800849a:	e013      	b.n	80084c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fc37 	bl	8008d12 <USBD_GetStatus>
          break;
 80084a4:	e00e      	b.n	80084c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fc65 	bl	8008d78 <USBD_SetFeature>
          break;
 80084ae:	e009      	b.n	80084c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fc74 	bl	8008da0 <USBD_ClrFeature>
          break;
 80084b8:	e004      	b.n	80084c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fccc 	bl	8008e5a <USBD_CtlError>
          break;
 80084c2:	bf00      	nop
      }
      break;
 80084c4:	e004      	b.n	80084d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fcc6 	bl	8008e5a <USBD_CtlError>
      break;
 80084ce:	bf00      	nop
  }

  return ret;
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop

080084dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084f2:	2b40      	cmp	r3, #64	; 0x40
 80084f4:	d005      	beq.n	8008502 <USBD_StdItfReq+0x26>
 80084f6:	2b40      	cmp	r3, #64	; 0x40
 80084f8:	d82e      	bhi.n	8008558 <USBD_StdItfReq+0x7c>
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <USBD_StdItfReq+0x26>
 80084fe:	2b20      	cmp	r3, #32
 8008500:	d12a      	bne.n	8008558 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008508:	3b01      	subs	r3, #1
 800850a:	2b02      	cmp	r3, #2
 800850c:	d81d      	bhi.n	800854a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	889b      	ldrh	r3, [r3, #4]
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b01      	cmp	r3, #1
 8008516:	d813      	bhi.n	8008540 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	4798      	blx	r3
 8008526:	4603      	mov	r3, r0
 8008528:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	88db      	ldrh	r3, [r3, #6]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d110      	bne.n	8008554 <USBD_StdItfReq+0x78>
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10d      	bne.n	8008554 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fd56 	bl	8008fea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800853e:	e009      	b.n	8008554 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fc89 	bl	8008e5a <USBD_CtlError>
          break;
 8008548:	e004      	b.n	8008554 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fc84 	bl	8008e5a <USBD_CtlError>
          break;
 8008552:	e000      	b.n	8008556 <USBD_StdItfReq+0x7a>
          break;
 8008554:	bf00      	nop
      }
      break;
 8008556:	e004      	b.n	8008562 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fc7d 	bl	8008e5a <USBD_CtlError>
      break;
 8008560:	bf00      	nop
  }

  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	889b      	ldrh	r3, [r3, #4]
 800857e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008588:	2b40      	cmp	r3, #64	; 0x40
 800858a:	d007      	beq.n	800859c <USBD_StdEPReq+0x30>
 800858c:	2b40      	cmp	r3, #64	; 0x40
 800858e:	f200 8146 	bhi.w	800881e <USBD_StdEPReq+0x2b2>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00a      	beq.n	80085ac <USBD_StdEPReq+0x40>
 8008596:	2b20      	cmp	r3, #32
 8008598:	f040 8141 	bne.w	800881e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	4798      	blx	r3
      break;
 80085aa:	e13d      	b.n	8008828 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085b4:	2b20      	cmp	r3, #32
 80085b6:	d10a      	bne.n	80085ce <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	4798      	blx	r3
 80085c6:	4603      	mov	r3, r0
 80085c8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
 80085cc:	e12d      	b.n	800882a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	785b      	ldrb	r3, [r3, #1]
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d007      	beq.n	80085e6 <USBD_StdEPReq+0x7a>
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	f300 811b 	bgt.w	8008812 <USBD_StdEPReq+0x2a6>
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d072      	beq.n	80086c6 <USBD_StdEPReq+0x15a>
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d03a      	beq.n	800865a <USBD_StdEPReq+0xee>
 80085e4:	e115      	b.n	8008812 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d002      	beq.n	80085f6 <USBD_StdEPReq+0x8a>
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d015      	beq.n	8008620 <USBD_StdEPReq+0xb4>
 80085f4:	e02b      	b.n	800864e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00c      	beq.n	8008616 <USBD_StdEPReq+0xaa>
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
 80085fe:	2b80      	cmp	r3, #128	; 0x80
 8008600:	d009      	beq.n	8008616 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f001 f916 	bl	8009838 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800860c:	2180      	movs	r1, #128	; 0x80
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 f912 	bl	8009838 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008614:	e020      	b.n	8008658 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fc1e 	bl	8008e5a <USBD_CtlError>
              break;
 800861e:	e01b      	b.n	8008658 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	885b      	ldrh	r3, [r3, #2]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10e      	bne.n	8008646 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00b      	beq.n	8008646 <USBD_StdEPReq+0xda>
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	2b80      	cmp	r3, #128	; 0x80
 8008632:	d008      	beq.n	8008646 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	88db      	ldrh	r3, [r3, #6]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d104      	bne.n	8008646 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 f8f9 	bl	8009838 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fccf 	bl	8008fea <USBD_CtlSendStatus>

              break;
 800864c:	e004      	b.n	8008658 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fc02 	bl	8008e5a <USBD_CtlError>
              break;
 8008656:	bf00      	nop
          }
          break;
 8008658:	e0e0      	b.n	800881c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008660:	2b02      	cmp	r3, #2
 8008662:	d002      	beq.n	800866a <USBD_StdEPReq+0xfe>
 8008664:	2b03      	cmp	r3, #3
 8008666:	d015      	beq.n	8008694 <USBD_StdEPReq+0x128>
 8008668:	e026      	b.n	80086b8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800866a:	7bbb      	ldrb	r3, [r7, #14]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00c      	beq.n	800868a <USBD_StdEPReq+0x11e>
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	2b80      	cmp	r3, #128	; 0x80
 8008674:	d009      	beq.n	800868a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008676:	7bbb      	ldrb	r3, [r7, #14]
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f001 f8dc 	bl	8009838 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008680:	2180      	movs	r1, #128	; 0x80
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 f8d8 	bl	8009838 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008688:	e01c      	b.n	80086c4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fbe4 	bl	8008e5a <USBD_CtlError>
              break;
 8008692:	e017      	b.n	80086c4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	885b      	ldrh	r3, [r3, #2]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d112      	bne.n	80086c2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d004      	beq.n	80086b0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 f8e3 	bl	8009876 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fc9a 	bl	8008fea <USBD_CtlSendStatus>
              }
              break;
 80086b6:	e004      	b.n	80086c2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fbcd 	bl	8008e5a <USBD_CtlError>
              break;
 80086c0:	e000      	b.n	80086c4 <USBD_StdEPReq+0x158>
              break;
 80086c2:	bf00      	nop
          }
          break;
 80086c4:	e0aa      	b.n	800881c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d002      	beq.n	80086d6 <USBD_StdEPReq+0x16a>
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d032      	beq.n	800873a <USBD_StdEPReq+0x1ce>
 80086d4:	e097      	b.n	8008806 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d007      	beq.n	80086ec <USBD_StdEPReq+0x180>
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	2b80      	cmp	r3, #128	; 0x80
 80086e0:	d004      	beq.n	80086ec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fbb8 	bl	8008e5a <USBD_CtlError>
                break;
 80086ea:	e091      	b.n	8008810 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	da0b      	bge.n	800870c <USBD_StdEPReq+0x1a0>
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086fa:	4613      	mov	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	3310      	adds	r3, #16
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	4413      	add	r3, r2
 8008708:	3304      	adds	r3, #4
 800870a:	e00b      	b.n	8008724 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	4413      	add	r3, r2
 8008722:	3304      	adds	r3, #4
 8008724:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2202      	movs	r2, #2
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fbfb 	bl	8008f2e <USBD_CtlSendData>
              break;
 8008738:	e06a      	b.n	8008810 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800873a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800873e:	2b00      	cmp	r3, #0
 8008740:	da11      	bge.n	8008766 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	f003 020f 	and.w	r2, r3, #15
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	440b      	add	r3, r1
 8008754:	3318      	adds	r3, #24
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d117      	bne.n	800878c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fb7b 	bl	8008e5a <USBD_CtlError>
                  break;
 8008764:	e054      	b.n	8008810 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008766:	7bbb      	ldrb	r3, [r7, #14]
 8008768:	f003 020f 	and.w	r2, r3, #15
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	440b      	add	r3, r1
 8008778:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d104      	bne.n	800878c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fb68 	bl	8008e5a <USBD_CtlError>
                  break;
 800878a:	e041      	b.n	8008810 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800878c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008790:	2b00      	cmp	r3, #0
 8008792:	da0b      	bge.n	80087ac <USBD_StdEPReq+0x240>
 8008794:	7bbb      	ldrb	r3, [r7, #14]
 8008796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	3310      	adds	r3, #16
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	4413      	add	r3, r2
 80087a8:	3304      	adds	r3, #4
 80087aa:	e00b      	b.n	80087c4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087b2:	4613      	mov	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	4413      	add	r3, r2
 80087c2:	3304      	adds	r3, #4
 80087c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087c6:	7bbb      	ldrb	r3, [r7, #14]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <USBD_StdEPReq+0x266>
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
 80087ce:	2b80      	cmp	r3, #128	; 0x80
 80087d0:	d103      	bne.n	80087da <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	e00e      	b.n	80087f8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f001 f868 	bl	80098b4 <USBD_LL_IsStallEP>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2201      	movs	r2, #1
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	e002      	b.n	80087f8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2200      	movs	r2, #0
 80087f6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	2202      	movs	r2, #2
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fb95 	bl	8008f2e <USBD_CtlSendData>
              break;
 8008804:	e004      	b.n	8008810 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fb26 	bl	8008e5a <USBD_CtlError>
              break;
 800880e:	bf00      	nop
          }
          break;
 8008810:	e004      	b.n	800881c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fb20 	bl	8008e5a <USBD_CtlError>
          break;
 800881a:	bf00      	nop
      }
      break;
 800881c:	e004      	b.n	8008828 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fb1a 	bl	8008e5a <USBD_CtlError>
      break;
 8008826:	bf00      	nop
  }

  return ret;
 8008828:	7bfb      	ldrb	r3, [r7, #15]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800883e:	2300      	movs	r3, #0
 8008840:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008842:	2300      	movs	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	885b      	ldrh	r3, [r3, #2]
 800884e:	0a1b      	lsrs	r3, r3, #8
 8008850:	b29b      	uxth	r3, r3
 8008852:	3b01      	subs	r3, #1
 8008854:	2b06      	cmp	r3, #6
 8008856:	f200 8128 	bhi.w	8008aaa <USBD_GetDescriptor+0x276>
 800885a:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <USBD_GetDescriptor+0x2c>)
 800885c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008860:	0800887d 	.word	0x0800887d
 8008864:	08008895 	.word	0x08008895
 8008868:	080088d5 	.word	0x080088d5
 800886c:	08008aab 	.word	0x08008aab
 8008870:	08008aab 	.word	0x08008aab
 8008874:	08008a4b 	.word	0x08008a4b
 8008878:	08008a77 	.word	0x08008a77
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	7c12      	ldrb	r2, [r2, #16]
 8008888:	f107 0108 	add.w	r1, r7, #8
 800888c:	4610      	mov	r0, r2
 800888e:	4798      	blx	r3
 8008890:	60f8      	str	r0, [r7, #12]
      break;
 8008892:	e112      	b.n	8008aba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	7c1b      	ldrb	r3, [r3, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10d      	bne.n	80088b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a4:	f107 0208 	add.w	r2, r7, #8
 80088a8:	4610      	mov	r0, r2
 80088aa:	4798      	blx	r3
 80088ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3301      	adds	r3, #1
 80088b2:	2202      	movs	r2, #2
 80088b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088b6:	e100      	b.n	8008aba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	f107 0208 	add.w	r2, r7, #8
 80088c4:	4610      	mov	r0, r2
 80088c6:	4798      	blx	r3
 80088c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3301      	adds	r3, #1
 80088ce:	2202      	movs	r2, #2
 80088d0:	701a      	strb	r2, [r3, #0]
      break;
 80088d2:	e0f2      	b.n	8008aba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	885b      	ldrh	r3, [r3, #2]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b05      	cmp	r3, #5
 80088dc:	f200 80ac 	bhi.w	8008a38 <USBD_GetDescriptor+0x204>
 80088e0:	a201      	add	r2, pc, #4	; (adr r2, 80088e8 <USBD_GetDescriptor+0xb4>)
 80088e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e6:	bf00      	nop
 80088e8:	08008901 	.word	0x08008901
 80088ec:	08008935 	.word	0x08008935
 80088f0:	08008969 	.word	0x08008969
 80088f4:	0800899d 	.word	0x0800899d
 80088f8:	080089d1 	.word	0x080089d1
 80088fc:	08008a05 	.word	0x08008a05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00b      	beq.n	8008924 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	7c12      	ldrb	r2, [r2, #16]
 8008918:	f107 0108 	add.w	r1, r7, #8
 800891c:	4610      	mov	r0, r2
 800891e:	4798      	blx	r3
 8008920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008922:	e091      	b.n	8008a48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fa97 	bl	8008e5a <USBD_CtlError>
            err++;
 800892c:	7afb      	ldrb	r3, [r7, #11]
 800892e:	3301      	adds	r3, #1
 8008930:	72fb      	strb	r3, [r7, #11]
          break;
 8008932:	e089      	b.n	8008a48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00b      	beq.n	8008958 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	7c12      	ldrb	r2, [r2, #16]
 800894c:	f107 0108 	add.w	r1, r7, #8
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
 8008954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008956:	e077      	b.n	8008a48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fa7d 	bl	8008e5a <USBD_CtlError>
            err++;
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	3301      	adds	r3, #1
 8008964:	72fb      	strb	r3, [r7, #11]
          break;
 8008966:	e06f      	b.n	8008a48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00b      	beq.n	800898c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	7c12      	ldrb	r2, [r2, #16]
 8008980:	f107 0108 	add.w	r1, r7, #8
 8008984:	4610      	mov	r0, r2
 8008986:	4798      	blx	r3
 8008988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800898a:	e05d      	b.n	8008a48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa63 	bl	8008e5a <USBD_CtlError>
            err++;
 8008994:	7afb      	ldrb	r3, [r7, #11]
 8008996:	3301      	adds	r3, #1
 8008998:	72fb      	strb	r3, [r7, #11]
          break;
 800899a:	e055      	b.n	8008a48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00b      	beq.n	80089c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	7c12      	ldrb	r2, [r2, #16]
 80089b4:	f107 0108 	add.w	r1, r7, #8
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089be:	e043      	b.n	8008a48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa49 	bl	8008e5a <USBD_CtlError>
            err++;
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	3301      	adds	r3, #1
 80089cc:	72fb      	strb	r3, [r7, #11]
          break;
 80089ce:	e03b      	b.n	8008a48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7c12      	ldrb	r2, [r2, #16]
 80089e8:	f107 0108 	add.w	r1, r7, #8
 80089ec:	4610      	mov	r0, r2
 80089ee:	4798      	blx	r3
 80089f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089f2:	e029      	b.n	8008a48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fa2f 	bl	8008e5a <USBD_CtlError>
            err++;
 80089fc:	7afb      	ldrb	r3, [r7, #11]
 80089fe:	3301      	adds	r3, #1
 8008a00:	72fb      	strb	r3, [r7, #11]
          break;
 8008a02:	e021      	b.n	8008a48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	7c12      	ldrb	r2, [r2, #16]
 8008a1c:	f107 0108 	add.w	r1, r7, #8
 8008a20:	4610      	mov	r0, r2
 8008a22:	4798      	blx	r3
 8008a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a26:	e00f      	b.n	8008a48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa15 	bl	8008e5a <USBD_CtlError>
            err++;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3301      	adds	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]
          break;
 8008a36:	e007      	b.n	8008a48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fa0d 	bl	8008e5a <USBD_CtlError>
          err++;
 8008a40:	7afb      	ldrb	r3, [r7, #11]
 8008a42:	3301      	adds	r3, #1
 8008a44:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008a46:	e038      	b.n	8008aba <USBD_GetDescriptor+0x286>
 8008a48:	e037      	b.n	8008aba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	7c1b      	ldrb	r3, [r3, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d109      	bne.n	8008a66 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5a:	f107 0208 	add.w	r2, r7, #8
 8008a5e:	4610      	mov	r0, r2
 8008a60:	4798      	blx	r3
 8008a62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a64:	e029      	b.n	8008aba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f9f6 	bl	8008e5a <USBD_CtlError>
        err++;
 8008a6e:	7afb      	ldrb	r3, [r7, #11]
 8008a70:	3301      	adds	r3, #1
 8008a72:	72fb      	strb	r3, [r7, #11]
      break;
 8008a74:	e021      	b.n	8008aba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	7c1b      	ldrb	r3, [r3, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10d      	bne.n	8008a9a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a86:	f107 0208 	add.w	r2, r7, #8
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	4798      	blx	r3
 8008a8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3301      	adds	r3, #1
 8008a94:	2207      	movs	r2, #7
 8008a96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a98:	e00f      	b.n	8008aba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f9dc 	bl	8008e5a <USBD_CtlError>
        err++;
 8008aa2:	7afb      	ldrb	r3, [r7, #11]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	72fb      	strb	r3, [r7, #11]
      break;
 8008aa8:	e007      	b.n	8008aba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f9d4 	bl	8008e5a <USBD_CtlError>
      err++;
 8008ab2:	7afb      	ldrb	r3, [r7, #11]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ab8:	bf00      	nop
  }

  if (err != 0U)
 8008aba:	7afb      	ldrb	r3, [r7, #11]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d11c      	bne.n	8008afa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ac0:	893b      	ldrh	r3, [r7, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d011      	beq.n	8008aea <USBD_GetDescriptor+0x2b6>
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	88db      	ldrh	r3, [r3, #6]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00d      	beq.n	8008aea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	88da      	ldrh	r2, [r3, #6]
 8008ad2:	893b      	ldrh	r3, [r7, #8]
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	bf28      	it	cs
 8008ad8:	4613      	movcs	r3, r2
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ade:	893b      	ldrh	r3, [r7, #8]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	68f9      	ldr	r1, [r7, #12]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fa22 	bl	8008f2e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	88db      	ldrh	r3, [r3, #6]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d104      	bne.n	8008afc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fa79 	bl	8008fea <USBD_CtlSendStatus>
 8008af8:	e000      	b.n	8008afc <USBD_GetDescriptor+0x2c8>
    return;
 8008afa:	bf00      	nop
    }
  }
}
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop

08008b04 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	889b      	ldrh	r3, [r3, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d130      	bne.n	8008b78 <USBD_SetAddress+0x74>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	88db      	ldrh	r3, [r3, #6]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d12c      	bne.n	8008b78 <USBD_SetAddress+0x74>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	885b      	ldrh	r3, [r3, #2]
 8008b22:	2b7f      	cmp	r3, #127	; 0x7f
 8008b24:	d828      	bhi.n	8008b78 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	885b      	ldrh	r3, [r3, #2]
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d104      	bne.n	8008b46 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f98b 	bl	8008e5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b44:	e01d      	b.n	8008b82 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	7bfa      	ldrb	r2, [r7, #15]
 8008b4a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 feda 	bl	800990c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fa46 	bl	8008fea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d004      	beq.n	8008b6e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2202      	movs	r2, #2
 8008b68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6c:	e009      	b.n	8008b82 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b76:	e004      	b.n	8008b82 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f96d 	bl	8008e5a <USBD_CtlError>
  }
}
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
	...

08008b8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	885b      	ldrh	r3, [r3, #2]
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	4b41      	ldr	r3, [pc, #260]	; (8008ca4 <USBD_SetConfig+0x118>)
 8008b9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ba0:	4b40      	ldr	r3, [pc, #256]	; (8008ca4 <USBD_SetConfig+0x118>)
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d904      	bls.n	8008bb2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f955 	bl	8008e5a <USBD_CtlError>
 8008bb0:	e075      	b.n	8008c9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d002      	beq.n	8008bc2 <USBD_SetConfig+0x36>
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d023      	beq.n	8008c08 <USBD_SetConfig+0x7c>
 8008bc0:	e062      	b.n	8008c88 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008bc2:	4b38      	ldr	r3, [pc, #224]	; (8008ca4 <USBD_SetConfig+0x118>)
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d01a      	beq.n	8008c00 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008bca:	4b36      	ldr	r3, [pc, #216]	; (8008ca4 <USBD_SetConfig+0x118>)
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2203      	movs	r2, #3
 8008bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008bdc:	4b31      	ldr	r3, [pc, #196]	; (8008ca4 <USBD_SetConfig+0x118>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff f9e7 	bl	8007fb6 <USBD_SetClassConfig>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d104      	bne.n	8008bf8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f932 	bl	8008e5a <USBD_CtlError>
            return;
 8008bf6:	e052      	b.n	8008c9e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f9f6 	bl	8008fea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008bfe:	e04e      	b.n	8008c9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f9f2 	bl	8008fea <USBD_CtlSendStatus>
        break;
 8008c06:	e04a      	b.n	8008c9e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008c08:	4b26      	ldr	r3, [pc, #152]	; (8008ca4 <USBD_SetConfig+0x118>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d112      	bne.n	8008c36 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2202      	movs	r2, #2
 8008c14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008c18:	4b22      	ldr	r3, [pc, #136]	; (8008ca4 <USBD_SetConfig+0x118>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008c22:	4b20      	ldr	r3, [pc, #128]	; (8008ca4 <USBD_SetConfig+0x118>)
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	4619      	mov	r1, r3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff f9e3 	bl	8007ff4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f9db 	bl	8008fea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c34:	e033      	b.n	8008c9e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008c36:	4b1b      	ldr	r3, [pc, #108]	; (8008ca4 <USBD_SetConfig+0x118>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d01d      	beq.n	8008c80 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff f9d1 	bl	8007ff4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008c52:	4b14      	ldr	r3, [pc, #80]	; (8008ca4 <USBD_SetConfig+0x118>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c5c:	4b11      	ldr	r3, [pc, #68]	; (8008ca4 <USBD_SetConfig+0x118>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7ff f9a7 	bl	8007fb6 <USBD_SetClassConfig>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d104      	bne.n	8008c78 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f8f2 	bl	8008e5a <USBD_CtlError>
            return;
 8008c76:	e012      	b.n	8008c9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f9b6 	bl	8008fea <USBD_CtlSendStatus>
        break;
 8008c7e:	e00e      	b.n	8008c9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f9b2 	bl	8008fea <USBD_CtlSendStatus>
        break;
 8008c86:	e00a      	b.n	8008c9e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f8e5 	bl	8008e5a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008c90:	4b04      	ldr	r3, [pc, #16]	; (8008ca4 <USBD_SetConfig+0x118>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	4619      	mov	r1, r3
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7ff f9ac 	bl	8007ff4 <USBD_ClrClassConfig>
        break;
 8008c9c:	bf00      	nop
    }
  }
}
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	20000268 	.word	0x20000268

08008ca8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	88db      	ldrh	r3, [r3, #6]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d004      	beq.n	8008cc4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f8cc 	bl	8008e5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008cc2:	e022      	b.n	8008d0a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	dc02      	bgt.n	8008cd4 <USBD_GetConfig+0x2c>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	dc03      	bgt.n	8008cda <USBD_GetConfig+0x32>
 8008cd2:	e015      	b.n	8008d00 <USBD_GetConfig+0x58>
 8008cd4:	2b03      	cmp	r3, #3
 8008cd6:	d00b      	beq.n	8008cf0 <USBD_GetConfig+0x48>
 8008cd8:	e012      	b.n	8008d00 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f920 	bl	8008f2e <USBD_CtlSendData>
        break;
 8008cee:	e00c      	b.n	8008d0a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f918 	bl	8008f2e <USBD_CtlSendData>
        break;
 8008cfe:	e004      	b.n	8008d0a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f8a9 	bl	8008e5a <USBD_CtlError>
        break;
 8008d08:	bf00      	nop
}
 8008d0a:	bf00      	nop
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d22:	3b01      	subs	r3, #1
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d81e      	bhi.n	8008d66 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	88db      	ldrh	r3, [r3, #6]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d004      	beq.n	8008d3a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f891 	bl	8008e5a <USBD_CtlError>
        break;
 8008d38:	e01a      	b.n	8008d70 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d005      	beq.n	8008d56 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	f043 0202 	orr.w	r2, r3, #2
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	330c      	adds	r3, #12
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f8e5 	bl	8008f2e <USBD_CtlSendData>
      break;
 8008d64:	e004      	b.n	8008d70 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f876 	bl	8008e5a <USBD_CtlError>
      break;
 8008d6e:	bf00      	nop
  }
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	885b      	ldrh	r3, [r3, #2]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d106      	bne.n	8008d98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f929 	bl	8008fea <USBD_CtlSendStatus>
  }
}
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db0:	3b01      	subs	r3, #1
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d80b      	bhi.n	8008dce <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	885b      	ldrh	r3, [r3, #2]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d10c      	bne.n	8008dd8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f90f 	bl	8008fea <USBD_CtlSendStatus>
      }
      break;
 8008dcc:	e004      	b.n	8008dd8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f842 	bl	8008e5a <USBD_CtlError>
      break;
 8008dd6:	e000      	b.n	8008dda <USBD_ClrFeature+0x3a>
      break;
 8008dd8:	bf00      	nop
  }
}
 8008dda:	bf00      	nop
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781a      	ldrb	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	785a      	ldrb	r2, [r3, #1]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	3302      	adds	r3, #2
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	3303      	adds	r3, #3
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	021b      	lsls	r3, r3, #8
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	4413      	add	r3, r2
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	3305      	adds	r3, #5
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	021b      	lsls	r3, r3, #8
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	3306      	adds	r3, #6
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	3307      	adds	r3, #7
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	021b      	lsls	r3, r3, #8
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	4413      	add	r3, r2
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	80da      	strh	r2, [r3, #6]

}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bc80      	pop	{r7}
 8008e58:	4770      	bx	lr

08008e5a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008e64:	2180      	movs	r1, #128	; 0x80
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fce6 	bl	8009838 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fce2 	bl	8009838 <USBD_LL_StallEP>
}
 8008e74:	bf00      	nop
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d032      	beq.n	8008ef8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f000 f834 	bl	8008f00 <USBD_GetLen>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	005b      	lsls	r3, r3, #1
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	75fa      	strb	r2, [r7, #23]
 8008eac:	461a      	mov	r2, r3
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	7812      	ldrb	r2, [r2, #0]
 8008eb6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
 8008eba:	1c5a      	adds	r2, r3, #1
 8008ebc:	75fa      	strb	r2, [r7, #23]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	2203      	movs	r2, #3
 8008ec6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008ec8:	e012      	b.n	8008ef0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	60fa      	str	r2, [r7, #12]
 8008ed0:	7dfa      	ldrb	r2, [r7, #23]
 8008ed2:	1c51      	adds	r1, r2, #1
 8008ed4:	75f9      	strb	r1, [r7, #23]
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	440a      	add	r2, r1
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	75fa      	strb	r2, [r7, #23]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	4413      	add	r3, r2
 8008eec:	2200      	movs	r2, #0
 8008eee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e8      	bne.n	8008eca <USBD_GetString+0x4e>
    }
  }
}
 8008ef8:	bf00      	nop
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008f0c:	e005      	b.n	8008f1a <USBD_GetLen+0x1a>
  {
    len++;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	3301      	adds	r3, #1
 8008f12:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3301      	adds	r3, #1
 8008f18:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1f5      	bne.n	8008f0e <USBD_GetLen+0xe>
  }

  return len;
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bc80      	pop	{r7}
 8008f2c:	4770      	bx	lr

08008f2e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	60f8      	str	r0, [r7, #12]
 8008f36:	60b9      	str	r1, [r7, #8]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f44:	88fa      	ldrh	r2, [r7, #6]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008f4a:	88fa      	ldrh	r2, [r7, #6]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f50:	88fb      	ldrh	r3, [r7, #6]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	2100      	movs	r1, #0
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f000 fcf7 	bl	800994a <USBD_LL_Transmit>

  return USBD_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	4613      	mov	r3, r2
 8008f72:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f74:	88fb      	ldrh	r3, [r7, #6]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 fce5 	bl	800994a <USBD_LL_Transmit>

  return USBD_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	4613      	mov	r3, r2
 8008f96:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2203      	movs	r2, #3
 8008f9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008fa0:	88fa      	ldrh	r2, [r7, #6]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008fa8:	88fa      	ldrh	r2, [r7, #6]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fb0:	88fb      	ldrh	r3, [r7, #6]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f000 fcea 	bl	8009990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fd4:	88fb      	ldrh	r3, [r7, #6]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	2100      	movs	r1, #0
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f000 fcd8 	bl	8009990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2204      	movs	r2, #4
 8008ff6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2100      	movs	r1, #0
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fca2 	bl	800994a <USBD_LL_Transmit>

  return USBD_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2205      	movs	r2, #5
 800901c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009020:	2300      	movs	r3, #0
 8009022:	2200      	movs	r2, #0
 8009024:	2100      	movs	r1, #0
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fcb2 	bl	8009990 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800903c:	2200      	movs	r2, #0
 800903e:	4912      	ldr	r1, [pc, #72]	; (8009088 <MX_USB_DEVICE_Init+0x50>)
 8009040:	4812      	ldr	r0, [pc, #72]	; (800908c <MX_USB_DEVICE_Init+0x54>)
 8009042:	f7fe ff5e 	bl	8007f02 <USBD_Init>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800904c:	f7f7 fe9e 	bl	8000d8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009050:	490f      	ldr	r1, [pc, #60]	; (8009090 <MX_USB_DEVICE_Init+0x58>)
 8009052:	480e      	ldr	r0, [pc, #56]	; (800908c <MX_USB_DEVICE_Init+0x54>)
 8009054:	f7fe ff80 	bl	8007f58 <USBD_RegisterClass>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800905e:	f7f7 fe95 	bl	8000d8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009062:	490c      	ldr	r1, [pc, #48]	; (8009094 <MX_USB_DEVICE_Init+0x5c>)
 8009064:	4809      	ldr	r0, [pc, #36]	; (800908c <MX_USB_DEVICE_Init+0x54>)
 8009066:	f7fe feb1 	bl	8007dcc <USBD_CDC_RegisterInterface>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009070:	f7f7 fe8c 	bl	8000d8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009074:	4805      	ldr	r0, [pc, #20]	; (800908c <MX_USB_DEVICE_Init+0x54>)
 8009076:	f7fe ff88 	bl	8007f8a <USBD_Start>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009080:	f7f7 fe84 	bl	8000d8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009084:	bf00      	nop
 8009086:	bd80      	pop	{r7, pc}
 8009088:	20000170 	.word	0x20000170
 800908c:	200009d8 	.word	0x200009d8
 8009090:	2000005c 	.word	0x2000005c
 8009094:	20000160 	.word	0x20000160

08009098 <USB_Reset>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

void USB_Reset(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800909e:	4b2b      	ldr	r3, [pc, #172]	; (800914c <USB_Reset+0xb4>)
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	4a2a      	ldr	r2, [pc, #168]	; (800914c <USB_Reset+0xb4>)
 80090a4:	f043 0320 	orr.w	r3, r3, #32
 80090a8:	6193      	str	r3, [r2, #24]
 80090aa:	4b28      	ldr	r3, [pc, #160]	; (800914c <USB_Reset+0xb4>)
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	f003 0320 	and.w	r3, r3, #32
 80090b2:	60bb      	str	r3, [r7, #8]
 80090b4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090b6:	4b25      	ldr	r3, [pc, #148]	; (800914c <USB_Reset+0xb4>)
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	4a24      	ldr	r2, [pc, #144]	; (800914c <USB_Reset+0xb4>)
 80090bc:	f043 0304 	orr.w	r3, r3, #4
 80090c0:	6193      	str	r3, [r2, #24]
 80090c2:	4b22      	ldr	r3, [pc, #136]	; (800914c <USB_Reset+0xb4>)
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	f003 0304 	and.w	r3, r3, #4
 80090ca:	607b      	str	r3, [r7, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]

    /* Reset USB DP (D+) */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090ce:	f107 030c 	add.w	r3, r7, #12
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	605a      	str	r2, [r3, #4]
 80090d8:	609a      	str	r2, [r3, #8]
 80090da:	60da      	str	r2, [r3, #12]

    /* Инициализируем пин DP как выход */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80090dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090e2:	2301      	movs	r3, #1
 80090e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090e6:	2302      	movs	r3, #2
 80090e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090ea:	f107 030c 	add.w	r3, r7, #12
 80090ee:	4619      	mov	r1, r3
 80090f0:	4817      	ldr	r0, [pc, #92]	; (8009150 <USB_Reset+0xb8>)
 80090f2:	f7f9 fb23 	bl	800273c <HAL_GPIO_Init>
    /* Прижимаем DP к "земле" */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80090f6:	2200      	movs	r2, #0
 80090f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80090fc:	4814      	ldr	r0, [pc, #80]	; (8009150 <USB_Reset+0xb8>)
 80090fe:	f7f9 fcb8 	bl	8002a72 <HAL_GPIO_WritePin>
    /* Ждем немного */
    for (uint16_t i = 0; i < 10000; i++)
 8009102:	2300      	movs	r3, #0
 8009104:	83fb      	strh	r3, [r7, #30]
 8009106:	e002      	b.n	800910e <USB_Reset+0x76>
 8009108:	8bfb      	ldrh	r3, [r7, #30]
 800910a:	3301      	adds	r3, #1
 800910c:	83fb      	strh	r3, [r7, #30]
 800910e:	8bfb      	ldrh	r3, [r7, #30]
 8009110:	f242 720f 	movw	r2, #9999	; 0x270f
 8009114:	4293      	cmp	r3, r2
 8009116:	d9f7      	bls.n	8009108 <USB_Reset+0x70>
        ;

    /* Переинициализируем пин для работы с USB */
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009118:	2300      	movs	r3, #0
 800911a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800911c:	2300      	movs	r3, #0
 800911e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009120:	f107 030c 	add.w	r3, r7, #12
 8009124:	4619      	mov	r1, r3
 8009126:	480a      	ldr	r0, [pc, #40]	; (8009150 <USB_Reset+0xb8>)
 8009128:	f7f9 fb08 	bl	800273c <HAL_GPIO_Init>
    /* Ждем немного */
    for (uint16_t i = 0; i < 10000; i++)
 800912c:	2300      	movs	r3, #0
 800912e:	83bb      	strh	r3, [r7, #28]
 8009130:	e002      	b.n	8009138 <USB_Reset+0xa0>
 8009132:	8bbb      	ldrh	r3, [r7, #28]
 8009134:	3301      	adds	r3, #1
 8009136:	83bb      	strh	r3, [r7, #28]
 8009138:	8bbb      	ldrh	r3, [r7, #28]
 800913a:	f242 720f 	movw	r2, #9999	; 0x270f
 800913e:	4293      	cmp	r3, r2
 8009140:	d9f7      	bls.n	8009132 <USB_Reset+0x9a>
        ;
}
 8009142:	bf00      	nop
 8009144:	bf00      	nop
 8009146:	3720      	adds	r7, #32
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	40021000 	.word	0x40021000
 8009150:	40010800 	.word	0x40010800

08009154 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009158:	2200      	movs	r2, #0
 800915a:	4905      	ldr	r1, [pc, #20]	; (8009170 <CDC_Init_FS+0x1c>)
 800915c:	4805      	ldr	r0, [pc, #20]	; (8009174 <CDC_Init_FS+0x20>)
 800915e:	f7fe fe4b 	bl	8007df8 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009162:	4905      	ldr	r1, [pc, #20]	; (8009178 <CDC_Init_FS+0x24>)
 8009164:	4803      	ldr	r0, [pc, #12]	; (8009174 <CDC_Init_FS+0x20>)
 8009166:	f7fe fe60 	bl	8007e2a <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800916a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800916c:	4618      	mov	r0, r3
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20000e9c 	.word	0x20000e9c
 8009174:	200009d8 	.word	0x200009d8
 8009178:	20000c9c 	.word	0x20000c9c

0800917c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8009180:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009182:	4618      	mov	r0, r3
 8009184:	46bd      	mov	sp, r7
 8009186:	bc80      	pop	{r7}
 8009188:	4770      	bx	lr
	...

0800918c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	6039      	str	r1, [r7, #0]
 8009196:	71fb      	strb	r3, [r7, #7]
 8009198:	4613      	mov	r3, r2
 800919a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	2b23      	cmp	r3, #35	; 0x23
 80091a0:	d84a      	bhi.n	8009238 <CDC_Control_FS+0xac>
 80091a2:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <CDC_Control_FS+0x1c>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	08009239 	.word	0x08009239
 80091ac:	08009239 	.word	0x08009239
 80091b0:	08009239 	.word	0x08009239
 80091b4:	08009239 	.word	0x08009239
 80091b8:	08009239 	.word	0x08009239
 80091bc:	08009239 	.word	0x08009239
 80091c0:	08009239 	.word	0x08009239
 80091c4:	08009239 	.word	0x08009239
 80091c8:	08009239 	.word	0x08009239
 80091cc:	08009239 	.word	0x08009239
 80091d0:	08009239 	.word	0x08009239
 80091d4:	08009239 	.word	0x08009239
 80091d8:	08009239 	.word	0x08009239
 80091dc:	08009239 	.word	0x08009239
 80091e0:	08009239 	.word	0x08009239
 80091e4:	08009239 	.word	0x08009239
 80091e8:	08009239 	.word	0x08009239
 80091ec:	08009239 	.word	0x08009239
 80091f0:	08009239 	.word	0x08009239
 80091f4:	08009239 	.word	0x08009239
 80091f8:	08009239 	.word	0x08009239
 80091fc:	08009239 	.word	0x08009239
 8009200:	08009239 	.word	0x08009239
 8009204:	08009239 	.word	0x08009239
 8009208:	08009239 	.word	0x08009239
 800920c:	08009239 	.word	0x08009239
 8009210:	08009239 	.word	0x08009239
 8009214:	08009239 	.word	0x08009239
 8009218:	08009239 	.word	0x08009239
 800921c:	08009239 	.word	0x08009239
 8009220:	08009239 	.word	0x08009239
 8009224:	08009239 	.word	0x08009239
 8009228:	08009239 	.word	0x08009239
 800922c:	08009239 	.word	0x08009239
 8009230:	08009239 	.word	0x08009239
 8009234:	08009239 	.word	0x08009239
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8009238:	bf00      	nop
	}

	return (USBD_OK);
 800923a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	bc80      	pop	{r7}
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop

08009248 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	481c      	ldr	r0, [pc, #112]	; (80092c8 <CDC_Receive_FS+0x80>)
 8009256:	f7fe fde8 	bl	8007e2a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800925a:	481b      	ldr	r0, [pc, #108]	; (80092c8 <CDC_Receive_FS+0x80>)
 800925c:	f7fe fe27 	bl	8007eae <USBD_CDC_ReceivePacket>
//	}
	/*-------*/

	/* Запись данных в общую глобальную переменную для
	 * хранения пакета данных - usb_rx_data */
	if ( usb_rx_data.is_handled  == false ) {
 8009260:	4b1a      	ldr	r3, [pc, #104]	; (80092cc <CDC_Receive_FS+0x84>)
 8009262:	785b      	ldrb	r3, [r3, #1]
 8009264:	f083 0301 	eor.w	r3, r3, #1
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d015      	beq.n	800929a <CDC_Receive_FS+0x52>
	    /* Если данные пакета ещё не обработаны, то
	     * ошибка - прием нового пакета пока не возможен.
	     * Следовательно, отправляем пакет из 5-ти нулей,
	     * как показатель об ошибке. */
	    uint8_t b[] = {0,0,0,0,0};
 800926e:	4a18      	ldr	r2, [pc, #96]	; (80092d0 <CDC_Receive_FS+0x88>)
 8009270:	f107 0308 	add.w	r3, r7, #8
 8009274:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009278:	6018      	str	r0, [r3, #0]
 800927a:	3304      	adds	r3, #4
 800927c:	7019      	strb	r1, [r3, #0]
	    CDC_Transmit_FS(b, strlen( (char*)b) );
 800927e:	f107 0308 	add.w	r3, r7, #8
 8009282:	4618      	mov	r0, r3
 8009284:	f7f6 ff62 	bl	800014c <strlen>
 8009288:	4603      	mov	r3, r0
 800928a:	b29a      	uxth	r2, r3
 800928c:	f107 0308 	add.w	r3, r7, #8
 8009290:	4611      	mov	r1, r2
 8009292:	4618      	mov	r0, r3
 8009294:	f000 f820 	bl	80092d8 <CDC_Transmit_FS>
 8009298:	e011      	b.n	80092be <CDC_Receive_FS+0x76>
	}
	else {
	    memcpy( usb_rx_data.buff, Buf, *Len );
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	480c      	ldr	r0, [pc, #48]	; (80092d4 <CDC_Receive_FS+0x8c>)
 80092a4:	f000 fc20 	bl	8009ae8 <memcpy>
	    usb_rx_data.len         = *Len;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	4b07      	ldr	r3, [pc, #28]	; (80092cc <CDC_Receive_FS+0x84>)
 80092b0:	709a      	strb	r2, [r3, #2]
	    usb_rx_data.is_handled  = false;
 80092b2:	4b06      	ldr	r3, [pc, #24]	; (80092cc <CDC_Receive_FS+0x84>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	705a      	strb	r2, [r3, #1]
	    usb_rx_data.is_received = true;
 80092b8:	4b04      	ldr	r3, [pc, #16]	; (80092cc <CDC_Receive_FS+0x84>)
 80092ba:	2201      	movs	r2, #1
 80092bc:	701a      	strb	r2, [r3, #0]
	}

	return (USBD_OK);
 80092be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	200009d8 	.word	0x200009d8
 80092cc:	20000000 	.word	0x20000000
 80092d0:	0800aa38 	.word	0x0800aa38
 80092d4:	20000003 	.word	0x20000003

080092d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 80092e8:	4b0d      	ldr	r3, [pc, #52]	; (8009320 <CDC_Transmit_FS+0x48>)
 80092ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ee:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e00b      	b.n	8009316 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80092fe:	887b      	ldrh	r3, [r7, #2]
 8009300:	461a      	mov	r2, r3
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	4806      	ldr	r0, [pc, #24]	; (8009320 <CDC_Transmit_FS+0x48>)
 8009306:	f7fe fd77 	bl	8007df8 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800930a:	4805      	ldr	r0, [pc, #20]	; (8009320 <CDC_Transmit_FS+0x48>)
 800930c:	f7fe fda0 	bl	8007e50 <USBD_CDC_TransmitPacket>
 8009310:	4603      	mov	r3, r0
 8009312:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009314:	7bfb      	ldrb	r3, [r7, #15]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	200009d8 	.word	0x200009d8

08009324 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	4603      	mov	r3, r0
 800932c:	6039      	str	r1, [r7, #0]
 800932e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	2212      	movs	r2, #18
 8009334:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009336:	4b03      	ldr	r3, [pc, #12]	; (8009344 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009338:	4618      	mov	r0, r3
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	bc80      	pop	{r7}
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	2000018c 	.word	0x2000018c

08009348 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	6039      	str	r1, [r7, #0]
 8009352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2204      	movs	r2, #4
 8009358:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800935a:	4b03      	ldr	r3, [pc, #12]	; (8009368 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800935c:	4618      	mov	r0, r3
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	bc80      	pop	{r7}
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	200001a0 	.word	0x200001a0

0800936c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	6039      	str	r1, [r7, #0]
 8009376:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009378:	79fb      	ldrb	r3, [r7, #7]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d105      	bne.n	800938a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	4907      	ldr	r1, [pc, #28]	; (80093a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009382:	4808      	ldr	r0, [pc, #32]	; (80093a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009384:	f7ff fd7a 	bl	8008e7c <USBD_GetString>
 8009388:	e004      	b.n	8009394 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	4904      	ldr	r1, [pc, #16]	; (80093a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800938e:	4805      	ldr	r0, [pc, #20]	; (80093a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009390:	f7ff fd74 	bl	8008e7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009394:	4b02      	ldr	r3, [pc, #8]	; (80093a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	2000109c 	.word	0x2000109c
 80093a4:	0800aa40 	.word	0x0800aa40

080093a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	4603      	mov	r3, r0
 80093b0:	6039      	str	r1, [r7, #0]
 80093b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	4904      	ldr	r1, [pc, #16]	; (80093c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80093b8:	4804      	ldr	r0, [pc, #16]	; (80093cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80093ba:	f7ff fd5f 	bl	8008e7c <USBD_GetString>
  return USBD_StrDesc;
 80093be:	4b02      	ldr	r3, [pc, #8]	; (80093c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	2000109c 	.word	0x2000109c
 80093cc:	0800aa58 	.word	0x0800aa58

080093d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	4603      	mov	r3, r0
 80093d8:	6039      	str	r1, [r7, #0]
 80093da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	221a      	movs	r2, #26
 80093e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093e2:	f000 f843 	bl	800946c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80093e6:	4b02      	ldr	r3, [pc, #8]	; (80093f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	200001a4 	.word	0x200001a4

080093f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	4603      	mov	r3, r0
 80093fc:	6039      	str	r1, [r7, #0]
 80093fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009400:	79fb      	ldrb	r3, [r7, #7]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d105      	bne.n	8009412 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	4907      	ldr	r1, [pc, #28]	; (8009428 <USBD_FS_ConfigStrDescriptor+0x34>)
 800940a:	4808      	ldr	r0, [pc, #32]	; (800942c <USBD_FS_ConfigStrDescriptor+0x38>)
 800940c:	f7ff fd36 	bl	8008e7c <USBD_GetString>
 8009410:	e004      	b.n	800941c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	4904      	ldr	r1, [pc, #16]	; (8009428 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009416:	4805      	ldr	r0, [pc, #20]	; (800942c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009418:	f7ff fd30 	bl	8008e7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800941c:	4b02      	ldr	r3, [pc, #8]	; (8009428 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	2000109c 	.word	0x2000109c
 800942c:	0800aa6c 	.word	0x0800aa6c

08009430 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	4603      	mov	r3, r0
 8009438:	6039      	str	r1, [r7, #0]
 800943a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800943c:	79fb      	ldrb	r3, [r7, #7]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d105      	bne.n	800944e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	4907      	ldr	r1, [pc, #28]	; (8009464 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009446:	4808      	ldr	r0, [pc, #32]	; (8009468 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009448:	f7ff fd18 	bl	8008e7c <USBD_GetString>
 800944c:	e004      	b.n	8009458 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	4904      	ldr	r1, [pc, #16]	; (8009464 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009452:	4805      	ldr	r0, [pc, #20]	; (8009468 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009454:	f7ff fd12 	bl	8008e7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009458:	4b02      	ldr	r3, [pc, #8]	; (8009464 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	2000109c 	.word	0x2000109c
 8009468:	0800aa78 	.word	0x0800aa78

0800946c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009472:	4b0f      	ldr	r3, [pc, #60]	; (80094b0 <Get_SerialNum+0x44>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009478:	4b0e      	ldr	r3, [pc, #56]	; (80094b4 <Get_SerialNum+0x48>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800947e:	4b0e      	ldr	r3, [pc, #56]	; (80094b8 <Get_SerialNum+0x4c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4413      	add	r3, r2
 800948a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d009      	beq.n	80094a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009492:	2208      	movs	r2, #8
 8009494:	4909      	ldr	r1, [pc, #36]	; (80094bc <Get_SerialNum+0x50>)
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f000 f814 	bl	80094c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800949c:	2204      	movs	r2, #4
 800949e:	4908      	ldr	r1, [pc, #32]	; (80094c0 <Get_SerialNum+0x54>)
 80094a0:	68b8      	ldr	r0, [r7, #8]
 80094a2:	f000 f80f 	bl	80094c4 <IntToUnicode>
  }
}
 80094a6:	bf00      	nop
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	1ffff7e8 	.word	0x1ffff7e8
 80094b4:	1ffff7ec 	.word	0x1ffff7ec
 80094b8:	1ffff7f0 	.word	0x1ffff7f0
 80094bc:	200001a6 	.word	0x200001a6
 80094c0:	200001b6 	.word	0x200001b6

080094c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	4613      	mov	r3, r2
 80094d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80094d6:	2300      	movs	r3, #0
 80094d8:	75fb      	strb	r3, [r7, #23]
 80094da:	e027      	b.n	800952c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	0f1b      	lsrs	r3, r3, #28
 80094e0:	2b09      	cmp	r3, #9
 80094e2:	d80b      	bhi.n	80094fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	0f1b      	lsrs	r3, r3, #28
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	4619      	mov	r1, r3
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	440b      	add	r3, r1
 80094f4:	3230      	adds	r2, #48	; 0x30
 80094f6:	b2d2      	uxtb	r2, r2
 80094f8:	701a      	strb	r2, [r3, #0]
 80094fa:	e00a      	b.n	8009512 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	0f1b      	lsrs	r3, r3, #28
 8009500:	b2da      	uxtb	r2, r3
 8009502:	7dfb      	ldrb	r3, [r7, #23]
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	4619      	mov	r1, r3
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	440b      	add	r3, r1
 800950c:	3237      	adds	r2, #55	; 0x37
 800950e:	b2d2      	uxtb	r2, r2
 8009510:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	011b      	lsls	r3, r3, #4
 8009516:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	005b      	lsls	r3, r3, #1
 800951c:	3301      	adds	r3, #1
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	4413      	add	r3, r2
 8009522:	2200      	movs	r2, #0
 8009524:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009526:	7dfb      	ldrb	r3, [r7, #23]
 8009528:	3301      	adds	r3, #1
 800952a:	75fb      	strb	r3, [r7, #23]
 800952c:	7dfa      	ldrb	r2, [r7, #23]
 800952e:	79fb      	ldrb	r3, [r7, #7]
 8009530:	429a      	cmp	r2, r3
 8009532:	d3d3      	bcc.n	80094dc <IntToUnicode+0x18>
  }
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop
 8009538:	371c      	adds	r7, #28
 800953a:	46bd      	mov	sp, r7
 800953c:	bc80      	pop	{r7}
 800953e:	4770      	bx	lr

08009540 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a0d      	ldr	r2, [pc, #52]	; (8009584 <HAL_PCD_MspInit+0x44>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d113      	bne.n	800957a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009552:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <HAL_PCD_MspInit+0x48>)
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	4a0c      	ldr	r2, [pc, #48]	; (8009588 <HAL_PCD_MspInit+0x48>)
 8009558:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800955c:	61d3      	str	r3, [r2, #28]
 800955e:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <HAL_PCD_MspInit+0x48>)
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800956a:	2200      	movs	r2, #0
 800956c:	2100      	movs	r1, #0
 800956e:	2014      	movs	r0, #20
 8009570:	f7f8 fe5f 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009574:	2014      	movs	r0, #20
 8009576:	f7f8 fe78 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800957a:	bf00      	nop
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	40005c00 	.word	0x40005c00
 8009588:	40021000 	.word	0x40021000

0800958c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80095a0:	4619      	mov	r1, r3
 80095a2:	4610      	mov	r0, r2
 80095a4:	f7fe fd39 	bl	800801a <USBD_LL_SetupStage>
}
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80095c2:	78fa      	ldrb	r2, [r7, #3]
 80095c4:	6879      	ldr	r1, [r7, #4]
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	00db      	lsls	r3, r3, #3
 80095ce:	440b      	add	r3, r1
 80095d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	78fb      	ldrb	r3, [r7, #3]
 80095d8:	4619      	mov	r1, r3
 80095da:	f7fe fd6b 	bl	80080b4 <USBD_LL_DataOutStage>
}
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b082      	sub	sp, #8
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
 80095ee:	460b      	mov	r3, r1
 80095f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80095f8:	78fa      	ldrb	r2, [r7, #3]
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	440b      	add	r3, r1
 8009606:	333c      	adds	r3, #60	; 0x3c
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	78fb      	ldrb	r3, [r7, #3]
 800960c:	4619      	mov	r1, r3
 800960e:	f7fe fdc2 	bl	8008196 <USBD_LL_DataInStage>
}
 8009612:	bf00      	nop
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b082      	sub	sp, #8
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009628:	4618      	mov	r0, r3
 800962a:	f7fe fed2 	bl	80083d2 <USBD_LL_SOF>
}
 800962e:	bf00      	nop
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b084      	sub	sp, #16
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800963e:	2301      	movs	r3, #1
 8009640:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	2b02      	cmp	r3, #2
 8009648:	d001      	beq.n	800964e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800964a:	f7f7 fb9f 	bl	8000d8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009654:	7bfa      	ldrb	r2, [r7, #15]
 8009656:	4611      	mov	r1, r2
 8009658:	4618      	mov	r0, r3
 800965a:	f7fe fe82 	bl	8008362 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009664:	4618      	mov	r0, r3
 8009666:	f7fe fe3b 	bl	80082e0 <USBD_LL_Reset>
}
 800966a:	bf00      	nop
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
	...

08009674 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fe7c 	bl	8008380 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d005      	beq.n	800969c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009690:	4b04      	ldr	r3, [pc, #16]	; (80096a4 <HAL_PCD_SuspendCallback+0x30>)
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	4a03      	ldr	r2, [pc, #12]	; (80096a4 <HAL_PCD_SuspendCallback+0x30>)
 8009696:	f043 0306 	orr.w	r3, r3, #6
 800969a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800969c:	bf00      	nop
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	e000ed00 	.word	0xe000ed00

080096a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fe fe76 	bl	80083a8 <USBD_LL_Resume>
}
 80096bc:	bf00      	nop
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80096cc:	4a28      	ldr	r2, [pc, #160]	; (8009770 <USBD_LL_Init+0xac>)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a26      	ldr	r2, [pc, #152]	; (8009770 <USBD_LL_Init+0xac>)
 80096d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80096dc:	4b24      	ldr	r3, [pc, #144]	; (8009770 <USBD_LL_Init+0xac>)
 80096de:	4a25      	ldr	r2, [pc, #148]	; (8009774 <USBD_LL_Init+0xb0>)
 80096e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096e2:	4b23      	ldr	r3, [pc, #140]	; (8009770 <USBD_LL_Init+0xac>)
 80096e4:	2208      	movs	r2, #8
 80096e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096e8:	4b21      	ldr	r3, [pc, #132]	; (8009770 <USBD_LL_Init+0xac>)
 80096ea:	2202      	movs	r2, #2
 80096ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096ee:	4b20      	ldr	r3, [pc, #128]	; (8009770 <USBD_LL_Init+0xac>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80096f4:	4b1e      	ldr	r3, [pc, #120]	; (8009770 <USBD_LL_Init+0xac>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096fa:	4b1d      	ldr	r3, [pc, #116]	; (8009770 <USBD_LL_Init+0xac>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009700:	481b      	ldr	r0, [pc, #108]	; (8009770 <USBD_LL_Init+0xac>)
 8009702:	f7f9 f9e7 	bl	8002ad4 <HAL_PCD_Init>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800970c:	f7f7 fb3e 	bl	8000d8c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009716:	2318      	movs	r3, #24
 8009718:	2200      	movs	r2, #0
 800971a:	2100      	movs	r1, #0
 800971c:	f7fa fd29 	bl	8004172 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009726:	2358      	movs	r3, #88	; 0x58
 8009728:	2200      	movs	r2, #0
 800972a:	2180      	movs	r1, #128	; 0x80
 800972c:	f7fa fd21 	bl	8004172 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009736:	23c0      	movs	r3, #192	; 0xc0
 8009738:	2200      	movs	r2, #0
 800973a:	2181      	movs	r1, #129	; 0x81
 800973c:	f7fa fd19 	bl	8004172 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009746:	f44f 7388 	mov.w	r3, #272	; 0x110
 800974a:	2200      	movs	r2, #0
 800974c:	2101      	movs	r1, #1
 800974e:	f7fa fd10 	bl	8004172 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800975c:	2200      	movs	r2, #0
 800975e:	2182      	movs	r1, #130	; 0x82
 8009760:	f7fa fd07 	bl	8004172 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	2000129c 	.word	0x2000129c
 8009774:	40005c00 	.word	0x40005c00

08009778 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800978e:	4618      	mov	r0, r3
 8009790:	f7f9 faab 	bl	8002cea <HAL_PCD_Start>
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	4618      	mov	r0, r3
 800979c:	f000 f94e 	bl	8009a3c <USBD_Get_USB_Status>
 80097a0:	4603      	mov	r3, r0
 80097a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	4608      	mov	r0, r1
 80097b8:	4611      	mov	r1, r2
 80097ba:	461a      	mov	r2, r3
 80097bc:	4603      	mov	r3, r0
 80097be:	70fb      	strb	r3, [r7, #3]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70bb      	strb	r3, [r7, #2]
 80097c4:	4613      	mov	r3, r2
 80097c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097d6:	78bb      	ldrb	r3, [r7, #2]
 80097d8:	883a      	ldrh	r2, [r7, #0]
 80097da:	78f9      	ldrb	r1, [r7, #3]
 80097dc:	f7f9 fc25 	bl	800302a <HAL_PCD_EP_Open>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 f928 	bl	8009a3c <USBD_Get_USB_Status>
 80097ec:	4603      	mov	r3, r0
 80097ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b084      	sub	sp, #16
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009814:	78fa      	ldrb	r2, [r7, #3]
 8009816:	4611      	mov	r1, r2
 8009818:	4618      	mov	r0, r3
 800981a:	f7f9 fc6c 	bl	80030f6 <HAL_PCD_EP_Close>
 800981e:	4603      	mov	r3, r0
 8009820:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	4618      	mov	r0, r3
 8009826:	f000 f909 	bl	8009a3c <USBD_Get_USB_Status>
 800982a:	4603      	mov	r3, r0
 800982c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800982e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009852:	78fa      	ldrb	r2, [r7, #3]
 8009854:	4611      	mov	r1, r2
 8009856:	4618      	mov	r0, r3
 8009858:	f7f9 fd2c 	bl	80032b4 <HAL_PCD_EP_SetStall>
 800985c:	4603      	mov	r3, r0
 800985e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	4618      	mov	r0, r3
 8009864:	f000 f8ea 	bl	8009a3c <USBD_Get_USB_Status>
 8009868:	4603      	mov	r3, r0
 800986a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800986c:	7bbb      	ldrb	r3, [r7, #14]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b084      	sub	sp, #16
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009890:	78fa      	ldrb	r2, [r7, #3]
 8009892:	4611      	mov	r1, r2
 8009894:	4618      	mov	r0, r3
 8009896:	f7f9 fd6d 	bl	8003374 <HAL_PCD_EP_ClrStall>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 f8cb 	bl	8009a3c <USBD_Get_USB_Status>
 80098a6:	4603      	mov	r3, r0
 80098a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	da0c      	bge.n	80098ea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d6:	68f9      	ldr	r1, [r7, #12]
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	4613      	mov	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	00db      	lsls	r3, r3, #3
 80098e2:	440b      	add	r3, r1
 80098e4:	3302      	adds	r3, #2
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	e00b      	b.n	8009902 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098ea:	78fb      	ldrb	r3, [r7, #3]
 80098ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098f0:	68f9      	ldr	r1, [r7, #12]
 80098f2:	4613      	mov	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	00db      	lsls	r3, r3, #3
 80098fa:	440b      	add	r3, r1
 80098fc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009900:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	bc80      	pop	{r7}
 800990a:	4770      	bx	lr

0800990c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009926:	78fa      	ldrb	r2, [r7, #3]
 8009928:	4611      	mov	r1, r2
 800992a:	4618      	mov	r0, r3
 800992c:	f7f9 fb58 	bl	8002fe0 <HAL_PCD_SetAddress>
 8009930:	4603      	mov	r3, r0
 8009932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	4618      	mov	r0, r3
 8009938:	f000 f880 	bl	8009a3c <USBD_Get_USB_Status>
 800993c:	4603      	mov	r3, r0
 800993e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009940:	7bbb      	ldrb	r3, [r7, #14]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b086      	sub	sp, #24
 800994e:	af00      	add	r7, sp, #0
 8009950:	60f8      	str	r0, [r7, #12]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	461a      	mov	r2, r3
 8009956:	460b      	mov	r3, r1
 8009958:	72fb      	strb	r3, [r7, #11]
 800995a:	4613      	mov	r3, r2
 800995c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800996c:	893b      	ldrh	r3, [r7, #8]
 800996e:	7af9      	ldrb	r1, [r7, #11]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	f7f9 fc5c 	bl	800322e <HAL_PCD_EP_Transmit>
 8009976:	4603      	mov	r3, r0
 8009978:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800997a:	7dfb      	ldrb	r3, [r7, #23]
 800997c:	4618      	mov	r0, r3
 800997e:	f000 f85d 	bl	8009a3c <USBD_Get_USB_Status>
 8009982:	4603      	mov	r3, r0
 8009984:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009986:	7dbb      	ldrb	r3, [r7, #22]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	607a      	str	r2, [r7, #4]
 800999a:	461a      	mov	r2, r3
 800999c:	460b      	mov	r3, r1
 800999e:	72fb      	strb	r3, [r7, #11]
 80099a0:	4613      	mov	r3, r2
 80099a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80099b2:	893b      	ldrh	r3, [r7, #8]
 80099b4:	7af9      	ldrb	r1, [r7, #11]
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	f7f9 fbe5 	bl	8003186 <HAL_PCD_EP_Receive>
 80099bc:	4603      	mov	r3, r0
 80099be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f83a 	bl	8009a3c <USBD_Get_USB_Status>
 80099c8:	4603      	mov	r3, r0
 80099ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3718      	adds	r7, #24
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b082      	sub	sp, #8
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	460b      	mov	r3, r1
 80099e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099e8:	78fa      	ldrb	r2, [r7, #3]
 80099ea:	4611      	mov	r1, r2
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7f9 fc07 	bl	8003200 <HAL_PCD_EP_GetRxCount>
 80099f2:	4603      	mov	r3, r0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a04:	4b02      	ldr	r3, [pc, #8]	; (8009a10 <USBD_static_malloc+0x14>)
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bc80      	pop	{r7}
 8009a0e:	4770      	bx	lr
 8009a10:	2000026c 	.word	0x2000026c

08009a14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]

}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bc80      	pop	{r7}
 8009a24:	4770      	bx	lr

08009a26 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a26:	b480      	push	{r7}
 8009a28:	b083      	sub	sp, #12
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	460b      	mov	r3, r1
 8009a30:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009a32:	bf00      	nop
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bc80      	pop	{r7}
 8009a3a:	4770      	bx	lr

08009a3c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a4a:	79fb      	ldrb	r3, [r7, #7]
 8009a4c:	2b03      	cmp	r3, #3
 8009a4e:	d817      	bhi.n	8009a80 <USBD_Get_USB_Status+0x44>
 8009a50:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <USBD_Get_USB_Status+0x1c>)
 8009a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a56:	bf00      	nop
 8009a58:	08009a69 	.word	0x08009a69
 8009a5c:	08009a6f 	.word	0x08009a6f
 8009a60:	08009a75 	.word	0x08009a75
 8009a64:	08009a7b 	.word	0x08009a7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a6c:	e00b      	b.n	8009a86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a6e:	2302      	movs	r3, #2
 8009a70:	73fb      	strb	r3, [r7, #15]
    break;
 8009a72:	e008      	b.n	8009a86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a74:	2301      	movs	r3, #1
 8009a76:	73fb      	strb	r3, [r7, #15]
    break;
 8009a78:	e005      	b.n	8009a86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a7e:	e002      	b.n	8009a86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a80:	2302      	movs	r3, #2
 8009a82:	73fb      	strb	r3, [r7, #15]
    break;
 8009a84:	bf00      	nop
  }
  return usb_status;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bc80      	pop	{r7}
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop

08009a94 <__errno>:
 8009a94:	4b01      	ldr	r3, [pc, #4]	; (8009a9c <__errno+0x8>)
 8009a96:	6818      	ldr	r0, [r3, #0]
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	200001c0 	.word	0x200001c0

08009aa0 <__libc_init_array>:
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	2600      	movs	r6, #0
 8009aa4:	4d0c      	ldr	r5, [pc, #48]	; (8009ad8 <__libc_init_array+0x38>)
 8009aa6:	4c0d      	ldr	r4, [pc, #52]	; (8009adc <__libc_init_array+0x3c>)
 8009aa8:	1b64      	subs	r4, r4, r5
 8009aaa:	10a4      	asrs	r4, r4, #2
 8009aac:	42a6      	cmp	r6, r4
 8009aae:	d109      	bne.n	8009ac4 <__libc_init_array+0x24>
 8009ab0:	f000 ff90 	bl	800a9d4 <_init>
 8009ab4:	2600      	movs	r6, #0
 8009ab6:	4d0a      	ldr	r5, [pc, #40]	; (8009ae0 <__libc_init_array+0x40>)
 8009ab8:	4c0a      	ldr	r4, [pc, #40]	; (8009ae4 <__libc_init_array+0x44>)
 8009aba:	1b64      	subs	r4, r4, r5
 8009abc:	10a4      	asrs	r4, r4, #2
 8009abe:	42a6      	cmp	r6, r4
 8009ac0:	d105      	bne.n	8009ace <__libc_init_array+0x2e>
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac8:	4798      	blx	r3
 8009aca:	3601      	adds	r6, #1
 8009acc:	e7ee      	b.n	8009aac <__libc_init_array+0xc>
 8009ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ad2:	4798      	blx	r3
 8009ad4:	3601      	adds	r6, #1
 8009ad6:	e7f2      	b.n	8009abe <__libc_init_array+0x1e>
 8009ad8:	0800ab30 	.word	0x0800ab30
 8009adc:	0800ab30 	.word	0x0800ab30
 8009ae0:	0800ab30 	.word	0x0800ab30
 8009ae4:	0800ab34 	.word	0x0800ab34

08009ae8 <memcpy>:
 8009ae8:	440a      	add	r2, r1
 8009aea:	4291      	cmp	r1, r2
 8009aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8009af0:	d100      	bne.n	8009af4 <memcpy+0xc>
 8009af2:	4770      	bx	lr
 8009af4:	b510      	push	{r4, lr}
 8009af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009afa:	4291      	cmp	r1, r2
 8009afc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b00:	d1f9      	bne.n	8009af6 <memcpy+0xe>
 8009b02:	bd10      	pop	{r4, pc}

08009b04 <memset>:
 8009b04:	4603      	mov	r3, r0
 8009b06:	4402      	add	r2, r0
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d100      	bne.n	8009b0e <memset+0xa>
 8009b0c:	4770      	bx	lr
 8009b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b12:	e7f9      	b.n	8009b08 <memset+0x4>

08009b14 <iprintf>:
 8009b14:	b40f      	push	{r0, r1, r2, r3}
 8009b16:	4b0a      	ldr	r3, [pc, #40]	; (8009b40 <iprintf+0x2c>)
 8009b18:	b513      	push	{r0, r1, r4, lr}
 8009b1a:	681c      	ldr	r4, [r3, #0]
 8009b1c:	b124      	cbz	r4, 8009b28 <iprintf+0x14>
 8009b1e:	69a3      	ldr	r3, [r4, #24]
 8009b20:	b913      	cbnz	r3, 8009b28 <iprintf+0x14>
 8009b22:	4620      	mov	r0, r4
 8009b24:	f000 f866 	bl	8009bf4 <__sinit>
 8009b28:	ab05      	add	r3, sp, #20
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	9a04      	ldr	r2, [sp, #16]
 8009b2e:	68a1      	ldr	r1, [r4, #8]
 8009b30:	9301      	str	r3, [sp, #4]
 8009b32:	f000 f981 	bl	8009e38 <_vfiprintf_r>
 8009b36:	b002      	add	sp, #8
 8009b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b3c:	b004      	add	sp, #16
 8009b3e:	4770      	bx	lr
 8009b40:	200001c0 	.word	0x200001c0

08009b44 <std>:
 8009b44:	2300      	movs	r3, #0
 8009b46:	b510      	push	{r4, lr}
 8009b48:	4604      	mov	r4, r0
 8009b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b52:	6083      	str	r3, [r0, #8]
 8009b54:	8181      	strh	r1, [r0, #12]
 8009b56:	6643      	str	r3, [r0, #100]	; 0x64
 8009b58:	81c2      	strh	r2, [r0, #14]
 8009b5a:	6183      	str	r3, [r0, #24]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	2208      	movs	r2, #8
 8009b60:	305c      	adds	r0, #92	; 0x5c
 8009b62:	f7ff ffcf 	bl	8009b04 <memset>
 8009b66:	4b05      	ldr	r3, [pc, #20]	; (8009b7c <std+0x38>)
 8009b68:	6224      	str	r4, [r4, #32]
 8009b6a:	6263      	str	r3, [r4, #36]	; 0x24
 8009b6c:	4b04      	ldr	r3, [pc, #16]	; (8009b80 <std+0x3c>)
 8009b6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b70:	4b04      	ldr	r3, [pc, #16]	; (8009b84 <std+0x40>)
 8009b72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b74:	4b04      	ldr	r3, [pc, #16]	; (8009b88 <std+0x44>)
 8009b76:	6323      	str	r3, [r4, #48]	; 0x30
 8009b78:	bd10      	pop	{r4, pc}
 8009b7a:	bf00      	nop
 8009b7c:	0800a3e5 	.word	0x0800a3e5
 8009b80:	0800a407 	.word	0x0800a407
 8009b84:	0800a43f 	.word	0x0800a43f
 8009b88:	0800a463 	.word	0x0800a463

08009b8c <_cleanup_r>:
 8009b8c:	4901      	ldr	r1, [pc, #4]	; (8009b94 <_cleanup_r+0x8>)
 8009b8e:	f000 b8af 	b.w	8009cf0 <_fwalk_reent>
 8009b92:	bf00      	nop
 8009b94:	0800a73d 	.word	0x0800a73d

08009b98 <__sfmoreglue>:
 8009b98:	b570      	push	{r4, r5, r6, lr}
 8009b9a:	2568      	movs	r5, #104	; 0x68
 8009b9c:	1e4a      	subs	r2, r1, #1
 8009b9e:	4355      	muls	r5, r2
 8009ba0:	460e      	mov	r6, r1
 8009ba2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ba6:	f000 f8c5 	bl	8009d34 <_malloc_r>
 8009baa:	4604      	mov	r4, r0
 8009bac:	b140      	cbz	r0, 8009bc0 <__sfmoreglue+0x28>
 8009bae:	2100      	movs	r1, #0
 8009bb0:	e9c0 1600 	strd	r1, r6, [r0]
 8009bb4:	300c      	adds	r0, #12
 8009bb6:	60a0      	str	r0, [r4, #8]
 8009bb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bbc:	f7ff ffa2 	bl	8009b04 <memset>
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}

08009bc4 <__sfp_lock_acquire>:
 8009bc4:	4801      	ldr	r0, [pc, #4]	; (8009bcc <__sfp_lock_acquire+0x8>)
 8009bc6:	f000 b8b3 	b.w	8009d30 <__retarget_lock_acquire_recursive>
 8009bca:	bf00      	nop
 8009bcc:	20001590 	.word	0x20001590

08009bd0 <__sfp_lock_release>:
 8009bd0:	4801      	ldr	r0, [pc, #4]	; (8009bd8 <__sfp_lock_release+0x8>)
 8009bd2:	f000 b8ae 	b.w	8009d32 <__retarget_lock_release_recursive>
 8009bd6:	bf00      	nop
 8009bd8:	20001590 	.word	0x20001590

08009bdc <__sinit_lock_acquire>:
 8009bdc:	4801      	ldr	r0, [pc, #4]	; (8009be4 <__sinit_lock_acquire+0x8>)
 8009bde:	f000 b8a7 	b.w	8009d30 <__retarget_lock_acquire_recursive>
 8009be2:	bf00      	nop
 8009be4:	2000158b 	.word	0x2000158b

08009be8 <__sinit_lock_release>:
 8009be8:	4801      	ldr	r0, [pc, #4]	; (8009bf0 <__sinit_lock_release+0x8>)
 8009bea:	f000 b8a2 	b.w	8009d32 <__retarget_lock_release_recursive>
 8009bee:	bf00      	nop
 8009bf0:	2000158b 	.word	0x2000158b

08009bf4 <__sinit>:
 8009bf4:	b510      	push	{r4, lr}
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	f7ff fff0 	bl	8009bdc <__sinit_lock_acquire>
 8009bfc:	69a3      	ldr	r3, [r4, #24]
 8009bfe:	b11b      	cbz	r3, 8009c08 <__sinit+0x14>
 8009c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c04:	f7ff bff0 	b.w	8009be8 <__sinit_lock_release>
 8009c08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c0c:	6523      	str	r3, [r4, #80]	; 0x50
 8009c0e:	4b13      	ldr	r3, [pc, #76]	; (8009c5c <__sinit+0x68>)
 8009c10:	4a13      	ldr	r2, [pc, #76]	; (8009c60 <__sinit+0x6c>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c16:	42a3      	cmp	r3, r4
 8009c18:	bf08      	it	eq
 8009c1a:	2301      	moveq	r3, #1
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	bf08      	it	eq
 8009c20:	61a3      	streq	r3, [r4, #24]
 8009c22:	f000 f81f 	bl	8009c64 <__sfp>
 8009c26:	6060      	str	r0, [r4, #4]
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 f81b 	bl	8009c64 <__sfp>
 8009c2e:	60a0      	str	r0, [r4, #8]
 8009c30:	4620      	mov	r0, r4
 8009c32:	f000 f817 	bl	8009c64 <__sfp>
 8009c36:	2200      	movs	r2, #0
 8009c38:	2104      	movs	r1, #4
 8009c3a:	60e0      	str	r0, [r4, #12]
 8009c3c:	6860      	ldr	r0, [r4, #4]
 8009c3e:	f7ff ff81 	bl	8009b44 <std>
 8009c42:	2201      	movs	r2, #1
 8009c44:	2109      	movs	r1, #9
 8009c46:	68a0      	ldr	r0, [r4, #8]
 8009c48:	f7ff ff7c 	bl	8009b44 <std>
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	2112      	movs	r1, #18
 8009c50:	68e0      	ldr	r0, [r4, #12]
 8009c52:	f7ff ff77 	bl	8009b44 <std>
 8009c56:	2301      	movs	r3, #1
 8009c58:	61a3      	str	r3, [r4, #24]
 8009c5a:	e7d1      	b.n	8009c00 <__sinit+0xc>
 8009c5c:	0800aa98 	.word	0x0800aa98
 8009c60:	08009b8d 	.word	0x08009b8d

08009c64 <__sfp>:
 8009c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c66:	4607      	mov	r7, r0
 8009c68:	f7ff ffac 	bl	8009bc4 <__sfp_lock_acquire>
 8009c6c:	4b1e      	ldr	r3, [pc, #120]	; (8009ce8 <__sfp+0x84>)
 8009c6e:	681e      	ldr	r6, [r3, #0]
 8009c70:	69b3      	ldr	r3, [r6, #24]
 8009c72:	b913      	cbnz	r3, 8009c7a <__sfp+0x16>
 8009c74:	4630      	mov	r0, r6
 8009c76:	f7ff ffbd 	bl	8009bf4 <__sinit>
 8009c7a:	3648      	adds	r6, #72	; 0x48
 8009c7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c80:	3b01      	subs	r3, #1
 8009c82:	d503      	bpl.n	8009c8c <__sfp+0x28>
 8009c84:	6833      	ldr	r3, [r6, #0]
 8009c86:	b30b      	cbz	r3, 8009ccc <__sfp+0x68>
 8009c88:	6836      	ldr	r6, [r6, #0]
 8009c8a:	e7f7      	b.n	8009c7c <__sfp+0x18>
 8009c8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c90:	b9d5      	cbnz	r5, 8009cc8 <__sfp+0x64>
 8009c92:	4b16      	ldr	r3, [pc, #88]	; (8009cec <__sfp+0x88>)
 8009c94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c98:	60e3      	str	r3, [r4, #12]
 8009c9a:	6665      	str	r5, [r4, #100]	; 0x64
 8009c9c:	f000 f847 	bl	8009d2e <__retarget_lock_init_recursive>
 8009ca0:	f7ff ff96 	bl	8009bd0 <__sfp_lock_release>
 8009ca4:	2208      	movs	r2, #8
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cb0:	6025      	str	r5, [r4, #0]
 8009cb2:	61a5      	str	r5, [r4, #24]
 8009cb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cb8:	f7ff ff24 	bl	8009b04 <memset>
 8009cbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc8:	3468      	adds	r4, #104	; 0x68
 8009cca:	e7d9      	b.n	8009c80 <__sfp+0x1c>
 8009ccc:	2104      	movs	r1, #4
 8009cce:	4638      	mov	r0, r7
 8009cd0:	f7ff ff62 	bl	8009b98 <__sfmoreglue>
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	6030      	str	r0, [r6, #0]
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d1d5      	bne.n	8009c88 <__sfp+0x24>
 8009cdc:	f7ff ff78 	bl	8009bd0 <__sfp_lock_release>
 8009ce0:	230c      	movs	r3, #12
 8009ce2:	603b      	str	r3, [r7, #0]
 8009ce4:	e7ee      	b.n	8009cc4 <__sfp+0x60>
 8009ce6:	bf00      	nop
 8009ce8:	0800aa98 	.word	0x0800aa98
 8009cec:	ffff0001 	.word	0xffff0001

08009cf0 <_fwalk_reent>:
 8009cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	4688      	mov	r8, r1
 8009cf8:	2700      	movs	r7, #0
 8009cfa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d02:	f1b9 0901 	subs.w	r9, r9, #1
 8009d06:	d505      	bpl.n	8009d14 <_fwalk_reent+0x24>
 8009d08:	6824      	ldr	r4, [r4, #0]
 8009d0a:	2c00      	cmp	r4, #0
 8009d0c:	d1f7      	bne.n	8009cfe <_fwalk_reent+0xe>
 8009d0e:	4638      	mov	r0, r7
 8009d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d14:	89ab      	ldrh	r3, [r5, #12]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d907      	bls.n	8009d2a <_fwalk_reent+0x3a>
 8009d1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	d003      	beq.n	8009d2a <_fwalk_reent+0x3a>
 8009d22:	4629      	mov	r1, r5
 8009d24:	4630      	mov	r0, r6
 8009d26:	47c0      	blx	r8
 8009d28:	4307      	orrs	r7, r0
 8009d2a:	3568      	adds	r5, #104	; 0x68
 8009d2c:	e7e9      	b.n	8009d02 <_fwalk_reent+0x12>

08009d2e <__retarget_lock_init_recursive>:
 8009d2e:	4770      	bx	lr

08009d30 <__retarget_lock_acquire_recursive>:
 8009d30:	4770      	bx	lr

08009d32 <__retarget_lock_release_recursive>:
 8009d32:	4770      	bx	lr

08009d34 <_malloc_r>:
 8009d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d36:	1ccd      	adds	r5, r1, #3
 8009d38:	f025 0503 	bic.w	r5, r5, #3
 8009d3c:	3508      	adds	r5, #8
 8009d3e:	2d0c      	cmp	r5, #12
 8009d40:	bf38      	it	cc
 8009d42:	250c      	movcc	r5, #12
 8009d44:	2d00      	cmp	r5, #0
 8009d46:	4606      	mov	r6, r0
 8009d48:	db01      	blt.n	8009d4e <_malloc_r+0x1a>
 8009d4a:	42a9      	cmp	r1, r5
 8009d4c:	d903      	bls.n	8009d56 <_malloc_r+0x22>
 8009d4e:	230c      	movs	r3, #12
 8009d50:	6033      	str	r3, [r6, #0]
 8009d52:	2000      	movs	r0, #0
 8009d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d56:	f000 fdb1 	bl	800a8bc <__malloc_lock>
 8009d5a:	4921      	ldr	r1, [pc, #132]	; (8009de0 <_malloc_r+0xac>)
 8009d5c:	680a      	ldr	r2, [r1, #0]
 8009d5e:	4614      	mov	r4, r2
 8009d60:	b99c      	cbnz	r4, 8009d8a <_malloc_r+0x56>
 8009d62:	4f20      	ldr	r7, [pc, #128]	; (8009de4 <_malloc_r+0xb0>)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	b923      	cbnz	r3, 8009d72 <_malloc_r+0x3e>
 8009d68:	4621      	mov	r1, r4
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f000 fb2a 	bl	800a3c4 <_sbrk_r>
 8009d70:	6038      	str	r0, [r7, #0]
 8009d72:	4629      	mov	r1, r5
 8009d74:	4630      	mov	r0, r6
 8009d76:	f000 fb25 	bl	800a3c4 <_sbrk_r>
 8009d7a:	1c43      	adds	r3, r0, #1
 8009d7c:	d123      	bne.n	8009dc6 <_malloc_r+0x92>
 8009d7e:	230c      	movs	r3, #12
 8009d80:	4630      	mov	r0, r6
 8009d82:	6033      	str	r3, [r6, #0]
 8009d84:	f000 fda0 	bl	800a8c8 <__malloc_unlock>
 8009d88:	e7e3      	b.n	8009d52 <_malloc_r+0x1e>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	1b5b      	subs	r3, r3, r5
 8009d8e:	d417      	bmi.n	8009dc0 <_malloc_r+0x8c>
 8009d90:	2b0b      	cmp	r3, #11
 8009d92:	d903      	bls.n	8009d9c <_malloc_r+0x68>
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	441c      	add	r4, r3
 8009d98:	6025      	str	r5, [r4, #0]
 8009d9a:	e004      	b.n	8009da6 <_malloc_r+0x72>
 8009d9c:	6863      	ldr	r3, [r4, #4]
 8009d9e:	42a2      	cmp	r2, r4
 8009da0:	bf0c      	ite	eq
 8009da2:	600b      	streq	r3, [r1, #0]
 8009da4:	6053      	strne	r3, [r2, #4]
 8009da6:	4630      	mov	r0, r6
 8009da8:	f000 fd8e 	bl	800a8c8 <__malloc_unlock>
 8009dac:	f104 000b 	add.w	r0, r4, #11
 8009db0:	1d23      	adds	r3, r4, #4
 8009db2:	f020 0007 	bic.w	r0, r0, #7
 8009db6:	1ac2      	subs	r2, r0, r3
 8009db8:	d0cc      	beq.n	8009d54 <_malloc_r+0x20>
 8009dba:	1a1b      	subs	r3, r3, r0
 8009dbc:	50a3      	str	r3, [r4, r2]
 8009dbe:	e7c9      	b.n	8009d54 <_malloc_r+0x20>
 8009dc0:	4622      	mov	r2, r4
 8009dc2:	6864      	ldr	r4, [r4, #4]
 8009dc4:	e7cc      	b.n	8009d60 <_malloc_r+0x2c>
 8009dc6:	1cc4      	adds	r4, r0, #3
 8009dc8:	f024 0403 	bic.w	r4, r4, #3
 8009dcc:	42a0      	cmp	r0, r4
 8009dce:	d0e3      	beq.n	8009d98 <_malloc_r+0x64>
 8009dd0:	1a21      	subs	r1, r4, r0
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f000 faf6 	bl	800a3c4 <_sbrk_r>
 8009dd8:	3001      	adds	r0, #1
 8009dda:	d1dd      	bne.n	8009d98 <_malloc_r+0x64>
 8009ddc:	e7cf      	b.n	8009d7e <_malloc_r+0x4a>
 8009dde:	bf00      	nop
 8009de0:	2000048c 	.word	0x2000048c
 8009de4:	20000490 	.word	0x20000490

08009de8 <__sfputc_r>:
 8009de8:	6893      	ldr	r3, [r2, #8]
 8009dea:	b410      	push	{r4}
 8009dec:	3b01      	subs	r3, #1
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	6093      	str	r3, [r2, #8]
 8009df2:	da07      	bge.n	8009e04 <__sfputc_r+0x1c>
 8009df4:	6994      	ldr	r4, [r2, #24]
 8009df6:	42a3      	cmp	r3, r4
 8009df8:	db01      	blt.n	8009dfe <__sfputc_r+0x16>
 8009dfa:	290a      	cmp	r1, #10
 8009dfc:	d102      	bne.n	8009e04 <__sfputc_r+0x1c>
 8009dfe:	bc10      	pop	{r4}
 8009e00:	f000 bb34 	b.w	800a46c <__swbuf_r>
 8009e04:	6813      	ldr	r3, [r2, #0]
 8009e06:	1c58      	adds	r0, r3, #1
 8009e08:	6010      	str	r0, [r2, #0]
 8009e0a:	7019      	strb	r1, [r3, #0]
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	bc10      	pop	{r4}
 8009e10:	4770      	bx	lr

08009e12 <__sfputs_r>:
 8009e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e14:	4606      	mov	r6, r0
 8009e16:	460f      	mov	r7, r1
 8009e18:	4614      	mov	r4, r2
 8009e1a:	18d5      	adds	r5, r2, r3
 8009e1c:	42ac      	cmp	r4, r5
 8009e1e:	d101      	bne.n	8009e24 <__sfputs_r+0x12>
 8009e20:	2000      	movs	r0, #0
 8009e22:	e007      	b.n	8009e34 <__sfputs_r+0x22>
 8009e24:	463a      	mov	r2, r7
 8009e26:	4630      	mov	r0, r6
 8009e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2c:	f7ff ffdc 	bl	8009de8 <__sfputc_r>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d1f3      	bne.n	8009e1c <__sfputs_r+0xa>
 8009e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e38 <_vfiprintf_r>:
 8009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	460d      	mov	r5, r1
 8009e3e:	4614      	mov	r4, r2
 8009e40:	4698      	mov	r8, r3
 8009e42:	4606      	mov	r6, r0
 8009e44:	b09d      	sub	sp, #116	; 0x74
 8009e46:	b118      	cbz	r0, 8009e50 <_vfiprintf_r+0x18>
 8009e48:	6983      	ldr	r3, [r0, #24]
 8009e4a:	b90b      	cbnz	r3, 8009e50 <_vfiprintf_r+0x18>
 8009e4c:	f7ff fed2 	bl	8009bf4 <__sinit>
 8009e50:	4b89      	ldr	r3, [pc, #548]	; (800a078 <_vfiprintf_r+0x240>)
 8009e52:	429d      	cmp	r5, r3
 8009e54:	d11b      	bne.n	8009e8e <_vfiprintf_r+0x56>
 8009e56:	6875      	ldr	r5, [r6, #4]
 8009e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e5a:	07d9      	lsls	r1, r3, #31
 8009e5c:	d405      	bmi.n	8009e6a <_vfiprintf_r+0x32>
 8009e5e:	89ab      	ldrh	r3, [r5, #12]
 8009e60:	059a      	lsls	r2, r3, #22
 8009e62:	d402      	bmi.n	8009e6a <_vfiprintf_r+0x32>
 8009e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e66:	f7ff ff63 	bl	8009d30 <__retarget_lock_acquire_recursive>
 8009e6a:	89ab      	ldrh	r3, [r5, #12]
 8009e6c:	071b      	lsls	r3, r3, #28
 8009e6e:	d501      	bpl.n	8009e74 <_vfiprintf_r+0x3c>
 8009e70:	692b      	ldr	r3, [r5, #16]
 8009e72:	b9eb      	cbnz	r3, 8009eb0 <_vfiprintf_r+0x78>
 8009e74:	4629      	mov	r1, r5
 8009e76:	4630      	mov	r0, r6
 8009e78:	f000 fb5c 	bl	800a534 <__swsetup_r>
 8009e7c:	b1c0      	cbz	r0, 8009eb0 <_vfiprintf_r+0x78>
 8009e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e80:	07dc      	lsls	r4, r3, #31
 8009e82:	d50e      	bpl.n	8009ea2 <_vfiprintf_r+0x6a>
 8009e84:	f04f 30ff 	mov.w	r0, #4294967295
 8009e88:	b01d      	add	sp, #116	; 0x74
 8009e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8e:	4b7b      	ldr	r3, [pc, #492]	; (800a07c <_vfiprintf_r+0x244>)
 8009e90:	429d      	cmp	r5, r3
 8009e92:	d101      	bne.n	8009e98 <_vfiprintf_r+0x60>
 8009e94:	68b5      	ldr	r5, [r6, #8]
 8009e96:	e7df      	b.n	8009e58 <_vfiprintf_r+0x20>
 8009e98:	4b79      	ldr	r3, [pc, #484]	; (800a080 <_vfiprintf_r+0x248>)
 8009e9a:	429d      	cmp	r5, r3
 8009e9c:	bf08      	it	eq
 8009e9e:	68f5      	ldreq	r5, [r6, #12]
 8009ea0:	e7da      	b.n	8009e58 <_vfiprintf_r+0x20>
 8009ea2:	89ab      	ldrh	r3, [r5, #12]
 8009ea4:	0598      	lsls	r0, r3, #22
 8009ea6:	d4ed      	bmi.n	8009e84 <_vfiprintf_r+0x4c>
 8009ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eaa:	f7ff ff42 	bl	8009d32 <__retarget_lock_release_recursive>
 8009eae:	e7e9      	b.n	8009e84 <_vfiprintf_r+0x4c>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb4:	2320      	movs	r3, #32
 8009eb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eba:	2330      	movs	r3, #48	; 0x30
 8009ebc:	f04f 0901 	mov.w	r9, #1
 8009ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ec4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a084 <_vfiprintf_r+0x24c>
 8009ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ecc:	4623      	mov	r3, r4
 8009ece:	469a      	mov	sl, r3
 8009ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ed4:	b10a      	cbz	r2, 8009eda <_vfiprintf_r+0xa2>
 8009ed6:	2a25      	cmp	r2, #37	; 0x25
 8009ed8:	d1f9      	bne.n	8009ece <_vfiprintf_r+0x96>
 8009eda:	ebba 0b04 	subs.w	fp, sl, r4
 8009ede:	d00b      	beq.n	8009ef8 <_vfiprintf_r+0xc0>
 8009ee0:	465b      	mov	r3, fp
 8009ee2:	4622      	mov	r2, r4
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f7ff ff93 	bl	8009e12 <__sfputs_r>
 8009eec:	3001      	adds	r0, #1
 8009eee:	f000 80aa 	beq.w	800a046 <_vfiprintf_r+0x20e>
 8009ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ef4:	445a      	add	r2, fp
 8009ef6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 80a2 	beq.w	800a046 <_vfiprintf_r+0x20e>
 8009f02:	2300      	movs	r3, #0
 8009f04:	f04f 32ff 	mov.w	r2, #4294967295
 8009f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f0c:	f10a 0a01 	add.w	sl, sl, #1
 8009f10:	9304      	str	r3, [sp, #16]
 8009f12:	9307      	str	r3, [sp, #28]
 8009f14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f18:	931a      	str	r3, [sp, #104]	; 0x68
 8009f1a:	4654      	mov	r4, sl
 8009f1c:	2205      	movs	r2, #5
 8009f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f22:	4858      	ldr	r0, [pc, #352]	; (800a084 <_vfiprintf_r+0x24c>)
 8009f24:	f000 fcbc 	bl	800a8a0 <memchr>
 8009f28:	9a04      	ldr	r2, [sp, #16]
 8009f2a:	b9d8      	cbnz	r0, 8009f64 <_vfiprintf_r+0x12c>
 8009f2c:	06d1      	lsls	r1, r2, #27
 8009f2e:	bf44      	itt	mi
 8009f30:	2320      	movmi	r3, #32
 8009f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f36:	0713      	lsls	r3, r2, #28
 8009f38:	bf44      	itt	mi
 8009f3a:	232b      	movmi	r3, #43	; 0x2b
 8009f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f40:	f89a 3000 	ldrb.w	r3, [sl]
 8009f44:	2b2a      	cmp	r3, #42	; 0x2a
 8009f46:	d015      	beq.n	8009f74 <_vfiprintf_r+0x13c>
 8009f48:	4654      	mov	r4, sl
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	f04f 0c0a 	mov.w	ip, #10
 8009f50:	9a07      	ldr	r2, [sp, #28]
 8009f52:	4621      	mov	r1, r4
 8009f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f58:	3b30      	subs	r3, #48	; 0x30
 8009f5a:	2b09      	cmp	r3, #9
 8009f5c:	d94e      	bls.n	8009ffc <_vfiprintf_r+0x1c4>
 8009f5e:	b1b0      	cbz	r0, 8009f8e <_vfiprintf_r+0x156>
 8009f60:	9207      	str	r2, [sp, #28]
 8009f62:	e014      	b.n	8009f8e <_vfiprintf_r+0x156>
 8009f64:	eba0 0308 	sub.w	r3, r0, r8
 8009f68:	fa09 f303 	lsl.w	r3, r9, r3
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	46a2      	mov	sl, r4
 8009f70:	9304      	str	r3, [sp, #16]
 8009f72:	e7d2      	b.n	8009f1a <_vfiprintf_r+0xe2>
 8009f74:	9b03      	ldr	r3, [sp, #12]
 8009f76:	1d19      	adds	r1, r3, #4
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	9103      	str	r1, [sp, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	bfbb      	ittet	lt
 8009f80:	425b      	neglt	r3, r3
 8009f82:	f042 0202 	orrlt.w	r2, r2, #2
 8009f86:	9307      	strge	r3, [sp, #28]
 8009f88:	9307      	strlt	r3, [sp, #28]
 8009f8a:	bfb8      	it	lt
 8009f8c:	9204      	strlt	r2, [sp, #16]
 8009f8e:	7823      	ldrb	r3, [r4, #0]
 8009f90:	2b2e      	cmp	r3, #46	; 0x2e
 8009f92:	d10c      	bne.n	8009fae <_vfiprintf_r+0x176>
 8009f94:	7863      	ldrb	r3, [r4, #1]
 8009f96:	2b2a      	cmp	r3, #42	; 0x2a
 8009f98:	d135      	bne.n	800a006 <_vfiprintf_r+0x1ce>
 8009f9a:	9b03      	ldr	r3, [sp, #12]
 8009f9c:	3402      	adds	r4, #2
 8009f9e:	1d1a      	adds	r2, r3, #4
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	9203      	str	r2, [sp, #12]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	bfb8      	it	lt
 8009fa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fac:	9305      	str	r3, [sp, #20]
 8009fae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a094 <_vfiprintf_r+0x25c>
 8009fb2:	2203      	movs	r2, #3
 8009fb4:	4650      	mov	r0, sl
 8009fb6:	7821      	ldrb	r1, [r4, #0]
 8009fb8:	f000 fc72 	bl	800a8a0 <memchr>
 8009fbc:	b140      	cbz	r0, 8009fd0 <_vfiprintf_r+0x198>
 8009fbe:	2340      	movs	r3, #64	; 0x40
 8009fc0:	eba0 000a 	sub.w	r0, r0, sl
 8009fc4:	fa03 f000 	lsl.w	r0, r3, r0
 8009fc8:	9b04      	ldr	r3, [sp, #16]
 8009fca:	3401      	adds	r4, #1
 8009fcc:	4303      	orrs	r3, r0
 8009fce:	9304      	str	r3, [sp, #16]
 8009fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd4:	2206      	movs	r2, #6
 8009fd6:	482c      	ldr	r0, [pc, #176]	; (800a088 <_vfiprintf_r+0x250>)
 8009fd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fdc:	f000 fc60 	bl	800a8a0 <memchr>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d03f      	beq.n	800a064 <_vfiprintf_r+0x22c>
 8009fe4:	4b29      	ldr	r3, [pc, #164]	; (800a08c <_vfiprintf_r+0x254>)
 8009fe6:	bb1b      	cbnz	r3, 800a030 <_vfiprintf_r+0x1f8>
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	3307      	adds	r3, #7
 8009fec:	f023 0307 	bic.w	r3, r3, #7
 8009ff0:	3308      	adds	r3, #8
 8009ff2:	9303      	str	r3, [sp, #12]
 8009ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff6:	443b      	add	r3, r7
 8009ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8009ffa:	e767      	b.n	8009ecc <_vfiprintf_r+0x94>
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	2001      	movs	r0, #1
 800a000:	fb0c 3202 	mla	r2, ip, r2, r3
 800a004:	e7a5      	b.n	8009f52 <_vfiprintf_r+0x11a>
 800a006:	2300      	movs	r3, #0
 800a008:	f04f 0c0a 	mov.w	ip, #10
 800a00c:	4619      	mov	r1, r3
 800a00e:	3401      	adds	r4, #1
 800a010:	9305      	str	r3, [sp, #20]
 800a012:	4620      	mov	r0, r4
 800a014:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a018:	3a30      	subs	r2, #48	; 0x30
 800a01a:	2a09      	cmp	r2, #9
 800a01c:	d903      	bls.n	800a026 <_vfiprintf_r+0x1ee>
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d0c5      	beq.n	8009fae <_vfiprintf_r+0x176>
 800a022:	9105      	str	r1, [sp, #20]
 800a024:	e7c3      	b.n	8009fae <_vfiprintf_r+0x176>
 800a026:	4604      	mov	r4, r0
 800a028:	2301      	movs	r3, #1
 800a02a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a02e:	e7f0      	b.n	800a012 <_vfiprintf_r+0x1da>
 800a030:	ab03      	add	r3, sp, #12
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	462a      	mov	r2, r5
 800a036:	4630      	mov	r0, r6
 800a038:	4b15      	ldr	r3, [pc, #84]	; (800a090 <_vfiprintf_r+0x258>)
 800a03a:	a904      	add	r1, sp, #16
 800a03c:	f3af 8000 	nop.w
 800a040:	4607      	mov	r7, r0
 800a042:	1c78      	adds	r0, r7, #1
 800a044:	d1d6      	bne.n	8009ff4 <_vfiprintf_r+0x1bc>
 800a046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a048:	07d9      	lsls	r1, r3, #31
 800a04a:	d405      	bmi.n	800a058 <_vfiprintf_r+0x220>
 800a04c:	89ab      	ldrh	r3, [r5, #12]
 800a04e:	059a      	lsls	r2, r3, #22
 800a050:	d402      	bmi.n	800a058 <_vfiprintf_r+0x220>
 800a052:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a054:	f7ff fe6d 	bl	8009d32 <__retarget_lock_release_recursive>
 800a058:	89ab      	ldrh	r3, [r5, #12]
 800a05a:	065b      	lsls	r3, r3, #25
 800a05c:	f53f af12 	bmi.w	8009e84 <_vfiprintf_r+0x4c>
 800a060:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a062:	e711      	b.n	8009e88 <_vfiprintf_r+0x50>
 800a064:	ab03      	add	r3, sp, #12
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	462a      	mov	r2, r5
 800a06a:	4630      	mov	r0, r6
 800a06c:	4b08      	ldr	r3, [pc, #32]	; (800a090 <_vfiprintf_r+0x258>)
 800a06e:	a904      	add	r1, sp, #16
 800a070:	f000 f882 	bl	800a178 <_printf_i>
 800a074:	e7e4      	b.n	800a040 <_vfiprintf_r+0x208>
 800a076:	bf00      	nop
 800a078:	0800aabc 	.word	0x0800aabc
 800a07c:	0800aadc 	.word	0x0800aadc
 800a080:	0800aa9c 	.word	0x0800aa9c
 800a084:	0800aafc 	.word	0x0800aafc
 800a088:	0800ab06 	.word	0x0800ab06
 800a08c:	00000000 	.word	0x00000000
 800a090:	08009e13 	.word	0x08009e13
 800a094:	0800ab02 	.word	0x0800ab02

0800a098 <_printf_common>:
 800a098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a09c:	4616      	mov	r6, r2
 800a09e:	4699      	mov	r9, r3
 800a0a0:	688a      	ldr	r2, [r1, #8]
 800a0a2:	690b      	ldr	r3, [r1, #16]
 800a0a4:	4607      	mov	r7, r0
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	bfb8      	it	lt
 800a0aa:	4613      	movlt	r3, r2
 800a0ac:	6033      	str	r3, [r6, #0]
 800a0ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0b8:	b10a      	cbz	r2, 800a0be <_printf_common+0x26>
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	6033      	str	r3, [r6, #0]
 800a0be:	6823      	ldr	r3, [r4, #0]
 800a0c0:	0699      	lsls	r1, r3, #26
 800a0c2:	bf42      	ittt	mi
 800a0c4:	6833      	ldrmi	r3, [r6, #0]
 800a0c6:	3302      	addmi	r3, #2
 800a0c8:	6033      	strmi	r3, [r6, #0]
 800a0ca:	6825      	ldr	r5, [r4, #0]
 800a0cc:	f015 0506 	ands.w	r5, r5, #6
 800a0d0:	d106      	bne.n	800a0e0 <_printf_common+0x48>
 800a0d2:	f104 0a19 	add.w	sl, r4, #25
 800a0d6:	68e3      	ldr	r3, [r4, #12]
 800a0d8:	6832      	ldr	r2, [r6, #0]
 800a0da:	1a9b      	subs	r3, r3, r2
 800a0dc:	42ab      	cmp	r3, r5
 800a0de:	dc28      	bgt.n	800a132 <_printf_common+0x9a>
 800a0e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0e4:	1e13      	subs	r3, r2, #0
 800a0e6:	6822      	ldr	r2, [r4, #0]
 800a0e8:	bf18      	it	ne
 800a0ea:	2301      	movne	r3, #1
 800a0ec:	0692      	lsls	r2, r2, #26
 800a0ee:	d42d      	bmi.n	800a14c <_printf_common+0xb4>
 800a0f0:	4649      	mov	r1, r9
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0f8:	47c0      	blx	r8
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	d020      	beq.n	800a140 <_printf_common+0xa8>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	68e5      	ldr	r5, [r4, #12]
 800a102:	f003 0306 	and.w	r3, r3, #6
 800a106:	2b04      	cmp	r3, #4
 800a108:	bf18      	it	ne
 800a10a:	2500      	movne	r5, #0
 800a10c:	6832      	ldr	r2, [r6, #0]
 800a10e:	f04f 0600 	mov.w	r6, #0
 800a112:	68a3      	ldr	r3, [r4, #8]
 800a114:	bf08      	it	eq
 800a116:	1aad      	subeq	r5, r5, r2
 800a118:	6922      	ldr	r2, [r4, #16]
 800a11a:	bf08      	it	eq
 800a11c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a120:	4293      	cmp	r3, r2
 800a122:	bfc4      	itt	gt
 800a124:	1a9b      	subgt	r3, r3, r2
 800a126:	18ed      	addgt	r5, r5, r3
 800a128:	341a      	adds	r4, #26
 800a12a:	42b5      	cmp	r5, r6
 800a12c:	d11a      	bne.n	800a164 <_printf_common+0xcc>
 800a12e:	2000      	movs	r0, #0
 800a130:	e008      	b.n	800a144 <_printf_common+0xac>
 800a132:	2301      	movs	r3, #1
 800a134:	4652      	mov	r2, sl
 800a136:	4649      	mov	r1, r9
 800a138:	4638      	mov	r0, r7
 800a13a:	47c0      	blx	r8
 800a13c:	3001      	adds	r0, #1
 800a13e:	d103      	bne.n	800a148 <_printf_common+0xb0>
 800a140:	f04f 30ff 	mov.w	r0, #4294967295
 800a144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a148:	3501      	adds	r5, #1
 800a14a:	e7c4      	b.n	800a0d6 <_printf_common+0x3e>
 800a14c:	2030      	movs	r0, #48	; 0x30
 800a14e:	18e1      	adds	r1, r4, r3
 800a150:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a154:	1c5a      	adds	r2, r3, #1
 800a156:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a15a:	4422      	add	r2, r4
 800a15c:	3302      	adds	r3, #2
 800a15e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a162:	e7c5      	b.n	800a0f0 <_printf_common+0x58>
 800a164:	2301      	movs	r3, #1
 800a166:	4622      	mov	r2, r4
 800a168:	4649      	mov	r1, r9
 800a16a:	4638      	mov	r0, r7
 800a16c:	47c0      	blx	r8
 800a16e:	3001      	adds	r0, #1
 800a170:	d0e6      	beq.n	800a140 <_printf_common+0xa8>
 800a172:	3601      	adds	r6, #1
 800a174:	e7d9      	b.n	800a12a <_printf_common+0x92>
	...

0800a178 <_printf_i>:
 800a178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a17c:	460c      	mov	r4, r1
 800a17e:	7e27      	ldrb	r7, [r4, #24]
 800a180:	4691      	mov	r9, r2
 800a182:	2f78      	cmp	r7, #120	; 0x78
 800a184:	4680      	mov	r8, r0
 800a186:	469a      	mov	sl, r3
 800a188:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a18a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a18e:	d807      	bhi.n	800a1a0 <_printf_i+0x28>
 800a190:	2f62      	cmp	r7, #98	; 0x62
 800a192:	d80a      	bhi.n	800a1aa <_printf_i+0x32>
 800a194:	2f00      	cmp	r7, #0
 800a196:	f000 80d9 	beq.w	800a34c <_printf_i+0x1d4>
 800a19a:	2f58      	cmp	r7, #88	; 0x58
 800a19c:	f000 80a4 	beq.w	800a2e8 <_printf_i+0x170>
 800a1a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a1a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1a8:	e03a      	b.n	800a220 <_printf_i+0xa8>
 800a1aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1ae:	2b15      	cmp	r3, #21
 800a1b0:	d8f6      	bhi.n	800a1a0 <_printf_i+0x28>
 800a1b2:	a001      	add	r0, pc, #4	; (adr r0, 800a1b8 <_printf_i+0x40>)
 800a1b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a1b8:	0800a211 	.word	0x0800a211
 800a1bc:	0800a225 	.word	0x0800a225
 800a1c0:	0800a1a1 	.word	0x0800a1a1
 800a1c4:	0800a1a1 	.word	0x0800a1a1
 800a1c8:	0800a1a1 	.word	0x0800a1a1
 800a1cc:	0800a1a1 	.word	0x0800a1a1
 800a1d0:	0800a225 	.word	0x0800a225
 800a1d4:	0800a1a1 	.word	0x0800a1a1
 800a1d8:	0800a1a1 	.word	0x0800a1a1
 800a1dc:	0800a1a1 	.word	0x0800a1a1
 800a1e0:	0800a1a1 	.word	0x0800a1a1
 800a1e4:	0800a333 	.word	0x0800a333
 800a1e8:	0800a255 	.word	0x0800a255
 800a1ec:	0800a315 	.word	0x0800a315
 800a1f0:	0800a1a1 	.word	0x0800a1a1
 800a1f4:	0800a1a1 	.word	0x0800a1a1
 800a1f8:	0800a355 	.word	0x0800a355
 800a1fc:	0800a1a1 	.word	0x0800a1a1
 800a200:	0800a255 	.word	0x0800a255
 800a204:	0800a1a1 	.word	0x0800a1a1
 800a208:	0800a1a1 	.word	0x0800a1a1
 800a20c:	0800a31d 	.word	0x0800a31d
 800a210:	680b      	ldr	r3, [r1, #0]
 800a212:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a216:	1d1a      	adds	r2, r3, #4
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	600a      	str	r2, [r1, #0]
 800a21c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a220:	2301      	movs	r3, #1
 800a222:	e0a4      	b.n	800a36e <_printf_i+0x1f6>
 800a224:	6825      	ldr	r5, [r4, #0]
 800a226:	6808      	ldr	r0, [r1, #0]
 800a228:	062e      	lsls	r6, r5, #24
 800a22a:	f100 0304 	add.w	r3, r0, #4
 800a22e:	d50a      	bpl.n	800a246 <_printf_i+0xce>
 800a230:	6805      	ldr	r5, [r0, #0]
 800a232:	600b      	str	r3, [r1, #0]
 800a234:	2d00      	cmp	r5, #0
 800a236:	da03      	bge.n	800a240 <_printf_i+0xc8>
 800a238:	232d      	movs	r3, #45	; 0x2d
 800a23a:	426d      	negs	r5, r5
 800a23c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a240:	230a      	movs	r3, #10
 800a242:	485e      	ldr	r0, [pc, #376]	; (800a3bc <_printf_i+0x244>)
 800a244:	e019      	b.n	800a27a <_printf_i+0x102>
 800a246:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a24a:	6805      	ldr	r5, [r0, #0]
 800a24c:	600b      	str	r3, [r1, #0]
 800a24e:	bf18      	it	ne
 800a250:	b22d      	sxthne	r5, r5
 800a252:	e7ef      	b.n	800a234 <_printf_i+0xbc>
 800a254:	680b      	ldr	r3, [r1, #0]
 800a256:	6825      	ldr	r5, [r4, #0]
 800a258:	1d18      	adds	r0, r3, #4
 800a25a:	6008      	str	r0, [r1, #0]
 800a25c:	0628      	lsls	r0, r5, #24
 800a25e:	d501      	bpl.n	800a264 <_printf_i+0xec>
 800a260:	681d      	ldr	r5, [r3, #0]
 800a262:	e002      	b.n	800a26a <_printf_i+0xf2>
 800a264:	0669      	lsls	r1, r5, #25
 800a266:	d5fb      	bpl.n	800a260 <_printf_i+0xe8>
 800a268:	881d      	ldrh	r5, [r3, #0]
 800a26a:	2f6f      	cmp	r7, #111	; 0x6f
 800a26c:	bf0c      	ite	eq
 800a26e:	2308      	moveq	r3, #8
 800a270:	230a      	movne	r3, #10
 800a272:	4852      	ldr	r0, [pc, #328]	; (800a3bc <_printf_i+0x244>)
 800a274:	2100      	movs	r1, #0
 800a276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a27a:	6866      	ldr	r6, [r4, #4]
 800a27c:	2e00      	cmp	r6, #0
 800a27e:	bfa8      	it	ge
 800a280:	6821      	ldrge	r1, [r4, #0]
 800a282:	60a6      	str	r6, [r4, #8]
 800a284:	bfa4      	itt	ge
 800a286:	f021 0104 	bicge.w	r1, r1, #4
 800a28a:	6021      	strge	r1, [r4, #0]
 800a28c:	b90d      	cbnz	r5, 800a292 <_printf_i+0x11a>
 800a28e:	2e00      	cmp	r6, #0
 800a290:	d04d      	beq.n	800a32e <_printf_i+0x1b6>
 800a292:	4616      	mov	r6, r2
 800a294:	fbb5 f1f3 	udiv	r1, r5, r3
 800a298:	fb03 5711 	mls	r7, r3, r1, r5
 800a29c:	5dc7      	ldrb	r7, [r0, r7]
 800a29e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2a2:	462f      	mov	r7, r5
 800a2a4:	42bb      	cmp	r3, r7
 800a2a6:	460d      	mov	r5, r1
 800a2a8:	d9f4      	bls.n	800a294 <_printf_i+0x11c>
 800a2aa:	2b08      	cmp	r3, #8
 800a2ac:	d10b      	bne.n	800a2c6 <_printf_i+0x14e>
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	07df      	lsls	r7, r3, #31
 800a2b2:	d508      	bpl.n	800a2c6 <_printf_i+0x14e>
 800a2b4:	6923      	ldr	r3, [r4, #16]
 800a2b6:	6861      	ldr	r1, [r4, #4]
 800a2b8:	4299      	cmp	r1, r3
 800a2ba:	bfde      	ittt	le
 800a2bc:	2330      	movle	r3, #48	; 0x30
 800a2be:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a2c6:	1b92      	subs	r2, r2, r6
 800a2c8:	6122      	str	r2, [r4, #16]
 800a2ca:	464b      	mov	r3, r9
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4640      	mov	r0, r8
 800a2d0:	f8cd a000 	str.w	sl, [sp]
 800a2d4:	aa03      	add	r2, sp, #12
 800a2d6:	f7ff fedf 	bl	800a098 <_printf_common>
 800a2da:	3001      	adds	r0, #1
 800a2dc:	d14c      	bne.n	800a378 <_printf_i+0x200>
 800a2de:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e2:	b004      	add	sp, #16
 800a2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e8:	4834      	ldr	r0, [pc, #208]	; (800a3bc <_printf_i+0x244>)
 800a2ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a2ee:	680e      	ldr	r6, [r1, #0]
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a2f6:	061f      	lsls	r7, r3, #24
 800a2f8:	600e      	str	r6, [r1, #0]
 800a2fa:	d514      	bpl.n	800a326 <_printf_i+0x1ae>
 800a2fc:	07d9      	lsls	r1, r3, #31
 800a2fe:	bf44      	itt	mi
 800a300:	f043 0320 	orrmi.w	r3, r3, #32
 800a304:	6023      	strmi	r3, [r4, #0]
 800a306:	b91d      	cbnz	r5, 800a310 <_printf_i+0x198>
 800a308:	6823      	ldr	r3, [r4, #0]
 800a30a:	f023 0320 	bic.w	r3, r3, #32
 800a30e:	6023      	str	r3, [r4, #0]
 800a310:	2310      	movs	r3, #16
 800a312:	e7af      	b.n	800a274 <_printf_i+0xfc>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	f043 0320 	orr.w	r3, r3, #32
 800a31a:	6023      	str	r3, [r4, #0]
 800a31c:	2378      	movs	r3, #120	; 0x78
 800a31e:	4828      	ldr	r0, [pc, #160]	; (800a3c0 <_printf_i+0x248>)
 800a320:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a324:	e7e3      	b.n	800a2ee <_printf_i+0x176>
 800a326:	065e      	lsls	r6, r3, #25
 800a328:	bf48      	it	mi
 800a32a:	b2ad      	uxthmi	r5, r5
 800a32c:	e7e6      	b.n	800a2fc <_printf_i+0x184>
 800a32e:	4616      	mov	r6, r2
 800a330:	e7bb      	b.n	800a2aa <_printf_i+0x132>
 800a332:	680b      	ldr	r3, [r1, #0]
 800a334:	6826      	ldr	r6, [r4, #0]
 800a336:	1d1d      	adds	r5, r3, #4
 800a338:	6960      	ldr	r0, [r4, #20]
 800a33a:	600d      	str	r5, [r1, #0]
 800a33c:	0635      	lsls	r5, r6, #24
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	d501      	bpl.n	800a346 <_printf_i+0x1ce>
 800a342:	6018      	str	r0, [r3, #0]
 800a344:	e002      	b.n	800a34c <_printf_i+0x1d4>
 800a346:	0671      	lsls	r1, r6, #25
 800a348:	d5fb      	bpl.n	800a342 <_printf_i+0x1ca>
 800a34a:	8018      	strh	r0, [r3, #0]
 800a34c:	2300      	movs	r3, #0
 800a34e:	4616      	mov	r6, r2
 800a350:	6123      	str	r3, [r4, #16]
 800a352:	e7ba      	b.n	800a2ca <_printf_i+0x152>
 800a354:	680b      	ldr	r3, [r1, #0]
 800a356:	1d1a      	adds	r2, r3, #4
 800a358:	600a      	str	r2, [r1, #0]
 800a35a:	681e      	ldr	r6, [r3, #0]
 800a35c:	2100      	movs	r1, #0
 800a35e:	4630      	mov	r0, r6
 800a360:	6862      	ldr	r2, [r4, #4]
 800a362:	f000 fa9d 	bl	800a8a0 <memchr>
 800a366:	b108      	cbz	r0, 800a36c <_printf_i+0x1f4>
 800a368:	1b80      	subs	r0, r0, r6
 800a36a:	6060      	str	r0, [r4, #4]
 800a36c:	6863      	ldr	r3, [r4, #4]
 800a36e:	6123      	str	r3, [r4, #16]
 800a370:	2300      	movs	r3, #0
 800a372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a376:	e7a8      	b.n	800a2ca <_printf_i+0x152>
 800a378:	4632      	mov	r2, r6
 800a37a:	4649      	mov	r1, r9
 800a37c:	4640      	mov	r0, r8
 800a37e:	6923      	ldr	r3, [r4, #16]
 800a380:	47d0      	blx	sl
 800a382:	3001      	adds	r0, #1
 800a384:	d0ab      	beq.n	800a2de <_printf_i+0x166>
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	079b      	lsls	r3, r3, #30
 800a38a:	d413      	bmi.n	800a3b4 <_printf_i+0x23c>
 800a38c:	68e0      	ldr	r0, [r4, #12]
 800a38e:	9b03      	ldr	r3, [sp, #12]
 800a390:	4298      	cmp	r0, r3
 800a392:	bfb8      	it	lt
 800a394:	4618      	movlt	r0, r3
 800a396:	e7a4      	b.n	800a2e2 <_printf_i+0x16a>
 800a398:	2301      	movs	r3, #1
 800a39a:	4632      	mov	r2, r6
 800a39c:	4649      	mov	r1, r9
 800a39e:	4640      	mov	r0, r8
 800a3a0:	47d0      	blx	sl
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	d09b      	beq.n	800a2de <_printf_i+0x166>
 800a3a6:	3501      	adds	r5, #1
 800a3a8:	68e3      	ldr	r3, [r4, #12]
 800a3aa:	9903      	ldr	r1, [sp, #12]
 800a3ac:	1a5b      	subs	r3, r3, r1
 800a3ae:	42ab      	cmp	r3, r5
 800a3b0:	dcf2      	bgt.n	800a398 <_printf_i+0x220>
 800a3b2:	e7eb      	b.n	800a38c <_printf_i+0x214>
 800a3b4:	2500      	movs	r5, #0
 800a3b6:	f104 0619 	add.w	r6, r4, #25
 800a3ba:	e7f5      	b.n	800a3a8 <_printf_i+0x230>
 800a3bc:	0800ab0d 	.word	0x0800ab0d
 800a3c0:	0800ab1e 	.word	0x0800ab1e

0800a3c4 <_sbrk_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	4d05      	ldr	r5, [pc, #20]	; (800a3e0 <_sbrk_r+0x1c>)
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	602b      	str	r3, [r5, #0]
 800a3d0:	f7f6 ff4a 	bl	8001268 <_sbrk>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d102      	bne.n	800a3de <_sbrk_r+0x1a>
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	b103      	cbz	r3, 800a3de <_sbrk_r+0x1a>
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	20001594 	.word	0x20001594

0800a3e4 <__sread>:
 800a3e4:	b510      	push	{r4, lr}
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ec:	f000 fabe 	bl	800a96c <_read_r>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	bfab      	itete	ge
 800a3f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a3f8:	181b      	addge	r3, r3, r0
 800a3fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3fe:	bfac      	ite	ge
 800a400:	6563      	strge	r3, [r4, #84]	; 0x54
 800a402:	81a3      	strhlt	r3, [r4, #12]
 800a404:	bd10      	pop	{r4, pc}

0800a406 <__swrite>:
 800a406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40a:	461f      	mov	r7, r3
 800a40c:	898b      	ldrh	r3, [r1, #12]
 800a40e:	4605      	mov	r5, r0
 800a410:	05db      	lsls	r3, r3, #23
 800a412:	460c      	mov	r4, r1
 800a414:	4616      	mov	r6, r2
 800a416:	d505      	bpl.n	800a424 <__swrite+0x1e>
 800a418:	2302      	movs	r3, #2
 800a41a:	2200      	movs	r2, #0
 800a41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a420:	f000 f9c8 	bl	800a7b4 <_lseek_r>
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	4632      	mov	r2, r6
 800a428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a42c:	81a3      	strh	r3, [r4, #12]
 800a42e:	4628      	mov	r0, r5
 800a430:	463b      	mov	r3, r7
 800a432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a43a:	f000 b869 	b.w	800a510 <_write_r>

0800a43e <__sseek>:
 800a43e:	b510      	push	{r4, lr}
 800a440:	460c      	mov	r4, r1
 800a442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a446:	f000 f9b5 	bl	800a7b4 <_lseek_r>
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	bf15      	itete	ne
 800a450:	6560      	strne	r0, [r4, #84]	; 0x54
 800a452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a45a:	81a3      	strheq	r3, [r4, #12]
 800a45c:	bf18      	it	ne
 800a45e:	81a3      	strhne	r3, [r4, #12]
 800a460:	bd10      	pop	{r4, pc}

0800a462 <__sclose>:
 800a462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a466:	f000 b8d3 	b.w	800a610 <_close_r>
	...

0800a46c <__swbuf_r>:
 800a46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46e:	460e      	mov	r6, r1
 800a470:	4614      	mov	r4, r2
 800a472:	4605      	mov	r5, r0
 800a474:	b118      	cbz	r0, 800a47e <__swbuf_r+0x12>
 800a476:	6983      	ldr	r3, [r0, #24]
 800a478:	b90b      	cbnz	r3, 800a47e <__swbuf_r+0x12>
 800a47a:	f7ff fbbb 	bl	8009bf4 <__sinit>
 800a47e:	4b21      	ldr	r3, [pc, #132]	; (800a504 <__swbuf_r+0x98>)
 800a480:	429c      	cmp	r4, r3
 800a482:	d12b      	bne.n	800a4dc <__swbuf_r+0x70>
 800a484:	686c      	ldr	r4, [r5, #4]
 800a486:	69a3      	ldr	r3, [r4, #24]
 800a488:	60a3      	str	r3, [r4, #8]
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	071a      	lsls	r2, r3, #28
 800a48e:	d52f      	bpl.n	800a4f0 <__swbuf_r+0x84>
 800a490:	6923      	ldr	r3, [r4, #16]
 800a492:	b36b      	cbz	r3, 800a4f0 <__swbuf_r+0x84>
 800a494:	6923      	ldr	r3, [r4, #16]
 800a496:	6820      	ldr	r0, [r4, #0]
 800a498:	b2f6      	uxtb	r6, r6
 800a49a:	1ac0      	subs	r0, r0, r3
 800a49c:	6963      	ldr	r3, [r4, #20]
 800a49e:	4637      	mov	r7, r6
 800a4a0:	4283      	cmp	r3, r0
 800a4a2:	dc04      	bgt.n	800a4ae <__swbuf_r+0x42>
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f000 f948 	bl	800a73c <_fflush_r>
 800a4ac:	bb30      	cbnz	r0, 800a4fc <__swbuf_r+0x90>
 800a4ae:	68a3      	ldr	r3, [r4, #8]
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	60a3      	str	r3, [r4, #8]
 800a4b6:	6823      	ldr	r3, [r4, #0]
 800a4b8:	1c5a      	adds	r2, r3, #1
 800a4ba:	6022      	str	r2, [r4, #0]
 800a4bc:	701e      	strb	r6, [r3, #0]
 800a4be:	6963      	ldr	r3, [r4, #20]
 800a4c0:	4283      	cmp	r3, r0
 800a4c2:	d004      	beq.n	800a4ce <__swbuf_r+0x62>
 800a4c4:	89a3      	ldrh	r3, [r4, #12]
 800a4c6:	07db      	lsls	r3, r3, #31
 800a4c8:	d506      	bpl.n	800a4d8 <__swbuf_r+0x6c>
 800a4ca:	2e0a      	cmp	r6, #10
 800a4cc:	d104      	bne.n	800a4d8 <__swbuf_r+0x6c>
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f000 f933 	bl	800a73c <_fflush_r>
 800a4d6:	b988      	cbnz	r0, 800a4fc <__swbuf_r+0x90>
 800a4d8:	4638      	mov	r0, r7
 800a4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4dc:	4b0a      	ldr	r3, [pc, #40]	; (800a508 <__swbuf_r+0x9c>)
 800a4de:	429c      	cmp	r4, r3
 800a4e0:	d101      	bne.n	800a4e6 <__swbuf_r+0x7a>
 800a4e2:	68ac      	ldr	r4, [r5, #8]
 800a4e4:	e7cf      	b.n	800a486 <__swbuf_r+0x1a>
 800a4e6:	4b09      	ldr	r3, [pc, #36]	; (800a50c <__swbuf_r+0xa0>)
 800a4e8:	429c      	cmp	r4, r3
 800a4ea:	bf08      	it	eq
 800a4ec:	68ec      	ldreq	r4, [r5, #12]
 800a4ee:	e7ca      	b.n	800a486 <__swbuf_r+0x1a>
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f000 f81e 	bl	800a534 <__swsetup_r>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d0cb      	beq.n	800a494 <__swbuf_r+0x28>
 800a4fc:	f04f 37ff 	mov.w	r7, #4294967295
 800a500:	e7ea      	b.n	800a4d8 <__swbuf_r+0x6c>
 800a502:	bf00      	nop
 800a504:	0800aabc 	.word	0x0800aabc
 800a508:	0800aadc 	.word	0x0800aadc
 800a50c:	0800aa9c 	.word	0x0800aa9c

0800a510 <_write_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4604      	mov	r4, r0
 800a514:	4608      	mov	r0, r1
 800a516:	4611      	mov	r1, r2
 800a518:	2200      	movs	r2, #0
 800a51a:	4d05      	ldr	r5, [pc, #20]	; (800a530 <_write_r+0x20>)
 800a51c:	602a      	str	r2, [r5, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	f7f6 fe55 	bl	80011ce <_write>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d102      	bne.n	800a52e <_write_r+0x1e>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	b103      	cbz	r3, 800a52e <_write_r+0x1e>
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	bd38      	pop	{r3, r4, r5, pc}
 800a530:	20001594 	.word	0x20001594

0800a534 <__swsetup_r>:
 800a534:	4b32      	ldr	r3, [pc, #200]	; (800a600 <__swsetup_r+0xcc>)
 800a536:	b570      	push	{r4, r5, r6, lr}
 800a538:	681d      	ldr	r5, [r3, #0]
 800a53a:	4606      	mov	r6, r0
 800a53c:	460c      	mov	r4, r1
 800a53e:	b125      	cbz	r5, 800a54a <__swsetup_r+0x16>
 800a540:	69ab      	ldr	r3, [r5, #24]
 800a542:	b913      	cbnz	r3, 800a54a <__swsetup_r+0x16>
 800a544:	4628      	mov	r0, r5
 800a546:	f7ff fb55 	bl	8009bf4 <__sinit>
 800a54a:	4b2e      	ldr	r3, [pc, #184]	; (800a604 <__swsetup_r+0xd0>)
 800a54c:	429c      	cmp	r4, r3
 800a54e:	d10f      	bne.n	800a570 <__swsetup_r+0x3c>
 800a550:	686c      	ldr	r4, [r5, #4]
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a558:	0719      	lsls	r1, r3, #28
 800a55a:	d42c      	bmi.n	800a5b6 <__swsetup_r+0x82>
 800a55c:	06dd      	lsls	r5, r3, #27
 800a55e:	d411      	bmi.n	800a584 <__swsetup_r+0x50>
 800a560:	2309      	movs	r3, #9
 800a562:	6033      	str	r3, [r6, #0]
 800a564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a568:	f04f 30ff 	mov.w	r0, #4294967295
 800a56c:	81a3      	strh	r3, [r4, #12]
 800a56e:	e03e      	b.n	800a5ee <__swsetup_r+0xba>
 800a570:	4b25      	ldr	r3, [pc, #148]	; (800a608 <__swsetup_r+0xd4>)
 800a572:	429c      	cmp	r4, r3
 800a574:	d101      	bne.n	800a57a <__swsetup_r+0x46>
 800a576:	68ac      	ldr	r4, [r5, #8]
 800a578:	e7eb      	b.n	800a552 <__swsetup_r+0x1e>
 800a57a:	4b24      	ldr	r3, [pc, #144]	; (800a60c <__swsetup_r+0xd8>)
 800a57c:	429c      	cmp	r4, r3
 800a57e:	bf08      	it	eq
 800a580:	68ec      	ldreq	r4, [r5, #12]
 800a582:	e7e6      	b.n	800a552 <__swsetup_r+0x1e>
 800a584:	0758      	lsls	r0, r3, #29
 800a586:	d512      	bpl.n	800a5ae <__swsetup_r+0x7a>
 800a588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a58a:	b141      	cbz	r1, 800a59e <__swsetup_r+0x6a>
 800a58c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a590:	4299      	cmp	r1, r3
 800a592:	d002      	beq.n	800a59a <__swsetup_r+0x66>
 800a594:	4630      	mov	r0, r6
 800a596:	f000 f99d 	bl	800a8d4 <_free_r>
 800a59a:	2300      	movs	r3, #0
 800a59c:	6363      	str	r3, [r4, #52]	; 0x34
 800a59e:	89a3      	ldrh	r3, [r4, #12]
 800a5a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5a4:	81a3      	strh	r3, [r4, #12]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	6063      	str	r3, [r4, #4]
 800a5aa:	6923      	ldr	r3, [r4, #16]
 800a5ac:	6023      	str	r3, [r4, #0]
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	f043 0308 	orr.w	r3, r3, #8
 800a5b4:	81a3      	strh	r3, [r4, #12]
 800a5b6:	6923      	ldr	r3, [r4, #16]
 800a5b8:	b94b      	cbnz	r3, 800a5ce <__swsetup_r+0x9a>
 800a5ba:	89a3      	ldrh	r3, [r4, #12]
 800a5bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5c4:	d003      	beq.n	800a5ce <__swsetup_r+0x9a>
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f000 f929 	bl	800a820 <__smakebuf_r>
 800a5ce:	89a0      	ldrh	r0, [r4, #12]
 800a5d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5d4:	f010 0301 	ands.w	r3, r0, #1
 800a5d8:	d00a      	beq.n	800a5f0 <__swsetup_r+0xbc>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60a3      	str	r3, [r4, #8]
 800a5de:	6963      	ldr	r3, [r4, #20]
 800a5e0:	425b      	negs	r3, r3
 800a5e2:	61a3      	str	r3, [r4, #24]
 800a5e4:	6923      	ldr	r3, [r4, #16]
 800a5e6:	b943      	cbnz	r3, 800a5fa <__swsetup_r+0xc6>
 800a5e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5ec:	d1ba      	bne.n	800a564 <__swsetup_r+0x30>
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}
 800a5f0:	0781      	lsls	r1, r0, #30
 800a5f2:	bf58      	it	pl
 800a5f4:	6963      	ldrpl	r3, [r4, #20]
 800a5f6:	60a3      	str	r3, [r4, #8]
 800a5f8:	e7f4      	b.n	800a5e4 <__swsetup_r+0xb0>
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	e7f7      	b.n	800a5ee <__swsetup_r+0xba>
 800a5fe:	bf00      	nop
 800a600:	200001c0 	.word	0x200001c0
 800a604:	0800aabc 	.word	0x0800aabc
 800a608:	0800aadc 	.word	0x0800aadc
 800a60c:	0800aa9c 	.word	0x0800aa9c

0800a610 <_close_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	2300      	movs	r3, #0
 800a614:	4d05      	ldr	r5, [pc, #20]	; (800a62c <_close_r+0x1c>)
 800a616:	4604      	mov	r4, r0
 800a618:	4608      	mov	r0, r1
 800a61a:	602b      	str	r3, [r5, #0]
 800a61c:	f7f6 fdf3 	bl	8001206 <_close>
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d102      	bne.n	800a62a <_close_r+0x1a>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	b103      	cbz	r3, 800a62a <_close_r+0x1a>
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	20001594 	.word	0x20001594

0800a630 <__sflush_r>:
 800a630:	898a      	ldrh	r2, [r1, #12]
 800a632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a636:	4605      	mov	r5, r0
 800a638:	0710      	lsls	r0, r2, #28
 800a63a:	460c      	mov	r4, r1
 800a63c:	d458      	bmi.n	800a6f0 <__sflush_r+0xc0>
 800a63e:	684b      	ldr	r3, [r1, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	dc05      	bgt.n	800a650 <__sflush_r+0x20>
 800a644:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a646:	2b00      	cmp	r3, #0
 800a648:	dc02      	bgt.n	800a650 <__sflush_r+0x20>
 800a64a:	2000      	movs	r0, #0
 800a64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a652:	2e00      	cmp	r6, #0
 800a654:	d0f9      	beq.n	800a64a <__sflush_r+0x1a>
 800a656:	2300      	movs	r3, #0
 800a658:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a65c:	682f      	ldr	r7, [r5, #0]
 800a65e:	602b      	str	r3, [r5, #0]
 800a660:	d032      	beq.n	800a6c8 <__sflush_r+0x98>
 800a662:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	075a      	lsls	r2, r3, #29
 800a668:	d505      	bpl.n	800a676 <__sflush_r+0x46>
 800a66a:	6863      	ldr	r3, [r4, #4]
 800a66c:	1ac0      	subs	r0, r0, r3
 800a66e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a670:	b10b      	cbz	r3, 800a676 <__sflush_r+0x46>
 800a672:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a674:	1ac0      	subs	r0, r0, r3
 800a676:	2300      	movs	r3, #0
 800a678:	4602      	mov	r2, r0
 800a67a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a67c:	4628      	mov	r0, r5
 800a67e:	6a21      	ldr	r1, [r4, #32]
 800a680:	47b0      	blx	r6
 800a682:	1c43      	adds	r3, r0, #1
 800a684:	89a3      	ldrh	r3, [r4, #12]
 800a686:	d106      	bne.n	800a696 <__sflush_r+0x66>
 800a688:	6829      	ldr	r1, [r5, #0]
 800a68a:	291d      	cmp	r1, #29
 800a68c:	d82c      	bhi.n	800a6e8 <__sflush_r+0xb8>
 800a68e:	4a2a      	ldr	r2, [pc, #168]	; (800a738 <__sflush_r+0x108>)
 800a690:	40ca      	lsrs	r2, r1
 800a692:	07d6      	lsls	r6, r2, #31
 800a694:	d528      	bpl.n	800a6e8 <__sflush_r+0xb8>
 800a696:	2200      	movs	r2, #0
 800a698:	6062      	str	r2, [r4, #4]
 800a69a:	6922      	ldr	r2, [r4, #16]
 800a69c:	04d9      	lsls	r1, r3, #19
 800a69e:	6022      	str	r2, [r4, #0]
 800a6a0:	d504      	bpl.n	800a6ac <__sflush_r+0x7c>
 800a6a2:	1c42      	adds	r2, r0, #1
 800a6a4:	d101      	bne.n	800a6aa <__sflush_r+0x7a>
 800a6a6:	682b      	ldr	r3, [r5, #0]
 800a6a8:	b903      	cbnz	r3, 800a6ac <__sflush_r+0x7c>
 800a6aa:	6560      	str	r0, [r4, #84]	; 0x54
 800a6ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6ae:	602f      	str	r7, [r5, #0]
 800a6b0:	2900      	cmp	r1, #0
 800a6b2:	d0ca      	beq.n	800a64a <__sflush_r+0x1a>
 800a6b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6b8:	4299      	cmp	r1, r3
 800a6ba:	d002      	beq.n	800a6c2 <__sflush_r+0x92>
 800a6bc:	4628      	mov	r0, r5
 800a6be:	f000 f909 	bl	800a8d4 <_free_r>
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	6360      	str	r0, [r4, #52]	; 0x34
 800a6c6:	e7c1      	b.n	800a64c <__sflush_r+0x1c>
 800a6c8:	6a21      	ldr	r1, [r4, #32]
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	47b0      	blx	r6
 800a6d0:	1c41      	adds	r1, r0, #1
 800a6d2:	d1c7      	bne.n	800a664 <__sflush_r+0x34>
 800a6d4:	682b      	ldr	r3, [r5, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d0c4      	beq.n	800a664 <__sflush_r+0x34>
 800a6da:	2b1d      	cmp	r3, #29
 800a6dc:	d001      	beq.n	800a6e2 <__sflush_r+0xb2>
 800a6de:	2b16      	cmp	r3, #22
 800a6e0:	d101      	bne.n	800a6e6 <__sflush_r+0xb6>
 800a6e2:	602f      	str	r7, [r5, #0]
 800a6e4:	e7b1      	b.n	800a64a <__sflush_r+0x1a>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6ec:	81a3      	strh	r3, [r4, #12]
 800a6ee:	e7ad      	b.n	800a64c <__sflush_r+0x1c>
 800a6f0:	690f      	ldr	r7, [r1, #16]
 800a6f2:	2f00      	cmp	r7, #0
 800a6f4:	d0a9      	beq.n	800a64a <__sflush_r+0x1a>
 800a6f6:	0793      	lsls	r3, r2, #30
 800a6f8:	bf18      	it	ne
 800a6fa:	2300      	movne	r3, #0
 800a6fc:	680e      	ldr	r6, [r1, #0]
 800a6fe:	bf08      	it	eq
 800a700:	694b      	ldreq	r3, [r1, #20]
 800a702:	eba6 0807 	sub.w	r8, r6, r7
 800a706:	600f      	str	r7, [r1, #0]
 800a708:	608b      	str	r3, [r1, #8]
 800a70a:	f1b8 0f00 	cmp.w	r8, #0
 800a70e:	dd9c      	ble.n	800a64a <__sflush_r+0x1a>
 800a710:	4643      	mov	r3, r8
 800a712:	463a      	mov	r2, r7
 800a714:	4628      	mov	r0, r5
 800a716:	6a21      	ldr	r1, [r4, #32]
 800a718:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a71a:	47b0      	blx	r6
 800a71c:	2800      	cmp	r0, #0
 800a71e:	dc06      	bgt.n	800a72e <__sflush_r+0xfe>
 800a720:	89a3      	ldrh	r3, [r4, #12]
 800a722:	f04f 30ff 	mov.w	r0, #4294967295
 800a726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a72a:	81a3      	strh	r3, [r4, #12]
 800a72c:	e78e      	b.n	800a64c <__sflush_r+0x1c>
 800a72e:	4407      	add	r7, r0
 800a730:	eba8 0800 	sub.w	r8, r8, r0
 800a734:	e7e9      	b.n	800a70a <__sflush_r+0xda>
 800a736:	bf00      	nop
 800a738:	20400001 	.word	0x20400001

0800a73c <_fflush_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	690b      	ldr	r3, [r1, #16]
 800a740:	4605      	mov	r5, r0
 800a742:	460c      	mov	r4, r1
 800a744:	b913      	cbnz	r3, 800a74c <_fflush_r+0x10>
 800a746:	2500      	movs	r5, #0
 800a748:	4628      	mov	r0, r5
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	b118      	cbz	r0, 800a756 <_fflush_r+0x1a>
 800a74e:	6983      	ldr	r3, [r0, #24]
 800a750:	b90b      	cbnz	r3, 800a756 <_fflush_r+0x1a>
 800a752:	f7ff fa4f 	bl	8009bf4 <__sinit>
 800a756:	4b14      	ldr	r3, [pc, #80]	; (800a7a8 <_fflush_r+0x6c>)
 800a758:	429c      	cmp	r4, r3
 800a75a:	d11b      	bne.n	800a794 <_fflush_r+0x58>
 800a75c:	686c      	ldr	r4, [r5, #4]
 800a75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d0ef      	beq.n	800a746 <_fflush_r+0xa>
 800a766:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a768:	07d0      	lsls	r0, r2, #31
 800a76a:	d404      	bmi.n	800a776 <_fflush_r+0x3a>
 800a76c:	0599      	lsls	r1, r3, #22
 800a76e:	d402      	bmi.n	800a776 <_fflush_r+0x3a>
 800a770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a772:	f7ff fadd 	bl	8009d30 <__retarget_lock_acquire_recursive>
 800a776:	4628      	mov	r0, r5
 800a778:	4621      	mov	r1, r4
 800a77a:	f7ff ff59 	bl	800a630 <__sflush_r>
 800a77e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a780:	4605      	mov	r5, r0
 800a782:	07da      	lsls	r2, r3, #31
 800a784:	d4e0      	bmi.n	800a748 <_fflush_r+0xc>
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	059b      	lsls	r3, r3, #22
 800a78a:	d4dd      	bmi.n	800a748 <_fflush_r+0xc>
 800a78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a78e:	f7ff fad0 	bl	8009d32 <__retarget_lock_release_recursive>
 800a792:	e7d9      	b.n	800a748 <_fflush_r+0xc>
 800a794:	4b05      	ldr	r3, [pc, #20]	; (800a7ac <_fflush_r+0x70>)
 800a796:	429c      	cmp	r4, r3
 800a798:	d101      	bne.n	800a79e <_fflush_r+0x62>
 800a79a:	68ac      	ldr	r4, [r5, #8]
 800a79c:	e7df      	b.n	800a75e <_fflush_r+0x22>
 800a79e:	4b04      	ldr	r3, [pc, #16]	; (800a7b0 <_fflush_r+0x74>)
 800a7a0:	429c      	cmp	r4, r3
 800a7a2:	bf08      	it	eq
 800a7a4:	68ec      	ldreq	r4, [r5, #12]
 800a7a6:	e7da      	b.n	800a75e <_fflush_r+0x22>
 800a7a8:	0800aabc 	.word	0x0800aabc
 800a7ac:	0800aadc 	.word	0x0800aadc
 800a7b0:	0800aa9c 	.word	0x0800aa9c

0800a7b4 <_lseek_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	4608      	mov	r0, r1
 800a7ba:	4611      	mov	r1, r2
 800a7bc:	2200      	movs	r2, #0
 800a7be:	4d05      	ldr	r5, [pc, #20]	; (800a7d4 <_lseek_r+0x20>)
 800a7c0:	602a      	str	r2, [r5, #0]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	f7f6 fd43 	bl	800124e <_lseek>
 800a7c8:	1c43      	adds	r3, r0, #1
 800a7ca:	d102      	bne.n	800a7d2 <_lseek_r+0x1e>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	b103      	cbz	r3, 800a7d2 <_lseek_r+0x1e>
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
 800a7d4:	20001594 	.word	0x20001594

0800a7d8 <__swhatbuf_r>:
 800a7d8:	b570      	push	{r4, r5, r6, lr}
 800a7da:	460e      	mov	r6, r1
 800a7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e0:	4614      	mov	r4, r2
 800a7e2:	2900      	cmp	r1, #0
 800a7e4:	461d      	mov	r5, r3
 800a7e6:	b096      	sub	sp, #88	; 0x58
 800a7e8:	da07      	bge.n	800a7fa <__swhatbuf_r+0x22>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	602b      	str	r3, [r5, #0]
 800a7ee:	89b3      	ldrh	r3, [r6, #12]
 800a7f0:	061a      	lsls	r2, r3, #24
 800a7f2:	d410      	bmi.n	800a816 <__swhatbuf_r+0x3e>
 800a7f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7f8:	e00e      	b.n	800a818 <__swhatbuf_r+0x40>
 800a7fa:	466a      	mov	r2, sp
 800a7fc:	f000 f8c8 	bl	800a990 <_fstat_r>
 800a800:	2800      	cmp	r0, #0
 800a802:	dbf2      	blt.n	800a7ea <__swhatbuf_r+0x12>
 800a804:	9a01      	ldr	r2, [sp, #4]
 800a806:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a80a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a80e:	425a      	negs	r2, r3
 800a810:	415a      	adcs	r2, r3
 800a812:	602a      	str	r2, [r5, #0]
 800a814:	e7ee      	b.n	800a7f4 <__swhatbuf_r+0x1c>
 800a816:	2340      	movs	r3, #64	; 0x40
 800a818:	2000      	movs	r0, #0
 800a81a:	6023      	str	r3, [r4, #0]
 800a81c:	b016      	add	sp, #88	; 0x58
 800a81e:	bd70      	pop	{r4, r5, r6, pc}

0800a820 <__smakebuf_r>:
 800a820:	898b      	ldrh	r3, [r1, #12]
 800a822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a824:	079d      	lsls	r5, r3, #30
 800a826:	4606      	mov	r6, r0
 800a828:	460c      	mov	r4, r1
 800a82a:	d507      	bpl.n	800a83c <__smakebuf_r+0x1c>
 800a82c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	6123      	str	r3, [r4, #16]
 800a834:	2301      	movs	r3, #1
 800a836:	6163      	str	r3, [r4, #20]
 800a838:	b002      	add	sp, #8
 800a83a:	bd70      	pop	{r4, r5, r6, pc}
 800a83c:	466a      	mov	r2, sp
 800a83e:	ab01      	add	r3, sp, #4
 800a840:	f7ff ffca 	bl	800a7d8 <__swhatbuf_r>
 800a844:	9900      	ldr	r1, [sp, #0]
 800a846:	4605      	mov	r5, r0
 800a848:	4630      	mov	r0, r6
 800a84a:	f7ff fa73 	bl	8009d34 <_malloc_r>
 800a84e:	b948      	cbnz	r0, 800a864 <__smakebuf_r+0x44>
 800a850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a854:	059a      	lsls	r2, r3, #22
 800a856:	d4ef      	bmi.n	800a838 <__smakebuf_r+0x18>
 800a858:	f023 0303 	bic.w	r3, r3, #3
 800a85c:	f043 0302 	orr.w	r3, r3, #2
 800a860:	81a3      	strh	r3, [r4, #12]
 800a862:	e7e3      	b.n	800a82c <__smakebuf_r+0xc>
 800a864:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <__smakebuf_r+0x7c>)
 800a866:	62b3      	str	r3, [r6, #40]	; 0x28
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	6020      	str	r0, [r4, #0]
 800a86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a870:	81a3      	strh	r3, [r4, #12]
 800a872:	9b00      	ldr	r3, [sp, #0]
 800a874:	6120      	str	r0, [r4, #16]
 800a876:	6163      	str	r3, [r4, #20]
 800a878:	9b01      	ldr	r3, [sp, #4]
 800a87a:	b15b      	cbz	r3, 800a894 <__smakebuf_r+0x74>
 800a87c:	4630      	mov	r0, r6
 800a87e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a882:	f000 f897 	bl	800a9b4 <_isatty_r>
 800a886:	b128      	cbz	r0, 800a894 <__smakebuf_r+0x74>
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	f023 0303 	bic.w	r3, r3, #3
 800a88e:	f043 0301 	orr.w	r3, r3, #1
 800a892:	81a3      	strh	r3, [r4, #12]
 800a894:	89a0      	ldrh	r0, [r4, #12]
 800a896:	4305      	orrs	r5, r0
 800a898:	81a5      	strh	r5, [r4, #12]
 800a89a:	e7cd      	b.n	800a838 <__smakebuf_r+0x18>
 800a89c:	08009b8d 	.word	0x08009b8d

0800a8a0 <memchr>:
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	b510      	push	{r4, lr}
 800a8a4:	b2c9      	uxtb	r1, r1
 800a8a6:	4402      	add	r2, r0
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	d101      	bne.n	800a8b2 <memchr+0x12>
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	e003      	b.n	800a8ba <memchr+0x1a>
 800a8b2:	7804      	ldrb	r4, [r0, #0]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	428c      	cmp	r4, r1
 800a8b8:	d1f6      	bne.n	800a8a8 <memchr+0x8>
 800a8ba:	bd10      	pop	{r4, pc}

0800a8bc <__malloc_lock>:
 800a8bc:	4801      	ldr	r0, [pc, #4]	; (800a8c4 <__malloc_lock+0x8>)
 800a8be:	f7ff ba37 	b.w	8009d30 <__retarget_lock_acquire_recursive>
 800a8c2:	bf00      	nop
 800a8c4:	2000158c 	.word	0x2000158c

0800a8c8 <__malloc_unlock>:
 800a8c8:	4801      	ldr	r0, [pc, #4]	; (800a8d0 <__malloc_unlock+0x8>)
 800a8ca:	f7ff ba32 	b.w	8009d32 <__retarget_lock_release_recursive>
 800a8ce:	bf00      	nop
 800a8d0:	2000158c 	.word	0x2000158c

0800a8d4 <_free_r>:
 800a8d4:	b538      	push	{r3, r4, r5, lr}
 800a8d6:	4605      	mov	r5, r0
 800a8d8:	2900      	cmp	r1, #0
 800a8da:	d043      	beq.n	800a964 <_free_r+0x90>
 800a8dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e0:	1f0c      	subs	r4, r1, #4
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	bfb8      	it	lt
 800a8e6:	18e4      	addlt	r4, r4, r3
 800a8e8:	f7ff ffe8 	bl	800a8bc <__malloc_lock>
 800a8ec:	4a1e      	ldr	r2, [pc, #120]	; (800a968 <_free_r+0x94>)
 800a8ee:	6813      	ldr	r3, [r2, #0]
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	b933      	cbnz	r3, 800a902 <_free_r+0x2e>
 800a8f4:	6063      	str	r3, [r4, #4]
 800a8f6:	6014      	str	r4, [r2, #0]
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8fe:	f7ff bfe3 	b.w	800a8c8 <__malloc_unlock>
 800a902:	42a3      	cmp	r3, r4
 800a904:	d90a      	bls.n	800a91c <_free_r+0x48>
 800a906:	6821      	ldr	r1, [r4, #0]
 800a908:	1862      	adds	r2, r4, r1
 800a90a:	4293      	cmp	r3, r2
 800a90c:	bf01      	itttt	eq
 800a90e:	681a      	ldreq	r2, [r3, #0]
 800a910:	685b      	ldreq	r3, [r3, #4]
 800a912:	1852      	addeq	r2, r2, r1
 800a914:	6022      	streq	r2, [r4, #0]
 800a916:	6063      	str	r3, [r4, #4]
 800a918:	6004      	str	r4, [r0, #0]
 800a91a:	e7ed      	b.n	800a8f8 <_free_r+0x24>
 800a91c:	461a      	mov	r2, r3
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	b10b      	cbz	r3, 800a926 <_free_r+0x52>
 800a922:	42a3      	cmp	r3, r4
 800a924:	d9fa      	bls.n	800a91c <_free_r+0x48>
 800a926:	6811      	ldr	r1, [r2, #0]
 800a928:	1850      	adds	r0, r2, r1
 800a92a:	42a0      	cmp	r0, r4
 800a92c:	d10b      	bne.n	800a946 <_free_r+0x72>
 800a92e:	6820      	ldr	r0, [r4, #0]
 800a930:	4401      	add	r1, r0
 800a932:	1850      	adds	r0, r2, r1
 800a934:	4283      	cmp	r3, r0
 800a936:	6011      	str	r1, [r2, #0]
 800a938:	d1de      	bne.n	800a8f8 <_free_r+0x24>
 800a93a:	6818      	ldr	r0, [r3, #0]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	4401      	add	r1, r0
 800a940:	6011      	str	r1, [r2, #0]
 800a942:	6053      	str	r3, [r2, #4]
 800a944:	e7d8      	b.n	800a8f8 <_free_r+0x24>
 800a946:	d902      	bls.n	800a94e <_free_r+0x7a>
 800a948:	230c      	movs	r3, #12
 800a94a:	602b      	str	r3, [r5, #0]
 800a94c:	e7d4      	b.n	800a8f8 <_free_r+0x24>
 800a94e:	6820      	ldr	r0, [r4, #0]
 800a950:	1821      	adds	r1, r4, r0
 800a952:	428b      	cmp	r3, r1
 800a954:	bf01      	itttt	eq
 800a956:	6819      	ldreq	r1, [r3, #0]
 800a958:	685b      	ldreq	r3, [r3, #4]
 800a95a:	1809      	addeq	r1, r1, r0
 800a95c:	6021      	streq	r1, [r4, #0]
 800a95e:	6063      	str	r3, [r4, #4]
 800a960:	6054      	str	r4, [r2, #4]
 800a962:	e7c9      	b.n	800a8f8 <_free_r+0x24>
 800a964:	bd38      	pop	{r3, r4, r5, pc}
 800a966:	bf00      	nop
 800a968:	2000048c 	.word	0x2000048c

0800a96c <_read_r>:
 800a96c:	b538      	push	{r3, r4, r5, lr}
 800a96e:	4604      	mov	r4, r0
 800a970:	4608      	mov	r0, r1
 800a972:	4611      	mov	r1, r2
 800a974:	2200      	movs	r2, #0
 800a976:	4d05      	ldr	r5, [pc, #20]	; (800a98c <_read_r+0x20>)
 800a978:	602a      	str	r2, [r5, #0]
 800a97a:	461a      	mov	r2, r3
 800a97c:	f7f6 fc0a 	bl	8001194 <_read>
 800a980:	1c43      	adds	r3, r0, #1
 800a982:	d102      	bne.n	800a98a <_read_r+0x1e>
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	b103      	cbz	r3, 800a98a <_read_r+0x1e>
 800a988:	6023      	str	r3, [r4, #0]
 800a98a:	bd38      	pop	{r3, r4, r5, pc}
 800a98c:	20001594 	.word	0x20001594

0800a990 <_fstat_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	2300      	movs	r3, #0
 800a994:	4d06      	ldr	r5, [pc, #24]	; (800a9b0 <_fstat_r+0x20>)
 800a996:	4604      	mov	r4, r0
 800a998:	4608      	mov	r0, r1
 800a99a:	4611      	mov	r1, r2
 800a99c:	602b      	str	r3, [r5, #0]
 800a99e:	f7f6 fc3d 	bl	800121c <_fstat>
 800a9a2:	1c43      	adds	r3, r0, #1
 800a9a4:	d102      	bne.n	800a9ac <_fstat_r+0x1c>
 800a9a6:	682b      	ldr	r3, [r5, #0]
 800a9a8:	b103      	cbz	r3, 800a9ac <_fstat_r+0x1c>
 800a9aa:	6023      	str	r3, [r4, #0]
 800a9ac:	bd38      	pop	{r3, r4, r5, pc}
 800a9ae:	bf00      	nop
 800a9b0:	20001594 	.word	0x20001594

0800a9b4 <_isatty_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	4d05      	ldr	r5, [pc, #20]	; (800a9d0 <_isatty_r+0x1c>)
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	4608      	mov	r0, r1
 800a9be:	602b      	str	r3, [r5, #0]
 800a9c0:	f7f6 fc3b 	bl	800123a <_isatty>
 800a9c4:	1c43      	adds	r3, r0, #1
 800a9c6:	d102      	bne.n	800a9ce <_isatty_r+0x1a>
 800a9c8:	682b      	ldr	r3, [r5, #0]
 800a9ca:	b103      	cbz	r3, 800a9ce <_isatty_r+0x1a>
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	bd38      	pop	{r3, r4, r5, pc}
 800a9d0:	20001594 	.word	0x20001594

0800a9d4 <_init>:
 800a9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d6:	bf00      	nop
 800a9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9da:	bc08      	pop	{r3}
 800a9dc:	469e      	mov	lr, r3
 800a9de:	4770      	bx	lr

0800a9e0 <_fini>:
 800a9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e2:	bf00      	nop
 800a9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9e6:	bc08      	pop	{r3}
 800a9e8:	469e      	mov	lr, r3
 800a9ea:	4770      	bx	lr
