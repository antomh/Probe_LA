
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009294  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080093a0  080093a0  000193a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009538  08009538  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08009538  08009538  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009538  08009538  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009538  08009538  00019538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f2c  200001f4  08009734  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001120  08009734  00021120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1cf  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003dbf  00000000  00000000  0003c3ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001690  00000000  00000000  000401b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b8  00000000  00000000  00041840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001985f  00000000  00000000  00042cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014b00  00000000  00000000  0005c557  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ee53  00000000  00000000  00071057  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000efeaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065dc  00000000  00000000  000eff28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f4 	.word	0x200001f4
 8000128:	00000000 	.word	0x00000000
 800012c:	08009388 	.word	0x08009388

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f8 	.word	0x200001f8
 8000148:	08009388 	.word	0x08009388

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ToggleLDAC>:

// Ссылка на инициализированную переферию
//SPI_HandleTypeDef *hspi1;

// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2102      	movs	r1, #2
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <ToggleLDAC+0x1c>)
 8000166:	f002 f8fc 	bl	8002362 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 800016a:	2201      	movs	r2, #1
 800016c:	2102      	movs	r1, #2
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <ToggleLDAC+0x1c>)
 8000170:	f002 f8f7 	bl	8002362 <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800

0800017c <DAC_AD5322_Ch1>:

// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b086      	sub	sp, #24
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	807b      	strh	r3, [r7, #2]
	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000188:	887b      	ldrh	r3, [r7, #2]
 800018a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800018e:	d302      	bcc.n	8000196 <DAC_AD5322_Ch1+0x1a>
 8000190:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000194:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000196:	2300      	movs	r3, #0
 8000198:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 800019a:	2301      	movs	r3, #1
 800019c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 800019e:	2300      	movs	r3, #0
 80001a0:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 80001a2:	2300      	movs	r3, #0
 80001a4:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 80001a6:	8afb      	ldrh	r3, [r7, #22]
 80001a8:	03db      	lsls	r3, r3, #15
 80001aa:	b21a      	sxth	r2, r3
 80001ac:	8abb      	ldrh	r3, [r7, #20]
 80001ae:	039b      	lsls	r3, r3, #14
 80001b0:	b21b      	sxth	r3, r3
 80001b2:	4313      	orrs	r3, r2
 80001b4:	b21a      	sxth	r2, r3
 80001b6:	8a7b      	ldrh	r3, [r7, #18]
 80001b8:	035b      	lsls	r3, r3, #13
 80001ba:	b21b      	sxth	r3, r3
 80001bc:	4313      	orrs	r3, r2
 80001be:	b21a      	sxth	r2, r3
 80001c0:	8a3b      	ldrh	r3, [r7, #16]
 80001c2:	031b      	lsls	r3, r3, #12
 80001c4:	b21b      	sxth	r3, r3
 80001c6:	4313      	orrs	r3, r2
 80001c8:	b21b      	sxth	r3, r3
 80001ca:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 80001cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80001d0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80001d4:	f023 030f 	bic.w	r3, r3, #15
 80001d8:	b21a      	sxth	r2, r3
 80001da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80001de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80001e2:	b21b      	sxth	r3, r3
 80001e4:	4313      	orrs	r3, r2
 80001e6:	b21b      	sxth	r3, r3
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	81bb      	strh	r3, [r7, #12]

  	// Разрешение передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 80001ec:	2200      	movs	r2, #0
 80001ee:	2110      	movs	r1, #16
 80001f0:	480a      	ldr	r0, [pc, #40]	; (800021c <DAC_AD5322_Ch1+0xa0>)
 80001f2:	f002 f8b6 	bl	8002362 <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 80001f6:	f107 010c 	add.w	r1, r7, #12
 80001fa:	2301      	movs	r3, #1
 80001fc:	2201      	movs	r2, #1
 80001fe:	6878      	ldr	r0, [r7, #4]
 8000200:	f003 fd97 	bl	8003d32 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000204:	2201      	movs	r2, #1
 8000206:	2110      	movs	r1, #16
 8000208:	4804      	ldr	r0, [pc, #16]	; (800021c <DAC_AD5322_Ch1+0xa0>)
 800020a:	f002 f8aa 	bl	8002362 <HAL_GPIO_WritePin>

  	ToggleLDAC();
 800020e:	f7ff ffa5 	bl	800015c <ToggleLDAC>
}
 8000212:	bf00      	nop
 8000214:	3718      	adds	r7, #24
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010800 	.word	0x40010800

08000220 <DAC_AD5322_Ch2>:

// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	460b      	mov	r3, r1
 800022a:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 800022c:	887b      	ldrh	r3, [r7, #2]
 800022e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000232:	d302      	bcc.n	800023a <DAC_AD5322_Ch2+0x1a>
 8000234:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000238:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 800023a:	2301      	movs	r3, #1
 800023c:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 800023e:	2301      	movs	r3, #1
 8000240:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000242:	2300      	movs	r3, #0
 8000244:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000246:	2300      	movs	r3, #0
 8000248:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 800024a:	8afb      	ldrh	r3, [r7, #22]
 800024c:	03db      	lsls	r3, r3, #15
 800024e:	b21a      	sxth	r2, r3
 8000250:	8abb      	ldrh	r3, [r7, #20]
 8000252:	039b      	lsls	r3, r3, #14
 8000254:	b21b      	sxth	r3, r3
 8000256:	4313      	orrs	r3, r2
 8000258:	b21a      	sxth	r2, r3
 800025a:	8a7b      	ldrh	r3, [r7, #18]
 800025c:	035b      	lsls	r3, r3, #13
 800025e:	b21b      	sxth	r3, r3
 8000260:	4313      	orrs	r3, r2
 8000262:	b21a      	sxth	r2, r3
 8000264:	8a3b      	ldrh	r3, [r7, #16]
 8000266:	031b      	lsls	r3, r3, #12
 8000268:	b21b      	sxth	r3, r3
 800026a:	4313      	orrs	r3, r2
 800026c:	b21b      	sxth	r3, r3
 800026e:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000270:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000274:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000278:	f023 030f 	bic.w	r3, r3, #15
 800027c:	b21a      	sxth	r2, r3
 800027e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000286:	b21b      	sxth	r3, r3
 8000288:	4313      	orrs	r3, r2
 800028a:	b21b      	sxth	r3, r3
 800028c:	b29b      	uxth	r3, r3
 800028e:	81bb      	strh	r3, [r7, #12]

  	// Разрешение передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	2110      	movs	r1, #16
 8000294:	480a      	ldr	r0, [pc, #40]	; (80002c0 <DAC_AD5322_Ch2+0xa0>)
 8000296:	f002 f864 	bl	8002362 <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 800029a:	f107 010c 	add.w	r1, r7, #12
 800029e:	2301      	movs	r3, #1
 80002a0:	2201      	movs	r2, #1
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f003 fd45 	bl	8003d32 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2110      	movs	r1, #16
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <DAC_AD5322_Ch2+0xa0>)
 80002ae:	f002 f858 	bl	8002362 <HAL_GPIO_WritePin>

  	ToggleLDAC();
 80002b2:	f7ff ff53 	bl	800015c <ToggleLDAC>
}
 80002b6:	bf00      	nop
 80002b8:	3718      	adds	r7, #24
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40010800 	.word	0x40010800

080002c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002d4:	f003 0301 	and.w	r3, r3, #1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d013      	beq.n	8000304 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d00b      	beq.n	8000304 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002ec:	e000      	b.n	80002f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f9      	beq.n	80002ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	b2d2      	uxtb	r2, r2
 8000302:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000304:	687b      	ldr	r3, [r7, #4]
}
 8000306:	4618      	mov	r0, r3
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr

08000310 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <DWT_Init+0x24>)
 8000316:	68db      	ldr	r3, [r3, #12]
 8000318:	4a06      	ldr	r2, [pc, #24]	; (8000334 <DWT_Init+0x24>)
 800031a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800031e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <DWT_Init+0x28>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <DWT_Init+0x28>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	6013      	str	r3, [r2, #0]
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	e000edf0 	.word	0xe000edf0
 8000338:	e0001000 	.word	0xe0001000

0800033c <SetDacA>:
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

void SetDacA(uint16_t da) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	80fb      	strh	r3, [r7, #6]
	VDAC_A	= da;
 8000346:	4a06      	ldr	r2, [pc, #24]	; (8000360 <SetDacA+0x24>)
 8000348:	88fb      	ldrh	r3, [r7, #6]
 800034a:	8013      	strh	r3, [r2, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 800034c:	4b04      	ldr	r3, [pc, #16]	; (8000360 <SetDacA+0x24>)
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	4619      	mov	r1, r3
 8000352:	4804      	ldr	r0, [pc, #16]	; (8000364 <SetDacA+0x28>)
 8000354:	f7ff ff12 	bl	800017c <DAC_AD5322_Ch1>
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000000 	.word	0x20000000
 8000364:	20000590 	.word	0x20000590

08000368 <SetDacB>:

void SetDacB(uint16_t db) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	80fb      	strh	r3, [r7, #6]
	VDAC_B	= db;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SetDacB+0x24>)
 8000374:	88fb      	ldrh	r3, [r7, #6]
 8000376:	8013      	strh	r3, [r2, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <SetDacB+0x24>)
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	4619      	mov	r1, r3
 800037e:	4804      	ldr	r0, [pc, #16]	; (8000390 <SetDacB+0x28>)
 8000380:	f7ff ff4e 	bl	8000220 <DAC_AD5322_Ch2>
}
 8000384:	bf00      	nop
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000002 	.word	0x20000002
 8000390:	20000590 	.word	0x20000590

08000394 <GetDacA>:

uint16_t GetDacA() {
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	return VDAC_A;
 8000398:	4b02      	ldr	r3, [pc, #8]	; (80003a4 <GetDacA+0x10>)
 800039a:	881b      	ldrh	r3, [r3, #0]
}
 800039c:	4618      	mov	r0, r3
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	20000000 	.word	0x20000000

080003a8 <GetDacB>:

uint16_t GetDacB() {
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
	return VDAC_B;
 80003ac:	4b02      	ldr	r3, [pc, #8]	; (80003b8 <GetDacB+0x10>)
 80003ae:	881b      	ldrh	r3, [r3, #0]

}
 80003b0:	4618      	mov	r0, r3
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	20000002 	.word	0x20000002

080003bc <GetBtnRunState>:

char buffer[64] = {0,};
//-----------------------------------------------------------------------------


uint8_t GetBtnRunState() {
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00) {
 80003c0:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <GetBtnRunState+0x7c>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d10b      	bne.n	80003e0 <GetBtnRunState+0x24>
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <GetBtnRunState+0x80>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d107      	bne.n	80003e0 <GetBtnRunState+0x24>
		btn1_long_rd	 = 0;
 80003d0:	4b1a      	ldr	r3, [pc, #104]	; (800043c <GetBtnRunState+0x80>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
		btn1_short_rd	 = 0;
 80003d6:	4b18      	ldr	r3, [pc, #96]	; (8000438 <GetBtnRunState+0x7c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	701a      	strb	r2, [r3, #0]
		return 0x00;
 80003dc:	2300      	movs	r3, #0
 80003de:	e026      	b.n	800042e <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00) {
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <GetBtnRunState+0x7c>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d10b      	bne.n	8000400 <GetBtnRunState+0x44>
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <GetBtnRunState+0x80>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d107      	bne.n	8000400 <GetBtnRunState+0x44>
		btn1_long_rd 	= 0;
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <GetBtnRunState+0x80>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
		btn1_short_rd 	= 0;
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <GetBtnRunState+0x7c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80003fc:	2301      	movs	r3, #1
 80003fe:	e016      	b.n	800042e <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01) {
 8000400:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <GetBtnRunState+0x7c>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d10b      	bne.n	8000420 <GetBtnRunState+0x64>
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <GetBtnRunState+0x80>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d107      	bne.n	8000420 <GetBtnRunState+0x64>
		btn1_long_rd 	= 0;
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <GetBtnRunState+0x80>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
		btn1_short_rd 	= 0;
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <GetBtnRunState+0x7c>)
 8000418:	2200      	movs	r2, #0
 800041a:	701a      	strb	r2, [r3, #0]
		return 0x02;
 800041c:	2302      	movs	r3, #2
 800041e:	e006      	b.n	800042e <GetBtnRunState+0x72>
	}

	btn1_long_rd 		= 0;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <GetBtnRunState+0x80>)
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
	btn1_short_rd	 	= 0;
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <GetBtnRunState+0x7c>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]

//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 800042c:	2300      	movs	r3, #0
}
 800042e:	4618      	mov	r0, r3
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000219 	.word	0x20000219
 800043c:	20000218 	.word	0x20000218

08000440 <GetBtnUpState>:

uint8_t GetBtnUpState() {
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00) {
 8000444:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <GetBtnUpState+0x7c>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d10b      	bne.n	8000464 <GetBtnUpState+0x24>
 800044c:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <GetBtnUpState+0x80>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d107      	bne.n	8000464 <GetBtnUpState+0x24>
		btn2_long_rd	 = 0;
 8000454:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <GetBtnUpState+0x80>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
		btn2_short_rd	 = 0;
 800045a:	4b18      	ldr	r3, [pc, #96]	; (80004bc <GetBtnUpState+0x7c>)
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8000460:	2300      	movs	r3, #0
 8000462:	e026      	b.n	80004b2 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00) {
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <GetBtnUpState+0x7c>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d10b      	bne.n	8000484 <GetBtnUpState+0x44>
 800046c:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <GetBtnUpState+0x80>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d107      	bne.n	8000484 <GetBtnUpState+0x44>
		btn2_long_rd 	= 0;
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <GetBtnUpState+0x80>)
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]
		btn2_short_rd 	= 0;
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <GetBtnUpState+0x7c>)
 800047c:	2200      	movs	r2, #0
 800047e:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8000480:	2301      	movs	r3, #1
 8000482:	e016      	b.n	80004b2 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01) {
 8000484:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <GetBtnUpState+0x7c>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d10b      	bne.n	80004a4 <GetBtnUpState+0x64>
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <GetBtnUpState+0x80>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d107      	bne.n	80004a4 <GetBtnUpState+0x64>
		btn2_long_rd 	= 0;
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <GetBtnUpState+0x80>)
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
		btn2_short_rd 	= 0;
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <GetBtnUpState+0x7c>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80004a0:	2302      	movs	r3, #2
 80004a2:	e006      	b.n	80004b2 <GetBtnUpState+0x72>
	}

	btn2_long_rd 		= 0;
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <GetBtnUpState+0x80>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]
	btn2_short_rd	 	= 0;
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <GetBtnUpState+0x7c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 80004b0:	2300      	movs	r3, #0
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	20000221 	.word	0x20000221
 80004c0:	20000220 	.word	0x20000220

080004c4 <GetBtnDownState>:

uint8_t GetBtnDownState() {
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00) {
 80004c8:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <GetBtnDownState+0x7c>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d10b      	bne.n	80004e8 <GetBtnDownState+0x24>
 80004d0:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <GetBtnDownState+0x80>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d107      	bne.n	80004e8 <GetBtnDownState+0x24>
		btn3_long_rd	 = 0;
 80004d8:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <GetBtnDownState+0x80>)
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
		btn3_short_rd	 = 0;
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <GetBtnDownState+0x7c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
		return 0x00;
 80004e4:	2300      	movs	r3, #0
 80004e6:	e026      	b.n	8000536 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00) {
 80004e8:	4b15      	ldr	r3, [pc, #84]	; (8000540 <GetBtnDownState+0x7c>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d10b      	bne.n	8000508 <GetBtnDownState+0x44>
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <GetBtnDownState+0x80>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d107      	bne.n	8000508 <GetBtnDownState+0x44>
		btn3_long_rd 	= 0;
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <GetBtnDownState+0x80>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	701a      	strb	r2, [r3, #0]
		btn3_short_rd 	= 0;
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <GetBtnDownState+0x7c>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8000504:	2301      	movs	r3, #1
 8000506:	e016      	b.n	8000536 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01) {
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <GetBtnDownState+0x7c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d10b      	bne.n	8000528 <GetBtnDownState+0x64>
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <GetBtnDownState+0x80>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d107      	bne.n	8000528 <GetBtnDownState+0x64>
		btn3_long_rd 	= 0;
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <GetBtnDownState+0x80>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
		btn3_short_rd 	= 0;
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <GetBtnDownState+0x7c>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8000524:	2302      	movs	r3, #2
 8000526:	e006      	b.n	8000536 <GetBtnDownState+0x72>
	}

	btn3_long_rd 		= 0;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <GetBtnDownState+0x80>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
	btn3_short_rd	 	= 0;
 800052e:	4b04      	ldr	r3, [pc, #16]	; (8000540 <GetBtnDownState+0x7c>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000229 	.word	0x20000229
 8000544:	20000228 	.word	0x20000228

08000548 <EnableTIM3_PB4>:
	return  inLL_rd;
};

//--------------------------------------------------------------------------

void EnableTIM3_PB4(){
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
	 timWork = 1 ;
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <EnableTIM3_PB4+0x14>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	2000022a 	.word	0x2000022a

08000560 <EnableTIM4_PB6>:
//--------------------------------------------------------------------------

void EnableTIM4_PB6(){
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	 timWork = 0 ;
 8000564:	4b03      	ldr	r3, [pc, #12]	; (8000574 <EnableTIM4_PB6+0x14>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	2000022a 	.word	0x2000022a

08000578 <GetTIM3>:
//--------------------------------------------------------------------------

uint16_t GetTIM3(){
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <GetTIM3+0x14>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	b29b      	uxth	r3, r3
}
 8000582:	4618      	mov	r0, r3
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	2000022c 	.word	0x2000022c

08000590 <resValTIM3_PB4>:
//--------------------------------------------------------------------------
void resValTIM3_PB4(){
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <resValTIM3_PB4+0x14>)
 8000596:	2200      	movs	r2, #0
 8000598:	801a      	strh	r2, [r3, #0]
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	2000022c 	.word	0x2000022c

080005a8 <GetTIM4>:


//--------------------------------------------------------------------------
uint16_t GetTIM4(){
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 80005ac:	4b03      	ldr	r3, [pc, #12]	; (80005bc <GetTIM4+0x14>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	b29b      	uxth	r3, r3
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	2000022e 	.word	0x2000022e

080005c0 <resValTIM4_PB6>:
//--------------------------------------------------------------------------
void resValTIM4_PB6(){
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <resValTIM4_PB6+0x14>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	2000022e 	.word	0x2000022e

080005d8 <GetADC>:
//--------------------------------------------------------------------------

uint16_t GetADC(){
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
	return g_VADC;
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <GetADC+0x14>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	b29b      	uxth	r3, r3
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000210 	.word	0x20000210

080005f0 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) 				//check if the interrupt comes from ACD1
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <HAL_ADC_ConvCpltCallback+0x28>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d106      	bne.n	8000610 <HAL_ADC_ConvCpltCallback+0x20>
    {
    	g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <HAL_ADC_ConvCpltCallback+0x2c>)
 8000604:	f001 f92c 	bl	8001860 <HAL_ADC_GetValue>
 8000608:	4603      	mov	r3, r0
 800060a:	b29a      	uxth	r2, r3
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_ADC_ConvCpltCallback+0x30>)
 800060e:	801a      	strh	r2, [r3, #0]
    }
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40012400 	.word	0x40012400
 800061c:	20000560 	.word	0x20000560
 8000620:	20000210 	.word	0x20000210

08000624 <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3,pulseWidthTIM3,periodTIM4,pulseWidthTIM4;

	if (timWork){
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d026      	beq.n	8000684 <HAL_TIM_IC_CaptureCallback+0x60>
		if (htim->Instance == TIM3)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a28      	ldr	r2, [pc, #160]	; (80006dc <HAL_TIM_IC_CaptureCallback+0xb8>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d147      	bne.n	80006d0 <HAL_TIM_IC_CaptureCallback+0xac>
		    {
		        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	7f1b      	ldrb	r3, [r3, #28]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d143      	bne.n	80006d0 <HAL_TIM_IC_CaptureCallback+0xac>
		        {
		        	periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000648:	2100      	movs	r1, #0
 800064a:	4825      	ldr	r0, [pc, #148]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800064c:	f003 ff64 	bl	8004518 <HAL_TIM_ReadCapturedValue>
 8000650:	4603      	mov	r3, r0
 8000652:	823b      	strh	r3, [r7, #16]
		        	pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8000654:	2104      	movs	r1, #4
 8000656:	4822      	ldr	r0, [pc, #136]	; (80006e0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000658:	f003 ff5e 	bl	8004518 <HAL_TIM_ReadCapturedValue>
 800065c:	4603      	mov	r3, r0
 800065e:	81fb      	strh	r3, [r7, #14]

		            TIM3->CNT = 0;
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	; 0x24

		            int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 8000666:	8a3a      	ldrh	r2, [r7, #16]
 8000668:	89fb      	ldrh	r3, [r7, #14]
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	b29b      	uxth	r3, r3
 800066e:	81bb      	strh	r3, [r7, #12]
		            deltaTIM3	= (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 8000670:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000674:	2b00      	cmp	r3, #0
 8000676:	bfb8      	it	lt
 8000678:	425b      	neglt	r3, r3
 800067a:	81bb      	strh	r3, [r7, #12]
		            g_vTIM3_PB4 = deltaTIM3;
 800067c:	89ba      	ldrh	r2, [r7, #12]
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000680:	801a      	strh	r2, [r3, #0]
		    }
	}



}
 8000682:	e025      	b.n	80006d0 <HAL_TIM_IC_CaptureCallback+0xac>
		 if (htim->Instance == TIM4)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a17      	ldr	r2, [pc, #92]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d120      	bne.n	80006d0 <HAL_TIM_IC_CaptureCallback+0xac>
		        if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	7f1b      	ldrb	r3, [r3, #28]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d11c      	bne.n	80006d0 <HAL_TIM_IC_CaptureCallback+0xac>
		        	periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000696:	2100      	movs	r1, #0
 8000698:	4814      	ldr	r0, [pc, #80]	; (80006ec <HAL_TIM_IC_CaptureCallback+0xc8>)
 800069a:	f003 ff3d 	bl	8004518 <HAL_TIM_ReadCapturedValue>
 800069e:	4603      	mov	r3, r0
 80006a0:	82fb      	strh	r3, [r7, #22]
		        	pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 80006a2:	2104      	movs	r1, #4
 80006a4:	4811      	ldr	r0, [pc, #68]	; (80006ec <HAL_TIM_IC_CaptureCallback+0xc8>)
 80006a6:	f003 ff37 	bl	8004518 <HAL_TIM_ReadCapturedValue>
 80006aa:	4603      	mov	r3, r0
 80006ac:	82bb      	strh	r3, [r7, #20]
		            TIM4->CNT = 0;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
		            int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 80006b4:	8afa      	ldrh	r2, [r7, #22]
 80006b6:	8abb      	ldrh	r3, [r7, #20]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	827b      	strh	r3, [r7, #18]
		            deltaTIM4	= (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 80006be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	bfb8      	it	lt
 80006c6:	425b      	neglt	r3, r3
 80006c8:	827b      	strh	r3, [r7, #18]
		            g_vTIM4_PB6 = deltaTIM4;
 80006ca:	8a7a      	ldrh	r2, [r7, #18]
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80006ce:	801a      	strh	r2, [r3, #0]
}
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000022a 	.word	0x2000022a
 80006dc:	40000400 	.word	0x40000400
 80006e0:	20000520 	.word	0x20000520
 80006e4:	2000022c 	.word	0x2000022c
 80006e8:	40000800 	.word	0x40000800
 80006ec:	200004a0 	.word	0x200004a0
 80006f0:	2000022e 	.word	0x2000022e

080006f4 <_write>:

//--------------------------------------------------------------------------
#if	 DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	e009      	b.n	800071a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	60ba      	str	r2, [r7, #8]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fdd8 	bl	80002c4 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	dbf1      	blt.n	8000706 <_write+0x12>
	}
	return len;
 8000722:	687b      	ldr	r3, [r7, #4]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fe83 	bl	800143c <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8000736:	f7ff fdeb 	bl	8000310 <DWT_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f973 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073e:	f000 fb33 	bl	8000da8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000742:	f000 fa0b 	bl	8000b5c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000746:	f006 ff15 	bl	8007574 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800074a:	f000 f9c9 	bl	8000ae0 <MX_ADC1_Init>
  MX_TIM3_Init();
 800074e:	f000 fa3d 	bl	8000bcc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000752:	f000 fa9d 	bl	8000c90 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000756:	f000 fafd 	bl	8000d54 <MX_USART3_UART_Init>
//  s_table->


+//--------------------------------------------------------------------------

  sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 800075a:	4b96      	ldr	r3, [pc, #600]	; (80009b4 <main+0x288>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	881b      	ldrh	r3, [r3, #0]
+//--------------------------------------------------------------------------
 8000760:	4619      	mov	r1, r3
  sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 8000762:	4b95      	ldr	r3, [pc, #596]	; (80009b8 <main+0x28c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	881b      	ldrh	r3, [r3, #0]
+//--------------------------------------------------------------------------
 8000768:	4618      	mov	r0, r3
 800076a:	4b94      	ldr	r3, [pc, #592]	; (80009bc <main+0x290>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a93      	ldr	r2, [pc, #588]	; (80009c0 <main+0x294>)
 8000772:	6812      	ldr	r2, [r2, #0]
 8000774:	6812      	ldr	r2, [r2, #0]
 8000776:	9201      	str	r2, [sp, #4]
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	4991      	ldr	r1, [pc, #580]	; (80009c4 <main+0x298>)
 8000780:	4891      	ldr	r0, [pc, #580]	; (80009c8 <main+0x29c>)
 8000782:	f007 fd71 	bl	8008268 <siprintf>
  printf((uint8_t*)buffer);
 8000786:	4890      	ldr	r0, [pc, #576]	; (80009c8 <main+0x29c>)
 8000788:	f007 fd56 	bl	8008238 <iprintf>
  
//--------------------------------------------------------------------------
#if TEST_ADC
//ADC
  HAL_ADCEx_Calibration_Start(&hadc1);
 800078c:	488f      	ldr	r0, [pc, #572]	; (80009cc <main+0x2a0>)
 800078e:	f001 fac3 	bl	8001d18 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 8000792:	488e      	ldr	r0, [pc, #568]	; (80009cc <main+0x2a0>)
 8000794:	f000 ffae 	bl	80016f4 <HAL_ADC_Start_IT>
#endif	/* TEST_ADC */

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000798:	2100      	movs	r1, #0
 800079a:	488d      	ldr	r0, [pc, #564]	; (80009d0 <main+0x2a4>)
 800079c:	f003 fcb0 	bl	8004100 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80007a0:	2104      	movs	r1, #4
 80007a2:	488b      	ldr	r0, [pc, #556]	; (80009d0 <main+0x2a4>)
 80007a4:	f003 fcac 	bl	8004100 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80007a8:	2100      	movs	r1, #0
 80007aa:	488a      	ldr	r0, [pc, #552]	; (80009d4 <main+0x2a8>)
 80007ac:	f003 fca8 	bl	8004100 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80007b0:	2104      	movs	r1, #4
 80007b2:	4888      	ldr	r0, [pc, #544]	; (80009d4 <main+0x2a8>)
 80007b4:	f003 fca4 	bl	8004100 <HAL_TIM_IC_Start_IT>
	while (1) {

//--------------------------------------------------------------------------
#if  TEST_DAC_WHILE

	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 80007b8:	4b87      	ldr	r3, [pc, #540]	; (80009d8 <main+0x2ac>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	4887      	ldr	r0, [pc, #540]	; (80009dc <main+0x2b0>)
 80007c0:	f7ff fcdc 	bl	800017c <DAC_AD5322_Ch1>
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 80007c4:	4b86      	ldr	r3, [pc, #536]	; (80009e0 <main+0x2b4>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	4884      	ldr	r0, [pc, #528]	; (80009dc <main+0x2b0>)
 80007cc:	f7ff fd28 	bl	8000220 <DAC_AD5322_Ch2>
	HAL_Delay(250);
 80007d0:	20fa      	movs	r0, #250	; 0xfa
 80007d2:	f000 fe95 	bl	8001500 <HAL_Delay>
#endif	/* TEST_DAC_WHILE */
//--------------------------------------------------------------------------
#if  TEST_GPIO_WHILE

		 uint32_t ms = HAL_GetTick();
 80007d6:	f000 fe89 	bl	80014ec <HAL_GetTick>
 80007da:	6078      	str	r0, [r7, #4]
			  uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин
 80007dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e0:	4880      	ldr	r0, [pc, #512]	; (80009e4 <main+0x2b8>)
 80007e2:	f001 fda7 	bl	8002334 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	70fb      	strb	r3, [r7, #3]

			  if(key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 80007ea:	78fb      	ldrb	r3, [r7, #3]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d113      	bne.n	8000818 <main+0xec>
 80007f0:	4b7d      	ldr	r3, [pc, #500]	; (80009e8 <main+0x2bc>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d10f      	bne.n	8000818 <main+0xec>
 80007f8:	4b7c      	ldr	r3, [pc, #496]	; (80009ec <main+0x2c0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	2b32      	cmp	r3, #50	; 0x32
 8000802:	d909      	bls.n	8000818 <main+0xec>
			  {
			    short_state1 = 1;
 8000804:	4b78      	ldr	r3, [pc, #480]	; (80009e8 <main+0x2bc>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
			    long_state1 = 0;
 800080a:	4b79      	ldr	r3, [pc, #484]	; (80009f0 <main+0x2c4>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
			    time_key1 = ms;
 8000810:	4a76      	ldr	r2, [pc, #472]	; (80009ec <main+0x2c0>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6013      	str	r3, [r2, #0]
 8000816:	e02e      	b.n	8000876 <main+0x14a>
			  }
			  else if(key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d111      	bne.n	8000842 <main+0x116>
 800081e:	4b74      	ldr	r3, [pc, #464]	; (80009f0 <main+0x2c4>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d10d      	bne.n	8000842 <main+0x116>
 8000826:	4b71      	ldr	r3, [pc, #452]	; (80009ec <main+0x2c0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000832:	d906      	bls.n	8000842 <main+0x116>
			  {
			    long_state1 = 1;
 8000834:	4b6e      	ldr	r3, [pc, #440]	; (80009f0 <main+0x2c4>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
			    // действие на длинное нажатие
			    btn1_long_rd = 1;
 800083a:	4b6e      	ldr	r3, [pc, #440]	; (80009f4 <main+0x2c8>)
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	e019      	b.n	8000876 <main+0x14a>

			  }
			  else if(key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d116      	bne.n	8000876 <main+0x14a>
 8000848:	4b67      	ldr	r3, [pc, #412]	; (80009e8 <main+0x2bc>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d012      	beq.n	8000876 <main+0x14a>
 8000850:	4b66      	ldr	r3, [pc, #408]	; (80009ec <main+0x2c0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	2b32      	cmp	r3, #50	; 0x32
 800085a:	d90c      	bls.n	8000876 <main+0x14a>
			  {
			    short_state1 = 0;
 800085c:	4b62      	ldr	r3, [pc, #392]	; (80009e8 <main+0x2bc>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
			    time_key1 = ms;
 8000862:	4a62      	ldr	r2, [pc, #392]	; (80009ec <main+0x2c0>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6013      	str	r3, [r2, #0]

			    if(!long_state1)
 8000868:	4b61      	ldr	r3, [pc, #388]	; (80009f0 <main+0x2c4>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d102      	bne.n	8000876 <main+0x14a>
			    {
			      // действие на короткое нажатие
			    	btn1_short_rd = 1;
 8000870:	4b61      	ldr	r3, [pc, #388]	; (80009f8 <main+0x2cc>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
			    }
			  }
			  uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 8000876:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087a:	485a      	ldr	r0, [pc, #360]	; (80009e4 <main+0x2b8>)
 800087c:	f001 fd5a 	bl	8002334 <HAL_GPIO_ReadPin>
 8000880:	4603      	mov	r3, r0
 8000882:	70bb      	strb	r3, [r7, #2]

			  if(key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 8000884:	78bb      	ldrb	r3, [r7, #2]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d113      	bne.n	80008b2 <main+0x186>
 800088a:	4b5c      	ldr	r3, [pc, #368]	; (80009fc <main+0x2d0>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d10f      	bne.n	80008b2 <main+0x186>
 8000892:	4b5b      	ldr	r3, [pc, #364]	; (8000a00 <main+0x2d4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	2b32      	cmp	r3, #50	; 0x32
 800089c:	d909      	bls.n	80008b2 <main+0x186>
			  {
			    short_state2 = 1;
 800089e:	4b57      	ldr	r3, [pc, #348]	; (80009fc <main+0x2d0>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	701a      	strb	r2, [r3, #0]
			    long_state2 = 0;
 80008a4:	4b57      	ldr	r3, [pc, #348]	; (8000a04 <main+0x2d8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
			    time_key2 = ms;
 80008aa:	4a55      	ldr	r2, [pc, #340]	; (8000a00 <main+0x2d4>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	e02e      	b.n	8000910 <main+0x1e4>
			  }
			  else if(key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 80008b2:	78bb      	ldrb	r3, [r7, #2]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d111      	bne.n	80008dc <main+0x1b0>
 80008b8:	4b52      	ldr	r3, [pc, #328]	; (8000a04 <main+0x2d8>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10d      	bne.n	80008dc <main+0x1b0>
 80008c0:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <main+0x2d4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008cc:	d906      	bls.n	80008dc <main+0x1b0>
			  {
			    long_state2 = 1;
 80008ce:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <main+0x2d8>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]

			    // действие на длинное нажатие
			    btn2_long_rd = 1;
 80008d4:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <main+0x2dc>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e019      	b.n	8000910 <main+0x1e4>
			  }
			  else if(key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 80008dc:	78bb      	ldrb	r3, [r7, #2]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d116      	bne.n	8000910 <main+0x1e4>
 80008e2:	4b46      	ldr	r3, [pc, #280]	; (80009fc <main+0x2d0>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d012      	beq.n	8000910 <main+0x1e4>
 80008ea:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <main+0x2d4>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	2b32      	cmp	r3, #50	; 0x32
 80008f4:	d90c      	bls.n	8000910 <main+0x1e4>
			  {
			    short_state2 = 0;
 80008f6:	4b41      	ldr	r3, [pc, #260]	; (80009fc <main+0x2d0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
			    time_key2 = ms;
 80008fc:	4a40      	ldr	r2, [pc, #256]	; (8000a00 <main+0x2d4>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]

			    if(!long_state2)
 8000902:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <main+0x2d8>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d102      	bne.n	8000910 <main+0x1e4>
			    {
			      // действие на короткое нажатие
			    	btn2_short_rd = 1;
 800090a:	4b40      	ldr	r3, [pc, #256]	; (8000a0c <main+0x2e0>)
 800090c:	2201      	movs	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]
			    }
			  }

			  uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 8000910:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000914:	4833      	ldr	r0, [pc, #204]	; (80009e4 <main+0x2b8>)
 8000916:	f001 fd0d 	bl	8002334 <HAL_GPIO_ReadPin>
 800091a:	4603      	mov	r3, r0
 800091c:	707b      	strb	r3, [r7, #1]
			  if(key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 800091e:	787b      	ldrb	r3, [r7, #1]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d113      	bne.n	800094c <main+0x220>
 8000924:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <main+0x2e4>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d10f      	bne.n	800094c <main+0x220>
 800092c:	4b39      	ldr	r3, [pc, #228]	; (8000a14 <main+0x2e8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	2b32      	cmp	r3, #50	; 0x32
 8000936:	d909      	bls.n	800094c <main+0x220>
			  {
			    short_state3 = 1;
 8000938:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <main+0x2e4>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
			    long_state3 = 0;
 800093e:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <main+0x2ec>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
			    time_key3 = ms;
 8000944:	4a33      	ldr	r2, [pc, #204]	; (8000a14 <main+0x2e8>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
 800094a:	e032      	b.n	80009b2 <main+0x286>
			  }
			  else if(key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 800094c:	787b      	ldrb	r3, [r7, #1]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d111      	bne.n	8000976 <main+0x24a>
 8000952:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <main+0x2ec>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d10d      	bne.n	8000976 <main+0x24a>
 800095a:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <main+0x2e8>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000966:	d906      	bls.n	8000976 <main+0x24a>
			  {
			    long_state3 = 1;
 8000968:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <main+0x2ec>)
 800096a:	2201      	movs	r2, #1
 800096c:	701a      	strb	r2, [r3, #0]
			    // действие на длинное нажатие
				 btn3_long_rd = 1;
 800096e:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <main+0x2f0>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	e01d      	b.n	80009b2 <main+0x286>
			  }
			  else if(key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 8000976:	787b      	ldrb	r3, [r7, #1]
 8000978:	2b01      	cmp	r3, #1
 800097a:	f47f af1d 	bne.w	80007b8 <main+0x8c>
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <main+0x2e4>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	f43f af18 	beq.w	80007b8 <main+0x8c>
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <main+0x2e8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	2b32      	cmp	r3, #50	; 0x32
 8000992:	f67f af11 	bls.w	80007b8 <main+0x8c>
			  {
			    short_state3 = 0;
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <main+0x2e4>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
			    time_key3 = ms;
 800099c:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <main+0x2e8>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]

			    if(!long_state3)
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <main+0x2ec>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f47f af06 	bne.w	80007b8 <main+0x8c>
			    {
			      // действие на короткое нажатие
			    	btn3_short_rd = 1;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <main+0x2f4>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
	while (1) {
 80009b2:	e701      	b.n	80007b8 <main+0x8c>
 80009b4:	20000004 	.word	0x20000004
 80009b8:	20000008 	.word	0x20000008
 80009bc:	2000000c 	.word	0x2000000c
 80009c0:	20000010 	.word	0x20000010
 80009c4:	080093a0 	.word	0x080093a0
 80009c8:	20000230 	.word	0x20000230
 80009cc:	20000560 	.word	0x20000560
 80009d0:	20000520 	.word	0x20000520
 80009d4:	200004a0 	.word	0x200004a0
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000590 	.word	0x20000590
 80009e0:	20000002 	.word	0x20000002
 80009e4:	40010c00 	.word	0x40010c00
 80009e8:	20000212 	.word	0x20000212
 80009ec:	20000214 	.word	0x20000214
 80009f0:	20000213 	.word	0x20000213
 80009f4:	20000218 	.word	0x20000218
 80009f8:	20000219 	.word	0x20000219
 80009fc:	2000021a 	.word	0x2000021a
 8000a00:	2000021c 	.word	0x2000021c
 8000a04:	2000021b 	.word	0x2000021b
 8000a08:	20000220 	.word	0x20000220
 8000a0c:	20000221 	.word	0x20000221
 8000a10:	20000222 	.word	0x20000222
 8000a14:	20000224 	.word	0x20000224
 8000a18:	20000223 	.word	0x20000223
 8000a1c:	20000228 	.word	0x20000228
 8000a20:	20000229 	.word	0x20000229

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b094      	sub	sp, #80	; 0x50
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2e:	2228      	movs	r2, #40	; 0x28
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f007 fbf7 	bl	8008226 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a54:	2301      	movs	r3, #1
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a62:	2301      	movs	r3, #1
 8000a64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a66:	2302      	movs	r3, #2
 8000a68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a70:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fb6a 	bl	8003154 <HAL_RCC_OscConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a86:	f000 fa1f 	bl	8000ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a9a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 fdd4 	bl	8003654 <HAL_RCC_ClockConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ab2:	f000 fa09 	bl	8000ec8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000ab6:	2312      	movs	r3, #18
 8000ab8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000abe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 ff60 	bl	800398c <HAL_RCCEx_PeriphCLKConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ad2:	f000 f9f9 	bl	8000ec8 <Error_Handler>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3750      	adds	r7, #80	; 0x50
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_ADC1_Init+0x74>)
 8000af2:	4a19      	ldr	r2, [pc, #100]	; (8000b58 <MX_ADC1_Init+0x78>)
 8000af4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_ADC1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_ADC1_Init+0x74>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_ADC1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_ADC1_Init+0x74>)
 8000b0a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <MX_ADC1_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_ADC1_Init+0x74>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_ADC1_Init+0x74>)
 8000b1e:	f000 fd11 	bl	8001544 <HAL_ADC_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b28:	f000 f9ce 	bl	8000ec8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b30:	2301      	movs	r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000b34:	2302      	movs	r3, #2
 8000b36:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_ADC1_Init+0x74>)
 8000b3e:	f000 ff67 	bl	8001a10 <HAL_ADC_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b48:	f000 f9be 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000560 	.word	0x20000560
 8000b58:	40012400 	.word	0x40012400

08000b5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_SPI1_Init+0x68>)
 8000b62:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <MX_SPI1_Init+0x6c>)
 8000b64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_SPI1_Init+0x68>)
 8000b68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_SPI1_Init+0x68>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_SPI1_Init+0x68>)
 8000b76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_SPI1_Init+0x68>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_SPI1_Init+0x68>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_SPI1_Init+0x68>)
 8000b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_SPI1_Init+0x68>)
 8000b92:	2208      	movs	r2, #8
 8000b94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_SPI1_Init+0x68>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_SPI1_Init+0x68>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_SPI1_Init+0x68>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_SPI1_Init+0x68>)
 8000baa:	220a      	movs	r2, #10
 8000bac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_SPI1_Init+0x68>)
 8000bb0:	f003 f85e 	bl	8003c70 <HAL_SPI_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000bba:	f000 f985 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000590 	.word	0x20000590
 8000bc8:	40013000 	.word	0x40013000

08000bcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bdc:	463b      	mov	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000be8:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <MX_TIM3_Init+0xbc>)
 8000bea:	4a28      	ldr	r2, [pc, #160]	; (8000c8c <MX_TIM3_Init+0xc0>)
 8000bec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <MX_TIM3_Init+0xbc>)
 8000bf0:	2247      	movs	r2, #71	; 0x47
 8000bf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <MX_TIM3_Init+0xbc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 8000bfa:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <MX_TIM3_Init+0xbc>)
 8000bfc:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000c00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <MX_TIM3_Init+0xbc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_TIM3_Init+0xbc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000c0e:	481e      	ldr	r0, [pc, #120]	; (8000c88 <MX_TIM3_Init+0xbc>)
 8000c10:	f003 fa4b 	bl	80040aa <HAL_TIM_IC_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c1a:	f000 f955 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4816      	ldr	r0, [pc, #88]	; (8000c88 <MX_TIM3_Init+0xbc>)
 8000c2e:	f003 fe6e 	bl	800490e <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c38:	f000 f946 	bl	8000ec8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c40:	2301      	movs	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4619      	mov	r1, r3
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_TIM3_Init+0xbc>)
 8000c54:	f003 fbc4 	bl	80043e0 <HAL_TIM_IC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c5e:	f000 f933 	bl	8000ec8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c62:	2302      	movs	r3, #2
 8000c64:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c66:	2302      	movs	r3, #2
 8000c68:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_TIM3_Init+0xbc>)
 8000c72:	f003 fbb5 	bl	80043e0 <HAL_TIM_IC_ConfigChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000c7c:	f000 f924 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000520 	.word	0x20000520
 8000c8c:	40000400 	.word	0x40000400

08000c90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_TIM4_Init+0xbc>)
 8000cae:	4a28      	ldr	r2, [pc, #160]	; (8000d50 <MX_TIM4_Init+0xc0>)
 8000cb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <MX_TIM4_Init+0xbc>)
 8000cb4:	2247      	movs	r2, #71	; 0x47
 8000cb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_TIM4_Init+0xbc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 8000cbe:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <MX_TIM4_Init+0xbc>)
 8000cc0:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000cc4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_TIM4_Init+0xbc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_TIM4_Init+0xbc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000cd2:	481e      	ldr	r0, [pc, #120]	; (8000d4c <MX_TIM4_Init+0xbc>)
 8000cd4:	f003 f9e9 	bl	80040aa <HAL_TIM_IC_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000cde:	f000 f8f3 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4816      	ldr	r0, [pc, #88]	; (8000d4c <MX_TIM4_Init+0xbc>)
 8000cf2:	f003 fe0c 	bl	800490e <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000cfc:	f000 f8e4 	bl	8000ec8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d00:	2300      	movs	r3, #0
 8000d02:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d04:	2301      	movs	r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	4619      	mov	r1, r3
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <MX_TIM4_Init+0xbc>)
 8000d18:	f003 fb62 	bl	80043e0 <HAL_TIM_IC_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000d22:	f000 f8d1 	bl	8000ec8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d26:	2302      	movs	r3, #2
 8000d28:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2204      	movs	r2, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_TIM4_Init+0xbc>)
 8000d36:	f003 fb53 	bl	80043e0 <HAL_TIM_IC_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000d40:	f000 f8c2 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200004a0 	.word	0x200004a0
 8000d50:	40000800 	.word	0x40000800

08000d54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <MX_USART3_UART_Init+0x50>)
 8000d5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_USART3_UART_Init+0x4c>)
 8000d8c:	f003 fe15 	bl	80049ba <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d96:	f000 f897 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200004e0 	.word	0x200004e0
 8000da4:	40004800 	.word	0x40004800

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbc:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <MX_GPIO_Init+0x110>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a3d      	ldr	r2, [pc, #244]	; (8000eb8 <MX_GPIO_Init+0x110>)
 8000dc2:	f043 0310 	orr.w	r3, r3, #16
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <MX_GPIO_Init+0x110>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd4:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <MX_GPIO_Init+0x110>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a37      	ldr	r2, [pc, #220]	; (8000eb8 <MX_GPIO_Init+0x110>)
 8000dda:	f043 0320 	orr.w	r3, r3, #32
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <MX_GPIO_Init+0x110>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0320 	and.w	r3, r3, #32
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <MX_GPIO_Init+0x110>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a31      	ldr	r2, [pc, #196]	; (8000eb8 <MX_GPIO_Init+0x110>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <MX_GPIO_Init+0x110>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <MX_GPIO_Init+0x110>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a2b      	ldr	r2, [pc, #172]	; (8000eb8 <MX_GPIO_Init+0x110>)
 8000e0a:	f043 0308 	orr.w	r3, r3, #8
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <MX_GPIO_Init+0x110>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0308 	and.w	r3, r3, #8
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e22:	4826      	ldr	r0, [pc, #152]	; (8000ebc <MX_GPIO_Init+0x114>)
 8000e24:	f001 fa9d 	bl	8002362 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f240 4112 	movw	r1, #1042	; 0x412
 8000e2e:	4824      	ldr	r0, [pc, #144]	; (8000ec0 <MX_GPIO_Init+0x118>)
 8000e30:	f001 fa97 	bl	8002362 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2104      	movs	r1, #4
 8000e38:	4821      	ldr	r0, [pc, #132]	; (8000ec0 <MX_GPIO_Init+0x118>)
 8000e3a:	f001 fa92 	bl	8002362 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4619      	mov	r1, r3
 8000e56:	4819      	ldr	r0, [pc, #100]	; (8000ebc <MX_GPIO_Init+0x114>)
 8000e58:	f001 f912 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 8000e5c:	f240 4316 	movw	r3, #1046	; 0x416
 8000e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	4619      	mov	r1, r3
 8000e74:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <MX_GPIO_Init+0x118>)
 8000e76:	f001 f903 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <MX_GPIO_Init+0x11c>)
 8000e90:	f001 f8f6 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000e94:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <MX_GPIO_Init+0x11c>)
 8000eaa:	f001 f8e9 	bl	8002080 <HAL_GPIO_Init>

}
 8000eae:	bf00      	nop
 8000eb0:	3720      	adds	r7, #32
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40010800 	.word	0x40010800
 8000ec4:	40010c00 	.word	0x40010c00

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_MspInit+0x5c>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <HAL_MspInit+0x5c>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6193      	str	r3, [r2, #24]
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_MspInit+0x5c>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_MspInit+0x5c>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_MspInit+0x5c>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	61d3      	str	r3, [r2, #28]
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_MspInit+0x5c>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_MspInit+0x60>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_MspInit+0x60>)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010000 	.word	0x40010000

08000f38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <HAL_ADC_MspInit+0x7c>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d129      	bne.n	8000fac <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_ADC_MspInit+0x80>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_ADC_MspInit+0x80>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0x80>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0x80>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_ADC_MspInit+0x80>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_ADC_MspInit+0x80>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f88:	2308      	movs	r3, #8
 8000f8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4619      	mov	r1, r3
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <HAL_ADC_MspInit+0x84>)
 8000f98:	f001 f872 	bl	8002080 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2012      	movs	r0, #18
 8000fa2:	f001 f836 	bl	8002012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000fa6:	2012      	movs	r0, #18
 8000fa8:	f001 f84f 	bl	800204a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40012400 	.word	0x40012400
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010800 	.word	0x40010800

08000fc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <HAL_SPI_MspInit+0x70>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d123      	bne.n	8001028 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_SPI_MspInit+0x74>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a13      	ldr	r2, [pc, #76]	; (8001034 <HAL_SPI_MspInit+0x74>)
 8000fe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_SPI_MspInit+0x74>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_SPI_MspInit+0x74>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_SPI_MspInit+0x74>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_SPI_MspInit+0x74>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8001010:	23a0      	movs	r3, #160	; 0xa0
 8001012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <HAL_SPI_MspInit+0x78>)
 8001024:	f001 f82c 	bl	8002080 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40013000 	.word	0x40013000
 8001034:	40021000 	.word	0x40021000
 8001038:	40010800 	.word	0x40010800

0800103c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a3b      	ldr	r2, [pc, #236]	; (8001144 <HAL_TIM_IC_MspInit+0x108>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d13e      	bne.n	80010da <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800105c:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <HAL_TIM_IC_MspInit+0x10c>)
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	4a39      	ldr	r2, [pc, #228]	; (8001148 <HAL_TIM_IC_MspInit+0x10c>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	61d3      	str	r3, [r2, #28]
 8001068:	4b37      	ldr	r3, [pc, #220]	; (8001148 <HAL_TIM_IC_MspInit+0x10c>)
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	61bb      	str	r3, [r7, #24]
 8001072:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001074:	4b34      	ldr	r3, [pc, #208]	; (8001148 <HAL_TIM_IC_MspInit+0x10c>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a33      	ldr	r2, [pc, #204]	; (8001148 <HAL_TIM_IC_MspInit+0x10c>)
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b31      	ldr	r3, [pc, #196]	; (8001148 <HAL_TIM_IC_MspInit+0x10c>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800108c:	2310      	movs	r3, #16
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4619      	mov	r1, r3
 800109e:	482b      	ldr	r0, [pc, #172]	; (800114c <HAL_TIM_IC_MspInit+0x110>)
 80010a0:	f000 ffee 	bl	8002080 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80010a4:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <HAL_TIM_IC_MspInit+0x114>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010c2:	4a23      	ldr	r2, [pc, #140]	; (8001150 <HAL_TIM_IC_MspInit+0x114>)
 80010c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c6:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	201d      	movs	r0, #29
 80010ce:	f000 ffa0 	bl	8002012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010d2:	201d      	movs	r0, #29
 80010d4:	f000 ffb9 	bl	800204a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010d8:	e030      	b.n	800113c <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a1d      	ldr	r2, [pc, #116]	; (8001154 <HAL_TIM_IC_MspInit+0x118>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d12b      	bne.n	800113c <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <HAL_TIM_IC_MspInit+0x10c>)
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	4a17      	ldr	r2, [pc, #92]	; (8001148 <HAL_TIM_IC_MspInit+0x10c>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	61d3      	str	r3, [r2, #28]
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_TIM_IC_MspInit+0x10c>)
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_TIM_IC_MspInit+0x10c>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <HAL_TIM_IC_MspInit+0x10c>)
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <HAL_TIM_IC_MspInit+0x10c>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001114:	2340      	movs	r3, #64	; 0x40
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	4809      	ldr	r0, [pc, #36]	; (800114c <HAL_TIM_IC_MspInit+0x110>)
 8001128:	f000 ffaa 	bl	8002080 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	201e      	movs	r0, #30
 8001132:	f000 ff6e 	bl	8002012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001136:	201e      	movs	r0, #30
 8001138:	f000 ff87 	bl	800204a <HAL_NVIC_EnableIRQ>
}
 800113c:	bf00      	nop
 800113e:	3730      	adds	r7, #48	; 0x30
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40000400 	.word	0x40000400
 8001148:	40021000 	.word	0x40021000
 800114c:	40010c00 	.word	0x40010c00
 8001150:	40010000 	.word	0x40010000
 8001154:	40000800 	.word	0x40000800

08001158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <HAL_UART_MspInit+0x8c>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d131      	bne.n	80011dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_UART_MspInit+0x90>)
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_UART_MspInit+0x90>)
 800117e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001182:	61d3      	str	r3, [r2, #28]
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_UART_MspInit+0x90>)
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_UART_MspInit+0x90>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <HAL_UART_MspInit+0x90>)
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_UART_MspInit+0x90>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4619      	mov	r1, r3
 80011bc:	480b      	ldr	r0, [pc, #44]	; (80011ec <HAL_UART_MspInit+0x94>)
 80011be:	f000 ff5f 	bl	8002080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <HAL_UART_MspInit+0x94>)
 80011d8:	f000 ff52 	bl	8002080 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40004800 	.word	0x40004800
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010c00 	.word	0x40010c00

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <HardFault_Handler+0x4>

08001202 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <MemManage_Handler+0x4>

08001208 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <BusFault_Handler+0x4>

0800120e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <UsageFault_Handler+0x4>

08001214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123c:	f000 f944 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <ADC1_2_IRQHandler+0x10>)
 800124a:	f000 fb15 	bl	8001878 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000560 	.word	0x20000560

08001258 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800125e:	f001 f99f 	bl	80025a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000eb0 	.word	0x20000eb0

0800126c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <TIM3_IRQHandler+0x10>)
 8001272:	f002 ffad 	bl	80041d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000520 	.word	0x20000520

08001280 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <TIM4_IRQHandler+0x10>)
 8001286:	f002 ffa3 	bl	80041d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200004a0 	.word	0x200004a0

08001294 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	e00a      	b.n	80012bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012a6:	f3af 8000 	nop.w
 80012aa:	4601      	mov	r1, r0
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	60ba      	str	r2, [r7, #8]
 80012b2:	b2ca      	uxtb	r2, r1
 80012b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dbf0      	blt.n	80012a6 <_read+0x12>
	}

return len;
 80012c4:	687b      	ldr	r3, [r7, #4]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_close>:
	}
	return len;
}

int _close(int file)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	return -1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012f4:	605a      	str	r2, [r3, #4]
	return 0;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <_isatty>:

int _isatty(int file)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
	return 1;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001316:	b480      	push	{r7}
 8001318:	b085      	sub	sp, #20
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
	return 0;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
	...

08001330 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <_sbrk+0x50>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x16>
		heap_end = &end;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <_sbrk+0x50>)
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <_sbrk+0x54>)
 8001344:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <_sbrk+0x50>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <_sbrk+0x50>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	466a      	mov	r2, sp
 8001356:	4293      	cmp	r3, r2
 8001358:	d907      	bls.n	800136a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800135a:	f006 ff2f 	bl	80081bc <__errno>
 800135e:	4602      	mov	r2, r0
 8001360:	230c      	movs	r3, #12
 8001362:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
 8001368:	e006      	b.n	8001378 <_sbrk+0x48>
	}

	heap_end += incr;
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_sbrk+0x50>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a03      	ldr	r2, [pc, #12]	; (8001380 <_sbrk+0x50>)
 8001374:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000270 	.word	0x20000270
 8001384:	20001120 	.word	0x20001120

08001388 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <SystemInit+0x5c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <SystemInit+0x5c>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <SystemInit+0x5c>)
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4911      	ldr	r1, [pc, #68]	; (80013e4 <SystemInit+0x5c>)
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <SystemInit+0x60>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <SystemInit+0x5c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <SystemInit+0x5c>)
 80013aa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80013ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <SystemInit+0x5c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <SystemInit+0x5c>)
 80013ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013be:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <SystemInit+0x5c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <SystemInit+0x5c>)
 80013c6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80013ca:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SystemInit+0x5c>)
 80013ce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80013d2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SystemInit+0x64>)
 80013d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013da:	609a      	str	r2, [r3, #8]
#endif 
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	40021000 	.word	0x40021000
 80013e8:	f8ff0000 	.word	0xf8ff0000
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013f2:	e003      	b.n	80013fc <LoopCopyDataInit>

080013f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013fa:	3104      	adds	r1, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013fc:	480a      	ldr	r0, [pc, #40]	; (8001428 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001400:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001402:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001404:	d3f6      	bcc.n	80013f4 <CopyDataInit>
  ldr r2, =_sbss
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001408:	e002      	b.n	8001410 <LoopFillZerobss>

0800140a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800140c:	f842 3b04 	str.w	r3, [r2], #4

08001410 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001412:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001414:	d3f9      	bcc.n	800140a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001416:	f7ff ffb7 	bl	8001388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800141a:	f006 fed5 	bl	80081c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800141e:	f7ff f985 	bl	800072c <main>
  bx lr
 8001422:	4770      	bx	lr
  ldr r3, =_sidata
 8001424:	08009540 	.word	0x08009540
  ldr r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800142c:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8001430:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 8001434:	20001120 	.word	0x20001120

08001438 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <CAN1_RX1_IRQHandler>
	...

0800143c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <HAL_Init+0x28>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a07      	ldr	r2, [pc, #28]	; (8001464 <HAL_Init+0x28>)
 8001446:	f043 0310 	orr.w	r3, r3, #16
 800144a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144c:	2003      	movs	r0, #3
 800144e:	f000 fdd5 	bl	8001ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001452:	2000      	movs	r0, #0
 8001454:	f000 f808 	bl	8001468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001458:	f7ff fd3c 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40022000 	.word	0x40022000

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x54>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x58>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fded 	bl	8002066 <HAL_SYSTICK_Config>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00e      	b.n	80014b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80a      	bhi.n	80014b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	2200      	movs	r2, #0
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f000 fdb5 	bl	8002012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <HAL_InitTick+0x5c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000014 	.word	0x20000014
 80014c0:	2000001c 	.word	0x2000001c
 80014c4:	20000018 	.word	0x20000018

080014c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_IncTick+0x1c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_IncTick+0x20>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a03      	ldr	r2, [pc, #12]	; (80014e8 <HAL_IncTick+0x20>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	2000001c 	.word	0x2000001c
 80014e8:	200005e8 	.word	0x200005e8

080014ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b02      	ldr	r3, [pc, #8]	; (80014fc <HAL_GetTick+0x10>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	200005e8 	.word	0x200005e8

08001500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff fff0 	bl	80014ec <HAL_GetTick>
 800150c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d005      	beq.n	8001526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_Delay+0x40>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001526:	bf00      	nop
 8001528:	f7ff ffe0 	bl	80014ec <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	429a      	cmp	r2, r3
 8001536:	d8f7      	bhi.n	8001528 <HAL_Delay+0x28>
  {
  }
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000001c 	.word	0x2000001c

08001544 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0be      	b.n	80016e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fcd8 	bl	8000f38 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fb8b 	bl	8001ca4 <ADC_ConversionStop_Disable>
 800158e:	4603      	mov	r3, r0
 8001590:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 8099 	bne.w	80016d2 <HAL_ADC_Init+0x18e>
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 8095 	bne.w	80016d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015b0:	f023 0302 	bic.w	r3, r3, #2
 80015b4:	f043 0202 	orr.w	r2, r3, #2
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7b1b      	ldrb	r3, [r3, #12]
 80015ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015dc:	d003      	beq.n	80015e6 <HAL_ADC_Init+0xa2>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d102      	bne.n	80015ec <HAL_ADC_Init+0xa8>
 80015e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ea:	e000      	b.n	80015ee <HAL_ADC_Init+0xaa>
 80015ec:	2300      	movs	r3, #0
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7d1b      	ldrb	r3, [r3, #20]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d119      	bne.n	8001630 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7b1b      	ldrb	r3, [r3, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d109      	bne.n	8001618 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	3b01      	subs	r3, #1
 800160a:	035a      	lsls	r2, r3, #13
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	e00b      	b.n	8001630 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	f043 0220 	orr.w	r2, r3, #32
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	430a      	orrs	r2, r1
 8001642:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <HAL_ADC_Init+0x1a8>)
 800164c:	4013      	ands	r3, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	68b9      	ldr	r1, [r7, #8]
 8001654:	430b      	orrs	r3, r1
 8001656:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001660:	d003      	beq.n	800166a <HAL_ADC_Init+0x126>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d104      	bne.n	8001674 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	3b01      	subs	r3, #1
 8001670:	051b      	lsls	r3, r3, #20
 8001672:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	430a      	orrs	r2, r1
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_ADC_Init+0x1ac>)
 8001690:	4013      	ands	r3, r2
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	429a      	cmp	r2, r3
 8001696:	d10b      	bne.n	80016b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	f023 0303 	bic.w	r3, r3, #3
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016ae:	e018      	b.n	80016e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	f023 0312 	bic.w	r3, r3, #18
 80016b8:	f043 0210 	orr.w	r2, r3, #16
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	f043 0201 	orr.w	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016d0:	e007      	b.n	80016e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	f043 0210 	orr.w	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	ffe1f7fd 	.word	0xffe1f7fd
 80016f0:	ff1f0efe 	.word	0xff1f0efe

080016f4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_ADC_Start_IT+0x1a>
 800170a:	2302      	movs	r3, #2
 800170c:	e0a0      	b.n	8001850 <HAL_ADC_Start_IT+0x15c>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 fa72 	bl	8001c00 <ADC_Enable>
 800171c:	4603      	mov	r3, r0
 800171e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 808f 	bne.w	8001846 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a45      	ldr	r2, [pc, #276]	; (8001858 <HAL_ADC_Start_IT+0x164>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d105      	bne.n	8001752 <HAL_ADC_Start_IT+0x5e>
 8001746:	4b45      	ldr	r3, [pc, #276]	; (800185c <HAL_ADC_Start_IT+0x168>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d115      	bne.n	800177e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001768:	2b00      	cmp	r3, #0
 800176a:	d026      	beq.n	80017ba <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001774:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800177c:	e01d      	b.n	80017ba <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a33      	ldr	r2, [pc, #204]	; (800185c <HAL_ADC_Start_IT+0x168>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d004      	beq.n	800179e <HAL_ADC_Start_IT+0xaa>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2f      	ldr	r2, [pc, #188]	; (8001858 <HAL_ADC_Start_IT+0x164>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10d      	bne.n	80017ba <HAL_ADC_Start_IT+0xc6>
 800179e:	4b2f      	ldr	r3, [pc, #188]	; (800185c <HAL_ADC_Start_IT+0x168>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d006      	beq.n	80017d4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	f023 0206 	bic.w	r2, r3, #6
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80017d2:	e002      	b.n	80017da <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f06f 0202 	mvn.w	r2, #2
 80017ea:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0220 	orr.w	r2, r2, #32
 80017fa:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001806:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800180a:	d113      	bne.n	8001834 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <HAL_ADC_Start_IT+0x164>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d105      	bne.n	8001822 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_ADC_Start_IT+0x168>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800181e:	2b00      	cmp	r3, #0
 8001820:	d108      	bne.n	8001834 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	e00c      	b.n	800184e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	e003      	b.n	800184e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40012800 	.word	0x40012800
 800185c:	40012400 	.word	0x40012400

08001860 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0320 	and.w	r3, r3, #32
 800188a:	2b20      	cmp	r3, #32
 800188c:	d140      	bne.n	8001910 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b02      	cmp	r3, #2
 800189a:	d139      	bne.n	8001910 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d105      	bne.n	80018b4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018c2:	d11d      	bne.n	8001900 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d119      	bne.n	8001900 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0220 	bic.w	r2, r2, #32
 80018da:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	f043 0201 	orr.w	r2, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7fe fe75 	bl	80005f0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f06f 0212 	mvn.w	r2, #18
 800190e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	2b80      	cmp	r3, #128	; 0x80
 800191c:	d14f      	bne.n	80019be <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b04      	cmp	r3, #4
 800192a:	d148      	bne.n	80019be <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	f003 0310 	and.w	r3, r3, #16
 8001934:	2b00      	cmp	r3, #0
 8001936:	d105      	bne.n	8001944 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800194e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001952:	d012      	beq.n	800197a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800195e:	2b00      	cmp	r3, #0
 8001960:	d125      	bne.n	80019ae <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800196c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001970:	d11d      	bne.n	80019ae <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001976:	2b00      	cmp	r3, #0
 8001978:	d119      	bne.n	80019ae <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001988:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d105      	bne.n	80019ae <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	f043 0201 	orr.w	r2, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fa4e 	bl	8001e50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f06f 020c 	mvn.w	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c8:	2b40      	cmp	r3, #64	; 0x40
 80019ca:	d114      	bne.n	80019f6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d10d      	bne.n	80019f6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f809 	bl	80019fe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0201 	mvn.w	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x20>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e0dc      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1da>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b06      	cmp	r3, #6
 8001a3e:	d81c      	bhi.n	8001a7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b05      	subs	r3, #5
 8001a52:	221f      	movs	r2, #31
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	4019      	ands	r1, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	3b05      	subs	r3, #5
 8001a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	635a      	str	r2, [r3, #52]	; 0x34
 8001a78:	e03c      	b.n	8001af4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	d81c      	bhi.n	8001abc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	3b23      	subs	r3, #35	; 0x23
 8001a94:	221f      	movs	r2, #31
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	4019      	ands	r1, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	3b23      	subs	r3, #35	; 0x23
 8001aae:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	631a      	str	r2, [r3, #48]	; 0x30
 8001aba:	e01b      	b.n	8001af4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	3b41      	subs	r3, #65	; 0x41
 8001ace:	221f      	movs	r2, #31
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	4019      	ands	r1, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3b41      	subs	r3, #65	; 0x41
 8001ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b09      	cmp	r3, #9
 8001afa:	d91c      	bls.n	8001b36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68d9      	ldr	r1, [r3, #12]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b1e      	subs	r3, #30
 8001b0e:	2207      	movs	r2, #7
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4019      	ands	r1, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6898      	ldr	r0, [r3, #8]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	3b1e      	subs	r3, #30
 8001b28:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	e019      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6919      	ldr	r1, [r3, #16]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	2207      	movs	r2, #7
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	4019      	ands	r1, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6898      	ldr	r0, [r3, #8]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d003      	beq.n	8001b7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b76:	2b11      	cmp	r3, #17
 8001b78:	d132      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d125      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d126      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ba0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b10      	cmp	r3, #16
 8001ba8:	d11a      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <HAL_ADC_ConfigChannel+0x1ec>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	0c9a      	lsrs	r2, r3, #18
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bc0:	e002      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f9      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x1b2>
 8001bce:	e007      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	f043 0220 	orr.w	r2, r3, #32
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	40012400 	.word	0x40012400
 8001bf8:	20000014 	.word	0x20000014
 8001bfc:	431bde83 	.word	0x431bde83

08001c00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d039      	beq.n	8001c92 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <ADC_Enable+0x9c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <ADC_Enable+0xa0>)
 8001c34:	fba2 2303 	umull	r2, r3, r2, r3
 8001c38:	0c9b      	lsrs	r3, r3, #18
 8001c3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c3c:	e002      	b.n	8001c44 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f9      	bne.n	8001c3e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c4a:	f7ff fc4f 	bl	80014ec <HAL_GetTick>
 8001c4e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c50:	e018      	b.n	8001c84 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c52:	f7ff fc4b 	bl	80014ec <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d911      	bls.n	8001c84 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	f043 0210 	orr.w	r2, r3, #16
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e007      	b.n	8001c94 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d1df      	bne.n	8001c52 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000014 	.word	0x20000014
 8001ca0:	431bde83 	.word	0x431bde83

08001ca4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d127      	bne.n	8001d0e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cce:	f7ff fc0d 	bl	80014ec <HAL_GetTick>
 8001cd2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cd4:	e014      	b.n	8001d00 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cd6:	f7ff fc09 	bl	80014ec <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d90d      	bls.n	8001d00 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	f043 0210 	orr.w	r2, r3, #16
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	f043 0201 	orr.w	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e007      	b.n	8001d10 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d0e3      	beq.n	8001cd6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_ADCEx_Calibration_Start+0x1e>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e086      	b.n	8001e44 <HAL_ADCEx_Calibration_Start+0x12c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffb0 	bl	8001ca4 <ADC_ConversionStop_Disable>
 8001d44:	4603      	mov	r3, r0
 8001d46:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d175      	bne.n	8001e3a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d56:	f023 0302 	bic.w	r3, r3, #2
 8001d5a:	f043 0202 	orr.w	r2, r3, #2
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001d62:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <HAL_ADCEx_Calibration_Start+0x134>)
 8001d64:	681c      	ldr	r4, [r3, #0]
 8001d66:	2002      	movs	r0, #2
 8001d68:	f001 fec6 	bl	8003af8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001d72:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001d74:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001d76:	e002      	b.n	8001d7e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f9      	bne.n	8001d78 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff3b 	bl	8001c00 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0208 	orr.w	r2, r2, #8
 8001d98:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001d9a:	f7ff fba7 	bl	80014ec <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001da0:	e014      	b.n	8001dcc <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001da2:	f7ff fba3 	bl	80014ec <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b0a      	cmp	r3, #10
 8001dae:	d90d      	bls.n	8001dcc <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	f023 0312 	bic.w	r3, r3, #18
 8001db8:	f043 0210 	orr.w	r2, r3, #16
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e03b      	b.n	8001e44 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1e3      	bne.n	8001da2 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0204 	orr.w	r2, r2, #4
 8001de8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001dea:	f7ff fb7f 	bl	80014ec <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001df0:	e014      	b.n	8001e1c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001df2:	f7ff fb7b 	bl	80014ec <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b0a      	cmp	r3, #10
 8001dfe:	d90d      	bls.n	8001e1c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	f023 0312 	bic.w	r3, r3, #18
 8001e08:	f043 0210 	orr.w	r2, r3, #16
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e013      	b.n	8001e44 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1e3      	bne.n	8001df2 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	f023 0303 	bic.w	r3, r3, #3
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	371c      	adds	r7, #28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}
 8001e4c:	20000014 	.word	0x20000014

08001e50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
	...

08001e64 <__NVIC_SetPriorityGrouping>:
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_GetPriorityGrouping>:
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0307 	and.w	r3, r3, #7
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_EnableIRQ>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db0b      	blt.n	8001ef2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4906      	ldr	r1, [pc, #24]	; (8001efc <__NVIC_EnableIRQ+0x34>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2001      	movs	r0, #1
 8001eea:	fa00 f202 	lsl.w	r2, r0, r2
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <__NVIC_SetPriority>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db0a      	blt.n	8001f2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	490c      	ldr	r1, [pc, #48]	; (8001f4c <__NVIC_SetPriority+0x4c>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f28:	e00a      	b.n	8001f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <__NVIC_SetPriority+0x50>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3b04      	subs	r3, #4
 8001f38:	0112      	lsls	r2, r2, #4
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	761a      	strb	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <NVIC_EncodePriority>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f1c3 0307 	rsb	r3, r3, #7
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf28      	it	cs
 8001f72:	2304      	movcs	r3, #4
 8001f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d902      	bls.n	8001f84 <NVIC_EncodePriority+0x30>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3b03      	subs	r3, #3
 8001f82:	e000      	b.n	8001f86 <NVIC_EncodePriority+0x32>
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	4313      	orrs	r3, r2
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <SysTick_Config>:
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc8:	d301      	bcc.n	8001fce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00f      	b.n	8001fee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <SysTick_Config+0x40>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f7ff ff90 	bl	8001f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <SysTick_Config+0x40>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <SysTick_Config+0x40>)
 8001fe8:	2207      	movs	r2, #7
 8001fea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	e000e010 	.word	0xe000e010

08001ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff2d 	bl	8001e64 <__NVIC_SetPriorityGrouping>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002024:	f7ff ff42 	bl	8001eac <__NVIC_GetPriorityGrouping>
 8002028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	6978      	ldr	r0, [r7, #20]
 8002030:	f7ff ff90 	bl	8001f54 <NVIC_EncodePriority>
 8002034:	4602      	mov	r2, r0
 8002036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff5f 	bl	8001f00 <__NVIC_SetPriority>
}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff35 	bl	8001ec8 <__NVIC_EnableIRQ>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ffa2 	bl	8001fb8 <SysTick_Config>
 8002074:	4603      	mov	r3, r0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002080:	b480      	push	{r7}
 8002082:	b08b      	sub	sp, #44	; 0x2c
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002092:	e127      	b.n	80022e4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002094:	2201      	movs	r2, #1
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	f040 8116 	bne.w	80022de <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b12      	cmp	r3, #18
 80020b8:	d034      	beq.n	8002124 <HAL_GPIO_Init+0xa4>
 80020ba:	2b12      	cmp	r3, #18
 80020bc:	d80d      	bhi.n	80020da <HAL_GPIO_Init+0x5a>
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d02b      	beq.n	800211a <HAL_GPIO_Init+0x9a>
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d804      	bhi.n	80020d0 <HAL_GPIO_Init+0x50>
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d031      	beq.n	800212e <HAL_GPIO_Init+0xae>
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d01c      	beq.n	8002108 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ce:	e048      	b.n	8002162 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d043      	beq.n	800215c <HAL_GPIO_Init+0xdc>
 80020d4:	2b11      	cmp	r3, #17
 80020d6:	d01b      	beq.n	8002110 <HAL_GPIO_Init+0x90>
          break;
 80020d8:	e043      	b.n	8002162 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020da:	4a89      	ldr	r2, [pc, #548]	; (8002300 <HAL_GPIO_Init+0x280>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d026      	beq.n	800212e <HAL_GPIO_Init+0xae>
 80020e0:	4a87      	ldr	r2, [pc, #540]	; (8002300 <HAL_GPIO_Init+0x280>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d806      	bhi.n	80020f4 <HAL_GPIO_Init+0x74>
 80020e6:	4a87      	ldr	r2, [pc, #540]	; (8002304 <HAL_GPIO_Init+0x284>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d020      	beq.n	800212e <HAL_GPIO_Init+0xae>
 80020ec:	4a86      	ldr	r2, [pc, #536]	; (8002308 <HAL_GPIO_Init+0x288>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01d      	beq.n	800212e <HAL_GPIO_Init+0xae>
          break;
 80020f2:	e036      	b.n	8002162 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020f4:	4a85      	ldr	r2, [pc, #532]	; (800230c <HAL_GPIO_Init+0x28c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d019      	beq.n	800212e <HAL_GPIO_Init+0xae>
 80020fa:	4a85      	ldr	r2, [pc, #532]	; (8002310 <HAL_GPIO_Init+0x290>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d016      	beq.n	800212e <HAL_GPIO_Init+0xae>
 8002100:	4a84      	ldr	r2, [pc, #528]	; (8002314 <HAL_GPIO_Init+0x294>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_GPIO_Init+0xae>
          break;
 8002106:	e02c      	b.n	8002162 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	623b      	str	r3, [r7, #32]
          break;
 800210e:	e028      	b.n	8002162 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	3304      	adds	r3, #4
 8002116:	623b      	str	r3, [r7, #32]
          break;
 8002118:	e023      	b.n	8002162 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	3308      	adds	r3, #8
 8002120:	623b      	str	r3, [r7, #32]
          break;
 8002122:	e01e      	b.n	8002162 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	330c      	adds	r3, #12
 800212a:	623b      	str	r3, [r7, #32]
          break;
 800212c:	e019      	b.n	8002162 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002136:	2304      	movs	r3, #4
 8002138:	623b      	str	r3, [r7, #32]
          break;
 800213a:	e012      	b.n	8002162 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002144:	2308      	movs	r3, #8
 8002146:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	611a      	str	r2, [r3, #16]
          break;
 800214e:	e008      	b.n	8002162 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002150:	2308      	movs	r3, #8
 8002152:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	615a      	str	r2, [r3, #20]
          break;
 800215a:	e002      	b.n	8002162 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
          break;
 8002160:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	2bff      	cmp	r3, #255	; 0xff
 8002166:	d801      	bhi.n	800216c <HAL_GPIO_Init+0xec>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	e001      	b.n	8002170 <HAL_GPIO_Init+0xf0>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2bff      	cmp	r3, #255	; 0xff
 8002176:	d802      	bhi.n	800217e <HAL_GPIO_Init+0xfe>
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	e002      	b.n	8002184 <HAL_GPIO_Init+0x104>
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	3b08      	subs	r3, #8
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	210f      	movs	r1, #15
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	401a      	ands	r2, r3
 8002196:	6a39      	ldr	r1, [r7, #32]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	431a      	orrs	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 8096 	beq.w	80022de <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021b2:	4b59      	ldr	r3, [pc, #356]	; (8002318 <HAL_GPIO_Init+0x298>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	4a58      	ldr	r2, [pc, #352]	; (8002318 <HAL_GPIO_Init+0x298>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6193      	str	r3, [r2, #24]
 80021be:	4b56      	ldr	r3, [pc, #344]	; (8002318 <HAL_GPIO_Init+0x298>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021ca:	4a54      	ldr	r2, [pc, #336]	; (800231c <HAL_GPIO_Init+0x29c>)
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	3302      	adds	r3, #2
 80021d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	220f      	movs	r2, #15
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4013      	ands	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4b      	ldr	r2, [pc, #300]	; (8002320 <HAL_GPIO_Init+0x2a0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <HAL_GPIO_Init+0x19e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4a      	ldr	r2, [pc, #296]	; (8002324 <HAL_GPIO_Init+0x2a4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00d      	beq.n	800221a <HAL_GPIO_Init+0x19a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a49      	ldr	r2, [pc, #292]	; (8002328 <HAL_GPIO_Init+0x2a8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <HAL_GPIO_Init+0x196>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a48      	ldr	r2, [pc, #288]	; (800232c <HAL_GPIO_Init+0x2ac>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <HAL_GPIO_Init+0x192>
 800220e:	2303      	movs	r3, #3
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x1a0>
 8002212:	2304      	movs	r3, #4
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x1a0>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x1a0>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x1a0>
 800221e:	2300      	movs	r3, #0
 8002220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002222:	f002 0203 	and.w	r2, r2, #3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002230:	493a      	ldr	r1, [pc, #232]	; (800231c <HAL_GPIO_Init+0x29c>)
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d006      	beq.n	8002258 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800224a:	4b39      	ldr	r3, [pc, #228]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4938      	ldr	r1, [pc, #224]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
 8002256:	e006      	b.n	8002266 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002258:	4b35      	ldr	r3, [pc, #212]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	43db      	mvns	r3, r3
 8002260:	4933      	ldr	r1, [pc, #204]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 8002262:	4013      	ands	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002272:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	492e      	ldr	r1, [pc, #184]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
 800227e:	e006      	b.n	800228e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002280:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	43db      	mvns	r3, r3
 8002288:	4929      	ldr	r1, [pc, #164]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 800228a:	4013      	ands	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800229a:	4b25      	ldr	r3, [pc, #148]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	4924      	ldr	r1, [pc, #144]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
 80022a6:	e006      	b.n	80022b6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	491f      	ldr	r1, [pc, #124]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	491a      	ldr	r1, [pc, #104]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60cb      	str	r3, [r1, #12]
 80022ce:	e006      	b.n	80022de <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022d0:	4b17      	ldr	r3, [pc, #92]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	4915      	ldr	r1, [pc, #84]	; (8002330 <HAL_GPIO_Init+0x2b0>)
 80022da:	4013      	ands	r3, r2
 80022dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	3301      	adds	r3, #1
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	fa22 f303 	lsr.w	r3, r2, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f47f aed0 	bne.w	8002094 <HAL_GPIO_Init+0x14>
  }
}
 80022f4:	bf00      	nop
 80022f6:	372c      	adds	r7, #44	; 0x2c
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	10210000 	.word	0x10210000
 8002304:	10110000 	.word	0x10110000
 8002308:	10120000 	.word	0x10120000
 800230c:	10310000 	.word	0x10310000
 8002310:	10320000 	.word	0x10320000
 8002314:	10220000 	.word	0x10220000
 8002318:	40021000 	.word	0x40021000
 800231c:	40010000 	.word	0x40010000
 8002320:	40010800 	.word	0x40010800
 8002324:	40010c00 	.word	0x40010c00
 8002328:	40011000 	.word	0x40011000
 800232c:	40011400 	.word	0x40011400
 8002330:	40010400 	.word	0x40010400

08002334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e001      	b.n	8002356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	460b      	mov	r3, r1
 800236c:	807b      	strh	r3, [r7, #2]
 800236e:	4613      	mov	r3, r2
 8002370:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002372:	787b      	ldrb	r3, [r7, #1]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002378:	887a      	ldrh	r2, [r7, #2]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800237e:	e003      	b.n	8002388 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002380:	887b      	ldrh	r3, [r7, #2]
 8002382:	041a      	lsls	r2, r3, #16
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	611a      	str	r2, [r3, #16]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002392:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002394:	b08b      	sub	sp, #44	; 0x2c
 8002396:	af06      	add	r7, sp, #24
 8002398:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0d3      	b.n	800254c <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d106      	bne.n	80023be <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f005 fc61 	bl	8007c80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2203      	movs	r2, #3
 80023c2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f002 fc43 	bl	8004c56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	687e      	ldr	r6, [r7, #4]
 80023d8:	466d      	mov	r5, sp
 80023da:	f106 0410 	add.w	r4, r6, #16
 80023de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	602b      	str	r3, [r5, #0]
 80023e6:	1d33      	adds	r3, r6, #4
 80023e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ea:	6838      	ldr	r0, [r7, #0]
 80023ec:	f002 fc0c 	bl	8004c08 <USB_CoreInit>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0a4      	b.n	800254c <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f002 fc40 	bl	8004c8e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
 8002412:	e035      	b.n	8002480 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	015b      	lsls	r3, r3, #5
 800241a:	4413      	add	r3, r2
 800241c:	3329      	adds	r3, #41	; 0x29
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	015b      	lsls	r3, r3, #5
 8002428:	4413      	add	r3, r2
 800242a:	3328      	adds	r3, #40	; 0x28
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	b291      	uxth	r1, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	015b      	lsls	r3, r3, #5
 800243a:	4413      	add	r3, r2
 800243c:	3336      	adds	r3, #54	; 0x36
 800243e:	460a      	mov	r2, r1
 8002440:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	015b      	lsls	r3, r3, #5
 8002448:	4413      	add	r3, r2
 800244a:	332b      	adds	r3, #43	; 0x2b
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	015b      	lsls	r3, r3, #5
 8002456:	4413      	add	r3, r2
 8002458:	3338      	adds	r3, #56	; 0x38
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	015b      	lsls	r3, r3, #5
 8002464:	4413      	add	r3, r2
 8002466:	333c      	adds	r3, #60	; 0x3c
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	3302      	adds	r3, #2
 8002472:	015b      	lsls	r3, r3, #5
 8002474:	4413      	add	r3, r2
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	3301      	adds	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	429a      	cmp	r2, r3
 8002488:	d3c4      	bcc.n	8002414 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	e031      	b.n	80024f4 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	015b      	lsls	r3, r3, #5
 8002496:	4413      	add	r3, r2
 8002498:	f203 1329 	addw	r3, r3, #297	; 0x129
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	015b      	lsls	r3, r3, #5
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024ac:	7bfa      	ldrb	r2, [r7, #15]
 80024ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	015b      	lsls	r3, r3, #5
 80024b6:	4413      	add	r3, r2
 80024b8:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	015b      	lsls	r3, r3, #5
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	015b      	lsls	r3, r3, #5
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	330a      	adds	r3, #10
 80024e6:	015b      	lsls	r3, r3, #5
 80024e8:	4413      	add	r3, r2
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	3301      	adds	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d3c8      	bcc.n	8002490 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	687e      	ldr	r6, [r7, #4]
 8002506:	466d      	mov	r5, sp
 8002508:	f106 0410 	add.w	r4, r6, #16
 800250c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	602b      	str	r3, [r5, #0]
 8002514:	1d33      	adds	r3, r6, #4
 8002516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002518:	6838      	ldr	r0, [r7, #0]
 800251a:	f002 fbc4 	bl	8004ca6 <USB_DevInit>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e00d      	b.n	800254c <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f003 fc02 	bl	8005d4e <USB_DevDisconnect>

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002554 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_PCD_Start+0x16>
 8002566:	2302      	movs	r3, #2
 8002568:	e016      	b.n	8002598 <HAL_PCD_Start+0x44>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002572:	2101      	movs	r1, #1
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f005 fdea 	bl	800814e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fbdb 	bl	8005d3a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f002 fb4d 	bl	8004c28 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 fbd8 	bl	8005d62 <USB_ReadInterrupts>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025bc:	d102      	bne.n	80025c4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 faf2 	bl	8002ba8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f003 fbca 	bl	8005d62 <USB_ReadInterrupts>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d8:	d112      	bne.n	8002600 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ec:	b292      	uxth	r2, r2
 80025ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f005 fbb9 	bl	8007d6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80025f8:	2100      	movs	r1, #0
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f8de 	bl	80027bc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f003 fbac 	bl	8005d62 <USB_ReadInterrupts>
 800260a:	4603      	mov	r3, r0
 800260c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002614:	d10b      	bne.n	800262e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800261e:	b29a      	uxth	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002628:	b292      	uxth	r2, r2
 800262a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f003 fb95 	bl	8005d62 <USB_ReadInterrupts>
 8002638:	4603      	mov	r3, r0
 800263a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800263e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002642:	d10b      	bne.n	800265c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800264c:	b29a      	uxth	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002656:	b292      	uxth	r2, r2
 8002658:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fb7e 	bl	8005d62 <USB_ReadInterrupts>
 8002666:	4603      	mov	r3, r0
 8002668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800266c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002670:	d126      	bne.n	80026c0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800267a:	b29a      	uxth	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0204 	bic.w	r2, r2, #4
 8002684:	b292      	uxth	r2, r2
 8002686:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002692:	b29a      	uxth	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0208 	bic.w	r2, r2, #8
 800269c:	b292      	uxth	r2, r2
 800269e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f005 fb9a 	bl	8007ddc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026ba:	b292      	uxth	r2, r2
 80026bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f003 fb4c 	bl	8005d62 <USB_ReadInterrupts>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026d4:	d13d      	bne.n	8002752 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026de:	b29a      	uxth	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0208 	orr.w	r2, r2, #8
 80026e8:	b292      	uxth	r2, r2
 80026ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002700:	b292      	uxth	r2, r2
 8002702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800270e:	b29a      	uxth	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0204 	orr.w	r2, r2, #4
 8002718:	b292      	uxth	r2, r2
 800271a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f003 fb1d 	bl	8005d62 <USB_ReadInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002732:	d10b      	bne.n	800274c <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002746:	b292      	uxth	r2, r2
 8002748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f005 fb2b 	bl	8007da8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f003 fb03 	bl	8005d62 <USB_ReadInterrupts>
 800275c:	4603      	mov	r3, r0
 800275e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002766:	d10e      	bne.n	8002786 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002770:	b29a      	uxth	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800277a:	b292      	uxth	r2, r2
 800277c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f005 fae4 	bl	8007d4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f003 fae9 	bl	8005d62 <USB_ReadInterrupts>
 8002790:	4603      	mov	r3, r0
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279a:	d10b      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ae:	b292      	uxth	r2, r2
 80027b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_PCD_SetAddress+0x1a>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e013      	b.n	80027fe <HAL_PCD_SetAddress+0x42>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 fa90 	bl	8005d14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	4608      	mov	r0, r1
 8002810:	4611      	mov	r1, r2
 8002812:	461a      	mov	r2, r3
 8002814:	4603      	mov	r3, r0
 8002816:	70fb      	strb	r3, [r7, #3]
 8002818:	460b      	mov	r3, r1
 800281a:	803b      	strh	r3, [r7, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002828:	2b00      	cmp	r3, #0
 800282a:	da0b      	bge.n	8002844 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	015b      	lsls	r3, r3, #5
 8002834:	3328      	adds	r3, #40	; 0x28
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	705a      	strb	r2, [r3, #1]
 8002842:	e00b      	b.n	800285c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	015b      	lsls	r3, r3, #5
 800284c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	b2da      	uxtb	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002868:	883a      	ldrh	r2, [r7, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	78ba      	ldrb	r2, [r7, #2]
 8002872:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	785b      	ldrb	r3, [r3, #1]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d004      	beq.n	8002886 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002886:	78bb      	ldrb	r3, [r7, #2]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d102      	bne.n	8002892 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_PCD_EP_Open+0x9a>
 800289c:	2302      	movs	r3, #2
 800289e:	e00e      	b.n	80028be <HAL_PCD_EP_Open+0xb8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68f9      	ldr	r1, [r7, #12]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 fa1e 	bl	8004cf0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80028bc:	7afb      	ldrb	r3, [r7, #11]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	460b      	mov	r3, r1
 80028d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	da0b      	bge.n	80028f2 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	015b      	lsls	r3, r3, #5
 80028e2:	3328      	adds	r3, #40	; 0x28
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	705a      	strb	r2, [r3, #1]
 80028f0:	e00b      	b.n	800290a <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	015b      	lsls	r3, r3, #5
 80028fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	b2da      	uxtb	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_PCD_EP_Close+0x5e>
 8002920:	2302      	movs	r3, #2
 8002922:	e00e      	b.n	8002942 <HAL_PCD_EP_Close+0x7c>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68f9      	ldr	r1, [r7, #12]
 8002932:	4618      	mov	r0, r3
 8002934:	f002 fcca 	bl	80052cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b086      	sub	sp, #24
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	460b      	mov	r3, r1
 8002958:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800295a:	7afb      	ldrb	r3, [r7, #11]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	015b      	lsls	r3, r3, #5
 8002962:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4413      	add	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2200      	movs	r2, #0
 8002982:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002984:	7afb      	ldrb	r3, [r7, #11]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	b2da      	uxtb	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002990:	7afb      	ldrb	r3, [r7, #11]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6979      	ldr	r1, [r7, #20]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f002 fe29 	bl	80055f8 <USB_EPStartXfer>
 80029a6:	e005      	b.n	80029b4 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6979      	ldr	r1, [r7, #20]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f002 fe22 	bl	80055f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	330a      	adds	r3, #10
 80029d4:	015b      	lsls	r3, r3, #5
 80029d6:	4413      	add	r3, r2
 80029d8:	3304      	adds	r3, #4
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b086      	sub	sp, #24
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	460b      	mov	r3, r1
 80029f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f6:	7afb      	ldrb	r3, [r7, #11]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	015b      	lsls	r3, r3, #5
 80029fe:	3328      	adds	r3, #40	; 0x28
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2200      	movs	r2, #0
 8002a16:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1e:	7afb      	ldrb	r3, [r7, #11]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a2a:	7afb      	ldrb	r3, [r7, #11]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d106      	bne.n	8002a42 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6979      	ldr	r1, [r7, #20]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f002 fddc 	bl	80055f8 <USB_EPStartXfer>
 8002a40:	e005      	b.n	8002a4e <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6979      	ldr	r1, [r7, #20]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 fdd5 	bl	80055f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	f003 0207 	and.w	r2, r3, #7
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d901      	bls.n	8002a76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e046      	b.n	8002b04 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da0b      	bge.n	8002a96 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	015b      	lsls	r3, r3, #5
 8002a86:	3328      	adds	r3, #40	; 0x28
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	705a      	strb	r2, [r3, #1]
 8002a94:	e009      	b.n	8002aaa <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	015b      	lsls	r3, r3, #5
 8002a9a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_PCD_EP_SetStall+0x72>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e01c      	b.n	8002b04 <HAL_PCD_EP_SetStall+0xac>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68f9      	ldr	r1, [r7, #12]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 f845 	bl	8005b68 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d108      	bne.n	8002afa <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002af2:	4619      	mov	r1, r3
 8002af4:	4610      	mov	r0, r2
 8002af6:	f003 f943 	bl	8005d80 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	f003 020f 	and.w	r2, r3, #15
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d901      	bls.n	8002b2a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e03a      	b.n	8002ba0 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	da0b      	bge.n	8002b4a <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	015b      	lsls	r3, r3, #5
 8002b3a:	3328      	adds	r3, #40	; 0x28
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	705a      	strb	r2, [r3, #1]
 8002b48:	e00b      	b.n	8002b62 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	015b      	lsls	r3, r3, #5
 8002b52:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_PCD_EP_ClrStall+0x76>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e00e      	b.n	8002ba0 <HAL_PCD_EP_ClrStall+0x94>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68f9      	ldr	r1, [r7, #12]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f003 f82b 	bl	8005bec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bb0:	e282      	b.n	80030b8 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bba:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002bbc:	8afb      	ldrh	r3, [r7, #22]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002bc6:	7d7b      	ldrb	r3, [r7, #21]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f040 8142 	bne.w	8002e52 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002bce:	8afb      	ldrh	r3, [r7, #22]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d151      	bne.n	8002c7c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be8:	b29c      	uxth	r4, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3328      	adds	r3, #40	; 0x28
 8002bfe:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4413      	add	r3, r2
 8002c14:	3302      	adds	r3, #2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	441a      	add	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f005 f86f 	bl	8007d20 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8234 	beq.w	80030b8 <PCD_EP_ISR_Handler+0x510>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 822f 	bne.w	80030b8 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	b292      	uxth	r2, r2
 8002c6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c7a:	e21d      	b.n	80030b8 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c82:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c8c:	8a7b      	ldrh	r3, [r7, #18]
 8002c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d033      	beq.n	8002cfe <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3306      	adds	r3, #6
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	f003 f8a2 	bl	8005e1e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	b29c      	uxth	r4, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002cf2:	b292      	uxth	r2, r2
 8002cf4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f004 ffe8 	bl	8007ccc <HAL_PCD_SetupStageCallback>
 8002cfc:	e1dc      	b.n	80030b8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002cfe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f280 81d8 	bge.w	80030b8 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d14:	4013      	ands	r3, r2
 8002d16:	b29c      	uxth	r4, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002d20:	b292      	uxth	r2, r2
 8002d22:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	3306      	adds	r3, #6
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d019      	beq.n	8002d8c <PCD_EP_ISR_Handler+0x1e4>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d015      	beq.n	8002d8c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6959      	ldr	r1, [r3, #20]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f003 f854 	bl	8005e1e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	441a      	add	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d84:	2100      	movs	r1, #0
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f004 ffb2 	bl	8007cf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	461c      	mov	r4, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	441c      	add	r4, r3
 8002d9e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002da2:	461c      	mov	r4, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10e      	bne.n	8002dca <PCD_EP_ISR_Handler+0x222>
 8002dac:	8823      	ldrh	r3, [r4, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	8023      	strh	r3, [r4, #0]
 8002db8:	8823      	ldrh	r3, [r4, #0]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	8023      	strh	r3, [r4, #0]
 8002dc8:	e02d      	b.n	8002e26 <PCD_EP_ISR_Handler+0x27e>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b3e      	cmp	r3, #62	; 0x3e
 8002dd0:	d812      	bhi.n	8002df8 <PCD_EP_ISR_Handler+0x250>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	085b      	lsrs	r3, r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <PCD_EP_ISR_Handler+0x244>
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	3301      	adds	r3, #1
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	029b      	lsls	r3, r3, #10
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	8023      	strh	r3, [r4, #0]
 8002df6:	e016      	b.n	8002e26 <PCD_EP_ISR_Handler+0x27e>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <PCD_EP_ISR_Handler+0x26a>
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	029b      	lsls	r3, r3, #10
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e36:	b29c      	uxth	r4, r3
 8002e38:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002e3c:	b29c      	uxth	r4, r3
 8002e3e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002e42:	b29c      	uxth	r4, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4ba2      	ldr	r3, [pc, #648]	; (80030d4 <PCD_EP_ISR_Handler+0x52c>)
 8002e4a:	4323      	orrs	r3, r4
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	8013      	strh	r3, [r2, #0]
 8002e50:	e132      	b.n	80030b8 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	7d7b      	ldrb	r3, [r7, #21]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f280 80d1 	bge.w	800300e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	7d7b      	ldrb	r3, [r7, #21]
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e80:	4013      	ands	r3, r2
 8002e82:	b29c      	uxth	r4, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	7d7b      	ldrb	r3, [r7, #21]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002e94:	b292      	uxth	r2, r2
 8002e96:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e98:	7d7b      	ldrb	r3, [r7, #21]
 8002e9a:	015b      	lsls	r3, r3, #5
 8002e9c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	7b1b      	ldrb	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d121      	bne.n	8002ef2 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3306      	adds	r3, #6
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ed6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002ed8:	8bfb      	ldrh	r3, [r7, #30]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d072      	beq.n	8002fc4 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6959      	ldr	r1, [r3, #20]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	88da      	ldrh	r2, [r3, #6]
 8002eea:	8bfb      	ldrh	r3, [r7, #30]
 8002eec:	f002 ff97 	bl	8005e1e <USB_ReadPMA>
 8002ef0:	e068      	b.n	8002fc4 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d021      	beq.n	8002f50 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3302      	adds	r3, #2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f34:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002f36:	8bfb      	ldrh	r3, [r7, #30]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d02a      	beq.n	8002f92 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6959      	ldr	r1, [r3, #20]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	891a      	ldrh	r2, [r3, #8]
 8002f48:	8bfb      	ldrh	r3, [r7, #30]
 8002f4a:	f002 ff68 	bl	8005e1e <USB_ReadPMA>
 8002f4e:	e020      	b.n	8002f92 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4413      	add	r3, r2
 8002f64:	3306      	adds	r3, #6
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f78:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002f7a:	8bfb      	ldrh	r3, [r7, #30]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6959      	ldr	r1, [r3, #20]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	895a      	ldrh	r2, [r3, #10]
 8002f8c:	8bfb      	ldrh	r3, [r7, #30]
 8002f8e:	f002 ff46 	bl	8005e1e <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fac:	b29c      	uxth	r4, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	441a      	add	r2, r3
 8002fbc:	4b46      	ldr	r3, [pc, #280]	; (80030d8 <PCD_EP_ISR_Handler+0x530>)
 8002fbe:	4323      	orrs	r3, r4
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	8bfb      	ldrh	r3, [r7, #30]
 8002fca:	441a      	add	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	8bfb      	ldrh	r3, [r7, #30]
 8002fd6:	441a      	add	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <PCD_EP_ISR_Handler+0x446>
 8002fe4:	8bfa      	ldrh	r2, [r7, #30]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d206      	bcs.n	8002ffc <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f004 fe7b 	bl	8007cf0 <HAL_PCD_DataOutStageCallback>
 8002ffa:	e008      	b.n	800300e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	7819      	ldrb	r1, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fc9e 	bl	800294a <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800300e:	8a7b      	ldrh	r3, [r7, #18]
 8003010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003014:	2b00      	cmp	r3, #0
 8003016:	d04f      	beq.n	80030b8 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8003018:	7d7b      	ldrb	r3, [r7, #21]
 800301a:	015b      	lsls	r3, r3, #5
 800301c:	3328      	adds	r3, #40	; 0x28
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	7d7b      	ldrb	r3, [r7, #21]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303c:	b29c      	uxth	r4, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	7d7b      	ldrb	r3, [r7, #21]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	441a      	add	r2, r3
 800304a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800304e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003052:	b29b      	uxth	r3, r3
 8003054:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305e:	b29b      	uxth	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	3302      	adds	r3, #2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	441a      	add	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d106      	bne.n	80030a6 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f004 fe3e 	bl	8007d20 <HAL_PCD_DataInStageCallback>
 80030a4:	e008      	b.n	80030b8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	7819      	ldrb	r1, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff fc97 	bl	80029e6 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	b21b      	sxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f6ff ad74 	blt.w	8002bb2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3724      	adds	r7, #36	; 0x24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd90      	pop	{r4, r7, pc}
 80030d4:	ffff8080 	.word	0xffff8080
 80030d8:	ffff80c0 	.word	0xffff80c0

080030dc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	460b      	mov	r3, r1
 80030e8:	817b      	strh	r3, [r7, #10]
 80030ea:	4613      	mov	r3, r2
 80030ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030ee:	897b      	ldrh	r3, [r7, #10]
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030fa:	897b      	ldrh	r3, [r7, #10]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	015b      	lsls	r3, r3, #5
 8003102:	3328      	adds	r3, #40	; 0x28
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e006      	b.n	800311a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800310c:	897b      	ldrh	r3, [r7, #10]
 800310e:	015b      	lsls	r3, r3, #5
 8003110:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800311a:	893b      	ldrh	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d107      	bne.n	8003130 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2200      	movs	r2, #0
 8003124:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	b29a      	uxth	r2, r3
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	80da      	strh	r2, [r3, #6]
 800312e:	e00b      	b.n	8003148 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2201      	movs	r2, #1
 8003134:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	b29a      	uxth	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	0c1b      	lsrs	r3, r3, #16
 8003142:	b29a      	uxth	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e26c      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8087 	beq.w	8003282 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003174:	4b92      	ldr	r3, [pc, #584]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b04      	cmp	r3, #4
 800317e:	d00c      	beq.n	800319a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003180:	4b8f      	ldr	r3, [pc, #572]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	2b08      	cmp	r3, #8
 800318a:	d112      	bne.n	80031b2 <HAL_RCC_OscConfig+0x5e>
 800318c:	4b8c      	ldr	r3, [pc, #560]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003198:	d10b      	bne.n	80031b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319a:	4b89      	ldr	r3, [pc, #548]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d06c      	beq.n	8003280 <HAL_RCC_OscConfig+0x12c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d168      	bne.n	8003280 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e246      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ba:	d106      	bne.n	80031ca <HAL_RCC_OscConfig+0x76>
 80031bc:	4b80      	ldr	r3, [pc, #512]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a7f      	ldr	r2, [pc, #508]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	e02e      	b.n	8003228 <HAL_RCC_OscConfig+0xd4>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x98>
 80031d2:	4b7b      	ldr	r3, [pc, #492]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a7a      	ldr	r2, [pc, #488]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b78      	ldr	r3, [pc, #480]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a77      	ldr	r2, [pc, #476]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e01d      	b.n	8003228 <HAL_RCC_OscConfig+0xd4>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0xbc>
 80031f6:	4b72      	ldr	r3, [pc, #456]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a71      	ldr	r2, [pc, #452]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b6f      	ldr	r3, [pc, #444]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a6e      	ldr	r2, [pc, #440]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e00b      	b.n	8003228 <HAL_RCC_OscConfig+0xd4>
 8003210:	4b6b      	ldr	r3, [pc, #428]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a6a      	ldr	r2, [pc, #424]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b68      	ldr	r3, [pc, #416]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a67      	ldr	r2, [pc, #412]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003226:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d013      	beq.n	8003258 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe f95c 	bl	80014ec <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fe f958 	bl	80014ec <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e1fa      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b5d      	ldr	r3, [pc, #372]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0xe4>
 8003256:	e014      	b.n	8003282 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe f948 	bl	80014ec <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7fe f944 	bl	80014ec <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e1e6      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	4b53      	ldr	r3, [pc, #332]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x10c>
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d063      	beq.n	8003356 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800328e:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800329a:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d11c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x18c>
 80032a6:	4b46      	ldr	r3, [pc, #280]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d116      	bne.n	80032e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b2:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <HAL_RCC_OscConfig+0x176>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e1ba      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ca:	4b3d      	ldr	r3, [pc, #244]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4939      	ldr	r1, [pc, #228]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032de:	e03a      	b.n	8003356 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d020      	beq.n	800332a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e8:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <HAL_RCC_OscConfig+0x270>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fe f8fd 	bl	80014ec <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fe f8f9 	bl	80014ec <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e19b      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4b2a      	ldr	r3, [pc, #168]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4927      	ldr	r1, [pc, #156]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 8003324:	4313      	orrs	r3, r2
 8003326:	600b      	str	r3, [r1, #0]
 8003328:	e015      	b.n	8003356 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332a:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <HAL_RCC_OscConfig+0x270>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7fe f8dc 	bl	80014ec <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003338:	f7fe f8d8 	bl	80014ec <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e17a      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d03a      	beq.n	80033d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d019      	beq.n	800339e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800336a:	4b17      	ldr	r3, [pc, #92]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003370:	f7fe f8bc 	bl	80014ec <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003378:	f7fe f8b8 	bl	80014ec <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e15a      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <HAL_RCC_OscConfig+0x26c>)
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003396:	2001      	movs	r0, #1
 8003398:	f000 fada 	bl	8003950 <RCC_Delay>
 800339c:	e01c      	b.n	80033d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800339e:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a4:	f7fe f8a2 	bl	80014ec <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033aa:	e00f      	b.n	80033cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ac:	f7fe f89e 	bl	80014ec <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d908      	bls.n	80033cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e140      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000
 80033c4:	42420000 	.word	0x42420000
 80033c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033cc:	4b9e      	ldr	r3, [pc, #632]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e9      	bne.n	80033ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80a6 	beq.w	8003532 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ea:	4b97      	ldr	r3, [pc, #604]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10d      	bne.n	8003412 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	4b94      	ldr	r3, [pc, #592]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	4a93      	ldr	r2, [pc, #588]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003400:	61d3      	str	r3, [r2, #28]
 8003402:	4b91      	ldr	r3, [pc, #580]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	4b8e      	ldr	r3, [pc, #568]	; (800364c <HAL_RCC_OscConfig+0x4f8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d118      	bne.n	8003450 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341e:	4b8b      	ldr	r3, [pc, #556]	; (800364c <HAL_RCC_OscConfig+0x4f8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a8a      	ldr	r2, [pc, #552]	; (800364c <HAL_RCC_OscConfig+0x4f8>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342a:	f7fe f85f 	bl	80014ec <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003432:	f7fe f85b 	bl	80014ec <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b64      	cmp	r3, #100	; 0x64
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e0fd      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	4b81      	ldr	r3, [pc, #516]	; (800364c <HAL_RCC_OscConfig+0x4f8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d106      	bne.n	8003466 <HAL_RCC_OscConfig+0x312>
 8003458:	4b7b      	ldr	r3, [pc, #492]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	4a7a      	ldr	r2, [pc, #488]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6213      	str	r3, [r2, #32]
 8003464:	e02d      	b.n	80034c2 <HAL_RCC_OscConfig+0x36e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10c      	bne.n	8003488 <HAL_RCC_OscConfig+0x334>
 800346e:	4b76      	ldr	r3, [pc, #472]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4a75      	ldr	r2, [pc, #468]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	6213      	str	r3, [r2, #32]
 800347a:	4b73      	ldr	r3, [pc, #460]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	4a72      	ldr	r2, [pc, #456]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003480:	f023 0304 	bic.w	r3, r3, #4
 8003484:	6213      	str	r3, [r2, #32]
 8003486:	e01c      	b.n	80034c2 <HAL_RCC_OscConfig+0x36e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b05      	cmp	r3, #5
 800348e:	d10c      	bne.n	80034aa <HAL_RCC_OscConfig+0x356>
 8003490:	4b6d      	ldr	r3, [pc, #436]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4a6c      	ldr	r2, [pc, #432]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003496:	f043 0304 	orr.w	r3, r3, #4
 800349a:	6213      	str	r3, [r2, #32]
 800349c:	4b6a      	ldr	r3, [pc, #424]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4a69      	ldr	r2, [pc, #420]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6213      	str	r3, [r2, #32]
 80034a8:	e00b      	b.n	80034c2 <HAL_RCC_OscConfig+0x36e>
 80034aa:	4b67      	ldr	r3, [pc, #412]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	4a66      	ldr	r2, [pc, #408]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	6213      	str	r3, [r2, #32]
 80034b6:	4b64      	ldr	r3, [pc, #400]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4a63      	ldr	r2, [pc, #396]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80034bc:	f023 0304 	bic.w	r3, r3, #4
 80034c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d015      	beq.n	80034f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ca:	f7fe f80f 	bl	80014ec <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7fe f80b 	bl	80014ec <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e0ab      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e8:	4b57      	ldr	r3, [pc, #348]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ee      	beq.n	80034d2 <HAL_RCC_OscConfig+0x37e>
 80034f4:	e014      	b.n	8003520 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f6:	f7fd fff9 	bl	80014ec <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fc:	e00a      	b.n	8003514 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fd fff5 	bl	80014ec <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f241 3288 	movw	r2, #5000	; 0x1388
 800350c:	4293      	cmp	r3, r2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e095      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003514:	4b4c      	ldr	r3, [pc, #304]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1ee      	bne.n	80034fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003520:	7dfb      	ldrb	r3, [r7, #23]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d105      	bne.n	8003532 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003526:	4b48      	ldr	r3, [pc, #288]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	4a47      	ldr	r2, [pc, #284]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800352c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003530:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8081 	beq.w	800363e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800353c:	4b42      	ldr	r3, [pc, #264]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 030c 	and.w	r3, r3, #12
 8003544:	2b08      	cmp	r3, #8
 8003546:	d061      	beq.n	800360c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d146      	bne.n	80035de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003550:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <HAL_RCC_OscConfig+0x4fc>)
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fd ffc9 	bl	80014ec <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355e:	f7fd ffc5 	bl	80014ec <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e067      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003570:	4b35      	ldr	r3, [pc, #212]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f0      	bne.n	800355e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003584:	d108      	bne.n	8003598 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003586:	4b30      	ldr	r3, [pc, #192]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	492d      	ldr	r1, [pc, #180]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003598:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a19      	ldr	r1, [r3, #32]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	430b      	orrs	r3, r1
 80035aa:	4927      	ldr	r1, [pc, #156]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b0:	4b27      	ldr	r3, [pc, #156]	; (8003650 <HAL_RCC_OscConfig+0x4fc>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b6:	f7fd ff99 	bl	80014ec <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035be:	f7fd ff95 	bl	80014ec <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e037      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035d0:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x46a>
 80035dc:	e02f      	b.n	800363e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b1c      	ldr	r3, [pc, #112]	; (8003650 <HAL_RCC_OscConfig+0x4fc>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fd ff82 	bl	80014ec <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fd ff7e 	bl	80014ec <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e020      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fe:	4b12      	ldr	r3, [pc, #72]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x498>
 800360a:	e018      	b.n	800363e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e013      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_OscConfig+0x4f4>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	429a      	cmp	r2, r3
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d001      	beq.n	800363e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40021000 	.word	0x40021000
 800364c:	40007000 	.word	0x40007000
 8003650:	42420060 	.word	0x42420060

08003654 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0d0      	b.n	800380a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003668:	4b6a      	ldr	r3, [pc, #424]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d910      	bls.n	8003698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b67      	ldr	r3, [pc, #412]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 0207 	bic.w	r2, r3, #7
 800367e:	4965      	ldr	r1, [pc, #404]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b63      	ldr	r3, [pc, #396]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0b8      	b.n	800380a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d020      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036b0:	4b59      	ldr	r3, [pc, #356]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	4a58      	ldr	r2, [pc, #352]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80036b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036c8:	4b53      	ldr	r3, [pc, #332]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4a52      	ldr	r2, [pc, #328]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d4:	4b50      	ldr	r3, [pc, #320]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	494d      	ldr	r1, [pc, #308]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d040      	beq.n	8003774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d107      	bne.n	800370a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	4b47      	ldr	r3, [pc, #284]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d115      	bne.n	8003732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e07f      	b.n	800380a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d107      	bne.n	8003722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003712:	4b41      	ldr	r3, [pc, #260]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e073      	b.n	800380a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003722:	4b3d      	ldr	r3, [pc, #244]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e06b      	b.n	800380a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003732:	4b39      	ldr	r3, [pc, #228]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f023 0203 	bic.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4936      	ldr	r1, [pc, #216]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	4313      	orrs	r3, r2
 8003742:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003744:	f7fd fed2 	bl	80014ec <HAL_GetTick>
 8003748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374a:	e00a      	b.n	8003762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374c:	f7fd fece 	bl	80014ec <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e053      	b.n	800380a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003762:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 020c 	and.w	r2, r3, #12
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	429a      	cmp	r2, r3
 8003772:	d1eb      	bne.n	800374c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003774:	4b27      	ldr	r3, [pc, #156]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d210      	bcs.n	80037a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 0207 	bic.w	r2, r3, #7
 800378a:	4922      	ldr	r1, [pc, #136]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b20      	ldr	r3, [pc, #128]	; (8003814 <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e032      	b.n	800380a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4916      	ldr	r1, [pc, #88]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	490e      	ldr	r1, [pc, #56]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037e2:	f000 f821 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 80037e6:	4601      	mov	r1, r0
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	4a0a      	ldr	r2, [pc, #40]	; (800381c <HAL_RCC_ClockConfig+0x1c8>)
 80037f4:	5cd3      	ldrb	r3, [r2, r3]
 80037f6:	fa21 f303 	lsr.w	r3, r1, r3
 80037fa:	4a09      	ldr	r2, [pc, #36]	; (8003820 <HAL_RCC_ClockConfig+0x1cc>)
 80037fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <HAL_RCC_ClockConfig+0x1d0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd fe30 	bl	8001468 <HAL_InitTick>

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40022000 	.word	0x40022000
 8003818:	40021000 	.word	0x40021000
 800381c:	08009488 	.word	0x08009488
 8003820:	20000014 	.word	0x20000014
 8003824:	20000018 	.word	0x20000018

08003828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003828:	b490      	push	{r4, r7}
 800382a:	b08a      	sub	sp, #40	; 0x28
 800382c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800382e:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003830:	1d3c      	adds	r4, r7, #4
 8003832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003834:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003838:	4b28      	ldr	r3, [pc, #160]	; (80038dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003852:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b04      	cmp	r3, #4
 8003860:	d002      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x40>
 8003862:	2b08      	cmp	r3, #8
 8003864:	d003      	beq.n	800386e <HAL_RCC_GetSysClockFreq+0x46>
 8003866:	e02d      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003868:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800386a:	623b      	str	r3, [r7, #32]
      break;
 800386c:	e02d      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	0c9b      	lsrs	r3, r3, #18
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800387a:	4413      	add	r3, r2
 800387c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003880:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d013      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	0c5b      	lsrs	r3, r3, #17
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800389a:	4413      	add	r3, r2
 800389c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	4a0f      	ldr	r2, [pc, #60]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038a6:	fb02 f203 	mul.w	r2, r2, r3
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
 80038b2:	e004      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	623b      	str	r3, [r7, #32]
      break;
 80038c2:	e002      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038c6:	623b      	str	r3, [r7, #32]
      break;
 80038c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ca:	6a3b      	ldr	r3, [r7, #32]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3728      	adds	r7, #40	; 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc90      	pop	{r4, r7}
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	080093b4 	.word	0x080093b4
 80038dc:	080093c4 	.word	0x080093c4
 80038e0:	40021000 	.word	0x40021000
 80038e4:	007a1200 	.word	0x007a1200
 80038e8:	003d0900 	.word	0x003d0900

080038ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b02      	ldr	r3, [pc, #8]	; (80038fc <HAL_RCC_GetHCLKFreq+0x10>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	20000014 	.word	0x20000014

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003904:	f7ff fff2 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003908:	4601      	mov	r1, r0
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4a03      	ldr	r2, [pc, #12]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003916:	5cd3      	ldrb	r3, [r2, r3]
 8003918:	fa21 f303 	lsr.w	r3, r1, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000
 8003924:	08009498 	.word	0x08009498

08003928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800392c:	f7ff ffde 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003930:	4601      	mov	r1, r0
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	0adb      	lsrs	r3, r3, #11
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	4a03      	ldr	r2, [pc, #12]	; (800394c <HAL_RCC_GetPCLK2Freq+0x24>)
 800393e:	5cd3      	ldrb	r3, [r2, r3]
 8003940:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021000 	.word	0x40021000
 800394c:	08009498 	.word	0x08009498

08003950 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003958:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <RCC_Delay+0x34>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <RCC_Delay+0x38>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	0a5b      	lsrs	r3, r3, #9
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800396c:	bf00      	nop
  }
  while (Delay --);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1e5a      	subs	r2, r3, #1
 8003972:	60fa      	str	r2, [r7, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f9      	bne.n	800396c <RCC_Delay+0x1c>
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000014 	.word	0x20000014
 8003988:	10624dd3 	.word	0x10624dd3

0800398c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d07d      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80039a8:	2300      	movs	r3, #0
 80039aa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ac:	4b4f      	ldr	r3, [pc, #316]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10d      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b8:	4b4c      	ldr	r3, [pc, #304]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	4a4b      	ldr	r2, [pc, #300]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c2:	61d3      	str	r3, [r2, #28]
 80039c4:	4b49      	ldr	r3, [pc, #292]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d0:	2301      	movs	r3, #1
 80039d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b46      	ldr	r3, [pc, #280]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d118      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e0:	4b43      	ldr	r3, [pc, #268]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a42      	ldr	r2, [pc, #264]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ec:	f7fd fd7e 	bl	80014ec <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f2:	e008      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f4:	f7fd fd7a 	bl	80014ec <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	; 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e06d      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	4b3a      	ldr	r3, [pc, #232]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a12:	4b36      	ldr	r3, [pc, #216]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d02e      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d027      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a30:	4b2e      	ldr	r3, [pc, #184]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a3a:	4b2e      	ldr	r3, [pc, #184]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a40:	4b2c      	ldr	r3, [pc, #176]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a46:	4a29      	ldr	r2, [pc, #164]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d014      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fd fd49 	bl	80014ec <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5c:	e00a      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fd fd45 	bl	80014ec <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e036      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a74:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ee      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a80:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4917      	ldr	r1, [pc, #92]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d105      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a98:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	4a13      	ldr	r2, [pc, #76]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	490b      	ldr	r1, [pc, #44]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ace:	4b07      	ldr	r3, [pc, #28]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	4904      	ldr	r1, [pc, #16]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40007000 	.word	0x40007000
 8003af4:	42420440 	.word	0x42420440

08003af8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	b08d      	sub	sp, #52	; 0x34
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b00:	4b55      	ldr	r3, [pc, #340]	; (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003b02:	f107 040c 	add.w	r4, r7, #12
 8003b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b0c:	4b53      	ldr	r3, [pc, #332]	; (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
 8003b16:	2300      	movs	r3, #0
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
 8003b22:	2300      	movs	r3, #0
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d07f      	beq.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003b2c:	2b10      	cmp	r3, #16
 8003b2e:	d002      	beq.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d048      	beq.n	8003bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b34:	e08b      	b.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003b36:	4b4a      	ldr	r3, [pc, #296]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b3c:	4b48      	ldr	r3, [pc, #288]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d07f      	beq.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	0c9b      	lsrs	r3, r3, #18
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b54:	4413      	add	r3, r2
 8003b56:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b5a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d018      	beq.n	8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b66:	4b3e      	ldr	r3, [pc, #248]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	0c5b      	lsrs	r3, r3, #17
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b74:	4413      	add	r3, r2
 8003b76:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003b86:	4a37      	ldr	r2, [pc, #220]	; (8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	fb02 f303 	mul.w	r3, r2, r3
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b96:	e004      	b.n	8003ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	4a33      	ldr	r2, [pc, #204]	; (8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003b9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003ba2:	4b2f      	ldr	r3, [pc, #188]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bae:	d102      	bne.n	8003bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003bb4:	e048      	b.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4a2c      	ldr	r2, [pc, #176]	; (8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	085b      	lsrs	r3, r3, #1
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003bc4:	e040      	b.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003bc6:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd6:	d108      	bne.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be8:	e01f      	b.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf4:	d109      	bne.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003bf6:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003c02:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c08:	e00f      	b.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c14:	d11a      	bne.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003c16:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d014      	beq.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003c22:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c28:	e010      	b.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003c2a:	e00f      	b.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c2c:	f7ff fe7c 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	0b9b      	lsrs	r3, r3, #14
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c46:	e002      	b.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003c48:	bf00      	nop
 8003c4a:	e000      	b.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003c4c:	bf00      	nop
    }
  }
  return (frequency);
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3734      	adds	r7, #52	; 0x34
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd90      	pop	{r4, r7, pc}
 8003c58:	080093c8 	.word	0x080093c8
 8003c5c:	080093d8 	.word	0x080093d8
 8003c60:	40021000 	.word	0x40021000
 8003c64:	007a1200 	.word	0x007a1200
 8003c68:	003d0900 	.word	0x003d0900
 8003c6c:	aaaaaaab 	.word	0xaaaaaaab

08003c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e053      	b.n	8003d2a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fd f98f 	bl	8000fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	ea42 0103 	orr.w	r1, r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	0c1a      	lsrs	r2, r3, #16
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f002 0204 	and.w	r2, r2, #4
 8003d08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b088      	sub	sp, #32
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_SPI_Transmit+0x22>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e11e      	b.n	8003f92 <HAL_SPI_Transmit+0x260>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d5c:	f7fd fbc6 	bl	80014ec <HAL_GetTick>
 8003d60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d002      	beq.n	8003d78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d72:	2302      	movs	r3, #2
 8003d74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d76:	e103      	b.n	8003f80 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_SPI_Transmit+0x52>
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d102      	bne.n	8003d8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d88:	e0fa      	b.n	8003f80 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	88fa      	ldrh	r2, [r7, #6]
 8003da2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	88fa      	ldrh	r2, [r7, #6]
 8003da8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd0:	d107      	bne.n	8003de2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b40      	cmp	r3, #64	; 0x40
 8003dee:	d007      	beq.n	8003e00 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e08:	d14b      	bne.n	8003ea2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_SPI_Transmit+0xe6>
 8003e12:	8afb      	ldrh	r3, [r7, #22]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d13e      	bne.n	8003e96 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	881a      	ldrh	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e3c:	e02b      	b.n	8003e96 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d112      	bne.n	8003e72 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	881a      	ldrh	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	1c9a      	adds	r2, r3, #2
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e70:	e011      	b.n	8003e96 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e72:	f7fd fb3b 	bl	80014ec <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d803      	bhi.n	8003e8a <HAL_SPI_Transmit+0x158>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e88:	d102      	bne.n	8003e90 <HAL_SPI_Transmit+0x15e>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e94:	e074      	b.n	8003f80 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1ce      	bne.n	8003e3e <HAL_SPI_Transmit+0x10c>
 8003ea0:	e04c      	b.n	8003f3c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_SPI_Transmit+0x17e>
 8003eaa:	8afb      	ldrh	r3, [r7, #22]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d140      	bne.n	8003f32 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	7812      	ldrb	r2, [r2, #0]
 8003ebc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ed6:	e02c      	b.n	8003f32 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d113      	bne.n	8003f0e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	330c      	adds	r3, #12
 8003ef0:	7812      	ldrb	r2, [r2, #0]
 8003ef2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f0c:	e011      	b.n	8003f32 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f0e:	f7fd faed 	bl	80014ec <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d803      	bhi.n	8003f26 <HAL_SPI_Transmit+0x1f4>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f24:	d102      	bne.n	8003f2c <HAL_SPI_Transmit+0x1fa>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f30:	e026      	b.n	8003f80 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1cd      	bne.n	8003ed8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	6839      	ldr	r1, [r7, #0]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f894 	bl	800406e <SPI_EndRxTxTransaction>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e000      	b.n	8003f80 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003f7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f90:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3720      	adds	r7, #32
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003faa:	e04c      	b.n	8004046 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb2:	d048      	beq.n	8004046 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003fb4:	f7fd fa9a 	bl	80014ec <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d902      	bls.n	8003fca <SPI_WaitFlagStateUntilTimeout+0x30>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d13d      	bne.n	8004046 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe2:	d111      	bne.n	8004008 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fec:	d004      	beq.n	8003ff8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff6:	d107      	bne.n	8004008 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004006:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004010:	d10f      	bne.n	8004032 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004030:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e00f      	b.n	8004066 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4013      	ands	r3, r2
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	bf0c      	ite	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	2300      	movne	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	429a      	cmp	r2, r3
 8004062:	d1a3      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b086      	sub	sp, #24
 8004072:	af02      	add	r7, sp, #8
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2200      	movs	r2, #0
 8004082:	2180      	movs	r1, #128	; 0x80
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f7ff ff88 	bl	8003f9a <SPI_WaitFlagStateUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	f043 0220 	orr.w	r2, r3, #32
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e000      	b.n	80040a2 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e01d      	b.n	80040f8 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7fc ffb3 	bl	800103c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	4619      	mov	r1, r3
 80040e8:	4610      	mov	r0, r2
 80040ea:	f000 fa7d 	bl	80045e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b0c      	cmp	r3, #12
 800410e:	d841      	bhi.n	8004194 <HAL_TIM_IC_Start_IT+0x94>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <HAL_TIM_IC_Start_IT+0x18>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800414d 	.word	0x0800414d
 800411c:	08004195 	.word	0x08004195
 8004120:	08004195 	.word	0x08004195
 8004124:	08004195 	.word	0x08004195
 8004128:	0800415f 	.word	0x0800415f
 800412c:	08004195 	.word	0x08004195
 8004130:	08004195 	.word	0x08004195
 8004134:	08004195 	.word	0x08004195
 8004138:	08004171 	.word	0x08004171
 800413c:	08004195 	.word	0x08004195
 8004140:	08004195 	.word	0x08004195
 8004144:	08004195 	.word	0x08004195
 8004148:	08004183 	.word	0x08004183
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0202 	orr.w	r2, r2, #2
 800415a:	60da      	str	r2, [r3, #12]
      break;
 800415c:	e01b      	b.n	8004196 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0204 	orr.w	r2, r2, #4
 800416c:	60da      	str	r2, [r3, #12]
      break;
 800416e:	e012      	b.n	8004196 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0208 	orr.w	r2, r2, #8
 800417e:	60da      	str	r2, [r3, #12]
      break;
 8004180:	e009      	b.n	8004196 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0210 	orr.w	r2, r2, #16
 8004190:	60da      	str	r2, [r3, #12]
      break;
 8004192:	e000      	b.n	8004196 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004194:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2201      	movs	r2, #1
 800419c:	6839      	ldr	r1, [r7, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fb91 	bl	80048c6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b06      	cmp	r3, #6
 80041b4:	d007      	beq.n	80041c6 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0201 	orr.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d122      	bne.n	800422c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d11b      	bne.n	800422c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0202 	mvn.w	r2, #2
 80041fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fc fa06 	bl	8000624 <HAL_TIM_IC_CaptureCallback>
 8004218:	e005      	b.n	8004226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f9c9 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f9cf 	bl	80045c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b04      	cmp	r3, #4
 8004238:	d122      	bne.n	8004280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b04      	cmp	r3, #4
 8004246:	d11b      	bne.n	8004280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0204 	mvn.w	r2, #4
 8004250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2202      	movs	r2, #2
 8004256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fc f9dc 	bl	8000624 <HAL_TIM_IC_CaptureCallback>
 800426c:	e005      	b.n	800427a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f99f 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f9a5 	bl	80045c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b08      	cmp	r3, #8
 800428c:	d122      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b08      	cmp	r3, #8
 800429a:	d11b      	bne.n	80042d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0208 	mvn.w	r2, #8
 80042a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2204      	movs	r2, #4
 80042aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fc f9b2 	bl	8000624 <HAL_TIM_IC_CaptureCallback>
 80042c0:	e005      	b.n	80042ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f975 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f97b 	bl	80045c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0310 	and.w	r3, r3, #16
 80042de:	2b10      	cmp	r3, #16
 80042e0:	d122      	bne.n	8004328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d11b      	bne.n	8004328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f06f 0210 	mvn.w	r2, #16
 80042f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2208      	movs	r2, #8
 80042fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fc f988 	bl	8000624 <HAL_TIM_IC_CaptureCallback>
 8004314:	e005      	b.n	8004322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f94b 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f951 	bl	80045c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b01      	cmp	r3, #1
 8004334:	d10e      	bne.n	8004354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b01      	cmp	r3, #1
 8004342:	d107      	bne.n	8004354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0201 	mvn.w	r2, #1
 800434c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f926 	bl	80045a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435e:	2b80      	cmp	r3, #128	; 0x80
 8004360:	d10e      	bne.n	8004380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436c:	2b80      	cmp	r3, #128	; 0x80
 800436e:	d107      	bne.n	8004380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fb14 	bl	80049a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b40      	cmp	r3, #64	; 0x40
 800438c:	d10e      	bne.n	80043ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	d107      	bne.n	80043ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f915 	bl	80045d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d10e      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d107      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0220 	mvn.w	r2, #32
 80043d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fadf 	bl	8004996 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_TIM_IC_ConfigChannel+0x1a>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e08a      	b.n	8004510 <HAL_TIM_IC_ConfigChannel+0x130>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d11b      	bne.n	8004448 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6819      	ldr	r1, [r3, #0]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f000 f944 	bl	80046ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 020c 	bic.w	r2, r2, #12
 8004432:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6999      	ldr	r1, [r3, #24]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	619a      	str	r2, [r3, #24]
 8004446:	e05a      	b.n	80044fe <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b04      	cmp	r3, #4
 800444c:	d11c      	bne.n	8004488 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	6819      	ldr	r1, [r3, #0]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f000 f97f 	bl	8004760 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004470:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6999      	ldr	r1, [r3, #24]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	021a      	lsls	r2, r3, #8
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	619a      	str	r2, [r3, #24]
 8004486:	e03a      	b.n	80044fe <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b08      	cmp	r3, #8
 800448c:	d11b      	bne.n	80044c6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	6819      	ldr	r1, [r3, #0]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f000 f99b 	bl	80047d8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 020c 	bic.w	r2, r2, #12
 80044b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69d9      	ldr	r1, [r3, #28]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	61da      	str	r2, [r3, #28]
 80044c4:	e01b      	b.n	80044fe <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6819      	ldr	r1, [r3, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f000 f9ba 	bl	800484e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69d9      	ldr	r1, [r3, #28]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	021a      	lsls	r2, r3, #8
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b0c      	cmp	r3, #12
 800452a:	d831      	bhi.n	8004590 <HAL_TIM_ReadCapturedValue+0x78>
 800452c:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <HAL_TIM_ReadCapturedValue+0x1c>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004569 	.word	0x08004569
 8004538:	08004591 	.word	0x08004591
 800453c:	08004591 	.word	0x08004591
 8004540:	08004591 	.word	0x08004591
 8004544:	08004573 	.word	0x08004573
 8004548:	08004591 	.word	0x08004591
 800454c:	08004591 	.word	0x08004591
 8004550:	08004591 	.word	0x08004591
 8004554:	0800457d 	.word	0x0800457d
 8004558:	08004591 	.word	0x08004591
 800455c:	08004591 	.word	0x08004591
 8004560:	08004591 	.word	0x08004591
 8004564:	08004587 	.word	0x08004587
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456e:	60fb      	str	r3, [r7, #12]

      break;
 8004570:	e00f      	b.n	8004592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	60fb      	str	r3, [r7, #12]

      break;
 800457a:	e00a      	b.n	8004592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004582:	60fb      	str	r3, [r7, #12]

      break;
 8004584:	e005      	b.n	8004592 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	60fb      	str	r3, [r7, #12]

      break;
 800458e:	e000      	b.n	8004592 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004590:	bf00      	nop
  }

  return tmpreg;
 8004592:	68fb      	ldr	r3, [r7, #12]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop

080045a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr

080045b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr

080045c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr

080045d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a29      	ldr	r2, [pc, #164]	; (80046a0 <TIM_Base_SetConfig+0xb8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00b      	beq.n	8004618 <TIM_Base_SetConfig+0x30>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004606:	d007      	beq.n	8004618 <TIM_Base_SetConfig+0x30>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a26      	ldr	r2, [pc, #152]	; (80046a4 <TIM_Base_SetConfig+0xbc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d003      	beq.n	8004618 <TIM_Base_SetConfig+0x30>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a25      	ldr	r2, [pc, #148]	; (80046a8 <TIM_Base_SetConfig+0xc0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d108      	bne.n	800462a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a1c      	ldr	r2, [pc, #112]	; (80046a0 <TIM_Base_SetConfig+0xb8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00b      	beq.n	800464a <TIM_Base_SetConfig+0x62>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004638:	d007      	beq.n	800464a <TIM_Base_SetConfig+0x62>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a19      	ldr	r2, [pc, #100]	; (80046a4 <TIM_Base_SetConfig+0xbc>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d003      	beq.n	800464a <TIM_Base_SetConfig+0x62>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <TIM_Base_SetConfig+0xc0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d108      	bne.n	800465c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a07      	ldr	r2, [pc, #28]	; (80046a0 <TIM_Base_SetConfig+0xb8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d103      	bne.n	8004690 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	615a      	str	r2, [r3, #20]
}
 8004696:	bf00      	nop
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	40000400 	.word	0x40000400
 80046a8:	40000800 	.word	0x40000800

080046ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f023 0201 	bic.w	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a1f      	ldr	r2, [pc, #124]	; (8004754 <TIM_TI1_SetConfig+0xa8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00b      	beq.n	80046f2 <TIM_TI1_SetConfig+0x46>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e0:	d007      	beq.n	80046f2 <TIM_TI1_SetConfig+0x46>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4a1c      	ldr	r2, [pc, #112]	; (8004758 <TIM_TI1_SetConfig+0xac>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_TI1_SetConfig+0x46>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a1b      	ldr	r2, [pc, #108]	; (800475c <TIM_TI1_SetConfig+0xb0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d101      	bne.n	80046f6 <TIM_TI1_SetConfig+0x4a>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <TIM_TI1_SetConfig+0x4c>
 80046f6:	2300      	movs	r3, #0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 0303 	bic.w	r3, r3, #3
 8004702:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e003      	b.n	8004716 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800471c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	b2db      	uxtb	r3, r3
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f023 030a 	bic.w	r3, r3, #10
 8004730:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f003 030a 	and.w	r3, r3, #10
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	621a      	str	r2, [r3, #32]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40000400 	.word	0x40000400
 800475c:	40000800 	.word	0x40000800

08004760 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	f023 0210 	bic.w	r2, r3, #16
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800479e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	031b      	lsls	r3, r3, #12
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	621a      	str	r2, [r3, #32]
}
 80047ce:	bf00      	nop
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr

080047d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f023 0303 	bic.w	r3, r3, #3
 8004804:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004814:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	b2db      	uxtb	r3, r3
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004828:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	021b      	lsls	r3, r3, #8
 800482e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr

0800484e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800484e:	b480      	push	{r7}
 8004850:	b087      	sub	sp, #28
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	021b      	lsls	r3, r3, #8
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800488c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	031b      	lsls	r3, r3, #12
 8004892:	b29b      	uxth	r3, r3
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	031b      	lsls	r3, r3, #12
 80048a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	621a      	str	r2, [r3, #32]
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr

080048c6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b087      	sub	sp, #28
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2201      	movs	r2, #1
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1a      	ldr	r2, [r3, #32]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	401a      	ands	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a1a      	ldr	r2, [r3, #32]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	fa01 f303 	lsl.w	r3, r1, r3
 80048fe:	431a      	orrs	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	621a      	str	r2, [r3, #32]
}
 8004904:	bf00      	nop
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr

0800490e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800490e:	b480      	push	{r7}
 8004910:	b085      	sub	sp, #20
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004922:	2302      	movs	r3, #2
 8004924:	e032      	b.n	800498c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800495e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	4313      	orrs	r3, r2
 8004968:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr

08004996 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr

080049a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr

080049ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e03f      	b.n	8004a4c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7fc fbb9 	bl	8001158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2224      	movs	r2, #36	; 0x24
 80049ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f828 	bl	8004a54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695a      	ldr	r2, [r3, #20]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a8e:	f023 030c 	bic.w	r3, r3, #12
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	68f9      	ldr	r1, [r7, #12]
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a52      	ldr	r2, [pc, #328]	; (8004c00 <UART_SetConfig+0x1ac>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d14e      	bne.n	8004b5a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004abc:	f7fe ff34 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 8004ac0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	4a4a      	ldr	r2, [pc, #296]	; (8004c04 <UART_SetConfig+0x1b0>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	0119      	lsls	r1, r3, #4
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	009a      	lsls	r2, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af8:	4b42      	ldr	r3, [pc, #264]	; (8004c04 <UART_SetConfig+0x1b0>)
 8004afa:	fba3 0302 	umull	r0, r3, r3, r2
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	2064      	movs	r0, #100	; 0x64
 8004b02:	fb00 f303 	mul.w	r3, r0, r3
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	3332      	adds	r3, #50	; 0x32
 8004b0c:	4a3d      	ldr	r2, [pc, #244]	; (8004c04 <UART_SetConfig+0x1b0>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b18:	4419      	add	r1, r3
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009a      	lsls	r2, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b30:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <UART_SetConfig+0x1b0>)
 8004b32:	fba3 0302 	umull	r0, r3, r3, r2
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	2064      	movs	r0, #100	; 0x64
 8004b3a:	fb00 f303 	mul.w	r3, r0, r3
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	3332      	adds	r3, #50	; 0x32
 8004b44:	4a2f      	ldr	r2, [pc, #188]	; (8004c04 <UART_SetConfig+0x1b0>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	f003 020f 	and.w	r2, r3, #15
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	440a      	add	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004b58:	e04d      	b.n	8004bf6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b5a:	f7fe fed1 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004b5e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	009a      	lsls	r2, r3, #2
 8004b6a:	441a      	add	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b76:	4a23      	ldr	r2, [pc, #140]	; (8004c04 <UART_SetConfig+0x1b0>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	0119      	lsls	r1, r3, #4
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009a      	lsls	r2, r3, #2
 8004b8a:	441a      	add	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b96:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <UART_SetConfig+0x1b0>)
 8004b98:	fba3 0302 	umull	r0, r3, r3, r2
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	2064      	movs	r0, #100	; 0x64
 8004ba0:	fb00 f303 	mul.w	r3, r0, r3
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	3332      	adds	r3, #50	; 0x32
 8004baa:	4a16      	ldr	r2, [pc, #88]	; (8004c04 <UART_SetConfig+0x1b0>)
 8004bac:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb6:	4419      	add	r1, r3
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009a      	lsls	r2, r3, #2
 8004bc2:	441a      	add	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bce:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <UART_SetConfig+0x1b0>)
 8004bd0:	fba3 0302 	umull	r0, r3, r3, r2
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	2064      	movs	r0, #100	; 0x64
 8004bd8:	fb00 f303 	mul.w	r3, r0, r3
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	3332      	adds	r3, #50	; 0x32
 8004be2:	4a08      	ldr	r2, [pc, #32]	; (8004c04 <UART_SetConfig+0x1b0>)
 8004be4:	fba2 2303 	umull	r2, r3, r2, r3
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	f003 020f 	and.w	r2, r3, #15
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	440a      	add	r2, r1
 8004bf4:	609a      	str	r2, [r3, #8]
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40013800 	.word	0x40013800
 8004c04:	51eb851f 	.word	0x51eb851f

08004c08 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c08:	b084      	sub	sp, #16
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	f107 0014 	add.w	r0, r7, #20
 8004c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	b004      	add	sp, #16
 8004c26:	4770      	bx	lr

08004c28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c30:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c34:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	89fb      	ldrh	r3, [r7, #14]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr

08004c56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c5e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c62:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	b21a      	sxth	r2, r3
 8004c6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c72:	43db      	mvns	r3, r3
 8004c74:	b21b      	sxth	r3, r3
 8004c76:	4013      	ands	r3, r2
 8004c78:	b21b      	sxth	r3, r3
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr

08004c8e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	460b      	mov	r3, r1
 8004c98:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr

08004ca6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	f107 0014 	add.w	r0, r7, #20
 8004cb4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ffa5 	bl	8004c28 <USB_EnableGlobalInt>

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cea:	b004      	add	sp, #16
 8004cec:	4770      	bx	lr
	...

08004cf0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cf0:	b490      	push	{r4, r7}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d14:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	78db      	ldrb	r3, [r3, #3]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d819      	bhi.n	8004d52 <USB_ActivateEndpoint+0x62>
 8004d1e:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <USB_ActivateEndpoint+0x34>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004d35 	.word	0x08004d35
 8004d28:	08004d49 	.word	0x08004d49
 8004d2c:	08004d59 	.word	0x08004d59
 8004d30:	08004d3f 	.word	0x08004d3f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d34:	89bb      	ldrh	r3, [r7, #12]
 8004d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d3a:	81bb      	strh	r3, [r7, #12]
      break;
 8004d3c:	e00d      	b.n	8004d5a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d3e:	89bb      	ldrh	r3, [r7, #12]
 8004d40:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d44:	81bb      	strh	r3, [r7, #12]
      break;
 8004d46:	e008      	b.n	8004d5a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d48:	89bb      	ldrh	r3, [r7, #12]
 8004d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d4e:	81bb      	strh	r3, [r7, #12]
      break;
 8004d50:	e003      	b.n	8004d5a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
      break;
 8004d56:	e000      	b.n	8004d5a <USB_ActivateEndpoint+0x6a>
      break;
 8004d58:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	441a      	add	r2, r3
 8004d64:	89bb      	ldrh	r3, [r7, #12]
 8004d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	b29c      	uxth	r4, r3
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	441a      	add	r2, r3
 8004da6:	4b8a      	ldr	r3, [pc, #552]	; (8004fd0 <USB_ActivateEndpoint+0x2e0>)
 8004da8:	4323      	orrs	r3, r4
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	7b1b      	ldrb	r3, [r3, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f040 8112 	bne.w	8004fdc <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d067      	beq.n	8004e90 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dc0:	687c      	ldr	r4, [r7, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	441c      	add	r4, r3
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	4423      	add	r3, r4
 8004dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd8:	461c      	mov	r4, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	88db      	ldrh	r3, [r3, #6]
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	b29c      	uxth	r4, r3
 8004df6:	4623      	mov	r3, r4
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d014      	beq.n	8004e2a <USB_ActivateEndpoint+0x13a>
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e16:	b29c      	uxth	r4, r3
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	441a      	add	r2, r3
 8004e22:	4b6c      	ldr	r3, [pc, #432]	; (8004fd4 <USB_ActivateEndpoint+0x2e4>)
 8004e24:	4323      	orrs	r3, r4
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	78db      	ldrb	r3, [r3, #3]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d018      	beq.n	8004e64 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e48:	b29c      	uxth	r4, r3
 8004e4a:	f084 0320 	eor.w	r3, r4, #32
 8004e4e:	b29c      	uxth	r4, r3
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	441a      	add	r2, r3
 8004e5a:	4b5d      	ldr	r3, [pc, #372]	; (8004fd0 <USB_ActivateEndpoint+0x2e0>)
 8004e5c:	4323      	orrs	r3, r4
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	8013      	strh	r3, [r2, #0]
 8004e62:	e22b      	b.n	80052bc <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e7a:	b29c      	uxth	r4, r3
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	4b52      	ldr	r3, [pc, #328]	; (8004fd0 <USB_ActivateEndpoint+0x2e0>)
 8004e88:	4323      	orrs	r3, r4
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	8013      	strh	r3, [r2, #0]
 8004e8e:	e215      	b.n	80052bc <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e90:	687c      	ldr	r4, [r7, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	441c      	add	r4, r3
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	4423      	add	r3, r4
 8004ea4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ea8:	461c      	mov	r4, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	88db      	ldrh	r3, [r3, #6]
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004eb8:	687c      	ldr	r4, [r7, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	441c      	add	r4, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	4423      	add	r3, r4
 8004ecc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ed0:	461c      	mov	r4, r3
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10e      	bne.n	8004ef8 <USB_ActivateEndpoint+0x208>
 8004eda:	8823      	ldrh	r3, [r4, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	8023      	strh	r3, [r4, #0]
 8004ee6:	8823      	ldrh	r3, [r4, #0]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	8023      	strh	r3, [r4, #0]
 8004ef6:	e02d      	b.n	8004f54 <USB_ActivateEndpoint+0x264>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b3e      	cmp	r3, #62	; 0x3e
 8004efe:	d812      	bhi.n	8004f26 <USB_ActivateEndpoint+0x236>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	085b      	lsrs	r3, r3, #1
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <USB_ActivateEndpoint+0x22a>
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	3301      	adds	r3, #1
 8004f18:	60bb      	str	r3, [r7, #8]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	029b      	lsls	r3, r3, #10
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	8023      	strh	r3, [r4, #0]
 8004f24:	e016      	b.n	8004f54 <USB_ActivateEndpoint+0x264>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 031f 	and.w	r3, r3, #31
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <USB_ActivateEndpoint+0x250>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	029b      	lsls	r3, r3, #10
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29c      	uxth	r4, r3
 8004f62:	4623      	mov	r3, r4
 8004f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d014      	beq.n	8004f96 <USB_ActivateEndpoint+0x2a6>
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	b29c      	uxth	r4, r3
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	4b12      	ldr	r3, [pc, #72]	; (8004fd8 <USB_ActivateEndpoint+0x2e8>)
 8004f90:	4323      	orrs	r3, r4
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fac:	b29c      	uxth	r4, r3
 8004fae:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004fb2:	b29c      	uxth	r4, r3
 8004fb4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004fb8:	b29c      	uxth	r4, r3
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	441a      	add	r2, r3
 8004fc4:	4b02      	ldr	r3, [pc, #8]	; (8004fd0 <USB_ActivateEndpoint+0x2e0>)
 8004fc6:	4323      	orrs	r3, r4
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	8013      	strh	r3, [r2, #0]
 8004fcc:	e176      	b.n	80052bc <USB_ActivateEndpoint+0x5cc>
 8004fce:	bf00      	nop
 8004fd0:	ffff8080 	.word	0xffff8080
 8004fd4:	ffff80c0 	.word	0xffff80c0
 8004fd8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff2:	b29c      	uxth	r4, r3
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	441a      	add	r2, r3
 8004ffe:	4b96      	ldr	r3, [pc, #600]	; (8005258 <USB_ActivateEndpoint+0x568>)
 8005000:	4323      	orrs	r3, r4
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005006:	687c      	ldr	r4, [r7, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800500e:	b29b      	uxth	r3, r3
 8005010:	441c      	add	r4, r3
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	4423      	add	r3, r4
 800501a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800501e:	461c      	mov	r4, r3
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	891b      	ldrh	r3, [r3, #8]
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	b29b      	uxth	r3, r3
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	b29b      	uxth	r3, r3
 800502c:	8023      	strh	r3, [r4, #0]
 800502e:	687c      	ldr	r4, [r7, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005036:	b29b      	uxth	r3, r3
 8005038:	441c      	add	r4, r3
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	4423      	add	r3, r4
 8005042:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005046:	461c      	mov	r4, r3
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	895b      	ldrh	r3, [r3, #10]
 800504c:	085b      	lsrs	r3, r3, #1
 800504e:	b29b      	uxth	r3, r3
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	b29b      	uxth	r3, r3
 8005054:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	785b      	ldrb	r3, [r3, #1]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 8088 	bne.w	8005170 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	b29c      	uxth	r4, r3
 800506e:	4623      	mov	r3, r4
 8005070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d014      	beq.n	80050a2 <USB_ActivateEndpoint+0x3b2>
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	b29c      	uxth	r4, r3
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	441a      	add	r2, r3
 800509a:	4b70      	ldr	r3, [pc, #448]	; (800525c <USB_ActivateEndpoint+0x56c>)
 800509c:	4323      	orrs	r3, r4
 800509e:	b29b      	uxth	r3, r3
 80050a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29c      	uxth	r4, r3
 80050b0:	4623      	mov	r3, r4
 80050b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d014      	beq.n	80050e4 <USB_ActivateEndpoint+0x3f4>
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d0:	b29c      	uxth	r4, r3
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	441a      	add	r2, r3
 80050dc:	4b60      	ldr	r3, [pc, #384]	; (8005260 <USB_ActivateEndpoint+0x570>)
 80050de:	4323      	orrs	r3, r4
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	b29c      	uxth	r4, r3
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	441a      	add	r2, r3
 8005106:	4b56      	ldr	r3, [pc, #344]	; (8005260 <USB_ActivateEndpoint+0x570>)
 8005108:	4323      	orrs	r3, r4
 800510a:	b29b      	uxth	r3, r3
 800510c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005124:	b29c      	uxth	r4, r3
 8005126:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800512a:	b29c      	uxth	r4, r3
 800512c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005130:	b29c      	uxth	r4, r3
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	441a      	add	r2, r3
 800513c:	4b49      	ldr	r3, [pc, #292]	; (8005264 <USB_ActivateEndpoint+0x574>)
 800513e:	4323      	orrs	r3, r4
 8005140:	b29b      	uxth	r3, r3
 8005142:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	b29b      	uxth	r3, r3
 8005152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800515a:	b29c      	uxth	r4, r3
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	441a      	add	r2, r3
 8005166:	4b3f      	ldr	r3, [pc, #252]	; (8005264 <USB_ActivateEndpoint+0x574>)
 8005168:	4323      	orrs	r3, r4
 800516a:	b29b      	uxth	r3, r3
 800516c:	8013      	strh	r3, [r2, #0]
 800516e:	e0a5      	b.n	80052bc <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29c      	uxth	r4, r3
 800517e:	4623      	mov	r3, r4
 8005180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d014      	beq.n	80051b2 <USB_ActivateEndpoint+0x4c2>
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	b29c      	uxth	r4, r3
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	441a      	add	r2, r3
 80051aa:	4b2c      	ldr	r3, [pc, #176]	; (800525c <USB_ActivateEndpoint+0x56c>)
 80051ac:	4323      	orrs	r3, r4
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	b29c      	uxth	r4, r3
 80051c0:	4623      	mov	r3, r4
 80051c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <USB_ActivateEndpoint+0x504>
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e0:	b29c      	uxth	r4, r3
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	441a      	add	r2, r3
 80051ec:	4b1c      	ldr	r3, [pc, #112]	; (8005260 <USB_ActivateEndpoint+0x570>)
 80051ee:	4323      	orrs	r3, r4
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	b29c      	uxth	r4, r3
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	441a      	add	r2, r3
 8005216:	4b11      	ldr	r3, [pc, #68]	; (800525c <USB_ActivateEndpoint+0x56c>)
 8005218:	4323      	orrs	r3, r4
 800521a:	b29b      	uxth	r3, r3
 800521c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	78db      	ldrb	r3, [r3, #3]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d020      	beq.n	8005268 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29b      	uxth	r3, r3
 8005234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800523c:	b29c      	uxth	r4, r3
 800523e:	f084 0320 	eor.w	r3, r4, #32
 8005242:	b29c      	uxth	r4, r3
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	441a      	add	r2, r3
 800524e:	4b05      	ldr	r3, [pc, #20]	; (8005264 <USB_ActivateEndpoint+0x574>)
 8005250:	4323      	orrs	r3, r4
 8005252:	b29b      	uxth	r3, r3
 8005254:	8013      	strh	r3, [r2, #0]
 8005256:	e01c      	b.n	8005292 <USB_ActivateEndpoint+0x5a2>
 8005258:	ffff8180 	.word	0xffff8180
 800525c:	ffffc080 	.word	0xffffc080
 8005260:	ffff80c0 	.word	0xffff80c0
 8005264:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800527e:	b29c      	uxth	r4, r3
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	441a      	add	r2, r3
 800528a:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <USB_ActivateEndpoint+0x5d8>)
 800528c:	4323      	orrs	r3, r4
 800528e:	b29b      	uxth	r3, r3
 8005290:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a8:	b29c      	uxth	r4, r3
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	441a      	add	r2, r3
 80052b4:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <USB_ActivateEndpoint+0x5d8>)
 80052b6:	4323      	orrs	r3, r4
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc90      	pop	{r4, r7}
 80052c6:	4770      	bx	lr
 80052c8:	ffff8080 	.word	0xffff8080

080052cc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052cc:	b490      	push	{r4, r7}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	7b1b      	ldrb	r3, [r3, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d171      	bne.n	80053c2 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	785b      	ldrb	r3, [r3, #1]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d036      	beq.n	8005354 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29c      	uxth	r4, r3
 80052f4:	4623      	mov	r3, r4
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d014      	beq.n	8005328 <USB_DeactivateEndpoint+0x5c>
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005314:	b29c      	uxth	r4, r3
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	441a      	add	r2, r3
 8005320:	4b6b      	ldr	r3, [pc, #428]	; (80054d0 <USB_DeactivateEndpoint+0x204>)
 8005322:	4323      	orrs	r3, r4
 8005324:	b29b      	uxth	r3, r3
 8005326:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800533a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800533e:	b29c      	uxth	r4, r3
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	441a      	add	r2, r3
 800534a:	4b62      	ldr	r3, [pc, #392]	; (80054d4 <USB_DeactivateEndpoint+0x208>)
 800534c:	4323      	orrs	r3, r4
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]
 8005352:	e144      	b.n	80055de <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29c      	uxth	r4, r3
 8005362:	4623      	mov	r3, r4
 8005364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d014      	beq.n	8005396 <USB_DeactivateEndpoint+0xca>
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29b      	uxth	r3, r3
 800537a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	b29c      	uxth	r4, r3
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	441a      	add	r2, r3
 800538e:	4b52      	ldr	r3, [pc, #328]	; (80054d8 <USB_DeactivateEndpoint+0x20c>)
 8005390:	4323      	orrs	r3, r4
 8005392:	b29b      	uxth	r3, r3
 8005394:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ac:	b29c      	uxth	r4, r3
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	441a      	add	r2, r3
 80053b8:	4b46      	ldr	r3, [pc, #280]	; (80054d4 <USB_DeactivateEndpoint+0x208>)
 80053ba:	4323      	orrs	r3, r4
 80053bc:	b29b      	uxth	r3, r3
 80053be:	8013      	strh	r3, [r2, #0]
 80053c0:	e10d      	b.n	80055de <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	785b      	ldrb	r3, [r3, #1]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f040 8088 	bne.w	80054dc <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29c      	uxth	r4, r3
 80053da:	4623      	mov	r3, r4
 80053dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d014      	beq.n	800540e <USB_DeactivateEndpoint+0x142>
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	b29c      	uxth	r4, r3
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	441a      	add	r2, r3
 8005406:	4b34      	ldr	r3, [pc, #208]	; (80054d8 <USB_DeactivateEndpoint+0x20c>)
 8005408:	4323      	orrs	r3, r4
 800540a:	b29b      	uxth	r3, r3
 800540c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29c      	uxth	r4, r3
 800541c:	4623      	mov	r3, r4
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d014      	beq.n	8005450 <USB_DeactivateEndpoint+0x184>
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543c:	b29c      	uxth	r4, r3
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	441a      	add	r2, r3
 8005448:	4b21      	ldr	r3, [pc, #132]	; (80054d0 <USB_DeactivateEndpoint+0x204>)
 800544a:	4323      	orrs	r3, r4
 800544c:	b29b      	uxth	r3, r3
 800544e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005466:	b29c      	uxth	r4, r3
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	441a      	add	r2, r3
 8005472:	4b17      	ldr	r3, [pc, #92]	; (80054d0 <USB_DeactivateEndpoint+0x204>)
 8005474:	4323      	orrs	r3, r4
 8005476:	b29b      	uxth	r3, r3
 8005478:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800548c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005490:	b29c      	uxth	r4, r3
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	441a      	add	r2, r3
 800549c:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <USB_DeactivateEndpoint+0x208>)
 800549e:	4323      	orrs	r3, r4
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ba:	b29c      	uxth	r4, r3
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	441a      	add	r2, r3
 80054c6:	4b03      	ldr	r3, [pc, #12]	; (80054d4 <USB_DeactivateEndpoint+0x208>)
 80054c8:	4323      	orrs	r3, r4
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	8013      	strh	r3, [r2, #0]
 80054ce:	e086      	b.n	80055de <USB_DeactivateEndpoint+0x312>
 80054d0:	ffff80c0 	.word	0xffff80c0
 80054d4:	ffff8080 	.word	0xffff8080
 80054d8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29c      	uxth	r4, r3
 80054ea:	4623      	mov	r3, r4
 80054ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d014      	beq.n	800551e <USB_DeactivateEndpoint+0x252>
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b29b      	uxth	r3, r3
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550a:	b29c      	uxth	r4, r3
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	441a      	add	r2, r3
 8005516:	4b35      	ldr	r3, [pc, #212]	; (80055ec <USB_DeactivateEndpoint+0x320>)
 8005518:	4323      	orrs	r3, r4
 800551a:	b29b      	uxth	r3, r3
 800551c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	b29c      	uxth	r4, r3
 800552c:	4623      	mov	r3, r4
 800552e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d014      	beq.n	8005560 <USB_DeactivateEndpoint+0x294>
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554c:	b29c      	uxth	r4, r3
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	441a      	add	r2, r3
 8005558:	4b25      	ldr	r3, [pc, #148]	; (80055f0 <USB_DeactivateEndpoint+0x324>)
 800555a:	4323      	orrs	r3, r4
 800555c:	b29b      	uxth	r3, r3
 800555e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005576:	b29c      	uxth	r4, r3
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	441a      	add	r2, r3
 8005582:	4b1a      	ldr	r3, [pc, #104]	; (80055ec <USB_DeactivateEndpoint+0x320>)
 8005584:	4323      	orrs	r3, r4
 8005586:	b29b      	uxth	r3, r3
 8005588:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a0:	b29c      	uxth	r4, r3
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	441a      	add	r2, r3
 80055ac:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <USB_DeactivateEndpoint+0x328>)
 80055ae:	4323      	orrs	r3, r4
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ca:	b29c      	uxth	r4, r3
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	441a      	add	r2, r3
 80055d6:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <USB_DeactivateEndpoint+0x328>)
 80055d8:	4323      	orrs	r3, r4
 80055da:	b29b      	uxth	r3, r3
 80055dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc90      	pop	{r4, r7}
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	ffffc080 	.word	0xffffc080
 80055f0:	ffff80c0 	.word	0xffff80c0
 80055f4:	ffff8080 	.word	0xffff8080

080055f8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b08d      	sub	sp, #52	; 0x34
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	785b      	ldrb	r3, [r3, #1]
 8005606:	2b01      	cmp	r3, #1
 8005608:	f040 8160 	bne.w	80058cc <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	429a      	cmp	r2, r3
 8005616:	d909      	bls.n	800562c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005624:	1ad2      	subs	r2, r2, r3
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	619a      	str	r2, [r3, #24]
 800562a:	e005      	b.n	8005638 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2200      	movs	r2, #0
 8005636:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	7b1b      	ldrb	r3, [r3, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d119      	bne.n	8005674 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	6959      	ldr	r1, [r3, #20]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	88da      	ldrh	r2, [r3, #6]
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	b29b      	uxth	r3, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fba2 	bl	8005d96 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005652:	687c      	ldr	r4, [r7, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565a:	b29b      	uxth	r3, r3
 800565c:	441c      	add	r4, r3
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	4423      	add	r3, r4
 8005666:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800566a:	461c      	mov	r4, r3
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	b29b      	uxth	r3, r3
 8005670:	8023      	strh	r3, [r4, #0]
 8005672:	e10f      	b.n	8005894 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d065      	beq.n	8005756 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800568a:	687c      	ldr	r4, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d148      	bne.n	8005726 <USB_EPStartXfer+0x12e>
 8005694:	687c      	ldr	r4, [r7, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569c:	b29b      	uxth	r3, r3
 800569e:	441c      	add	r4, r3
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	4423      	add	r3, r4
 80056a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056ac:	461c      	mov	r4, r3
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10e      	bne.n	80056d2 <USB_EPStartXfer+0xda>
 80056b4:	8823      	ldrh	r3, [r4, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056bc:	b29b      	uxth	r3, r3
 80056be:	8023      	strh	r3, [r4, #0]
 80056c0:	8823      	ldrh	r3, [r4, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	8023      	strh	r3, [r4, #0]
 80056d0:	e03d      	b.n	800574e <USB_EPStartXfer+0x156>
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	2b3e      	cmp	r3, #62	; 0x3e
 80056d6:	d810      	bhi.n	80056fa <USB_EPStartXfer+0x102>
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	085b      	lsrs	r3, r3, #1
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <USB_EPStartXfer+0xf6>
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	3301      	adds	r3, #1
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	029b      	lsls	r3, r3, #10
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	8023      	strh	r3, [r4, #0]
 80056f8:	e029      	b.n	800574e <USB_EPStartXfer+0x156>
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	2b00      	cmp	r3, #0
 8005708:	d102      	bne.n	8005710 <USB_EPStartXfer+0x118>
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	3b01      	subs	r3, #1
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	b29b      	uxth	r3, r3
 8005714:	029b      	lsls	r3, r3, #10
 8005716:	b29b      	uxth	r3, r3
 8005718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800571c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005720:	b29b      	uxth	r3, r3
 8005722:	8023      	strh	r3, [r4, #0]
 8005724:	e013      	b.n	800574e <USB_EPStartXfer+0x156>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	785b      	ldrb	r3, [r3, #1]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d10f      	bne.n	800574e <USB_EPStartXfer+0x156>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005734:	b29b      	uxth	r3, r3
 8005736:	441c      	add	r4, r3
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	4423      	add	r3, r4
 8005740:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	895b      	ldrh	r3, [r3, #10]
 8005752:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005754:	e063      	b.n	800581e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d148      	bne.n	80057f0 <USB_EPStartXfer+0x1f8>
 800575e:	687c      	ldr	r4, [r7, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005766:	b29b      	uxth	r3, r3
 8005768:	441c      	add	r4, r3
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	4423      	add	r3, r4
 8005772:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005776:	461c      	mov	r4, r3
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10e      	bne.n	800579c <USB_EPStartXfer+0x1a4>
 800577e:	8823      	ldrh	r3, [r4, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005786:	b29b      	uxth	r3, r3
 8005788:	8023      	strh	r3, [r4, #0]
 800578a:	8823      	ldrh	r3, [r4, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005796:	b29b      	uxth	r3, r3
 8005798:	8023      	strh	r3, [r4, #0]
 800579a:	e03d      	b.n	8005818 <USB_EPStartXfer+0x220>
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	2b3e      	cmp	r3, #62	; 0x3e
 80057a0:	d810      	bhi.n	80057c4 <USB_EPStartXfer+0x1cc>
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	085b      	lsrs	r3, r3, #1
 80057a6:	623b      	str	r3, [r7, #32]
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <USB_EPStartXfer+0x1c0>
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	3301      	adds	r3, #1
 80057b6:	623b      	str	r3, [r7, #32]
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	029b      	lsls	r3, r3, #10
 80057be:	b29b      	uxth	r3, r3
 80057c0:	8023      	strh	r3, [r4, #0]
 80057c2:	e029      	b.n	8005818 <USB_EPStartXfer+0x220>
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	623b      	str	r3, [r7, #32]
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	f003 031f 	and.w	r3, r3, #31
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <USB_EPStartXfer+0x1e2>
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	623b      	str	r3, [r7, #32]
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	029b      	lsls	r3, r3, #10
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	8023      	strh	r3, [r4, #0]
 80057ee:	e013      	b.n	8005818 <USB_EPStartXfer+0x220>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d10f      	bne.n	8005818 <USB_EPStartXfer+0x220>
 80057f8:	687c      	ldr	r4, [r7, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005800:	b29b      	uxth	r3, r3
 8005802:	441c      	add	r4, r3
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	4423      	add	r3, r4
 800580c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005810:	461c      	mov	r4, r3
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	b29b      	uxth	r3, r3
 8005816:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	891b      	ldrh	r3, [r3, #8]
 800581c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	6959      	ldr	r1, [r3, #20]
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	b29b      	uxth	r3, r3
 8005826:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fab4 	bl	8005d96 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	785b      	ldrb	r3, [r3, #1]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d115      	bne.n	8005862 <USB_EPStartXfer+0x26a>
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29b      	uxth	r3, r3
 8005844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584c:	b29c      	uxth	r4, r3
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	441a      	add	r2, r3
 8005858:	4b9a      	ldr	r3, [pc, #616]	; (8005ac4 <USB_EPStartXfer+0x4cc>)
 800585a:	4323      	orrs	r3, r4
 800585c:	b29b      	uxth	r3, r3
 800585e:	8013      	strh	r3, [r2, #0]
 8005860:	e018      	b.n	8005894 <USB_EPStartXfer+0x29c>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	785b      	ldrb	r3, [r3, #1]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d114      	bne.n	8005894 <USB_EPStartXfer+0x29c>
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005880:	b29c      	uxth	r4, r3
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	441a      	add	r2, r3
 800588c:	4b8e      	ldr	r3, [pc, #568]	; (8005ac8 <USB_EPStartXfer+0x4d0>)
 800588e:	4323      	orrs	r3, r4
 8005890:	b29b      	uxth	r3, r3
 8005892:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058aa:	b29c      	uxth	r4, r3
 80058ac:	f084 0310 	eor.w	r3, r4, #16
 80058b0:	b29c      	uxth	r4, r3
 80058b2:	f084 0320 	eor.w	r3, r4, #32
 80058b6:	b29c      	uxth	r4, r3
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	441a      	add	r2, r3
 80058c2:	4b82      	ldr	r3, [pc, #520]	; (8005acc <USB_EPStartXfer+0x4d4>)
 80058c4:	4323      	orrs	r3, r4
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	8013      	strh	r3, [r2, #0]
 80058ca:	e146      	b.n	8005b5a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	699a      	ldr	r2, [r3, #24]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d909      	bls.n	80058ec <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	1ad2      	subs	r2, r2, r3
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	619a      	str	r2, [r3, #24]
 80058ea:	e005      	b.n	80058f8 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2200      	movs	r2, #0
 80058f6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	7b1b      	ldrb	r3, [r3, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d148      	bne.n	8005992 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005900:	687c      	ldr	r4, [r7, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005908:	b29b      	uxth	r3, r3
 800590a:	441c      	add	r4, r3
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	4423      	add	r3, r4
 8005914:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005918:	461c      	mov	r4, r3
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10e      	bne.n	800593e <USB_EPStartXfer+0x346>
 8005920:	8823      	ldrh	r3, [r4, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005928:	b29b      	uxth	r3, r3
 800592a:	8023      	strh	r3, [r4, #0]
 800592c:	8823      	ldrh	r3, [r4, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005938:	b29b      	uxth	r3, r3
 800593a:	8023      	strh	r3, [r4, #0]
 800593c:	e0f2      	b.n	8005b24 <USB_EPStartXfer+0x52c>
 800593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005940:	2b3e      	cmp	r3, #62	; 0x3e
 8005942:	d810      	bhi.n	8005966 <USB_EPStartXfer+0x36e>
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	085b      	lsrs	r3, r3, #1
 8005948:	61fb      	str	r3, [r7, #28]
 800594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <USB_EPStartXfer+0x362>
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	3301      	adds	r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	b29b      	uxth	r3, r3
 800595e:	029b      	lsls	r3, r3, #10
 8005960:	b29b      	uxth	r3, r3
 8005962:	8023      	strh	r3, [r4, #0]
 8005964:	e0de      	b.n	8005b24 <USB_EPStartXfer+0x52c>
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	095b      	lsrs	r3, r3, #5
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	2b00      	cmp	r3, #0
 8005974:	d102      	bne.n	800597c <USB_EPStartXfer+0x384>
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	3b01      	subs	r3, #1
 800597a:	61fb      	str	r3, [r7, #28]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	b29b      	uxth	r3, r3
 8005980:	029b      	lsls	r3, r3, #10
 8005982:	b29b      	uxth	r3, r3
 8005984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800598c:	b29b      	uxth	r3, r3
 800598e:	8023      	strh	r3, [r4, #0]
 8005990:	e0c8      	b.n	8005b24 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	785b      	ldrb	r3, [r3, #1]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d148      	bne.n	8005a2c <USB_EPStartXfer+0x434>
 800599a:	687c      	ldr	r4, [r7, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	441c      	add	r4, r3
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	4423      	add	r3, r4
 80059ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059b2:	461c      	mov	r4, r3
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10e      	bne.n	80059d8 <USB_EPStartXfer+0x3e0>
 80059ba:	8823      	ldrh	r3, [r4, #0]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	8023      	strh	r3, [r4, #0]
 80059c6:	8823      	ldrh	r3, [r4, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	8023      	strh	r3, [r4, #0]
 80059d6:	e03d      	b.n	8005a54 <USB_EPStartXfer+0x45c>
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	2b3e      	cmp	r3, #62	; 0x3e
 80059dc:	d810      	bhi.n	8005a00 <USB_EPStartXfer+0x408>
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	61bb      	str	r3, [r7, #24]
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <USB_EPStartXfer+0x3fc>
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	3301      	adds	r3, #1
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	029b      	lsls	r3, r3, #10
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	8023      	strh	r3, [r4, #0]
 80059fe:	e029      	b.n	8005a54 <USB_EPStartXfer+0x45c>
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	f003 031f 	and.w	r3, r3, #31
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d102      	bne.n	8005a16 <USB_EPStartXfer+0x41e>
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	029b      	lsls	r3, r3, #10
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	8023      	strh	r3, [r4, #0]
 8005a2a:	e013      	b.n	8005a54 <USB_EPStartXfer+0x45c>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	785b      	ldrb	r3, [r3, #1]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d10f      	bne.n	8005a54 <USB_EPStartXfer+0x45c>
 8005a34:	687c      	ldr	r4, [r7, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	441c      	add	r4, r3
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	4423      	add	r3, r4
 8005a48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a4c:	461c      	mov	r4, r3
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	8023      	strh	r3, [r4, #0]
 8005a54:	687c      	ldr	r4, [r7, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	785b      	ldrb	r3, [r3, #1]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d14e      	bne.n	8005afc <USB_EPStartXfer+0x504>
 8005a5e:	687c      	ldr	r4, [r7, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	441c      	add	r4, r3
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	4423      	add	r3, r4
 8005a72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a76:	461c      	mov	r4, r3
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10e      	bne.n	8005a9c <USB_EPStartXfer+0x4a4>
 8005a7e:	8823      	ldrh	r3, [r4, #0]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	8023      	strh	r3, [r4, #0]
 8005a8a:	8823      	ldrh	r3, [r4, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	8023      	strh	r3, [r4, #0]
 8005a9a:	e043      	b.n	8005b24 <USB_EPStartXfer+0x52c>
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa0:	d816      	bhi.n	8005ad0 <USB_EPStartXfer+0x4d8>
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <USB_EPStartXfer+0x4c0>
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	029b      	lsls	r3, r3, #10
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	8023      	strh	r3, [r4, #0]
 8005ac2:	e02f      	b.n	8005b24 <USB_EPStartXfer+0x52c>
 8005ac4:	ffff80c0 	.word	0xffff80c0
 8005ac8:	ffffc080 	.word	0xffffc080
 8005acc:	ffff8080 	.word	0xffff8080
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	f003 031f 	and.w	r3, r3, #31
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d102      	bne.n	8005ae6 <USB_EPStartXfer+0x4ee>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	029b      	lsls	r3, r3, #10
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	8023      	strh	r3, [r4, #0]
 8005afa:	e013      	b.n	8005b24 <USB_EPStartXfer+0x52c>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d10f      	bne.n	8005b24 <USB_EPStartXfer+0x52c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	441c      	add	r4, r3
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	4423      	add	r3, r4
 8005b16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b1a:	613b      	str	r3, [r7, #16]
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	b29c      	uxth	r4, r3
 8005b3c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005b40:	b29c      	uxth	r4, r3
 8005b42:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005b46:	b29c      	uxth	r4, r3
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	441a      	add	r2, r3
 8005b52:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <USB_EPStartXfer+0x56c>)
 8005b54:	4323      	orrs	r3, r4
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3734      	adds	r7, #52	; 0x34
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd90      	pop	{r4, r7, pc}
 8005b64:	ffff8080 	.word	0xffff8080

08005b68 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b68:	b490      	push	{r4, r7}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d018      	beq.n	8005bac <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b90:	b29c      	uxth	r4, r3
 8005b92:	f084 0310 	eor.w	r3, r4, #16
 8005b96:	b29c      	uxth	r4, r3
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	441a      	add	r2, r3
 8005ba2:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <USB_EPSetStall+0x80>)
 8005ba4:	4323      	orrs	r3, r4
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	8013      	strh	r3, [r2, #0]
 8005baa:	e017      	b.n	8005bdc <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc2:	b29c      	uxth	r4, r3
 8005bc4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005bc8:	b29c      	uxth	r4, r3
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	441a      	add	r2, r3
 8005bd4:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <USB_EPSetStall+0x80>)
 8005bd6:	4323      	orrs	r3, r4
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc90      	pop	{r4, r7}
 8005be6:	4770      	bx	lr
 8005be8:	ffff8080 	.word	0xffff8080

08005bec <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bec:	b490      	push	{r4, r7}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	7b1b      	ldrb	r3, [r3, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d17d      	bne.n	8005cfa <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d03d      	beq.n	8005c82 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29c      	uxth	r4, r3
 8005c14:	4623      	mov	r3, r4
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d014      	beq.n	8005c48 <USB_EPClearStall+0x5c>
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c34:	b29c      	uxth	r4, r3
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	441a      	add	r2, r3
 8005c40:	4b31      	ldr	r3, [pc, #196]	; (8005d08 <USB_EPClearStall+0x11c>)
 8005c42:	4323      	orrs	r3, r4
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	78db      	ldrb	r3, [r3, #3]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d054      	beq.n	8005cfa <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c66:	b29c      	uxth	r4, r3
 8005c68:	f084 0320 	eor.w	r3, r4, #32
 8005c6c:	b29c      	uxth	r4, r3
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	441a      	add	r2, r3
 8005c78:	4b24      	ldr	r3, [pc, #144]	; (8005d0c <USB_EPClearStall+0x120>)
 8005c7a:	4323      	orrs	r3, r4
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	8013      	strh	r3, [r2, #0]
 8005c80:	e03b      	b.n	8005cfa <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29c      	uxth	r4, r3
 8005c90:	4623      	mov	r3, r4
 8005c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d014      	beq.n	8005cc4 <USB_EPClearStall+0xd8>
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb0:	b29c      	uxth	r4, r3
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	441a      	add	r2, r3
 8005cbc:	4b14      	ldr	r3, [pc, #80]	; (8005d10 <USB_EPClearStall+0x124>)
 8005cbe:	4323      	orrs	r3, r4
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cda:	b29c      	uxth	r4, r3
 8005cdc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005ce0:	b29c      	uxth	r4, r3
 8005ce2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005ce6:	b29c      	uxth	r4, r3
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	441a      	add	r2, r3
 8005cf2:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <USB_EPClearStall+0x120>)
 8005cf4:	4323      	orrs	r3, r4
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc90      	pop	{r4, r7}
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	ffff80c0 	.word	0xffff80c0
 8005d0c:	ffff8080 	.word	0xffff8080
 8005d10:	ffffc080 	.word	0xffffc080

08005d14 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d103      	bne.n	8005d2e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2280      	movs	r2, #128	; 0x80
 8005d2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr

08005d4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bc80      	pop	{r7}
 8005d60:	4770      	bx	lr

08005d62 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005d74:	68fb      	ldr	r3, [r7, #12]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr

08005d80 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bc80      	pop	{r7}
 8005d94:	4770      	bx	lr

08005d96 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b08d      	sub	sp, #52	; 0x34
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	4611      	mov	r1, r2
 8005da2:	461a      	mov	r2, r3
 8005da4:	460b      	mov	r3, r1
 8005da6:	80fb      	strh	r3, [r7, #6]
 8005da8:	4613      	mov	r3, r2
 8005daa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005dac:	88bb      	ldrh	r3, [r7, #4]
 8005dae:	3301      	adds	r3, #1
 8005db0:	085b      	lsrs	r3, r3, #1
 8005db2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	005a      	lsls	r2, r3, #1
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dc8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dce:	e01e      	b.n	8005e0e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	3301      	adds	r3, #1
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	021b      	lsls	r3, r3, #8
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	3302      	adds	r3, #2
 8005dfa:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	3302      	adds	r3, #2
 8005e00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	3301      	adds	r3, #1
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1dd      	bne.n	8005dd0 <USB_WritePMA+0x3a>
  }
}
 8005e14:	bf00      	nop
 8005e16:	3734      	adds	r7, #52	; 0x34
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bc80      	pop	{r7}
 8005e1c:	4770      	bx	lr

08005e1e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b08b      	sub	sp, #44	; 0x2c
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	4611      	mov	r1, r2
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	80fb      	strh	r3, [r7, #6]
 8005e30:	4613      	mov	r3, r2
 8005e32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005e34:	88bb      	ldrh	r3, [r7, #4]
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e44:	88fb      	ldrh	r3, [r7, #6]
 8005e46:	005a      	lsls	r2, r3, #1
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e50:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
 8005e56:	e01b      	b.n	8005e90 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	3302      	adds	r3, #2
 8005e64:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	3301      	adds	r3, #1
 8005e72:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	0a1b      	lsrs	r3, r3, #8
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	3301      	adds	r3, #1
 8005e82:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	3302      	adds	r3, #2
 8005e88:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e0      	bne.n	8005e58 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005e96:	88bb      	ldrh	r3, [r7, #4]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	701a      	strb	r2, [r3, #0]
  }
}
 8005eb2:	bf00      	nop
 8005eb4:	372c      	adds	r7, #44	; 0x2c
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr

08005ebc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	7c1b      	ldrb	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d115      	bne.n	8005f00 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ed8:	2202      	movs	r2, #2
 8005eda:	2181      	movs	r1, #129	; 0x81
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f002 f800 	bl	8007ee2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eec:	2202      	movs	r2, #2
 8005eee:	2101      	movs	r1, #1
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 fff6 	bl	8007ee2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005efe:	e012      	b.n	8005f26 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f00:	2340      	movs	r3, #64	; 0x40
 8005f02:	2202      	movs	r2, #2
 8005f04:	2181      	movs	r1, #129	; 0x81
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 ffeb 	bl	8007ee2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f12:	2340      	movs	r3, #64	; 0x40
 8005f14:	2202      	movs	r2, #2
 8005f16:	2101      	movs	r1, #1
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 ffe2 	bl	8007ee2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f26:	2308      	movs	r3, #8
 8005f28:	2203      	movs	r2, #3
 8005f2a:	2182      	movs	r1, #130	; 0x82
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f001 ffd8 	bl	8007ee2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f3c:	f002 f8f2 	bl	8008124 <USBD_static_malloc>
 8005f40:	4602      	mov	r2, r0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005f52:	2301      	movs	r3, #1
 8005f54:	73fb      	strb	r3, [r7, #15]
 8005f56:	e026      	b.n	8005fa6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	7c1b      	ldrb	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d109      	bne.n	8005f96 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f002 f891 	bl	80080b6 <USBD_LL_PrepareReceive>
 8005f94:	e007      	b.n	8005fa6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f9c:	2340      	movs	r3, #64	; 0x40
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f002 f888 	bl	80080b6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005fc0:	2181      	movs	r1, #129	; 0x81
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f001 ffb3 	bl	8007f2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005fce:	2101      	movs	r1, #1
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 ffac 	bl	8007f2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005fde:	2182      	movs	r1, #130	; 0x82
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 ffa4 	bl	8007f2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00e      	beq.n	8006014 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006006:	4618      	mov	r0, r3
 8006008:	f002 f898 	bl	800813c <USBD_static_free>
    pdev->pClassData = NULL;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b086      	sub	sp, #24
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006044:	2b00      	cmp	r3, #0
 8006046:	d039      	beq.n	80060bc <USBD_CDC_Setup+0x9e>
 8006048:	2b20      	cmp	r3, #32
 800604a:	d17c      	bne.n	8006146 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	88db      	ldrh	r3, [r3, #6]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d029      	beq.n	80060a8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	b25b      	sxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	da11      	bge.n	8006082 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800606a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	88d2      	ldrh	r2, [r2, #6]
 8006070:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006072:	6939      	ldr	r1, [r7, #16]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	88db      	ldrh	r3, [r3, #6]
 8006078:	461a      	mov	r2, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 f9f6 	bl	800746c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006080:	e068      	b.n	8006154 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	785a      	ldrb	r2, [r3, #1]
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	88db      	ldrh	r3, [r3, #6]
 8006090:	b2da      	uxtb	r2, r3
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006098:	6939      	ldr	r1, [r7, #16]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	88db      	ldrh	r3, [r3, #6]
 800609e:	461a      	mov	r2, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 fa11 	bl	80074c8 <USBD_CtlPrepareRx>
      break;
 80060a6:	e055      	b.n	8006154 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	7850      	ldrb	r0, [r2, #1]
 80060b4:	2200      	movs	r2, #0
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	4798      	blx	r3
      break;
 80060ba:	e04b      	b.n	8006154 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	2b0a      	cmp	r3, #10
 80060c2:	d017      	beq.n	80060f4 <USBD_CDC_Setup+0xd6>
 80060c4:	2b0b      	cmp	r3, #11
 80060c6:	d029      	beq.n	800611c <USBD_CDC_Setup+0xfe>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d133      	bne.n	8006134 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d107      	bne.n	80060e6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80060d6:	f107 030c 	add.w	r3, r7, #12
 80060da:	2202      	movs	r2, #2
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f001 f9c4 	bl	800746c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060e4:	e02e      	b.n	8006144 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 f955 	bl	8007398 <USBD_CtlError>
            ret = USBD_FAIL;
 80060ee:	2302      	movs	r3, #2
 80060f0:	75fb      	strb	r3, [r7, #23]
          break;
 80060f2:	e027      	b.n	8006144 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d107      	bne.n	800610e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80060fe:	f107 030f 	add.w	r3, r7, #15
 8006102:	2201      	movs	r2, #1
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f001 f9b0 	bl	800746c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800610c:	e01a      	b.n	8006144 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 f941 	bl	8007398 <USBD_CtlError>
            ret = USBD_FAIL;
 8006116:	2302      	movs	r3, #2
 8006118:	75fb      	strb	r3, [r7, #23]
          break;
 800611a:	e013      	b.n	8006144 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006122:	2b03      	cmp	r3, #3
 8006124:	d00d      	beq.n	8006142 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 f935 	bl	8007398 <USBD_CtlError>
            ret = USBD_FAIL;
 800612e:	2302      	movs	r3, #2
 8006130:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006132:	e006      	b.n	8006142 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 f92e 	bl	8007398 <USBD_CtlError>
          ret = USBD_FAIL;
 800613c:	2302      	movs	r3, #2
 800613e:	75fb      	strb	r3, [r7, #23]
          break;
 8006140:	e000      	b.n	8006144 <USBD_CDC_Setup+0x126>
          break;
 8006142:	bf00      	nop
      }
      break;
 8006144:	e006      	b.n	8006154 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 f925 	bl	8007398 <USBD_CtlError>
      ret = USBD_FAIL;
 800614e:	2302      	movs	r3, #2
 8006150:	75fb      	strb	r3, [r7, #23]
      break;
 8006152:	bf00      	nop
  }

  return ret;
 8006154:	7dfb      	ldrb	r3, [r7, #23]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006170:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006178:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006180:	2b00      	cmp	r3, #0
 8006182:	d037      	beq.n	80061f4 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006184:	78fa      	ldrb	r2, [r7, #3]
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	331c      	adds	r3, #28
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d026      	beq.n	80061e8 <USBD_CDC_DataIn+0x8a>
 800619a:	78fa      	ldrb	r2, [r7, #3]
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	331c      	adds	r3, #28
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	78fa      	ldrb	r2, [r7, #3]
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	0152      	lsls	r2, r2, #5
 80061b2:	440a      	add	r2, r1
 80061b4:	3238      	adds	r2, #56	; 0x38
 80061b6:	6812      	ldr	r2, [r2, #0]
 80061b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80061bc:	fb02 f201 	mul.w	r2, r2, r1
 80061c0:	1a9b      	subs	r3, r3, r2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d110      	bne.n	80061e8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80061c6:	78fa      	ldrb	r2, [r7, #3]
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	331c      	adds	r3, #28
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061da:	78f9      	ldrb	r1, [r7, #3]
 80061dc:	2300      	movs	r3, #0
 80061de:	2200      	movs	r2, #0
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f001 ff45 	bl	8008070 <USBD_LL_Transmit>
 80061e6:	e003      	b.n	80061f0 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	e000      	b.n	80061f6 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80061f4:	2302      	movs	r3, #2
  }
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006210:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006212:	78fb      	ldrb	r3, [r7, #3]
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 ff70 	bl	80080fc <USBD_LL_GetRxDataSize>
 800621c:	4602      	mov	r2, r0
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00d      	beq.n	800624a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006242:	4611      	mov	r1, r2
 8006244:	4798      	blx	r3

    return USBD_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	e000      	b.n	800624c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800624a:	2302      	movs	r3, #2
  }
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006262:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800626a:	2b00      	cmp	r3, #0
 800626c:	d015      	beq.n	800629a <USBD_CDC_EP0_RxReady+0x46>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006274:	2bff      	cmp	r3, #255	; 0xff
 8006276:	d010      	beq.n	800629a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006286:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800628e:	b292      	uxth	r2, r2
 8006290:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	22ff      	movs	r2, #255	; 0xff
 8006296:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2243      	movs	r2, #67	; 0x43
 80062b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80062b2:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	200000a8 	.word	0x200000a8

080062c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2243      	movs	r2, #67	; 0x43
 80062d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80062d2:	4b03      	ldr	r3, [pc, #12]	; (80062e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	bc80      	pop	{r7}
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20000064 	.word	0x20000064

080062e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2243      	movs	r2, #67	; 0x43
 80062f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80062f2:	4b03      	ldr	r3, [pc, #12]	; (8006300 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	200000ec 	.word	0x200000ec

08006304 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	220a      	movs	r2, #10
 8006310:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006312:	4b03      	ldr	r3, [pc, #12]	; (8006320 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20000020 	.word	0x20000020

08006324 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800632e:	2302      	movs	r3, #2
 8006330:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr

08006350 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006364:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800636e:	88fa      	ldrh	r2, [r7, #6]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	bc80      	pop	{r7}
 8006380:	4770      	bx	lr

08006382 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006382:	b480      	push	{r7}
 8006384:	b085      	sub	sp, #20
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006392:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr

080063a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d01c      	beq.n	80063fc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d115      	bne.n	80063f8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	2181      	movs	r1, #129	; 0x81
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 fe3e 	bl	8008070 <USBD_LL_Transmit>

      return USBD_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e002      	b.n	80063fe <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80063fc:	2302      	movs	r3, #2
  }
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006414:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d017      	beq.n	8006450 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	7c1b      	ldrb	r3, [r3, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d109      	bne.n	800643c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800642e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006432:	2101      	movs	r1, #1
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 fe3e 	bl	80080b6 <USBD_LL_PrepareReceive>
 800643a:	e007      	b.n	800644c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006442:	2340      	movs	r3, #64	; 0x40
 8006444:	2101      	movs	r1, #1
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fe35 	bl	80080b6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	e000      	b.n	8006452 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006450:	2302      	movs	r3, #2
  }
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	4613      	mov	r3, r2
 8006466:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800646e:	2302      	movs	r3, #2
 8006470:	e01a      	b.n	80064a8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	79fa      	ldrb	r2, [r7, #7]
 800649e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f001 fca9 	bl	8007df8 <USBD_LL_Init>

  return USBD_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d006      	beq.n	80064d2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	73fb      	strb	r3, [r7, #15]
 80064d0:	e001      	b.n	80064d6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80064d2:	2302      	movs	r3, #2
 80064d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr

080064e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f001 fcde 	bl	8007eac <USBD_LL_Start>

  return USBD_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	bc80      	pop	{r7}
 800650c:	4770      	bx	lr

0800650e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800651a:	2302      	movs	r3, #2
 800651c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00c      	beq.n	8006542 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	78fa      	ldrb	r2, [r7, #3]
 8006532:	4611      	mov	r1, r2
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	4798      	blx	r3
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006542:	7bfb      	ldrb	r3, [r7, #15]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	78fa      	ldrb	r2, [r7, #3]
 8006562:	4611      	mov	r1, r2
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	4798      	blx	r3

  return USBD_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fecb 	bl	8007320 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006598:	461a      	mov	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065a6:	f003 031f 	and.w	r3, r3, #31
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d00c      	beq.n	80065c8 <USBD_LL_SetupStage+0x56>
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d302      	bcc.n	80065b8 <USBD_LL_SetupStage+0x46>
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d010      	beq.n	80065d8 <USBD_LL_SetupStage+0x66>
 80065b6:	e017      	b.n	80065e8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f9cb 	bl	800695c <USBD_StdDevReq>
      break;
 80065c6:	e01a      	b.n	80065fe <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fa2d 	bl	8006a30 <USBD_StdItfReq>
      break;
 80065d6:	e012      	b.n	80065fe <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fa6b 	bl	8006abc <USBD_StdEPReq>
      break;
 80065e6:	e00a      	b.n	80065fe <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 fcb8 	bl	8007f6c <USBD_LL_StallEP>
      break;
 80065fc:	bf00      	nop
  }

  return USBD_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	460b      	mov	r3, r1
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006616:	7afb      	ldrb	r3, [r7, #11]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d14b      	bne.n	80066b4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006622:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800662a:	2b03      	cmp	r3, #3
 800662c:	d134      	bne.n	8006698 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	429a      	cmp	r2, r3
 8006638:	d919      	bls.n	800666e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	1ad2      	subs	r2, r2, r3
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	68da      	ldr	r2, [r3, #12]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006650:	429a      	cmp	r2, r3
 8006652:	d203      	bcs.n	800665c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006658:	b29b      	uxth	r3, r3
 800665a:	e002      	b.n	8006662 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006660:	b29b      	uxth	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 ff4c 	bl	8007504 <USBD_CtlContinueRx>
 800666c:	e038      	b.n	80066e0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006680:	2b03      	cmp	r3, #3
 8006682:	d105      	bne.n	8006690 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 ff49 	bl	8007528 <USBD_CtlSendStatus>
 8006696:	e023      	b.n	80066e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800669e:	2b05      	cmp	r3, #5
 80066a0:	d11e      	bne.n	80066e0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80066aa:	2100      	movs	r1, #0
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f001 fc5d 	bl	8007f6c <USBD_LL_StallEP>
 80066b2:	e015      	b.n	80066e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00d      	beq.n	80066dc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d108      	bne.n	80066dc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	7afa      	ldrb	r2, [r7, #11]
 80066d4:	4611      	mov	r1, r2
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	4798      	blx	r3
 80066da:	e001      	b.n	80066e0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80066dc:	2302      	movs	r3, #2
 80066de:	e000      	b.n	80066e2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b086      	sub	sp, #24
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	460b      	mov	r3, r1
 80066f4:	607a      	str	r2, [r7, #4]
 80066f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80066f8:	7afb      	ldrb	r3, [r7, #11]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d17f      	bne.n	80067fe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3314      	adds	r3, #20
 8006702:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800670a:	2b02      	cmp	r3, #2
 800670c:	d15c      	bne.n	80067c8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	429a      	cmp	r2, r3
 8006718:	d915      	bls.n	8006746 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	1ad2      	subs	r2, r2, r3
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	b29b      	uxth	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 feb6 	bl	80074a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006738:	2300      	movs	r3, #0
 800673a:	2200      	movs	r2, #0
 800673c:	2100      	movs	r1, #0
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f001 fcb9 	bl	80080b6 <USBD_LL_PrepareReceive>
 8006744:	e04e      	b.n	80067e4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	6912      	ldr	r2, [r2, #16]
 800674e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006752:	fb02 f201 	mul.w	r2, r2, r1
 8006756:	1a9b      	subs	r3, r3, r2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d11c      	bne.n	8006796 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006764:	429a      	cmp	r2, r3
 8006766:	d316      	bcc.n	8006796 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006772:	429a      	cmp	r2, r3
 8006774:	d20f      	bcs.n	8006796 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006776:	2200      	movs	r2, #0
 8006778:	2100      	movs	r1, #0
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 fe92 	bl	80074a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006788:	2300      	movs	r3, #0
 800678a:	2200      	movs	r2, #0
 800678c:	2100      	movs	r1, #0
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f001 fc91 	bl	80080b6 <USBD_LL_PrepareReceive>
 8006794:	e026      	b.n	80067e4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d105      	bne.n	80067b8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80067b8:	2180      	movs	r1, #128	; 0x80
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f001 fbd6 	bl	8007f6c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fec4 	bl	800754e <USBD_CtlReceiveStatus>
 80067c6:	e00d      	b.n	80067e4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d004      	beq.n	80067dc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d103      	bne.n	80067e4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80067dc:	2180      	movs	r1, #128	; 0x80
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f001 fbc4 	bl	8007f6c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d11d      	bne.n	800682a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f7ff fe83 	bl	80064fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067fc:	e015      	b.n	800682a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00d      	beq.n	8006826 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006810:	2b03      	cmp	r3, #3
 8006812:	d108      	bne.n	8006826 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	7afa      	ldrb	r2, [r7, #11]
 800681e:	4611      	mov	r1, r2
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	4798      	blx	r3
 8006824:	e001      	b.n	800682a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006826:	2302      	movs	r3, #2
 8006828:	e000      	b.n	800682c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800683c:	2340      	movs	r3, #64	; 0x40
 800683e:	2200      	movs	r2, #0
 8006840:	2100      	movs	r1, #0
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 fb4d 	bl	8007ee2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2240      	movs	r2, #64	; 0x40
 8006854:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006858:	2340      	movs	r3, #64	; 0x40
 800685a:	2200      	movs	r2, #0
 800685c:	2180      	movs	r1, #128	; 0x80
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f001 fb3f 	bl	8007ee2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2240      	movs	r2, #64	; 0x40
 800686e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d009      	beq.n	80068ac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6852      	ldr	r2, [r2, #4]
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	4611      	mov	r1, r2
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
  }

  return USBD_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	460b      	mov	r3, r1
 80068c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	78fa      	ldrb	r2, [r7, #3]
 80068c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bc80      	pop	{r7}
 80068d2:	4770      	bx	lr

080068d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2204      	movs	r2, #4
 80068ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr

080068fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690a:	2b04      	cmp	r3, #4
 800690c:	d105      	bne.n	800691a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	4770      	bx	lr

08006926 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b082      	sub	sp, #8
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006934:	2b03      	cmp	r3, #3
 8006936:	d10b      	bne.n	8006950 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006972:	2b20      	cmp	r3, #32
 8006974:	d004      	beq.n	8006980 <USBD_StdDevReq+0x24>
 8006976:	2b40      	cmp	r3, #64	; 0x40
 8006978:	d002      	beq.n	8006980 <USBD_StdDevReq+0x24>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d008      	beq.n	8006990 <USBD_StdDevReq+0x34>
 800697e:	e04c      	b.n	8006a1a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
      break;
 800698e:	e049      	b.n	8006a24 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b09      	cmp	r3, #9
 8006996:	d83a      	bhi.n	8006a0e <USBD_StdDevReq+0xb2>
 8006998:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <USBD_StdDevReq+0x44>)
 800699a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699e:	bf00      	nop
 80069a0:	080069f1 	.word	0x080069f1
 80069a4:	08006a05 	.word	0x08006a05
 80069a8:	08006a0f 	.word	0x08006a0f
 80069ac:	080069fb 	.word	0x080069fb
 80069b0:	08006a0f 	.word	0x08006a0f
 80069b4:	080069d3 	.word	0x080069d3
 80069b8:	080069c9 	.word	0x080069c9
 80069bc:	08006a0f 	.word	0x08006a0f
 80069c0:	080069e7 	.word	0x080069e7
 80069c4:	080069dd 	.word	0x080069dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f9d4 	bl	8006d78 <USBD_GetDescriptor>
          break;
 80069d0:	e022      	b.n	8006a18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fb37 	bl	8007048 <USBD_SetAddress>
          break;
 80069da:	e01d      	b.n	8006a18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fb74 	bl	80070cc <USBD_SetConfig>
          break;
 80069e4:	e018      	b.n	8006a18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fbfd 	bl	80071e8 <USBD_GetConfig>
          break;
 80069ee:	e013      	b.n	8006a18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fc2c 	bl	8007250 <USBD_GetStatus>
          break;
 80069f8:	e00e      	b.n	8006a18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fc5a 	bl	80072b6 <USBD_SetFeature>
          break;
 8006a02:	e009      	b.n	8006a18 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fc69 	bl	80072de <USBD_ClrFeature>
          break;
 8006a0c:	e004      	b.n	8006a18 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fcc1 	bl	8007398 <USBD_CtlError>
          break;
 8006a16:	bf00      	nop
      }
      break;
 8006a18:	e004      	b.n	8006a24 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fcbb 	bl	8007398 <USBD_CtlError>
      break;
 8006a22:	bf00      	nop
  }

  return ret;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop

08006a30 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d003      	beq.n	8006a52 <USBD_StdItfReq+0x22>
 8006a4a:	2b40      	cmp	r3, #64	; 0x40
 8006a4c:	d001      	beq.n	8006a52 <USBD_StdItfReq+0x22>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d12a      	bne.n	8006aa8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d81d      	bhi.n	8006a9a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	889b      	ldrh	r3, [r3, #4]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d813      	bhi.n	8006a90 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
 8006a76:	4603      	mov	r3, r0
 8006a78:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	88db      	ldrh	r3, [r3, #6]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d110      	bne.n	8006aa4 <USBD_StdItfReq+0x74>
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10d      	bne.n	8006aa4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fd4d 	bl	8007528 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a8e:	e009      	b.n	8006aa4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fc80 	bl	8007398 <USBD_CtlError>
          break;
 8006a98:	e004      	b.n	8006aa4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fc7b 	bl	8007398 <USBD_CtlError>
          break;
 8006aa2:	e000      	b.n	8006aa6 <USBD_StdItfReq+0x76>
          break;
 8006aa4:	bf00      	nop
      }
      break;
 8006aa6:	e004      	b.n	8006ab2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fc74 	bl	8007398 <USBD_CtlError>
      break;
 8006ab0:	bf00      	nop
  }

  return USBD_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	889b      	ldrh	r3, [r3, #4]
 8006ace:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d004      	beq.n	8006ae6 <USBD_StdEPReq+0x2a>
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	d002      	beq.n	8006ae6 <USBD_StdEPReq+0x2a>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d008      	beq.n	8006af6 <USBD_StdEPReq+0x3a>
 8006ae4:	e13d      	b.n	8006d62 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	4798      	blx	r3
      break;
 8006af4:	e13a      	b.n	8006d6c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d10a      	bne.n	8006b18 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	4798      	blx	r3
 8006b10:	4603      	mov	r3, r0
 8006b12:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	e12a      	b.n	8006d6e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d03e      	beq.n	8006b9e <USBD_StdEPReq+0xe2>
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d002      	beq.n	8006b2a <USBD_StdEPReq+0x6e>
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d070      	beq.n	8006c0a <USBD_StdEPReq+0x14e>
 8006b28:	e115      	b.n	8006d56 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d002      	beq.n	8006b3a <USBD_StdEPReq+0x7e>
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d015      	beq.n	8006b64 <USBD_StdEPReq+0xa8>
 8006b38:	e02b      	b.n	8006b92 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00c      	beq.n	8006b5a <USBD_StdEPReq+0x9e>
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	2b80      	cmp	r3, #128	; 0x80
 8006b44:	d009      	beq.n	8006b5a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 fa0e 	bl	8007f6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b50:	2180      	movs	r1, #128	; 0x80
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fa0a 	bl	8007f6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b58:	e020      	b.n	8006b9c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fc1b 	bl	8007398 <USBD_CtlError>
              break;
 8006b62:	e01b      	b.n	8006b9c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	885b      	ldrh	r3, [r3, #2]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10e      	bne.n	8006b8a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00b      	beq.n	8006b8a <USBD_StdEPReq+0xce>
 8006b72:	7bbb      	ldrb	r3, [r7, #14]
 8006b74:	2b80      	cmp	r3, #128	; 0x80
 8006b76:	d008      	beq.n	8006b8a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	88db      	ldrh	r3, [r3, #6]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d104      	bne.n	8006b8a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 f9f1 	bl	8007f6c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fccc 	bl	8007528 <USBD_CtlSendStatus>

              break;
 8006b90:	e004      	b.n	8006b9c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fbff 	bl	8007398 <USBD_CtlError>
              break;
 8006b9a:	bf00      	nop
          }
          break;
 8006b9c:	e0e0      	b.n	8006d60 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d002      	beq.n	8006bae <USBD_StdEPReq+0xf2>
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d015      	beq.n	8006bd8 <USBD_StdEPReq+0x11c>
 8006bac:	e026      	b.n	8006bfc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00c      	beq.n	8006bce <USBD_StdEPReq+0x112>
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	d009      	beq.n	8006bce <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 f9d4 	bl	8007f6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bc4:	2180      	movs	r1, #128	; 0x80
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f001 f9d0 	bl	8007f6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bcc:	e01c      	b.n	8006c08 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fbe1 	bl	8007398 <USBD_CtlError>
              break;
 8006bd6:	e017      	b.n	8006c08 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	885b      	ldrh	r3, [r3, #2]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d112      	bne.n	8006c06 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d004      	beq.n	8006bf4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bea:	7bbb      	ldrb	r3, [r7, #14]
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 f9db 	bl	8007faa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fc97 	bl	8007528 <USBD_CtlSendStatus>
              }
              break;
 8006bfa:	e004      	b.n	8006c06 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fbca 	bl	8007398 <USBD_CtlError>
              break;
 8006c04:	e000      	b.n	8006c08 <USBD_StdEPReq+0x14c>
              break;
 8006c06:	bf00      	nop
          }
          break;
 8006c08:	e0aa      	b.n	8006d60 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d002      	beq.n	8006c1a <USBD_StdEPReq+0x15e>
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d032      	beq.n	8006c7e <USBD_StdEPReq+0x1c2>
 8006c18:	e097      	b.n	8006d4a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <USBD_StdEPReq+0x174>
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	2b80      	cmp	r3, #128	; 0x80
 8006c24:	d004      	beq.n	8006c30 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fbb5 	bl	8007398 <USBD_CtlError>
                break;
 8006c2e:	e091      	b.n	8006d54 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	da0b      	bge.n	8006c50 <USBD_StdEPReq+0x194>
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	3310      	adds	r3, #16
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	e00b      	b.n	8006c68 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	4413      	add	r3, r2
 8006c66:	3304      	adds	r3, #4
 8006c68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2202      	movs	r2, #2
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fbf8 	bl	800746c <USBD_CtlSendData>
              break;
 8006c7c:	e06a      	b.n	8006d54 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	da11      	bge.n	8006caa <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	f003 020f 	and.w	r2, r3, #15
 8006c8c:	6879      	ldr	r1, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	3318      	adds	r3, #24
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d117      	bne.n	8006cd0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fb78 	bl	8007398 <USBD_CtlError>
                  break;
 8006ca8:	e054      	b.n	8006d54 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
 8006cac:	f003 020f 	and.w	r2, r3, #15
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d104      	bne.n	8006cd0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fb65 	bl	8007398 <USBD_CtlError>
                  break;
 8006cce:	e041      	b.n	8006d54 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	da0b      	bge.n	8006cf0 <USBD_StdEPReq+0x234>
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cde:	4613      	mov	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	3310      	adds	r3, #16
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	4413      	add	r3, r2
 8006cec:	3304      	adds	r3, #4
 8006cee:	e00b      	b.n	8006d08 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	4413      	add	r3, r2
 8006d06:	3304      	adds	r3, #4
 8006d08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d0a:	7bbb      	ldrb	r3, [r7, #14]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <USBD_StdEPReq+0x25a>
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	2b80      	cmp	r3, #128	; 0x80
 8006d14:	d103      	bne.n	8006d1e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	e00e      	b.n	8006d3c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 f960 	bl	8007fe8 <USBD_LL_IsStallEP>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2201      	movs	r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	e002      	b.n	8006d3c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fb92 	bl	800746c <USBD_CtlSendData>
              break;
 8006d48:	e004      	b.n	8006d54 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fb23 	bl	8007398 <USBD_CtlError>
              break;
 8006d52:	bf00      	nop
          }
          break;
 8006d54:	e004      	b.n	8006d60 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fb1d 	bl	8007398 <USBD_CtlError>
          break;
 8006d5e:	bf00      	nop
      }
      break;
 8006d60:	e004      	b.n	8006d6c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fb17 	bl	8007398 <USBD_CtlError>
      break;
 8006d6a:	bf00      	nop
  }

  return ret;
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	885b      	ldrh	r3, [r3, #2]
 8006d92:	0a1b      	lsrs	r3, r3, #8
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	3b01      	subs	r3, #1
 8006d98:	2b06      	cmp	r3, #6
 8006d9a:	f200 8128 	bhi.w	8006fee <USBD_GetDescriptor+0x276>
 8006d9e:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <USBD_GetDescriptor+0x2c>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006dc1 	.word	0x08006dc1
 8006da8:	08006dd9 	.word	0x08006dd9
 8006dac:	08006e19 	.word	0x08006e19
 8006db0:	08006fef 	.word	0x08006fef
 8006db4:	08006fef 	.word	0x08006fef
 8006db8:	08006f8f 	.word	0x08006f8f
 8006dbc:	08006fbb 	.word	0x08006fbb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	7c12      	ldrb	r2, [r2, #16]
 8006dcc:	f107 0108 	add.w	r1, r7, #8
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4798      	blx	r3
 8006dd4:	60f8      	str	r0, [r7, #12]
      break;
 8006dd6:	e112      	b.n	8006ffe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	7c1b      	ldrb	r3, [r3, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10d      	bne.n	8006dfc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de8:	f107 0208 	add.w	r2, r7, #8
 8006dec:	4610      	mov	r0, r2
 8006dee:	4798      	blx	r3
 8006df0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3301      	adds	r3, #1
 8006df6:	2202      	movs	r2, #2
 8006df8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006dfa:	e100      	b.n	8006ffe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	f107 0208 	add.w	r2, r7, #8
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4798      	blx	r3
 8006e0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	2202      	movs	r2, #2
 8006e14:	701a      	strb	r2, [r3, #0]
      break;
 8006e16:	e0f2      	b.n	8006ffe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	885b      	ldrh	r3, [r3, #2]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b05      	cmp	r3, #5
 8006e20:	f200 80ac 	bhi.w	8006f7c <USBD_GetDescriptor+0x204>
 8006e24:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <USBD_GetDescriptor+0xb4>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e45 	.word	0x08006e45
 8006e30:	08006e79 	.word	0x08006e79
 8006e34:	08006ead 	.word	0x08006ead
 8006e38:	08006ee1 	.word	0x08006ee1
 8006e3c:	08006f15 	.word	0x08006f15
 8006e40:	08006f49 	.word	0x08006f49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	7c12      	ldrb	r2, [r2, #16]
 8006e5c:	f107 0108 	add.w	r1, r7, #8
 8006e60:	4610      	mov	r0, r2
 8006e62:	4798      	blx	r3
 8006e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e66:	e091      	b.n	8006f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa94 	bl	8007398 <USBD_CtlError>
            err++;
 8006e70:	7afb      	ldrb	r3, [r7, #11]
 8006e72:	3301      	adds	r3, #1
 8006e74:	72fb      	strb	r3, [r7, #11]
          break;
 8006e76:	e089      	b.n	8006f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	7c12      	ldrb	r2, [r2, #16]
 8006e90:	f107 0108 	add.w	r1, r7, #8
 8006e94:	4610      	mov	r0, r2
 8006e96:	4798      	blx	r3
 8006e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e9a:	e077      	b.n	8006f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa7a 	bl	8007398 <USBD_CtlError>
            err++;
 8006ea4:	7afb      	ldrb	r3, [r7, #11]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eaa:	e06f      	b.n	8006f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00b      	beq.n	8006ed0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	7c12      	ldrb	r2, [r2, #16]
 8006ec4:	f107 0108 	add.w	r1, r7, #8
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4798      	blx	r3
 8006ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ece:	e05d      	b.n	8006f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa60 	bl	8007398 <USBD_CtlError>
            err++;
 8006ed8:	7afb      	ldrb	r3, [r7, #11]
 8006eda:	3301      	adds	r3, #1
 8006edc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ede:	e055      	b.n	8006f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	7c12      	ldrb	r2, [r2, #16]
 8006ef8:	f107 0108 	add.w	r1, r7, #8
 8006efc:	4610      	mov	r0, r2
 8006efe:	4798      	blx	r3
 8006f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f02:	e043      	b.n	8006f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fa46 	bl	8007398 <USBD_CtlError>
            err++;
 8006f0c:	7afb      	ldrb	r3, [r7, #11]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	72fb      	strb	r3, [r7, #11]
          break;
 8006f12:	e03b      	b.n	8006f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	7c12      	ldrb	r2, [r2, #16]
 8006f2c:	f107 0108 	add.w	r1, r7, #8
 8006f30:	4610      	mov	r0, r2
 8006f32:	4798      	blx	r3
 8006f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f36:	e029      	b.n	8006f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa2c 	bl	8007398 <USBD_CtlError>
            err++;
 8006f40:	7afb      	ldrb	r3, [r7, #11]
 8006f42:	3301      	adds	r3, #1
 8006f44:	72fb      	strb	r3, [r7, #11]
          break;
 8006f46:	e021      	b.n	8006f8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00b      	beq.n	8006f6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	7c12      	ldrb	r2, [r2, #16]
 8006f60:	f107 0108 	add.w	r1, r7, #8
 8006f64:	4610      	mov	r0, r2
 8006f66:	4798      	blx	r3
 8006f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f6a:	e00f      	b.n	8006f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa12 	bl	8007398 <USBD_CtlError>
            err++;
 8006f74:	7afb      	ldrb	r3, [r7, #11]
 8006f76:	3301      	adds	r3, #1
 8006f78:	72fb      	strb	r3, [r7, #11]
          break;
 8006f7a:	e007      	b.n	8006f8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa0a 	bl	8007398 <USBD_CtlError>
          err++;
 8006f84:	7afb      	ldrb	r3, [r7, #11]
 8006f86:	3301      	adds	r3, #1
 8006f88:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006f8a:	e038      	b.n	8006ffe <USBD_GetDescriptor+0x286>
 8006f8c:	e037      	b.n	8006ffe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	7c1b      	ldrb	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9e:	f107 0208 	add.w	r2, r7, #8
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	4798      	blx	r3
 8006fa6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fa8:	e029      	b.n	8006ffe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f9f3 	bl	8007398 <USBD_CtlError>
        err++;
 8006fb2:	7afb      	ldrb	r3, [r7, #11]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	72fb      	strb	r3, [r7, #11]
      break;
 8006fb8:	e021      	b.n	8006ffe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7c1b      	ldrb	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10d      	bne.n	8006fde <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	f107 0208 	add.w	r2, r7, #8
 8006fce:	4610      	mov	r0, r2
 8006fd0:	4798      	blx	r3
 8006fd2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	2207      	movs	r2, #7
 8006fda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fdc:	e00f      	b.n	8006ffe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f9d9 	bl	8007398 <USBD_CtlError>
        err++;
 8006fe6:	7afb      	ldrb	r3, [r7, #11]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	72fb      	strb	r3, [r7, #11]
      break;
 8006fec:	e007      	b.n	8006ffe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f9d1 	bl	8007398 <USBD_CtlError>
      err++;
 8006ff6:	7afb      	ldrb	r3, [r7, #11]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	72fb      	strb	r3, [r7, #11]
      break;
 8006ffc:	bf00      	nop
  }

  if (err != 0U)
 8006ffe:	7afb      	ldrb	r3, [r7, #11]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d11c      	bne.n	800703e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007004:	893b      	ldrh	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d011      	beq.n	800702e <USBD_GetDescriptor+0x2b6>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	88db      	ldrh	r3, [r3, #6]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00d      	beq.n	800702e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	88da      	ldrh	r2, [r3, #6]
 8007016:	893b      	ldrh	r3, [r7, #8]
 8007018:	4293      	cmp	r3, r2
 800701a:	bf28      	it	cs
 800701c:	4613      	movcs	r3, r2
 800701e:	b29b      	uxth	r3, r3
 8007020:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007022:	893b      	ldrh	r3, [r7, #8]
 8007024:	461a      	mov	r2, r3
 8007026:	68f9      	ldr	r1, [r7, #12]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fa1f 	bl	800746c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	88db      	ldrh	r3, [r3, #6]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d104      	bne.n	8007040 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa76 	bl	8007528 <USBD_CtlSendStatus>
 800703c:	e000      	b.n	8007040 <USBD_GetDescriptor+0x2c8>
    return;
 800703e:	bf00      	nop
    }
  }
}
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop

08007048 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	889b      	ldrh	r3, [r3, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d130      	bne.n	80070bc <USBD_SetAddress+0x74>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	88db      	ldrh	r3, [r3, #6]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d12c      	bne.n	80070bc <USBD_SetAddress+0x74>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	885b      	ldrh	r3, [r3, #2]
 8007066:	2b7f      	cmp	r3, #127	; 0x7f
 8007068:	d828      	bhi.n	80070bc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	885b      	ldrh	r3, [r3, #2]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007074:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800707c:	2b03      	cmp	r3, #3
 800707e:	d104      	bne.n	800708a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f988 	bl	8007398 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007088:	e01c      	b.n	80070c4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	7bfa      	ldrb	r2, [r7, #15]
 800708e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007092:	7bfb      	ldrb	r3, [r7, #15]
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 ffcb 	bl	8008032 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fa43 	bl	8007528 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d004      	beq.n	80070b2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b0:	e008      	b.n	80070c4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ba:	e003      	b.n	80070c4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f96a 	bl	8007398 <USBD_CtlError>
  }
}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	885b      	ldrh	r3, [r3, #2]
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	4b41      	ldr	r3, [pc, #260]	; (80071e4 <USBD_SetConfig+0x118>)
 80070de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070e0:	4b40      	ldr	r3, [pc, #256]	; (80071e4 <USBD_SetConfig+0x118>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d904      	bls.n	80070f2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f954 	bl	8007398 <USBD_CtlError>
 80070f0:	e075      	b.n	80071de <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d002      	beq.n	8007102 <USBD_SetConfig+0x36>
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d023      	beq.n	8007148 <USBD_SetConfig+0x7c>
 8007100:	e062      	b.n	80071c8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007102:	4b38      	ldr	r3, [pc, #224]	; (80071e4 <USBD_SetConfig+0x118>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d01a      	beq.n	8007140 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800710a:	4b36      	ldr	r3, [pc, #216]	; (80071e4 <USBD_SetConfig+0x118>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2203      	movs	r2, #3
 8007118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800711c:	4b31      	ldr	r3, [pc, #196]	; (80071e4 <USBD_SetConfig+0x118>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7ff f9f3 	bl	800650e <USBD_SetClassConfig>
 8007128:	4603      	mov	r3, r0
 800712a:	2b02      	cmp	r3, #2
 800712c:	d104      	bne.n	8007138 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f931 	bl	8007398 <USBD_CtlError>
            return;
 8007136:	e052      	b.n	80071de <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f9f5 	bl	8007528 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800713e:	e04e      	b.n	80071de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f9f1 	bl	8007528 <USBD_CtlSendStatus>
        break;
 8007146:	e04a      	b.n	80071de <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007148:	4b26      	ldr	r3, [pc, #152]	; (80071e4 <USBD_SetConfig+0x118>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d112      	bne.n	8007176 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007158:	4b22      	ldr	r3, [pc, #136]	; (80071e4 <USBD_SetConfig+0x118>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007162:	4b20      	ldr	r3, [pc, #128]	; (80071e4 <USBD_SetConfig+0x118>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff f9ef 	bl	800654c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f9da 	bl	8007528 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007174:	e033      	b.n	80071de <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007176:	4b1b      	ldr	r3, [pc, #108]	; (80071e4 <USBD_SetConfig+0x118>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	429a      	cmp	r2, r3
 8007182:	d01d      	beq.n	80071c0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	b2db      	uxtb	r3, r3
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff f9dd 	bl	800654c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007192:	4b14      	ldr	r3, [pc, #80]	; (80071e4 <USBD_SetConfig+0x118>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800719c:	4b11      	ldr	r3, [pc, #68]	; (80071e4 <USBD_SetConfig+0x118>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7ff f9b3 	bl	800650e <USBD_SetClassConfig>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d104      	bne.n	80071b8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f8f1 	bl	8007398 <USBD_CtlError>
            return;
 80071b6:	e012      	b.n	80071de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f9b5 	bl	8007528 <USBD_CtlSendStatus>
        break;
 80071be:	e00e      	b.n	80071de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f9b1 	bl	8007528 <USBD_CtlSendStatus>
        break;
 80071c6:	e00a      	b.n	80071de <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f8e4 	bl	8007398 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80071d0:	4b04      	ldr	r3, [pc, #16]	; (80071e4 <USBD_SetConfig+0x118>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7ff f9b8 	bl	800654c <USBD_ClrClassConfig>
        break;
 80071dc:	bf00      	nop
    }
  }
}
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20000274 	.word	0x20000274

080071e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	88db      	ldrh	r3, [r3, #6]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d004      	beq.n	8007204 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f8cb 	bl	8007398 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007202:	e021      	b.n	8007248 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720a:	2b01      	cmp	r3, #1
 800720c:	db17      	blt.n	800723e <USBD_GetConfig+0x56>
 800720e:	2b02      	cmp	r3, #2
 8007210:	dd02      	ble.n	8007218 <USBD_GetConfig+0x30>
 8007212:	2b03      	cmp	r3, #3
 8007214:	d00b      	beq.n	800722e <USBD_GetConfig+0x46>
 8007216:	e012      	b.n	800723e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3308      	adds	r3, #8
 8007222:	2201      	movs	r2, #1
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f920 	bl	800746c <USBD_CtlSendData>
        break;
 800722c:	e00c      	b.n	8007248 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3304      	adds	r3, #4
 8007232:	2201      	movs	r2, #1
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f918 	bl	800746c <USBD_CtlSendData>
        break;
 800723c:	e004      	b.n	8007248 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f8a9 	bl	8007398 <USBD_CtlError>
        break;
 8007246:	bf00      	nop
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007260:	3b01      	subs	r3, #1
 8007262:	2b02      	cmp	r3, #2
 8007264:	d81e      	bhi.n	80072a4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	88db      	ldrh	r3, [r3, #6]
 800726a:	2b02      	cmp	r3, #2
 800726c:	d004      	beq.n	8007278 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f891 	bl	8007398 <USBD_CtlError>
        break;
 8007276:	e01a      	b.n	80072ae <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f043 0202 	orr.w	r2, r3, #2
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	330c      	adds	r3, #12
 8007298:	2202      	movs	r2, #2
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f8e5 	bl	800746c <USBD_CtlSendData>
      break;
 80072a2:	e004      	b.n	80072ae <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f876 	bl	8007398 <USBD_CtlError>
      break;
 80072ac:	bf00      	nop
  }
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	885b      	ldrh	r3, [r3, #2]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d106      	bne.n	80072d6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f929 	bl	8007528 <USBD_CtlSendStatus>
  }
}
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ee:	3b01      	subs	r3, #1
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d80b      	bhi.n	800730c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	885b      	ldrh	r3, [r3, #2]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d10c      	bne.n	8007316 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f90f 	bl	8007528 <USBD_CtlSendStatus>
      }
      break;
 800730a:	e004      	b.n	8007316 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f842 	bl	8007398 <USBD_CtlError>
      break;
 8007314:	e000      	b.n	8007318 <USBD_ClrFeature+0x3a>
      break;
 8007316:	bf00      	nop
  }
}
 8007318:	bf00      	nop
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781a      	ldrb	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	785a      	ldrb	r2, [r3, #1]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	3302      	adds	r3, #2
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	b29a      	uxth	r2, r3
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	3303      	adds	r3, #3
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	021b      	lsls	r3, r3, #8
 800734c:	b29b      	uxth	r3, r3
 800734e:	4413      	add	r3, r2
 8007350:	b29a      	uxth	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	3304      	adds	r3, #4
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	b29a      	uxth	r2, r3
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	3305      	adds	r3, #5
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	b29b      	uxth	r3, r3
 8007366:	021b      	lsls	r3, r3, #8
 8007368:	b29b      	uxth	r3, r3
 800736a:	4413      	add	r3, r2
 800736c:	b29a      	uxth	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	3306      	adds	r3, #6
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	b29a      	uxth	r2, r3
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	3307      	adds	r3, #7
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	b29b      	uxth	r3, r3
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	b29b      	uxth	r3, r3
 8007386:	4413      	add	r3, r2
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	80da      	strh	r2, [r3, #6]

}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	bc80      	pop	{r7}
 8007396:	4770      	bx	lr

08007398 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80073a2:	2180      	movs	r1, #128	; 0x80
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fde1 	bl	8007f6c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80073aa:	2100      	movs	r1, #0
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fddd 	bl	8007f6c <USBD_LL_StallEP>
}
 80073b2:	bf00      	nop
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b086      	sub	sp, #24
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d032      	beq.n	8007436 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 f834 	bl	800743e <USBD_GetLen>
 80073d6:	4603      	mov	r3, r0
 80073d8:	3301      	adds	r3, #1
 80073da:	b29b      	uxth	r3, r3
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	b29a      	uxth	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	75fa      	strb	r2, [r7, #23]
 80073ea:	461a      	mov	r2, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	4413      	add	r3, r2
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	7812      	ldrb	r2, [r2, #0]
 80073f4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	75fa      	strb	r2, [r7, #23]
 80073fc:	461a      	mov	r2, r3
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	4413      	add	r3, r2
 8007402:	2203      	movs	r2, #3
 8007404:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007406:	e012      	b.n	800742e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	60fa      	str	r2, [r7, #12]
 800740e:	7dfa      	ldrb	r2, [r7, #23]
 8007410:	1c51      	adds	r1, r2, #1
 8007412:	75f9      	strb	r1, [r7, #23]
 8007414:	4611      	mov	r1, r2
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	440a      	add	r2, r1
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800741e:	7dfb      	ldrb	r3, [r7, #23]
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	75fa      	strb	r2, [r7, #23]
 8007424:	461a      	mov	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	4413      	add	r3, r2
 800742a:	2200      	movs	r2, #0
 800742c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e8      	bne.n	8007408 <USBD_GetString+0x4e>
    }
  }
}
 8007436:	bf00      	nop
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800744a:	e005      	b.n	8007458 <USBD_GetLen+0x1a>
  {
    len++;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	3301      	adds	r3, #1
 8007450:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3301      	adds	r3, #1
 8007456:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1f5      	bne.n	800744c <USBD_GetLen+0xe>
  }

  return len;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr

0800746c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2202      	movs	r2, #2
 800747e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007482:	88fa      	ldrh	r2, [r7, #6]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007488:	88fa      	ldrh	r2, [r7, #6]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800748e:	88fb      	ldrh	r3, [r7, #6]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	2100      	movs	r1, #0
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 fdeb 	bl	8008070 <USBD_LL_Transmit>

  return USBD_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	4613      	mov	r3, r2
 80074b0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074b2:	88fb      	ldrh	r3, [r7, #6]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	2100      	movs	r1, #0
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 fdd9 	bl	8008070 <USBD_LL_Transmit>

  return USBD_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	4613      	mov	r3, r2
 80074d4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2203      	movs	r2, #3
 80074da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80074de:	88fa      	ldrh	r2, [r7, #6]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80074e6:	88fa      	ldrh	r2, [r7, #6]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074ee:	88fb      	ldrh	r3, [r7, #6]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	2100      	movs	r1, #0
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 fdde 	bl	80080b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007512:	88fb      	ldrh	r3, [r7, #6]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	2100      	movs	r1, #0
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 fdcc 	bl	80080b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2204      	movs	r2, #4
 8007534:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007538:	2300      	movs	r3, #0
 800753a:	2200      	movs	r2, #0
 800753c:	2100      	movs	r1, #0
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fd96 	bl	8008070 <USBD_LL_Transmit>

  return USBD_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b082      	sub	sp, #8
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2205      	movs	r2, #5
 800755a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800755e:	2300      	movs	r3, #0
 8007560:	2200      	movs	r2, #0
 8007562:	2100      	movs	r1, #0
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fda6 	bl	80080b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007578:	2200      	movs	r2, #0
 800757a:	4912      	ldr	r1, [pc, #72]	; (80075c4 <MX_USB_DEVICE_Init+0x50>)
 800757c:	4812      	ldr	r0, [pc, #72]	; (80075c8 <MX_USB_DEVICE_Init+0x54>)
 800757e:	f7fe ff6c 	bl	800645a <USBD_Init>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007588:	f7f9 fc9e 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800758c:	490f      	ldr	r1, [pc, #60]	; (80075cc <MX_USB_DEVICE_Init+0x58>)
 800758e:	480e      	ldr	r0, [pc, #56]	; (80075c8 <MX_USB_DEVICE_Init+0x54>)
 8007590:	f7fe ff8e 	bl	80064b0 <USBD_RegisterClass>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800759a:	f7f9 fc95 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800759e:	490c      	ldr	r1, [pc, #48]	; (80075d0 <MX_USB_DEVICE_Init+0x5c>)
 80075a0:	4809      	ldr	r0, [pc, #36]	; (80075c8 <MX_USB_DEVICE_Init+0x54>)
 80075a2:	f7fe febf 	bl	8006324 <USBD_CDC_RegisterInterface>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075ac:	f7f9 fc8c 	bl	8000ec8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075b0:	4805      	ldr	r0, [pc, #20]	; (80075c8 <MX_USB_DEVICE_Init+0x54>)
 80075b2:	f7fe ff96 	bl	80064e2 <USBD_Start>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80075bc:	f7f9 fc84 	bl	8000ec8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075c0:	bf00      	nop
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	20000140 	.word	0x20000140
 80075c8:	200005ec 	.word	0x200005ec
 80075cc:	2000002c 	.word	0x2000002c
 80075d0:	20000130 	.word	0x20000130

080075d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80075d8:	2200      	movs	r2, #0
 80075da:	4905      	ldr	r1, [pc, #20]	; (80075f0 <CDC_Init_FS+0x1c>)
 80075dc:	4805      	ldr	r0, [pc, #20]	; (80075f4 <CDC_Init_FS+0x20>)
 80075de:	f7fe feb7 	bl	8006350 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80075e2:	4905      	ldr	r1, [pc, #20]	; (80075f8 <CDC_Init_FS+0x24>)
 80075e4:	4803      	ldr	r0, [pc, #12]	; (80075f4 <CDC_Init_FS+0x20>)
 80075e6:	f7fe fecc 	bl	8006382 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80075ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	20000ab0 	.word	0x20000ab0
 80075f4:	200005ec 	.word	0x200005ec
 80075f8:	200008b0 	.word	0x200008b0

080075fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8007600:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007602:	4618      	mov	r0, r3
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr
	...

0800760c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	4603      	mov	r3, r0
 8007614:	6039      	str	r1, [r7, #0]
 8007616:	71fb      	strb	r3, [r7, #7]
 8007618:	4613      	mov	r3, r2
 800761a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 800761c:	79fb      	ldrb	r3, [r7, #7]
 800761e:	2b23      	cmp	r3, #35	; 0x23
 8007620:	d84a      	bhi.n	80076b8 <CDC_Control_FS+0xac>
 8007622:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <CDC_Control_FS+0x1c>)
 8007624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007628:	080076b9 	.word	0x080076b9
 800762c:	080076b9 	.word	0x080076b9
 8007630:	080076b9 	.word	0x080076b9
 8007634:	080076b9 	.word	0x080076b9
 8007638:	080076b9 	.word	0x080076b9
 800763c:	080076b9 	.word	0x080076b9
 8007640:	080076b9 	.word	0x080076b9
 8007644:	080076b9 	.word	0x080076b9
 8007648:	080076b9 	.word	0x080076b9
 800764c:	080076b9 	.word	0x080076b9
 8007650:	080076b9 	.word	0x080076b9
 8007654:	080076b9 	.word	0x080076b9
 8007658:	080076b9 	.word	0x080076b9
 800765c:	080076b9 	.word	0x080076b9
 8007660:	080076b9 	.word	0x080076b9
 8007664:	080076b9 	.word	0x080076b9
 8007668:	080076b9 	.word	0x080076b9
 800766c:	080076b9 	.word	0x080076b9
 8007670:	080076b9 	.word	0x080076b9
 8007674:	080076b9 	.word	0x080076b9
 8007678:	080076b9 	.word	0x080076b9
 800767c:	080076b9 	.word	0x080076b9
 8007680:	080076b9 	.word	0x080076b9
 8007684:	080076b9 	.word	0x080076b9
 8007688:	080076b9 	.word	0x080076b9
 800768c:	080076b9 	.word	0x080076b9
 8007690:	080076b9 	.word	0x080076b9
 8007694:	080076b9 	.word	0x080076b9
 8007698:	080076b9 	.word	0x080076b9
 800769c:	080076b9 	.word	0x080076b9
 80076a0:	080076b9 	.word	0x080076b9
 80076a4:	080076b9 	.word	0x080076b9
 80076a8:	080076b9 	.word	0x080076b9
 80076ac:	080076b9 	.word	0x080076b9
 80076b0:	080076b9 	.word	0x080076b9
 80076b4:	080076b9 	.word	0x080076b9
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80076b8:	bf00      	nop
	}

	return (USBD_OK);
 80076ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bc80      	pop	{r7}
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop

080076c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80076c8:	b590      	push	{r4, r7, lr}
 80076ca:	b089      	sub	sp, #36	; 0x24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80076d2:	6879      	ldr	r1, [r7, #4]
 80076d4:	48b3      	ldr	r0, [pc, #716]	; (80079a4 <CDC_Receive_FS+0x2dc>)
 80076d6:	f7fe fe54 	bl	8006382 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80076da:	48b2      	ldr	r0, [pc, #712]	; (80079a4 <CDC_Receive_FS+0x2dc>)
 80076dc:	f7fe fe93 	bl	8006406 <USBD_CDC_ReceivePacket>

#define HEX_PC_MODE 		1 // Возможность отправлять команды в виде HEX
#define KOSTIK_MODE 		0 // Возможность отправлять команды в виде строк

#if HEX_PC_MODE
	if (*Len < 1)	return (USBD_OK);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <CDC_Receive_FS+0x24>
 80076e8:	2300      	movs	r3, #0
 80076ea:	e18c      	b.n	8007a06 <CDC_Receive_FS+0x33e>

	uint16_t tVal16;
	uint8_t cmd	= Buf[0];
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	77fb      	strb	r3, [r7, #31]
	 */

	//CDC_Transmit_FS(Buf, *Len);

	// Relay:1 - 12V	[0x01 - 0x01]
	if (cmd == 0x01) {
 80076f2:	7ffb      	ldrb	r3, [r7, #31]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d157      	bne.n	80077a8 <CDC_Receive_FS+0xe0>
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00)) {
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d947      	bls.n	8007790 <CDC_Receive_FS+0xc8>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3301      	adds	r3, #1
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d004      	beq.n	8007714 <CDC_Receive_FS+0x4c>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3301      	adds	r3, #1
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d13d      	bne.n	8007790 <CDC_Receive_FS+0xc8>
			if (Buf[1] == 0x01) {
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3301      	adds	r3, #1
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d119      	bne.n	8007752 <CDC_Receive_FS+0x8a>
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 800771e:	2201      	movs	r2, #1
 8007720:	2104      	movs	r1, #4
 8007722:	48a1      	ldr	r0, [pc, #644]	; (80079a8 <CDC_Receive_FS+0x2e0>)
 8007724:	f7fa fe1d 	bl	8002362 <HAL_GPIO_WritePin>
				RelayState = 0x01;
 8007728:	4ba0      	ldr	r3, [pc, #640]	; (80079ac <CDC_Receive_FS+0x2e4>)
 800772a:	2201      	movs	r2, #1
 800772c:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 800772e:	4b9f      	ldr	r3, [pc, #636]	; (80079ac <CDC_Receive_FS+0x2e4>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	4619      	mov	r1, r3
 8007734:	489e      	ldr	r0, [pc, #632]	; (80079b0 <CDC_Receive_FS+0x2e8>)
 8007736:	f000 fd7f 	bl	8008238 <iprintf>

				UserTxBufferFS[0]	= cmd;
 800773a:	4a9e      	ldr	r2, [pc, #632]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 800773c:	7ffb      	ldrb	r3, [r7, #31]
 800773e:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1]	= 0x00;	// успешно
 8007740:	4b9c      	ldr	r3, [pc, #624]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 8007742:	2200      	movs	r2, #0
 8007744:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8007746:	2102      	movs	r1, #2
 8007748:	489a      	ldr	r0, [pc, #616]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 800774a:	f000 f965 	bl	8007a18 <CDC_Transmit_FS>
				return (USBD_OK);
 800774e:	2300      	movs	r3, #0
 8007750:	e159      	b.n	8007a06 <CDC_Receive_FS+0x33e>

			} else if (Buf[1] == 0x00) {
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3301      	adds	r3, #1
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d119      	bne.n	8007790 <CDC_Receive_FS+0xc8>
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800775c:	2200      	movs	r2, #0
 800775e:	2104      	movs	r1, #4
 8007760:	4891      	ldr	r0, [pc, #580]	; (80079a8 <CDC_Receive_FS+0x2e0>)
 8007762:	f7fa fdfe 	bl	8002362 <HAL_GPIO_WritePin>
				RelayState = 0x00;
 8007766:	4b91      	ldr	r3, [pc, #580]	; (80079ac <CDC_Receive_FS+0x2e4>)
 8007768:	2200      	movs	r2, #0
 800776a:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800776c:	4b8f      	ldr	r3, [pc, #572]	; (80079ac <CDC_Receive_FS+0x2e4>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	4619      	mov	r1, r3
 8007772:	4891      	ldr	r0, [pc, #580]	; (80079b8 <CDC_Receive_FS+0x2f0>)
 8007774:	f000 fd60 	bl	8008238 <iprintf>

				UserTxBufferFS[0] = cmd;
 8007778:	4a8e      	ldr	r2, [pc, #568]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 800777a:	7ffb      	ldrb	r3, [r7, #31]
 800777c:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x00;	// успешно
 800777e:	4b8d      	ldr	r3, [pc, #564]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 8007780:	2200      	movs	r2, #0
 8007782:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8007784:	2102      	movs	r1, #2
 8007786:	488b      	ldr	r0, [pc, #556]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 8007788:	f000 f946 	bl	8007a18 <CDC_Transmit_FS>
				return (USBD_OK);
 800778c:	2300      	movs	r3, #0
 800778e:	e13a      	b.n	8007a06 <CDC_Receive_FS+0x33e>
			}
		}

		UserTxBufferFS[0] = cmd;
 8007790:	4a88      	ldr	r2, [pc, #544]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 8007792:	7ffb      	ldrb	r3, [r7, #31]
 8007794:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;	// ошибка
 8007796:	4b87      	ldr	r3, [pc, #540]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 8007798:	2201      	movs	r2, #1
 800779a:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800779c:	2102      	movs	r1, #2
 800779e:	4885      	ldr	r0, [pc, #532]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 80077a0:	f000 f93a 	bl	8007a18 <CDC_Transmit_FS>
		return (USBD_OK);
 80077a4:	2300      	movs	r3, #0
 80077a6:	e12e      	b.n	8007a06 <CDC_Receive_FS+0x33e>

	// DA:4095
	} else if (cmd == 0x02) {
 80077a8:	7ffb      	ldrb	r3, [r7, #31]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d12d      	bne.n	800780a <CDC_Receive_FS+0x142>
		if (*Len >= 3) {
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d91d      	bls.n	80077f2 <CDC_Receive_FS+0x12a>
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 80077b6:	f7f8 feeb 	bl	8000590 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 80077ba:	f7f8 ff01 	bl	80005c0 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3301      	adds	r3, #1
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	83bb      	strh	r3, [r7, #28]
			SetDacA(tVal16);
 80077c8:	8bbb      	ldrh	r3, [r7, #28]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7f8 fdb6 	bl	800033c <SetDacA>
			printf("DacA: %d\n", tVal16);
 80077d0:	8bbb      	ldrh	r3, [r7, #28]
 80077d2:	4619      	mov	r1, r3
 80077d4:	4879      	ldr	r0, [pc, #484]	; (80079bc <CDC_Receive_FS+0x2f4>)
 80077d6:	f000 fd2f 	bl	8008238 <iprintf>
			UserTxBufferFS[0] = cmd;
 80077da:	4a76      	ldr	r2, [pc, #472]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 80077dc:	7ffb      	ldrb	r3, [r7, #31]
 80077de:	7013      	strb	r3, [r2, #0]
			UserTxBufferFS[1] = 0x00;	// успешно
 80077e0:	4b74      	ldr	r3, [pc, #464]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	705a      	strb	r2, [r3, #1]
			CDC_Transmit_FS(UserTxBufferFS, 2);
 80077e6:	2102      	movs	r1, #2
 80077e8:	4872      	ldr	r0, [pc, #456]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 80077ea:	f000 f915 	bl	8007a18 <CDC_Transmit_FS>
			return (USBD_OK);
 80077ee:	2300      	movs	r3, #0
 80077f0:	e109      	b.n	8007a06 <CDC_Receive_FS+0x33e>
		}

		UserTxBufferFS[0] = cmd;
 80077f2:	4a70      	ldr	r2, [pc, #448]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 80077f4:	7ffb      	ldrb	r3, [r7, #31]
 80077f6:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;		// ошибка
 80077f8:	4b6e      	ldr	r3, [pc, #440]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 80077fa:	2201      	movs	r2, #1
 80077fc:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 80077fe:	2102      	movs	r1, #2
 8007800:	486c      	ldr	r0, [pc, #432]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 8007802:	f000 f909 	bl	8007a18 <CDC_Transmit_FS>
		return (USBD_OK);
 8007806:	2300      	movs	r3, #0
 8007808:	e0fd      	b.n	8007a06 <CDC_Receive_FS+0x33e>

	// DB:4095
	} else if (cmd == 0x03) {
 800780a:	7ffb      	ldrb	r3, [r7, #31]
 800780c:	2b03      	cmp	r3, #3
 800780e:	d132      	bne.n	8007876 <CDC_Receive_FS+0x1ae>
		if (*Len >= 3) {
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d922      	bls.n	800785e <CDC_Receive_FS+0x196>
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8007818:	f7f8 feba 	bl	8000590 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 800781c:	f7f8 fed0 	bl	80005c0 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3301      	adds	r3, #1
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	83bb      	strh	r3, [r7, #28]
			SetDacB(tVal16);
 800782a:	8bbb      	ldrh	r3, [r7, #28]
 800782c:	4618      	mov	r0, r3
 800782e:	f7f8 fd9b 	bl	8000368 <SetDacB>

			UserTxBufferFS[0] = cmd;
 8007832:	4a60      	ldr	r2, [pc, #384]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 8007834:	7ffb      	ldrb	r3, [r7, #31]
 8007836:	7013      	strb	r3, [r2, #0]
			UserTxBufferFS[1] = 0x00;	// успешно
 8007838:	4b5e      	ldr	r3, [pc, #376]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 800783a:	2200      	movs	r2, #0
 800783c:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n",tVal16);
 800783e:	8bbb      	ldrh	r3, [r7, #28]
 8007840:	4619      	mov	r1, r3
 8007842:	485f      	ldr	r0, [pc, #380]	; (80079c0 <CDC_Receive_FS+0x2f8>)
 8007844:	f000 fcf8 	bl	8008238 <iprintf>
			printf("DacB_V: %d \n",tVal16);
 8007848:	8bbb      	ldrh	r3, [r7, #28]
 800784a:	4619      	mov	r1, r3
 800784c:	485d      	ldr	r0, [pc, #372]	; (80079c4 <CDC_Receive_FS+0x2fc>)
 800784e:	f000 fcf3 	bl	8008238 <iprintf>


			CDC_Transmit_FS(UserTxBufferFS, 2);
 8007852:	2102      	movs	r1, #2
 8007854:	4857      	ldr	r0, [pc, #348]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 8007856:	f000 f8df 	bl	8007a18 <CDC_Transmit_FS>
			return (USBD_OK);
 800785a:	2300      	movs	r3, #0
 800785c:	e0d3      	b.n	8007a06 <CDC_Receive_FS+0x33e>
		}

		UserTxBufferFS[0] = cmd;
 800785e:	4a55      	ldr	r2, [pc, #340]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 8007860:	7ffb      	ldrb	r3, [r7, #31]
 8007862:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;		// ошибка
 8007864:	4b53      	ldr	r3, [pc, #332]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 8007866:	2201      	movs	r2, #1
 8007868:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800786a:	2102      	movs	r1, #2
 800786c:	4851      	ldr	r0, [pc, #324]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 800786e:	f000 f8d3 	bl	8007a18 <CDC_Transmit_FS>
		return (USBD_OK);
 8007872:	2300      	movs	r3, #0
 8007874:	e0c7      	b.n	8007a06 <CDC_Receive_FS+0x33e>

	// ADC?
	} else if (cmd == 0x04) {
 8007876:	7ffb      	ldrb	r3, [r7, #31]
 8007878:	2b04      	cmp	r3, #4
 800787a:	d10f      	bne.n	800789c <CDC_Receive_FS+0x1d4>
		tVal16 = GetADC();
 800787c:	f7f8 feac 	bl	80005d8 <GetADC>
 8007880:	4603      	mov	r3, r0
 8007882:	83bb      	strh	r3, [r7, #28]
		UserTxBufferFS[0] = cmd;
 8007884:	4a4b      	ldr	r2, [pc, #300]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 8007886:	7ffb      	ldrb	r3, [r7, #31]
 8007888:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 800788a:	4a4f      	ldr	r2, [pc, #316]	; (80079c8 <CDC_Receive_FS+0x300>)
 800788c:	8bbb      	ldrh	r3, [r7, #28]
 800788e:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 8007890:	2103      	movs	r1, #3
 8007892:	4848      	ldr	r0, [pc, #288]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 8007894:	f000 f8c0 	bl	8007a18 <CDC_Transmit_FS>
		return (USBD_OK);
 8007898:	2300      	movs	r3, #0
 800789a:	e0b4      	b.n	8007a06 <CDC_Receive_FS+0x33e>

	// Relay?DA?DB?
	} else if (cmd == 0x05) {
 800789c:	7ffb      	ldrb	r3, [r7, #31]
 800789e:	2b05      	cmp	r3, #5
 80078a0:	d11a      	bne.n	80078d8 <CDC_Receive_FS+0x210>
		UserTxBufferFS[0] = cmd;
 80078a2:	4a44      	ldr	r2, [pc, #272]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 80078a4:	7ffb      	ldrb	r3, [r7, #31]
 80078a6:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = RelayState;
 80078a8:	4b40      	ldr	r3, [pc, #256]	; (80079ac <CDC_Receive_FS+0x2e4>)
 80078aa:	781a      	ldrb	r2, [r3, #0]
 80078ac:	4b41      	ldr	r3, [pc, #260]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 80078ae:	705a      	strb	r2, [r3, #1]

		tVal16 = GetDacA();
 80078b0:	f7f8 fd70 	bl	8000394 <GetDacA>
 80078b4:	4603      	mov	r3, r0
 80078b6:	83bb      	strh	r3, [r7, #28]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 80078b8:	4a44      	ldr	r2, [pc, #272]	; (80079cc <CDC_Receive_FS+0x304>)
 80078ba:	8bbb      	ldrh	r3, [r7, #28]
 80078bc:	8013      	strh	r3, [r2, #0]

		tVal16 = GetDacB();
 80078be:	f7f8 fd73 	bl	80003a8 <GetDacB>
 80078c2:	4603      	mov	r3, r0
 80078c4:	83bb      	strh	r3, [r7, #28]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 80078c6:	4a42      	ldr	r2, [pc, #264]	; (80079d0 <CDC_Receive_FS+0x308>)
 80078c8:	8bbb      	ldrh	r3, [r7, #28]
 80078ca:	8013      	strh	r3, [r2, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 80078cc:	2106      	movs	r1, #6
 80078ce:	4839      	ldr	r0, [pc, #228]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 80078d0:	f000 f8a2 	bl	8007a18 <CDC_Transmit_FS>
		return (USBD_OK);
 80078d4:	2300      	movs	r3, #0
 80078d6:	e096      	b.n	8007a06 <CDC_Receive_FS+0x33e>

	// Btn?
	} else if (cmd == 0x06) {
 80078d8:	7ffb      	ldrb	r3, [r7, #31]
 80078da:	2b06      	cmp	r3, #6
 80078dc:	d11a      	bne.n	8007914 <CDC_Receive_FS+0x24c>
		UserTxBufferFS[0] = cmd;
 80078de:	4a35      	ldr	r2, [pc, #212]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 80078e0:	7ffb      	ldrb	r3, [r7, #31]
 80078e2:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 80078e4:	f7f8 fd6a 	bl	80003bc <GetBtnRunState>
 80078e8:	4603      	mov	r3, r0
 80078ea:	461a      	mov	r2, r3
 80078ec:	4b31      	ldr	r3, [pc, #196]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 80078ee:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 80078f0:	f7f8 fda6 	bl	8000440 <GetBtnUpState>
 80078f4:	4603      	mov	r3, r0
 80078f6:	461a      	mov	r2, r3
 80078f8:	4b2e      	ldr	r3, [pc, #184]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 80078fa:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 80078fc:	f7f8 fde2 	bl	80004c4 <GetBtnDownState>
 8007900:	4603      	mov	r3, r0
 8007902:	461a      	mov	r2, r3
 8007904:	4b2b      	ldr	r3, [pc, #172]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 8007906:	70da      	strb	r2, [r3, #3]

		CDC_Transmit_FS(UserTxBufferFS, 4);
 8007908:	2104      	movs	r1, #4
 800790a:	482a      	ldr	r0, [pc, #168]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 800790c:	f000 f884 	bl	8007a18 <CDC_Transmit_FS>
		return (USBD_OK);
 8007910:	2300      	movs	r3, #0
 8007912:	e078      	b.n	8007a06 <CDC_Receive_FS+0x33e>
	// ID? 
	} else if (cmd == 0x07) {
 8007914:	7ffb      	ldrb	r3, [r7, #31]
 8007916:	2b07      	cmp	r3, #7
 8007918:	d12d      	bne.n	8007976 <CDC_Receive_FS+0x2ae>
		char str[] = "prb_v0.3";
 800791a:	4a2e      	ldr	r2, [pc, #184]	; (80079d4 <CDC_Receive_FS+0x30c>)
 800791c:	f107 0310 	add.w	r3, r7, #16
 8007920:	ca07      	ldmia	r2, {r0, r1, r2}
 8007922:	c303      	stmia	r3!, {r0, r1}
 8007924:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8007926:	4a23      	ldr	r2, [pc, #140]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 8007928:	7ffb      	ldrb	r3, [r7, #31]
 800792a:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = strlen(str);
 800792c:	f107 0310 	add.w	r3, r7, #16
 8007930:	4618      	mov	r0, r3
 8007932:	f7f8 fc0b 	bl	800014c <strlen>
 8007936:	4603      	mov	r3, r0
 8007938:	b2da      	uxtb	r2, r3
 800793a:	4b1e      	ldr	r3, [pc, #120]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 800793c:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 800793e:	4c23      	ldr	r4, [pc, #140]	; (80079cc <CDC_Receive_FS+0x304>)
 8007940:	f107 0310 	add.w	r3, r7, #16
 8007944:	4618      	mov	r0, r3
 8007946:	f7f8 fc01 	bl	800014c <strlen>
 800794a:	4602      	mov	r2, r0
 800794c:	f107 0310 	add.w	r3, r7, #16
 8007950:	4619      	mov	r1, r3
 8007952:	4620      	mov	r0, r4
 8007954:	f000 fc5c 	bl	8008210 <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 8007958:	f107 0310 	add.w	r3, r7, #16
 800795c:	4618      	mov	r0, r3
 800795e:	f7f8 fbf5 	bl	800014c <strlen>
 8007962:	4603      	mov	r3, r0
 8007964:	b29b      	uxth	r3, r3
 8007966:	3302      	adds	r3, #2
 8007968:	b29b      	uxth	r3, r3
 800796a:	4619      	mov	r1, r3
 800796c:	4811      	ldr	r0, [pc, #68]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 800796e:	f000 f853 	bl	8007a18 <CDC_Transmit_FS>
		return (USBD_OK);
 8007972:	2300      	movs	r3, #0
 8007974:	e047      	b.n	8007a06 <CDC_Receive_FS+0x33e>
	 * до того момента пока на выходах компараторов не появится 1.
	 * Т.е. каждый раз когда мы меняем входной код - мы запрашиваем контроллер щупа о состоянии выходов компаратора.
	 */

	// inHL?
	} else if (cmd == 0x08) {
 8007976:	7ffb      	ldrb	r3, [r7, #31]
 8007978:	2b08      	cmp	r3, #8
 800797a:	d12d      	bne.n	80079d8 <CDC_Receive_FS+0x310>
		EnableTIM3_PB4();
 800797c:	f7f8 fde4 	bl	8000548 <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 8007980:	f7f8 fdfa 	bl	8000578 <GetTIM3>
 8007984:	4603      	mov	r3, r0
 8007986:	b29b      	uxth	r3, r3
 8007988:	81fb      	strh	r3, [r7, #14]
		UserTxBufferFS[0] = cmd;
 800798a:	4a0a      	ldr	r2, [pc, #40]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 800798c:	7ffb      	ldrb	r3, [r7, #31]
 800798e:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS+1,&temp,sizeof(uint16_t));
 8007990:	4a0d      	ldr	r2, [pc, #52]	; (80079c8 <CDC_Receive_FS+0x300>)
 8007992:	89fb      	ldrh	r3, [r7, #14]
 8007994:	8013      	strh	r3, [r2, #0]
//	    for(int i = 0;i >= 10; i++ ){
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//			HAL_Delay(250);
//		}

		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8007996:	2103      	movs	r1, #3
 8007998:	4806      	ldr	r0, [pc, #24]	; (80079b4 <CDC_Receive_FS+0x2ec>)
 800799a:	f000 f83d 	bl	8007a18 <CDC_Transmit_FS>
		return (USBD_OK);
 800799e:	2300      	movs	r3, #0
 80079a0:	e031      	b.n	8007a06 <CDC_Receive_FS+0x33e>
 80079a2:	bf00      	nop
 80079a4:	200005ec 	.word	0x200005ec
 80079a8:	40010800 	.word	0x40010800
 80079ac:	20000275 	.word	0x20000275
 80079b0:	080093dc 	.word	0x080093dc
 80079b4:	20000ab0 	.word	0x20000ab0
 80079b8:	080093f4 	.word	0x080093f4
 80079bc:	0800940c 	.word	0x0800940c
 80079c0:	08009418 	.word	0x08009418
 80079c4:	08009424 	.word	0x08009424
 80079c8:	20000ab1 	.word	0x20000ab1
 80079cc:	20000ab2 	.word	0x20000ab2
 80079d0:	20000ab4 	.word	0x20000ab4
 80079d4:	08009434 	.word	0x08009434

	// inLL?
	} else if (cmd == 0x09) {
 80079d8:	7ffb      	ldrb	r3, [r7, #31]
 80079da:	2b09      	cmp	r3, #9
 80079dc:	d112      	bne.n	8007a04 <CDC_Receive_FS+0x33c>
		EnableTIM4_PB6();
 80079de:	f7f8 fdbf 	bl	8000560 <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 80079e2:	f7f8 fde1 	bl	80005a8 <GetTIM4>
 80079e6:	4603      	mov	r3, r0
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	81bb      	strh	r3, [r7, #12]
		UserTxBufferFS[0] = cmd;
 80079ec:	4a08      	ldr	r2, [pc, #32]	; (8007a10 <CDC_Receive_FS+0x348>)
 80079ee:	7ffb      	ldrb	r3, [r7, #31]
 80079f0:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS+1,&temp,sizeof(uint16_t));
 80079f2:	4a08      	ldr	r2, [pc, #32]	; (8007a14 <CDC_Receive_FS+0x34c>)
 80079f4:	89bb      	ldrh	r3, [r7, #12]
 80079f6:	8013      	strh	r3, [r2, #0]



		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 80079f8:	2103      	movs	r1, #3
 80079fa:	4805      	ldr	r0, [pc, #20]	; (8007a10 <CDC_Receive_FS+0x348>)
 80079fc:	f000 f80c 	bl	8007a18 <CDC_Transmit_FS>
		return (USBD_OK);
 8007a00:	2300      	movs	r3, #0
 8007a02:	e000      	b.n	8007a06 <CDC_Receive_FS+0x33e>

	UserTxBufferFS[0] = cmd;
	UserTxBufferFS[1] = 0x02;	// неизвестная команда
	CDC_Transmit_FS(UserTxBufferFS, 2);
#endif	/* KOSTIK_MODE */
	return (USBD_OK);
 8007a04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3724      	adds	r7, #36	; 0x24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd90      	pop	{r4, r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000ab0 	.word	0x20000ab0
 8007a14:	20000ab1 	.word	0x20000ab1

08007a18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8007a28:	4b0d      	ldr	r3, [pc, #52]	; (8007a60 <CDC_Transmit_FS+0x48>)
 8007a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2e:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0) {
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e00b      	b.n	8007a56 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a3e:	887b      	ldrh	r3, [r7, #2]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6879      	ldr	r1, [r7, #4]
 8007a44:	4806      	ldr	r0, [pc, #24]	; (8007a60 <CDC_Transmit_FS+0x48>)
 8007a46:	f7fe fc83 	bl	8006350 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a4a:	4805      	ldr	r0, [pc, #20]	; (8007a60 <CDC_Transmit_FS+0x48>)
 8007a4c:	f7fe fcac 	bl	80063a8 <USBD_CDC_TransmitPacket>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	200005ec 	.word	0x200005ec

08007a64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	6039      	str	r1, [r7, #0]
 8007a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2212      	movs	r2, #18
 8007a74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a76:	4b03      	ldr	r3, [pc, #12]	; (8007a84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc80      	pop	{r7}
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	2000015c 	.word	0x2000015c

08007a88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2204      	movs	r2, #4
 8007a98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a9a:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bc80      	pop	{r7}
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	20000170 	.word	0x20000170

08007aac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	6039      	str	r1, [r7, #0]
 8007ab6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d105      	bne.n	8007aca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	4907      	ldr	r1, [pc, #28]	; (8007ae0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ac2:	4808      	ldr	r0, [pc, #32]	; (8007ae4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ac4:	f7ff fc79 	bl	80073ba <USBD_GetString>
 8007ac8:	e004      	b.n	8007ad4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	4904      	ldr	r1, [pc, #16]	; (8007ae0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ace:	4805      	ldr	r0, [pc, #20]	; (8007ae4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ad0:	f7ff fc73 	bl	80073ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ad4:	4b02      	ldr	r3, [pc, #8]	; (8007ae0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20000cb0 	.word	0x20000cb0
 8007ae4:	08009440 	.word	0x08009440

08007ae8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	6039      	str	r1, [r7, #0]
 8007af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	4904      	ldr	r1, [pc, #16]	; (8007b08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007af8:	4804      	ldr	r0, [pc, #16]	; (8007b0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007afa:	f7ff fc5e 	bl	80073ba <USBD_GetString>
  return USBD_StrDesc;
 8007afe:	4b02      	ldr	r3, [pc, #8]	; (8007b08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	20000cb0 	.word	0x20000cb0
 8007b0c:	08009458 	.word	0x08009458

08007b10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	4603      	mov	r3, r0
 8007b18:	6039      	str	r1, [r7, #0]
 8007b1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	221a      	movs	r2, #26
 8007b20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b22:	f000 f843 	bl	8007bac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b26:	4b02      	ldr	r3, [pc, #8]	; (8007b30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	20000174 	.word	0x20000174

08007b34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	6039      	str	r1, [r7, #0]
 8007b3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d105      	bne.n	8007b52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	4907      	ldr	r1, [pc, #28]	; (8007b68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b4a:	4808      	ldr	r0, [pc, #32]	; (8007b6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b4c:	f7ff fc35 	bl	80073ba <USBD_GetString>
 8007b50:	e004      	b.n	8007b5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	4904      	ldr	r1, [pc, #16]	; (8007b68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b56:	4805      	ldr	r0, [pc, #20]	; (8007b6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b58:	f7ff fc2f 	bl	80073ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b5c:	4b02      	ldr	r3, [pc, #8]	; (8007b68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20000cb0 	.word	0x20000cb0
 8007b6c:	0800946c 	.word	0x0800946c

08007b70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	4603      	mov	r3, r0
 8007b78:	6039      	str	r1, [r7, #0]
 8007b7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d105      	bne.n	8007b8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	4907      	ldr	r1, [pc, #28]	; (8007ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b86:	4808      	ldr	r0, [pc, #32]	; (8007ba8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b88:	f7ff fc17 	bl	80073ba <USBD_GetString>
 8007b8c:	e004      	b.n	8007b98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	4904      	ldr	r1, [pc, #16]	; (8007ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b92:	4805      	ldr	r0, [pc, #20]	; (8007ba8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b94:	f7ff fc11 	bl	80073ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b98:	4b02      	ldr	r3, [pc, #8]	; (8007ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000cb0 	.word	0x20000cb0
 8007ba8:	08009478 	.word	0x08009478

08007bac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bb2:	4b0f      	ldr	r3, [pc, #60]	; (8007bf0 <Get_SerialNum+0x44>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bb8:	4b0e      	ldr	r3, [pc, #56]	; (8007bf4 <Get_SerialNum+0x48>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bbe:	4b0e      	ldr	r3, [pc, #56]	; (8007bf8 <Get_SerialNum+0x4c>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4413      	add	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d009      	beq.n	8007be6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bd2:	2208      	movs	r2, #8
 8007bd4:	4909      	ldr	r1, [pc, #36]	; (8007bfc <Get_SerialNum+0x50>)
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 f814 	bl	8007c04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bdc:	2204      	movs	r2, #4
 8007bde:	4908      	ldr	r1, [pc, #32]	; (8007c00 <Get_SerialNum+0x54>)
 8007be0:	68b8      	ldr	r0, [r7, #8]
 8007be2:	f000 f80f 	bl	8007c04 <IntToUnicode>
  }
}
 8007be6:	bf00      	nop
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	1ffff7e8 	.word	0x1ffff7e8
 8007bf4:	1ffff7ec 	.word	0x1ffff7ec
 8007bf8:	1ffff7f0 	.word	0x1ffff7f0
 8007bfc:	20000176 	.word	0x20000176
 8007c00:	20000186 	.word	0x20000186

08007c04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c16:	2300      	movs	r3, #0
 8007c18:	75fb      	strb	r3, [r7, #23]
 8007c1a:	e027      	b.n	8007c6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	0f1b      	lsrs	r3, r3, #28
 8007c20:	2b09      	cmp	r3, #9
 8007c22:	d80b      	bhi.n	8007c3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	0f1b      	lsrs	r3, r3, #28
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	4619      	mov	r1, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	440b      	add	r3, r1
 8007c34:	3230      	adds	r2, #48	; 0x30
 8007c36:	b2d2      	uxtb	r2, r2
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	e00a      	b.n	8007c52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	0f1b      	lsrs	r3, r3, #28
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	4619      	mov	r1, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	440b      	add	r3, r1
 8007c4c:	3237      	adds	r2, #55	; 0x37
 8007c4e:	b2d2      	uxtb	r2, r2
 8007c50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	011b      	lsls	r3, r3, #4
 8007c56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	4413      	add	r3, r2
 8007c62:	2200      	movs	r2, #0
 8007c64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	75fb      	strb	r3, [r7, #23]
 8007c6c:	7dfa      	ldrb	r2, [r7, #23]
 8007c6e:	79fb      	ldrb	r3, [r7, #7]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d3d3      	bcc.n	8007c1c <IntToUnicode+0x18>
  }
}
 8007c74:	bf00      	nop
 8007c76:	371c      	adds	r7, #28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bc80      	pop	{r7}
 8007c7c:	4770      	bx	lr
	...

08007c80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a0d      	ldr	r2, [pc, #52]	; (8007cc4 <HAL_PCD_MspInit+0x44>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d113      	bne.n	8007cba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007c92:	4b0d      	ldr	r3, [pc, #52]	; (8007cc8 <HAL_PCD_MspInit+0x48>)
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	4a0c      	ldr	r2, [pc, #48]	; (8007cc8 <HAL_PCD_MspInit+0x48>)
 8007c98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c9c:	61d3      	str	r3, [r2, #28]
 8007c9e:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <HAL_PCD_MspInit+0x48>)
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007caa:	2200      	movs	r2, #0
 8007cac:	2100      	movs	r1, #0
 8007cae:	2014      	movs	r0, #20
 8007cb0:	f7fa f9af 	bl	8002012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007cb4:	2014      	movs	r0, #20
 8007cb6:	f7fa f9c8 	bl	800204a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	40005c00 	.word	0x40005c00
 8007cc8:	40021000 	.word	0x40021000

08007ccc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	f7fe fc45 	bl	8006572 <USBD_LL_SetupStage>
}
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007d02:	78fb      	ldrb	r3, [r7, #3]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	015b      	lsls	r3, r3, #5
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	4619      	mov	r1, r3
 8007d14:	f7fe fc78 	bl	8006608 <USBD_LL_DataOutStage>
}
 8007d18:	bf00      	nop
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	015b      	lsls	r3, r3, #5
 8007d38:	4413      	add	r3, r2
 8007d3a:	333c      	adds	r3, #60	; 0x3c
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	4619      	mov	r1, r3
 8007d42:	f7fe fcd2 	bl	80066ea <USBD_LL_DataInStage>
}
 8007d46:	bf00      	nop
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b082      	sub	sp, #8
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe fde2 	bl	8006926 <USBD_LL_SOF>
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d72:	2301      	movs	r3, #1
 8007d74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d001      	beq.n	8007d82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007d7e:	f7f9 f8a3 	bl	8000ec8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d88:	7bfa      	ldrb	r2, [r7, #15]
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fe fd92 	bl	80068b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fe fd4b 	bl	8006834 <USBD_LL_Reset>
}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe fd8c 	bl	80068d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d005      	beq.n	8007dd0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007dc4:	4b04      	ldr	r3, [pc, #16]	; (8007dd8 <HAL_PCD_SuspendCallback+0x30>)
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	4a03      	ldr	r2, [pc, #12]	; (8007dd8 <HAL_PCD_SuspendCallback+0x30>)
 8007dca:	f043 0306 	orr.w	r3, r3, #6
 8007dce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	e000ed00 	.word	0xe000ed00

08007ddc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fd86 	bl	80068fc <USBD_LL_Resume>
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e00:	4a28      	ldr	r2, [pc, #160]	; (8007ea4 <USBD_LL_Init+0xac>)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a26      	ldr	r2, [pc, #152]	; (8007ea4 <USBD_LL_Init+0xac>)
 8007e0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e10:	4b24      	ldr	r3, [pc, #144]	; (8007ea4 <USBD_LL_Init+0xac>)
 8007e12:	4a25      	ldr	r2, [pc, #148]	; (8007ea8 <USBD_LL_Init+0xb0>)
 8007e14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e16:	4b23      	ldr	r3, [pc, #140]	; (8007ea4 <USBD_LL_Init+0xac>)
 8007e18:	2208      	movs	r2, #8
 8007e1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e1c:	4b21      	ldr	r3, [pc, #132]	; (8007ea4 <USBD_LL_Init+0xac>)
 8007e1e:	2202      	movs	r2, #2
 8007e20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e22:	4b20      	ldr	r3, [pc, #128]	; (8007ea4 <USBD_LL_Init+0xac>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007e28:	4b1e      	ldr	r3, [pc, #120]	; (8007ea4 <USBD_LL_Init+0xac>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007e2e:	4b1d      	ldr	r3, [pc, #116]	; (8007ea4 <USBD_LL_Init+0xac>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007e34:	481b      	ldr	r0, [pc, #108]	; (8007ea4 <USBD_LL_Init+0xac>)
 8007e36:	f7fa faac 	bl	8002392 <HAL_PCD_Init>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007e40:	f7f9 f842 	bl	8000ec8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e4a:	2318      	movs	r3, #24
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2100      	movs	r1, #0
 8007e50:	f7fb f944 	bl	80030dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e5a:	2358      	movs	r3, #88	; 0x58
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	2180      	movs	r1, #128	; 0x80
 8007e60:	f7fb f93c 	bl	80030dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e6a:	23c0      	movs	r3, #192	; 0xc0
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2181      	movs	r1, #129	; 0x81
 8007e70:	f7fb f934 	bl	80030dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007e7e:	2200      	movs	r2, #0
 8007e80:	2101      	movs	r1, #1
 8007e82:	f7fb f92b 	bl	80030dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e90:	2200      	movs	r2, #0
 8007e92:	2182      	movs	r1, #130	; 0x82
 8007e94:	f7fb f922 	bl	80030dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20000eb0 	.word	0x20000eb0
 8007ea8:	40005c00 	.word	0x40005c00

08007eac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fa fb46 	bl	8002554 <HAL_PCD_Start>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f948 	bl	8008164 <USBD_Get_USB_Status>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	4608      	mov	r0, r1
 8007eec:	4611      	mov	r1, r2
 8007eee:	461a      	mov	r2, r3
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	70fb      	strb	r3, [r7, #3]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70bb      	strb	r3, [r7, #2]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f0a:	78bb      	ldrb	r3, [r7, #2]
 8007f0c:	883a      	ldrh	r2, [r7, #0]
 8007f0e:	78f9      	ldrb	r1, [r7, #3]
 8007f10:	f7fa fc79 	bl	8002806 <HAL_PCD_EP_Open>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 f922 	bl	8008164 <USBD_Get_USB_Status>
 8007f20:	4603      	mov	r3, r0
 8007f22:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b084      	sub	sp, #16
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	460b      	mov	r3, r1
 8007f38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f48:	78fa      	ldrb	r2, [r7, #3]
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fa fcba 	bl	80028c6 <HAL_PCD_EP_Close>
 8007f52:	4603      	mov	r3, r0
 8007f54:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 f903 	bl	8008164 <USBD_Get_USB_Status>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f86:	78fa      	ldrb	r2, [r7, #3]
 8007f88:	4611      	mov	r1, r2
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fa fd64 	bl	8002a58 <HAL_PCD_EP_SetStall>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 f8e4 	bl	8008164 <USBD_Get_USB_Status>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fc4:	78fa      	ldrb	r2, [r7, #3]
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fa fd9f 	bl	8002b0c <HAL_PCD_EP_ClrStall>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 f8c5 	bl	8008164 <USBD_Get_USB_Status>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ffa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008000:	2b00      	cmp	r3, #0
 8008002:	da08      	bge.n	8008016 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	015b      	lsls	r3, r3, #5
 800800e:	4413      	add	r3, r2
 8008010:	332a      	adds	r3, #42	; 0x2a
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	e008      	b.n	8008028 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	015b      	lsls	r3, r3, #5
 8008020:	4413      	add	r3, r2
 8008022:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008026:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	bc80      	pop	{r7}
 8008030:	4770      	bx	lr

08008032 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	460b      	mov	r3, r1
 800803c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800804c:	78fa      	ldrb	r2, [r7, #3]
 800804e:	4611      	mov	r1, r2
 8008050:	4618      	mov	r0, r3
 8008052:	f7fa fbb3 	bl	80027bc <HAL_PCD_SetAddress>
 8008056:	4603      	mov	r3, r0
 8008058:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	4618      	mov	r0, r3
 800805e:	f000 f881 	bl	8008164 <USBD_Get_USB_Status>
 8008062:	4603      	mov	r3, r0
 8008064:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008066:	7bbb      	ldrb	r3, [r7, #14]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	607a      	str	r2, [r7, #4]
 800807a:	461a      	mov	r2, r3
 800807c:	460b      	mov	r3, r1
 800807e:	72fb      	strb	r3, [r7, #11]
 8008080:	4613      	mov	r3, r2
 8008082:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008092:	893b      	ldrh	r3, [r7, #8]
 8008094:	7af9      	ldrb	r1, [r7, #11]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	f7fa fca5 	bl	80029e6 <HAL_PCD_EP_Transmit>
 800809c:	4603      	mov	r3, r0
 800809e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f85e 	bl	8008164 <USBD_Get_USB_Status>
 80080a8:	4603      	mov	r3, r0
 80080aa:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80080ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b086      	sub	sp, #24
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	607a      	str	r2, [r7, #4]
 80080c0:	461a      	mov	r2, r3
 80080c2:	460b      	mov	r3, r1
 80080c4:	72fb      	strb	r3, [r7, #11]
 80080c6:	4613      	mov	r3, r2
 80080c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080d8:	893b      	ldrh	r3, [r7, #8]
 80080da:	7af9      	ldrb	r1, [r7, #11]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	f7fa fc34 	bl	800294a <HAL_PCD_EP_Receive>
 80080e2:	4603      	mov	r3, r0
 80080e4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80080e6:	7dfb      	ldrb	r3, [r7, #23]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 f83b 	bl	8008164 <USBD_Get_USB_Status>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80080f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800810e:	78fa      	ldrb	r2, [r7, #3]
 8008110:	4611      	mov	r1, r2
 8008112:	4618      	mov	r0, r3
 8008114:	f7fa fc53 	bl	80029be <HAL_PCD_EP_GetRxCount>
 8008118:	4603      	mov	r3, r0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800812c:	4b02      	ldr	r3, [pc, #8]	; (8008138 <USBD_static_malloc+0x14>)
}
 800812e:	4618      	mov	r0, r3
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	bc80      	pop	{r7}
 8008136:	4770      	bx	lr
 8008138:	20000278 	.word	0x20000278

0800813c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]

}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	bc80      	pop	{r7}
 800814c:	4770      	bx	lr

0800814e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800815a:	bf00      	nop
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	bc80      	pop	{r7}
 8008162:	4770      	bx	lr

08008164 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	4603      	mov	r3, r0
 800816c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	2b03      	cmp	r3, #3
 8008176:	d817      	bhi.n	80081a8 <USBD_Get_USB_Status+0x44>
 8008178:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <USBD_Get_USB_Status+0x1c>)
 800817a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817e:	bf00      	nop
 8008180:	08008191 	.word	0x08008191
 8008184:	08008197 	.word	0x08008197
 8008188:	0800819d 	.word	0x0800819d
 800818c:	080081a3 	.word	0x080081a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	73fb      	strb	r3, [r7, #15]
    break;
 8008194:	e00b      	b.n	80081ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008196:	2302      	movs	r3, #2
 8008198:	73fb      	strb	r3, [r7, #15]
    break;
 800819a:	e008      	b.n	80081ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800819c:	2301      	movs	r3, #1
 800819e:	73fb      	strb	r3, [r7, #15]
    break;
 80081a0:	e005      	b.n	80081ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081a2:	2302      	movs	r3, #2
 80081a4:	73fb      	strb	r3, [r7, #15]
    break;
 80081a6:	e002      	b.n	80081ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081a8:	2302      	movs	r3, #2
 80081aa:	73fb      	strb	r3, [r7, #15]
    break;
 80081ac:	bf00      	nop
  }
  return usb_status;
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bc80      	pop	{r7}
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop

080081bc <__errno>:
 80081bc:	4b01      	ldr	r3, [pc, #4]	; (80081c4 <__errno+0x8>)
 80081be:	6818      	ldr	r0, [r3, #0]
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	20000190 	.word	0x20000190

080081c8 <__libc_init_array>:
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	2500      	movs	r5, #0
 80081cc:	4e0c      	ldr	r6, [pc, #48]	; (8008200 <__libc_init_array+0x38>)
 80081ce:	4c0d      	ldr	r4, [pc, #52]	; (8008204 <__libc_init_array+0x3c>)
 80081d0:	1ba4      	subs	r4, r4, r6
 80081d2:	10a4      	asrs	r4, r4, #2
 80081d4:	42a5      	cmp	r5, r4
 80081d6:	d109      	bne.n	80081ec <__libc_init_array+0x24>
 80081d8:	f001 f8d6 	bl	8009388 <_init>
 80081dc:	2500      	movs	r5, #0
 80081de:	4e0a      	ldr	r6, [pc, #40]	; (8008208 <__libc_init_array+0x40>)
 80081e0:	4c0a      	ldr	r4, [pc, #40]	; (800820c <__libc_init_array+0x44>)
 80081e2:	1ba4      	subs	r4, r4, r6
 80081e4:	10a4      	asrs	r4, r4, #2
 80081e6:	42a5      	cmp	r5, r4
 80081e8:	d105      	bne.n	80081f6 <__libc_init_array+0x2e>
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
 80081ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081f0:	4798      	blx	r3
 80081f2:	3501      	adds	r5, #1
 80081f4:	e7ee      	b.n	80081d4 <__libc_init_array+0xc>
 80081f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081fa:	4798      	blx	r3
 80081fc:	3501      	adds	r5, #1
 80081fe:	e7f2      	b.n	80081e6 <__libc_init_array+0x1e>
 8008200:	08009538 	.word	0x08009538
 8008204:	08009538 	.word	0x08009538
 8008208:	08009538 	.word	0x08009538
 800820c:	0800953c 	.word	0x0800953c

08008210 <memcpy>:
 8008210:	b510      	push	{r4, lr}
 8008212:	1e43      	subs	r3, r0, #1
 8008214:	440a      	add	r2, r1
 8008216:	4291      	cmp	r1, r2
 8008218:	d100      	bne.n	800821c <memcpy+0xc>
 800821a:	bd10      	pop	{r4, pc}
 800821c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008220:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008224:	e7f7      	b.n	8008216 <memcpy+0x6>

08008226 <memset>:
 8008226:	4603      	mov	r3, r0
 8008228:	4402      	add	r2, r0
 800822a:	4293      	cmp	r3, r2
 800822c:	d100      	bne.n	8008230 <memset+0xa>
 800822e:	4770      	bx	lr
 8008230:	f803 1b01 	strb.w	r1, [r3], #1
 8008234:	e7f9      	b.n	800822a <memset+0x4>
	...

08008238 <iprintf>:
 8008238:	b40f      	push	{r0, r1, r2, r3}
 800823a:	4b0a      	ldr	r3, [pc, #40]	; (8008264 <iprintf+0x2c>)
 800823c:	b513      	push	{r0, r1, r4, lr}
 800823e:	681c      	ldr	r4, [r3, #0]
 8008240:	b124      	cbz	r4, 800824c <iprintf+0x14>
 8008242:	69a3      	ldr	r3, [r4, #24]
 8008244:	b913      	cbnz	r3, 800824c <iprintf+0x14>
 8008246:	4620      	mov	r0, r4
 8008248:	f000 f86e 	bl	8008328 <__sinit>
 800824c:	ab05      	add	r3, sp, #20
 800824e:	9a04      	ldr	r2, [sp, #16]
 8008250:	68a1      	ldr	r1, [r4, #8]
 8008252:	4620      	mov	r0, r4
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	f000 fac5 	bl	80087e4 <_vfiprintf_r>
 800825a:	b002      	add	sp, #8
 800825c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008260:	b004      	add	sp, #16
 8008262:	4770      	bx	lr
 8008264:	20000190 	.word	0x20000190

08008268 <siprintf>:
 8008268:	b40e      	push	{r1, r2, r3}
 800826a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800826e:	b500      	push	{lr}
 8008270:	b09c      	sub	sp, #112	; 0x70
 8008272:	ab1d      	add	r3, sp, #116	; 0x74
 8008274:	9002      	str	r0, [sp, #8]
 8008276:	9006      	str	r0, [sp, #24]
 8008278:	9107      	str	r1, [sp, #28]
 800827a:	9104      	str	r1, [sp, #16]
 800827c:	4808      	ldr	r0, [pc, #32]	; (80082a0 <siprintf+0x38>)
 800827e:	4909      	ldr	r1, [pc, #36]	; (80082a4 <siprintf+0x3c>)
 8008280:	f853 2b04 	ldr.w	r2, [r3], #4
 8008284:	9105      	str	r1, [sp, #20]
 8008286:	6800      	ldr	r0, [r0, #0]
 8008288:	a902      	add	r1, sp, #8
 800828a:	9301      	str	r3, [sp, #4]
 800828c:	f000 f98a 	bl	80085a4 <_svfiprintf_r>
 8008290:	2200      	movs	r2, #0
 8008292:	9b02      	ldr	r3, [sp, #8]
 8008294:	701a      	strb	r2, [r3, #0]
 8008296:	b01c      	add	sp, #112	; 0x70
 8008298:	f85d eb04 	ldr.w	lr, [sp], #4
 800829c:	b003      	add	sp, #12
 800829e:	4770      	bx	lr
 80082a0:	20000190 	.word	0x20000190
 80082a4:	ffff0208 	.word	0xffff0208

080082a8 <std>:
 80082a8:	2300      	movs	r3, #0
 80082aa:	b510      	push	{r4, lr}
 80082ac:	4604      	mov	r4, r0
 80082ae:	e9c0 3300 	strd	r3, r3, [r0]
 80082b2:	6083      	str	r3, [r0, #8]
 80082b4:	8181      	strh	r1, [r0, #12]
 80082b6:	6643      	str	r3, [r0, #100]	; 0x64
 80082b8:	81c2      	strh	r2, [r0, #14]
 80082ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082be:	6183      	str	r3, [r0, #24]
 80082c0:	4619      	mov	r1, r3
 80082c2:	2208      	movs	r2, #8
 80082c4:	305c      	adds	r0, #92	; 0x5c
 80082c6:	f7ff ffae 	bl	8008226 <memset>
 80082ca:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <std+0x38>)
 80082cc:	6224      	str	r4, [r4, #32]
 80082ce:	6263      	str	r3, [r4, #36]	; 0x24
 80082d0:	4b04      	ldr	r3, [pc, #16]	; (80082e4 <std+0x3c>)
 80082d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80082d4:	4b04      	ldr	r3, [pc, #16]	; (80082e8 <std+0x40>)
 80082d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082d8:	4b04      	ldr	r3, [pc, #16]	; (80082ec <std+0x44>)
 80082da:	6323      	str	r3, [r4, #48]	; 0x30
 80082dc:	bd10      	pop	{r4, pc}
 80082de:	bf00      	nop
 80082e0:	08008d41 	.word	0x08008d41
 80082e4:	08008d63 	.word	0x08008d63
 80082e8:	08008d9b 	.word	0x08008d9b
 80082ec:	08008dbf 	.word	0x08008dbf

080082f0 <_cleanup_r>:
 80082f0:	4901      	ldr	r1, [pc, #4]	; (80082f8 <_cleanup_r+0x8>)
 80082f2:	f000 b885 	b.w	8008400 <_fwalk_reent>
 80082f6:	bf00      	nop
 80082f8:	08009099 	.word	0x08009099

080082fc <__sfmoreglue>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	2568      	movs	r5, #104	; 0x68
 8008300:	1e4a      	subs	r2, r1, #1
 8008302:	4355      	muls	r5, r2
 8008304:	460e      	mov	r6, r1
 8008306:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800830a:	f000 f897 	bl	800843c <_malloc_r>
 800830e:	4604      	mov	r4, r0
 8008310:	b140      	cbz	r0, 8008324 <__sfmoreglue+0x28>
 8008312:	2100      	movs	r1, #0
 8008314:	e9c0 1600 	strd	r1, r6, [r0]
 8008318:	300c      	adds	r0, #12
 800831a:	60a0      	str	r0, [r4, #8]
 800831c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008320:	f7ff ff81 	bl	8008226 <memset>
 8008324:	4620      	mov	r0, r4
 8008326:	bd70      	pop	{r4, r5, r6, pc}

08008328 <__sinit>:
 8008328:	6983      	ldr	r3, [r0, #24]
 800832a:	b510      	push	{r4, lr}
 800832c:	4604      	mov	r4, r0
 800832e:	bb33      	cbnz	r3, 800837e <__sinit+0x56>
 8008330:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008334:	6503      	str	r3, [r0, #80]	; 0x50
 8008336:	4b12      	ldr	r3, [pc, #72]	; (8008380 <__sinit+0x58>)
 8008338:	4a12      	ldr	r2, [pc, #72]	; (8008384 <__sinit+0x5c>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6282      	str	r2, [r0, #40]	; 0x28
 800833e:	4298      	cmp	r0, r3
 8008340:	bf04      	itt	eq
 8008342:	2301      	moveq	r3, #1
 8008344:	6183      	streq	r3, [r0, #24]
 8008346:	f000 f81f 	bl	8008388 <__sfp>
 800834a:	6060      	str	r0, [r4, #4]
 800834c:	4620      	mov	r0, r4
 800834e:	f000 f81b 	bl	8008388 <__sfp>
 8008352:	60a0      	str	r0, [r4, #8]
 8008354:	4620      	mov	r0, r4
 8008356:	f000 f817 	bl	8008388 <__sfp>
 800835a:	2200      	movs	r2, #0
 800835c:	60e0      	str	r0, [r4, #12]
 800835e:	2104      	movs	r1, #4
 8008360:	6860      	ldr	r0, [r4, #4]
 8008362:	f7ff ffa1 	bl	80082a8 <std>
 8008366:	2201      	movs	r2, #1
 8008368:	2109      	movs	r1, #9
 800836a:	68a0      	ldr	r0, [r4, #8]
 800836c:	f7ff ff9c 	bl	80082a8 <std>
 8008370:	2202      	movs	r2, #2
 8008372:	2112      	movs	r1, #18
 8008374:	68e0      	ldr	r0, [r4, #12]
 8008376:	f7ff ff97 	bl	80082a8 <std>
 800837a:	2301      	movs	r3, #1
 800837c:	61a3      	str	r3, [r4, #24]
 800837e:	bd10      	pop	{r4, pc}
 8008380:	080094a0 	.word	0x080094a0
 8008384:	080082f1 	.word	0x080082f1

08008388 <__sfp>:
 8008388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838a:	4b1b      	ldr	r3, [pc, #108]	; (80083f8 <__sfp+0x70>)
 800838c:	4607      	mov	r7, r0
 800838e:	681e      	ldr	r6, [r3, #0]
 8008390:	69b3      	ldr	r3, [r6, #24]
 8008392:	b913      	cbnz	r3, 800839a <__sfp+0x12>
 8008394:	4630      	mov	r0, r6
 8008396:	f7ff ffc7 	bl	8008328 <__sinit>
 800839a:	3648      	adds	r6, #72	; 0x48
 800839c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083a0:	3b01      	subs	r3, #1
 80083a2:	d503      	bpl.n	80083ac <__sfp+0x24>
 80083a4:	6833      	ldr	r3, [r6, #0]
 80083a6:	b133      	cbz	r3, 80083b6 <__sfp+0x2e>
 80083a8:	6836      	ldr	r6, [r6, #0]
 80083aa:	e7f7      	b.n	800839c <__sfp+0x14>
 80083ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083b0:	b16d      	cbz	r5, 80083ce <__sfp+0x46>
 80083b2:	3468      	adds	r4, #104	; 0x68
 80083b4:	e7f4      	b.n	80083a0 <__sfp+0x18>
 80083b6:	2104      	movs	r1, #4
 80083b8:	4638      	mov	r0, r7
 80083ba:	f7ff ff9f 	bl	80082fc <__sfmoreglue>
 80083be:	6030      	str	r0, [r6, #0]
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d1f1      	bne.n	80083a8 <__sfp+0x20>
 80083c4:	230c      	movs	r3, #12
 80083c6:	4604      	mov	r4, r0
 80083c8:	603b      	str	r3, [r7, #0]
 80083ca:	4620      	mov	r0, r4
 80083cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ce:	4b0b      	ldr	r3, [pc, #44]	; (80083fc <__sfp+0x74>)
 80083d0:	6665      	str	r5, [r4, #100]	; 0x64
 80083d2:	e9c4 5500 	strd	r5, r5, [r4]
 80083d6:	60a5      	str	r5, [r4, #8]
 80083d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80083dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80083e0:	2208      	movs	r2, #8
 80083e2:	4629      	mov	r1, r5
 80083e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083e8:	f7ff ff1d 	bl	8008226 <memset>
 80083ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083f4:	e7e9      	b.n	80083ca <__sfp+0x42>
 80083f6:	bf00      	nop
 80083f8:	080094a0 	.word	0x080094a0
 80083fc:	ffff0001 	.word	0xffff0001

08008400 <_fwalk_reent>:
 8008400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008404:	4680      	mov	r8, r0
 8008406:	4689      	mov	r9, r1
 8008408:	2600      	movs	r6, #0
 800840a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800840e:	b914      	cbnz	r4, 8008416 <_fwalk_reent+0x16>
 8008410:	4630      	mov	r0, r6
 8008412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008416:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800841a:	3f01      	subs	r7, #1
 800841c:	d501      	bpl.n	8008422 <_fwalk_reent+0x22>
 800841e:	6824      	ldr	r4, [r4, #0]
 8008420:	e7f5      	b.n	800840e <_fwalk_reent+0xe>
 8008422:	89ab      	ldrh	r3, [r5, #12]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d907      	bls.n	8008438 <_fwalk_reent+0x38>
 8008428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800842c:	3301      	adds	r3, #1
 800842e:	d003      	beq.n	8008438 <_fwalk_reent+0x38>
 8008430:	4629      	mov	r1, r5
 8008432:	4640      	mov	r0, r8
 8008434:	47c8      	blx	r9
 8008436:	4306      	orrs	r6, r0
 8008438:	3568      	adds	r5, #104	; 0x68
 800843a:	e7ee      	b.n	800841a <_fwalk_reent+0x1a>

0800843c <_malloc_r>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	1ccd      	adds	r5, r1, #3
 8008440:	f025 0503 	bic.w	r5, r5, #3
 8008444:	3508      	adds	r5, #8
 8008446:	2d0c      	cmp	r5, #12
 8008448:	bf38      	it	cc
 800844a:	250c      	movcc	r5, #12
 800844c:	2d00      	cmp	r5, #0
 800844e:	4606      	mov	r6, r0
 8008450:	db01      	blt.n	8008456 <_malloc_r+0x1a>
 8008452:	42a9      	cmp	r1, r5
 8008454:	d903      	bls.n	800845e <_malloc_r+0x22>
 8008456:	230c      	movs	r3, #12
 8008458:	6033      	str	r3, [r6, #0]
 800845a:	2000      	movs	r0, #0
 800845c:	bd70      	pop	{r4, r5, r6, pc}
 800845e:	f000 fee2 	bl	8009226 <__malloc_lock>
 8008462:	4a21      	ldr	r2, [pc, #132]	; (80084e8 <_malloc_r+0xac>)
 8008464:	6814      	ldr	r4, [r2, #0]
 8008466:	4621      	mov	r1, r4
 8008468:	b991      	cbnz	r1, 8008490 <_malloc_r+0x54>
 800846a:	4c20      	ldr	r4, [pc, #128]	; (80084ec <_malloc_r+0xb0>)
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	b91b      	cbnz	r3, 8008478 <_malloc_r+0x3c>
 8008470:	4630      	mov	r0, r6
 8008472:	f000 fc55 	bl	8008d20 <_sbrk_r>
 8008476:	6020      	str	r0, [r4, #0]
 8008478:	4629      	mov	r1, r5
 800847a:	4630      	mov	r0, r6
 800847c:	f000 fc50 	bl	8008d20 <_sbrk_r>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	d124      	bne.n	80084ce <_malloc_r+0x92>
 8008484:	230c      	movs	r3, #12
 8008486:	4630      	mov	r0, r6
 8008488:	6033      	str	r3, [r6, #0]
 800848a:	f000 fecd 	bl	8009228 <__malloc_unlock>
 800848e:	e7e4      	b.n	800845a <_malloc_r+0x1e>
 8008490:	680b      	ldr	r3, [r1, #0]
 8008492:	1b5b      	subs	r3, r3, r5
 8008494:	d418      	bmi.n	80084c8 <_malloc_r+0x8c>
 8008496:	2b0b      	cmp	r3, #11
 8008498:	d90f      	bls.n	80084ba <_malloc_r+0x7e>
 800849a:	600b      	str	r3, [r1, #0]
 800849c:	18cc      	adds	r4, r1, r3
 800849e:	50cd      	str	r5, [r1, r3]
 80084a0:	4630      	mov	r0, r6
 80084a2:	f000 fec1 	bl	8009228 <__malloc_unlock>
 80084a6:	f104 000b 	add.w	r0, r4, #11
 80084aa:	1d23      	adds	r3, r4, #4
 80084ac:	f020 0007 	bic.w	r0, r0, #7
 80084b0:	1ac3      	subs	r3, r0, r3
 80084b2:	d0d3      	beq.n	800845c <_malloc_r+0x20>
 80084b4:	425a      	negs	r2, r3
 80084b6:	50e2      	str	r2, [r4, r3]
 80084b8:	e7d0      	b.n	800845c <_malloc_r+0x20>
 80084ba:	684b      	ldr	r3, [r1, #4]
 80084bc:	428c      	cmp	r4, r1
 80084be:	bf16      	itet	ne
 80084c0:	6063      	strne	r3, [r4, #4]
 80084c2:	6013      	streq	r3, [r2, #0]
 80084c4:	460c      	movne	r4, r1
 80084c6:	e7eb      	b.n	80084a0 <_malloc_r+0x64>
 80084c8:	460c      	mov	r4, r1
 80084ca:	6849      	ldr	r1, [r1, #4]
 80084cc:	e7cc      	b.n	8008468 <_malloc_r+0x2c>
 80084ce:	1cc4      	adds	r4, r0, #3
 80084d0:	f024 0403 	bic.w	r4, r4, #3
 80084d4:	42a0      	cmp	r0, r4
 80084d6:	d005      	beq.n	80084e4 <_malloc_r+0xa8>
 80084d8:	1a21      	subs	r1, r4, r0
 80084da:	4630      	mov	r0, r6
 80084dc:	f000 fc20 	bl	8008d20 <_sbrk_r>
 80084e0:	3001      	adds	r0, #1
 80084e2:	d0cf      	beq.n	8008484 <_malloc_r+0x48>
 80084e4:	6025      	str	r5, [r4, #0]
 80084e6:	e7db      	b.n	80084a0 <_malloc_r+0x64>
 80084e8:	20000498 	.word	0x20000498
 80084ec:	2000049c 	.word	0x2000049c

080084f0 <__ssputs_r>:
 80084f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f4:	688e      	ldr	r6, [r1, #8]
 80084f6:	4682      	mov	sl, r0
 80084f8:	429e      	cmp	r6, r3
 80084fa:	460c      	mov	r4, r1
 80084fc:	4690      	mov	r8, r2
 80084fe:	4699      	mov	r9, r3
 8008500:	d837      	bhi.n	8008572 <__ssputs_r+0x82>
 8008502:	898a      	ldrh	r2, [r1, #12]
 8008504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008508:	d031      	beq.n	800856e <__ssputs_r+0x7e>
 800850a:	2302      	movs	r3, #2
 800850c:	6825      	ldr	r5, [r4, #0]
 800850e:	6909      	ldr	r1, [r1, #16]
 8008510:	1a6f      	subs	r7, r5, r1
 8008512:	6965      	ldr	r5, [r4, #20]
 8008514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008518:	fb95 f5f3 	sdiv	r5, r5, r3
 800851c:	f109 0301 	add.w	r3, r9, #1
 8008520:	443b      	add	r3, r7
 8008522:	429d      	cmp	r5, r3
 8008524:	bf38      	it	cc
 8008526:	461d      	movcc	r5, r3
 8008528:	0553      	lsls	r3, r2, #21
 800852a:	d530      	bpl.n	800858e <__ssputs_r+0x9e>
 800852c:	4629      	mov	r1, r5
 800852e:	f7ff ff85 	bl	800843c <_malloc_r>
 8008532:	4606      	mov	r6, r0
 8008534:	b950      	cbnz	r0, 800854c <__ssputs_r+0x5c>
 8008536:	230c      	movs	r3, #12
 8008538:	f04f 30ff 	mov.w	r0, #4294967295
 800853c:	f8ca 3000 	str.w	r3, [sl]
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854c:	463a      	mov	r2, r7
 800854e:	6921      	ldr	r1, [r4, #16]
 8008550:	f7ff fe5e 	bl	8008210 <memcpy>
 8008554:	89a3      	ldrh	r3, [r4, #12]
 8008556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800855a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855e:	81a3      	strh	r3, [r4, #12]
 8008560:	6126      	str	r6, [r4, #16]
 8008562:	443e      	add	r6, r7
 8008564:	6026      	str	r6, [r4, #0]
 8008566:	464e      	mov	r6, r9
 8008568:	6165      	str	r5, [r4, #20]
 800856a:	1bed      	subs	r5, r5, r7
 800856c:	60a5      	str	r5, [r4, #8]
 800856e:	454e      	cmp	r6, r9
 8008570:	d900      	bls.n	8008574 <__ssputs_r+0x84>
 8008572:	464e      	mov	r6, r9
 8008574:	4632      	mov	r2, r6
 8008576:	4641      	mov	r1, r8
 8008578:	6820      	ldr	r0, [r4, #0]
 800857a:	f000 fe3b 	bl	80091f4 <memmove>
 800857e:	68a3      	ldr	r3, [r4, #8]
 8008580:	2000      	movs	r0, #0
 8008582:	1b9b      	subs	r3, r3, r6
 8008584:	60a3      	str	r3, [r4, #8]
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	441e      	add	r6, r3
 800858a:	6026      	str	r6, [r4, #0]
 800858c:	e7dc      	b.n	8008548 <__ssputs_r+0x58>
 800858e:	462a      	mov	r2, r5
 8008590:	f000 fe98 	bl	80092c4 <_realloc_r>
 8008594:	4606      	mov	r6, r0
 8008596:	2800      	cmp	r0, #0
 8008598:	d1e2      	bne.n	8008560 <__ssputs_r+0x70>
 800859a:	6921      	ldr	r1, [r4, #16]
 800859c:	4650      	mov	r0, sl
 800859e:	f000 fe45 	bl	800922c <_free_r>
 80085a2:	e7c8      	b.n	8008536 <__ssputs_r+0x46>

080085a4 <_svfiprintf_r>:
 80085a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	461d      	mov	r5, r3
 80085aa:	898b      	ldrh	r3, [r1, #12]
 80085ac:	b09d      	sub	sp, #116	; 0x74
 80085ae:	061f      	lsls	r7, r3, #24
 80085b0:	4680      	mov	r8, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	4616      	mov	r6, r2
 80085b6:	d50f      	bpl.n	80085d8 <_svfiprintf_r+0x34>
 80085b8:	690b      	ldr	r3, [r1, #16]
 80085ba:	b96b      	cbnz	r3, 80085d8 <_svfiprintf_r+0x34>
 80085bc:	2140      	movs	r1, #64	; 0x40
 80085be:	f7ff ff3d 	bl	800843c <_malloc_r>
 80085c2:	6020      	str	r0, [r4, #0]
 80085c4:	6120      	str	r0, [r4, #16]
 80085c6:	b928      	cbnz	r0, 80085d4 <_svfiprintf_r+0x30>
 80085c8:	230c      	movs	r3, #12
 80085ca:	f8c8 3000 	str.w	r3, [r8]
 80085ce:	f04f 30ff 	mov.w	r0, #4294967295
 80085d2:	e0c8      	b.n	8008766 <_svfiprintf_r+0x1c2>
 80085d4:	2340      	movs	r3, #64	; 0x40
 80085d6:	6163      	str	r3, [r4, #20]
 80085d8:	2300      	movs	r3, #0
 80085da:	9309      	str	r3, [sp, #36]	; 0x24
 80085dc:	2320      	movs	r3, #32
 80085de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085e2:	2330      	movs	r3, #48	; 0x30
 80085e4:	f04f 0b01 	mov.w	fp, #1
 80085e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085ec:	9503      	str	r5, [sp, #12]
 80085ee:	4637      	mov	r7, r6
 80085f0:	463d      	mov	r5, r7
 80085f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80085f6:	b10b      	cbz	r3, 80085fc <_svfiprintf_r+0x58>
 80085f8:	2b25      	cmp	r3, #37	; 0x25
 80085fa:	d13e      	bne.n	800867a <_svfiprintf_r+0xd6>
 80085fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8008600:	d00b      	beq.n	800861a <_svfiprintf_r+0x76>
 8008602:	4653      	mov	r3, sl
 8008604:	4632      	mov	r2, r6
 8008606:	4621      	mov	r1, r4
 8008608:	4640      	mov	r0, r8
 800860a:	f7ff ff71 	bl	80084f0 <__ssputs_r>
 800860e:	3001      	adds	r0, #1
 8008610:	f000 80a4 	beq.w	800875c <_svfiprintf_r+0x1b8>
 8008614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008616:	4453      	add	r3, sl
 8008618:	9309      	str	r3, [sp, #36]	; 0x24
 800861a:	783b      	ldrb	r3, [r7, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 809d 	beq.w	800875c <_svfiprintf_r+0x1b8>
 8008622:	2300      	movs	r3, #0
 8008624:	f04f 32ff 	mov.w	r2, #4294967295
 8008628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800862c:	9304      	str	r3, [sp, #16]
 800862e:	9307      	str	r3, [sp, #28]
 8008630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008634:	931a      	str	r3, [sp, #104]	; 0x68
 8008636:	462f      	mov	r7, r5
 8008638:	2205      	movs	r2, #5
 800863a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800863e:	4850      	ldr	r0, [pc, #320]	; (8008780 <_svfiprintf_r+0x1dc>)
 8008640:	f000 fdca 	bl	80091d8 <memchr>
 8008644:	9b04      	ldr	r3, [sp, #16]
 8008646:	b9d0      	cbnz	r0, 800867e <_svfiprintf_r+0xda>
 8008648:	06d9      	lsls	r1, r3, #27
 800864a:	bf44      	itt	mi
 800864c:	2220      	movmi	r2, #32
 800864e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008652:	071a      	lsls	r2, r3, #28
 8008654:	bf44      	itt	mi
 8008656:	222b      	movmi	r2, #43	; 0x2b
 8008658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800865c:	782a      	ldrb	r2, [r5, #0]
 800865e:	2a2a      	cmp	r2, #42	; 0x2a
 8008660:	d015      	beq.n	800868e <_svfiprintf_r+0xea>
 8008662:	462f      	mov	r7, r5
 8008664:	2000      	movs	r0, #0
 8008666:	250a      	movs	r5, #10
 8008668:	9a07      	ldr	r2, [sp, #28]
 800866a:	4639      	mov	r1, r7
 800866c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008670:	3b30      	subs	r3, #48	; 0x30
 8008672:	2b09      	cmp	r3, #9
 8008674:	d94d      	bls.n	8008712 <_svfiprintf_r+0x16e>
 8008676:	b1b8      	cbz	r0, 80086a8 <_svfiprintf_r+0x104>
 8008678:	e00f      	b.n	800869a <_svfiprintf_r+0xf6>
 800867a:	462f      	mov	r7, r5
 800867c:	e7b8      	b.n	80085f0 <_svfiprintf_r+0x4c>
 800867e:	4a40      	ldr	r2, [pc, #256]	; (8008780 <_svfiprintf_r+0x1dc>)
 8008680:	463d      	mov	r5, r7
 8008682:	1a80      	subs	r0, r0, r2
 8008684:	fa0b f000 	lsl.w	r0, fp, r0
 8008688:	4318      	orrs	r0, r3
 800868a:	9004      	str	r0, [sp, #16]
 800868c:	e7d3      	b.n	8008636 <_svfiprintf_r+0x92>
 800868e:	9a03      	ldr	r2, [sp, #12]
 8008690:	1d11      	adds	r1, r2, #4
 8008692:	6812      	ldr	r2, [r2, #0]
 8008694:	9103      	str	r1, [sp, #12]
 8008696:	2a00      	cmp	r2, #0
 8008698:	db01      	blt.n	800869e <_svfiprintf_r+0xfa>
 800869a:	9207      	str	r2, [sp, #28]
 800869c:	e004      	b.n	80086a8 <_svfiprintf_r+0x104>
 800869e:	4252      	negs	r2, r2
 80086a0:	f043 0302 	orr.w	r3, r3, #2
 80086a4:	9207      	str	r2, [sp, #28]
 80086a6:	9304      	str	r3, [sp, #16]
 80086a8:	783b      	ldrb	r3, [r7, #0]
 80086aa:	2b2e      	cmp	r3, #46	; 0x2e
 80086ac:	d10c      	bne.n	80086c8 <_svfiprintf_r+0x124>
 80086ae:	787b      	ldrb	r3, [r7, #1]
 80086b0:	2b2a      	cmp	r3, #42	; 0x2a
 80086b2:	d133      	bne.n	800871c <_svfiprintf_r+0x178>
 80086b4:	9b03      	ldr	r3, [sp, #12]
 80086b6:	3702      	adds	r7, #2
 80086b8:	1d1a      	adds	r2, r3, #4
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	9203      	str	r2, [sp, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	bfb8      	it	lt
 80086c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80086c6:	9305      	str	r3, [sp, #20]
 80086c8:	4d2e      	ldr	r5, [pc, #184]	; (8008784 <_svfiprintf_r+0x1e0>)
 80086ca:	2203      	movs	r2, #3
 80086cc:	7839      	ldrb	r1, [r7, #0]
 80086ce:	4628      	mov	r0, r5
 80086d0:	f000 fd82 	bl	80091d8 <memchr>
 80086d4:	b138      	cbz	r0, 80086e6 <_svfiprintf_r+0x142>
 80086d6:	2340      	movs	r3, #64	; 0x40
 80086d8:	1b40      	subs	r0, r0, r5
 80086da:	fa03 f000 	lsl.w	r0, r3, r0
 80086de:	9b04      	ldr	r3, [sp, #16]
 80086e0:	3701      	adds	r7, #1
 80086e2:	4303      	orrs	r3, r0
 80086e4:	9304      	str	r3, [sp, #16]
 80086e6:	7839      	ldrb	r1, [r7, #0]
 80086e8:	2206      	movs	r2, #6
 80086ea:	4827      	ldr	r0, [pc, #156]	; (8008788 <_svfiprintf_r+0x1e4>)
 80086ec:	1c7e      	adds	r6, r7, #1
 80086ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086f2:	f000 fd71 	bl	80091d8 <memchr>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d038      	beq.n	800876c <_svfiprintf_r+0x1c8>
 80086fa:	4b24      	ldr	r3, [pc, #144]	; (800878c <_svfiprintf_r+0x1e8>)
 80086fc:	bb13      	cbnz	r3, 8008744 <_svfiprintf_r+0x1a0>
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	3307      	adds	r3, #7
 8008702:	f023 0307 	bic.w	r3, r3, #7
 8008706:	3308      	adds	r3, #8
 8008708:	9303      	str	r3, [sp, #12]
 800870a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800870c:	444b      	add	r3, r9
 800870e:	9309      	str	r3, [sp, #36]	; 0x24
 8008710:	e76d      	b.n	80085ee <_svfiprintf_r+0x4a>
 8008712:	fb05 3202 	mla	r2, r5, r2, r3
 8008716:	2001      	movs	r0, #1
 8008718:	460f      	mov	r7, r1
 800871a:	e7a6      	b.n	800866a <_svfiprintf_r+0xc6>
 800871c:	2300      	movs	r3, #0
 800871e:	250a      	movs	r5, #10
 8008720:	4619      	mov	r1, r3
 8008722:	3701      	adds	r7, #1
 8008724:	9305      	str	r3, [sp, #20]
 8008726:	4638      	mov	r0, r7
 8008728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800872c:	3a30      	subs	r2, #48	; 0x30
 800872e:	2a09      	cmp	r2, #9
 8008730:	d903      	bls.n	800873a <_svfiprintf_r+0x196>
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0c8      	beq.n	80086c8 <_svfiprintf_r+0x124>
 8008736:	9105      	str	r1, [sp, #20]
 8008738:	e7c6      	b.n	80086c8 <_svfiprintf_r+0x124>
 800873a:	fb05 2101 	mla	r1, r5, r1, r2
 800873e:	2301      	movs	r3, #1
 8008740:	4607      	mov	r7, r0
 8008742:	e7f0      	b.n	8008726 <_svfiprintf_r+0x182>
 8008744:	ab03      	add	r3, sp, #12
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	4622      	mov	r2, r4
 800874a:	4b11      	ldr	r3, [pc, #68]	; (8008790 <_svfiprintf_r+0x1ec>)
 800874c:	a904      	add	r1, sp, #16
 800874e:	4640      	mov	r0, r8
 8008750:	f3af 8000 	nop.w
 8008754:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008758:	4681      	mov	r9, r0
 800875a:	d1d6      	bne.n	800870a <_svfiprintf_r+0x166>
 800875c:	89a3      	ldrh	r3, [r4, #12]
 800875e:	065b      	lsls	r3, r3, #25
 8008760:	f53f af35 	bmi.w	80085ce <_svfiprintf_r+0x2a>
 8008764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008766:	b01d      	add	sp, #116	; 0x74
 8008768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876c:	ab03      	add	r3, sp, #12
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	4622      	mov	r2, r4
 8008772:	4b07      	ldr	r3, [pc, #28]	; (8008790 <_svfiprintf_r+0x1ec>)
 8008774:	a904      	add	r1, sp, #16
 8008776:	4640      	mov	r0, r8
 8008778:	f000 f9c0 	bl	8008afc <_printf_i>
 800877c:	e7ea      	b.n	8008754 <_svfiprintf_r+0x1b0>
 800877e:	bf00      	nop
 8008780:	08009504 	.word	0x08009504
 8008784:	0800950a 	.word	0x0800950a
 8008788:	0800950e 	.word	0x0800950e
 800878c:	00000000 	.word	0x00000000
 8008790:	080084f1 	.word	0x080084f1

08008794 <__sfputc_r>:
 8008794:	6893      	ldr	r3, [r2, #8]
 8008796:	b410      	push	{r4}
 8008798:	3b01      	subs	r3, #1
 800879a:	2b00      	cmp	r3, #0
 800879c:	6093      	str	r3, [r2, #8]
 800879e:	da07      	bge.n	80087b0 <__sfputc_r+0x1c>
 80087a0:	6994      	ldr	r4, [r2, #24]
 80087a2:	42a3      	cmp	r3, r4
 80087a4:	db01      	blt.n	80087aa <__sfputc_r+0x16>
 80087a6:	290a      	cmp	r1, #10
 80087a8:	d102      	bne.n	80087b0 <__sfputc_r+0x1c>
 80087aa:	bc10      	pop	{r4}
 80087ac:	f000 bb0c 	b.w	8008dc8 <__swbuf_r>
 80087b0:	6813      	ldr	r3, [r2, #0]
 80087b2:	1c58      	adds	r0, r3, #1
 80087b4:	6010      	str	r0, [r2, #0]
 80087b6:	7019      	strb	r1, [r3, #0]
 80087b8:	4608      	mov	r0, r1
 80087ba:	bc10      	pop	{r4}
 80087bc:	4770      	bx	lr

080087be <__sfputs_r>:
 80087be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c0:	4606      	mov	r6, r0
 80087c2:	460f      	mov	r7, r1
 80087c4:	4614      	mov	r4, r2
 80087c6:	18d5      	adds	r5, r2, r3
 80087c8:	42ac      	cmp	r4, r5
 80087ca:	d101      	bne.n	80087d0 <__sfputs_r+0x12>
 80087cc:	2000      	movs	r0, #0
 80087ce:	e007      	b.n	80087e0 <__sfputs_r+0x22>
 80087d0:	463a      	mov	r2, r7
 80087d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d6:	4630      	mov	r0, r6
 80087d8:	f7ff ffdc 	bl	8008794 <__sfputc_r>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d1f3      	bne.n	80087c8 <__sfputs_r+0xa>
 80087e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087e4 <_vfiprintf_r>:
 80087e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	460c      	mov	r4, r1
 80087ea:	b09d      	sub	sp, #116	; 0x74
 80087ec:	4617      	mov	r7, r2
 80087ee:	461d      	mov	r5, r3
 80087f0:	4606      	mov	r6, r0
 80087f2:	b118      	cbz	r0, 80087fc <_vfiprintf_r+0x18>
 80087f4:	6983      	ldr	r3, [r0, #24]
 80087f6:	b90b      	cbnz	r3, 80087fc <_vfiprintf_r+0x18>
 80087f8:	f7ff fd96 	bl	8008328 <__sinit>
 80087fc:	4b7c      	ldr	r3, [pc, #496]	; (80089f0 <_vfiprintf_r+0x20c>)
 80087fe:	429c      	cmp	r4, r3
 8008800:	d158      	bne.n	80088b4 <_vfiprintf_r+0xd0>
 8008802:	6874      	ldr	r4, [r6, #4]
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	0718      	lsls	r0, r3, #28
 8008808:	d55e      	bpl.n	80088c8 <_vfiprintf_r+0xe4>
 800880a:	6923      	ldr	r3, [r4, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d05b      	beq.n	80088c8 <_vfiprintf_r+0xe4>
 8008810:	2300      	movs	r3, #0
 8008812:	9309      	str	r3, [sp, #36]	; 0x24
 8008814:	2320      	movs	r3, #32
 8008816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800881a:	2330      	movs	r3, #48	; 0x30
 800881c:	f04f 0b01 	mov.w	fp, #1
 8008820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008824:	9503      	str	r5, [sp, #12]
 8008826:	46b8      	mov	r8, r7
 8008828:	4645      	mov	r5, r8
 800882a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800882e:	b10b      	cbz	r3, 8008834 <_vfiprintf_r+0x50>
 8008830:	2b25      	cmp	r3, #37	; 0x25
 8008832:	d154      	bne.n	80088de <_vfiprintf_r+0xfa>
 8008834:	ebb8 0a07 	subs.w	sl, r8, r7
 8008838:	d00b      	beq.n	8008852 <_vfiprintf_r+0x6e>
 800883a:	4653      	mov	r3, sl
 800883c:	463a      	mov	r2, r7
 800883e:	4621      	mov	r1, r4
 8008840:	4630      	mov	r0, r6
 8008842:	f7ff ffbc 	bl	80087be <__sfputs_r>
 8008846:	3001      	adds	r0, #1
 8008848:	f000 80c2 	beq.w	80089d0 <_vfiprintf_r+0x1ec>
 800884c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884e:	4453      	add	r3, sl
 8008850:	9309      	str	r3, [sp, #36]	; 0x24
 8008852:	f898 3000 	ldrb.w	r3, [r8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 80ba 	beq.w	80089d0 <_vfiprintf_r+0x1ec>
 800885c:	2300      	movs	r3, #0
 800885e:	f04f 32ff 	mov.w	r2, #4294967295
 8008862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008866:	9304      	str	r3, [sp, #16]
 8008868:	9307      	str	r3, [sp, #28]
 800886a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800886e:	931a      	str	r3, [sp, #104]	; 0x68
 8008870:	46a8      	mov	r8, r5
 8008872:	2205      	movs	r2, #5
 8008874:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008878:	485e      	ldr	r0, [pc, #376]	; (80089f4 <_vfiprintf_r+0x210>)
 800887a:	f000 fcad 	bl	80091d8 <memchr>
 800887e:	9b04      	ldr	r3, [sp, #16]
 8008880:	bb78      	cbnz	r0, 80088e2 <_vfiprintf_r+0xfe>
 8008882:	06d9      	lsls	r1, r3, #27
 8008884:	bf44      	itt	mi
 8008886:	2220      	movmi	r2, #32
 8008888:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800888c:	071a      	lsls	r2, r3, #28
 800888e:	bf44      	itt	mi
 8008890:	222b      	movmi	r2, #43	; 0x2b
 8008892:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008896:	782a      	ldrb	r2, [r5, #0]
 8008898:	2a2a      	cmp	r2, #42	; 0x2a
 800889a:	d02a      	beq.n	80088f2 <_vfiprintf_r+0x10e>
 800889c:	46a8      	mov	r8, r5
 800889e:	2000      	movs	r0, #0
 80088a0:	250a      	movs	r5, #10
 80088a2:	9a07      	ldr	r2, [sp, #28]
 80088a4:	4641      	mov	r1, r8
 80088a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088aa:	3b30      	subs	r3, #48	; 0x30
 80088ac:	2b09      	cmp	r3, #9
 80088ae:	d969      	bls.n	8008984 <_vfiprintf_r+0x1a0>
 80088b0:	b360      	cbz	r0, 800890c <_vfiprintf_r+0x128>
 80088b2:	e024      	b.n	80088fe <_vfiprintf_r+0x11a>
 80088b4:	4b50      	ldr	r3, [pc, #320]	; (80089f8 <_vfiprintf_r+0x214>)
 80088b6:	429c      	cmp	r4, r3
 80088b8:	d101      	bne.n	80088be <_vfiprintf_r+0xda>
 80088ba:	68b4      	ldr	r4, [r6, #8]
 80088bc:	e7a2      	b.n	8008804 <_vfiprintf_r+0x20>
 80088be:	4b4f      	ldr	r3, [pc, #316]	; (80089fc <_vfiprintf_r+0x218>)
 80088c0:	429c      	cmp	r4, r3
 80088c2:	bf08      	it	eq
 80088c4:	68f4      	ldreq	r4, [r6, #12]
 80088c6:	e79d      	b.n	8008804 <_vfiprintf_r+0x20>
 80088c8:	4621      	mov	r1, r4
 80088ca:	4630      	mov	r0, r6
 80088cc:	f000 fae0 	bl	8008e90 <__swsetup_r>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d09d      	beq.n	8008810 <_vfiprintf_r+0x2c>
 80088d4:	f04f 30ff 	mov.w	r0, #4294967295
 80088d8:	b01d      	add	sp, #116	; 0x74
 80088da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088de:	46a8      	mov	r8, r5
 80088e0:	e7a2      	b.n	8008828 <_vfiprintf_r+0x44>
 80088e2:	4a44      	ldr	r2, [pc, #272]	; (80089f4 <_vfiprintf_r+0x210>)
 80088e4:	4645      	mov	r5, r8
 80088e6:	1a80      	subs	r0, r0, r2
 80088e8:	fa0b f000 	lsl.w	r0, fp, r0
 80088ec:	4318      	orrs	r0, r3
 80088ee:	9004      	str	r0, [sp, #16]
 80088f0:	e7be      	b.n	8008870 <_vfiprintf_r+0x8c>
 80088f2:	9a03      	ldr	r2, [sp, #12]
 80088f4:	1d11      	adds	r1, r2, #4
 80088f6:	6812      	ldr	r2, [r2, #0]
 80088f8:	9103      	str	r1, [sp, #12]
 80088fa:	2a00      	cmp	r2, #0
 80088fc:	db01      	blt.n	8008902 <_vfiprintf_r+0x11e>
 80088fe:	9207      	str	r2, [sp, #28]
 8008900:	e004      	b.n	800890c <_vfiprintf_r+0x128>
 8008902:	4252      	negs	r2, r2
 8008904:	f043 0302 	orr.w	r3, r3, #2
 8008908:	9207      	str	r2, [sp, #28]
 800890a:	9304      	str	r3, [sp, #16]
 800890c:	f898 3000 	ldrb.w	r3, [r8]
 8008910:	2b2e      	cmp	r3, #46	; 0x2e
 8008912:	d10e      	bne.n	8008932 <_vfiprintf_r+0x14e>
 8008914:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008918:	2b2a      	cmp	r3, #42	; 0x2a
 800891a:	d138      	bne.n	800898e <_vfiprintf_r+0x1aa>
 800891c:	9b03      	ldr	r3, [sp, #12]
 800891e:	f108 0802 	add.w	r8, r8, #2
 8008922:	1d1a      	adds	r2, r3, #4
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	9203      	str	r2, [sp, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	bfb8      	it	lt
 800892c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008930:	9305      	str	r3, [sp, #20]
 8008932:	4d33      	ldr	r5, [pc, #204]	; (8008a00 <_vfiprintf_r+0x21c>)
 8008934:	2203      	movs	r2, #3
 8008936:	f898 1000 	ldrb.w	r1, [r8]
 800893a:	4628      	mov	r0, r5
 800893c:	f000 fc4c 	bl	80091d8 <memchr>
 8008940:	b140      	cbz	r0, 8008954 <_vfiprintf_r+0x170>
 8008942:	2340      	movs	r3, #64	; 0x40
 8008944:	1b40      	subs	r0, r0, r5
 8008946:	fa03 f000 	lsl.w	r0, r3, r0
 800894a:	9b04      	ldr	r3, [sp, #16]
 800894c:	f108 0801 	add.w	r8, r8, #1
 8008950:	4303      	orrs	r3, r0
 8008952:	9304      	str	r3, [sp, #16]
 8008954:	f898 1000 	ldrb.w	r1, [r8]
 8008958:	2206      	movs	r2, #6
 800895a:	482a      	ldr	r0, [pc, #168]	; (8008a04 <_vfiprintf_r+0x220>)
 800895c:	f108 0701 	add.w	r7, r8, #1
 8008960:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008964:	f000 fc38 	bl	80091d8 <memchr>
 8008968:	2800      	cmp	r0, #0
 800896a:	d037      	beq.n	80089dc <_vfiprintf_r+0x1f8>
 800896c:	4b26      	ldr	r3, [pc, #152]	; (8008a08 <_vfiprintf_r+0x224>)
 800896e:	bb1b      	cbnz	r3, 80089b8 <_vfiprintf_r+0x1d4>
 8008970:	9b03      	ldr	r3, [sp, #12]
 8008972:	3307      	adds	r3, #7
 8008974:	f023 0307 	bic.w	r3, r3, #7
 8008978:	3308      	adds	r3, #8
 800897a:	9303      	str	r3, [sp, #12]
 800897c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897e:	444b      	add	r3, r9
 8008980:	9309      	str	r3, [sp, #36]	; 0x24
 8008982:	e750      	b.n	8008826 <_vfiprintf_r+0x42>
 8008984:	fb05 3202 	mla	r2, r5, r2, r3
 8008988:	2001      	movs	r0, #1
 800898a:	4688      	mov	r8, r1
 800898c:	e78a      	b.n	80088a4 <_vfiprintf_r+0xc0>
 800898e:	2300      	movs	r3, #0
 8008990:	250a      	movs	r5, #10
 8008992:	4619      	mov	r1, r3
 8008994:	f108 0801 	add.w	r8, r8, #1
 8008998:	9305      	str	r3, [sp, #20]
 800899a:	4640      	mov	r0, r8
 800899c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089a0:	3a30      	subs	r2, #48	; 0x30
 80089a2:	2a09      	cmp	r2, #9
 80089a4:	d903      	bls.n	80089ae <_vfiprintf_r+0x1ca>
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d0c3      	beq.n	8008932 <_vfiprintf_r+0x14e>
 80089aa:	9105      	str	r1, [sp, #20]
 80089ac:	e7c1      	b.n	8008932 <_vfiprintf_r+0x14e>
 80089ae:	fb05 2101 	mla	r1, r5, r1, r2
 80089b2:	2301      	movs	r3, #1
 80089b4:	4680      	mov	r8, r0
 80089b6:	e7f0      	b.n	800899a <_vfiprintf_r+0x1b6>
 80089b8:	ab03      	add	r3, sp, #12
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	4622      	mov	r2, r4
 80089be:	4b13      	ldr	r3, [pc, #76]	; (8008a0c <_vfiprintf_r+0x228>)
 80089c0:	a904      	add	r1, sp, #16
 80089c2:	4630      	mov	r0, r6
 80089c4:	f3af 8000 	nop.w
 80089c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80089cc:	4681      	mov	r9, r0
 80089ce:	d1d5      	bne.n	800897c <_vfiprintf_r+0x198>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	065b      	lsls	r3, r3, #25
 80089d4:	f53f af7e 	bmi.w	80088d4 <_vfiprintf_r+0xf0>
 80089d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089da:	e77d      	b.n	80088d8 <_vfiprintf_r+0xf4>
 80089dc:	ab03      	add	r3, sp, #12
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	4622      	mov	r2, r4
 80089e2:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <_vfiprintf_r+0x228>)
 80089e4:	a904      	add	r1, sp, #16
 80089e6:	4630      	mov	r0, r6
 80089e8:	f000 f888 	bl	8008afc <_printf_i>
 80089ec:	e7ec      	b.n	80089c8 <_vfiprintf_r+0x1e4>
 80089ee:	bf00      	nop
 80089f0:	080094c4 	.word	0x080094c4
 80089f4:	08009504 	.word	0x08009504
 80089f8:	080094e4 	.word	0x080094e4
 80089fc:	080094a4 	.word	0x080094a4
 8008a00:	0800950a 	.word	0x0800950a
 8008a04:	0800950e 	.word	0x0800950e
 8008a08:	00000000 	.word	0x00000000
 8008a0c:	080087bf 	.word	0x080087bf

08008a10 <_printf_common>:
 8008a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a14:	4691      	mov	r9, r2
 8008a16:	461f      	mov	r7, r3
 8008a18:	688a      	ldr	r2, [r1, #8]
 8008a1a:	690b      	ldr	r3, [r1, #16]
 8008a1c:	4606      	mov	r6, r0
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	bfb8      	it	lt
 8008a22:	4613      	movlt	r3, r2
 8008a24:	f8c9 3000 	str.w	r3, [r9]
 8008a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a32:	b112      	cbz	r2, 8008a3a <_printf_common+0x2a>
 8008a34:	3301      	adds	r3, #1
 8008a36:	f8c9 3000 	str.w	r3, [r9]
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	0699      	lsls	r1, r3, #26
 8008a3e:	bf42      	ittt	mi
 8008a40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008a44:	3302      	addmi	r3, #2
 8008a46:	f8c9 3000 	strmi.w	r3, [r9]
 8008a4a:	6825      	ldr	r5, [r4, #0]
 8008a4c:	f015 0506 	ands.w	r5, r5, #6
 8008a50:	d107      	bne.n	8008a62 <_printf_common+0x52>
 8008a52:	f104 0a19 	add.w	sl, r4, #25
 8008a56:	68e3      	ldr	r3, [r4, #12]
 8008a58:	f8d9 2000 	ldr.w	r2, [r9]
 8008a5c:	1a9b      	subs	r3, r3, r2
 8008a5e:	42ab      	cmp	r3, r5
 8008a60:	dc29      	bgt.n	8008ab6 <_printf_common+0xa6>
 8008a62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a66:	6822      	ldr	r2, [r4, #0]
 8008a68:	3300      	adds	r3, #0
 8008a6a:	bf18      	it	ne
 8008a6c:	2301      	movne	r3, #1
 8008a6e:	0692      	lsls	r2, r2, #26
 8008a70:	d42e      	bmi.n	8008ad0 <_printf_common+0xc0>
 8008a72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a76:	4639      	mov	r1, r7
 8008a78:	4630      	mov	r0, r6
 8008a7a:	47c0      	blx	r8
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d021      	beq.n	8008ac4 <_printf_common+0xb4>
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	68e5      	ldr	r5, [r4, #12]
 8008a84:	f003 0306 	and.w	r3, r3, #6
 8008a88:	2b04      	cmp	r3, #4
 8008a8a:	bf18      	it	ne
 8008a8c:	2500      	movne	r5, #0
 8008a8e:	f8d9 2000 	ldr.w	r2, [r9]
 8008a92:	f04f 0900 	mov.w	r9, #0
 8008a96:	bf08      	it	eq
 8008a98:	1aad      	subeq	r5, r5, r2
 8008a9a:	68a3      	ldr	r3, [r4, #8]
 8008a9c:	6922      	ldr	r2, [r4, #16]
 8008a9e:	bf08      	it	eq
 8008aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	bfc4      	itt	gt
 8008aa8:	1a9b      	subgt	r3, r3, r2
 8008aaa:	18ed      	addgt	r5, r5, r3
 8008aac:	341a      	adds	r4, #26
 8008aae:	454d      	cmp	r5, r9
 8008ab0:	d11a      	bne.n	8008ae8 <_printf_common+0xd8>
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	e008      	b.n	8008ac8 <_printf_common+0xb8>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	4652      	mov	r2, sl
 8008aba:	4639      	mov	r1, r7
 8008abc:	4630      	mov	r0, r6
 8008abe:	47c0      	blx	r8
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d103      	bne.n	8008acc <_printf_common+0xbc>
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008acc:	3501      	adds	r5, #1
 8008ace:	e7c2      	b.n	8008a56 <_printf_common+0x46>
 8008ad0:	2030      	movs	r0, #48	; 0x30
 8008ad2:	18e1      	adds	r1, r4, r3
 8008ad4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ad8:	1c5a      	adds	r2, r3, #1
 8008ada:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ade:	4422      	add	r2, r4
 8008ae0:	3302      	adds	r3, #2
 8008ae2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ae6:	e7c4      	b.n	8008a72 <_printf_common+0x62>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	4622      	mov	r2, r4
 8008aec:	4639      	mov	r1, r7
 8008aee:	4630      	mov	r0, r6
 8008af0:	47c0      	blx	r8
 8008af2:	3001      	adds	r0, #1
 8008af4:	d0e6      	beq.n	8008ac4 <_printf_common+0xb4>
 8008af6:	f109 0901 	add.w	r9, r9, #1
 8008afa:	e7d8      	b.n	8008aae <_printf_common+0x9e>

08008afc <_printf_i>:
 8008afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008b04:	460c      	mov	r4, r1
 8008b06:	7e09      	ldrb	r1, [r1, #24]
 8008b08:	b085      	sub	sp, #20
 8008b0a:	296e      	cmp	r1, #110	; 0x6e
 8008b0c:	4617      	mov	r7, r2
 8008b0e:	4606      	mov	r6, r0
 8008b10:	4698      	mov	r8, r3
 8008b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b14:	f000 80b3 	beq.w	8008c7e <_printf_i+0x182>
 8008b18:	d822      	bhi.n	8008b60 <_printf_i+0x64>
 8008b1a:	2963      	cmp	r1, #99	; 0x63
 8008b1c:	d036      	beq.n	8008b8c <_printf_i+0x90>
 8008b1e:	d80a      	bhi.n	8008b36 <_printf_i+0x3a>
 8008b20:	2900      	cmp	r1, #0
 8008b22:	f000 80b9 	beq.w	8008c98 <_printf_i+0x19c>
 8008b26:	2958      	cmp	r1, #88	; 0x58
 8008b28:	f000 8083 	beq.w	8008c32 <_printf_i+0x136>
 8008b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008b34:	e032      	b.n	8008b9c <_printf_i+0xa0>
 8008b36:	2964      	cmp	r1, #100	; 0x64
 8008b38:	d001      	beq.n	8008b3e <_printf_i+0x42>
 8008b3a:	2969      	cmp	r1, #105	; 0x69
 8008b3c:	d1f6      	bne.n	8008b2c <_printf_i+0x30>
 8008b3e:	6820      	ldr	r0, [r4, #0]
 8008b40:	6813      	ldr	r3, [r2, #0]
 8008b42:	0605      	lsls	r5, r0, #24
 8008b44:	f103 0104 	add.w	r1, r3, #4
 8008b48:	d52a      	bpl.n	8008ba0 <_printf_i+0xa4>
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6011      	str	r1, [r2, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	da03      	bge.n	8008b5a <_printf_i+0x5e>
 8008b52:	222d      	movs	r2, #45	; 0x2d
 8008b54:	425b      	negs	r3, r3
 8008b56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008b5a:	486f      	ldr	r0, [pc, #444]	; (8008d18 <_printf_i+0x21c>)
 8008b5c:	220a      	movs	r2, #10
 8008b5e:	e039      	b.n	8008bd4 <_printf_i+0xd8>
 8008b60:	2973      	cmp	r1, #115	; 0x73
 8008b62:	f000 809d 	beq.w	8008ca0 <_printf_i+0x1a4>
 8008b66:	d808      	bhi.n	8008b7a <_printf_i+0x7e>
 8008b68:	296f      	cmp	r1, #111	; 0x6f
 8008b6a:	d020      	beq.n	8008bae <_printf_i+0xb2>
 8008b6c:	2970      	cmp	r1, #112	; 0x70
 8008b6e:	d1dd      	bne.n	8008b2c <_printf_i+0x30>
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	f043 0320 	orr.w	r3, r3, #32
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	e003      	b.n	8008b82 <_printf_i+0x86>
 8008b7a:	2975      	cmp	r1, #117	; 0x75
 8008b7c:	d017      	beq.n	8008bae <_printf_i+0xb2>
 8008b7e:	2978      	cmp	r1, #120	; 0x78
 8008b80:	d1d4      	bne.n	8008b2c <_printf_i+0x30>
 8008b82:	2378      	movs	r3, #120	; 0x78
 8008b84:	4865      	ldr	r0, [pc, #404]	; (8008d1c <_printf_i+0x220>)
 8008b86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b8a:	e055      	b.n	8008c38 <_printf_i+0x13c>
 8008b8c:	6813      	ldr	r3, [r2, #0]
 8008b8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b92:	1d19      	adds	r1, r3, #4
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6011      	str	r1, [r2, #0]
 8008b98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e08c      	b.n	8008cba <_printf_i+0x1be>
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ba6:	6011      	str	r1, [r2, #0]
 8008ba8:	bf18      	it	ne
 8008baa:	b21b      	sxthne	r3, r3
 8008bac:	e7cf      	b.n	8008b4e <_printf_i+0x52>
 8008bae:	6813      	ldr	r3, [r2, #0]
 8008bb0:	6825      	ldr	r5, [r4, #0]
 8008bb2:	1d18      	adds	r0, r3, #4
 8008bb4:	6010      	str	r0, [r2, #0]
 8008bb6:	0628      	lsls	r0, r5, #24
 8008bb8:	d501      	bpl.n	8008bbe <_printf_i+0xc2>
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	e002      	b.n	8008bc4 <_printf_i+0xc8>
 8008bbe:	0668      	lsls	r0, r5, #25
 8008bc0:	d5fb      	bpl.n	8008bba <_printf_i+0xbe>
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	296f      	cmp	r1, #111	; 0x6f
 8008bc6:	bf14      	ite	ne
 8008bc8:	220a      	movne	r2, #10
 8008bca:	2208      	moveq	r2, #8
 8008bcc:	4852      	ldr	r0, [pc, #328]	; (8008d18 <_printf_i+0x21c>)
 8008bce:	2100      	movs	r1, #0
 8008bd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bd4:	6865      	ldr	r5, [r4, #4]
 8008bd6:	2d00      	cmp	r5, #0
 8008bd8:	60a5      	str	r5, [r4, #8]
 8008bda:	f2c0 8095 	blt.w	8008d08 <_printf_i+0x20c>
 8008bde:	6821      	ldr	r1, [r4, #0]
 8008be0:	f021 0104 	bic.w	r1, r1, #4
 8008be4:	6021      	str	r1, [r4, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d13d      	bne.n	8008c66 <_printf_i+0x16a>
 8008bea:	2d00      	cmp	r5, #0
 8008bec:	f040 808e 	bne.w	8008d0c <_printf_i+0x210>
 8008bf0:	4665      	mov	r5, ip
 8008bf2:	2a08      	cmp	r2, #8
 8008bf4:	d10b      	bne.n	8008c0e <_printf_i+0x112>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	07db      	lsls	r3, r3, #31
 8008bfa:	d508      	bpl.n	8008c0e <_printf_i+0x112>
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	6862      	ldr	r2, [r4, #4]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	bfde      	ittt	le
 8008c04:	2330      	movle	r3, #48	; 0x30
 8008c06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c0e:	ebac 0305 	sub.w	r3, ip, r5
 8008c12:	6123      	str	r3, [r4, #16]
 8008c14:	f8cd 8000 	str.w	r8, [sp]
 8008c18:	463b      	mov	r3, r7
 8008c1a:	aa03      	add	r2, sp, #12
 8008c1c:	4621      	mov	r1, r4
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7ff fef6 	bl	8008a10 <_printf_common>
 8008c24:	3001      	adds	r0, #1
 8008c26:	d14d      	bne.n	8008cc4 <_printf_i+0x1c8>
 8008c28:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2c:	b005      	add	sp, #20
 8008c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c32:	4839      	ldr	r0, [pc, #228]	; (8008d18 <_printf_i+0x21c>)
 8008c34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008c38:	6813      	ldr	r3, [r2, #0]
 8008c3a:	6821      	ldr	r1, [r4, #0]
 8008c3c:	1d1d      	adds	r5, r3, #4
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6015      	str	r5, [r2, #0]
 8008c42:	060a      	lsls	r2, r1, #24
 8008c44:	d50b      	bpl.n	8008c5e <_printf_i+0x162>
 8008c46:	07ca      	lsls	r2, r1, #31
 8008c48:	bf44      	itt	mi
 8008c4a:	f041 0120 	orrmi.w	r1, r1, #32
 8008c4e:	6021      	strmi	r1, [r4, #0]
 8008c50:	b91b      	cbnz	r3, 8008c5a <_printf_i+0x15e>
 8008c52:	6822      	ldr	r2, [r4, #0]
 8008c54:	f022 0220 	bic.w	r2, r2, #32
 8008c58:	6022      	str	r2, [r4, #0]
 8008c5a:	2210      	movs	r2, #16
 8008c5c:	e7b7      	b.n	8008bce <_printf_i+0xd2>
 8008c5e:	064d      	lsls	r5, r1, #25
 8008c60:	bf48      	it	mi
 8008c62:	b29b      	uxthmi	r3, r3
 8008c64:	e7ef      	b.n	8008c46 <_printf_i+0x14a>
 8008c66:	4665      	mov	r5, ip
 8008c68:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c6c:	fb02 3311 	mls	r3, r2, r1, r3
 8008c70:	5cc3      	ldrb	r3, [r0, r3]
 8008c72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c76:	460b      	mov	r3, r1
 8008c78:	2900      	cmp	r1, #0
 8008c7a:	d1f5      	bne.n	8008c68 <_printf_i+0x16c>
 8008c7c:	e7b9      	b.n	8008bf2 <_printf_i+0xf6>
 8008c7e:	6813      	ldr	r3, [r2, #0]
 8008c80:	6825      	ldr	r5, [r4, #0]
 8008c82:	1d18      	adds	r0, r3, #4
 8008c84:	6961      	ldr	r1, [r4, #20]
 8008c86:	6010      	str	r0, [r2, #0]
 8008c88:	0628      	lsls	r0, r5, #24
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	d501      	bpl.n	8008c92 <_printf_i+0x196>
 8008c8e:	6019      	str	r1, [r3, #0]
 8008c90:	e002      	b.n	8008c98 <_printf_i+0x19c>
 8008c92:	066a      	lsls	r2, r5, #25
 8008c94:	d5fb      	bpl.n	8008c8e <_printf_i+0x192>
 8008c96:	8019      	strh	r1, [r3, #0]
 8008c98:	2300      	movs	r3, #0
 8008c9a:	4665      	mov	r5, ip
 8008c9c:	6123      	str	r3, [r4, #16]
 8008c9e:	e7b9      	b.n	8008c14 <_printf_i+0x118>
 8008ca0:	6813      	ldr	r3, [r2, #0]
 8008ca2:	1d19      	adds	r1, r3, #4
 8008ca4:	6011      	str	r1, [r2, #0]
 8008ca6:	681d      	ldr	r5, [r3, #0]
 8008ca8:	6862      	ldr	r2, [r4, #4]
 8008caa:	2100      	movs	r1, #0
 8008cac:	4628      	mov	r0, r5
 8008cae:	f000 fa93 	bl	80091d8 <memchr>
 8008cb2:	b108      	cbz	r0, 8008cb8 <_printf_i+0x1bc>
 8008cb4:	1b40      	subs	r0, r0, r5
 8008cb6:	6060      	str	r0, [r4, #4]
 8008cb8:	6863      	ldr	r3, [r4, #4]
 8008cba:	6123      	str	r3, [r4, #16]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cc2:	e7a7      	b.n	8008c14 <_printf_i+0x118>
 8008cc4:	6923      	ldr	r3, [r4, #16]
 8008cc6:	462a      	mov	r2, r5
 8008cc8:	4639      	mov	r1, r7
 8008cca:	4630      	mov	r0, r6
 8008ccc:	47c0      	blx	r8
 8008cce:	3001      	adds	r0, #1
 8008cd0:	d0aa      	beq.n	8008c28 <_printf_i+0x12c>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	079b      	lsls	r3, r3, #30
 8008cd6:	d413      	bmi.n	8008d00 <_printf_i+0x204>
 8008cd8:	68e0      	ldr	r0, [r4, #12]
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	4298      	cmp	r0, r3
 8008cde:	bfb8      	it	lt
 8008ce0:	4618      	movlt	r0, r3
 8008ce2:	e7a3      	b.n	8008c2c <_printf_i+0x130>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	464a      	mov	r2, r9
 8008ce8:	4639      	mov	r1, r7
 8008cea:	4630      	mov	r0, r6
 8008cec:	47c0      	blx	r8
 8008cee:	3001      	adds	r0, #1
 8008cf0:	d09a      	beq.n	8008c28 <_printf_i+0x12c>
 8008cf2:	3501      	adds	r5, #1
 8008cf4:	68e3      	ldr	r3, [r4, #12]
 8008cf6:	9a03      	ldr	r2, [sp, #12]
 8008cf8:	1a9b      	subs	r3, r3, r2
 8008cfa:	42ab      	cmp	r3, r5
 8008cfc:	dcf2      	bgt.n	8008ce4 <_printf_i+0x1e8>
 8008cfe:	e7eb      	b.n	8008cd8 <_printf_i+0x1dc>
 8008d00:	2500      	movs	r5, #0
 8008d02:	f104 0919 	add.w	r9, r4, #25
 8008d06:	e7f5      	b.n	8008cf4 <_printf_i+0x1f8>
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1ac      	bne.n	8008c66 <_printf_i+0x16a>
 8008d0c:	7803      	ldrb	r3, [r0, #0]
 8008d0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d16:	e76c      	b.n	8008bf2 <_printf_i+0xf6>
 8008d18:	08009515 	.word	0x08009515
 8008d1c:	08009526 	.word	0x08009526

08008d20 <_sbrk_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	2300      	movs	r3, #0
 8008d24:	4c05      	ldr	r4, [pc, #20]	; (8008d3c <_sbrk_r+0x1c>)
 8008d26:	4605      	mov	r5, r0
 8008d28:	4608      	mov	r0, r1
 8008d2a:	6023      	str	r3, [r4, #0]
 8008d2c:	f7f8 fb00 	bl	8001330 <_sbrk>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d102      	bne.n	8008d3a <_sbrk_r+0x1a>
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	b103      	cbz	r3, 8008d3a <_sbrk_r+0x1a>
 8008d38:	602b      	str	r3, [r5, #0]
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	2000111c 	.word	0x2000111c

08008d40 <__sread>:
 8008d40:	b510      	push	{r4, lr}
 8008d42:	460c      	mov	r4, r1
 8008d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d48:	f000 fae2 	bl	8009310 <_read_r>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	bfab      	itete	ge
 8008d50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d52:	89a3      	ldrhlt	r3, [r4, #12]
 8008d54:	181b      	addge	r3, r3, r0
 8008d56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d5a:	bfac      	ite	ge
 8008d5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d5e:	81a3      	strhlt	r3, [r4, #12]
 8008d60:	bd10      	pop	{r4, pc}

08008d62 <__swrite>:
 8008d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d66:	461f      	mov	r7, r3
 8008d68:	898b      	ldrh	r3, [r1, #12]
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	05db      	lsls	r3, r3, #23
 8008d6e:	460c      	mov	r4, r1
 8008d70:	4616      	mov	r6, r2
 8008d72:	d505      	bpl.n	8008d80 <__swrite+0x1e>
 8008d74:	2302      	movs	r3, #2
 8008d76:	2200      	movs	r2, #0
 8008d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d7c:	f000 f9b6 	bl	80090ec <_lseek_r>
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	4632      	mov	r2, r6
 8008d84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d88:	81a3      	strh	r3, [r4, #12]
 8008d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d8e:	463b      	mov	r3, r7
 8008d90:	4628      	mov	r0, r5
 8008d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d96:	f000 b869 	b.w	8008e6c <_write_r>

08008d9a <__sseek>:
 8008d9a:	b510      	push	{r4, lr}
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da2:	f000 f9a3 	bl	80090ec <_lseek_r>
 8008da6:	1c43      	adds	r3, r0, #1
 8008da8:	89a3      	ldrh	r3, [r4, #12]
 8008daa:	bf15      	itete	ne
 8008dac:	6560      	strne	r0, [r4, #84]	; 0x54
 8008dae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008db2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008db6:	81a3      	strheq	r3, [r4, #12]
 8008db8:	bf18      	it	ne
 8008dba:	81a3      	strhne	r3, [r4, #12]
 8008dbc:	bd10      	pop	{r4, pc}

08008dbe <__sclose>:
 8008dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc2:	f000 b8d3 	b.w	8008f6c <_close_r>
	...

08008dc8 <__swbuf_r>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	460e      	mov	r6, r1
 8008dcc:	4614      	mov	r4, r2
 8008dce:	4605      	mov	r5, r0
 8008dd0:	b118      	cbz	r0, 8008dda <__swbuf_r+0x12>
 8008dd2:	6983      	ldr	r3, [r0, #24]
 8008dd4:	b90b      	cbnz	r3, 8008dda <__swbuf_r+0x12>
 8008dd6:	f7ff faa7 	bl	8008328 <__sinit>
 8008dda:	4b21      	ldr	r3, [pc, #132]	; (8008e60 <__swbuf_r+0x98>)
 8008ddc:	429c      	cmp	r4, r3
 8008dde:	d12a      	bne.n	8008e36 <__swbuf_r+0x6e>
 8008de0:	686c      	ldr	r4, [r5, #4]
 8008de2:	69a3      	ldr	r3, [r4, #24]
 8008de4:	60a3      	str	r3, [r4, #8]
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	071a      	lsls	r2, r3, #28
 8008dea:	d52e      	bpl.n	8008e4a <__swbuf_r+0x82>
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	b363      	cbz	r3, 8008e4a <__swbuf_r+0x82>
 8008df0:	6923      	ldr	r3, [r4, #16]
 8008df2:	6820      	ldr	r0, [r4, #0]
 8008df4:	b2f6      	uxtb	r6, r6
 8008df6:	1ac0      	subs	r0, r0, r3
 8008df8:	6963      	ldr	r3, [r4, #20]
 8008dfa:	4637      	mov	r7, r6
 8008dfc:	4283      	cmp	r3, r0
 8008dfe:	dc04      	bgt.n	8008e0a <__swbuf_r+0x42>
 8008e00:	4621      	mov	r1, r4
 8008e02:	4628      	mov	r0, r5
 8008e04:	f000 f948 	bl	8009098 <_fflush_r>
 8008e08:	bb28      	cbnz	r0, 8008e56 <__swbuf_r+0x8e>
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	60a3      	str	r3, [r4, #8]
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	1c5a      	adds	r2, r3, #1
 8008e16:	6022      	str	r2, [r4, #0]
 8008e18:	701e      	strb	r6, [r3, #0]
 8008e1a:	6963      	ldr	r3, [r4, #20]
 8008e1c:	4283      	cmp	r3, r0
 8008e1e:	d004      	beq.n	8008e2a <__swbuf_r+0x62>
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	07db      	lsls	r3, r3, #31
 8008e24:	d519      	bpl.n	8008e5a <__swbuf_r+0x92>
 8008e26:	2e0a      	cmp	r6, #10
 8008e28:	d117      	bne.n	8008e5a <__swbuf_r+0x92>
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	f000 f933 	bl	8009098 <_fflush_r>
 8008e32:	b190      	cbz	r0, 8008e5a <__swbuf_r+0x92>
 8008e34:	e00f      	b.n	8008e56 <__swbuf_r+0x8e>
 8008e36:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <__swbuf_r+0x9c>)
 8008e38:	429c      	cmp	r4, r3
 8008e3a:	d101      	bne.n	8008e40 <__swbuf_r+0x78>
 8008e3c:	68ac      	ldr	r4, [r5, #8]
 8008e3e:	e7d0      	b.n	8008de2 <__swbuf_r+0x1a>
 8008e40:	4b09      	ldr	r3, [pc, #36]	; (8008e68 <__swbuf_r+0xa0>)
 8008e42:	429c      	cmp	r4, r3
 8008e44:	bf08      	it	eq
 8008e46:	68ec      	ldreq	r4, [r5, #12]
 8008e48:	e7cb      	b.n	8008de2 <__swbuf_r+0x1a>
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	f000 f81f 	bl	8008e90 <__swsetup_r>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d0cc      	beq.n	8008df0 <__swbuf_r+0x28>
 8008e56:	f04f 37ff 	mov.w	r7, #4294967295
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	080094c4 	.word	0x080094c4
 8008e64:	080094e4 	.word	0x080094e4
 8008e68:	080094a4 	.word	0x080094a4

08008e6c <_write_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	4605      	mov	r5, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	4611      	mov	r1, r2
 8008e74:	2200      	movs	r2, #0
 8008e76:	4c05      	ldr	r4, [pc, #20]	; (8008e8c <_write_r+0x20>)
 8008e78:	6022      	str	r2, [r4, #0]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f7f7 fc3a 	bl	80006f4 <_write>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	d102      	bne.n	8008e8a <_write_r+0x1e>
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	b103      	cbz	r3, 8008e8a <_write_r+0x1e>
 8008e88:	602b      	str	r3, [r5, #0]
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	2000111c 	.word	0x2000111c

08008e90 <__swsetup_r>:
 8008e90:	4b32      	ldr	r3, [pc, #200]	; (8008f5c <__swsetup_r+0xcc>)
 8008e92:	b570      	push	{r4, r5, r6, lr}
 8008e94:	681d      	ldr	r5, [r3, #0]
 8008e96:	4606      	mov	r6, r0
 8008e98:	460c      	mov	r4, r1
 8008e9a:	b125      	cbz	r5, 8008ea6 <__swsetup_r+0x16>
 8008e9c:	69ab      	ldr	r3, [r5, #24]
 8008e9e:	b913      	cbnz	r3, 8008ea6 <__swsetup_r+0x16>
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f7ff fa41 	bl	8008328 <__sinit>
 8008ea6:	4b2e      	ldr	r3, [pc, #184]	; (8008f60 <__swsetup_r+0xd0>)
 8008ea8:	429c      	cmp	r4, r3
 8008eaa:	d10f      	bne.n	8008ecc <__swsetup_r+0x3c>
 8008eac:	686c      	ldr	r4, [r5, #4]
 8008eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	0715      	lsls	r5, r2, #28
 8008eb6:	d42c      	bmi.n	8008f12 <__swsetup_r+0x82>
 8008eb8:	06d0      	lsls	r0, r2, #27
 8008eba:	d411      	bmi.n	8008ee0 <__swsetup_r+0x50>
 8008ebc:	2209      	movs	r2, #9
 8008ebe:	6032      	str	r2, [r6, #0]
 8008ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ec4:	81a3      	strh	r3, [r4, #12]
 8008ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eca:	e03e      	b.n	8008f4a <__swsetup_r+0xba>
 8008ecc:	4b25      	ldr	r3, [pc, #148]	; (8008f64 <__swsetup_r+0xd4>)
 8008ece:	429c      	cmp	r4, r3
 8008ed0:	d101      	bne.n	8008ed6 <__swsetup_r+0x46>
 8008ed2:	68ac      	ldr	r4, [r5, #8]
 8008ed4:	e7eb      	b.n	8008eae <__swsetup_r+0x1e>
 8008ed6:	4b24      	ldr	r3, [pc, #144]	; (8008f68 <__swsetup_r+0xd8>)
 8008ed8:	429c      	cmp	r4, r3
 8008eda:	bf08      	it	eq
 8008edc:	68ec      	ldreq	r4, [r5, #12]
 8008ede:	e7e6      	b.n	8008eae <__swsetup_r+0x1e>
 8008ee0:	0751      	lsls	r1, r2, #29
 8008ee2:	d512      	bpl.n	8008f0a <__swsetup_r+0x7a>
 8008ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ee6:	b141      	cbz	r1, 8008efa <__swsetup_r+0x6a>
 8008ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eec:	4299      	cmp	r1, r3
 8008eee:	d002      	beq.n	8008ef6 <__swsetup_r+0x66>
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	f000 f99b 	bl	800922c <_free_r>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	6363      	str	r3, [r4, #52]	; 0x34
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	2300      	movs	r3, #0
 8008f04:	6063      	str	r3, [r4, #4]
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	f043 0308 	orr.w	r3, r3, #8
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	6923      	ldr	r3, [r4, #16]
 8008f14:	b94b      	cbnz	r3, 8008f2a <__swsetup_r+0x9a>
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f20:	d003      	beq.n	8008f2a <__swsetup_r+0x9a>
 8008f22:	4621      	mov	r1, r4
 8008f24:	4630      	mov	r0, r6
 8008f26:	f000 f917 	bl	8009158 <__smakebuf_r>
 8008f2a:	89a2      	ldrh	r2, [r4, #12]
 8008f2c:	f012 0301 	ands.w	r3, r2, #1
 8008f30:	d00c      	beq.n	8008f4c <__swsetup_r+0xbc>
 8008f32:	2300      	movs	r3, #0
 8008f34:	60a3      	str	r3, [r4, #8]
 8008f36:	6963      	ldr	r3, [r4, #20]
 8008f38:	425b      	negs	r3, r3
 8008f3a:	61a3      	str	r3, [r4, #24]
 8008f3c:	6923      	ldr	r3, [r4, #16]
 8008f3e:	b953      	cbnz	r3, 8008f56 <__swsetup_r+0xc6>
 8008f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f44:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008f48:	d1ba      	bne.n	8008ec0 <__swsetup_r+0x30>
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}
 8008f4c:	0792      	lsls	r2, r2, #30
 8008f4e:	bf58      	it	pl
 8008f50:	6963      	ldrpl	r3, [r4, #20]
 8008f52:	60a3      	str	r3, [r4, #8]
 8008f54:	e7f2      	b.n	8008f3c <__swsetup_r+0xac>
 8008f56:	2000      	movs	r0, #0
 8008f58:	e7f7      	b.n	8008f4a <__swsetup_r+0xba>
 8008f5a:	bf00      	nop
 8008f5c:	20000190 	.word	0x20000190
 8008f60:	080094c4 	.word	0x080094c4
 8008f64:	080094e4 	.word	0x080094e4
 8008f68:	080094a4 	.word	0x080094a4

08008f6c <_close_r>:
 8008f6c:	b538      	push	{r3, r4, r5, lr}
 8008f6e:	2300      	movs	r3, #0
 8008f70:	4c05      	ldr	r4, [pc, #20]	; (8008f88 <_close_r+0x1c>)
 8008f72:	4605      	mov	r5, r0
 8008f74:	4608      	mov	r0, r1
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	f7f8 f9a9 	bl	80012ce <_close>
 8008f7c:	1c43      	adds	r3, r0, #1
 8008f7e:	d102      	bne.n	8008f86 <_close_r+0x1a>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	b103      	cbz	r3, 8008f86 <_close_r+0x1a>
 8008f84:	602b      	str	r3, [r5, #0]
 8008f86:	bd38      	pop	{r3, r4, r5, pc}
 8008f88:	2000111c 	.word	0x2000111c

08008f8c <__sflush_r>:
 8008f8c:	898a      	ldrh	r2, [r1, #12]
 8008f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f92:	4605      	mov	r5, r0
 8008f94:	0710      	lsls	r0, r2, #28
 8008f96:	460c      	mov	r4, r1
 8008f98:	d458      	bmi.n	800904c <__sflush_r+0xc0>
 8008f9a:	684b      	ldr	r3, [r1, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	dc05      	bgt.n	8008fac <__sflush_r+0x20>
 8008fa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	dc02      	bgt.n	8008fac <__sflush_r+0x20>
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fae:	2e00      	cmp	r6, #0
 8008fb0:	d0f9      	beq.n	8008fa6 <__sflush_r+0x1a>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fb8:	682f      	ldr	r7, [r5, #0]
 8008fba:	6a21      	ldr	r1, [r4, #32]
 8008fbc:	602b      	str	r3, [r5, #0]
 8008fbe:	d032      	beq.n	8009026 <__sflush_r+0x9a>
 8008fc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	075a      	lsls	r2, r3, #29
 8008fc6:	d505      	bpl.n	8008fd4 <__sflush_r+0x48>
 8008fc8:	6863      	ldr	r3, [r4, #4]
 8008fca:	1ac0      	subs	r0, r0, r3
 8008fcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fce:	b10b      	cbz	r3, 8008fd4 <__sflush_r+0x48>
 8008fd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fd2:	1ac0      	subs	r0, r0, r3
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fda:	6a21      	ldr	r1, [r4, #32]
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b0      	blx	r6
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	d106      	bne.n	8008ff4 <__sflush_r+0x68>
 8008fe6:	6829      	ldr	r1, [r5, #0]
 8008fe8:	291d      	cmp	r1, #29
 8008fea:	d848      	bhi.n	800907e <__sflush_r+0xf2>
 8008fec:	4a29      	ldr	r2, [pc, #164]	; (8009094 <__sflush_r+0x108>)
 8008fee:	40ca      	lsrs	r2, r1
 8008ff0:	07d6      	lsls	r6, r2, #31
 8008ff2:	d544      	bpl.n	800907e <__sflush_r+0xf2>
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	6062      	str	r2, [r4, #4]
 8008ff8:	6922      	ldr	r2, [r4, #16]
 8008ffa:	04d9      	lsls	r1, r3, #19
 8008ffc:	6022      	str	r2, [r4, #0]
 8008ffe:	d504      	bpl.n	800900a <__sflush_r+0x7e>
 8009000:	1c42      	adds	r2, r0, #1
 8009002:	d101      	bne.n	8009008 <__sflush_r+0x7c>
 8009004:	682b      	ldr	r3, [r5, #0]
 8009006:	b903      	cbnz	r3, 800900a <__sflush_r+0x7e>
 8009008:	6560      	str	r0, [r4, #84]	; 0x54
 800900a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800900c:	602f      	str	r7, [r5, #0]
 800900e:	2900      	cmp	r1, #0
 8009010:	d0c9      	beq.n	8008fa6 <__sflush_r+0x1a>
 8009012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009016:	4299      	cmp	r1, r3
 8009018:	d002      	beq.n	8009020 <__sflush_r+0x94>
 800901a:	4628      	mov	r0, r5
 800901c:	f000 f906 	bl	800922c <_free_r>
 8009020:	2000      	movs	r0, #0
 8009022:	6360      	str	r0, [r4, #52]	; 0x34
 8009024:	e7c0      	b.n	8008fa8 <__sflush_r+0x1c>
 8009026:	2301      	movs	r3, #1
 8009028:	4628      	mov	r0, r5
 800902a:	47b0      	blx	r6
 800902c:	1c41      	adds	r1, r0, #1
 800902e:	d1c8      	bne.n	8008fc2 <__sflush_r+0x36>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0c5      	beq.n	8008fc2 <__sflush_r+0x36>
 8009036:	2b1d      	cmp	r3, #29
 8009038:	d001      	beq.n	800903e <__sflush_r+0xb2>
 800903a:	2b16      	cmp	r3, #22
 800903c:	d101      	bne.n	8009042 <__sflush_r+0xb6>
 800903e:	602f      	str	r7, [r5, #0]
 8009040:	e7b1      	b.n	8008fa6 <__sflush_r+0x1a>
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009048:	81a3      	strh	r3, [r4, #12]
 800904a:	e7ad      	b.n	8008fa8 <__sflush_r+0x1c>
 800904c:	690f      	ldr	r7, [r1, #16]
 800904e:	2f00      	cmp	r7, #0
 8009050:	d0a9      	beq.n	8008fa6 <__sflush_r+0x1a>
 8009052:	0793      	lsls	r3, r2, #30
 8009054:	bf18      	it	ne
 8009056:	2300      	movne	r3, #0
 8009058:	680e      	ldr	r6, [r1, #0]
 800905a:	bf08      	it	eq
 800905c:	694b      	ldreq	r3, [r1, #20]
 800905e:	eba6 0807 	sub.w	r8, r6, r7
 8009062:	600f      	str	r7, [r1, #0]
 8009064:	608b      	str	r3, [r1, #8]
 8009066:	f1b8 0f00 	cmp.w	r8, #0
 800906a:	dd9c      	ble.n	8008fa6 <__sflush_r+0x1a>
 800906c:	4643      	mov	r3, r8
 800906e:	463a      	mov	r2, r7
 8009070:	6a21      	ldr	r1, [r4, #32]
 8009072:	4628      	mov	r0, r5
 8009074:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009076:	47b0      	blx	r6
 8009078:	2800      	cmp	r0, #0
 800907a:	dc06      	bgt.n	800908a <__sflush_r+0xfe>
 800907c:	89a3      	ldrh	r3, [r4, #12]
 800907e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009082:	81a3      	strh	r3, [r4, #12]
 8009084:	f04f 30ff 	mov.w	r0, #4294967295
 8009088:	e78e      	b.n	8008fa8 <__sflush_r+0x1c>
 800908a:	4407      	add	r7, r0
 800908c:	eba8 0800 	sub.w	r8, r8, r0
 8009090:	e7e9      	b.n	8009066 <__sflush_r+0xda>
 8009092:	bf00      	nop
 8009094:	20400001 	.word	0x20400001

08009098 <_fflush_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	690b      	ldr	r3, [r1, #16]
 800909c:	4605      	mov	r5, r0
 800909e:	460c      	mov	r4, r1
 80090a0:	b1db      	cbz	r3, 80090da <_fflush_r+0x42>
 80090a2:	b118      	cbz	r0, 80090ac <_fflush_r+0x14>
 80090a4:	6983      	ldr	r3, [r0, #24]
 80090a6:	b90b      	cbnz	r3, 80090ac <_fflush_r+0x14>
 80090a8:	f7ff f93e 	bl	8008328 <__sinit>
 80090ac:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <_fflush_r+0x48>)
 80090ae:	429c      	cmp	r4, r3
 80090b0:	d109      	bne.n	80090c6 <_fflush_r+0x2e>
 80090b2:	686c      	ldr	r4, [r5, #4]
 80090b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b8:	b17b      	cbz	r3, 80090da <_fflush_r+0x42>
 80090ba:	4621      	mov	r1, r4
 80090bc:	4628      	mov	r0, r5
 80090be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090c2:	f7ff bf63 	b.w	8008f8c <__sflush_r>
 80090c6:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <_fflush_r+0x4c>)
 80090c8:	429c      	cmp	r4, r3
 80090ca:	d101      	bne.n	80090d0 <_fflush_r+0x38>
 80090cc:	68ac      	ldr	r4, [r5, #8]
 80090ce:	e7f1      	b.n	80090b4 <_fflush_r+0x1c>
 80090d0:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <_fflush_r+0x50>)
 80090d2:	429c      	cmp	r4, r3
 80090d4:	bf08      	it	eq
 80090d6:	68ec      	ldreq	r4, [r5, #12]
 80090d8:	e7ec      	b.n	80090b4 <_fflush_r+0x1c>
 80090da:	2000      	movs	r0, #0
 80090dc:	bd38      	pop	{r3, r4, r5, pc}
 80090de:	bf00      	nop
 80090e0:	080094c4 	.word	0x080094c4
 80090e4:	080094e4 	.word	0x080094e4
 80090e8:	080094a4 	.word	0x080094a4

080090ec <_lseek_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4605      	mov	r5, r0
 80090f0:	4608      	mov	r0, r1
 80090f2:	4611      	mov	r1, r2
 80090f4:	2200      	movs	r2, #0
 80090f6:	4c05      	ldr	r4, [pc, #20]	; (800910c <_lseek_r+0x20>)
 80090f8:	6022      	str	r2, [r4, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	f7f8 f90b 	bl	8001316 <_lseek>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d102      	bne.n	800910a <_lseek_r+0x1e>
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	b103      	cbz	r3, 800910a <_lseek_r+0x1e>
 8009108:	602b      	str	r3, [r5, #0]
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	2000111c 	.word	0x2000111c

08009110 <__swhatbuf_r>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	460e      	mov	r6, r1
 8009114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009118:	b096      	sub	sp, #88	; 0x58
 800911a:	2900      	cmp	r1, #0
 800911c:	4614      	mov	r4, r2
 800911e:	461d      	mov	r5, r3
 8009120:	da07      	bge.n	8009132 <__swhatbuf_r+0x22>
 8009122:	2300      	movs	r3, #0
 8009124:	602b      	str	r3, [r5, #0]
 8009126:	89b3      	ldrh	r3, [r6, #12]
 8009128:	061a      	lsls	r2, r3, #24
 800912a:	d410      	bmi.n	800914e <__swhatbuf_r+0x3e>
 800912c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009130:	e00e      	b.n	8009150 <__swhatbuf_r+0x40>
 8009132:	466a      	mov	r2, sp
 8009134:	f000 f8fe 	bl	8009334 <_fstat_r>
 8009138:	2800      	cmp	r0, #0
 800913a:	dbf2      	blt.n	8009122 <__swhatbuf_r+0x12>
 800913c:	9a01      	ldr	r2, [sp, #4]
 800913e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009142:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009146:	425a      	negs	r2, r3
 8009148:	415a      	adcs	r2, r3
 800914a:	602a      	str	r2, [r5, #0]
 800914c:	e7ee      	b.n	800912c <__swhatbuf_r+0x1c>
 800914e:	2340      	movs	r3, #64	; 0x40
 8009150:	2000      	movs	r0, #0
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	b016      	add	sp, #88	; 0x58
 8009156:	bd70      	pop	{r4, r5, r6, pc}

08009158 <__smakebuf_r>:
 8009158:	898b      	ldrh	r3, [r1, #12]
 800915a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800915c:	079d      	lsls	r5, r3, #30
 800915e:	4606      	mov	r6, r0
 8009160:	460c      	mov	r4, r1
 8009162:	d507      	bpl.n	8009174 <__smakebuf_r+0x1c>
 8009164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	6123      	str	r3, [r4, #16]
 800916c:	2301      	movs	r3, #1
 800916e:	6163      	str	r3, [r4, #20]
 8009170:	b002      	add	sp, #8
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	ab01      	add	r3, sp, #4
 8009176:	466a      	mov	r2, sp
 8009178:	f7ff ffca 	bl	8009110 <__swhatbuf_r>
 800917c:	9900      	ldr	r1, [sp, #0]
 800917e:	4605      	mov	r5, r0
 8009180:	4630      	mov	r0, r6
 8009182:	f7ff f95b 	bl	800843c <_malloc_r>
 8009186:	b948      	cbnz	r0, 800919c <__smakebuf_r+0x44>
 8009188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918c:	059a      	lsls	r2, r3, #22
 800918e:	d4ef      	bmi.n	8009170 <__smakebuf_r+0x18>
 8009190:	f023 0303 	bic.w	r3, r3, #3
 8009194:	f043 0302 	orr.w	r3, r3, #2
 8009198:	81a3      	strh	r3, [r4, #12]
 800919a:	e7e3      	b.n	8009164 <__smakebuf_r+0xc>
 800919c:	4b0d      	ldr	r3, [pc, #52]	; (80091d4 <__smakebuf_r+0x7c>)
 800919e:	62b3      	str	r3, [r6, #40]	; 0x28
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	6020      	str	r0, [r4, #0]
 80091a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	9b00      	ldr	r3, [sp, #0]
 80091ac:	6120      	str	r0, [r4, #16]
 80091ae:	6163      	str	r3, [r4, #20]
 80091b0:	9b01      	ldr	r3, [sp, #4]
 80091b2:	b15b      	cbz	r3, 80091cc <__smakebuf_r+0x74>
 80091b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091b8:	4630      	mov	r0, r6
 80091ba:	f000 f8cd 	bl	8009358 <_isatty_r>
 80091be:	b128      	cbz	r0, 80091cc <__smakebuf_r+0x74>
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	f023 0303 	bic.w	r3, r3, #3
 80091c6:	f043 0301 	orr.w	r3, r3, #1
 80091ca:	81a3      	strh	r3, [r4, #12]
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	431d      	orrs	r5, r3
 80091d0:	81a5      	strh	r5, [r4, #12]
 80091d2:	e7cd      	b.n	8009170 <__smakebuf_r+0x18>
 80091d4:	080082f1 	.word	0x080082f1

080091d8 <memchr>:
 80091d8:	b510      	push	{r4, lr}
 80091da:	b2c9      	uxtb	r1, r1
 80091dc:	4402      	add	r2, r0
 80091de:	4290      	cmp	r0, r2
 80091e0:	4603      	mov	r3, r0
 80091e2:	d101      	bne.n	80091e8 <memchr+0x10>
 80091e4:	2300      	movs	r3, #0
 80091e6:	e003      	b.n	80091f0 <memchr+0x18>
 80091e8:	781c      	ldrb	r4, [r3, #0]
 80091ea:	3001      	adds	r0, #1
 80091ec:	428c      	cmp	r4, r1
 80091ee:	d1f6      	bne.n	80091de <memchr+0x6>
 80091f0:	4618      	mov	r0, r3
 80091f2:	bd10      	pop	{r4, pc}

080091f4 <memmove>:
 80091f4:	4288      	cmp	r0, r1
 80091f6:	b510      	push	{r4, lr}
 80091f8:	eb01 0302 	add.w	r3, r1, r2
 80091fc:	d807      	bhi.n	800920e <memmove+0x1a>
 80091fe:	1e42      	subs	r2, r0, #1
 8009200:	4299      	cmp	r1, r3
 8009202:	d00a      	beq.n	800921a <memmove+0x26>
 8009204:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009208:	f802 4f01 	strb.w	r4, [r2, #1]!
 800920c:	e7f8      	b.n	8009200 <memmove+0xc>
 800920e:	4283      	cmp	r3, r0
 8009210:	d9f5      	bls.n	80091fe <memmove+0xa>
 8009212:	1881      	adds	r1, r0, r2
 8009214:	1ad2      	subs	r2, r2, r3
 8009216:	42d3      	cmn	r3, r2
 8009218:	d100      	bne.n	800921c <memmove+0x28>
 800921a:	bd10      	pop	{r4, pc}
 800921c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009220:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009224:	e7f7      	b.n	8009216 <memmove+0x22>

08009226 <__malloc_lock>:
 8009226:	4770      	bx	lr

08009228 <__malloc_unlock>:
 8009228:	4770      	bx	lr
	...

0800922c <_free_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	4605      	mov	r5, r0
 8009230:	2900      	cmp	r1, #0
 8009232:	d043      	beq.n	80092bc <_free_r+0x90>
 8009234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009238:	1f0c      	subs	r4, r1, #4
 800923a:	2b00      	cmp	r3, #0
 800923c:	bfb8      	it	lt
 800923e:	18e4      	addlt	r4, r4, r3
 8009240:	f7ff fff1 	bl	8009226 <__malloc_lock>
 8009244:	4a1e      	ldr	r2, [pc, #120]	; (80092c0 <_free_r+0x94>)
 8009246:	6813      	ldr	r3, [r2, #0]
 8009248:	4610      	mov	r0, r2
 800924a:	b933      	cbnz	r3, 800925a <_free_r+0x2e>
 800924c:	6063      	str	r3, [r4, #4]
 800924e:	6014      	str	r4, [r2, #0]
 8009250:	4628      	mov	r0, r5
 8009252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009256:	f7ff bfe7 	b.w	8009228 <__malloc_unlock>
 800925a:	42a3      	cmp	r3, r4
 800925c:	d90b      	bls.n	8009276 <_free_r+0x4a>
 800925e:	6821      	ldr	r1, [r4, #0]
 8009260:	1862      	adds	r2, r4, r1
 8009262:	4293      	cmp	r3, r2
 8009264:	bf01      	itttt	eq
 8009266:	681a      	ldreq	r2, [r3, #0]
 8009268:	685b      	ldreq	r3, [r3, #4]
 800926a:	1852      	addeq	r2, r2, r1
 800926c:	6022      	streq	r2, [r4, #0]
 800926e:	6063      	str	r3, [r4, #4]
 8009270:	6004      	str	r4, [r0, #0]
 8009272:	e7ed      	b.n	8009250 <_free_r+0x24>
 8009274:	4613      	mov	r3, r2
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	b10a      	cbz	r2, 800927e <_free_r+0x52>
 800927a:	42a2      	cmp	r2, r4
 800927c:	d9fa      	bls.n	8009274 <_free_r+0x48>
 800927e:	6819      	ldr	r1, [r3, #0]
 8009280:	1858      	adds	r0, r3, r1
 8009282:	42a0      	cmp	r0, r4
 8009284:	d10b      	bne.n	800929e <_free_r+0x72>
 8009286:	6820      	ldr	r0, [r4, #0]
 8009288:	4401      	add	r1, r0
 800928a:	1858      	adds	r0, r3, r1
 800928c:	4282      	cmp	r2, r0
 800928e:	6019      	str	r1, [r3, #0]
 8009290:	d1de      	bne.n	8009250 <_free_r+0x24>
 8009292:	6810      	ldr	r0, [r2, #0]
 8009294:	6852      	ldr	r2, [r2, #4]
 8009296:	4401      	add	r1, r0
 8009298:	6019      	str	r1, [r3, #0]
 800929a:	605a      	str	r2, [r3, #4]
 800929c:	e7d8      	b.n	8009250 <_free_r+0x24>
 800929e:	d902      	bls.n	80092a6 <_free_r+0x7a>
 80092a0:	230c      	movs	r3, #12
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	e7d4      	b.n	8009250 <_free_r+0x24>
 80092a6:	6820      	ldr	r0, [r4, #0]
 80092a8:	1821      	adds	r1, r4, r0
 80092aa:	428a      	cmp	r2, r1
 80092ac:	bf01      	itttt	eq
 80092ae:	6811      	ldreq	r1, [r2, #0]
 80092b0:	6852      	ldreq	r2, [r2, #4]
 80092b2:	1809      	addeq	r1, r1, r0
 80092b4:	6021      	streq	r1, [r4, #0]
 80092b6:	6062      	str	r2, [r4, #4]
 80092b8:	605c      	str	r4, [r3, #4]
 80092ba:	e7c9      	b.n	8009250 <_free_r+0x24>
 80092bc:	bd38      	pop	{r3, r4, r5, pc}
 80092be:	bf00      	nop
 80092c0:	20000498 	.word	0x20000498

080092c4 <_realloc_r>:
 80092c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c6:	4607      	mov	r7, r0
 80092c8:	4614      	mov	r4, r2
 80092ca:	460e      	mov	r6, r1
 80092cc:	b921      	cbnz	r1, 80092d8 <_realloc_r+0x14>
 80092ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80092d2:	4611      	mov	r1, r2
 80092d4:	f7ff b8b2 	b.w	800843c <_malloc_r>
 80092d8:	b922      	cbnz	r2, 80092e4 <_realloc_r+0x20>
 80092da:	f7ff ffa7 	bl	800922c <_free_r>
 80092de:	4625      	mov	r5, r4
 80092e0:	4628      	mov	r0, r5
 80092e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092e4:	f000 f848 	bl	8009378 <_malloc_usable_size_r>
 80092e8:	42a0      	cmp	r0, r4
 80092ea:	d20f      	bcs.n	800930c <_realloc_r+0x48>
 80092ec:	4621      	mov	r1, r4
 80092ee:	4638      	mov	r0, r7
 80092f0:	f7ff f8a4 	bl	800843c <_malloc_r>
 80092f4:	4605      	mov	r5, r0
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d0f2      	beq.n	80092e0 <_realloc_r+0x1c>
 80092fa:	4631      	mov	r1, r6
 80092fc:	4622      	mov	r2, r4
 80092fe:	f7fe ff87 	bl	8008210 <memcpy>
 8009302:	4631      	mov	r1, r6
 8009304:	4638      	mov	r0, r7
 8009306:	f7ff ff91 	bl	800922c <_free_r>
 800930a:	e7e9      	b.n	80092e0 <_realloc_r+0x1c>
 800930c:	4635      	mov	r5, r6
 800930e:	e7e7      	b.n	80092e0 <_realloc_r+0x1c>

08009310 <_read_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4605      	mov	r5, r0
 8009314:	4608      	mov	r0, r1
 8009316:	4611      	mov	r1, r2
 8009318:	2200      	movs	r2, #0
 800931a:	4c05      	ldr	r4, [pc, #20]	; (8009330 <_read_r+0x20>)
 800931c:	6022      	str	r2, [r4, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	f7f7 ffb8 	bl	8001294 <_read>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d102      	bne.n	800932e <_read_r+0x1e>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	b103      	cbz	r3, 800932e <_read_r+0x1e>
 800932c:	602b      	str	r3, [r5, #0]
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	2000111c 	.word	0x2000111c

08009334 <_fstat_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	2300      	movs	r3, #0
 8009338:	4c06      	ldr	r4, [pc, #24]	; (8009354 <_fstat_r+0x20>)
 800933a:	4605      	mov	r5, r0
 800933c:	4608      	mov	r0, r1
 800933e:	4611      	mov	r1, r2
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	f7f7 ffcf 	bl	80012e4 <_fstat>
 8009346:	1c43      	adds	r3, r0, #1
 8009348:	d102      	bne.n	8009350 <_fstat_r+0x1c>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	b103      	cbz	r3, 8009350 <_fstat_r+0x1c>
 800934e:	602b      	str	r3, [r5, #0]
 8009350:	bd38      	pop	{r3, r4, r5, pc}
 8009352:	bf00      	nop
 8009354:	2000111c 	.word	0x2000111c

08009358 <_isatty_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	2300      	movs	r3, #0
 800935c:	4c05      	ldr	r4, [pc, #20]	; (8009374 <_isatty_r+0x1c>)
 800935e:	4605      	mov	r5, r0
 8009360:	4608      	mov	r0, r1
 8009362:	6023      	str	r3, [r4, #0]
 8009364:	f7f7 ffcd 	bl	8001302 <_isatty>
 8009368:	1c43      	adds	r3, r0, #1
 800936a:	d102      	bne.n	8009372 <_isatty_r+0x1a>
 800936c:	6823      	ldr	r3, [r4, #0]
 800936e:	b103      	cbz	r3, 8009372 <_isatty_r+0x1a>
 8009370:	602b      	str	r3, [r5, #0]
 8009372:	bd38      	pop	{r3, r4, r5, pc}
 8009374:	2000111c 	.word	0x2000111c

08009378 <_malloc_usable_size_r>:
 8009378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800937c:	1f18      	subs	r0, r3, #4
 800937e:	2b00      	cmp	r3, #0
 8009380:	bfbc      	itt	lt
 8009382:	580b      	ldrlt	r3, [r1, r0]
 8009384:	18c0      	addlt	r0, r0, r3
 8009386:	4770      	bx	lr

08009388 <_init>:
 8009388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938a:	bf00      	nop
 800938c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938e:	bc08      	pop	{r3}
 8009390:	469e      	mov	lr, r3
 8009392:	4770      	bx	lr

08009394 <_fini>:
 8009394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009396:	bf00      	nop
 8009398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939a:	bc08      	pop	{r3}
 800939c:	469e      	mov	lr, r3
 800939e:	4770      	bx	lr
