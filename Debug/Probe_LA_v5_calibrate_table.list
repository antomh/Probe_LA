
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800b5b4  0800b5b4  0001b5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b734  0800b734  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b734  0800b734  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b734  0800b734  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b734  0800b734  0001b734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b738  0800b738  0001b738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b73c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc8  200001f8  0800b930  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  0800b930  000211c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee32  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047f1  00000000  00000000  0003f04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00043840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  00044eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d430  00000000  00000000  00046328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b023  00000000  00000000  00063758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097532  00000000  00000000  0007e77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115cad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006544  00000000  00000000  00115d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b59c 	.word	0x0800b59c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800b59c 	.word	0x0800b59c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2102      	movs	r1, #2
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <ToggleLDAC+0x1c>)
 8000166:	f002 fd78 	bl	8002c5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 800016a:	2201      	movs	r2, #1
 800016c:	2102      	movs	r1, #2
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <ToggleLDAC+0x1c>)
 8000170:	f002 fd73 	bl	8002c5a <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800

0800017c <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	4808      	ldr	r0, [pc, #32]	; (80001b0 <SendSPI+0x34>)
 800018e:	f002 fd64 	bl	8002c5a <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000192:	1cb9      	adds	r1, r7, #2
 8000194:	2301      	movs	r3, #1
 8000196:	2201      	movs	r2, #1
 8000198:	6878      	ldr	r0, [r7, #4]
 800019a:	f004 ff0b 	bl	8004fb4 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 800019e:	2201      	movs	r2, #1
 80001a0:	2110      	movs	r1, #16
 80001a2:	4803      	ldr	r0, [pc, #12]	; (80001b0 <SendSPI+0x34>)
 80001a4:	f002 fd59 	bl	8002c5a <HAL_GPIO_WritePin>

}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	40010800 	.word	0x40010800

080001b4 <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	460b      	mov	r3, r1
 80001be:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 80001c0:	887b      	ldrh	r3, [r7, #2]
 80001c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001c6:	d302      	bcc.n	80001ce <DAC_AD5322_Ch1+0x1a>
 80001c8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80001cc:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 80001ce:	2300      	movs	r3, #0
 80001d0:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 80001d2:	2301      	movs	r3, #1
 80001d4:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 80001d6:	2300      	movs	r3, #0
 80001d8:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 80001da:	2300      	movs	r3, #0
 80001dc:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 80001de:	8afb      	ldrh	r3, [r7, #22]
 80001e0:	03db      	lsls	r3, r3, #15
 80001e2:	b21a      	sxth	r2, r3
 80001e4:	8abb      	ldrh	r3, [r7, #20]
 80001e6:	039b      	lsls	r3, r3, #14
 80001e8:	b21b      	sxth	r3, r3
 80001ea:	4313      	orrs	r3, r2
 80001ec:	b21a      	sxth	r2, r3
 80001ee:	8a7b      	ldrh	r3, [r7, #18]
 80001f0:	035b      	lsls	r3, r3, #13
 80001f2:	b21b      	sxth	r3, r3
 80001f4:	4313      	orrs	r3, r2
 80001f6:	b21a      	sxth	r2, r3
 80001f8:	8a3b      	ldrh	r3, [r7, #16]
 80001fa:	031b      	lsls	r3, r3, #12
 80001fc:	b21b      	sxth	r3, r3
 80001fe:	4313      	orrs	r3, r2
 8000200:	b21b      	sxth	r3, r3
 8000202:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000204:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000208:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800020c:	f023 030f 	bic.w	r3, r3, #15
 8000210:	b21a      	sxth	r2, r3
 8000212:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800021a:	b21b      	sxth	r3, r3
 800021c:	4313      	orrs	r3, r2
 800021e:	b21b      	sxth	r3, r3
 8000220:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000222:	89bb      	ldrh	r3, [r7, #12]
 8000224:	4619      	mov	r1, r3
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f7ff ffa8 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 800022c:	89bb      	ldrh	r3, [r7, #12]
 800022e:	4619      	mov	r1, r3
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f7ff ffa3 	bl	800017c <SendSPI>
  	ToggleLDAC();
 8000236:	f7ff ff91 	bl	800015c <ToggleLDAC>
}
 800023a:	bf00      	nop
 800023c:	3718      	adds	r7, #24
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000242:	b580      	push	{r7, lr}
 8000244:	b086      	sub	sp, #24
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
 800024a:	460b      	mov	r3, r1
 800024c:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 800024e:	887b      	ldrh	r3, [r7, #2]
 8000250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000254:	d302      	bcc.n	800025c <DAC_AD5322_Ch2+0x1a>
 8000256:	f640 73ff 	movw	r3, #4095	; 0xfff
 800025a:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 800025c:	2301      	movs	r3, #1
 800025e:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000260:	2301      	movs	r3, #1
 8000262:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000264:	2300      	movs	r3, #0
 8000266:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000268:	2300      	movs	r3, #0
 800026a:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 800026c:	8afb      	ldrh	r3, [r7, #22]
 800026e:	03db      	lsls	r3, r3, #15
 8000270:	b21a      	sxth	r2, r3
 8000272:	8abb      	ldrh	r3, [r7, #20]
 8000274:	039b      	lsls	r3, r3, #14
 8000276:	b21b      	sxth	r3, r3
 8000278:	4313      	orrs	r3, r2
 800027a:	b21a      	sxth	r2, r3
 800027c:	8a7b      	ldrh	r3, [r7, #18]
 800027e:	035b      	lsls	r3, r3, #13
 8000280:	b21b      	sxth	r3, r3
 8000282:	4313      	orrs	r3, r2
 8000284:	b21a      	sxth	r2, r3
 8000286:	8a3b      	ldrh	r3, [r7, #16]
 8000288:	031b      	lsls	r3, r3, #12
 800028a:	b21b      	sxth	r3, r3
 800028c:	4313      	orrs	r3, r2
 800028e:	b21b      	sxth	r3, r3
 8000290:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000292:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000296:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800029a:	f023 030f 	bic.w	r3, r3, #15
 800029e:	b21a      	sxth	r2, r3
 80002a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80002a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002a8:	b21b      	sxth	r3, r3
 80002aa:	4313      	orrs	r3, r2
 80002ac:	b21b      	sxth	r3, r3
 80002ae:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 80002b0:	89bb      	ldrh	r3, [r7, #12]
 80002b2:	4619      	mov	r1, r3
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f7ff ff61 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 80002ba:	89bb      	ldrh	r3, [r7, #12]
 80002bc:	4619      	mov	r1, r3
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f7ff ff5c 	bl	800017c <SendSPI>
  	ToggleLDAC();
 80002c4:	f7ff ff4a 	bl	800015c <ToggleLDAC>
}
 80002c8:	bf00      	nop
 80002ca:	3718      	adds	r7, #24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	460b      	mov	r3, r1
 80002da:	807b      	strh	r3, [r7, #2]
 80002dc:	4613      	mov	r3, r2
 80002de:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 80002e0:	887b      	ldrh	r3, [r7, #2]
 80002e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002e6:	d302      	bcc.n	80002ee <DAC_AD5322_Ch1Ch2+0x1e>
 80002e8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80002ec:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 80002ee:	883b      	ldrh	r3, [r7, #0]
 80002f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002f4:	d302      	bcc.n	80002fc <DAC_AD5322_Ch1Ch2+0x2c>
 80002f6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80002fa:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 80002fc:	2300      	movs	r3, #0
 80002fe:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000300:	2301      	movs	r3, #1
 8000302:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000304:	2300      	movs	r3, #0
 8000306:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000308:	2300      	movs	r3, #0
 800030a:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 800030c:	8afb      	ldrh	r3, [r7, #22]
 800030e:	03db      	lsls	r3, r3, #15
 8000310:	b21a      	sxth	r2, r3
 8000312:	8abb      	ldrh	r3, [r7, #20]
 8000314:	039b      	lsls	r3, r3, #14
 8000316:	b21b      	sxth	r3, r3
 8000318:	4313      	orrs	r3, r2
 800031a:	b21a      	sxth	r2, r3
 800031c:	8a7b      	ldrh	r3, [r7, #18]
 800031e:	035b      	lsls	r3, r3, #13
 8000320:	b21b      	sxth	r3, r3
 8000322:	4313      	orrs	r3, r2
 8000324:	b21a      	sxth	r2, r3
 8000326:	8a3b      	ldrh	r3, [r7, #16]
 8000328:	031b      	lsls	r3, r3, #12
 800032a:	b21b      	sxth	r3, r3
 800032c:	4313      	orrs	r3, r2
 800032e:	b21b      	sxth	r3, r3
 8000330:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000332:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000336:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800033a:	f023 030f 	bic.w	r3, r3, #15
 800033e:	b21a      	sxth	r2, r3
 8000340:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000348:	b21b      	sxth	r3, r3
 800034a:	4313      	orrs	r3, r2
 800034c:	b21b      	sxth	r3, r3
 800034e:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000350:	89bb      	ldrh	r3, [r7, #12]
 8000352:	4619      	mov	r1, r3
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f7ff ff11 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 800035a:	89bb      	ldrh	r3, [r7, #12]
 800035c:	4619      	mov	r1, r3
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f7ff ff0c 	bl	800017c <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000364:	2301      	movs	r3, #1
 8000366:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000368:	2301      	movs	r3, #1
 800036a:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 800036c:	2300      	movs	r3, #0
 800036e:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000370:	2300      	movs	r3, #0
 8000372:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000374:	8afb      	ldrh	r3, [r7, #22]
 8000376:	03db      	lsls	r3, r3, #15
 8000378:	b21a      	sxth	r2, r3
 800037a:	8abb      	ldrh	r3, [r7, #20]
 800037c:	039b      	lsls	r3, r3, #14
 800037e:	b21b      	sxth	r3, r3
 8000380:	4313      	orrs	r3, r2
 8000382:	b21a      	sxth	r2, r3
 8000384:	8a7b      	ldrh	r3, [r7, #18]
 8000386:	035b      	lsls	r3, r3, #13
 8000388:	b21b      	sxth	r3, r3
 800038a:	4313      	orrs	r3, r2
 800038c:	b21a      	sxth	r2, r3
 800038e:	8a3b      	ldrh	r3, [r7, #16]
 8000390:	031b      	lsls	r3, r3, #12
 8000392:	b21b      	sxth	r3, r3
 8000394:	4313      	orrs	r3, r2
 8000396:	b21b      	sxth	r3, r3
 8000398:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 800039a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800039e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80003a2:	f023 030f 	bic.w	r3, r3, #15
 80003a6:	b21a      	sxth	r2, r3
 80003a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80003ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80003b0:	b21b      	sxth	r3, r3
 80003b2:	4313      	orrs	r3, r2
 80003b4:	b21b      	sxth	r3, r3
 80003b6:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 80003b8:	89bb      	ldrh	r3, [r7, #12]
 80003ba:	4619      	mov	r1, r3
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff fedd 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 80003c2:	89bb      	ldrh	r3, [r7, #12]
 80003c4:	4619      	mov	r1, r3
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f7ff fed8 	bl	800017c <SendSPI>
  	ToggleLDAC();
 80003cc:	f7ff fec6 	bl	800015c <ToggleLDAC>
}
 80003d0:	bf00      	nop
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d013      	beq.n	8000418 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80003f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80003f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d00b      	beq.n	8000418 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000400:	e000      	b.n	8000404 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000402:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000404:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d0f9      	beq.n	8000402 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800040e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	b2d2      	uxtb	r2, r2
 8000416:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000418:	687b      	ldr	r3, [r7, #4]
}
 800041a:	4618      	mov	r0, r3
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <DWT_Init+0x24>)
 800042a:	68db      	ldr	r3, [r3, #12]
 800042c:	4a06      	ldr	r2, [pc, #24]	; (8000448 <DWT_Init+0x24>)
 800042e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000432:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <DWT_Init+0x28>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <DWT_Init+0x28>)
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	6013      	str	r3, [r2, #0]
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	e000edf0 	.word	0xe000edf0
 800044c:	e0001000 	.word	0xe0001000

08000450 <_write>:
static void MX_TIM4_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]
 8000460:	e009      	b.n	8000476 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	60ba      	str	r2, [r7, #8]
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ffb4 	bl	80003d8 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	3301      	adds	r3, #1
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	697a      	ldr	r2, [r7, #20]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	429a      	cmp	r2, r3
 800047c:	dbf1      	blt.n	8000462 <_write+0x12>
	}
	return len;
 800047e:	687b      	ldr	r3, [r7, #4]
}
 8000480:	4618      	mov	r0, r3
 8000482:	3718      	adds	r7, #24
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <SetDacA>:
#if  TEST_DAC

uint16_t VDAC_A = 2154;
uint16_t VDAC_B = 2154;

void SetDacA(uint16_t da) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	80fb      	strh	r3, [r7, #6]
	VDAC_A = da;
 8000492:	4a06      	ldr	r2, [pc, #24]	; (80004ac <SetDacA+0x24>)
 8000494:	88fb      	ldrh	r3, [r7, #6]
 8000496:	8013      	strh	r3, [r2, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <SetDacA+0x24>)
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	4619      	mov	r1, r3
 800049e:	4804      	ldr	r0, [pc, #16]	; (80004b0 <SetDacA+0x28>)
 80004a0:	f7ff fe88 	bl	80001b4 <DAC_AD5322_Ch1>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000010 	.word	0x20000010
 80004b0:	20000580 	.word	0x20000580

080004b4 <SetDacB>:
void SetDacB(uint16_t db) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	80fb      	strh	r3, [r7, #6]
	VDAC_B = db;
 80004be:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <SetDacB+0x24>)
 80004c0:	88fb      	ldrh	r3, [r7, #6]
 80004c2:	8013      	strh	r3, [r2, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 80004c4:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <SetDacB+0x24>)
 80004c6:	881b      	ldrh	r3, [r3, #0]
 80004c8:	4619      	mov	r1, r3
 80004ca:	4804      	ldr	r0, [pc, #16]	; (80004dc <SetDacB+0x28>)
 80004cc:	f7ff feb9 	bl	8000242 <DAC_AD5322_Ch2>
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000012 	.word	0x20000012
 80004dc:	20000580 	.word	0x20000580

080004e0 <SetAllDAC>:
void SetAllDAC() {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1,VDAC_A,VDAC_B);
 80004e4:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <SetAllDAC+0x18>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <SetAllDAC+0x1c>)
 80004ea:	8812      	ldrh	r2, [r2, #0]
 80004ec:	4619      	mov	r1, r3
 80004ee:	4804      	ldr	r0, [pc, #16]	; (8000500 <SetAllDAC+0x20>)
 80004f0:	f7ff feee 	bl	80002d0 <DAC_AD5322_Ch1Ch2>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000010 	.word	0x20000010
 80004fc:	20000012 	.word	0x20000012
 8000500:	20000580 	.word	0x20000580

08000504 <GetDacA>:
uint16_t GetDacA() {
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	return VDAC_A;
 8000508:	4b02      	ldr	r3, [pc, #8]	; (8000514 <GetDacA+0x10>)
 800050a:	881b      	ldrh	r3, [r3, #0]
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	20000010 	.word	0x20000010

08000518 <GetDacB>:
uint16_t GetDacB() {
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	return VDAC_B;
 800051c:	4b02      	ldr	r3, [pc, #8]	; (8000528 <GetDacB+0x10>)
 800051e:	881b      	ldrh	r3, [r3, #0]
}
 8000520:	4618      	mov	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	20000012 	.word	0x20000012

0800052c <GetBtnRunState>:
uint32_t time_key3 = 0;

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState() {
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00) {
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <GetBtnRunState+0x7c>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d10b      	bne.n	8000550 <GetBtnRunState+0x24>
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <GetBtnRunState+0x80>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d107      	bne.n	8000550 <GetBtnRunState+0x24>
		btn1_long_rd	 = 0;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <GetBtnRunState+0x80>)
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
		btn1_short_rd	 = 0;
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <GetBtnRunState+0x7c>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
		return 0x00;
 800054c:	2300      	movs	r3, #0
 800054e:	e026      	b.n	800059e <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00) {
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <GetBtnRunState+0x7c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d10b      	bne.n	8000570 <GetBtnRunState+0x44>
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <GetBtnRunState+0x80>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d107      	bne.n	8000570 <GetBtnRunState+0x44>
		btn1_long_rd 	= 0;
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <GetBtnRunState+0x80>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
		btn1_short_rd 	= 0;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <GetBtnRunState+0x7c>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
		return 0x01;
 800056c:	2301      	movs	r3, #1
 800056e:	e016      	b.n	800059e <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01) {
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <GetBtnRunState+0x7c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d10b      	bne.n	8000590 <GetBtnRunState+0x64>
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <GetBtnRunState+0x80>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d107      	bne.n	8000590 <GetBtnRunState+0x64>
		btn1_long_rd 	= 0;
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <GetBtnRunState+0x80>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
		btn1_short_rd 	= 0;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <GetBtnRunState+0x7c>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
		return 0x02;
 800058c:	2302      	movs	r3, #2
 800058e:	e006      	b.n	800059e <GetBtnRunState+0x72>
	}

	btn1_long_rd 		= 0;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <GetBtnRunState+0x80>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
	btn1_short_rd	 	= 0;
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <GetBtnRunState+0x7c>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]

//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000025d 	.word	0x2000025d
 80005ac:	2000025c 	.word	0x2000025c

080005b0 <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState() {
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00) {
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <GetBtnUpState+0x7c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d10b      	bne.n	80005d4 <GetBtnUpState+0x24>
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <GetBtnUpState+0x80>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d107      	bne.n	80005d4 <GetBtnUpState+0x24>
		btn2_long_rd	 = 0;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <GetBtnUpState+0x80>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
		btn2_short_rd	 = 0;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <GetBtnUpState+0x7c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
		return 0x00;
 80005d0:	2300      	movs	r3, #0
 80005d2:	e026      	b.n	8000622 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00) {
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <GetBtnUpState+0x7c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d10b      	bne.n	80005f4 <GetBtnUpState+0x44>
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <GetBtnUpState+0x80>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d107      	bne.n	80005f4 <GetBtnUpState+0x44>
		btn2_long_rd 	= 0;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <GetBtnUpState+0x80>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
		btn2_short_rd 	= 0;
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <GetBtnUpState+0x7c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80005f0:	2301      	movs	r3, #1
 80005f2:	e016      	b.n	8000622 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01) {
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <GetBtnUpState+0x7c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d10b      	bne.n	8000614 <GetBtnUpState+0x64>
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <GetBtnUpState+0x80>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d107      	bne.n	8000614 <GetBtnUpState+0x64>
		btn2_long_rd 	= 0;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <GetBtnUpState+0x80>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		btn2_short_rd 	= 0;
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <GetBtnUpState+0x7c>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8000610:	2302      	movs	r3, #2
 8000612:	e006      	b.n	8000622 <GetBtnUpState+0x72>
	}

	btn2_long_rd 		= 0;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <GetBtnUpState+0x80>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	btn2_short_rd	 	= 0;
 800061a:	4b04      	ldr	r3, [pc, #16]	; (800062c <GetBtnUpState+0x7c>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000265 	.word	0x20000265
 8000630:	20000264 	.word	0x20000264

08000634 <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState() {
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00) {
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <GetBtnDownState+0x7c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d10b      	bne.n	8000658 <GetBtnDownState+0x24>
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <GetBtnDownState+0x80>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d107      	bne.n	8000658 <GetBtnDownState+0x24>
		btn3_long_rd	 = 0;
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <GetBtnDownState+0x80>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
		btn3_short_rd	 = 0;
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <GetBtnDownState+0x7c>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8000654:	2300      	movs	r3, #0
 8000656:	e026      	b.n	80006a6 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00) {
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <GetBtnDownState+0x7c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d10b      	bne.n	8000678 <GetBtnDownState+0x44>
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <GetBtnDownState+0x80>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d107      	bne.n	8000678 <GetBtnDownState+0x44>
		btn3_long_rd 	= 0;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <GetBtnDownState+0x80>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
		btn3_short_rd 	= 0;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <GetBtnDownState+0x7c>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8000674:	2301      	movs	r3, #1
 8000676:	e016      	b.n	80006a6 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01) {
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <GetBtnDownState+0x7c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d10b      	bne.n	8000698 <GetBtnDownState+0x64>
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <GetBtnDownState+0x80>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d107      	bne.n	8000698 <GetBtnDownState+0x64>
		btn3_long_rd 	= 0;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <GetBtnDownState+0x80>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
		btn3_short_rd 	= 0;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <GetBtnDownState+0x7c>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8000694:	2302      	movs	r3, #2
 8000696:	e006      	b.n	80006a6 <GetBtnDownState+0x72>
	}

	btn3_long_rd 		= 0;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <GetBtnDownState+0x80>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
	btn3_short_rd	 	= 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <GetBtnDownState+0x7c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	2000026d 	.word	0x2000026d
 80006b4:	2000026c 	.word	0x2000026c

080006b8 <EnableTIM3_PB4>:
volatile uint16_t g_vTIM3_PB4 = 0;
volatile uint16_t g_vTIM4_PB6 = 0;

char trans2_str[64] = {0,};
//--------------------------------------------------------------------------
void EnableTIM3_PB4(){
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
	 timWork = 1 ;
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <EnableTIM3_PB4+0x14>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	2000026e 	.word	0x2000026e

080006d0 <GetTIM3>:
uint16_t GetTIM3(){
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <GetTIM3+0x14>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	b29b      	uxth	r3, r3
}
 80006da:	4618      	mov	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000270 	.word	0x20000270

080006e8 <resValTIM3_PB4>:
void resValTIM3_PB4(){
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <resValTIM3_PB4+0x14>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	801a      	strh	r2, [r3, #0]
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000270 	.word	0x20000270

08000700 <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6(){
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
	 timWork = 0 ;
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <EnableTIM4_PB6+0x14>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	2000026e 	.word	0x2000026e

08000718 <GetTIM4>:
uint16_t GetTIM4(){
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <GetTIM4+0x14>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	b29b      	uxth	r3, r3
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000272 	.word	0x20000272

08000730 <resValTIM4_PB6>:
void resValTIM4_PB6(){
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <resValTIM4_PB6+0x14>)
 8000736:	2200      	movs	r2, #0
 8000738:	801a      	strh	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000272 	.word	0x20000272

08000748 <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork) {
 8000750:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d027      	beq.n	80007aa <HAL_TIM_IC_CaptureCallback+0x62>
		if (htim->Instance == TIM3) {
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a29      	ldr	r2, [pc, #164]	; (8000804 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d149      	bne.n	80007f8 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7f1b      	ldrb	r3, [r3, #28]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d145      	bne.n	80007f8 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 800076c:	2100      	movs	r1, #0
 800076e:	4826      	ldr	r0, [pc, #152]	; (8000808 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000770:	f005 f8f4 	bl	800595c <HAL_TIM_ReadCapturedValue>
 8000774:	4603      	mov	r3, r0
 8000776:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 8000778:	2104      	movs	r1, #4
 800077a:	4823      	ldr	r0, [pc, #140]	; (8000808 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800077c:	f005 f8ee 	bl	800595c <HAL_TIM_ReadCapturedValue>
 8000780:	4603      	mov	r3, r0
 8000782:	81fb      	strh	r3, [r7, #14]
						TIM_CHANNEL_2);

				TIM3->CNT = 0;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t) periodTIM3
						- (int16_t) pulseWidthTIM3;
 800078a:	8a3a      	ldrh	r2, [r7, #16]
 800078c:	89fb      	ldrh	r3, [r7, #14]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	b29b      	uxth	r3, r3
				int16_t deltaTIM3 = (int16_t) periodTIM3
 8000792:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 8000794:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	bfb8      	it	lt
 800079c:	425b      	neglt	r3, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 80007a2:	89ba      	ldrh	r2, [r7, #12]
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <HAL_TIM_IC_CaptureCallback+0xc4>)
 80007a6:	801a      	strh	r2, [r3, #0]

			}
		}
	}

}
 80007a8:	e026      	b.n	80007f8 <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4) {
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d121      	bne.n	80007f8 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7f1b      	ldrb	r3, [r3, #28]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d11d      	bne.n	80007f8 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80007bc:	2100      	movs	r1, #0
 80007be:	4815      	ldr	r0, [pc, #84]	; (8000814 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80007c0:	f005 f8cc 	bl	800595c <HAL_TIM_ReadCapturedValue>
 80007c4:	4603      	mov	r3, r0
 80007c6:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 80007c8:	2104      	movs	r1, #4
 80007ca:	4812      	ldr	r0, [pc, #72]	; (8000814 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80007cc:	f005 f8c6 	bl	800595c <HAL_TIM_ReadCapturedValue>
 80007d0:	4603      	mov	r3, r0
 80007d2:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
						- (int16_t) pulseWidthTIM4;
 80007da:	8afa      	ldrh	r2, [r7, #22]
 80007dc:	8abb      	ldrh	r3, [r7, #20]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	b29b      	uxth	r3, r3
				int16_t deltaTIM4 = (int16_t) periodTIM4
 80007e2:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 80007e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	bfb8      	it	lt
 80007ec:	425b      	neglt	r3, r3
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 80007f2:	8a7a      	ldrh	r2, [r7, #18]
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80007f6:	801a      	strh	r2, [r3, #0]
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000026e 	.word	0x2000026e
 8000804:	40000400 	.word	0x40000400
 8000808:	20000508 	.word	0x20000508
 800080c:	20000270 	.word	0x20000270
 8000810:	40000800 	.word	0x40000800
 8000814:	200004b8 	.word	0x200004b8
 8000818:	20000272 	.word	0x20000272

0800081c <GetADC>:
/* USER CODE BEGIN 0 */
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC(){
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
	return g_VADC;
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <GetADC+0x14>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	b29b      	uxth	r3, r3
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000274 	.word	0x20000274

08000834 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) 				//check if the interrupt comes from ACD1
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <HAL_ADC_ConvCpltCallback+0x28>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <HAL_ADC_ConvCpltCallback+0x20>
    {
    	g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000848:	f001 fa0e 	bl	8001c68 <HAL_ADC_GetValue>
 800084c:	4603      	mov	r3, r0
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <HAL_ADC_ConvCpltCallback+0x30>)
 8000852:	801a      	strh	r2, [r3, #0]
    }
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40012400 	.word	0x40012400
 8000860:	20000550 	.word	0x20000550
 8000864:	20000274 	.word	0x20000274

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 800086e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000870:	f000 ffe6 	bl	8001840 <HAL_Init>

  /* USER CODE BEGIN Init */
//--------------------------------------------------------------------------
#if DWT_INIT
	DWT_Init();
 8000874:	f7ff fdd6 	bl	8000424 <DWT_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 fb1a 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f000 fcc4 	bl	8001208 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000880:	f000 fbc6 	bl	8001010 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000884:	f008 fefa 	bl	800967c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000888:	f000 fb70 	bl	8000f6c <MX_ADC1_Init>
  MX_TIM3_Init();
 800088c:	f000 fbf8 	bl	8001080 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000890:	f000 fc58 	bl	8001144 <MX_TIM4_Init>
  MX_CRC_Init();
 8000894:	f000 fba8 	bl	8000fe8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  //**************************************************************************
#if  TEST_UID
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 8000898:	4bcb      	ldr	r3, [pc, #812]	; (8000bc8 <main+0x360>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	4619      	mov	r1, r3
 80008a0:	4bca      	ldr	r3, [pc, #808]	; (8000bcc <main+0x364>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	4bc9      	ldr	r3, [pc, #804]	; (8000bd0 <main+0x368>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4ac9      	ldr	r2, [pc, #804]	; (8000bd4 <main+0x36c>)
 80008b0:	6812      	ldr	r2, [r2, #0]
 80008b2:	6812      	ldr	r2, [r2, #0]
 80008b4:	9201      	str	r2, [sp, #4]
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	4603      	mov	r3, r0
 80008ba:	460a      	mov	r2, r1
 80008bc:	49c6      	ldr	r1, [pc, #792]	; (8000bd8 <main+0x370>)
 80008be:	48c7      	ldr	r0, [pc, #796]	; (8000bdc <main+0x374>)
 80008c0:	f009 fd60 	bl	800a384 <siprintf>
	printf((uint8_t*)buffer);
 80008c4:	48c5      	ldr	r0, [pc, #788]	; (8000bdc <main+0x374>)
 80008c6:	f009 fd45 	bl	800a354 <iprintf>
#endif	/* TEST_UID */

	//**************************************************************************
#if	TEST_TIM_CAPTURE
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80008ca:	2100      	movs	r1, #0
 80008cc:	48c4      	ldr	r0, [pc, #784]	; (8000be0 <main+0x378>)
 80008ce:	f004 fda3 	bl	8005418 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80008d2:	2104      	movs	r1, #4
 80008d4:	48c2      	ldr	r0, [pc, #776]	; (8000be0 <main+0x378>)
 80008d6:	f004 fd9f 	bl	8005418 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80008da:	2100      	movs	r1, #0
 80008dc:	48c1      	ldr	r0, [pc, #772]	; (8000be4 <main+0x37c>)
 80008de:	f004 fd9b 	bl	8005418 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80008e2:	2104      	movs	r1, #4
 80008e4:	48bf      	ldr	r0, [pc, #764]	; (8000be4 <main+0x37c>)
 80008e6:	f004 fd97 	bl	8005418 <HAL_TIM_IC_Start_IT>
#endif	/* TEST_TIM_CAPTURE */
//--------------------------------------------------------------------------
#if	TEST_DAC
	SetAllDAC();
 80008ea:	f7ff fdf9 	bl	80004e0 <SetAllDAC>
#endif	/* TEST_DAC */
	//**************************************************************************
#if	TEST_ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 80008ee:	48be      	ldr	r0, [pc, #760]	; (8000be8 <main+0x380>)
 80008f0:	f001 fc16 	bl	8002120 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 80008f4:	48bc      	ldr	r0, [pc, #752]	; (8000be8 <main+0x380>)
 80008f6:	f001 f901 	bl	8001afc <HAL_ADC_Start_IT>
//--------------------------------------------------------------------------
	union NVRAM DevNVRAM;
//--------------------------------------------------------------------------
	static FLASH_EraseInitTypeDef EraseInitStruct; // структура для очистки флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 80008fa:	4bbc      	ldr	r3, [pc, #752]	; (8000bec <main+0x384>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = FLASH_TABLE_START_ADDR; // адрес 127-ой страницы
 8000900:	4bba      	ldr	r3, [pc, #744]	; (8000bec <main+0x384>)
 8000902:	4abb      	ldr	r2, [pc, #748]	; (8000bf0 <main+0x388>)
 8000904:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 0x01;               // кол-во страниц для стирания
 8000906:	4bb9      	ldr	r3, [pc, #740]	; (8000bec <main+0x384>)
 8000908:	2201      	movs	r2, #1
 800090a:	60da      	str	r2, [r3, #12]
	uint32_t l_Address;
	uint32_t l_Error;
	uint32_t l_Index;
//--------------------------------------------------------------------------
// Чтение DevNVRAM
	l_Address = FLASH_TABLE_START_ADDR;
 800090c:	4bb8      	ldr	r3, [pc, #736]	; (8000bf0 <main+0x388>)
 800090e:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	l_Error = 0;
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
	l_Index = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 800091e:	e011      	b.n	8000944 <main+0xdc>
		DevNVRAM.data32[l_Index] = *(__IO uint32_t*) l_Address;
 8000920:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000924:	6819      	ldr	r1, [r3, #0]
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800092c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		l_Index = l_Index + 1;
 8000930:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000934:	3301      	adds	r3, #1
 8000936:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
		l_Address = l_Address + 4;
 800093a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800093e:	3304      	adds	r3, #4
 8000940:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8000944:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000948:	4aaa      	ldr	r2, [pc, #680]	; (8000bf4 <main+0x38c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d9e8      	bls.n	8000920 <main+0xb8>
	}
//--------------------------------------------------------------------------
// если после чтения майджик кей не найден, то это первый запуск

	if (DevNVRAM.calibration_table.MagicNum != MAGIC_KEY_DEFINE) {
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	4aa9      	ldr	r2, [pc, #676]	; (8000bf8 <main+0x390>)
 8000954:	4293      	cmp	r3, r2
 8000956:	f000 80e8 	beq.w	8000b2a <main+0x2c2>
		// Подготовка
		// Заносим типовые значения
		memset(DevNVRAM.data32, 0, sizeof(DevNVRAM.data32));
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f009 fcee 	bl	800a344 <memset>

		// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!

		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8000968:	2300      	movs	r3, #0
 800096a:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 800096e:	e00f      	b.n	8000990 <main+0x128>
			DevNVRAM.calibration_table.dacValA_m12[i] = i;
 8000970:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8000974:	f897 240f 	ldrb.w	r2, [r7, #1039]	; 0x40f
 8000978:	b291      	uxth	r1, r2
 800097a:	1d3a      	adds	r2, r7, #4
 800097c:	3304      	adds	r3, #4
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	460a      	mov	r2, r1
 8000984:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8000986:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 800098a:	3301      	adds	r3, #1
 800098c:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 8000990:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8000994:	2b57      	cmp	r3, #87	; 0x57
 8000996:	d9eb      	bls.n	8000970 <main+0x108>
		}
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8000998:	2300      	movs	r3, #0
 800099a:	f887 340e 	strb.w	r3, [r7, #1038]	; 0x40e
 800099e:	e00f      	b.n	80009c0 <main+0x158>
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 80009a0:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
 80009a4:	f897 240e 	ldrb.w	r2, [r7, #1038]	; 0x40e
 80009a8:	b291      	uxth	r1, r2
 80009aa:	1d3a      	adds	r2, r7, #4
 80009ac:	335c      	adds	r3, #92	; 0x5c
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	460a      	mov	r2, r1
 80009b4:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 80009b6:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
 80009ba:	3301      	adds	r3, #1
 80009bc:	f887 340e 	strb.w	r3, [r7, #1038]	; 0x40e
 80009c0:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
 80009c4:	2b57      	cmp	r3, #87	; 0x57
 80009c6:	d9eb      	bls.n	80009a0 <main+0x138>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	f887 340d 	strb.w	r3, [r7, #1037]	; 0x40d
 80009ce:	e00f      	b.n	80009f0 <main+0x188>
			DevNVRAM.calibration_table.dacValA_m27[i] = i;
 80009d0:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 80009d4:	f897 240d 	ldrb.w	r2, [r7, #1037]	; 0x40d
 80009d8:	b291      	uxth	r1, r2
 80009da:	1d3a      	adds	r2, r7, #4
 80009dc:	33b4      	adds	r3, #180	; 0xb4
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	460a      	mov	r2, r1
 80009e4:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 80009e6:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 80009ea:	3301      	adds	r3, #1
 80009ec:	f887 340d 	strb.w	r3, [r7, #1037]	; 0x40d
 80009f0:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 80009f4:	2ba2      	cmp	r3, #162	; 0xa2
 80009f6:	d9eb      	bls.n	80009d0 <main+0x168>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 80009f8:	2300      	movs	r3, #0
 80009fa:	f887 340c 	strb.w	r3, [r7, #1036]	; 0x40c
 80009fe:	e00f      	b.n	8000a20 <main+0x1b8>
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 8000a00:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
 8000a04:	f897 240c 	ldrb.w	r2, [r7, #1036]	; 0x40c
 8000a08:	b291      	uxth	r1, r2
 8000a0a:	1d3a      	adds	r2, r7, #4
 8000a0c:	335c      	adds	r3, #92	; 0x5c
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	460a      	mov	r2, r1
 8000a14:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 8000a16:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	f887 340c 	strb.w	r3, [r7, #1036]	; 0x40c
 8000a20:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
 8000a24:	2ba2      	cmp	r3, #162	; 0xa2
 8000a26:	d9eb      	bls.n	8000a00 <main+0x198>
		}
		DevNVRAM.calibration_table.Hardwire = 0x06;
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2206      	movs	r2, #6
 8000a2c:	801a      	strh	r2, [r3, #0]
		DevNVRAM.calibration_table.Firmware = 0x05;
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2205      	movs	r2, #5
 8000a32:	805a      	strh	r2, [r3, #2]
		DevNVRAM.calibration_table.SN 		= 0x1121001; //11 неделя + год + порядковый номер изготовления
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	4a71      	ldr	r2, [pc, #452]	; (8000bfc <main+0x394>)
 8000a38:	605a      	str	r2, [r3, #4]
		DevNVRAM.calibration_table.MagicNum = MAGIC_KEY_DEFINE;
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4a6e      	ldr	r2, [pc, #440]	; (8000bf8 <main+0x390>)
 8000a3e:	609a      	str	r2, [r3, #8]

		DevNVRAM.sector.NWrite = 0;
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
		DevNVRAM.sector.CheckSum = HAL_CRC_Calculate(&hcrc,&DevNVRAM.calibration_table, sizeof(DevNVRAM));
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	4619      	mov	r1, r3
 8000a50:	486b      	ldr	r0, [pc, #428]	; (8000c00 <main+0x398>)
 8000a52:	f001 fd34 	bl	80024be <HAL_CRC_Calculate>
 8000a56:	4602      	mov	r2, r0
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
//--------------------------------------------------------------------------

		l_Address = FLASH_TABLE_START_ADDR;
 8000a5e:	4b64      	ldr	r3, [pc, #400]	; (8000bf0 <main+0x388>)
 8000a60:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		l_Error = 0;
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
		l_Index = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8000a70:	e018      	b.n	8000aa4 <main+0x23c>
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t*) l_Address) {
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8000a78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a7c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d004      	beq.n	8000a90 <main+0x228>
				l_Error++;
 8000a86:	463b      	mov	r3, r7
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	601a      	str	r2, [r3, #0]
			}
			l_Index = l_Index + 1;
 8000a90:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000a94:	3301      	adds	r3, #1
 8000a96:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
			l_Address = l_Address + 4;
 8000a9a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8000aa4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000aa8:	4a52      	ldr	r2, [pc, #328]	; (8000bf4 <main+0x38c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d9e1      	bls.n	8000a72 <main+0x20a>
		}

		if (l_Error > 0) { // конфигурация изменилась сохраняем
 8000aae:	463b      	mov	r3, r7
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d039      	beq.n	8000b2a <main+0x2c2>
			// Готовим к записи в память
			HAL_FLASH_Unlock();
 8000ab6:	f001 fda5 	bl	8002604 <HAL_FLASH_Unlock>
			// Очищаем страницу памяти
			HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8000aba:	463b      	mov	r3, r7
 8000abc:	4619      	mov	r1, r3
 8000abe:	484b      	ldr	r0, [pc, #300]	; (8000bec <main+0x384>)
 8000ac0:	f001 fe88 	bl	80027d4 <HAL_FLASHEx_Erase>
			//Пишем данные в память
			l_Address = FLASH_TABLE_START_ADDR;
 8000ac4:	4b4a      	ldr	r3, [pc, #296]	; (8000bf0 <main+0x388>)
 8000ac6:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
			l_Error = 0x00;
 8000aca:	463b      	mov	r3, r7
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
			l_Index = 0x00;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

			while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8000ad6:	e021      	b.n	8000b1c <main+0x2b4>
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
						DevNVRAM.data32[l_Index]) != HAL_OK) {
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8000ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	f8d7 1414 	ldr.w	r1, [r7, #1044]	; 0x414
 8000aec:	2002      	movs	r0, #2
 8000aee:	f001 fd19 	bl	8002524 <HAL_FLASH_Program>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d004      	beq.n	8000b02 <main+0x29a>
					l_Error++;
 8000af8:	463b      	mov	r3, r7
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	463b      	mov	r3, r7
 8000b00:	601a      	str	r2, [r3, #0]
				}

				l_Address = l_Address + 4;
 8000b02:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000b06:	3304      	adds	r3, #4
 8000b08:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
				l_Index = l_Index + 1;
 8000b0c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000b10:	3301      	adds	r3, #1
 8000b12:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
				HAL_Delay(10);
 8000b16:	200a      	movs	r0, #10
 8000b18:	f000 fef4 	bl	8001904 <HAL_Delay>
			while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8000b1c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000b20:	4a34      	ldr	r2, [pc, #208]	; (8000bf4 <main+0x38c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d9d8      	bls.n	8000ad8 <main+0x270>
			}
			HAL_FLASH_Lock();
 8000b26:	f001 fd93 	bl	8002650 <HAL_FLASH_Lock>
	// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!


// Циклически проверяем соотвествует ли информация в памяти массиву настроек?

	l_Address = FLASH_TABLE_START_ADDR;
 8000b2a:	4b31      	ldr	r3, [pc, #196]	; (8000bf0 <main+0x388>)
 8000b2c:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	l_Error = 0;
 8000b30:	463b      	mov	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
	l_Index = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	//Читаем и сравниваем
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8000b3c:	e018      	b.n	8000b70 <main+0x308>
		if (DevNVRAM.data32[l_Index] != *(__IO uint32_t*) l_Address) {
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8000b44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b48:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d004      	beq.n	8000b5c <main+0x2f4>
			l_Error++;
 8000b52:	463b      	mov	r3, r7
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	463b      	mov	r3, r7
 8000b5a:	601a      	str	r2, [r3, #0]
		}
		l_Index = l_Index + 1;
 8000b5c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000b60:	3301      	adds	r3, #1
 8000b62:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
		l_Address = l_Address + 4;
 8000b66:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000b6a:	3304      	adds	r3, #4
 8000b6c:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8000b70:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000b74:	4a1f      	ldr	r2, [pc, #124]	; (8000bf4 <main+0x38c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d9e1      	bls.n	8000b3e <main+0x2d6>
	}

	if (l_Error > 0) { // конфигурация изменилась сохраняем
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d069      	beq.n	8000c56 <main+0x3ee>
		// Готовим к записи в память
		HAL_FLASH_Unlock();
 8000b82:	f001 fd3f 	bl	8002604 <HAL_FLASH_Unlock>
		// Очищаем страницу памяти
		HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8000b86:	463b      	mov	r3, r7
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4818      	ldr	r0, [pc, #96]	; (8000bec <main+0x384>)
 8000b8c:	f001 fe22 	bl	80027d4 <HAL_FLASHEx_Erase>
		//Пишем данные в память
		l_Address = FLASH_TABLE_START_ADDR;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <main+0x388>)
 8000b92:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
		l_Error = 0x00;
 8000b96:	463b      	mov	r3, r7
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
		l_Index = 0x00;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

		DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8000ba8:	1c5a      	adds	r2, r3, #1
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
		DevNVRAM.sector.CheckSum = HAL_CRC_Calculate(&hcrc,&DevNVRAM.calibration_table,sizeof(DevNVRAM.calibration_table));
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4811      	ldr	r0, [pc, #68]	; (8000c00 <main+0x398>)
 8000bba:	f001 fc80 	bl	80024be <HAL_CRC_Calculate>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8000bc6:	e03f      	b.n	8000c48 <main+0x3e0>
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000004 	.word	0x20000004
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	0800b5b4 	.word	0x0800b5b4
 8000bdc:	20000214 	.word	0x20000214
 8000be0:	20000508 	.word	0x20000508
 8000be4:	200004b8 	.word	0x200004b8
 8000be8:	20000550 	.word	0x20000550
 8000bec:	20000278 	.word	0x20000278
 8000bf0:	0801fc00 	.word	0x0801fc00
 8000bf4:	0801ffff 	.word	0x0801ffff
 8000bf8:	48151623 	.word	0x48151623
 8000bfc:	01121001 	.word	0x01121001
 8000c00:	20000500 	.word	0x20000500
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
					DevNVRAM.data32[l_Index]) != HAL_OK) {
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8000c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8000c0e:	461a      	mov	r2, r3
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	f8d7 1414 	ldr.w	r1, [r7, #1044]	; 0x414
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f001 fc83 	bl	8002524 <HAL_FLASH_Program>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d004      	beq.n	8000c2e <main+0x3c6>
				l_Error++;
 8000c24:	463b      	mov	r3, r7
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	601a      	str	r2, [r3, #0]
			}

			l_Address = l_Address + 4;
 8000c2e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000c32:	3304      	adds	r3, #4
 8000c34:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
			l_Index = l_Index + 1;
 8000c38:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
			HAL_Delay(10);
 8000c42:	200a      	movs	r0, #10
 8000c44:	f000 fe5e 	bl	8001904 <HAL_Delay>
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8000c48:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000c4c:	4a87      	ldr	r2, [pc, #540]	; (8000e6c <main+0x604>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d9d8      	bls.n	8000c04 <main+0x39c>
		}
		HAL_FLASH_Lock();
 8000c52:	f001 fcfd 	bl	8002650 <HAL_FLASH_Lock>
	while (1) {

//**************************************************************************
#if  TEST_READ_BTN

		uint32_t ms = HAL_GetTick();
 8000c56:	f000 fe4b 	bl	80018f0 <HAL_GetTick>
 8000c5a:	f8c7 0408 	str.w	r0, [r7, #1032]	; 0x408
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 8000c5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c62:	4883      	ldr	r0, [pc, #524]	; (8000e70 <main+0x608>)
 8000c64:	f001 ffe2 	bl	8002c2c <HAL_GPIO_ReadPin>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50) {
 8000c6e:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d115      	bne.n	8000ca2 <main+0x43a>
 8000c76:	4b7f      	ldr	r3, [pc, #508]	; (8000e74 <main+0x60c>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d111      	bne.n	8000ca2 <main+0x43a>
 8000c7e:	4b7e      	ldr	r3, [pc, #504]	; (8000e78 <main+0x610>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	2b32      	cmp	r3, #50	; 0x32
 8000c8a:	d90a      	bls.n	8000ca2 <main+0x43a>
			short_state1 = 1;
 8000c8c:	4b79      	ldr	r3, [pc, #484]	; (8000e74 <main+0x60c>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 8000c92:	4b7a      	ldr	r3, [pc, #488]	; (8000e7c <main+0x614>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8000c98:	4a77      	ldr	r2, [pc, #476]	; (8000e78 <main+0x610>)
 8000c9a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e033      	b.n	8000d0a <main+0x4a2>
		} else if (key1_state
 8000ca2:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d112      	bne.n	8000cd0 <main+0x468>
				== 0&& !long_state1 && (ms - time_key1) > KEY_LONG_DELAY) {
 8000caa:	4b74      	ldr	r3, [pc, #464]	; (8000e7c <main+0x614>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10e      	bne.n	8000cd0 <main+0x468>
 8000cb2:	4b71      	ldr	r3, [pc, #452]	; (8000e78 <main+0x610>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cc0:	d906      	bls.n	8000cd0 <main+0x468>
			long_state1 = 1;
 8000cc2:	4b6e      	ldr	r3, [pc, #440]	; (8000e7c <main+0x614>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 8000cc8:	4b6d      	ldr	r3, [pc, #436]	; (8000e80 <main+0x618>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e01c      	b.n	8000d0a <main+0x4a2>

		} else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50) {
 8000cd0:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d118      	bne.n	8000d0a <main+0x4a2>
 8000cd8:	4b66      	ldr	r3, [pc, #408]	; (8000e74 <main+0x60c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d014      	beq.n	8000d0a <main+0x4a2>
 8000ce0:	4b65      	ldr	r3, [pc, #404]	; (8000e78 <main+0x610>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b32      	cmp	r3, #50	; 0x32
 8000cec:	d90d      	bls.n	8000d0a <main+0x4a2>
			short_state1 = 0;
 8000cee:	4b61      	ldr	r3, [pc, #388]	; (8000e74 <main+0x60c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8000cf4:	4a60      	ldr	r2, [pc, #384]	; (8000e78 <main+0x610>)
 8000cf6:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000cfa:	6013      	str	r3, [r2, #0]

			if (!long_state1) {
 8000cfc:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <main+0x614>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <main+0x4a2>
				// действие на короткое нажатие
				btn1_short_rd = 1;
 8000d04:	4b5f      	ldr	r3, [pc, #380]	; (8000e84 <main+0x61c>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 8000d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0e:	4858      	ldr	r0, [pc, #352]	; (8000e70 <main+0x608>)
 8000d10:	f001 ff8c 	bl	8002c2c <HAL_GPIO_ReadPin>
 8000d14:	4603      	mov	r3, r0
 8000d16:	f887 3406 	strb.w	r3, [r7, #1030]	; 0x406

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50) {
 8000d1a:	f897 3406 	ldrb.w	r3, [r7, #1030]	; 0x406
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d115      	bne.n	8000d4e <main+0x4e6>
 8000d22:	4b59      	ldr	r3, [pc, #356]	; (8000e88 <main+0x620>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d111      	bne.n	8000d4e <main+0x4e6>
 8000d2a:	4b58      	ldr	r3, [pc, #352]	; (8000e8c <main+0x624>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b32      	cmp	r3, #50	; 0x32
 8000d36:	d90a      	bls.n	8000d4e <main+0x4e6>
			short_state2 = 1;
 8000d38:	4b53      	ldr	r3, [pc, #332]	; (8000e88 <main+0x620>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 8000d3e:	4b54      	ldr	r3, [pc, #336]	; (8000e90 <main+0x628>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8000d44:	4a51      	ldr	r2, [pc, #324]	; (8000e8c <main+0x624>)
 8000d46:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	e033      	b.n	8000db6 <main+0x54e>
		} else if (key2_state
 8000d4e:	f897 3406 	ldrb.w	r3, [r7, #1030]	; 0x406
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d112      	bne.n	8000d7c <main+0x514>
				== 0&& !long_state2 && (ms - time_key2) > KEY_LONG_DELAY) {
 8000d56:	4b4e      	ldr	r3, [pc, #312]	; (8000e90 <main+0x628>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10e      	bne.n	8000d7c <main+0x514>
 8000d5e:	4b4b      	ldr	r3, [pc, #300]	; (8000e8c <main+0x624>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d6c:	d906      	bls.n	8000d7c <main+0x514>
			long_state2 = 1;
 8000d6e:	4b48      	ldr	r3, [pc, #288]	; (8000e90 <main+0x628>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 8000d74:	4b47      	ldr	r3, [pc, #284]	; (8000e94 <main+0x62c>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	e01c      	b.n	8000db6 <main+0x54e>
		} else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50) {
 8000d7c:	f897 3406 	ldrb.w	r3, [r7, #1030]	; 0x406
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d118      	bne.n	8000db6 <main+0x54e>
 8000d84:	4b40      	ldr	r3, [pc, #256]	; (8000e88 <main+0x620>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d014      	beq.n	8000db6 <main+0x54e>
 8000d8c:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <main+0x624>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b32      	cmp	r3, #50	; 0x32
 8000d98:	d90d      	bls.n	8000db6 <main+0x54e>
			short_state2 = 0;
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <main+0x620>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8000da0:	4a3a      	ldr	r2, [pc, #232]	; (8000e8c <main+0x624>)
 8000da2:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000da6:	6013      	str	r3, [r2, #0]

			if (!long_state2) {
 8000da8:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <main+0x628>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <main+0x54e>
				// действие на короткое нажатие
				btn2_short_rd = 1;
 8000db0:	4b39      	ldr	r3, [pc, #228]	; (8000e98 <main+0x630>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 8000db6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dba:	482d      	ldr	r0, [pc, #180]	; (8000e70 <main+0x608>)
 8000dbc:	f001 ff36 	bl	8002c2c <HAL_GPIO_ReadPin>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f887 3405 	strb.w	r3, [r7, #1029]	; 0x405
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50) {
 8000dc6:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d115      	bne.n	8000dfa <main+0x592>
 8000dce:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <main+0x634>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d111      	bne.n	8000dfa <main+0x592>
 8000dd6:	4b32      	ldr	r3, [pc, #200]	; (8000ea0 <main+0x638>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	2b32      	cmp	r3, #50	; 0x32
 8000de2:	d90a      	bls.n	8000dfa <main+0x592>
			short_state3 = 1;
 8000de4:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <main+0x634>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 8000dea:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <main+0x63c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8000df0:	4a2b      	ldr	r2, [pc, #172]	; (8000ea0 <main+0x638>)
 8000df2:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	e037      	b.n	8000e6a <main+0x602>
		} else if (key3_state
 8000dfa:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d112      	bne.n	8000e28 <main+0x5c0>
				== 0&& !long_state3 && (ms - time_key3) > KEY_LONG_DELAY) {
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <main+0x63c>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10e      	bne.n	8000e28 <main+0x5c0>
 8000e0a:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <main+0x638>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e18:	d906      	bls.n	8000e28 <main+0x5c0>
			long_state3 = 1;
 8000e1a:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <main+0x63c>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 8000e20:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <main+0x640>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	e020      	b.n	8000e6a <main+0x602>
		} else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50) {
 8000e28:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	f47f af12 	bne.w	8000c56 <main+0x3ee>
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <main+0x634>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f43f af0d 	beq.w	8000c56 <main+0x3ee>
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <main+0x638>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b32      	cmp	r3, #50	; 0x32
 8000e48:	f67f af05 	bls.w	8000c56 <main+0x3ee>
			short_state3 = 0;
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <main+0x634>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8000e52:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <main+0x638>)
 8000e54:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000e58:	6013      	str	r3, [r2, #0]

			if (!long_state3) {
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <main+0x63c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f47f aef9 	bne.w	8000c56 <main+0x3ee>
				// действие на короткое нажатие
				btn3_short_rd = 1;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <main+0x644>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
	while (1) {
 8000e6a:	e6f4      	b.n	8000c56 <main+0x3ee>
 8000e6c:	0801ffff 	.word	0x0801ffff
 8000e70:	40010c00 	.word	0x40010c00
 8000e74:	20000254 	.word	0x20000254
 8000e78:	20000258 	.word	0x20000258
 8000e7c:	20000255 	.word	0x20000255
 8000e80:	2000025c 	.word	0x2000025c
 8000e84:	2000025d 	.word	0x2000025d
 8000e88:	2000025e 	.word	0x2000025e
 8000e8c:	20000260 	.word	0x20000260
 8000e90:	2000025f 	.word	0x2000025f
 8000e94:	20000264 	.word	0x20000264
 8000e98:	20000265 	.word	0x20000265
 8000e9c:	20000266 	.word	0x20000266
 8000ea0:	20000268 	.word	0x20000268
 8000ea4:	20000267 	.word	0x20000267
 8000ea8:	2000026c 	.word	0x2000026c
 8000eac:	2000026d 	.word	0x2000026d

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b094      	sub	sp, #80	; 0x50
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eba:	2228      	movs	r2, #40	; 0x28
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f009 fa40 	bl	800a344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000efc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 fa50 	bl	80043ac <HAL_RCC_OscConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f12:	f000 fa09 	bl	8001328 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f16:	230f      	movs	r3, #15
 8000f18:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2102      	movs	r1, #2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 fcba 	bl	80048ac <HAL_RCC_ClockConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f3e:	f000 f9f3 	bl	8001328 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000f42:	2312      	movs	r3, #18
 8000f44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f4a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 fe30 	bl	8004bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f5e:	f000 f9e3 	bl	8001328 <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	3750      	adds	r7, #80	; 0x50
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_ADC1_Init+0x74>)
 8000f7e:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <MX_ADC1_Init+0x78>)
 8000f80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_ADC1_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_ADC1_Init+0x74>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_ADC1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_ADC1_Init+0x74>)
 8000f96:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_ADC1_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_ADC1_Init+0x74>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <MX_ADC1_Init+0x74>)
 8000faa:	f000 fccf 	bl	800194c <HAL_ADC_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000fb4:	f000 f9b8 	bl	8001328 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_ADC1_Init+0x74>)
 8000fca:	f000 ff25 	bl	8001e18 <HAL_ADC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000fd4:	f000 f9a8 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000550 	.word	0x20000550
 8000fe4:	40012400 	.word	0x40012400

08000fe8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_CRC_Init+0x20>)
 8000fee:	4a07      	ldr	r2, [pc, #28]	; (800100c <MX_CRC_Init+0x24>)
 8000ff0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_CRC_Init+0x20>)
 8000ff4:	f001 fa47 	bl	8002486 <HAL_CRC_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ffe:	f000 f993 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000500 	.word	0x20000500
 800100c:	40023000 	.word	0x40023000

08001010 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_SPI1_Init+0x68>)
 8001016:	4a19      	ldr	r2, [pc, #100]	; (800107c <MX_SPI1_Init+0x6c>)
 8001018:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_SPI1_Init+0x68>)
 800101c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001020:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <MX_SPI1_Init+0x68>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <MX_SPI1_Init+0x68>)
 800102a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800102e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_SPI1_Init+0x68>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <MX_SPI1_Init+0x68>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_SPI1_Init+0x68>)
 800103e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001042:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_SPI1_Init+0x68>)
 8001046:	2208      	movs	r2, #8
 8001048:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_SPI1_Init+0x68>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_SPI1_Init+0x68>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <MX_SPI1_Init+0x68>)
 8001058:	2200      	movs	r2, #0
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_SPI1_Init+0x68>)
 800105e:	220a      	movs	r2, #10
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_SPI1_Init+0x68>)
 8001064:	f003 ff22 	bl	8004eac <HAL_SPI_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800106e:	f000 f95b 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000580 	.word	0x20000580
 800107c:	40013000 	.word	0x40013000

08001080 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <MX_TIM3_Init+0xbc>)
 800109e:	4a28      	ldr	r2, [pc, #160]	; (8001140 <MX_TIM3_Init+0xc0>)
 80010a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <MX_TIM3_Init+0xbc>)
 80010a4:	2247      	movs	r2, #71	; 0x47
 80010a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <MX_TIM3_Init+0xbc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <MX_TIM3_Init+0xbc>)
 80010b0:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80010b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <MX_TIM3_Init+0xbc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_TIM3_Init+0xbc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80010c2:	481e      	ldr	r0, [pc, #120]	; (800113c <MX_TIM3_Init+0xbc>)
 80010c4:	f004 f958 	bl	8005378 <HAL_TIM_IC_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010ce:	f000 f92b 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010da:	f107 0310 	add.w	r3, r7, #16
 80010de:	4619      	mov	r1, r3
 80010e0:	4816      	ldr	r0, [pc, #88]	; (800113c <MX_TIM3_Init+0xbc>)
 80010e2:	f004 fe37 	bl	8005d54 <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010ec:	f000 f91c 	bl	8001328 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010f0:	2300      	movs	r3, #0
 80010f2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010f4:	2301      	movs	r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_TIM3_Init+0xbc>)
 8001108:	f004 fb94 	bl	8005834 <HAL_TIM_IC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001112:	f000 f909 	bl	8001328 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001116:	2302      	movs	r3, #2
 8001118:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800111a:	2302      	movs	r3, #2
 800111c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	2204      	movs	r2, #4
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_TIM3_Init+0xbc>)
 8001126:	f004 fb85 	bl	8005834 <HAL_TIM_IC_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001130:	f000 f8fa 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000508 	.word	0x20000508
 8001140:	40000400 	.word	0x40000400

08001144 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <MX_TIM4_Init+0xbc>)
 8001162:	4a28      	ldr	r2, [pc, #160]	; (8001204 <MX_TIM4_Init+0xc0>)
 8001164:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <MX_TIM4_Init+0xbc>)
 8001168:	2247      	movs	r2, #71	; 0x47
 800116a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <MX_TIM4_Init+0xbc>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <MX_TIM4_Init+0xbc>)
 8001174:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001178:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <MX_TIM4_Init+0xbc>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <MX_TIM4_Init+0xbc>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001186:	481e      	ldr	r0, [pc, #120]	; (8001200 <MX_TIM4_Init+0xbc>)
 8001188:	f004 f8f6 	bl	8005378 <HAL_TIM_IC_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001192:	f000 f8c9 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4619      	mov	r1, r3
 80011a4:	4816      	ldr	r0, [pc, #88]	; (8001200 <MX_TIM4_Init+0xbc>)
 80011a6:	f004 fdd5 	bl	8005d54 <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80011b0:	f000 f8ba 	bl	8001328 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011b4:	2300      	movs	r3, #0
 80011b6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011b8:	2301      	movs	r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	4619      	mov	r1, r3
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <MX_TIM4_Init+0xbc>)
 80011cc:	f004 fb32 	bl	8005834 <HAL_TIM_IC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80011d6:	f000 f8a7 	bl	8001328 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80011da:	2302      	movs	r3, #2
 80011dc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80011de:	2302      	movs	r3, #2
 80011e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011e2:	463b      	mov	r3, r7
 80011e4:	2204      	movs	r2, #4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_TIM4_Init+0xbc>)
 80011ea:	f004 fb23 	bl	8005834 <HAL_TIM_IC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80011f4:	f000 f898 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200004b8 	.word	0x200004b8
 8001204:	40000800 	.word	0x40000800

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121c:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <MX_GPIO_Init+0x110>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a3d      	ldr	r2, [pc, #244]	; (8001318 <MX_GPIO_Init+0x110>)
 8001222:	f043 0310 	orr.w	r3, r3, #16
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <MX_GPIO_Init+0x110>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001234:	4b38      	ldr	r3, [pc, #224]	; (8001318 <MX_GPIO_Init+0x110>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4a37      	ldr	r2, [pc, #220]	; (8001318 <MX_GPIO_Init+0x110>)
 800123a:	f043 0320 	orr.w	r3, r3, #32
 800123e:	6193      	str	r3, [r2, #24]
 8001240:	4b35      	ldr	r3, [pc, #212]	; (8001318 <MX_GPIO_Init+0x110>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	f003 0320 	and.w	r3, r3, #32
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b32      	ldr	r3, [pc, #200]	; (8001318 <MX_GPIO_Init+0x110>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a31      	ldr	r2, [pc, #196]	; (8001318 <MX_GPIO_Init+0x110>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <MX_GPIO_Init+0x110>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001264:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <MX_GPIO_Init+0x110>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a2b      	ldr	r2, [pc, #172]	; (8001318 <MX_GPIO_Init+0x110>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b29      	ldr	r3, [pc, #164]	; (8001318 <MX_GPIO_Init+0x110>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001282:	4826      	ldr	r0, [pc, #152]	; (800131c <MX_GPIO_Init+0x114>)
 8001284:	f001 fce9 	bl	8002c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f240 4112 	movw	r1, #1042	; 0x412
 800128e:	4824      	ldr	r0, [pc, #144]	; (8001320 <MX_GPIO_Init+0x118>)
 8001290:	f001 fce3 	bl	8002c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	2104      	movs	r1, #4
 8001298:	4821      	ldr	r0, [pc, #132]	; (8001320 <MX_GPIO_Init+0x118>)
 800129a:	f001 fcde 	bl	8002c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800129e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	4619      	mov	r1, r3
 80012b6:	4819      	ldr	r0, [pc, #100]	; (800131c <MX_GPIO_Init+0x114>)
 80012b8:	f001 fb34 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 80012bc:	f240 4316 	movw	r3, #1046	; 0x416
 80012c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	4619      	mov	r1, r3
 80012d4:	4812      	ldr	r0, [pc, #72]	; (8001320 <MX_GPIO_Init+0x118>)
 80012d6:	f001 fb25 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_GPIO_Init+0x11c>)
 80012f0:	f001 fb18 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80012f4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	4619      	mov	r1, r3
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_GPIO_Init+0x11c>)
 800130a:	f001 fb0b 	bl	8002924 <HAL_GPIO_Init>

}
 800130e:	bf00      	nop
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	40011000 	.word	0x40011000
 8001320:	40010800 	.word	0x40010800
 8001324:	40010c00 	.word	0x40010c00

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_MspInit+0x5c>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_MspInit+0x5c>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6193      	str	r3, [r2, #24]
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_MspInit+0x5c>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_MspInit+0x5c>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_MspInit+0x5c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_MspInit+0x5c>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_MspInit+0x60>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_MspInit+0x60>)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000

08001398 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <HAL_ADC_MspInit+0x7c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d129      	bne.n	800140c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_ADC_MspInit+0x80>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a16      	ldr	r2, [pc, #88]	; (8001418 <HAL_ADC_MspInit+0x80>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_ADC_MspInit+0x80>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_ADC_MspInit+0x80>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a10      	ldr	r2, [pc, #64]	; (8001418 <HAL_ADC_MspInit+0x80>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_ADC_MspInit+0x80>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e8:	2308      	movs	r3, #8
 80013ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ec:	2303      	movs	r3, #3
 80013ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	4809      	ldr	r0, [pc, #36]	; (800141c <HAL_ADC_MspInit+0x84>)
 80013f8:	f001 fa94 	bl	8002924 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	2012      	movs	r0, #18
 8001402:	f001 f80a 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001406:	2012      	movs	r0, #18
 8001408:	f001 f823 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800140c:	bf00      	nop
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40012400 	.word	0x40012400
 8001418:	40021000 	.word	0x40021000
 800141c:	40010800 	.word	0x40010800

08001420 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a09      	ldr	r2, [pc, #36]	; (8001454 <HAL_CRC_MspInit+0x34>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d10b      	bne.n	800144a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_CRC_MspInit+0x38>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	4a08      	ldr	r2, [pc, #32]	; (8001458 <HAL_CRC_MspInit+0x38>)
 8001438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800143c:	6153      	str	r3, [r2, #20]
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_CRC_MspInit+0x38>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	40023000 	.word	0x40023000
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <HAL_SPI_MspInit+0x70>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d123      	bne.n	80014c4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_SPI_MspInit+0x74>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <HAL_SPI_MspInit+0x74>)
 8001482:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_SPI_MspInit+0x74>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_SPI_MspInit+0x74>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <HAL_SPI_MspInit+0x74>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_SPI_MspInit+0x74>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 80014ac:	23a0      	movs	r3, #160	; 0xa0
 80014ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <HAL_SPI_MspInit+0x78>)
 80014c0:	f001 fa30 	bl	8002924 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014c4:	bf00      	nop
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40013000 	.word	0x40013000
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010800 	.word	0x40010800

080014d8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	; 0x30
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a3b      	ldr	r2, [pc, #236]	; (80015e0 <HAL_TIM_IC_MspInit+0x108>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d13e      	bne.n	8001576 <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014f8:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <HAL_TIM_IC_MspInit+0x10c>)
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	4a39      	ldr	r2, [pc, #228]	; (80015e4 <HAL_TIM_IC_MspInit+0x10c>)
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	61d3      	str	r3, [r2, #28]
 8001504:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <HAL_TIM_IC_MspInit+0x10c>)
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001510:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <HAL_TIM_IC_MspInit+0x10c>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <HAL_TIM_IC_MspInit+0x10c>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <HAL_TIM_IC_MspInit+0x10c>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001528:	2310      	movs	r3, #16
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	482b      	ldr	r0, [pc, #172]	; (80015e8 <HAL_TIM_IC_MspInit+0x110>)
 800153c:	f001 f9f2 	bl	8002924 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_TIM_IC_MspInit+0x114>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001548:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001550:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800155e:	4a23      	ldr	r2, [pc, #140]	; (80015ec <HAL_TIM_IC_MspInit+0x114>)
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	201d      	movs	r0, #29
 800156a:	f000 ff56 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800156e:	201d      	movs	r0, #29
 8001570:	f000 ff6f 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001574:	e030      	b.n	80015d8 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_TIM_IC_MspInit+0x118>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d12b      	bne.n	80015d8 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_TIM_IC_MspInit+0x10c>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_TIM_IC_MspInit+0x10c>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	61d3      	str	r3, [r2, #28]
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_TIM_IC_MspInit+0x10c>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_TIM_IC_MspInit+0x10c>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a11      	ldr	r2, [pc, #68]	; (80015e4 <HAL_TIM_IC_MspInit+0x10c>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_TIM_IC_MspInit+0x10c>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015b0:	2340      	movs	r3, #64	; 0x40
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4809      	ldr	r0, [pc, #36]	; (80015e8 <HAL_TIM_IC_MspInit+0x110>)
 80015c4:	f001 f9ae 	bl	8002924 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	201e      	movs	r0, #30
 80015ce:	f000 ff24 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015d2:	201e      	movs	r0, #30
 80015d4:	f000 ff3d 	bl	8002452 <HAL_NVIC_EnableIRQ>
}
 80015d8:	bf00      	nop
 80015da:	3730      	adds	r7, #48	; 0x30
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40000400 	.word	0x40000400
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010c00 	.word	0x40010c00
 80015ec:	40010000 	.word	0x40010000
 80015f0:	40000800 	.word	0x40000800

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <HardFault_Handler+0x4>

08001606 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <MemManage_Handler+0x4>

0800160c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <BusFault_Handler+0x4>

08001612 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <UsageFault_Handler+0x4>

08001618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001640:	f000 f944 	bl	80018cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <ADC1_2_IRQHandler+0x10>)
 800164e:	f000 fb17 	bl	8001c80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000550 	.word	0x20000550

0800165c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001662:	f001 fc43 	bl	8002eec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000ec4 	.word	0x20000ec4

08001670 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <TIM3_IRQHandler+0x10>)
 8001676:	f003 ffd5 	bl	8005624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000508 	.word	0x20000508

08001684 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <TIM4_IRQHandler+0x10>)
 800168a:	f003 ffcb 	bl	8005624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200004b8 	.word	0x200004b8

08001698 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e00a      	b.n	80016c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016aa:	f3af 8000 	nop.w
 80016ae:	4601      	mov	r1, r0
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	60ba      	str	r2, [r7, #8]
 80016b6:	b2ca      	uxtb	r2, r1
 80016b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbf0      	blt.n	80016aa <_read+0x12>
	}

return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
	return -1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f8:	605a      	str	r2, [r3, #4]
	return 0;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <_isatty>:

int _isatty(int file)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
	return 1;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
	return 0;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
	...

08001734 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <_sbrk+0x50>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <_sbrk+0x16>
		heap_end = &end;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <_sbrk+0x50>)
 8001746:	4a10      	ldr	r2, [pc, #64]	; (8001788 <_sbrk+0x54>)
 8001748:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <_sbrk+0x50>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <_sbrk+0x50>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	466a      	mov	r2, sp
 800175a:	4293      	cmp	r3, r2
 800175c:	d907      	bls.n	800176e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800175e:	f008 fdb9 	bl	800a2d4 <__errno>
 8001762:	4603      	mov	r3, r0
 8001764:	220c      	movs	r2, #12
 8001766:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
 800176c:	e006      	b.n	800177c <_sbrk+0x48>
	}

	heap_end += incr;
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <_sbrk+0x50>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	4a03      	ldr	r2, [pc, #12]	; (8001784 <_sbrk+0x50>)
 8001778:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000288 	.word	0x20000288
 8001788:	200011c0 	.word	0x200011c0

0800178c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <SystemInit+0x5c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <SystemInit+0x5c>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <SystemInit+0x5c>)
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4911      	ldr	r1, [pc, #68]	; (80017e8 <SystemInit+0x5c>)
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <SystemInit+0x60>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <SystemInit+0x5c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <SystemInit+0x5c>)
 80017ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80017b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <SystemInit+0x5c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <SystemInit+0x5c>)
 80017be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <SystemInit+0x5c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <SystemInit+0x5c>)
 80017ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80017ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <SystemInit+0x5c>)
 80017d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80017d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <SystemInit+0x64>)
 80017da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017de:	609a      	str	r2, [r3, #8]
#endif 
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40021000 	.word	0x40021000
 80017ec:	f8ff0000 	.word	0xf8ff0000
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017f6:	e003      	b.n	8001800 <LoopCopyDataInit>

080017f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017fe:	3104      	adds	r1, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001800:	480a      	ldr	r0, [pc, #40]	; (800182c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001804:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001806:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001808:	d3f6      	bcc.n	80017f8 <CopyDataInit>
  ldr r2, =_sbss
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800180c:	e002      	b.n	8001814 <LoopFillZerobss>

0800180e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001810:	f842 3b04 	str.w	r3, [r2], #4

08001814 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001816:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001818:	d3f9      	bcc.n	800180e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800181a:	f7ff ffb7 	bl	800178c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181e:	f008 fd5f 	bl	800a2e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001822:	f7ff f821 	bl	8000868 <main>
  bx lr
 8001826:	4770      	bx	lr
  ldr r3, =_sidata
 8001828:	0800b73c 	.word	0x0800b73c
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001830:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8001834:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8001838:	200011c0 	.word	0x200011c0

0800183c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800183c:	e7fe      	b.n	800183c <CAN1_RX1_IRQHandler>
	...

08001840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_Init+0x28>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_Init+0x28>)
 800184a:	f043 0310 	orr.w	r3, r3, #16
 800184e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001850:	2003      	movs	r0, #3
 8001852:	f000 fdd7 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001856:	2000      	movs	r0, #0
 8001858:	f000 f808 	bl	800186c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800185c:	f7ff fd6a 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40022000 	.word	0x40022000

0800186c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x54>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_InitTick+0x58>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4619      	mov	r1, r3
 800187e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001882:	fbb3 f3f1 	udiv	r3, r3, r1
 8001886:	fbb2 f3f3 	udiv	r3, r2, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fdef 	bl	800246e <HAL_SYSTICK_Config>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e00e      	b.n	80018b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b0f      	cmp	r3, #15
 800189e:	d80a      	bhi.n	80018b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a0:	2200      	movs	r2, #0
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f000 fdb7 	bl	800241a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ac:	4a06      	ldr	r2, [pc, #24]	; (80018c8 <HAL_InitTick+0x5c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e000      	b.n	80018b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000014 	.word	0x20000014
 80018c4:	2000001c 	.word	0x2000001c
 80018c8:	20000018 	.word	0x20000018

080018cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_IncTick+0x1c>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_IncTick+0x20>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	4a03      	ldr	r2, [pc, #12]	; (80018ec <HAL_IncTick+0x20>)
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	2000001c 	.word	0x2000001c
 80018ec:	200005d8 	.word	0x200005d8

080018f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b02      	ldr	r3, [pc, #8]	; (8001900 <HAL_GetTick+0x10>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	200005d8 	.word	0x200005d8

08001904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800190c:	f7ff fff0 	bl	80018f0 <HAL_GetTick>
 8001910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191c:	d005      	beq.n	800192a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_Delay+0x44>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800192a:	bf00      	nop
 800192c:	f7ff ffe0 	bl	80018f0 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	429a      	cmp	r2, r3
 800193a:	d8f7      	bhi.n	800192c <HAL_Delay+0x28>
  {
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2000001c 	.word	0x2000001c

0800194c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0be      	b.n	8001aec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	2b00      	cmp	r3, #0
 800197a:	d109      	bne.n	8001990 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fd04 	bl	8001398 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fb8b 	bl	80020ac <ADC_ConversionStop_Disable>
 8001996:	4603      	mov	r3, r0
 8001998:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f040 8099 	bne.w	8001ada <HAL_ADC_Init+0x18e>
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f040 8095 	bne.w	8001ada <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019b8:	f023 0302 	bic.w	r3, r3, #2
 80019bc:	f043 0202 	orr.w	r2, r3, #2
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7b1b      	ldrb	r3, [r3, #12]
 80019d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	4313      	orrs	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019e4:	d003      	beq.n	80019ee <HAL_ADC_Init+0xa2>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d102      	bne.n	80019f4 <HAL_ADC_Init+0xa8>
 80019ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f2:	e000      	b.n	80019f6 <HAL_ADC_Init+0xaa>
 80019f4:	2300      	movs	r3, #0
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7d1b      	ldrb	r3, [r3, #20]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d119      	bne.n	8001a38 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7b1b      	ldrb	r3, [r3, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	035a      	lsls	r2, r3, #13
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	e00b      	b.n	8001a38 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	f043 0220 	orr.w	r2, r3, #32
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <HAL_ADC_Init+0x1a8>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a68:	d003      	beq.n	8001a72 <HAL_ADC_Init+0x126>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d104      	bne.n	8001a7c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	051b      	lsls	r3, r3, #20
 8001a7a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_ADC_Init+0x1ac>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	f023 0303 	bic.w	r3, r3, #3
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ab6:	e018      	b.n	8001aea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	f023 0312 	bic.w	r3, r3, #18
 8001ac0:	f043 0210 	orr.w	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ad8:	e007      	b.n	8001aea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f043 0210 	orr.w	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	ffe1f7fd 	.word	0xffe1f7fd
 8001af8:	ff1f0efe 	.word	0xff1f0efe

08001afc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Start_IT+0x1a>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e0a0      	b.n	8001c58 <HAL_ADC_Start_IT+0x15c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 fa72 	bl	8002008 <ADC_Enable>
 8001b24:	4603      	mov	r3, r0
 8001b26:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 808f 	bne.w	8001c4e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a45      	ldr	r2, [pc, #276]	; (8001c60 <HAL_ADC_Start_IT+0x164>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d105      	bne.n	8001b5a <HAL_ADC_Start_IT+0x5e>
 8001b4e:	4b45      	ldr	r3, [pc, #276]	; (8001c64 <HAL_ADC_Start_IT+0x168>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d115      	bne.n	8001b86 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d026      	beq.n	8001bc2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b84:	e01d      	b.n	8001bc2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a33      	ldr	r2, [pc, #204]	; (8001c64 <HAL_ADC_Start_IT+0x168>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d004      	beq.n	8001ba6 <HAL_ADC_Start_IT+0xaa>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a2f      	ldr	r2, [pc, #188]	; (8001c60 <HAL_ADC_Start_IT+0x164>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d10d      	bne.n	8001bc2 <HAL_ADC_Start_IT+0xc6>
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <HAL_ADC_Start_IT+0x168>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d006      	beq.n	8001bdc <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	f023 0206 	bic.w	r2, r3, #6
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bda:	e002      	b.n	8001be2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f06f 0202 	mvn.w	r2, #2
 8001bf2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0220 	orr.w	r2, r2, #32
 8001c02:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c12:	d113      	bne.n	8001c3c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c18:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <HAL_ADC_Start_IT+0x164>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d105      	bne.n	8001c2a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_ADC_Start_IT+0x168>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d108      	bne.n	8001c3c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	e00c      	b.n	8001c56 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	e003      	b.n	8001c56 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40012800 	.word	0x40012800
 8001c64:	40012400 	.word	0x40012400

08001c68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d140      	bne.n	8001d18 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d139      	bne.n	8001d18 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cc6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cca:	d11d      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d119      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0220 	bic.w	r2, r2, #32
 8001ce2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7fe fd93 	bl	8000834 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f06f 0212 	mvn.w	r2, #18
 8001d16:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	2b80      	cmp	r3, #128	; 0x80
 8001d24:	d14f      	bne.n	8001dc6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d148      	bne.n	8001dc6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001d56:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001d5a:	d012      	beq.n	8001d82 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d125      	bne.n	8001db6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001d74:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d78:	d11d      	bne.n	8001db6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d119      	bne.n	8001db6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d90:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d105      	bne.n	8001db6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	f043 0201 	orr.w	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fa4e 	bl	8002258 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 020c 	mvn.w	r2, #12
 8001dc4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd0:	2b40      	cmp	r3, #64	; 0x40
 8001dd2:	d114      	bne.n	8001dfe <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d10d      	bne.n	8001dfe <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f809 	bl	8001e06 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0201 	mvn.w	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x20>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e0dc      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x1da>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b06      	cmp	r3, #6
 8001e46:	d81c      	bhi.n	8001e82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	3b05      	subs	r3, #5
 8001e5a:	221f      	movs	r2, #31
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	4019      	ands	r1, r3
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	3b05      	subs	r3, #5
 8001e74:	fa00 f203 	lsl.w	r2, r0, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e80:	e03c      	b.n	8001efc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d81c      	bhi.n	8001ec4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	3b23      	subs	r3, #35	; 0x23
 8001e9c:	221f      	movs	r2, #31
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	4019      	ands	r1, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b23      	subs	r3, #35	; 0x23
 8001eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec2:	e01b      	b.n	8001efc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3b41      	subs	r3, #65	; 0x41
 8001ed6:	221f      	movs	r2, #31
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	4019      	ands	r1, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	3b41      	subs	r3, #65	; 0x41
 8001ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b09      	cmp	r3, #9
 8001f02:	d91c      	bls.n	8001f3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68d9      	ldr	r1, [r3, #12]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	3b1e      	subs	r3, #30
 8001f16:	2207      	movs	r2, #7
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	4019      	ands	r1, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6898      	ldr	r0, [r3, #8]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b1e      	subs	r3, #30
 8001f30:	fa00 f203 	lsl.w	r2, r0, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	e019      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6919      	ldr	r1, [r3, #16]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	2207      	movs	r2, #7
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	4019      	ands	r1, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6898      	ldr	r0, [r3, #8]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d003      	beq.n	8001f82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f7e:	2b11      	cmp	r3, #17
 8001f80:	d132      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <HAL_ADC_ConfigChannel+0x1e4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d125      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d126      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fa8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	d11a      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fb2:	4b13      	ldr	r3, [pc, #76]	; (8002000 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a13      	ldr	r2, [pc, #76]	; (8002004 <HAL_ADC_ConfigChannel+0x1ec>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	0c9a      	lsrs	r2, r3, #18
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fc8:	e002      	b.n	8001fd0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f9      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x1b2>
 8001fd6:	e007      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	f043 0220 	orr.w	r2, r3, #32
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	40012400 	.word	0x40012400
 8002000:	20000014 	.word	0x20000014
 8002004:	431bde83 	.word	0x431bde83

08002008 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d039      	beq.n	800209a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <ADC_Enable+0x9c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <ADC_Enable+0xa0>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	0c9b      	lsrs	r3, r3, #18
 8002042:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002044:	e002      	b.n	800204c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	3b01      	subs	r3, #1
 800204a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f9      	bne.n	8002046 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002052:	f7ff fc4d 	bl	80018f0 <HAL_GetTick>
 8002056:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002058:	e018      	b.n	800208c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800205a:	f7ff fc49 	bl	80018f0 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d911      	bls.n	800208c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	f043 0210 	orr.w	r2, r3, #16
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e007      	b.n	800209c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d1df      	bne.n	800205a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000014 	.word	0x20000014
 80020a8:	431bde83 	.word	0x431bde83

080020ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d127      	bne.n	8002116 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020d6:	f7ff fc0b 	bl	80018f0 <HAL_GetTick>
 80020da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020dc:	e014      	b.n	8002108 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020de:	f7ff fc07 	bl	80018f0 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d90d      	bls.n	8002108 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	f043 0210 	orr.w	r2, r3, #16
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e007      	b.n	8002118 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d0e3      	beq.n	80020de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_ADCEx_Calibration_Start+0x1e>
 800213a:	2302      	movs	r3, #2
 800213c:	e086      	b.n	800224c <HAL_ADCEx_Calibration_Start+0x12c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffb0 	bl	80020ac <ADC_ConversionStop_Disable>
 800214c:	4603      	mov	r3, r0
 800214e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002150:	7dfb      	ldrb	r3, [r7, #23]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d175      	bne.n	8002242 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800215e:	f023 0302 	bic.w	r3, r3, #2
 8002162:	f043 0202 	orr.w	r2, r3, #2
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800216a:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <HAL_ADCEx_Calibration_Start+0x134>)
 800216c:	681c      	ldr	r4, [r3, #0]
 800216e:	2002      	movs	r0, #2
 8002170:	f002 fdd8 	bl	8004d24 <HAL_RCCEx_GetPeriphCLKFreq>
 8002174:	4603      	mov	r3, r0
 8002176:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800217a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800217c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800217e:	e002      	b.n	8002186 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3b01      	subs	r3, #1
 8002184:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f9      	bne.n	8002180 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff3b 	bl	8002008 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0208 	orr.w	r2, r2, #8
 80021a0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80021a2:	f7ff fba5 	bl	80018f0 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80021a8:	e014      	b.n	80021d4 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80021aa:	f7ff fba1 	bl	80018f0 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b0a      	cmp	r3, #10
 80021b6:	d90d      	bls.n	80021d4 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	f023 0312 	bic.w	r3, r3, #18
 80021c0:	f043 0210 	orr.w	r2, r3, #16
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e03b      	b.n	800224c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1e3      	bne.n	80021aa <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0204 	orr.w	r2, r2, #4
 80021f0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80021f2:	f7ff fb7d 	bl	80018f0 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80021f8:	e014      	b.n	8002224 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80021fa:	f7ff fb79 	bl	80018f0 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b0a      	cmp	r3, #10
 8002206:	d90d      	bls.n	8002224 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	f023 0312 	bic.w	r3, r3, #18
 8002210:	f043 0210 	orr.w	r2, r3, #16
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e013      	b.n	800224c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1e3      	bne.n	80021fa <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	f023 0303 	bic.w	r3, r3, #3
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800224a:	7dfb      	ldrb	r3, [r7, #23]
}
 800224c:	4618      	mov	r0, r3
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd90      	pop	{r4, r7, pc}
 8002254:	20000014 	.word	0x20000014

08002258 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
	...

0800226c <__NVIC_SetPriorityGrouping>:
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4906      	ldr	r1, [pc, #24]	; (8002304 <__NVIC_EnableIRQ+0x34>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	; (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <SysTick_Config>:
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff90 	bl	8002308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff2d 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff42 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff90 	bl	800235c <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5f 	bl	8002308 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff35 	bl	80022d0 <__NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ffa2 	bl	80023c0 <SysTick_Config>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e00e      	b.n	80024b6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	795b      	ldrb	r3, [r3, #5]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7fe ffb9 	bl	8001420 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80024be:	b480      	push	{r7}
 80024c0:	b087      	sub	sp, #28
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2202      	movs	r2, #2
 80024d2:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	e00a      	b.n	8002500 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	441a      	add	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3301      	adds	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d3f0      	bcc.n	80024ea <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002516:	693b      	ldr	r3, [r7, #16]
}
 8002518:	4618      	mov	r0, r3
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
	...

08002524 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800253e:	4b2f      	ldr	r3, [pc, #188]	; (80025fc <HAL_FLASH_Program+0xd8>)
 8002540:	7e1b      	ldrb	r3, [r3, #24]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_FLASH_Program+0x26>
 8002546:	2302      	movs	r3, #2
 8002548:	e054      	b.n	80025f4 <HAL_FLASH_Program+0xd0>
 800254a:	4b2c      	ldr	r3, [pc, #176]	; (80025fc <HAL_FLASH_Program+0xd8>)
 800254c:	2201      	movs	r2, #1
 800254e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002550:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002554:	f000 f8a8 	bl	80026a8 <FLASH_WaitForLastOperation>
 8002558:	4603      	mov	r3, r0
 800255a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d144      	bne.n	80025ec <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d102      	bne.n	800256e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002568:	2301      	movs	r3, #1
 800256a:	757b      	strb	r3, [r7, #21]
 800256c:	e007      	b.n	800257e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d102      	bne.n	800257a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002574:	2302      	movs	r3, #2
 8002576:	757b      	strb	r3, [r7, #21]
 8002578:	e001      	b.n	800257e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800257a:	2304      	movs	r3, #4
 800257c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800257e:	2300      	movs	r3, #0
 8002580:	75bb      	strb	r3, [r7, #22]
 8002582:	e02d      	b.n	80025e0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002584:	7dbb      	ldrb	r3, [r7, #22]
 8002586:	005a      	lsls	r2, r3, #1
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	eb02 0c03 	add.w	ip, r2, r3
 800258e:	7dbb      	ldrb	r3, [r7, #22]
 8002590:	0119      	lsls	r1, r3, #4
 8002592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002596:	f1c1 0620 	rsb	r6, r1, #32
 800259a:	f1a1 0020 	sub.w	r0, r1, #32
 800259e:	fa22 f401 	lsr.w	r4, r2, r1
 80025a2:	fa03 f606 	lsl.w	r6, r3, r6
 80025a6:	4334      	orrs	r4, r6
 80025a8:	fa23 f000 	lsr.w	r0, r3, r0
 80025ac:	4304      	orrs	r4, r0
 80025ae:	fa23 f501 	lsr.w	r5, r3, r1
 80025b2:	b2a3      	uxth	r3, r4
 80025b4:	4619      	mov	r1, r3
 80025b6:	4660      	mov	r0, ip
 80025b8:	f000 f85a 	bl	8002670 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025c0:	f000 f872 	bl	80026a8 <FLASH_WaitForLastOperation>
 80025c4:	4603      	mov	r3, r0
 80025c6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <HAL_FLASH_Program+0xdc>)
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	4a0c      	ldr	r2, [pc, #48]	; (8002600 <HAL_FLASH_Program+0xdc>)
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d107      	bne.n	80025ea <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80025da:	7dbb      	ldrb	r3, [r7, #22]
 80025dc:	3301      	adds	r3, #1
 80025de:	75bb      	strb	r3, [r7, #22]
 80025e0:	7dba      	ldrb	r2, [r7, #22]
 80025e2:	7d7b      	ldrb	r3, [r7, #21]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d3cd      	bcc.n	8002584 <HAL_FLASH_Program+0x60>
 80025e8:	e000      	b.n	80025ec <HAL_FLASH_Program+0xc8>
      {
        break;
 80025ea:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <HAL_FLASH_Program+0xd8>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	761a      	strb	r2, [r3, #24]

  return status;
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025fc:	200005e0 	.word	0x200005e0
 8002600:	40022000 	.word	0x40022000

08002604 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_FLASH_Unlock+0x40>)
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_FLASH_Unlock+0x40>)
 800261c:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_FLASH_Unlock+0x44>)
 800261e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <HAL_FLASH_Unlock+0x40>)
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <HAL_FLASH_Unlock+0x48>)
 8002624:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <HAL_FLASH_Unlock+0x40>)
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002636:	79fb      	ldrb	r3, [r7, #7]
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40022000 	.word	0x40022000
 8002648:	45670123 	.word	0x45670123
 800264c:	cdef89ab 	.word	0xcdef89ab

08002650 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_FLASH_Lock+0x1c>)
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	4a04      	ldr	r2, [pc, #16]	; (800266c <HAL_FLASH_Lock+0x1c>)
 800265a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800265e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40022000 	.word	0x40022000

08002670 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <FLASH_Program_HalfWord+0x30>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <FLASH_Program_HalfWord+0x34>)
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <FLASH_Program_HalfWord+0x34>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	887a      	ldrh	r2, [r7, #2]
 8002692:	801a      	strh	r2, [r3, #0]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	200005e0 	.word	0x200005e0
 80026a4:	40022000 	.word	0x40022000

080026a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80026b0:	f7ff f91e 	bl	80018f0 <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80026b6:	e010      	b.n	80026da <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026be:	d00c      	beq.n	80026da <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <FLASH_WaitForLastOperation+0x2e>
 80026c6:	f7ff f913 	bl	80018f0 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d201      	bcs.n	80026da <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e025      	b.n	8002726 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <FLASH_WaitForLastOperation+0x88>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1e8      	bne.n	80026b8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <FLASH_WaitForLastOperation+0x88>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <FLASH_WaitForLastOperation+0x88>)
 80026f4:	2220      	movs	r2, #32
 80026f6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80026f8:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <FLASH_WaitForLastOperation+0x88>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10b      	bne.n	800271c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <FLASH_WaitForLastOperation+0x88>)
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800270c:	2b00      	cmp	r3, #0
 800270e:	d105      	bne.n	800271c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <FLASH_WaitForLastOperation+0x88>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800271c:	f000 f80a 	bl	8002734 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40022000 	.word	0x40022000

08002734 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <FLASH_SetErrorCode+0x98>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800274a:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <FLASH_SetErrorCode+0x9c>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	f043 0302 	orr.w	r3, r3, #2
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <FLASH_SetErrorCode+0x9c>)
 8002754:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f043 0310 	orr.w	r3, r3, #16
 800275c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800275e:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <FLASH_SetErrorCode+0x98>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800276a:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <FLASH_SetErrorCode+0x9c>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <FLASH_SetErrorCode+0x9c>)
 8002774:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <FLASH_SetErrorCode+0x98>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <FLASH_SetErrorCode+0x9c>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <FLASH_SetErrorCode+0x9c>)
 8002794:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <FLASH_SetErrorCode+0x98>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	4a0c      	ldr	r2, [pc, #48]	; (80027cc <FLASH_SetErrorCode+0x98>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f240 1201 	movw	r2, #257	; 0x101
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d106      	bne.n	80027ba <FLASH_SetErrorCode+0x86>
 80027ac:	4b07      	ldr	r3, [pc, #28]	; (80027cc <FLASH_SetErrorCode+0x98>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	4a06      	ldr	r2, [pc, #24]	; (80027cc <FLASH_SetErrorCode+0x98>)
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	61d3      	str	r3, [r2, #28]
}  
 80027b8:	e002      	b.n	80027c0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80027ba:	4a04      	ldr	r2, [pc, #16]	; (80027cc <FLASH_SetErrorCode+0x98>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	60d3      	str	r3, [r2, #12]
}  
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40022000 	.word	0x40022000
 80027d0:	200005e0 	.word	0x200005e0

080027d4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027e6:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <HAL_FLASHEx_Erase+0xd0>)
 80027e8:	7e1b      	ldrb	r3, [r3, #24]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_FLASHEx_Erase+0x1e>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e053      	b.n	800289a <HAL_FLASHEx_Erase+0xc6>
 80027f2:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <HAL_FLASHEx_Erase+0xd0>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d116      	bne.n	800282e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002800:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002804:	f7ff ff50 	bl	80026a8 <FLASH_WaitForLastOperation>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d141      	bne.n	8002892 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800280e:	2001      	movs	r0, #1
 8002810:	f000 f84c 	bl	80028ac <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002814:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002818:	f7ff ff46 	bl	80026a8 <FLASH_WaitForLastOperation>
 800281c:	4603      	mov	r3, r0
 800281e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002820:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <HAL_FLASHEx_Erase+0xd4>)
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	4a20      	ldr	r2, [pc, #128]	; (80028a8 <HAL_FLASHEx_Erase+0xd4>)
 8002826:	f023 0304 	bic.w	r3, r3, #4
 800282a:	6113      	str	r3, [r2, #16]
 800282c:	e031      	b.n	8002892 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800282e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002832:	f7ff ff39 	bl	80026a8 <FLASH_WaitForLastOperation>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d12a      	bne.n	8002892 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f04f 32ff 	mov.w	r2, #4294967295
 8002842:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	e019      	b.n	8002880 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800284c:	68b8      	ldr	r0, [r7, #8]
 800284e:	f000 f849 	bl	80028e4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002852:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002856:	f7ff ff27 	bl	80026a8 <FLASH_WaitForLastOperation>
 800285a:	4603      	mov	r3, r0
 800285c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_FLASHEx_Erase+0xd4>)
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <HAL_FLASHEx_Erase+0xd4>)
 8002864:	f023 0302 	bic.w	r3, r3, #2
 8002868:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	601a      	str	r2, [r3, #0]
            break;
 8002876:	e00c      	b.n	8002892 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800287e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	029a      	lsls	r2, r3, #10
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	429a      	cmp	r2, r3
 8002890:	d3dc      	bcc.n	800284c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <HAL_FLASHEx_Erase+0xd0>)
 8002894:	2200      	movs	r2, #0
 8002896:	761a      	strb	r2, [r3, #24]

  return status;
 8002898:	7bfb      	ldrb	r3, [r7, #15]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200005e0 	.word	0x200005e0
 80028a8:	40022000 	.word	0x40022000

080028ac <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <FLASH_MassErase+0x30>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <FLASH_MassErase+0x34>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <FLASH_MassErase+0x34>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <FLASH_MassErase+0x34>)
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <FLASH_MassErase+0x34>)
 80028cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028d0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	200005e0 	.word	0x200005e0
 80028e0:	40022000 	.word	0x40022000

080028e4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <FLASH_PageErase+0x38>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <FLASH_PageErase+0x3c>)
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <FLASH_PageErase+0x3c>)
 80028f8:	f043 0302 	orr.w	r3, r3, #2
 80028fc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80028fe:	4a08      	ldr	r2, [pc, #32]	; (8002920 <FLASH_PageErase+0x3c>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <FLASH_PageErase+0x3c>)
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	4a05      	ldr	r2, [pc, #20]	; (8002920 <FLASH_PageErase+0x3c>)
 800290a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800290e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	200005e0 	.word	0x200005e0
 8002920:	40022000 	.word	0x40022000

08002924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002924:	b480      	push	{r7}
 8002926:	b08b      	sub	sp, #44	; 0x2c
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800292e:	2300      	movs	r3, #0
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002932:	2300      	movs	r3, #0
 8002934:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002936:	e169      	b.n	8002c0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002938:	2201      	movs	r2, #1
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	429a      	cmp	r2, r3
 8002952:	f040 8158 	bne.w	8002c06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4a9a      	ldr	r2, [pc, #616]	; (8002bc4 <HAL_GPIO_Init+0x2a0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d05e      	beq.n	8002a1e <HAL_GPIO_Init+0xfa>
 8002960:	4a98      	ldr	r2, [pc, #608]	; (8002bc4 <HAL_GPIO_Init+0x2a0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d875      	bhi.n	8002a52 <HAL_GPIO_Init+0x12e>
 8002966:	4a98      	ldr	r2, [pc, #608]	; (8002bc8 <HAL_GPIO_Init+0x2a4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d058      	beq.n	8002a1e <HAL_GPIO_Init+0xfa>
 800296c:	4a96      	ldr	r2, [pc, #600]	; (8002bc8 <HAL_GPIO_Init+0x2a4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d86f      	bhi.n	8002a52 <HAL_GPIO_Init+0x12e>
 8002972:	4a96      	ldr	r2, [pc, #600]	; (8002bcc <HAL_GPIO_Init+0x2a8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d052      	beq.n	8002a1e <HAL_GPIO_Init+0xfa>
 8002978:	4a94      	ldr	r2, [pc, #592]	; (8002bcc <HAL_GPIO_Init+0x2a8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d869      	bhi.n	8002a52 <HAL_GPIO_Init+0x12e>
 800297e:	4a94      	ldr	r2, [pc, #592]	; (8002bd0 <HAL_GPIO_Init+0x2ac>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d04c      	beq.n	8002a1e <HAL_GPIO_Init+0xfa>
 8002984:	4a92      	ldr	r2, [pc, #584]	; (8002bd0 <HAL_GPIO_Init+0x2ac>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d863      	bhi.n	8002a52 <HAL_GPIO_Init+0x12e>
 800298a:	4a92      	ldr	r2, [pc, #584]	; (8002bd4 <HAL_GPIO_Init+0x2b0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d046      	beq.n	8002a1e <HAL_GPIO_Init+0xfa>
 8002990:	4a90      	ldr	r2, [pc, #576]	; (8002bd4 <HAL_GPIO_Init+0x2b0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d85d      	bhi.n	8002a52 <HAL_GPIO_Init+0x12e>
 8002996:	2b12      	cmp	r3, #18
 8002998:	d82a      	bhi.n	80029f0 <HAL_GPIO_Init+0xcc>
 800299a:	2b12      	cmp	r3, #18
 800299c:	d859      	bhi.n	8002a52 <HAL_GPIO_Init+0x12e>
 800299e:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <HAL_GPIO_Init+0x80>)
 80029a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a4:	08002a1f 	.word	0x08002a1f
 80029a8:	080029f9 	.word	0x080029f9
 80029ac:	08002a0b 	.word	0x08002a0b
 80029b0:	08002a4d 	.word	0x08002a4d
 80029b4:	08002a53 	.word	0x08002a53
 80029b8:	08002a53 	.word	0x08002a53
 80029bc:	08002a53 	.word	0x08002a53
 80029c0:	08002a53 	.word	0x08002a53
 80029c4:	08002a53 	.word	0x08002a53
 80029c8:	08002a53 	.word	0x08002a53
 80029cc:	08002a53 	.word	0x08002a53
 80029d0:	08002a53 	.word	0x08002a53
 80029d4:	08002a53 	.word	0x08002a53
 80029d8:	08002a53 	.word	0x08002a53
 80029dc:	08002a53 	.word	0x08002a53
 80029e0:	08002a53 	.word	0x08002a53
 80029e4:	08002a53 	.word	0x08002a53
 80029e8:	08002a01 	.word	0x08002a01
 80029ec:	08002a15 	.word	0x08002a15
 80029f0:	4a79      	ldr	r2, [pc, #484]	; (8002bd8 <HAL_GPIO_Init+0x2b4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029f6:	e02c      	b.n	8002a52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	623b      	str	r3, [r7, #32]
          break;
 80029fe:	e029      	b.n	8002a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	3304      	adds	r3, #4
 8002a06:	623b      	str	r3, [r7, #32]
          break;
 8002a08:	e024      	b.n	8002a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	3308      	adds	r3, #8
 8002a10:	623b      	str	r3, [r7, #32]
          break;
 8002a12:	e01f      	b.n	8002a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	330c      	adds	r3, #12
 8002a1a:	623b      	str	r3, [r7, #32]
          break;
 8002a1c:	e01a      	b.n	8002a54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a26:	2304      	movs	r3, #4
 8002a28:	623b      	str	r3, [r7, #32]
          break;
 8002a2a:	e013      	b.n	8002a54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a34:	2308      	movs	r3, #8
 8002a36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	611a      	str	r2, [r3, #16]
          break;
 8002a3e:	e009      	b.n	8002a54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a40:	2308      	movs	r3, #8
 8002a42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	615a      	str	r2, [r3, #20]
          break;
 8002a4a:	e003      	b.n	8002a54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
          break;
 8002a50:	e000      	b.n	8002a54 <HAL_GPIO_Init+0x130>
          break;
 8002a52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2bff      	cmp	r3, #255	; 0xff
 8002a58:	d801      	bhi.n	8002a5e <HAL_GPIO_Init+0x13a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	e001      	b.n	8002a62 <HAL_GPIO_Init+0x13e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3304      	adds	r3, #4
 8002a62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2bff      	cmp	r3, #255	; 0xff
 8002a68:	d802      	bhi.n	8002a70 <HAL_GPIO_Init+0x14c>
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	e002      	b.n	8002a76 <HAL_GPIO_Init+0x152>
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	3b08      	subs	r3, #8
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	210f      	movs	r1, #15
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	401a      	ands	r2, r3
 8002a88:	6a39      	ldr	r1, [r7, #32]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	431a      	orrs	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 80b1 	beq.w	8002c06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002aa4:	4b4d      	ldr	r3, [pc, #308]	; (8002bdc <HAL_GPIO_Init+0x2b8>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	4a4c      	ldr	r2, [pc, #304]	; (8002bdc <HAL_GPIO_Init+0x2b8>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6193      	str	r3, [r2, #24]
 8002ab0:	4b4a      	ldr	r3, [pc, #296]	; (8002bdc <HAL_GPIO_Init+0x2b8>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002abc:	4a48      	ldr	r2, [pc, #288]	; (8002be0 <HAL_GPIO_Init+0x2bc>)
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4013      	ands	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a40      	ldr	r2, [pc, #256]	; (8002be4 <HAL_GPIO_Init+0x2c0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d013      	beq.n	8002b10 <HAL_GPIO_Init+0x1ec>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a3f      	ldr	r2, [pc, #252]	; (8002be8 <HAL_GPIO_Init+0x2c4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00d      	beq.n	8002b0c <HAL_GPIO_Init+0x1e8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a3e      	ldr	r2, [pc, #248]	; (8002bec <HAL_GPIO_Init+0x2c8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d007      	beq.n	8002b08 <HAL_GPIO_Init+0x1e4>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a3d      	ldr	r2, [pc, #244]	; (8002bf0 <HAL_GPIO_Init+0x2cc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d101      	bne.n	8002b04 <HAL_GPIO_Init+0x1e0>
 8002b00:	2303      	movs	r3, #3
 8002b02:	e006      	b.n	8002b12 <HAL_GPIO_Init+0x1ee>
 8002b04:	2304      	movs	r3, #4
 8002b06:	e004      	b.n	8002b12 <HAL_GPIO_Init+0x1ee>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e002      	b.n	8002b12 <HAL_GPIO_Init+0x1ee>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_GPIO_Init+0x1ee>
 8002b10:	2300      	movs	r3, #0
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	f002 0203 	and.w	r2, r2, #3
 8002b18:	0092      	lsls	r2, r2, #2
 8002b1a:	4093      	lsls	r3, r2
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b22:	492f      	ldr	r1, [pc, #188]	; (8002be0 <HAL_GPIO_Init+0x2bc>)
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	3302      	adds	r3, #2
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d006      	beq.n	8002b4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b3c:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	492c      	ldr	r1, [pc, #176]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]
 8002b48:	e006      	b.n	8002b58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b4a:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	4928      	ldr	r1, [pc, #160]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d006      	beq.n	8002b72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b64:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	4922      	ldr	r1, [pc, #136]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]
 8002b70:	e006      	b.n	8002b80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b72:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	491e      	ldr	r1, [pc, #120]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b8c:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	4918      	ldr	r1, [pc, #96]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]
 8002b98:	e006      	b.n	8002ba8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b9a:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	4914      	ldr	r1, [pc, #80]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d021      	beq.n	8002bf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	490e      	ldr	r1, [pc, #56]	; (8002bf4 <HAL_GPIO_Init+0x2d0>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60cb      	str	r3, [r1, #12]
 8002bc0:	e021      	b.n	8002c06 <HAL_GPIO_Init+0x2e2>
 8002bc2:	bf00      	nop
 8002bc4:	10320000 	.word	0x10320000
 8002bc8:	10310000 	.word	0x10310000
 8002bcc:	10220000 	.word	0x10220000
 8002bd0:	10210000 	.word	0x10210000
 8002bd4:	10120000 	.word	0x10120000
 8002bd8:	10110000 	.word	0x10110000
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40010000 	.word	0x40010000
 8002be4:	40010800 	.word	0x40010800
 8002be8:	40010c00 	.word	0x40010c00
 8002bec:	40011000 	.word	0x40011000
 8002bf0:	40011400 	.word	0x40011400
 8002bf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <HAL_GPIO_Init+0x304>)
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	4909      	ldr	r1, [pc, #36]	; (8002c28 <HAL_GPIO_Init+0x304>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	3301      	adds	r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	fa22 f303 	lsr.w	r3, r2, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f47f ae8e 	bne.w	8002938 <HAL_GPIO_Init+0x14>
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	372c      	adds	r7, #44	; 0x2c
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	40010400 	.word	0x40010400

08002c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	887b      	ldrh	r3, [r7, #2]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
 8002c48:	e001      	b.n	8002c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	807b      	strh	r3, [r7, #2]
 8002c66:	4613      	mov	r3, r2
 8002c68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c6a:	787b      	ldrb	r3, [r7, #1]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c70:	887a      	ldrh	r2, [r7, #2]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c76:	e003      	b.n	8002c80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c78:	887b      	ldrh	r3, [r7, #2]
 8002c7a:	041a      	lsls	r2, r3, #16
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	611a      	str	r2, [r3, #16]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c8c:	b08b      	sub	sp, #44	; 0x2c
 8002c8e:	af06      	add	r7, sp, #24
 8002c90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0fd      	b.n	8002e98 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d106      	bne.n	8002cb6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f007 f865 	bl	8009d80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2203      	movs	r2, #3
 8002cba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 f8dc 	bl	8005e80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	687e      	ldr	r6, [r7, #4]
 8002cd0:	466d      	mov	r5, sp
 8002cd2:	f106 0410 	add.w	r4, r6, #16
 8002cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	602b      	str	r3, [r5, #0]
 8002cde:	1d33      	adds	r3, r6, #4
 8002ce0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce2:	6838      	ldr	r0, [r7, #0]
 8002ce4:	f003 f8a6 	bl	8005e34 <USB_CoreInit>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0ce      	b.n	8002e98 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 f8d7 	bl	8005eb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	73fb      	strb	r3, [r7, #15]
 8002d0a:	e04c      	b.n	8002da6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	b298      	uxth	r0, r3
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	3336      	adds	r3, #54	; 0x36
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3303      	adds	r3, #3
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	440b      	add	r3, r1
 8002d72:	3338      	adds	r3, #56	; 0x38
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	440b      	add	r3, r1
 8002d86:	333c      	adds	r3, #60	; 0x3c
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	440b      	add	r3, r1
 8002d9a:	3340      	adds	r3, #64	; 0x40
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	3301      	adds	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
 8002da6:	7bfa      	ldrb	r2, [r7, #15]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d3ad      	bcc.n	8002d0c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]
 8002db4:	e044      	b.n	8002e40 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002db6:	7bfa      	ldrb	r2, [r7, #15]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	440b      	add	r3, r1
 8002df0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e0e:	7bfa      	ldrb	r2, [r7, #15]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	440b      	add	r3, r1
 8002e32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d3b5      	bcc.n	8002db6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	687e      	ldr	r6, [r7, #4]
 8002e52:	466d      	mov	r5, sp
 8002e54:	f106 0410 	add.w	r4, r6, #16
 8002e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	602b      	str	r3, [r5, #0]
 8002e60:	1d33      	adds	r3, r6, #4
 8002e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e64:	6838      	ldr	r0, [r7, #0]
 8002e66:	f003 f831 	bl	8005ecc <USB_DevInit>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e00d      	b.n	8002e98 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f004 ffcb 	bl	8007e2c <USB_DevDisconnect>

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ea0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_PCD_Start+0x16>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e016      	b.n	8002ee4 <HAL_PCD_Start+0x44>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f002 ffc6 	bl	8005e54 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002ec8:	2101      	movs	r1, #1
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f007 f9cb 	bl	800a266 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f004 ff9f 	bl	8007e18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f004 ffa1 	bl	8007e40 <USB_ReadInterrupts>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f08:	d102      	bne.n	8002f10 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fb61 	bl	80035d2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f004 ff93 	bl	8007e40 <USB_ReadInterrupts>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f24:	d112      	bne.n	8002f4c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f38:	b292      	uxth	r2, r2
 8002f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f006 ff99 	bl	8009e76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002f44:	2100      	movs	r1, #0
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f925 	bl	8003196 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f004 ff75 	bl	8007e40 <USB_ReadInterrupts>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f60:	d10b      	bne.n	8002f7a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f74:	b292      	uxth	r2, r2
 8002f76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f004 ff5e 	bl	8007e40 <USB_ReadInterrupts>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f8e:	d10b      	bne.n	8002fa8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fa2:	b292      	uxth	r2, r2
 8002fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f004 ff47 	bl	8007e40 <USB_ReadInterrupts>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbc:	d126      	bne.n	800300c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0204 	bic.w	r2, r2, #4
 8002fd0:	b292      	uxth	r2, r2
 8002fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0208 	bic.w	r2, r2, #8
 8002fe8:	b292      	uxth	r2, r2
 8002fea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f006 ff7a 	bl	8009ee8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003006:	b292      	uxth	r2, r2
 8003008:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f004 ff15 	bl	8007e40 <USB_ReadInterrupts>
 8003016:	4603      	mov	r3, r0
 8003018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003020:	f040 8084 	bne.w	800312c <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003024:	2300      	movs	r3, #0
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	e011      	b.n	800304e <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	7ffb      	ldrb	r3, [r7, #31]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	441a      	add	r2, r3
 8003036:	7ffb      	ldrb	r3, [r7, #31]
 8003038:	8812      	ldrh	r2, [r2, #0]
 800303a:	b292      	uxth	r2, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	f107 0120 	add.w	r1, r7, #32
 8003042:	440b      	add	r3, r1
 8003044:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003048:	7ffb      	ldrb	r3, [r7, #31]
 800304a:	3301      	adds	r3, #1
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	7ffb      	ldrb	r3, [r7, #31]
 8003050:	2b07      	cmp	r3, #7
 8003052:	d9ea      	bls.n	800302a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800305c:	b29a      	uxth	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	b292      	uxth	r2, r2
 8003068:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003074:	b29a      	uxth	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	b292      	uxth	r2, r2
 8003080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003084:	bf00      	nop
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800308e:	b29b      	uxth	r3, r3
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f6      	beq.n	8003086 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030aa:	b292      	uxth	r2, r2
 80030ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	77fb      	strb	r3, [r7, #31]
 80030b4:	e010      	b.n	80030d8 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80030b6:	7ffb      	ldrb	r3, [r7, #31]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	4611      	mov	r1, r2
 80030be:	7ffa      	ldrb	r2, [r7, #31]
 80030c0:	0092      	lsls	r2, r2, #2
 80030c2:	440a      	add	r2, r1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	f107 0120 	add.w	r1, r7, #32
 80030ca:	440b      	add	r3, r1
 80030cc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80030d0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80030d2:	7ffb      	ldrb	r3, [r7, #31]
 80030d4:	3301      	adds	r3, #1
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	7ffb      	ldrb	r3, [r7, #31]
 80030da:	2b07      	cmp	r3, #7
 80030dc:	d9eb      	bls.n	80030b6 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0208 	orr.w	r2, r2, #8
 80030f0:	b292      	uxth	r2, r2
 80030f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030fe:	b29a      	uxth	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003108:	b292      	uxth	r2, r2
 800310a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003116:	b29a      	uxth	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0204 	orr.w	r2, r2, #4
 8003120:	b292      	uxth	r2, r2
 8003122:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f006 fec4 	bl	8009eb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f004 fe85 	bl	8007e40 <USB_ReadInterrupts>
 8003136:	4603      	mov	r3, r0
 8003138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003140:	d10e      	bne.n	8003160 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800314a:	b29a      	uxth	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003154:	b292      	uxth	r2, r2
 8003156:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f006 fe7d 	bl	8009e5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f004 fe6b 	bl	8007e40 <USB_ReadInterrupts>
 800316a:	4603      	mov	r3, r0
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003174:	d10b      	bne.n	800318e <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800317e:	b29a      	uxth	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003188:	b292      	uxth	r2, r2
 800318a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800318e:	bf00      	nop
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_PCD_SetAddress+0x1a>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e013      	b.n	80031d8 <HAL_PCD_SetAddress+0x42>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f004 fe12 	bl	8007df2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	4608      	mov	r0, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	461a      	mov	r2, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	70fb      	strb	r3, [r7, #3]
 80031f2:	460b      	mov	r3, r1
 80031f4:	803b      	strh	r3, [r7, #0]
 80031f6:	4613      	mov	r3, r2
 80031f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003202:	2b00      	cmp	r3, #0
 8003204:	da0e      	bge.n	8003224 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	705a      	strb	r2, [r3, #1]
 8003222:	e00e      	b.n	8003242 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 0207 	and.w	r2, r3, #7
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	b2da      	uxtb	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800324e:	883a      	ldrh	r2, [r7, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	78ba      	ldrb	r2, [r7, #2]
 8003258:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d004      	beq.n	800326c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800326c:	78bb      	ldrb	r3, [r7, #2]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d102      	bne.n	8003278 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_PCD_EP_Open+0xa6>
 8003282:	2302      	movs	r3, #2
 8003284:	e00e      	b.n	80032a4 <HAL_PCD_EP_Open+0xc4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68f9      	ldr	r1, [r7, #12]
 8003294:	4618      	mov	r0, r3
 8003296:	f002 fe39 	bl	8005f0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80032a2:	7afb      	ldrb	r3, [r7, #11]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	da0e      	bge.n	80032de <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	705a      	strb	r2, [r3, #1]
 80032dc:	e00e      	b.n	80032fc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	f003 0207 	and.w	r2, r3, #7
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	b2da      	uxtb	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_PCD_EP_Close+0x6a>
 8003312:	2302      	movs	r3, #2
 8003314:	e00e      	b.n	8003334 <HAL_PCD_EP_Close+0x88>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68f9      	ldr	r1, [r7, #12]
 8003324:	4618      	mov	r0, r3
 8003326:	f003 f95b 	bl	80065e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	460b      	mov	r3, r1
 800334a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800334c:	7afb      	ldrb	r3, [r7, #11]
 800334e:	f003 0207 	and.w	r2, r3, #7
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4413      	add	r3, r2
 8003362:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2200      	movs	r2, #0
 8003374:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2200      	movs	r2, #0
 800337a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800337c:	7afb      	ldrb	r3, [r7, #11]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	b2da      	uxtb	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003388:	7afb      	ldrb	r3, [r7, #11]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6979      	ldr	r1, [r7, #20]
 8003398:	4618      	mov	r0, r3
 800339a:	f003 fb0d 	bl	80069b8 <USB_EPStartXfer>
 800339e:	e005      	b.n	80033ac <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6979      	ldr	r1, [r7, #20]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f003 fb06 	bl	80069b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	460b      	mov	r3, r1
 80033c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	f003 0207 	and.w	r2, r3, #7
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80033d8:	681b      	ldr	r3, [r3, #0]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	460b      	mov	r3, r1
 80033f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f4:	7afb      	ldrb	r3, [r7, #11]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2200      	movs	r2, #0
 8003428:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2201      	movs	r2, #1
 800342e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003430:	7afb      	ldrb	r3, [r7, #11]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	b2da      	uxtb	r2, r3
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800343c:	7afb      	ldrb	r3, [r7, #11]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6979      	ldr	r1, [r7, #20]
 800344c:	4618      	mov	r0, r3
 800344e:	f003 fab3 	bl	80069b8 <USB_EPStartXfer>
 8003452:	e005      	b.n	8003460 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6979      	ldr	r1, [r7, #20]
 800345a:	4618      	mov	r0, r3
 800345c:	f003 faac 	bl	80069b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	f003 0207 	and.w	r2, r3, #7
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d901      	bls.n	8003488 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e04c      	b.n	8003522 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800348c:	2b00      	cmp	r3, #0
 800348e:	da0e      	bge.n	80034ae <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	705a      	strb	r2, [r3, #1]
 80034ac:	e00c      	b.n	80034c8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_PCD_EP_SetStall+0x7e>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e01c      	b.n	8003522 <HAL_PCD_EP_SetStall+0xb8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68f9      	ldr	r1, [r7, #12]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f004 fb7e 	bl	8007bf8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	2b00      	cmp	r3, #0
 8003504:	d108      	bne.n	8003518 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f004 fca3 	bl	8007e5e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	460b      	mov	r3, r1
 8003534:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	f003 020f 	and.w	r2, r3, #15
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	429a      	cmp	r2, r3
 8003542:	d901      	bls.n	8003548 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e040      	b.n	80035ca <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800354c:	2b00      	cmp	r3, #0
 800354e:	da0e      	bge.n	800356e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	4413      	add	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	705a      	strb	r2, [r3, #1]
 800356c:	e00e      	b.n	800358c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	f003 0207 	and.w	r2, r3, #7
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_PCD_EP_ClrStall+0x82>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e00e      	b.n	80035ca <HAL_PCD_EP_ClrStall+0xa0>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68f9      	ldr	r1, [r7, #12]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f004 fb6c 	bl	8007c98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b08e      	sub	sp, #56	; 0x38
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035da:	e2df      	b.n	8003b9c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035e4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80035e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80035f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 8158 	bne.w	80038ac <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80035fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	2b00      	cmp	r3, #0
 8003604:	d152      	bne.n	80036ac <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	81fb      	strh	r3, [r7, #14]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	89fb      	ldrh	r3, [r7, #14]
 800361e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003626:	b29b      	uxth	r3, r3
 8003628:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3328      	adds	r3, #40	; 0x28
 800362e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003638:	b29b      	uxth	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	3302      	adds	r3, #2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	441a      	add	r2, r3
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800366a:	2100      	movs	r1, #0
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f006 fbda 	bl	8009e26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 828e 	beq.w	8003b9c <PCD_EP_ISR_Handler+0x5ca>
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	f040 8289 	bne.w	8003b9c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003696:	b2da      	uxtb	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	b292      	uxth	r2, r2
 800369e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036aa:	e277      	b.n	8003b9c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80036bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d034      	beq.n	8003730 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	3306      	adds	r3, #6
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003704:	b29b      	uxth	r3, r3
 8003706:	f004 fbfa 	bl	8007efe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29a      	uxth	r2, r3
 8003712:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003716:	4013      	ands	r3, r2
 8003718:	823b      	strh	r3, [r7, #16]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	8a3a      	ldrh	r2, [r7, #16]
 8003720:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003724:	b292      	uxth	r2, r2
 8003726:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f006 fb4f 	bl	8009dcc <HAL_PCD_SetupStageCallback>
 800372e:	e235      	b.n	8003b9c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003730:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003734:	2b00      	cmp	r3, #0
 8003736:	f280 8231 	bge.w	8003b9c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29a      	uxth	r2, r3
 8003742:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003746:	4013      	ands	r3, r2
 8003748:	83bb      	strh	r3, [r7, #28]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	8bba      	ldrh	r2, [r7, #28]
 8003750:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003754:	b292      	uxth	r2, r2
 8003756:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003760:	b29b      	uxth	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	3306      	adds	r3, #6
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d019      	beq.n	80037c0 <PCD_EP_ISR_Handler+0x1ee>
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d015      	beq.n	80037c0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	6959      	ldr	r1, [r3, #20]
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	f004 fbaa 	bl	8007efe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	441a      	add	r2, r3
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80037b8:	2100      	movs	r1, #0
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f006 fb18 	bl	8009df0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	4413      	add	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d112      	bne.n	800380e <PCD_EP_ISR_Handler+0x23c>
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	801a      	strh	r2, [r3, #0]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003806:	b29a      	uxth	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	801a      	strh	r2, [r3, #0]
 800380c:	e02f      	b.n	800386e <PCD_EP_ISR_Handler+0x29c>
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b3e      	cmp	r3, #62	; 0x3e
 8003814:	d813      	bhi.n	800383e <PCD_EP_ISR_Handler+0x26c>
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	633b      	str	r3, [r7, #48]	; 0x30
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <PCD_EP_ISR_Handler+0x25e>
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	3301      	adds	r3, #1
 800382e:	633b      	str	r3, [r7, #48]	; 0x30
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003832:	b29b      	uxth	r3, r3
 8003834:	029b      	lsls	r3, r3, #10
 8003836:	b29a      	uxth	r2, r3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	801a      	strh	r2, [r3, #0]
 800383c:	e017      	b.n	800386e <PCD_EP_ISR_Handler+0x29c>
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	633b      	str	r3, [r7, #48]	; 0x30
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <PCD_EP_ISR_Handler+0x286>
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	3b01      	subs	r3, #1
 8003856:	633b      	str	r3, [r7, #48]	; 0x30
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	b29b      	uxth	r3, r3
 800385c:	029b      	lsls	r3, r3, #10
 800385e:	b29b      	uxth	r3, r3
 8003860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003868:	b29a      	uxth	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	b29b      	uxth	r3, r3
 8003876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800387a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387e:	827b      	strh	r3, [r7, #18]
 8003880:	8a7b      	ldrh	r3, [r7, #18]
 8003882:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003886:	827b      	strh	r3, [r7, #18]
 8003888:	8a7b      	ldrh	r3, [r7, #18]
 800388a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800388e:	827b      	strh	r3, [r7, #18]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	8a7b      	ldrh	r3, [r7, #18]
 8003896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800389a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800389e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	8013      	strh	r3, [r2, #0]
 80038aa:	e177      	b.n	8003b9c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f280 80ea 	bge.w	8003a9c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b29a      	uxth	r2, r3
 80038da:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038de:	4013      	ands	r3, r2
 80038e0:	853b      	strh	r3, [r7, #40]	; 0x28
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80038f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038f6:	b292      	uxth	r2, r2
 80038f8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80038fa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	4413      	add	r3, r2
 800390e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	7b1b      	ldrb	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d122      	bne.n	800395e <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003920:	b29b      	uxth	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	3306      	adds	r3, #6
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003940:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003942:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8087 	beq.w	8003a58 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	6959      	ldr	r1, [r3, #20]
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	88da      	ldrh	r2, [r3, #6]
 8003956:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003958:	f004 fad1 	bl	8007efe <USB_ReadPMA>
 800395c:	e07c      	b.n	8003a58 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	78db      	ldrb	r3, [r3, #3]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d108      	bne.n	8003978 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003966:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003968:	461a      	mov	r2, r3
 800396a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f923 	bl	8003bb8 <HAL_PCD_EP_DB_Receive>
 8003972:	4603      	mov	r3, r0
 8003974:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003976:	e06f      	b.n	8003a58 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800398e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003992:	847b      	strh	r3, [r7, #34]	; 0x22
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d021      	beq.n	8003a16 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039da:	b29b      	uxth	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4413      	add	r3, r2
 80039e6:	3302      	adds	r3, #2
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039fa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80039fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d02a      	beq.n	8003a58 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	6959      	ldr	r1, [r3, #20]
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	891a      	ldrh	r2, [r3, #8]
 8003a0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a10:	f004 fa75 	bl	8007efe <USB_ReadPMA>
 8003a14:	e020      	b.n	8003a58 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	3306      	adds	r3, #6
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a3e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003a40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	6959      	ldr	r1, [r3, #20]
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	895a      	ldrh	r2, [r3, #10]
 8003a52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a54:	f004 fa53 	bl	8007efe <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a5e:	441a      	add	r2, r3
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a6a:	441a      	add	r2, r3
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d004      	beq.n	8003a82 <PCD_EP_ISR_Handler+0x4b0>
 8003a78:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d206      	bcs.n	8003a90 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	4619      	mov	r1, r3
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f006 f9b1 	bl	8009df0 <HAL_PCD_DataOutStageCallback>
 8003a8e:	e005      	b.n	8003a9c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a96:	4618      	mov	r0, r3
 8003a98:	f002 ff8e 	bl	80069b8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003a9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d07a      	beq.n	8003b9c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003aa6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad4:	843b      	strh	r3, [r7, #32]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	441a      	add	r2, r3
 8003ae4:	8c3b      	ldrh	r3, [r7, #32]
 8003ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	78db      	ldrb	r3, [r3, #3]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d108      	bne.n	8003b0c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d146      	bne.n	8003b90 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003b02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d141      	bne.n	8003b90 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	3302      	adds	r3, #2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b34:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	8bfb      	ldrh	r3, [r7, #30]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d906      	bls.n	8003b4e <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	699a      	ldr	r2, [r3, #24]
 8003b44:	8bfb      	ldrh	r3, [r7, #30]
 8003b46:	1ad2      	subs	r2, r2, r3
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	619a      	str	r2, [r3, #24]
 8003b4c:	e002      	b.n	8003b54 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	2200      	movs	r2, #0
 8003b52:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	4619      	mov	r1, r3
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f006 f95f 	bl	8009e26 <HAL_PCD_DataInStageCallback>
 8003b68:	e018      	b.n	8003b9c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	695a      	ldr	r2, [r3, #20]
 8003b6e:	8bfb      	ldrh	r3, [r7, #30]
 8003b70:	441a      	add	r2, r3
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	69da      	ldr	r2, [r3, #28]
 8003b7a:	8bfb      	ldrh	r3, [r7, #30]
 8003b7c:	441a      	add	r2, r3
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f002 ff15 	bl	80069b8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003b8e:	e005      	b.n	8003b9c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b92:	461a      	mov	r2, r3
 8003b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f91b 	bl	8003dd2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	b21b      	sxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f6ff ad17 	blt.w	80035dc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3738      	adds	r7, #56	; 0x38
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bc6:	88fb      	ldrh	r3, [r7, #6]
 8003bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d07e      	beq.n	8003cce <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4413      	add	r3, r2
 8003be4:	3302      	adds	r3, #2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bf8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	8b7b      	ldrh	r3, [r7, #26]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d306      	bcc.n	8003c12 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	699a      	ldr	r2, [r3, #24]
 8003c08:	8b7b      	ldrh	r3, [r7, #26]
 8003c0a:	1ad2      	subs	r2, r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	619a      	str	r2, [r3, #24]
 8003c10:	e002      	b.n	8003c18 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2200      	movs	r2, #0
 8003c16:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d123      	bne.n	8003c68 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3a:	833b      	strh	r3, [r7, #24]
 8003c3c:	8b3b      	ldrh	r3, [r7, #24]
 8003c3e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c42:	833b      	strh	r3, [r7, #24]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	441a      	add	r2, r3
 8003c52:	8b3b      	ldrh	r3, [r7, #24]
 8003c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01f      	beq.n	8003cb2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8c:	82fb      	strh	r3, [r7, #22]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	441a      	add	r2, r3
 8003c9c:	8afb      	ldrh	r3, [r7, #22]
 8003c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003caa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003cb2:	8b7b      	ldrh	r3, [r7, #26]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 8087 	beq.w	8003dc8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	6959      	ldr	r1, [r3, #20]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	891a      	ldrh	r2, [r3, #8]
 8003cc6:	8b7b      	ldrh	r3, [r7, #26]
 8003cc8:	f004 f919 	bl	8007efe <USB_ReadPMA>
 8003ccc:	e07c      	b.n	8003dc8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3306      	adds	r3, #6
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	699a      	ldr	r2, [r3, #24]
 8003cfc:	8b7b      	ldrh	r3, [r7, #26]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d306      	bcc.n	8003d10 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	8b7b      	ldrh	r3, [r7, #26]
 8003d08:	1ad2      	subs	r2, r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	619a      	str	r2, [r3, #24]
 8003d0e:	e002      	b.n	8003d16 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2200      	movs	r2, #0
 8003d14:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d123      	bne.n	8003d66 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d38:	83fb      	strh	r3, [r7, #30]
 8003d3a:	8bfb      	ldrh	r3, [r7, #30]
 8003d3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d40:	83fb      	strh	r3, [r7, #30]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	441a      	add	r2, r3
 8003d50:	8bfb      	ldrh	r3, [r7, #30]
 8003d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d11f      	bne.n	8003db0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8a:	83bb      	strh	r3, [r7, #28]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	441a      	add	r2, r3
 8003d9a:	8bbb      	ldrh	r3, [r7, #28]
 8003d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003db0:	8b7b      	ldrh	r3, [r7, #26]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	6959      	ldr	r1, [r3, #20]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	895a      	ldrh	r2, [r3, #10]
 8003dc2:	8b7b      	ldrh	r3, [r7, #26]
 8003dc4:	f004 f89b 	bl	8007efe <USB_ReadPMA>
    }
  }

  return count;
 8003dc8:	8b7b      	ldrh	r3, [r7, #26]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3720      	adds	r7, #32
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b094      	sub	sp, #80	; 0x50
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8138 	beq.w	800405c <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4413      	add	r3, r2
 8003e00:	3302      	adds	r3, #2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e14:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d907      	bls.n	8003e34 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e2c:	1ad2      	subs	r2, r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	619a      	str	r2, [r3, #24]
 8003e32:	e002      	b.n	8003e3a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2200      	movs	r2, #0
 8003e38:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d12c      	bne.n	8003e9c <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	4619      	mov	r1, r3
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f005 ffec 	bl	8009e26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 823a 	beq.w	80042ce <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e74:	82fb      	strh	r3, [r7, #22]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	441a      	add	r2, r3
 8003e84:	8afb      	ldrh	r3, [r7, #22]
 8003e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	8013      	strh	r3, [r2, #0]
 8003e9a:	e218      	b.n	80042ce <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d01f      	beq.n	8003ee6 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	441a      	add	r2, r3
 8003ed0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	f040 81ee 	bne.w	80042ce <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003efa:	441a      	add	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f08:	441a      	add	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	6a1a      	ldr	r2, [r3, #32]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d309      	bcc.n	8003f2e <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	6a1a      	ldr	r2, [r3, #32]
 8003f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f26:	1ad2      	subs	r2, r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	621a      	str	r2, [r3, #32]
 8003f2c:	e015      	b.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d107      	bne.n	8003f46 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8003f36:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f3a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f44:	e009      	b.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2200      	movs	r2, #0
 8003f58:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	785b      	ldrb	r3, [r3, #1]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d155      	bne.n	800400e <HAL_PCD_EP_DB_Transmit+0x23c>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	61fb      	str	r3, [r7, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	4413      	add	r3, r2
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	011a      	lsls	r2, r3, #4
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	4413      	add	r3, r2
 8003f84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d112      	bne.n	8003fb6 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	801a      	strh	r2, [r3, #0]
 8003fb4:	e047      	b.n	8004046 <HAL_PCD_EP_DB_Transmit+0x274>
 8003fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb8:	2b3e      	cmp	r3, #62	; 0x3e
 8003fba:	d811      	bhi.n	8003fe0 <HAL_PCD_EP_DB_Transmit+0x20e>
 8003fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_PCD_EP_DB_Transmit+0x200>
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	3301      	adds	r3, #1
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	029b      	lsls	r3, r3, #10
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	801a      	strh	r2, [r3, #0]
 8003fde:	e032      	b.n	8004046 <HAL_PCD_EP_DB_Transmit+0x274>
 8003fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <HAL_PCD_EP_DB_Transmit+0x224>
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	029b      	lsls	r3, r3, #10
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004006:	b29a      	uxth	r2, r3
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	801a      	strh	r2, [r3, #0]
 800400c:	e01b      	b.n	8004046 <HAL_PCD_EP_DB_Transmit+0x274>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	785b      	ldrb	r3, [r3, #1]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d117      	bne.n	8004046 <HAL_PCD_EP_DB_Transmit+0x274>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004024:	b29b      	uxth	r3, r3
 8004026:	461a      	mov	r2, r3
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	4413      	add	r3, r2
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	011a      	lsls	r2, r3, #4
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	4413      	add	r3, r2
 8004038:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800403c:	623b      	str	r3, [r7, #32]
 800403e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004040:	b29a      	uxth	r2, r3
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6959      	ldr	r1, [r3, #20]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	891a      	ldrh	r2, [r3, #8]
 8004052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004054:	b29b      	uxth	r3, r3
 8004056:	f003 ff0d 	bl	8007e74 <USB_WritePMA>
 800405a:	e138      	b.n	80042ce <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004064:	b29b      	uxth	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	3306      	adds	r3, #6
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004084:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004090:	429a      	cmp	r2, r3
 8004092:	d307      	bcc.n	80040a4 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	699a      	ldr	r2, [r3, #24]
 8004098:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800409c:	1ad2      	subs	r2, r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	619a      	str	r2, [r3, #24]
 80040a2:	e002      	b.n	80040aa <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2200      	movs	r2, #0
 80040a8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d12e      	bne.n	8004110 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	4619      	mov	r1, r3
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f005 feb4 	bl	8009e26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f040 8102 	bne.w	80042ce <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410a:	b29b      	uxth	r3, r3
 800410c:	8013      	strh	r3, [r2, #0]
 800410e:	e0de      	b.n	80042ce <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d11f      	bne.n	800415a <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004134:	867b      	strh	r3, [r7, #50]	; 0x32
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	441a      	add	r2, r3
 8004144:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800414a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800414e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004156:	b29b      	uxth	r3, r3
 8004158:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004160:	2b01      	cmp	r3, #1
 8004162:	f040 80b4 	bne.w	80042ce <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800416e:	441a      	add	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800417c:	441a      	add	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	429a      	cmp	r2, r3
 800418c:	d309      	bcc.n	80041a2 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6a1a      	ldr	r2, [r3, #32]
 8004198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419a:	1ad2      	subs	r2, r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	621a      	str	r2, [r3, #32]
 80041a0:	e015      	b.n	80041ce <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d107      	bne.n	80041ba <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80041aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80041ae:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041b8:	e009      	b.n	80041ce <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2200      	movs	r2, #0
 80041c4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	643b      	str	r3, [r7, #64]	; 0x40
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	785b      	ldrb	r3, [r3, #1]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d155      	bne.n	8004288 <HAL_PCD_EP_DB_Transmit+0x4b6>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	4413      	add	r3, r2
 80041f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	011a      	lsls	r2, r3, #4
 80041fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fc:	4413      	add	r3, r2
 80041fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
 8004204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004206:	2b00      	cmp	r3, #0
 8004208:	d112      	bne.n	8004230 <HAL_PCD_EP_DB_Transmit+0x45e>
 800420a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004214:	b29a      	uxth	r2, r3
 8004216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004218:	801a      	strh	r2, [r3, #0]
 800421a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004228:	b29a      	uxth	r2, r3
 800422a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422c:	801a      	strh	r2, [r3, #0]
 800422e:	e044      	b.n	80042ba <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004232:	2b3e      	cmp	r3, #62	; 0x3e
 8004234:	d811      	bhi.n	800425a <HAL_PCD_EP_DB_Transmit+0x488>
 8004236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004238:	085b      	lsrs	r3, r3, #1
 800423a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800423c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <HAL_PCD_EP_DB_Transmit+0x47a>
 8004246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004248:	3301      	adds	r3, #1
 800424a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800424c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424e:	b29b      	uxth	r3, r3
 8004250:	029b      	lsls	r3, r3, #10
 8004252:	b29a      	uxth	r2, r3
 8004254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004256:	801a      	strh	r2, [r3, #0]
 8004258:	e02f      	b.n	80042ba <HAL_PCD_EP_DB_Transmit+0x4e8>
 800425a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <HAL_PCD_EP_DB_Transmit+0x49e>
 800426a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800426c:	3b01      	subs	r3, #1
 800426e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004272:	b29b      	uxth	r3, r3
 8004274:	029b      	lsls	r3, r3, #10
 8004276:	b29b      	uxth	r3, r3
 8004278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004280:	b29a      	uxth	r2, r3
 8004282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004284:	801a      	strh	r2, [r3, #0]
 8004286:	e018      	b.n	80042ba <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d114      	bne.n	80042ba <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004298:	b29b      	uxth	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800429e:	4413      	add	r3, r2
 80042a0:	643b      	str	r3, [r7, #64]	; 0x40
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	011a      	lsls	r2, r3, #4
 80042a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042aa:	4413      	add	r3, r2
 80042ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6959      	ldr	r1, [r3, #20]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	895a      	ldrh	r2, [r3, #10]
 80042c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	f003 fdd3 	bl	8007e74 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e8:	82bb      	strh	r3, [r7, #20]
 80042ea:	8abb      	ldrh	r3, [r7, #20]
 80042ec:	f083 0310 	eor.w	r3, r3, #16
 80042f0:	82bb      	strh	r3, [r7, #20]
 80042f2:	8abb      	ldrh	r3, [r7, #20]
 80042f4:	f083 0320 	eor.w	r3, r3, #32
 80042f8:	82bb      	strh	r3, [r7, #20]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	441a      	add	r2, r3
 8004308:	8abb      	ldrh	r3, [r7, #20]
 800430a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800430e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800431a:	b29b      	uxth	r3, r3
 800431c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3750      	adds	r7, #80	; 0x50
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	817b      	strh	r3, [r7, #10]
 8004336:	4613      	mov	r3, r2
 8004338:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800433a:	897b      	ldrh	r3, [r7, #10]
 800433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00b      	beq.n	800435e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004346:	897b      	ldrh	r3, [r7, #10]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4413      	add	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	e009      	b.n	8004372 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800435e:	897a      	ldrh	r2, [r7, #10]
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004372:	893b      	ldrh	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d107      	bne.n	8004388 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2200      	movs	r2, #0
 800437c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	b29a      	uxth	r2, r3
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	80da      	strh	r2, [r3, #6]
 8004386:	e00b      	b.n	80043a0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2201      	movs	r2, #1
 800438c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	b29a      	uxth	r2, r3
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	b29a      	uxth	r2, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e26c      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 8087 	beq.w	80044da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043cc:	4b92      	ldr	r3, [pc, #584]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 030c 	and.w	r3, r3, #12
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d00c      	beq.n	80043f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043d8:	4b8f      	ldr	r3, [pc, #572]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d112      	bne.n	800440a <HAL_RCC_OscConfig+0x5e>
 80043e4:	4b8c      	ldr	r3, [pc, #560]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f0:	d10b      	bne.n	800440a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f2:	4b89      	ldr	r3, [pc, #548]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d06c      	beq.n	80044d8 <HAL_RCC_OscConfig+0x12c>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d168      	bne.n	80044d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e246      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004412:	d106      	bne.n	8004422 <HAL_RCC_OscConfig+0x76>
 8004414:	4b80      	ldr	r3, [pc, #512]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a7f      	ldr	r2, [pc, #508]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800441a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	e02e      	b.n	8004480 <HAL_RCC_OscConfig+0xd4>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10c      	bne.n	8004444 <HAL_RCC_OscConfig+0x98>
 800442a:	4b7b      	ldr	r3, [pc, #492]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a7a      	ldr	r2, [pc, #488]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	4b78      	ldr	r3, [pc, #480]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a77      	ldr	r2, [pc, #476]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800443c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	e01d      	b.n	8004480 <HAL_RCC_OscConfig+0xd4>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800444c:	d10c      	bne.n	8004468 <HAL_RCC_OscConfig+0xbc>
 800444e:	4b72      	ldr	r3, [pc, #456]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a71      	ldr	r2, [pc, #452]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	4b6f      	ldr	r3, [pc, #444]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a6e      	ldr	r2, [pc, #440]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	e00b      	b.n	8004480 <HAL_RCC_OscConfig+0xd4>
 8004468:	4b6b      	ldr	r3, [pc, #428]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a6a      	ldr	r2, [pc, #424]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800446e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	4b68      	ldr	r3, [pc, #416]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a67      	ldr	r2, [pc, #412]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800447a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800447e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d013      	beq.n	80044b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fd fa32 	bl	80018f0 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004490:	f7fd fa2e 	bl	80018f0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	; 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1fa      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a2:	4b5d      	ldr	r3, [pc, #372]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0xe4>
 80044ae:	e014      	b.n	80044da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b0:	f7fd fa1e 	bl	80018f0 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b8:	f7fd fa1a 	bl	80018f0 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b64      	cmp	r3, #100	; 0x64
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e1e6      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ca:	4b53      	ldr	r3, [pc, #332]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f0      	bne.n	80044b8 <HAL_RCC_OscConfig+0x10c>
 80044d6:	e000      	b.n	80044da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d063      	beq.n	80045ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044e6:	4b4c      	ldr	r3, [pc, #304]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00b      	beq.n	800450a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044f2:	4b49      	ldr	r3, [pc, #292]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d11c      	bne.n	8004538 <HAL_RCC_OscConfig+0x18c>
 80044fe:	4b46      	ldr	r3, [pc, #280]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d116      	bne.n	8004538 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450a:	4b43      	ldr	r3, [pc, #268]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_RCC_OscConfig+0x176>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d001      	beq.n	8004522 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e1ba      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004522:	4b3d      	ldr	r3, [pc, #244]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	4939      	ldr	r1, [pc, #228]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004532:	4313      	orrs	r3, r2
 8004534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004536:	e03a      	b.n	80045ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d020      	beq.n	8004582 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004540:	4b36      	ldr	r3, [pc, #216]	; (800461c <HAL_RCC_OscConfig+0x270>)
 8004542:	2201      	movs	r2, #1
 8004544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004546:	f7fd f9d3 	bl	80018f0 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800454e:	f7fd f9cf 	bl	80018f0 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e19b      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004560:	4b2d      	ldr	r3, [pc, #180]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f0      	beq.n	800454e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456c:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4927      	ldr	r1, [pc, #156]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800457c:	4313      	orrs	r3, r2
 800457e:	600b      	str	r3, [r1, #0]
 8004580:	e015      	b.n	80045ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004582:	4b26      	ldr	r3, [pc, #152]	; (800461c <HAL_RCC_OscConfig+0x270>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004588:	f7fd f9b2 	bl	80018f0 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004590:	f7fd f9ae 	bl	80018f0 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e17a      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a2:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d03a      	beq.n	8004630 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d019      	beq.n	80045f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <HAL_RCC_OscConfig+0x274>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c8:	f7fd f992 	bl	80018f0 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d0:	f7fd f98e 	bl	80018f0 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e15a      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045ee:	2001      	movs	r0, #1
 80045f0:	f000 fac4 	bl	8004b7c <RCC_Delay>
 80045f4:	e01c      	b.n	8004630 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_OscConfig+0x274>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fc:	f7fd f978 	bl	80018f0 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004602:	e00f      	b.n	8004624 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004604:	f7fd f974 	bl	80018f0 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d908      	bls.n	8004624 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e140      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000
 800461c:	42420000 	.word	0x42420000
 8004620:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004624:	4b9e      	ldr	r3, [pc, #632]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e9      	bne.n	8004604 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 80a6 	beq.w	800478a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800463e:	2300      	movs	r3, #0
 8004640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004642:	4b97      	ldr	r3, [pc, #604]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10d      	bne.n	800466a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464e:	4b94      	ldr	r3, [pc, #592]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	4a93      	ldr	r2, [pc, #588]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004658:	61d3      	str	r3, [r2, #28]
 800465a:	4b91      	ldr	r3, [pc, #580]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004662:	60bb      	str	r3, [r7, #8]
 8004664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004666:	2301      	movs	r3, #1
 8004668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466a:	4b8e      	ldr	r3, [pc, #568]	; (80048a4 <HAL_RCC_OscConfig+0x4f8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d118      	bne.n	80046a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004676:	4b8b      	ldr	r3, [pc, #556]	; (80048a4 <HAL_RCC_OscConfig+0x4f8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a8a      	ldr	r2, [pc, #552]	; (80048a4 <HAL_RCC_OscConfig+0x4f8>)
 800467c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004682:	f7fd f935 	bl	80018f0 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800468a:	f7fd f931 	bl	80018f0 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b64      	cmp	r3, #100	; 0x64
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e0fd      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469c:	4b81      	ldr	r3, [pc, #516]	; (80048a4 <HAL_RCC_OscConfig+0x4f8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d106      	bne.n	80046be <HAL_RCC_OscConfig+0x312>
 80046b0:	4b7b      	ldr	r3, [pc, #492]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	4a7a      	ldr	r2, [pc, #488]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	6213      	str	r3, [r2, #32]
 80046bc:	e02d      	b.n	800471a <HAL_RCC_OscConfig+0x36e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCC_OscConfig+0x334>
 80046c6:	4b76      	ldr	r3, [pc, #472]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	4a75      	ldr	r2, [pc, #468]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046cc:	f023 0301 	bic.w	r3, r3, #1
 80046d0:	6213      	str	r3, [r2, #32]
 80046d2:	4b73      	ldr	r3, [pc, #460]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	4a72      	ldr	r2, [pc, #456]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046d8:	f023 0304 	bic.w	r3, r3, #4
 80046dc:	6213      	str	r3, [r2, #32]
 80046de:	e01c      	b.n	800471a <HAL_RCC_OscConfig+0x36e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	2b05      	cmp	r3, #5
 80046e6:	d10c      	bne.n	8004702 <HAL_RCC_OscConfig+0x356>
 80046e8:	4b6d      	ldr	r3, [pc, #436]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	4a6c      	ldr	r2, [pc, #432]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046ee:	f043 0304 	orr.w	r3, r3, #4
 80046f2:	6213      	str	r3, [r2, #32]
 80046f4:	4b6a      	ldr	r3, [pc, #424]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	4a69      	ldr	r2, [pc, #420]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6213      	str	r3, [r2, #32]
 8004700:	e00b      	b.n	800471a <HAL_RCC_OscConfig+0x36e>
 8004702:	4b67      	ldr	r3, [pc, #412]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	4a66      	ldr	r2, [pc, #408]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	6213      	str	r3, [r2, #32]
 800470e:	4b64      	ldr	r3, [pc, #400]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	4a63      	ldr	r2, [pc, #396]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004714:	f023 0304 	bic.w	r3, r3, #4
 8004718:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d015      	beq.n	800474e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004722:	f7fd f8e5 	bl	80018f0 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004728:	e00a      	b.n	8004740 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472a:	f7fd f8e1 	bl	80018f0 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	f241 3288 	movw	r2, #5000	; 0x1388
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e0ab      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004740:	4b57      	ldr	r3, [pc, #348]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0ee      	beq.n	800472a <HAL_RCC_OscConfig+0x37e>
 800474c:	e014      	b.n	8004778 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474e:	f7fd f8cf 	bl	80018f0 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fd f8cb 	bl	80018f0 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e095      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476c:	4b4c      	ldr	r3, [pc, #304]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ee      	bne.n	8004756 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004778:	7dfb      	ldrb	r3, [r7, #23]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d105      	bne.n	800478a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477e:	4b48      	ldr	r3, [pc, #288]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	4a47      	ldr	r2, [pc, #284]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004788:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 8081 	beq.w	8004896 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004794:	4b42      	ldr	r3, [pc, #264]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 030c 	and.w	r3, r3, #12
 800479c:	2b08      	cmp	r3, #8
 800479e:	d061      	beq.n	8004864 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d146      	bne.n	8004836 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a8:	4b3f      	ldr	r3, [pc, #252]	; (80048a8 <HAL_RCC_OscConfig+0x4fc>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ae:	f7fd f89f 	bl	80018f0 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fd f89b 	bl	80018f0 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e067      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c8:	4b35      	ldr	r3, [pc, #212]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f0      	bne.n	80047b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047dc:	d108      	bne.n	80047f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047de:	4b30      	ldr	r3, [pc, #192]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	492d      	ldr	r1, [pc, #180]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047f0:	4b2b      	ldr	r3, [pc, #172]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a19      	ldr	r1, [r3, #32]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	430b      	orrs	r3, r1
 8004802:	4927      	ldr	r1, [pc, #156]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004808:	4b27      	ldr	r3, [pc, #156]	; (80048a8 <HAL_RCC_OscConfig+0x4fc>)
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480e:	f7fd f86f 	bl	80018f0 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004816:	f7fd f86b 	bl	80018f0 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e037      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004828:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x46a>
 8004834:	e02f      	b.n	8004896 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004836:	4b1c      	ldr	r3, [pc, #112]	; (80048a8 <HAL_RCC_OscConfig+0x4fc>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483c:	f7fd f858 	bl	80018f0 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004844:	f7fd f854 	bl	80018f0 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e020      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004856:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f0      	bne.n	8004844 <HAL_RCC_OscConfig+0x498>
 8004862:	e018      	b.n	8004896 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e013      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	429a      	cmp	r2, r3
 8004882:	d106      	bne.n	8004892 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d001      	beq.n	8004896 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40007000 	.word	0x40007000
 80048a8:	42420060 	.word	0x42420060

080048ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0d0      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048c0:	4b6a      	ldr	r3, [pc, #424]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d910      	bls.n	80048f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ce:	4b67      	ldr	r3, [pc, #412]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 0207 	bic.w	r2, r3, #7
 80048d6:	4965      	ldr	r1, [pc, #404]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048de:	4b63      	ldr	r3, [pc, #396]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0b8      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d020      	beq.n	800493e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004908:	4b59      	ldr	r3, [pc, #356]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4a58      	ldr	r2, [pc, #352]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 800490e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004912:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004920:	4b53      	ldr	r3, [pc, #332]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4a52      	ldr	r2, [pc, #328]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004926:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800492a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800492c:	4b50      	ldr	r3, [pc, #320]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	494d      	ldr	r1, [pc, #308]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	4313      	orrs	r3, r2
 800493c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d040      	beq.n	80049cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d107      	bne.n	8004962 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004952:	4b47      	ldr	r3, [pc, #284]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d115      	bne.n	800498a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e07f      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d107      	bne.n	800497a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496a:	4b41      	ldr	r3, [pc, #260]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e073      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497a:	4b3d      	ldr	r3, [pc, #244]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e06b      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800498a:	4b39      	ldr	r3, [pc, #228]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f023 0203 	bic.w	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4936      	ldr	r1, [pc, #216]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	4313      	orrs	r3, r2
 800499a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800499c:	f7fc ffa8 	bl	80018f0 <HAL_GetTick>
 80049a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a4:	f7fc ffa4 	bl	80018f0 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e053      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ba:	4b2d      	ldr	r3, [pc, #180]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 020c 	and.w	r2, r3, #12
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d1eb      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049cc:	4b27      	ldr	r3, [pc, #156]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d210      	bcs.n	80049fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049da:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 0207 	bic.w	r2, r3, #7
 80049e2:	4922      	ldr	r1, [pc, #136]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ea:	4b20      	ldr	r3, [pc, #128]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d001      	beq.n	80049fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e032      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a08:	4b19      	ldr	r3, [pc, #100]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4916      	ldr	r1, [pc, #88]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a26:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	490e      	ldr	r1, [pc, #56]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a3a:	f000 f821 	bl	8004a80 <HAL_RCC_GetSysClockFreq>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	490a      	ldr	r1, [pc, #40]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4c:	5ccb      	ldrb	r3, [r1, r3]
 8004a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a52:	4a09      	ldr	r2, [pc, #36]	; (8004a78 <HAL_RCC_ClockConfig+0x1cc>)
 8004a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_RCC_ClockConfig+0x1d0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fc ff06 	bl	800186c <HAL_InitTick>

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40022000 	.word	0x40022000
 8004a70:	40021000 	.word	0x40021000
 8004a74:	0800b684 	.word	0x0800b684
 8004a78:	20000014 	.word	0x20000014
 8004a7c:	20000018 	.word	0x20000018

08004a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a80:	b490      	push	{r4, r7}
 8004a82:	b08a      	sub	sp, #40	; 0x28
 8004a84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a86:	4b2a      	ldr	r3, [pc, #168]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a88:	1d3c      	adds	r4, r7, #4
 8004a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a90:	f240 2301 	movw	r3, #513	; 0x201
 8004a94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004aaa:	4b22      	ldr	r3, [pc, #136]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d002      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d003      	beq.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x46>
 8004abe:	e02d      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ac0:	4b1d      	ldr	r3, [pc, #116]	; (8004b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac2:	623b      	str	r3, [r7, #32]
      break;
 8004ac4:	e02d      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	0c9b      	lsrs	r3, r3, #18
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ad8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d013      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ae4:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	0c5b      	lsrs	r3, r3, #17
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004af2:	4413      	add	r3, r2
 8004af4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004af8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	4a0e      	ldr	r2, [pc, #56]	; (8004b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004afe:	fb02 f203 	mul.w	r2, r2, r3
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0a:	e004      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	4a0b      	ldr	r2, [pc, #44]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b10:	fb02 f303 	mul.w	r3, r2, r3
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	623b      	str	r3, [r7, #32]
      break;
 8004b1a:	e002      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b1e:	623b      	str	r3, [r7, #32]
      break;
 8004b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b22:	6a3b      	ldr	r3, [r7, #32]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3728      	adds	r7, #40	; 0x28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc90      	pop	{r4, r7}
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	0800b5c8 	.word	0x0800b5c8
 8004b34:	40021000 	.word	0x40021000
 8004b38:	007a1200 	.word	0x007a1200
 8004b3c:	003d0900 	.word	0x003d0900

08004b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b44:	4b02      	ldr	r3, [pc, #8]	; (8004b50 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b46:	681b      	ldr	r3, [r3, #0]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr
 8004b50:	20000014 	.word	0x20000014

08004b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b58:	f7ff fff2 	bl	8004b40 <HAL_RCC_GetHCLKFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	0adb      	lsrs	r3, r3, #11
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	4903      	ldr	r1, [pc, #12]	; (8004b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b6a:	5ccb      	ldrb	r3, [r1, r3]
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000
 8004b78:	0800b694 	.word	0x0800b694

08004b7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b84:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <RCC_Delay+0x34>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a0a      	ldr	r2, [pc, #40]	; (8004bb4 <RCC_Delay+0x38>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	0a5b      	lsrs	r3, r3, #9
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b98:	bf00      	nop
  }
  while (Delay --);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1e5a      	subs	r2, r3, #1
 8004b9e:	60fa      	str	r2, [r7, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f9      	bne.n	8004b98 <RCC_Delay+0x1c>
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr
 8004bb0:	20000014 	.word	0x20000014
 8004bb4:	10624dd3 	.word	0x10624dd3

08004bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d07d      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bd8:	4b4f      	ldr	r3, [pc, #316]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10d      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be4:	4b4c      	ldr	r3, [pc, #304]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	4a4b      	ldr	r2, [pc, #300]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	61d3      	str	r3, [r2, #28]
 8004bf0:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c00:	4b46      	ldr	r3, [pc, #280]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d118      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c0c:	4b43      	ldr	r3, [pc, #268]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a42      	ldr	r2, [pc, #264]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c18:	f7fc fe6a 	bl	80018f0 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1e:	e008      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c20:	f7fc fe66 	bl	80018f0 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e06d      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c32:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c3e:	4b36      	ldr	r3, [pc, #216]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d02e      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d027      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c5c:	4b2e      	ldr	r3, [pc, #184]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c66:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c6c:	4b2c      	ldr	r3, [pc, #176]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c72:	4a29      	ldr	r2, [pc, #164]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d014      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c82:	f7fc fe35 	bl	80018f0 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c88:	e00a      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fc fe31 	bl	80018f0 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e036      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca0:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0ee      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cac:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4917      	ldr	r1, [pc, #92]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d105      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc4:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	4a13      	ldr	r2, [pc, #76]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	490b      	ldr	r1, [pc, #44]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d008      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cfa:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	4904      	ldr	r1, [pc, #16]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	42420440 	.word	0x42420440

08004d24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d24:	b590      	push	{r4, r7, lr}
 8004d26:	b08d      	sub	sp, #52	; 0x34
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d2c:	4b5a      	ldr	r3, [pc, #360]	; (8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004d2e:	f107 040c 	add.w	r4, r7, #12
 8004d32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d38:	f240 2301 	movw	r3, #513	; 0x201
 8004d3c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
 8004d42:	2300      	movs	r3, #0
 8004d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d46:	2300      	movs	r3, #0
 8004d48:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b10      	cmp	r3, #16
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b10      	cmp	r3, #16
 8004d5c:	f200 8091 	bhi.w	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d04c      	beq.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d07c      	beq.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004d6c:	e089      	b.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8004d6e:	4b4b      	ldr	r3, [pc, #300]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004d74:	4b49      	ldr	r3, [pc, #292]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8082 	beq.w	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	0c9b      	lsrs	r3, r3, #18
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004d8e:	4413      	add	r3, r2
 8004d90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004d94:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d018      	beq.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004da0:	4b3e      	ldr	r3, [pc, #248]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	0c5b      	lsrs	r3, r3, #17
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004dae:	4413      	add	r3, r2
 8004db0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00d      	beq.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004dc0:	4a37      	ldr	r2, [pc, #220]	; (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd0:	e004      	b.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	4a33      	ldr	r2, [pc, #204]	; (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004ddc:	4b2f      	ldr	r3, [pc, #188]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004de8:	d102      	bne.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004dee:	e04a      	b.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	4a2c      	ldr	r2, [pc, #176]	; (8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004dfe:	e042      	b.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004e00:	4b26      	ldr	r3, [pc, #152]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e10:	d108      	bne.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e22:	e01f      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2e:	d109      	bne.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004e30:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8004e3c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e42:	e00f      	b.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e4e:	d11c      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004e50:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d016      	beq.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8004e5c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e62:	e012      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004e64:	e011      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004e66:	f7ff fe75 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	0b9b      	lsrs	r3, r3, #14
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	3301      	adds	r3, #1
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e80:	e004      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004e82:	bf00      	nop
 8004e84:	e002      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004e8a:	bf00      	nop
    }
  }
  return (frequency);
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3734      	adds	r7, #52	; 0x34
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd90      	pop	{r4, r7, pc}
 8004e96:	bf00      	nop
 8004e98:	0800b5d8 	.word	0x0800b5d8
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	007a1200 	.word	0x007a1200
 8004ea4:	003d0900 	.word	0x003d0900
 8004ea8:	aaaaaaab 	.word	0xaaaaaaab

08004eac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e076      	b.n	8004fac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d108      	bne.n	8004ed8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ece:	d009      	beq.n	8004ee4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	61da      	str	r2, [r3, #28]
 8004ed6:	e005      	b.n	8004ee4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fc faac 	bl	800145c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f68:	ea42 0103 	orr.w	r1, r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	0c1a      	lsrs	r2, r3, #16
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f002 0204 	and.w	r2, r2, #4
 8004f8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69da      	ldr	r2, [r3, #28]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_SPI_Transmit+0x22>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e126      	b.n	8005224 <HAL_SPI_Transmit+0x270>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fde:	f7fc fc87 	bl	80018f0 <HAL_GetTick>
 8004fe2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d002      	beq.n	8004ffa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ff8:	e10b      	b.n	8005212 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_SPI_Transmit+0x52>
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	77fb      	strb	r3, [r7, #31]
    goto error;
 800500a:	e102      	b.n	8005212 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2203      	movs	r2, #3
 8005010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	88fa      	ldrh	r2, [r7, #6]
 800502a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005052:	d10f      	bne.n	8005074 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005062:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005072:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507e:	2b40      	cmp	r3, #64	; 0x40
 8005080:	d007      	beq.n	8005092 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005090:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509a:	d14b      	bne.n	8005134 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <HAL_SPI_Transmit+0xf6>
 80050a4:	8afb      	ldrh	r3, [r7, #22]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d13e      	bne.n	8005128 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	881a      	ldrh	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	1c9a      	adds	r2, r3, #2
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050ce:	e02b      	b.n	8005128 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d112      	bne.n	8005104 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	881a      	ldrh	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	1c9a      	adds	r2, r3, #2
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	86da      	strh	r2, [r3, #54]	; 0x36
 8005102:	e011      	b.n	8005128 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005104:	f7fc fbf4 	bl	80018f0 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d803      	bhi.n	800511c <HAL_SPI_Transmit+0x168>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511a:	d102      	bne.n	8005122 <HAL_SPI_Transmit+0x16e>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d102      	bne.n	8005128 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005126:	e074      	b.n	8005212 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1ce      	bne.n	80050d0 <HAL_SPI_Transmit+0x11c>
 8005132:	e04c      	b.n	80051ce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <HAL_SPI_Transmit+0x18e>
 800513c:	8afb      	ldrh	r3, [r7, #22]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d140      	bne.n	80051c4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	7812      	ldrb	r2, [r2, #0]
 800514e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005168:	e02c      	b.n	80051c4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b02      	cmp	r3, #2
 8005176:	d113      	bne.n	80051a0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	330c      	adds	r3, #12
 8005182:	7812      	ldrb	r2, [r2, #0]
 8005184:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	86da      	strh	r2, [r3, #54]	; 0x36
 800519e:	e011      	b.n	80051c4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051a0:	f7fc fba6 	bl	80018f0 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d803      	bhi.n	80051b8 <HAL_SPI_Transmit+0x204>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b6:	d102      	bne.n	80051be <HAL_SPI_Transmit+0x20a>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d102      	bne.n	80051c4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051c2:	e026      	b.n	8005212 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1cd      	bne.n	800516a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	6839      	ldr	r1, [r7, #0]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f8b2 	bl	800533c <SPI_EndRxTxTransaction>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051ec:	2300      	movs	r3, #0
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	77fb      	strb	r3, [r7, #31]
 800520e:	e000      	b.n	8005212 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005210:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005222:	7ffb      	ldrb	r3, [r7, #31]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3720      	adds	r7, #32
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800523c:	f7fc fb58 	bl	80018f0 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	4413      	add	r3, r2
 800524a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800524c:	f7fc fb50 	bl	80018f0 <HAL_GetTick>
 8005250:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005252:	4b39      	ldr	r3, [pc, #228]	; (8005338 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	015b      	lsls	r3, r3, #5
 8005258:	0d1b      	lsrs	r3, r3, #20
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	fb02 f303 	mul.w	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005262:	e054      	b.n	800530e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d050      	beq.n	800530e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800526c:	f7fc fb40 	bl	80018f0 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	429a      	cmp	r2, r3
 800527a:	d902      	bls.n	8005282 <SPI_WaitFlagStateUntilTimeout+0x56>
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d13d      	bne.n	80052fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005290:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800529a:	d111      	bne.n	80052c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a4:	d004      	beq.n	80052b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ae:	d107      	bne.n	80052c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c8:	d10f      	bne.n	80052ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e017      	b.n	800532e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	3b01      	subs	r3, #1
 800530c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	429a      	cmp	r2, r3
 800531c:	bf0c      	ite	eq
 800531e:	2301      	moveq	r3, #1
 8005320:	2300      	movne	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	429a      	cmp	r2, r3
 800532a:	d19b      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000014 	.word	0x20000014

0800533c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af02      	add	r7, sp, #8
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2200      	movs	r2, #0
 8005350:	2180      	movs	r1, #128	; 0x80
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f7ff ff6a 	bl	800522c <SPI_WaitFlagStateUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005362:	f043 0220 	orr.w	r2, r3, #32
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e000      	b.n	8005370 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e041      	b.n	800540e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fc f89a 	bl	80014d8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4619      	mov	r1, r3
 80053b6:	4610      	mov	r0, r2
 80053b8:	f000 fb38 	bl	8005a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <HAL_TIM_IC_Start_IT+0x1a>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800542e:	b2db      	uxtb	r3, r3
 8005430:	e013      	b.n	800545a <HAL_TIM_IC_Start_IT+0x42>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b04      	cmp	r3, #4
 8005436:	d104      	bne.n	8005442 <HAL_TIM_IC_Start_IT+0x2a>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800543e:	b2db      	uxtb	r3, r3
 8005440:	e00b      	b.n	800545a <HAL_TIM_IC_Start_IT+0x42>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b08      	cmp	r3, #8
 8005446:	d104      	bne.n	8005452 <HAL_TIM_IC_Start_IT+0x3a>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800544e:	b2db      	uxtb	r3, r3
 8005450:	e003      	b.n	800545a <HAL_TIM_IC_Start_IT+0x42>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005458:	b2db      	uxtb	r3, r3
 800545a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d104      	bne.n	800546c <HAL_TIM_IC_Start_IT+0x54>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005468:	b2db      	uxtb	r3, r3
 800546a:	e013      	b.n	8005494 <HAL_TIM_IC_Start_IT+0x7c>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b04      	cmp	r3, #4
 8005470:	d104      	bne.n	800547c <HAL_TIM_IC_Start_IT+0x64>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e00b      	b.n	8005494 <HAL_TIM_IC_Start_IT+0x7c>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b08      	cmp	r3, #8
 8005480:	d104      	bne.n	800548c <HAL_TIM_IC_Start_IT+0x74>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005488:	b2db      	uxtb	r3, r3
 800548a:	e003      	b.n	8005494 <HAL_TIM_IC_Start_IT+0x7c>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005492:	b2db      	uxtb	r3, r3
 8005494:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d102      	bne.n	80054a2 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800549c:	7bbb      	ldrb	r3, [r7, #14]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d001      	beq.n	80054a6 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e0b3      	b.n	800560e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d104      	bne.n	80054b6 <HAL_TIM_IC_Start_IT+0x9e>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b4:	e013      	b.n	80054de <HAL_TIM_IC_Start_IT+0xc6>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d104      	bne.n	80054c6 <HAL_TIM_IC_Start_IT+0xae>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c4:	e00b      	b.n	80054de <HAL_TIM_IC_Start_IT+0xc6>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d104      	bne.n	80054d6 <HAL_TIM_IC_Start_IT+0xbe>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d4:	e003      	b.n	80054de <HAL_TIM_IC_Start_IT+0xc6>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2202      	movs	r2, #2
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d104      	bne.n	80054ee <HAL_TIM_IC_Start_IT+0xd6>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054ec:	e013      	b.n	8005516 <HAL_TIM_IC_Start_IT+0xfe>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d104      	bne.n	80054fe <HAL_TIM_IC_Start_IT+0xe6>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054fc:	e00b      	b.n	8005516 <HAL_TIM_IC_Start_IT+0xfe>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b08      	cmp	r3, #8
 8005502:	d104      	bne.n	800550e <HAL_TIM_IC_Start_IT+0xf6>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800550c:	e003      	b.n	8005516 <HAL_TIM_IC_Start_IT+0xfe>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2202      	movs	r2, #2
 8005512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b0c      	cmp	r3, #12
 800551a:	d841      	bhi.n	80055a0 <HAL_TIM_IC_Start_IT+0x188>
 800551c:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <HAL_TIM_IC_Start_IT+0x10c>)
 800551e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005522:	bf00      	nop
 8005524:	08005559 	.word	0x08005559
 8005528:	080055a1 	.word	0x080055a1
 800552c:	080055a1 	.word	0x080055a1
 8005530:	080055a1 	.word	0x080055a1
 8005534:	0800556b 	.word	0x0800556b
 8005538:	080055a1 	.word	0x080055a1
 800553c:	080055a1 	.word	0x080055a1
 8005540:	080055a1 	.word	0x080055a1
 8005544:	0800557d 	.word	0x0800557d
 8005548:	080055a1 	.word	0x080055a1
 800554c:	080055a1 	.word	0x080055a1
 8005550:	080055a1 	.word	0x080055a1
 8005554:	0800558f 	.word	0x0800558f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0202 	orr.w	r2, r2, #2
 8005566:	60da      	str	r2, [r3, #12]
      break;
 8005568:	e01b      	b.n	80055a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0204 	orr.w	r2, r2, #4
 8005578:	60da      	str	r2, [r3, #12]
      break;
 800557a:	e012      	b.n	80055a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0208 	orr.w	r2, r2, #8
 800558a:	60da      	str	r2, [r3, #12]
      break;
 800558c:	e009      	b.n	80055a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0210 	orr.w	r2, r2, #16
 800559c:	60da      	str	r2, [r3, #12]
      break;
 800559e:	e000      	b.n	80055a2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80055a0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2201      	movs	r2, #1
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fbad 	bl	8005d0a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a18      	ldr	r2, [pc, #96]	; (8005618 <HAL_TIM_IC_Start_IT+0x200>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00e      	beq.n	80055d8 <HAL_TIM_IC_Start_IT+0x1c0>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c2:	d009      	beq.n	80055d8 <HAL_TIM_IC_Start_IT+0x1c0>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a14      	ldr	r2, [pc, #80]	; (800561c <HAL_TIM_IC_Start_IT+0x204>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d004      	beq.n	80055d8 <HAL_TIM_IC_Start_IT+0x1c0>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a13      	ldr	r2, [pc, #76]	; (8005620 <HAL_TIM_IC_Start_IT+0x208>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d111      	bne.n	80055fc <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b06      	cmp	r3, #6
 80055e8:	d010      	beq.n	800560c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0201 	orr.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fa:	e007      	b.n	800560c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40012c00 	.word	0x40012c00
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800

08005624 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b02      	cmp	r3, #2
 8005638:	d122      	bne.n	8005680 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b02      	cmp	r3, #2
 8005646:	d11b      	bne.n	8005680 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0202 	mvn.w	r2, #2
 8005650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fb f86e 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 800566c:	e005      	b.n	800567a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f9c1 	bl	80059f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f9c7 	bl	8005a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b04      	cmp	r3, #4
 800568c:	d122      	bne.n	80056d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b04      	cmp	r3, #4
 800569a:	d11b      	bne.n	80056d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0204 	mvn.w	r2, #4
 80056a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fb f844 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f997 	bl	80059f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f99d 	bl	8005a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d122      	bne.n	8005728 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d11b      	bne.n	8005728 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0208 	mvn.w	r2, #8
 80056f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2204      	movs	r2, #4
 80056fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fb f81a 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 8005714:	e005      	b.n	8005722 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f96d 	bl	80059f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f973 	bl	8005a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b10      	cmp	r3, #16
 8005734:	d122      	bne.n	800577c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	2b10      	cmp	r3, #16
 8005742:	d11b      	bne.n	800577c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0210 	mvn.w	r2, #16
 800574c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2208      	movs	r2, #8
 8005752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fa fff0 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 8005768:	e005      	b.n	8005776 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f943 	bl	80059f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f949 	bl	8005a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b01      	cmp	r3, #1
 8005788:	d10e      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b01      	cmp	r3, #1
 8005796:	d107      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0201 	mvn.w	r2, #1
 80057a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f91e 	bl	80059e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b2:	2b80      	cmp	r3, #128	; 0x80
 80057b4:	d10e      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b80      	cmp	r3, #128	; 0x80
 80057c2:	d107      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fb27 	bl	8005e22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b40      	cmp	r3, #64	; 0x40
 80057e0:	d10e      	bne.n	8005800 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	d107      	bne.n	8005800 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f90d 	bl	8005a1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b20      	cmp	r3, #32
 800580c:	d10e      	bne.n	800582c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b20      	cmp	r3, #32
 800581a:	d107      	bne.n	800582c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0220 	mvn.w	r2, #32
 8005824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 faf2 	bl	8005e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800582c:	bf00      	nop
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_TIM_IC_ConfigChannel+0x1a>
 800584a:	2302      	movs	r3, #2
 800584c:	e082      	b.n	8005954 <HAL_TIM_IC_ConfigChannel+0x120>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d11b      	bne.n	8005894 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	6819      	ldr	r1, [r3, #0]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f000 f940 	bl	8005af0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699a      	ldr	r2, [r3, #24]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 020c 	bic.w	r2, r2, #12
 800587e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6999      	ldr	r1, [r3, #24]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	619a      	str	r2, [r3, #24]
 8005892:	e05a      	b.n	800594a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b04      	cmp	r3, #4
 8005898:	d11c      	bne.n	80058d4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	6819      	ldr	r1, [r3, #0]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f000 f97b 	bl	8005ba4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699a      	ldr	r2, [r3, #24]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058bc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6999      	ldr	r1, [r3, #24]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	021a      	lsls	r2, r3, #8
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	619a      	str	r2, [r3, #24]
 80058d2:	e03a      	b.n	800594a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d11b      	bne.n	8005912 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	6819      	ldr	r1, [r3, #0]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f000 f997 	bl	8005c1c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 020c 	bic.w	r2, r2, #12
 80058fc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69d9      	ldr	r1, [r3, #28]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	61da      	str	r2, [r3, #28]
 8005910:	e01b      	b.n	800594a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	6819      	ldr	r1, [r3, #0]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f000 f9b6 	bl	8005c92 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005934:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69d9      	ldr	r1, [r3, #28]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	021a      	lsls	r2, r3, #8
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b0c      	cmp	r3, #12
 800596e:	d831      	bhi.n	80059d4 <HAL_TIM_ReadCapturedValue+0x78>
 8005970:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	080059ad 	.word	0x080059ad
 800597c:	080059d5 	.word	0x080059d5
 8005980:	080059d5 	.word	0x080059d5
 8005984:	080059d5 	.word	0x080059d5
 8005988:	080059b7 	.word	0x080059b7
 800598c:	080059d5 	.word	0x080059d5
 8005990:	080059d5 	.word	0x080059d5
 8005994:	080059d5 	.word	0x080059d5
 8005998:	080059c1 	.word	0x080059c1
 800599c:	080059d5 	.word	0x080059d5
 80059a0:	080059d5 	.word	0x080059d5
 80059a4:	080059d5 	.word	0x080059d5
 80059a8:	080059cb 	.word	0x080059cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b2:	60fb      	str	r3, [r7, #12]

      break;
 80059b4:	e00f      	b.n	80059d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	60fb      	str	r3, [r7, #12]

      break;
 80059be:	e00a      	b.n	80059d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c6:	60fb      	str	r3, [r7, #12]

      break;
 80059c8:	e005      	b.n	80059d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	60fb      	str	r3, [r7, #12]

      break;
 80059d2:	e000      	b.n	80059d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80059d4:	bf00      	nop
  }

  return tmpreg;
 80059d6:	68fb      	ldr	r3, [r7, #12]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop

080059e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr

080059f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr

08005a1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr

08005a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a29      	ldr	r2, [pc, #164]	; (8005ae4 <TIM_Base_SetConfig+0xb8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00b      	beq.n	8005a5c <TIM_Base_SetConfig+0x30>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4a:	d007      	beq.n	8005a5c <TIM_Base_SetConfig+0x30>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a26      	ldr	r2, [pc, #152]	; (8005ae8 <TIM_Base_SetConfig+0xbc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d003      	beq.n	8005a5c <TIM_Base_SetConfig+0x30>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a25      	ldr	r2, [pc, #148]	; (8005aec <TIM_Base_SetConfig+0xc0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d108      	bne.n	8005a6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a1c      	ldr	r2, [pc, #112]	; (8005ae4 <TIM_Base_SetConfig+0xb8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00b      	beq.n	8005a8e <TIM_Base_SetConfig+0x62>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7c:	d007      	beq.n	8005a8e <TIM_Base_SetConfig+0x62>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a19      	ldr	r2, [pc, #100]	; (8005ae8 <TIM_Base_SetConfig+0xbc>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_Base_SetConfig+0x62>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a18      	ldr	r2, [pc, #96]	; (8005aec <TIM_Base_SetConfig+0xc0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d108      	bne.n	8005aa0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a07      	ldr	r2, [pc, #28]	; (8005ae4 <TIM_Base_SetConfig+0xb8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d103      	bne.n	8005ad4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	615a      	str	r2, [r3, #20]
}
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40000400 	.word	0x40000400
 8005aec:	40000800 	.word	0x40000800

08005af0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f023 0201 	bic.w	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4a1f      	ldr	r2, [pc, #124]	; (8005b98 <TIM_TI1_SetConfig+0xa8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00b      	beq.n	8005b36 <TIM_TI1_SetConfig+0x46>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b24:	d007      	beq.n	8005b36 <TIM_TI1_SetConfig+0x46>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <TIM_TI1_SetConfig+0xac>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_TI1_SetConfig+0x46>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <TIM_TI1_SetConfig+0xb0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d101      	bne.n	8005b3a <TIM_TI1_SetConfig+0x4a>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <TIM_TI1_SetConfig+0x4c>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d008      	beq.n	8005b52 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f023 0303 	bic.w	r3, r3, #3
 8005b46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	e003      	b.n	8005b5a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f043 0301 	orr.w	r3, r3, #1
 8005b58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f023 030a 	bic.w	r3, r3, #10
 8005b74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f003 030a 	and.w	r3, r3, #10
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40000800 	.word	0x40000800

08005ba4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f023 0210 	bic.w	r2, r3, #16
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	031b      	lsls	r3, r3, #12
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bf6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	621a      	str	r2, [r3, #32]
}
 8005c12:	bf00      	nop
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr

08005c1c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f023 0303 	bic.w	r3, r3, #3
 8005c48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	621a      	str	r2, [r3, #32]
}
 8005c88:	bf00      	nop
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bc80      	pop	{r7}
 8005c90:	4770      	bx	lr

08005c92 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b087      	sub	sp, #28
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ce4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	031b      	lsls	r3, r3, #12
 8005cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	621a      	str	r2, [r3, #32]
}
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr

08005d0a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b087      	sub	sp, #28
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a1a      	ldr	r2, [r3, #32]
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	43db      	mvns	r3, r3
 8005d2c:	401a      	ands	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a1a      	ldr	r2, [r3, #32]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f003 031f 	and.w	r3, r3, #31
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d42:	431a      	orrs	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	621a      	str	r2, [r3, #32]
}
 8005d48:	bf00      	nop
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e046      	b.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a16      	ldr	r2, [pc, #88]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00e      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db8:	d009      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a12      	ldr	r2, [pc, #72]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d004      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a10      	ldr	r2, [pc, #64]	; (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d10c      	bne.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr
 8005e04:	40012c00 	.word	0x40012c00
 8005e08:	40000400 	.word	0x40000400
 8005e0c:	40000800 	.word	0x40000800

08005e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr

08005e22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr

08005e34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e34:	b084      	sub	sp, #16
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	f107 0014 	add.w	r0, r7, #20
 8005e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bc80      	pop	{r7}
 8005e50:	b004      	add	sp, #16
 8005e52:	4770      	bx	lr

08005e54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e64:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005e68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e88:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005e8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	43db      	mvns	r3, r3
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr

08005eb4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr

08005ecc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ecc:	b084      	sub	sp, #16
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	f107 0014 	add.w	r0, r7, #20
 8005eda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bc80      	pop	{r7}
 8005f08:	b004      	add	sp, #16
 8005f0a:	4770      	bx	lr

08005f0c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b09b      	sub	sp, #108	; 0x6c
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	78db      	ldrb	r3, [r3, #3]
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d81f      	bhi.n	8005f7e <USB_ActivateEndpoint+0x72>
 8005f3e:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <USB_ActivateEndpoint+0x38>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005f55 	.word	0x08005f55
 8005f48:	08005f71 	.word	0x08005f71
 8005f4c:	08005f87 	.word	0x08005f87
 8005f50:	08005f63 	.word	0x08005f63
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f5c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005f60:	e012      	b.n	8005f88 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f66:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005f6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005f6e:	e00b      	b.n	8005f88 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005f7c:	e004      	b.n	8005f88 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005f84:	e000      	b.n	8005f88 <USB_ActivateEndpoint+0x7c>
      break;
 8005f86:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	441a      	add	r2, r3
 8005fd8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	7b1b      	ldrb	r3, [r3, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f040 8149 	bne.w	800628c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 8084 	beq.w	800610c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800600e:	b29b      	uxth	r3, r3
 8006010:	461a      	mov	r2, r3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	4413      	add	r3, r2
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	011a      	lsls	r2, r3, #4
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006026:	613b      	str	r3, [r7, #16]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	88db      	ldrh	r3, [r3, #6]
 800602c:	085b      	lsrs	r3, r3, #1
 800602e:	b29b      	uxth	r3, r3
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	81fb      	strh	r3, [r7, #14]
 8006046:	89fb      	ldrh	r3, [r7, #14]
 8006048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01b      	beq.n	8006088 <USB_ActivateEndpoint+0x17c>
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	81bb      	strh	r3, [r7, #12]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	441a      	add	r2, r3
 8006072:	89bb      	ldrh	r3, [r7, #12]
 8006074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006080:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006084:	b29b      	uxth	r3, r3
 8006086:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	78db      	ldrb	r3, [r3, #3]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d020      	beq.n	80060d2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a6:	813b      	strh	r3, [r7, #8]
 80060a8:	893b      	ldrh	r3, [r7, #8]
 80060aa:	f083 0320 	eor.w	r3, r3, #32
 80060ae:	813b      	strh	r3, [r7, #8]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	893b      	ldrh	r3, [r7, #8]
 80060bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	8013      	strh	r3, [r2, #0]
 80060d0:	e27f      	b.n	80065d2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e8:	817b      	strh	r3, [r7, #10]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	441a      	add	r2, r3
 80060f4:	897b      	ldrh	r3, [r7, #10]
 80060f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006106:	b29b      	uxth	r3, r3
 8006108:	8013      	strh	r3, [r2, #0]
 800610a:	e262      	b.n	80065d2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006116:	b29b      	uxth	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611c:	4413      	add	r3, r2
 800611e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	011a      	lsls	r2, r3, #4
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	4413      	add	r3, r2
 800612a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	88db      	ldrh	r3, [r3, #6]
 8006134:	085b      	lsrs	r3, r3, #1
 8006136:	b29b      	uxth	r3, r3
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800614a:	b29b      	uxth	r3, r3
 800614c:	461a      	mov	r2, r3
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	4413      	add	r3, r2
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	011a      	lsls	r2, r3, #4
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	4413      	add	r3, r2
 800615e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006162:	623b      	str	r3, [r7, #32]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d112      	bne.n	8006192 <USB_ActivateEndpoint+0x286>
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006176:	b29a      	uxth	r2, r3
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	801a      	strh	r2, [r3, #0]
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618a:	b29a      	uxth	r2, r3
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	e02f      	b.n	80061f2 <USB_ActivateEndpoint+0x2e6>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	2b3e      	cmp	r3, #62	; 0x3e
 8006198:	d813      	bhi.n	80061c2 <USB_ActivateEndpoint+0x2b6>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	663b      	str	r3, [r7, #96]	; 0x60
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <USB_ActivateEndpoint+0x2a8>
 80061ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061b0:	3301      	adds	r3, #1
 80061b2:	663b      	str	r3, [r7, #96]	; 0x60
 80061b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	029b      	lsls	r3, r3, #10
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	e017      	b.n	80061f2 <USB_ActivateEndpoint+0x2e6>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	095b      	lsrs	r3, r3, #5
 80061c8:	663b      	str	r3, [r7, #96]	; 0x60
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 031f 	and.w	r3, r3, #31
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <USB_ActivateEndpoint+0x2d0>
 80061d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061d8:	3b01      	subs	r3, #1
 80061da:	663b      	str	r3, [r7, #96]	; 0x60
 80061dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061de:	b29b      	uxth	r3, r3
 80061e0:	029b      	lsls	r3, r3, #10
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	83fb      	strh	r3, [r7, #30]
 8006200:	8bfb      	ldrh	r3, [r7, #30]
 8006202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d01b      	beq.n	8006242 <USB_ActivateEndpoint+0x336>
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006220:	83bb      	strh	r3, [r7, #28]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	441a      	add	r2, r3
 800622c:	8bbb      	ldrh	r3, [r7, #28]
 800622e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800623a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623e:	b29b      	uxth	r3, r3
 8006240:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006258:	837b      	strh	r3, [r7, #26]
 800625a:	8b7b      	ldrh	r3, [r7, #26]
 800625c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006260:	837b      	strh	r3, [r7, #26]
 8006262:	8b7b      	ldrh	r3, [r7, #26]
 8006264:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006268:	837b      	strh	r3, [r7, #26]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	441a      	add	r2, r3
 8006274:	8b7b      	ldrh	r3, [r7, #26]
 8006276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800627a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800627e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006286:	b29b      	uxth	r3, r3
 8006288:	8013      	strh	r3, [r2, #0]
 800628a:	e1a2      	b.n	80065d2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	441a      	add	r2, r3
 80062b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80062b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062bc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062d8:	4413      	add	r3, r2
 80062da:	65bb      	str	r3, [r7, #88]	; 0x58
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	011a      	lsls	r2, r3, #4
 80062e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ea:	657b      	str	r3, [r7, #84]	; 0x54
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	891b      	ldrh	r3, [r3, #8]
 80062f0:	085b      	lsrs	r3, r3, #1
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006306:	b29b      	uxth	r3, r3
 8006308:	461a      	mov	r2, r3
 800630a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800630c:	4413      	add	r3, r2
 800630e:	653b      	str	r3, [r7, #80]	; 0x50
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	011a      	lsls	r2, r3, #4
 8006316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006318:	4413      	add	r3, r2
 800631a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800631e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	895b      	ldrh	r3, [r3, #10]
 8006324:	085b      	lsrs	r3, r3, #1
 8006326:	b29b      	uxth	r3, r3
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f040 8091 	bne.w	800645c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006348:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800634a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01b      	beq.n	800638a <USB_ActivateEndpoint+0x47e>
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006368:	877b      	strh	r3, [r7, #58]	; 0x3a
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	441a      	add	r2, r3
 8006374:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800637a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006386:	b29b      	uxth	r3, r3
 8006388:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	873b      	strh	r3, [r7, #56]	; 0x38
 8006398:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800639a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d01b      	beq.n	80063da <USB_ActivateEndpoint+0x4ce>
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	441a      	add	r2, r3
 80063c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80063f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80063f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80063fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80063fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006400:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	441a      	add	r2, r3
 800640c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800640e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641e:	b29b      	uxth	r3, r3
 8006420:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006438:	867b      	strh	r3, [r7, #50]	; 0x32
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	441a      	add	r2, r3
 8006444:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006456:	b29b      	uxth	r3, r3
 8006458:	8013      	strh	r3, [r2, #0]
 800645a:	e0ba      	b.n	80065d2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800646c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d01d      	beq.n	80064b4 <USB_ActivateEndpoint+0x5a8>
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	b29b      	uxth	r3, r3
 8006486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	441a      	add	r2, r3
 800649c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80064c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01d      	beq.n	800650c <USB_ActivateEndpoint+0x600>
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	441a      	add	r2, r3
 80064f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80064f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006504:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006508:	b29b      	uxth	r3, r3
 800650a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	78db      	ldrb	r3, [r3, #3]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d024      	beq.n	800655e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800652a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800652e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006532:	f083 0320 	eor.w	r3, r3, #32
 8006536:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	441a      	add	r2, r3
 8006544:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006558:	b29b      	uxth	r3, r3
 800655a:	8013      	strh	r3, [r2, #0]
 800655c:	e01d      	b.n	800659a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006574:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	441a      	add	r2, r3
 8006582:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800658e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006596:	b29b      	uxth	r3, r3
 8006598:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	441a      	add	r2, r3
 80065bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80065be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80065d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	376c      	adds	r7, #108	; 0x6c
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr

080065e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b08d      	sub	sp, #52	; 0x34
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	7b1b      	ldrb	r3, [r3, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f040 808e 	bne.w	8006710 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	785b      	ldrb	r3, [r3, #1]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d044      	beq.n	8006686 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	81bb      	strh	r3, [r7, #12]
 800660a:	89bb      	ldrh	r3, [r7, #12]
 800660c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d01b      	beq.n	800664c <USB_DeactivateEndpoint+0x6c>
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662a:	817b      	strh	r3, [r7, #10]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	441a      	add	r2, r3
 8006636:	897b      	ldrh	r3, [r7, #10]
 8006638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800663c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006644:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006648:	b29b      	uxth	r3, r3
 800664a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006662:	813b      	strh	r3, [r7, #8]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	441a      	add	r2, r3
 800666e:	893b      	ldrh	r3, [r7, #8]
 8006670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800667c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006680:	b29b      	uxth	r3, r3
 8006682:	8013      	strh	r3, [r2, #0]
 8006684:	e192      	b.n	80069ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	827b      	strh	r3, [r7, #18]
 8006694:	8a7b      	ldrh	r3, [r7, #18]
 8006696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01b      	beq.n	80066d6 <USB_DeactivateEndpoint+0xf6>
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b4:	823b      	strh	r3, [r7, #16]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	441a      	add	r2, r3
 80066c0:	8a3b      	ldrh	r3, [r7, #16]
 80066c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ec:	81fb      	strh	r3, [r7, #14]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	441a      	add	r2, r3
 80066f8:	89fb      	ldrh	r3, [r7, #14]
 80066fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670a:	b29b      	uxth	r3, r3
 800670c:	8013      	strh	r3, [r2, #0]
 800670e:	e14d      	b.n	80069ac <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f040 80a5 	bne.w	8006864 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	843b      	strh	r3, [r7, #32]
 8006728:	8c3b      	ldrh	r3, [r7, #32]
 800672a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d01b      	beq.n	800676a <USB_DeactivateEndpoint+0x18a>
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	b29b      	uxth	r3, r3
 8006740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006748:	83fb      	strh	r3, [r7, #30]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	441a      	add	r2, r3
 8006754:	8bfb      	ldrh	r3, [r7, #30]
 8006756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800675e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006766:	b29b      	uxth	r3, r3
 8006768:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	83bb      	strh	r3, [r7, #28]
 8006778:	8bbb      	ldrh	r3, [r7, #28]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d01b      	beq.n	80067ba <USB_DeactivateEndpoint+0x1da>
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006798:	837b      	strh	r3, [r7, #26]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	441a      	add	r2, r3
 80067a4:	8b7b      	ldrh	r3, [r7, #26]
 80067a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d0:	833b      	strh	r3, [r7, #24]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	441a      	add	r2, r3
 80067dc:	8b3b      	ldrh	r3, [r7, #24]
 80067de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006808:	82fb      	strh	r3, [r7, #22]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	441a      	add	r2, r3
 8006814:	8afb      	ldrh	r3, [r7, #22]
 8006816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800681a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006826:	b29b      	uxth	r3, r3
 8006828:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006840:	82bb      	strh	r3, [r7, #20]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	441a      	add	r2, r3
 800684c:	8abb      	ldrh	r3, [r7, #20]
 800684e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685e:	b29b      	uxth	r3, r3
 8006860:	8013      	strh	r3, [r2, #0]
 8006862:	e0a3      	b.n	80069ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006872:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01b      	beq.n	80068b4 <USB_DeactivateEndpoint+0x2d4>
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	b29b      	uxth	r3, r3
 800688a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006892:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	441a      	add	r2, r3
 800689e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80068c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80068c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01b      	beq.n	8006904 <USB_DeactivateEndpoint+0x324>
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	441a      	add	r2, r3
 80068ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80068f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006900:	b29b      	uxth	r3, r3
 8006902:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006938:	b29b      	uxth	r3, r3
 800693a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006952:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	441a      	add	r2, r3
 800695e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800696c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006970:	b29b      	uxth	r3, r3
 8006972:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	b29b      	uxth	r3, r3
 8006982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698a:	847b      	strh	r3, [r7, #34]	; 0x22
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	441a      	add	r2, r3
 8006996:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3734      	adds	r7, #52	; 0x34
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr

080069b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b0c4      	sub	sp, #272	; 0x110
 80069bc:	af00      	add	r7, sp, #0
 80069be:	1d3b      	adds	r3, r7, #4
 80069c0:	6018      	str	r0, [r3, #0]
 80069c2:	463b      	mov	r3, r7
 80069c4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069c6:	463b      	mov	r3, r7
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	785b      	ldrb	r3, [r3, #1]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	f040 8557 	bne.w	8007480 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80069d2:	463b      	mov	r3, r7
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	699a      	ldr	r2, [r3, #24]
 80069d8:	463b      	mov	r3, r7
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d905      	bls.n	80069ee <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80069e2:	463b      	mov	r3, r7
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80069ec:	e004      	b.n	80069f8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80069ee:	463b      	mov	r3, r7
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80069f8:	463b      	mov	r3, r7
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	7b1b      	ldrb	r3, [r3, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d12c      	bne.n	8006a5c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006a02:	463b      	mov	r3, r7
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6959      	ldr	r1, [r3, #20]
 8006a08:	463b      	mov	r3, r7
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	88da      	ldrh	r2, [r3, #6]
 8006a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	1d38      	adds	r0, r7, #4
 8006a16:	6800      	ldr	r0, [r0, #0]
 8006a18:	f001 fa2c 	bl	8007e74 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a1c:	1d3b      	adds	r3, r7, #4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	1d3b      	adds	r3, r7, #4
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	4413      	add	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	463b      	mov	r3, r7
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	011a      	lsls	r2, r3, #4
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a44:	f107 0310 	add.w	r3, r7, #16
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	f107 0310 	add.w	r3, r7, #16
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	801a      	strh	r2, [r3, #0]
 8006a58:	f000 bcdd 	b.w	8007416 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006a5c:	463b      	mov	r3, r7
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	78db      	ldrb	r3, [r3, #3]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	f040 8347 	bne.w	80070f6 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006a68:	463b      	mov	r3, r7
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6a1a      	ldr	r2, [r3, #32]
 8006a6e:	463b      	mov	r3, r7
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	f240 82eb 	bls.w	8007050 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006a7a:	1d3b      	adds	r3, r7, #4
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	463b      	mov	r3, r7
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a94:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006a98:	1d3b      	adds	r3, r7, #4
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	463b      	mov	r3, r7
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	441a      	add	r2, r3
 8006aa6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006abe:	463b      	mov	r3, r7
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6a1a      	ldr	r2, [r3, #32]
 8006ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ac8:	1ad2      	subs	r2, r2, r3
 8006aca:	463b      	mov	r3, r7
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ad0:	1d3b      	adds	r3, r7, #4
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	463b      	mov	r3, r7
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8159 	beq.w	8006d9e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006aec:	1d3b      	adds	r3, r7, #4
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	637b      	str	r3, [r7, #52]	; 0x34
 8006af2:	463b      	mov	r3, r7
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	785b      	ldrb	r3, [r3, #1]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d164      	bne.n	8006bc6 <USB_EPStartXfer+0x20e>
 8006afc:	1d3b      	adds	r3, r7, #4
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b02:	1d3b      	adds	r3, r7, #4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b10:	4413      	add	r3, r2
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b14:	463b      	mov	r3, r7
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	011a      	lsls	r2, r3, #4
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	4413      	add	r3, r2
 8006b20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d112      	bne.n	8006b54 <USB_EPStartXfer+0x19c>
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	801a      	strh	r2, [r3, #0]
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b50:	801a      	strh	r2, [r3, #0]
 8006b52:	e054      	b.n	8006bfe <USB_EPStartXfer+0x246>
 8006b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b58:	2b3e      	cmp	r3, #62	; 0x3e
 8006b5a:	d817      	bhi.n	8006b8c <USB_EPStartXfer+0x1d4>
 8006b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b60:	085b      	lsrs	r3, r3, #1
 8006b62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d004      	beq.n	8006b7c <USB_EPStartXfer+0x1c4>
 8006b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b76:	3301      	adds	r3, #1
 8006b78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	029b      	lsls	r3, r3, #10
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b88:	801a      	strh	r2, [r3, #0]
 8006b8a:	e038      	b.n	8006bfe <USB_EPStartXfer+0x246>
 8006b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b9a:	f003 031f 	and.w	r3, r3, #31
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d104      	bne.n	8006bac <USB_EPStartXfer+0x1f4>
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	029b      	lsls	r3, r3, #10
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	e01b      	b.n	8006bfe <USB_EPStartXfer+0x246>
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d116      	bne.n	8006bfe <USB_EPStartXfer+0x246>
 8006bd0:	1d3b      	adds	r3, r7, #4
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	4413      	add	r3, r2
 8006be0:	637b      	str	r3, [r7, #52]	; 0x34
 8006be2:	463b      	mov	r3, r7
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	011a      	lsls	r2, r3, #4
 8006bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bec:	4413      	add	r3, r2
 8006bee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bf2:	633b      	str	r3, [r7, #48]	; 0x30
 8006bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006bfe:	463b      	mov	r3, r7
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	895b      	ldrh	r3, [r3, #10]
 8006c04:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c08:	463b      	mov	r3, r7
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6959      	ldr	r1, [r3, #20]
 8006c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006c18:	1d38      	adds	r0, r7, #4
 8006c1a:	6800      	ldr	r0, [r0, #0]
 8006c1c:	f001 f92a 	bl	8007e74 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c20:	463b      	mov	r3, r7
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695a      	ldr	r2, [r3, #20]
 8006c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c2a:	441a      	add	r2, r3
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c32:	463b      	mov	r3, r7
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6a1a      	ldr	r2, [r3, #32]
 8006c38:	463b      	mov	r3, r7
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d909      	bls.n	8006c56 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8006c42:	463b      	mov	r3, r7
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6a1a      	ldr	r2, [r3, #32]
 8006c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c4c:	1ad2      	subs	r2, r2, r3
 8006c4e:	463b      	mov	r3, r7
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	621a      	str	r2, [r3, #32]
 8006c54:	e008      	b.n	8006c68 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c56:	463b      	mov	r3, r7
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006c60:	463b      	mov	r3, r7
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2200      	movs	r2, #0
 8006c66:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c68:	463b      	mov	r3, r7
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	785b      	ldrb	r3, [r3, #1]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d164      	bne.n	8006d3c <USB_EPStartXfer+0x384>
 8006c72:	1d3b      	adds	r3, r7, #4
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	1d3b      	adds	r3, r7, #4
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	4413      	add	r3, r2
 8006c88:	61fb      	str	r3, [r7, #28]
 8006c8a:	463b      	mov	r3, r7
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	011a      	lsls	r2, r3, #4
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c9a:	61bb      	str	r3, [r7, #24]
 8006c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d112      	bne.n	8006cca <USB_EPStartXfer+0x312>
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	801a      	strh	r2, [r3, #0]
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	801a      	strh	r2, [r3, #0]
 8006cc8:	e057      	b.n	8006d7a <USB_EPStartXfer+0x3c2>
 8006cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cce:	2b3e      	cmp	r3, #62	; 0x3e
 8006cd0:	d817      	bhi.n	8006d02 <USB_EPStartXfer+0x34a>
 8006cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d004      	beq.n	8006cf2 <USB_EPStartXfer+0x33a>
 8006ce8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006cec:	3301      	adds	r3, #1
 8006cee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006cf2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	029b      	lsls	r3, r3, #10
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	801a      	strh	r2, [r3, #0]
 8006d00:	e03b      	b.n	8006d7a <USB_EPStartXfer+0x3c2>
 8006d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d104      	bne.n	8006d22 <USB_EPStartXfer+0x36a>
 8006d18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	029b      	lsls	r3, r3, #10
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	801a      	strh	r2, [r3, #0]
 8006d3a:	e01e      	b.n	8006d7a <USB_EPStartXfer+0x3c2>
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	785b      	ldrb	r3, [r3, #1]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d119      	bne.n	8006d7a <USB_EPStartXfer+0x3c2>
 8006d46:	1d3b      	adds	r3, r7, #4
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d4c:	1d3b      	adds	r3, r7, #4
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	4413      	add	r3, r2
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d5e:	463b      	mov	r3, r7
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	011a      	lsls	r2, r3, #4
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	4413      	add	r3, r2
 8006d6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d6e:	623b      	str	r3, [r7, #32]
 8006d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	891b      	ldrh	r3, [r3, #8]
 8006d80:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d84:	463b      	mov	r3, r7
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6959      	ldr	r1, [r3, #20]
 8006d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006d94:	1d38      	adds	r0, r7, #4
 8006d96:	6800      	ldr	r0, [r0, #0]
 8006d98:	f001 f86c 	bl	8007e74 <USB_WritePMA>
 8006d9c:	e33b      	b.n	8007416 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d9e:	463b      	mov	r3, r7
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	785b      	ldrb	r3, [r3, #1]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d164      	bne.n	8006e72 <USB_EPStartXfer+0x4ba>
 8006da8:	1d3b      	adds	r3, r7, #4
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dae:	1d3b      	adds	r3, r7, #4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	461a      	mov	r2, r3
 8006dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dbc:	4413      	add	r3, r2
 8006dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	011a      	lsls	r2, r3, #4
 8006dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dca:	4413      	add	r3, r2
 8006dcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d112      	bne.n	8006e00 <USB_EPStartXfer+0x448>
 8006dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dfc:	801a      	strh	r2, [r3, #0]
 8006dfe:	e057      	b.n	8006eb0 <USB_EPStartXfer+0x4f8>
 8006e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e04:	2b3e      	cmp	r3, #62	; 0x3e
 8006e06:	d817      	bhi.n	8006e38 <USB_EPStartXfer+0x480>
 8006e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e0c:	085b      	lsrs	r3, r3, #1
 8006e0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d004      	beq.n	8006e28 <USB_EPStartXfer+0x470>
 8006e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e22:	3301      	adds	r3, #1
 8006e24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	029b      	lsls	r3, r3, #10
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e34:	801a      	strh	r2, [r3, #0]
 8006e36:	e03b      	b.n	8006eb0 <USB_EPStartXfer+0x4f8>
 8006e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e3c:	095b      	lsrs	r3, r3, #5
 8006e3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d104      	bne.n	8006e58 <USB_EPStartXfer+0x4a0>
 8006e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e52:	3b01      	subs	r3, #1
 8006e54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	029b      	lsls	r3, r3, #10
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e6e:	801a      	strh	r2, [r3, #0]
 8006e70:	e01e      	b.n	8006eb0 <USB_EPStartXfer+0x4f8>
 8006e72:	463b      	mov	r3, r7
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	785b      	ldrb	r3, [r3, #1]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d119      	bne.n	8006eb0 <USB_EPStartXfer+0x4f8>
 8006e7c:	1d3b      	adds	r3, r7, #4
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	657b      	str	r3, [r7, #84]	; 0x54
 8006e82:	1d3b      	adds	r3, r7, #4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e90:	4413      	add	r3, r2
 8006e92:	657b      	str	r3, [r7, #84]	; 0x54
 8006e94:	463b      	mov	r3, r7
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	011a      	lsls	r2, r3, #4
 8006e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ea4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006eb0:	463b      	mov	r3, r7
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	891b      	ldrh	r3, [r3, #8]
 8006eb6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eba:	463b      	mov	r3, r7
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6959      	ldr	r1, [r3, #20]
 8006ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006eca:	1d38      	adds	r0, r7, #4
 8006ecc:	6800      	ldr	r0, [r0, #0]
 8006ece:	f000 ffd1 	bl	8007e74 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ed2:	463b      	mov	r3, r7
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	695a      	ldr	r2, [r3, #20]
 8006ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006edc:	441a      	add	r2, r3
 8006ede:	463b      	mov	r3, r7
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ee4:	463b      	mov	r3, r7
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6a1a      	ldr	r2, [r3, #32]
 8006eea:	463b      	mov	r3, r7
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d909      	bls.n	8006f08 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6a1a      	ldr	r2, [r3, #32]
 8006efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006efe:	1ad2      	subs	r2, r2, r3
 8006f00:	463b      	mov	r3, r7
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	621a      	str	r2, [r3, #32]
 8006f06:	e008      	b.n	8006f1a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f08:	463b      	mov	r3, r7
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006f12:	463b      	mov	r3, r7
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2200      	movs	r2, #0
 8006f18:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f1a:	1d3b      	adds	r3, r7, #4
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f20:	463b      	mov	r3, r7
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	785b      	ldrb	r3, [r3, #1]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d164      	bne.n	8006ff4 <USB_EPStartXfer+0x63c>
 8006f2a:	1d3b      	adds	r3, r7, #4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f30:	1d3b      	adds	r3, r7, #4
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3e:	4413      	add	r3, r2
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f42:	463b      	mov	r3, r7
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	011a      	lsls	r2, r3, #4
 8006f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d112      	bne.n	8006f82 <USB_EPStartXfer+0x5ca>
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	801a      	strh	r2, [r3, #0]
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	801a      	strh	r2, [r3, #0]
 8006f80:	e054      	b.n	800702c <USB_EPStartXfer+0x674>
 8006f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f86:	2b3e      	cmp	r3, #62	; 0x3e
 8006f88:	d817      	bhi.n	8006fba <USB_EPStartXfer+0x602>
 8006f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f8e:	085b      	lsrs	r3, r3, #1
 8006f90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d004      	beq.n	8006faa <USB_EPStartXfer+0x5f2>
 8006fa0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006faa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	029b      	lsls	r3, r3, #10
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	e038      	b.n	800702c <USB_EPStartXfer+0x674>
 8006fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fc8:	f003 031f 	and.w	r3, r3, #31
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <USB_EPStartXfer+0x622>
 8006fd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	029b      	lsls	r3, r3, #10
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	e01b      	b.n	800702c <USB_EPStartXfer+0x674>
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	785b      	ldrb	r3, [r3, #1]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d116      	bne.n	800702c <USB_EPStartXfer+0x674>
 8006ffe:	1d3b      	adds	r3, r7, #4
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007006:	b29b      	uxth	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800700c:	4413      	add	r3, r2
 800700e:	647b      	str	r3, [r7, #68]	; 0x44
 8007010:	463b      	mov	r3, r7
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	011a      	lsls	r2, r3, #4
 8007018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701a:	4413      	add	r3, r2
 800701c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007020:	643b      	str	r3, [r7, #64]	; 0x40
 8007022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007026:	b29a      	uxth	r2, r3
 8007028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800702a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800702c:	463b      	mov	r3, r7
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	895b      	ldrh	r3, [r3, #10]
 8007032:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007036:	463b      	mov	r3, r7
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6959      	ldr	r1, [r3, #20]
 800703c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007040:	b29b      	uxth	r3, r3
 8007042:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007046:	1d38      	adds	r0, r7, #4
 8007048:	6800      	ldr	r0, [r0, #0]
 800704a:	f000 ff13 	bl	8007e74 <USB_WritePMA>
 800704e:	e1e2      	b.n	8007416 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007050:	463b      	mov	r3, r7
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800705a:	1d3b      	adds	r3, r7, #4
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	463b      	mov	r3, r7
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007074:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007078:	1d3b      	adds	r3, r7, #4
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	463b      	mov	r3, r7
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	441a      	add	r2, r3
 8007086:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800708a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800708e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800709a:	b29b      	uxth	r3, r3
 800709c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800709e:	1d3b      	adds	r3, r7, #4
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	663b      	str	r3, [r7, #96]	; 0x60
 80070a4:	1d3b      	adds	r3, r7, #4
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	461a      	mov	r2, r3
 80070b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070b2:	4413      	add	r3, r2
 80070b4:	663b      	str	r3, [r7, #96]	; 0x60
 80070b6:	463b      	mov	r3, r7
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	011a      	lsls	r2, r3, #4
 80070be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070c0:	4413      	add	r3, r2
 80070c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80070d2:	463b      	mov	r3, r7
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	891b      	ldrh	r3, [r3, #8]
 80070d8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070dc:	463b      	mov	r3, r7
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6959      	ldr	r1, [r3, #20]
 80070e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80070ec:	1d38      	adds	r0, r7, #4
 80070ee:	6800      	ldr	r0, [r0, #0]
 80070f0:	f000 fec0 	bl	8007e74 <USB_WritePMA>
 80070f4:	e18f      	b.n	8007416 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070f6:	1d3b      	adds	r3, r7, #4
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	463b      	mov	r3, r7
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	b29b      	uxth	r3, r3
 8007108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 808f 	beq.w	8007230 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007112:	1d3b      	adds	r3, r7, #4
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	67bb      	str	r3, [r7, #120]	; 0x78
 8007118:	463b      	mov	r3, r7
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d164      	bne.n	80071ec <USB_EPStartXfer+0x834>
 8007122:	1d3b      	adds	r3, r7, #4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	673b      	str	r3, [r7, #112]	; 0x70
 8007128:	1d3b      	adds	r3, r7, #4
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007130:	b29b      	uxth	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007136:	4413      	add	r3, r2
 8007138:	673b      	str	r3, [r7, #112]	; 0x70
 800713a:	463b      	mov	r3, r7
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	011a      	lsls	r2, r3, #4
 8007142:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007144:	4413      	add	r3, r2
 8007146:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800714a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800714c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007150:	2b00      	cmp	r3, #0
 8007152:	d112      	bne.n	800717a <USB_EPStartXfer+0x7c2>
 8007154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	b29b      	uxth	r3, r3
 800715a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800715e:	b29a      	uxth	r2, r3
 8007160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007172:	b29a      	uxth	r2, r3
 8007174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	e054      	b.n	8007224 <USB_EPStartXfer+0x86c>
 800717a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800717e:	2b3e      	cmp	r3, #62	; 0x3e
 8007180:	d817      	bhi.n	80071b2 <USB_EPStartXfer+0x7fa>
 8007182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007186:	085b      	lsrs	r3, r3, #1
 8007188:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800718c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d004      	beq.n	80071a2 <USB_EPStartXfer+0x7ea>
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719c:	3301      	adds	r3, #1
 800719e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	029b      	lsls	r3, r3, #10
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ae:	801a      	strh	r2, [r3, #0]
 80071b0:	e038      	b.n	8007224 <USB_EPStartXfer+0x86c>
 80071b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071b6:	095b      	lsrs	r3, r3, #5
 80071b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071c0:	f003 031f 	and.w	r3, r3, #31
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d104      	bne.n	80071d2 <USB_EPStartXfer+0x81a>
 80071c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071cc:	3b01      	subs	r3, #1
 80071ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	029b      	lsls	r3, r3, #10
 80071da:	b29b      	uxth	r3, r3
 80071dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	e01b      	b.n	8007224 <USB_EPStartXfer+0x86c>
 80071ec:	463b      	mov	r3, r7
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	785b      	ldrb	r3, [r3, #1]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d116      	bne.n	8007224 <USB_EPStartXfer+0x86c>
 80071f6:	1d3b      	adds	r3, r7, #4
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071fe:	b29b      	uxth	r3, r3
 8007200:	461a      	mov	r2, r3
 8007202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007204:	4413      	add	r3, r2
 8007206:	67bb      	str	r3, [r7, #120]	; 0x78
 8007208:	463b      	mov	r3, r7
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	011a      	lsls	r2, r3, #4
 8007210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007212:	4413      	add	r3, r2
 8007214:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007218:	677b      	str	r3, [r7, #116]	; 0x74
 800721a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800721e:	b29a      	uxth	r2, r3
 8007220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007222:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007224:	463b      	mov	r3, r7
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	895b      	ldrh	r3, [r3, #10]
 800722a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800722e:	e097      	b.n	8007360 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007230:	463b      	mov	r3, r7
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	785b      	ldrb	r3, [r3, #1]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d168      	bne.n	800730c <USB_EPStartXfer+0x954>
 800723a:	1d3b      	adds	r3, r7, #4
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007242:	1d3b      	adds	r3, r7, #4
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800724a:	b29b      	uxth	r3, r3
 800724c:	461a      	mov	r2, r3
 800724e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007252:	4413      	add	r3, r2
 8007254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007258:	463b      	mov	r3, r7
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	011a      	lsls	r2, r3, #4
 8007260:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007264:	4413      	add	r3, r2
 8007266:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800726a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800726c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d112      	bne.n	800729a <USB_EPStartXfer+0x8e2>
 8007274:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	b29b      	uxth	r3, r3
 800727a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800727e:	b29a      	uxth	r2, r3
 8007280:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007282:	801a      	strh	r2, [r3, #0]
 8007284:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	b29b      	uxth	r3, r3
 800728a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800728e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007292:	b29a      	uxth	r2, r3
 8007294:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007296:	801a      	strh	r2, [r3, #0]
 8007298:	e05d      	b.n	8007356 <USB_EPStartXfer+0x99e>
 800729a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800729e:	2b3e      	cmp	r3, #62	; 0x3e
 80072a0:	d817      	bhi.n	80072d2 <USB_EPStartXfer+0x91a>
 80072a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072a6:	085b      	lsrs	r3, r3, #1
 80072a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <USB_EPStartXfer+0x90a>
 80072b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072bc:	3301      	adds	r3, #1
 80072be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	029b      	lsls	r3, r3, #10
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	e041      	b.n	8007356 <USB_EPStartXfer+0x99e>
 80072d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072d6:	095b      	lsrs	r3, r3, #5
 80072d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <USB_EPStartXfer+0x93a>
 80072e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072ec:	3b01      	subs	r3, #1
 80072ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	029b      	lsls	r3, r3, #10
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007304:	b29a      	uxth	r2, r3
 8007306:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007308:	801a      	strh	r2, [r3, #0]
 800730a:	e024      	b.n	8007356 <USB_EPStartXfer+0x99e>
 800730c:	463b      	mov	r3, r7
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	785b      	ldrb	r3, [r3, #1]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d11f      	bne.n	8007356 <USB_EPStartXfer+0x99e>
 8007316:	1d3b      	adds	r3, r7, #4
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800731e:	1d3b      	adds	r3, r7, #4
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007326:	b29b      	uxth	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800732e:	4413      	add	r3, r2
 8007330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007334:	463b      	mov	r3, r7
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	011a      	lsls	r2, r3, #4
 800733c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007340:	4413      	add	r3, r2
 8007342:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007346:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800734a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800734e:	b29a      	uxth	r2, r3
 8007350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007354:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007356:	463b      	mov	r3, r7
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	891b      	ldrh	r3, [r3, #8]
 800735c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007360:	463b      	mov	r3, r7
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6959      	ldr	r1, [r3, #20]
 8007366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800736a:	b29b      	uxth	r3, r3
 800736c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007370:	1d38      	adds	r0, r7, #4
 8007372:	6800      	ldr	r0, [r0, #0]
 8007374:	f000 fd7e 	bl	8007e74 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007378:	463b      	mov	r3, r7
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d122      	bne.n	80073c8 <USB_EPStartXfer+0xa10>
 8007382:	1d3b      	adds	r3, r7, #4
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	463b      	mov	r3, r7
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80073a0:	1d3b      	adds	r3, r7, #4
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	463b      	mov	r3, r7
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80073b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	8013      	strh	r3, [r2, #0]
 80073c6:	e026      	b.n	8007416 <USB_EPStartXfer+0xa5e>
 80073c8:	463b      	mov	r3, r7
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	785b      	ldrb	r3, [r3, #1]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d121      	bne.n	8007416 <USB_EPStartXfer+0xa5e>
 80073d2:	1d3b      	adds	r3, r7, #4
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	463b      	mov	r3, r7
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ec:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80073f0:	1d3b      	adds	r3, r7, #4
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	463b      	mov	r3, r7
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	441a      	add	r2, r3
 80073fe:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8007402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800740e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007412:	b29b      	uxth	r3, r3
 8007414:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007416:	1d3b      	adds	r3, r7, #4
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	463b      	mov	r3, r7
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f107 020e 	add.w	r2, r7, #14
 800742c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007434:	8013      	strh	r3, [r2, #0]
 8007436:	f107 030e 	add.w	r3, r7, #14
 800743a:	f107 020e 	add.w	r2, r7, #14
 800743e:	8812      	ldrh	r2, [r2, #0]
 8007440:	f082 0210 	eor.w	r2, r2, #16
 8007444:	801a      	strh	r2, [r3, #0]
 8007446:	f107 030e 	add.w	r3, r7, #14
 800744a:	f107 020e 	add.w	r2, r7, #14
 800744e:	8812      	ldrh	r2, [r2, #0]
 8007450:	f082 0220 	eor.w	r2, r2, #32
 8007454:	801a      	strh	r2, [r3, #0]
 8007456:	1d3b      	adds	r3, r7, #4
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	463b      	mov	r3, r7
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	441a      	add	r2, r3
 8007464:	f107 030e 	add.w	r3, r7, #14
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800746e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800747a:	b29b      	uxth	r3, r3
 800747c:	8013      	strh	r3, [r2, #0]
 800747e:	e3b5      	b.n	8007bec <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007480:	463b      	mov	r3, r7
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	7b1b      	ldrb	r3, [r3, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	f040 8090 	bne.w	80075ac <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800748c:	463b      	mov	r3, r7
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	699a      	ldr	r2, [r3, #24]
 8007492:	463b      	mov	r3, r7
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	429a      	cmp	r2, r3
 800749a:	d90e      	bls.n	80074ba <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800749c:	463b      	mov	r3, r7
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80074a6:	463b      	mov	r3, r7
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	699a      	ldr	r2, [r3, #24]
 80074ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074b0:	1ad2      	subs	r2, r2, r3
 80074b2:	463b      	mov	r3, r7
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	619a      	str	r2, [r3, #24]
 80074b8:	e008      	b.n	80074cc <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80074ba:	463b      	mov	r3, r7
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80074c4:	463b      	mov	r3, r7
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2200      	movs	r2, #0
 80074ca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80074cc:	1d3b      	adds	r3, r7, #4
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80074d4:	1d3b      	adds	r3, r7, #4
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074dc:	b29b      	uxth	r3, r3
 80074de:	461a      	mov	r2, r3
 80074e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074e4:	4413      	add	r3, r2
 80074e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80074ea:	463b      	mov	r3, r7
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	011a      	lsls	r2, r3, #4
 80074f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074f6:	4413      	add	r3, r2
 80074f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007504:	2b00      	cmp	r3, #0
 8007506:	d116      	bne.n	8007536 <USB_EPStartXfer+0xb7e>
 8007508:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007514:	b29a      	uxth	r2, r3
 8007516:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800752c:	b29a      	uxth	r2, r3
 800752e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007532:	801a      	strh	r2, [r3, #0]
 8007534:	e32c      	b.n	8007b90 <USB_EPStartXfer+0x11d8>
 8007536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800753a:	2b3e      	cmp	r3, #62	; 0x3e
 800753c:	d818      	bhi.n	8007570 <USB_EPStartXfer+0xbb8>
 800753e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007542:	085b      	lsrs	r3, r3, #1
 8007544:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d004      	beq.n	800755e <USB_EPStartXfer+0xba6>
 8007554:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007558:	3301      	adds	r3, #1
 800755a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800755e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007562:	b29b      	uxth	r3, r3
 8007564:	029b      	lsls	r3, r3, #10
 8007566:	b29a      	uxth	r2, r3
 8007568:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800756c:	801a      	strh	r2, [r3, #0]
 800756e:	e30f      	b.n	8007b90 <USB_EPStartXfer+0x11d8>
 8007570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800757a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800757e:	f003 031f 	and.w	r3, r3, #31
 8007582:	2b00      	cmp	r3, #0
 8007584:	d104      	bne.n	8007590 <USB_EPStartXfer+0xbd8>
 8007586:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800758a:	3b01      	subs	r3, #1
 800758c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007590:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007594:	b29b      	uxth	r3, r3
 8007596:	029b      	lsls	r3, r3, #10
 8007598:	b29b      	uxth	r3, r3
 800759a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800759e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075a8:	801a      	strh	r2, [r3, #0]
 80075aa:	e2f1      	b.n	8007b90 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80075ac:	463b      	mov	r3, r7
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	78db      	ldrb	r3, [r3, #3]
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	f040 818f 	bne.w	80078d6 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80075b8:	463b      	mov	r3, r7
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d175      	bne.n	80076ae <USB_EPStartXfer+0xcf6>
 80075c2:	1d3b      	adds	r3, r7, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075ca:	1d3b      	adds	r3, r7, #4
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	461a      	mov	r2, r3
 80075d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80075da:	4413      	add	r3, r2
 80075dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075e0:	463b      	mov	r3, r7
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	011a      	lsls	r2, r3, #4
 80075e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80075ec:	4413      	add	r3, r2
 80075ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075f6:	463b      	mov	r3, r7
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d116      	bne.n	800762e <USB_EPStartXfer+0xc76>
 8007600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800760c:	b29a      	uxth	r2, r3
 800760e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007612:	801a      	strh	r2, [r3, #0]
 8007614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007624:	b29a      	uxth	r2, r3
 8007626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800762a:	801a      	strh	r2, [r3, #0]
 800762c:	e065      	b.n	80076fa <USB_EPStartXfer+0xd42>
 800762e:	463b      	mov	r3, r7
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	2b3e      	cmp	r3, #62	; 0x3e
 8007636:	d81a      	bhi.n	800766e <USB_EPStartXfer+0xcb6>
 8007638:	463b      	mov	r3, r7
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007644:	463b      	mov	r3, r7
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d004      	beq.n	800765c <USB_EPStartXfer+0xca4>
 8007652:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007656:	3301      	adds	r3, #1
 8007658:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800765c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007660:	b29b      	uxth	r3, r3
 8007662:	029b      	lsls	r3, r3, #10
 8007664:	b29a      	uxth	r2, r3
 8007666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800766a:	801a      	strh	r2, [r3, #0]
 800766c:	e045      	b.n	80076fa <USB_EPStartXfer+0xd42>
 800766e:	463b      	mov	r3, r7
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800767a:	463b      	mov	r3, r7
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	f003 031f 	and.w	r3, r3, #31
 8007684:	2b00      	cmp	r3, #0
 8007686:	d104      	bne.n	8007692 <USB_EPStartXfer+0xcda>
 8007688:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800768c:	3b01      	subs	r3, #1
 800768e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007692:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007696:	b29b      	uxth	r3, r3
 8007698:	029b      	lsls	r3, r3, #10
 800769a:	b29b      	uxth	r3, r3
 800769c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076aa:	801a      	strh	r2, [r3, #0]
 80076ac:	e025      	b.n	80076fa <USB_EPStartXfer+0xd42>
 80076ae:	463b      	mov	r3, r7
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	785b      	ldrb	r3, [r3, #1]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d120      	bne.n	80076fa <USB_EPStartXfer+0xd42>
 80076b8:	1d3b      	adds	r3, r7, #4
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076c0:	1d3b      	adds	r3, r7, #4
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	461a      	mov	r2, r3
 80076cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076d0:	4413      	add	r3, r2
 80076d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076d6:	463b      	mov	r3, r7
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	011a      	lsls	r2, r3, #4
 80076de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076e2:	4413      	add	r3, r2
 80076e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076ec:	463b      	mov	r3, r7
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80076f8:	801a      	strh	r2, [r3, #0]
 80076fa:	1d3b      	adds	r3, r7, #4
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007702:	463b      	mov	r3, r7
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d175      	bne.n	80077f8 <USB_EPStartXfer+0xe40>
 800770c:	1d3b      	adds	r3, r7, #4
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007714:	1d3b      	adds	r3, r7, #4
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800771c:	b29b      	uxth	r3, r3
 800771e:	461a      	mov	r2, r3
 8007720:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007724:	4413      	add	r3, r2
 8007726:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800772a:	463b      	mov	r3, r7
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	011a      	lsls	r2, r3, #4
 8007732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007736:	4413      	add	r3, r2
 8007738:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800773c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007740:	463b      	mov	r3, r7
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d116      	bne.n	8007778 <USB_EPStartXfer+0xdc0>
 800774a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	b29b      	uxth	r3, r3
 8007752:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007756:	b29a      	uxth	r2, r3
 8007758:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800775c:	801a      	strh	r2, [r3, #0]
 800775e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800776a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800776e:	b29a      	uxth	r2, r3
 8007770:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007774:	801a      	strh	r2, [r3, #0]
 8007776:	e061      	b.n	800783c <USB_EPStartXfer+0xe84>
 8007778:	463b      	mov	r3, r7
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b3e      	cmp	r3, #62	; 0x3e
 8007780:	d81a      	bhi.n	80077b8 <USB_EPStartXfer+0xe00>
 8007782:	463b      	mov	r3, r7
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	085b      	lsrs	r3, r3, #1
 800778a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800778e:	463b      	mov	r3, r7
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b00      	cmp	r3, #0
 800779a:	d004      	beq.n	80077a6 <USB_EPStartXfer+0xdee>
 800779c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a0:	3301      	adds	r3, #1
 80077a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	029b      	lsls	r3, r3, #10
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077b4:	801a      	strh	r2, [r3, #0]
 80077b6:	e041      	b.n	800783c <USB_EPStartXfer+0xe84>
 80077b8:	463b      	mov	r3, r7
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	095b      	lsrs	r3, r3, #5
 80077c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077c4:	463b      	mov	r3, r7
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f003 031f 	and.w	r3, r3, #31
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d104      	bne.n	80077dc <USB_EPStartXfer+0xe24>
 80077d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d6:	3b01      	subs	r3, #1
 80077d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	029b      	lsls	r3, r3, #10
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077f4:	801a      	strh	r2, [r3, #0]
 80077f6:	e021      	b.n	800783c <USB_EPStartXfer+0xe84>
 80077f8:	463b      	mov	r3, r7
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	785b      	ldrb	r3, [r3, #1]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d11c      	bne.n	800783c <USB_EPStartXfer+0xe84>
 8007802:	1d3b      	adds	r3, r7, #4
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800780a:	b29b      	uxth	r3, r3
 800780c:	461a      	mov	r2, r3
 800780e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007812:	4413      	add	r3, r2
 8007814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007818:	463b      	mov	r3, r7
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	011a      	lsls	r2, r3, #4
 8007820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007824:	4413      	add	r3, r2
 8007826:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800782a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800782e:	463b      	mov	r3, r7
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	b29a      	uxth	r2, r3
 8007836:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800783a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800783c:	463b      	mov	r3, r7
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 81a4 	beq.w	8007b90 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007848:	1d3b      	adds	r3, r7, #4
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	463b      	mov	r3, r7
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800785c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d005      	beq.n	8007874 <USB_EPStartXfer+0xebc>
 8007868:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800786c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10d      	bne.n	8007890 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007874:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800787c:	2b00      	cmp	r3, #0
 800787e:	f040 8187 	bne.w	8007b90 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007882:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	f040 8180 	bne.w	8007b90 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007890:	1d3b      	adds	r3, r7, #4
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	463b      	mov	r3, r7
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078aa:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80078ae:	1d3b      	adds	r3, r7, #4
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	463b      	mov	r3, r7
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	441a      	add	r2, r3
 80078bc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80078c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	8013      	strh	r3, [r2, #0]
 80078d4:	e15c      	b.n	8007b90 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80078d6:	463b      	mov	r3, r7
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	78db      	ldrb	r3, [r3, #3]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	f040 8155 	bne.w	8007b8c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80078e2:	463b      	mov	r3, r7
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	699a      	ldr	r2, [r3, #24]
 80078e8:	463b      	mov	r3, r7
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d90e      	bls.n	8007910 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80078f2:	463b      	mov	r3, r7
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80078fc:	463b      	mov	r3, r7
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699a      	ldr	r2, [r3, #24]
 8007902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007906:	1ad2      	subs	r2, r2, r3
 8007908:	463b      	mov	r3, r7
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	619a      	str	r2, [r3, #24]
 800790e:	e008      	b.n	8007922 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8007910:	463b      	mov	r3, r7
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800791a:	463b      	mov	r3, r7
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2200      	movs	r2, #0
 8007920:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007922:	463b      	mov	r3, r7
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	785b      	ldrb	r3, [r3, #1]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d16f      	bne.n	8007a0c <USB_EPStartXfer+0x1054>
 800792c:	1d3b      	adds	r3, r7, #4
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007934:	1d3b      	adds	r3, r7, #4
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800793c:	b29b      	uxth	r3, r3
 800793e:	461a      	mov	r2, r3
 8007940:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007944:	4413      	add	r3, r2
 8007946:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800794a:	463b      	mov	r3, r7
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	011a      	lsls	r2, r3, #4
 8007952:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007956:	4413      	add	r3, r2
 8007958:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800795c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007964:	2b00      	cmp	r3, #0
 8007966:	d116      	bne.n	8007996 <USB_EPStartXfer+0xfde>
 8007968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007974:	b29a      	uxth	r2, r3
 8007976:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800797a:	801a      	strh	r2, [r3, #0]
 800797c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800798c:	b29a      	uxth	r2, r3
 800798e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007992:	801a      	strh	r2, [r3, #0]
 8007994:	e05f      	b.n	8007a56 <USB_EPStartXfer+0x109e>
 8007996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800799a:	2b3e      	cmp	r3, #62	; 0x3e
 800799c:	d818      	bhi.n	80079d0 <USB_EPStartXfer+0x1018>
 800799e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079a2:	085b      	lsrs	r3, r3, #1
 80079a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d004      	beq.n	80079be <USB_EPStartXfer+0x1006>
 80079b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b8:	3301      	adds	r3, #1
 80079ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	029b      	lsls	r3, r3, #10
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079cc:	801a      	strh	r2, [r3, #0]
 80079ce:	e042      	b.n	8007a56 <USB_EPStartXfer+0x109e>
 80079d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079d4:	095b      	lsrs	r3, r3, #5
 80079d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079de:	f003 031f 	and.w	r3, r3, #31
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d104      	bne.n	80079f0 <USB_EPStartXfer+0x1038>
 80079e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ea:	3b01      	subs	r3, #1
 80079ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	029b      	lsls	r3, r3, #10
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	e024      	b.n	8007a56 <USB_EPStartXfer+0x109e>
 8007a0c:	463b      	mov	r3, r7
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	785b      	ldrb	r3, [r3, #1]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d11f      	bne.n	8007a56 <USB_EPStartXfer+0x109e>
 8007a16:	1d3b      	adds	r3, r7, #4
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a1e:	1d3b      	adds	r3, r7, #4
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a2e:	4413      	add	r3, r2
 8007a30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a34:	463b      	mov	r3, r7
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	011a      	lsls	r2, r3, #4
 8007a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a40:	4413      	add	r3, r2
 8007a42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	1d3b      	adds	r3, r7, #4
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a5e:	463b      	mov	r3, r7
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d16f      	bne.n	8007b48 <USB_EPStartXfer+0x1190>
 8007a68:	1d3b      	adds	r3, r7, #4
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a70:	1d3b      	adds	r3, r7, #4
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a80:	4413      	add	r3, r2
 8007a82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a86:	463b      	mov	r3, r7
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	011a      	lsls	r2, r3, #4
 8007a8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a92:	4413      	add	r3, r2
 8007a94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d116      	bne.n	8007ad2 <USB_EPStartXfer+0x111a>
 8007aa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ab6:	801a      	strh	r2, [r3, #0]
 8007ab8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007ace:	801a      	strh	r2, [r3, #0]
 8007ad0:	e05e      	b.n	8007b90 <USB_EPStartXfer+0x11d8>
 8007ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ad6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ad8:	d818      	bhi.n	8007b0c <USB_EPStartXfer+0x1154>
 8007ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ade:	085b      	lsrs	r3, r3, #1
 8007ae0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d004      	beq.n	8007afa <USB_EPStartXfer+0x1142>
 8007af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007af4:	3301      	adds	r3, #1
 8007af6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	029b      	lsls	r3, r3, #10
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b08:	801a      	strh	r2, [r3, #0]
 8007b0a:	e041      	b.n	8007b90 <USB_EPStartXfer+0x11d8>
 8007b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b10:	095b      	lsrs	r3, r3, #5
 8007b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b1a:	f003 031f 	and.w	r3, r3, #31
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d104      	bne.n	8007b2c <USB_EPStartXfer+0x1174>
 8007b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b26:	3b01      	subs	r3, #1
 8007b28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	029b      	lsls	r3, r3, #10
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	e023      	b.n	8007b90 <USB_EPStartXfer+0x11d8>
 8007b48:	463b      	mov	r3, r7
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	785b      	ldrb	r3, [r3, #1]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d11e      	bne.n	8007b90 <USB_EPStartXfer+0x11d8>
 8007b52:	1d3b      	adds	r3, r7, #4
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b62:	4413      	add	r3, r2
 8007b64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b68:	463b      	mov	r3, r7
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	011a      	lsls	r2, r3, #4
 8007b70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b74:	4413      	add	r3, r2
 8007b76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	e001      	b.n	8007b90 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e02e      	b.n	8007bee <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b90:	1d3b      	adds	r3, r7, #4
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	463b      	mov	r3, r7
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007baa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007bae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007bb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bb6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007bba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007bbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bc2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007bc6:	1d3b      	adds	r3, r7, #4
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	463b      	mov	r3, r7
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	441a      	add	r2, r3
 8007bd4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	785b      	ldrb	r3, [r3, #1]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d020      	beq.n	8007c4c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c20:	81bb      	strh	r3, [r7, #12]
 8007c22:	89bb      	ldrh	r3, [r7, #12]
 8007c24:	f083 0310 	eor.w	r3, r3, #16
 8007c28:	81bb      	strh	r3, [r7, #12]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	441a      	add	r2, r3
 8007c34:	89bb      	ldrh	r3, [r7, #12]
 8007c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	8013      	strh	r3, [r2, #0]
 8007c4a:	e01f      	b.n	8007c8c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c62:	81fb      	strh	r3, [r7, #14]
 8007c64:	89fb      	ldrh	r3, [r7, #14]
 8007c66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c6a:	81fb      	strh	r3, [r7, #14]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	441a      	add	r2, r3
 8007c76:	89fb      	ldrh	r3, [r7, #14]
 8007c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bc80      	pop	{r7}
 8007c96:	4770      	bx	lr

08007c98 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	7b1b      	ldrb	r3, [r3, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f040 809d 	bne.w	8007de6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d04c      	beq.n	8007d4e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	823b      	strh	r3, [r7, #16]
 8007cc2:	8a3b      	ldrh	r3, [r7, #16]
 8007cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d01b      	beq.n	8007d04 <USB_EPClearStall+0x6c>
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce2:	81fb      	strh	r3, [r7, #14]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	441a      	add	r2, r3
 8007cee:	89fb      	ldrh	r3, [r7, #14]
 8007cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	78db      	ldrb	r3, [r3, #3]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d06c      	beq.n	8007de6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d22:	81bb      	strh	r3, [r7, #12]
 8007d24:	89bb      	ldrh	r3, [r7, #12]
 8007d26:	f083 0320 	eor.w	r3, r3, #32
 8007d2a:	81bb      	strh	r3, [r7, #12]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	441a      	add	r2, r3
 8007d36:	89bb      	ldrh	r3, [r7, #12]
 8007d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	8013      	strh	r3, [r2, #0]
 8007d4c:	e04b      	b.n	8007de6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	82fb      	strh	r3, [r7, #22]
 8007d5c:	8afb      	ldrh	r3, [r7, #22]
 8007d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d01b      	beq.n	8007d9e <USB_EPClearStall+0x106>
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d7c:	82bb      	strh	r3, [r7, #20]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	441a      	add	r2, r3
 8007d88:	8abb      	ldrh	r3, [r7, #20]
 8007d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db4:	827b      	strh	r3, [r7, #18]
 8007db6:	8a7b      	ldrh	r3, [r7, #18]
 8007db8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007dbc:	827b      	strh	r3, [r7, #18]
 8007dbe:	8a7b      	ldrh	r3, [r7, #18]
 8007dc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007dc4:	827b      	strh	r3, [r7, #18]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	441a      	add	r2, r3
 8007dd0:	8a7b      	ldrh	r3, [r7, #18]
 8007dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	371c      	adds	r7, #28
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr

08007df2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d103      	bne.n	8007e0c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2280      	movs	r2, #128	; 0x80
 8007e08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr

08007e18 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bc80      	pop	{r7}
 8007e2a:	4770      	bx	lr

08007e2c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bc80      	pop	{r7}
 8007e3e:	4770      	bx	lr

08007e40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e52:	68fb      	ldr	r3, [r7, #12]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bc80      	pop	{r7}
 8007e5c:	4770      	bx	lr

08007e5e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr

08007e74 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b08d      	sub	sp, #52	; 0x34
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	4611      	mov	r1, r2
 8007e80:	461a      	mov	r2, r3
 8007e82:	460b      	mov	r3, r1
 8007e84:	80fb      	strh	r3, [r7, #6]
 8007e86:	4613      	mov	r3, r2
 8007e88:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e8a:	88bb      	ldrh	r3, [r7, #4]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	085b      	lsrs	r3, r3, #1
 8007e90:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e9a:	88fb      	ldrh	r3, [r7, #6]
 8007e9c:	005a      	lsls	r2, r3, #1
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ea6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eac:	e01e      	b.n	8007eec <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	021b      	lsls	r3, r3, #8
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	3302      	adds	r3, #2
 8007ed8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007edc:	3302      	adds	r3, #2
 8007ede:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1dd      	bne.n	8007eae <USB_WritePMA+0x3a>
  }
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	3734      	adds	r7, #52	; 0x34
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc80      	pop	{r7}
 8007efc:	4770      	bx	lr

08007efe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b08b      	sub	sp, #44	; 0x2c
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	60f8      	str	r0, [r7, #12]
 8007f06:	60b9      	str	r1, [r7, #8]
 8007f08:	4611      	mov	r1, r2
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	80fb      	strh	r3, [r7, #6]
 8007f10:	4613      	mov	r3, r2
 8007f12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007f14:	88bb      	ldrh	r3, [r7, #4]
 8007f16:	085b      	lsrs	r3, r3, #1
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f24:	88fb      	ldrh	r3, [r7, #6]
 8007f26:	005a      	lsls	r2, r3, #1
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f30:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
 8007f36:	e01b      	b.n	8007f70 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	881b      	ldrh	r3, [r3, #0]
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	3302      	adds	r3, #2
 8007f44:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	3301      	adds	r3, #1
 8007f52:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	0a1b      	lsrs	r3, r3, #8
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	3301      	adds	r3, #1
 8007f62:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	3302      	adds	r3, #2
 8007f68:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e0      	bne.n	8007f38 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007f76:	88bb      	ldrh	r3, [r7, #4]
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d007      	beq.n	8007f92 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	701a      	strb	r2, [r3, #0]
  }
}
 8007f92:	bf00      	nop
 8007f94:	372c      	adds	r7, #44	; 0x2c
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bc80      	pop	{r7}
 8007f9a:	4770      	bx	lr

08007f9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	7c1b      	ldrb	r3, [r3, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d115      	bne.n	8007fe0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fb8:	2202      	movs	r2, #2
 8007fba:	2181      	movs	r1, #129	; 0x81
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f002 f816 	bl	8009fee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fcc:	2202      	movs	r2, #2
 8007fce:	2101      	movs	r1, #1
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f002 f80c 	bl	8009fee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007fde:	e012      	b.n	8008006 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007fe0:	2340      	movs	r3, #64	; 0x40
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	2181      	movs	r1, #129	; 0x81
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f002 f801 	bl	8009fee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ff2:	2340      	movs	r3, #64	; 0x40
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 fff8 	bl	8009fee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008006:	2308      	movs	r3, #8
 8008008:	2203      	movs	r2, #3
 800800a:	2182      	movs	r1, #130	; 0x82
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 ffee 	bl	8009fee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008018:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800801c:	f002 f90e 	bl	800a23c <USBD_static_malloc>
 8008020:	4602      	mov	r2, r0
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802e:	2b00      	cmp	r3, #0
 8008030:	d102      	bne.n	8008038 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008032:	2301      	movs	r3, #1
 8008034:	73fb      	strb	r3, [r7, #15]
 8008036:	e026      	b.n	8008086 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800803e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2200      	movs	r2, #0
 800804e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2200      	movs	r2, #0
 8008056:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	7c1b      	ldrb	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d109      	bne.n	8008076 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800806c:	2101      	movs	r1, #1
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f002 f8ae 	bl	800a1d0 <USBD_LL_PrepareReceive>
 8008074:	e007      	b.n	8008086 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800807c:	2340      	movs	r3, #64	; 0x40
 800807e:	2101      	movs	r1, #1
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f002 f8a5 	bl	800a1d0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008086:	7bfb      	ldrb	r3, [r7, #15]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800809c:	2300      	movs	r3, #0
 800809e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80080a0:	2181      	movs	r1, #129	; 0x81
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 ffc9 	bl	800a03a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80080ae:	2101      	movs	r1, #1
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 ffc2 	bl	800a03a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80080be:	2182      	movs	r1, #130	; 0x82
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 ffba 	bl	800a03a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00e      	beq.n	80080f4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e6:	4618      	mov	r0, r3
 80080e8:	f002 f8b4 	bl	800a254 <USBD_static_free>
    pdev->pClassData = NULL;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b086      	sub	sp, #24
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008124:	2b00      	cmp	r3, #0
 8008126:	d039      	beq.n	800819c <USBD_CDC_Setup+0x9e>
 8008128:	2b20      	cmp	r3, #32
 800812a:	d17f      	bne.n	800822c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	88db      	ldrh	r3, [r3, #6]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d029      	beq.n	8008188 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	b25b      	sxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	da11      	bge.n	8008162 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800814a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	88d2      	ldrh	r2, [r2, #6]
 8008150:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008152:	6939      	ldr	r1, [r7, #16]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	88db      	ldrh	r3, [r3, #6]
 8008158:	461a      	mov	r2, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 fa09 	bl	8009572 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008160:	e06b      	b.n	800823a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	785a      	ldrb	r2, [r3, #1]
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	88db      	ldrh	r3, [r3, #6]
 8008170:	b2da      	uxtb	r2, r3
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008178:	6939      	ldr	r1, [r7, #16]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	88db      	ldrh	r3, [r3, #6]
 800817e:	461a      	mov	r2, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f001 fa24 	bl	80095ce <USBD_CtlPrepareRx>
      break;
 8008186:	e058      	b.n	800823a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	7850      	ldrb	r0, [r2, #1]
 8008194:	2200      	movs	r2, #0
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	4798      	blx	r3
      break;
 800819a:	e04e      	b.n	800823a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	785b      	ldrb	r3, [r3, #1]
 80081a0:	2b0b      	cmp	r3, #11
 80081a2:	d02e      	beq.n	8008202 <USBD_CDC_Setup+0x104>
 80081a4:	2b0b      	cmp	r3, #11
 80081a6:	dc38      	bgt.n	800821a <USBD_CDC_Setup+0x11c>
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <USBD_CDC_Setup+0xb4>
 80081ac:	2b0a      	cmp	r3, #10
 80081ae:	d014      	beq.n	80081da <USBD_CDC_Setup+0xdc>
 80081b0:	e033      	b.n	800821a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d107      	bne.n	80081cc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80081bc:	f107 030c 	add.w	r3, r7, #12
 80081c0:	2202      	movs	r2, #2
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f001 f9d4 	bl	8009572 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081ca:	e02e      	b.n	800822a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 f965 	bl	800949e <USBD_CtlError>
            ret = USBD_FAIL;
 80081d4:	2302      	movs	r3, #2
 80081d6:	75fb      	strb	r3, [r7, #23]
          break;
 80081d8:	e027      	b.n	800822a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d107      	bne.n	80081f4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80081e4:	f107 030f 	add.w	r3, r7, #15
 80081e8:	2201      	movs	r2, #1
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 f9c0 	bl	8009572 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081f2:	e01a      	b.n	800822a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f001 f951 	bl	800949e <USBD_CtlError>
            ret = USBD_FAIL;
 80081fc:	2302      	movs	r3, #2
 80081fe:	75fb      	strb	r3, [r7, #23]
          break;
 8008200:	e013      	b.n	800822a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008208:	2b03      	cmp	r3, #3
 800820a:	d00d      	beq.n	8008228 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f001 f945 	bl	800949e <USBD_CtlError>
            ret = USBD_FAIL;
 8008214:	2302      	movs	r3, #2
 8008216:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008218:	e006      	b.n	8008228 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 f93e 	bl	800949e <USBD_CtlError>
          ret = USBD_FAIL;
 8008222:	2302      	movs	r3, #2
 8008224:	75fb      	strb	r3, [r7, #23]
          break;
 8008226:	e000      	b.n	800822a <USBD_CDC_Setup+0x12c>
          break;
 8008228:	bf00      	nop
      }
      break;
 800822a:	e006      	b.n	800823a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f001 f935 	bl	800949e <USBD_CtlError>
      ret = USBD_FAIL;
 8008234:	2302      	movs	r3, #2
 8008236:	75fb      	strb	r3, [r7, #23]
      break;
 8008238:	bf00      	nop
  }

  return ret;
 800823a:	7dfb      	ldrb	r3, [r7, #23]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008256:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800825e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008266:	2b00      	cmp	r3, #0
 8008268:	d03a      	beq.n	80082e0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800826a:	78fa      	ldrb	r2, [r7, #3]
 800826c:	6879      	ldr	r1, [r7, #4]
 800826e:	4613      	mov	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	440b      	add	r3, r1
 8008278:	331c      	adds	r3, #28
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d029      	beq.n	80082d4 <USBD_CDC_DataIn+0x90>
 8008280:	78fa      	ldrb	r2, [r7, #3]
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	4613      	mov	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	331c      	adds	r3, #28
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	78f9      	ldrb	r1, [r7, #3]
 8008294:	68b8      	ldr	r0, [r7, #8]
 8008296:	460b      	mov	r3, r1
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	440b      	add	r3, r1
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	4403      	add	r3, r0
 80082a0:	3338      	adds	r3, #56	; 0x38
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80082a8:	fb03 f301 	mul.w	r3, r3, r1
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d110      	bne.n	80082d4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80082b2:	78fa      	ldrb	r2, [r7, #3]
 80082b4:	6879      	ldr	r1, [r7, #4]
 80082b6:	4613      	mov	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	440b      	add	r3, r1
 80082c0:	331c      	adds	r3, #28
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80082c6:	78f9      	ldrb	r1, [r7, #3]
 80082c8:	2300      	movs	r3, #0
 80082ca:	2200      	movs	r2, #0
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f001 ff5c 	bl	800a18a <USBD_LL_Transmit>
 80082d2:	e003      	b.n	80082dc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	e000      	b.n	80082e2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80082e0:	2302      	movs	r3, #2
  }
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	460b      	mov	r3, r1
 80082f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80082fe:	78fb      	ldrb	r3, [r7, #3]
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 ff87 	bl	800a216 <USBD_LL_GetRxDataSize>
 8008308:	4602      	mov	r2, r0
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00d      	beq.n	8008336 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800832e:	4611      	mov	r1, r2
 8008330:	4798      	blx	r3

    return USBD_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	e000      	b.n	8008338 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008336:	2302      	movs	r3, #2
  }
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800834e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008356:	2b00      	cmp	r3, #0
 8008358:	d015      	beq.n	8008386 <USBD_CDC_EP0_RxReady+0x46>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008360:	2bff      	cmp	r3, #255	; 0xff
 8008362:	d010      	beq.n	8008386 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008372:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800837a:	b292      	uxth	r2, r2
 800837c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	22ff      	movs	r2, #255	; 0xff
 8008382:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2243      	movs	r2, #67	; 0x43
 800839c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800839e:	4b03      	ldr	r3, [pc, #12]	; (80083ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	200000a8 	.word	0x200000a8

080083b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2243      	movs	r2, #67	; 0x43
 80083bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80083be:	4b03      	ldr	r3, [pc, #12]	; (80083cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc80      	pop	{r7}
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	20000064 	.word	0x20000064

080083d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2243      	movs	r2, #67	; 0x43
 80083dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80083de:	4b03      	ldr	r3, [pc, #12]	; (80083ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bc80      	pop	{r7}
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	200000ec 	.word	0x200000ec

080083f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	220a      	movs	r2, #10
 80083fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80083fe:	4b03      	ldr	r3, [pc, #12]	; (800840c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008400:	4618      	mov	r0, r3
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	bc80      	pop	{r7}
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	20000020 	.word	0x20000020

08008410 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800841a:	2302      	movs	r3, #2
 800841c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d005      	beq.n	8008430 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008430:	7bfb      	ldrb	r3, [r7, #15]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	bc80      	pop	{r7}
 800843a:	4770      	bx	lr

0800843c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4613      	mov	r3, r2
 8008448:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008450:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800845a:	88fa      	ldrh	r2, [r7, #6]
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	371c      	adds	r7, #28
 8008468:	46bd      	mov	sp, r7
 800846a:	bc80      	pop	{r7}
 800846c:	4770      	bx	lr

0800846e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800846e:	b480      	push	{r7}
 8008470:	b085      	sub	sp, #20
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	bc80      	pop	{r7}
 8008492:	4770      	bx	lr

08008494 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d01c      	beq.n	80084e8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d115      	bne.n	80084e4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	2181      	movs	r1, #129	; 0x81
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f001 fe55 	bl	800a18a <USBD_LL_Transmit>

      return USBD_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	e002      	b.n	80084ea <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e000      	b.n	80084ea <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80084e8:	2302      	movs	r3, #2
  }
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008500:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008508:	2b00      	cmp	r3, #0
 800850a:	d017      	beq.n	800853c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	7c1b      	ldrb	r3, [r3, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d109      	bne.n	8008528 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800851a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800851e:	2101      	movs	r1, #1
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f001 fe55 	bl	800a1d0 <USBD_LL_PrepareReceive>
 8008526:	e007      	b.n	8008538 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800852e:	2340      	movs	r3, #64	; 0x40
 8008530:	2101      	movs	r1, #1
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f001 fe4c 	bl	800a1d0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	e000      	b.n	800853e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800853c:	2302      	movs	r3, #2
  }
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	4613      	mov	r3, r2
 8008552:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800855a:	2302      	movs	r3, #2
 800855c:	e01a      	b.n	8008594 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008564:	2b00      	cmp	r3, #0
 8008566:	d003      	beq.n	8008570 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	79fa      	ldrb	r2, [r7, #7]
 800858a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f001 fcb9 	bl	8009f04 <USBD_LL_Init>

  return USBD_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d006      	beq.n	80085be <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
 80085bc:	e001      	b.n	80085c2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80085be:	2302      	movs	r3, #2
 80085c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bc80      	pop	{r7}
 80085cc:	4770      	bx	lr

080085ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f001 fcee 	bl	8009fb8 <USBD_LL_Start>

  return USBD_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bc80      	pop	{r7}
 80085f8:	4770      	bx	lr

080085fa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	460b      	mov	r3, r1
 8008604:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008606:	2302      	movs	r3, #2
 8008608:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00c      	beq.n	800862e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	78fa      	ldrb	r2, [r7, #3]
 800861e:	4611      	mov	r1, r2
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	4798      	blx	r3
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800862e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	78fa      	ldrb	r2, [r7, #3]
 800864e:	4611      	mov	r1, r2
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	4798      	blx	r3

  return USBD_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f000 fed8 	bl	8009426 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008684:	461a      	mov	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008692:	f003 031f 	and.w	r3, r3, #31
 8008696:	2b02      	cmp	r3, #2
 8008698:	d016      	beq.n	80086c8 <USBD_LL_SetupStage+0x6a>
 800869a:	2b02      	cmp	r3, #2
 800869c:	d81c      	bhi.n	80086d8 <USBD_LL_SetupStage+0x7a>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d002      	beq.n	80086a8 <USBD_LL_SetupStage+0x4a>
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d008      	beq.n	80086b8 <USBD_LL_SetupStage+0x5a>
 80086a6:	e017      	b.n	80086d8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f9cb 	bl	8008a4c <USBD_StdDevReq>
      break;
 80086b6:	e01a      	b.n	80086ee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fa2d 	bl	8008b20 <USBD_StdItfReq>
      break;
 80086c6:	e012      	b.n	80086ee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fa6d 	bl	8008bb0 <USBD_StdEPReq>
      break;
 80086d6:	e00a      	b.n	80086ee <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80086de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f001 fcc6 	bl	800a078 <USBD_LL_StallEP>
      break;
 80086ec:	bf00      	nop
  }

  return USBD_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	460b      	mov	r3, r1
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008706:	7afb      	ldrb	r3, [r7, #11]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d14b      	bne.n	80087a4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008712:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800871a:	2b03      	cmp	r3, #3
 800871c:	d134      	bne.n	8008788 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	429a      	cmp	r2, r3
 8008728:	d919      	bls.n	800875e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	1ad2      	subs	r2, r2, r3
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	68da      	ldr	r2, [r3, #12]
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008740:	429a      	cmp	r2, r3
 8008742:	d203      	bcs.n	800874c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008748:	b29b      	uxth	r3, r3
 800874a:	e002      	b.n	8008752 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008750:	b29b      	uxth	r3, r3
 8008752:	461a      	mov	r2, r3
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 ff57 	bl	800960a <USBD_CtlContinueRx>
 800875c:	e038      	b.n	80087d0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00a      	beq.n	8008780 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008770:	2b03      	cmp	r3, #3
 8008772:	d105      	bne.n	8008780 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 ff54 	bl	800962e <USBD_CtlSendStatus>
 8008786:	e023      	b.n	80087d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800878e:	2b05      	cmp	r3, #5
 8008790:	d11e      	bne.n	80087d0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800879a:	2100      	movs	r1, #0
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f001 fc6b 	bl	800a078 <USBD_LL_StallEP>
 80087a2:	e015      	b.n	80087d0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00d      	beq.n	80087cc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d108      	bne.n	80087cc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	7afa      	ldrb	r2, [r7, #11]
 80087c4:	4611      	mov	r1, r2
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	4798      	blx	r3
 80087ca:	e001      	b.n	80087d0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087cc:	2302      	movs	r3, #2
 80087ce:	e000      	b.n	80087d2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b086      	sub	sp, #24
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	460b      	mov	r3, r1
 80087e4:	607a      	str	r2, [r7, #4]
 80087e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087e8:	7afb      	ldrb	r3, [r7, #11]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d17f      	bne.n	80088ee <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3314      	adds	r3, #20
 80087f2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d15c      	bne.n	80088b8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	68da      	ldr	r2, [r3, #12]
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	429a      	cmp	r2, r3
 8008808:	d915      	bls.n	8008836 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	1ad2      	subs	r2, r2, r3
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	b29b      	uxth	r3, r3
 800881e:	461a      	mov	r2, r3
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 fec1 	bl	80095aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008828:	2300      	movs	r3, #0
 800882a:	2200      	movs	r2, #0
 800882c:	2100      	movs	r1, #0
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f001 fcce 	bl	800a1d0 <USBD_LL_PrepareReceive>
 8008834:	e04e      	b.n	80088d4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	6912      	ldr	r2, [r2, #16]
 800883e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008842:	fb02 f201 	mul.w	r2, r2, r1
 8008846:	1a9b      	subs	r3, r3, r2
 8008848:	2b00      	cmp	r3, #0
 800884a:	d11c      	bne.n	8008886 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	689a      	ldr	r2, [r3, #8]
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008854:	429a      	cmp	r2, r3
 8008856:	d316      	bcc.n	8008886 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	689a      	ldr	r2, [r3, #8]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008862:	429a      	cmp	r2, r3
 8008864:	d20f      	bcs.n	8008886 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008866:	2200      	movs	r2, #0
 8008868:	2100      	movs	r1, #0
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 fe9d 	bl	80095aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008878:	2300      	movs	r3, #0
 800887a:	2200      	movs	r2, #0
 800887c:	2100      	movs	r1, #0
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f001 fca6 	bl	800a1d0 <USBD_LL_PrepareReceive>
 8008884:	e026      	b.n	80088d4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00a      	beq.n	80088a8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008898:	2b03      	cmp	r3, #3
 800889a:	d105      	bne.n	80088a8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80088a8:	2180      	movs	r1, #128	; 0x80
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f001 fbe4 	bl	800a078 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 fecf 	bl	8009654 <USBD_CtlReceiveStatus>
 80088b6:	e00d      	b.n	80088d4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088be:	2b04      	cmp	r3, #4
 80088c0:	d004      	beq.n	80088cc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d103      	bne.n	80088d4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80088cc:	2180      	movs	r1, #128	; 0x80
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f001 fbd2 	bl	800a078 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d11d      	bne.n	800891a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f7ff fe81 	bl	80085e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088ec:	e015      	b.n	800891a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00d      	beq.n	8008916 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008900:	2b03      	cmp	r3, #3
 8008902:	d108      	bne.n	8008916 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	7afa      	ldrb	r2, [r7, #11]
 800890e:	4611      	mov	r1, r2
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	4798      	blx	r3
 8008914:	e001      	b.n	800891a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008916:	2302      	movs	r3, #2
 8008918:	e000      	b.n	800891c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800892c:	2340      	movs	r3, #64	; 0x40
 800892e:	2200      	movs	r2, #0
 8008930:	2100      	movs	r1, #0
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f001 fb5b 	bl	8009fee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2240      	movs	r2, #64	; 0x40
 8008944:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008948:	2340      	movs	r3, #64	; 0x40
 800894a:	2200      	movs	r2, #0
 800894c:	2180      	movs	r1, #128	; 0x80
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 fb4d 	bl	8009fee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2240      	movs	r2, #64	; 0x40
 800895e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008984:	2b00      	cmp	r3, #0
 8008986:	d009      	beq.n	800899c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	6852      	ldr	r2, [r2, #4]
 8008994:	b2d2      	uxtb	r2, r2
 8008996:	4611      	mov	r1, r2
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	4798      	blx	r3
  }

  return USBD_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b083      	sub	sp, #12
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	460b      	mov	r3, r1
 80089b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	78fa      	ldrb	r2, [r7, #3]
 80089b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	bc80      	pop	{r7}
 80089c2:	4770      	bx	lr

080089c4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2204      	movs	r2, #4
 80089dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bc80      	pop	{r7}
 80089ea:	4770      	bx	lr

080089ec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	d105      	bne.n	8008a0a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bc80      	pop	{r7}
 8008a14:	4770      	bx	lr

08008a16 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	d10b      	bne.n	8008a40 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a62:	2b40      	cmp	r3, #64	; 0x40
 8008a64:	d005      	beq.n	8008a72 <USBD_StdDevReq+0x26>
 8008a66:	2b40      	cmp	r3, #64	; 0x40
 8008a68:	d84f      	bhi.n	8008b0a <USBD_StdDevReq+0xbe>
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d009      	beq.n	8008a82 <USBD_StdDevReq+0x36>
 8008a6e:	2b20      	cmp	r3, #32
 8008a70:	d14b      	bne.n	8008b0a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	4798      	blx	r3
      break;
 8008a80:	e048      	b.n	8008b14 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	785b      	ldrb	r3, [r3, #1]
 8008a86:	2b09      	cmp	r3, #9
 8008a88:	d839      	bhi.n	8008afe <USBD_StdDevReq+0xb2>
 8008a8a:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <USBD_StdDevReq+0x44>)
 8008a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a90:	08008ae1 	.word	0x08008ae1
 8008a94:	08008af5 	.word	0x08008af5
 8008a98:	08008aff 	.word	0x08008aff
 8008a9c:	08008aeb 	.word	0x08008aeb
 8008aa0:	08008aff 	.word	0x08008aff
 8008aa4:	08008ac3 	.word	0x08008ac3
 8008aa8:	08008ab9 	.word	0x08008ab9
 8008aac:	08008aff 	.word	0x08008aff
 8008ab0:	08008ad7 	.word	0x08008ad7
 8008ab4:	08008acd 	.word	0x08008acd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f9dc 	bl	8008e78 <USBD_GetDescriptor>
          break;
 8008ac0:	e022      	b.n	8008b08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fb3f 	bl	8009148 <USBD_SetAddress>
          break;
 8008aca:	e01d      	b.n	8008b08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fb7e 	bl	80091d0 <USBD_SetConfig>
          break;
 8008ad4:	e018      	b.n	8008b08 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fc07 	bl	80092ec <USBD_GetConfig>
          break;
 8008ade:	e013      	b.n	8008b08 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fc37 	bl	8009356 <USBD_GetStatus>
          break;
 8008ae8:	e00e      	b.n	8008b08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fc65 	bl	80093bc <USBD_SetFeature>
          break;
 8008af2:	e009      	b.n	8008b08 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fc74 	bl	80093e4 <USBD_ClrFeature>
          break;
 8008afc:	e004      	b.n	8008b08 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fccc 	bl	800949e <USBD_CtlError>
          break;
 8008b06:	bf00      	nop
      }
      break;
 8008b08:	e004      	b.n	8008b14 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fcc6 	bl	800949e <USBD_CtlError>
      break;
 8008b12:	bf00      	nop
  }

  return ret;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop

08008b20 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b36:	2b40      	cmp	r3, #64	; 0x40
 8008b38:	d005      	beq.n	8008b46 <USBD_StdItfReq+0x26>
 8008b3a:	2b40      	cmp	r3, #64	; 0x40
 8008b3c:	d82e      	bhi.n	8008b9c <USBD_StdItfReq+0x7c>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <USBD_StdItfReq+0x26>
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	d12a      	bne.n	8008b9c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d81d      	bhi.n	8008b8e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	889b      	ldrh	r3, [r3, #4]
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d813      	bhi.n	8008b84 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	4798      	blx	r3
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	88db      	ldrh	r3, [r3, #6]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d110      	bne.n	8008b98 <USBD_StdItfReq+0x78>
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10d      	bne.n	8008b98 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fd56 	bl	800962e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b82:	e009      	b.n	8008b98 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fc89 	bl	800949e <USBD_CtlError>
          break;
 8008b8c:	e004      	b.n	8008b98 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fc84 	bl	800949e <USBD_CtlError>
          break;
 8008b96:	e000      	b.n	8008b9a <USBD_StdItfReq+0x7a>
          break;
 8008b98:	bf00      	nop
      }
      break;
 8008b9a:	e004      	b.n	8008ba6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fc7d 	bl	800949e <USBD_CtlError>
      break;
 8008ba4:	bf00      	nop
  }

  return USBD_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	889b      	ldrh	r3, [r3, #4]
 8008bc2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bcc:	2b40      	cmp	r3, #64	; 0x40
 8008bce:	d007      	beq.n	8008be0 <USBD_StdEPReq+0x30>
 8008bd0:	2b40      	cmp	r3, #64	; 0x40
 8008bd2:	f200 8146 	bhi.w	8008e62 <USBD_StdEPReq+0x2b2>
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00a      	beq.n	8008bf0 <USBD_StdEPReq+0x40>
 8008bda:	2b20      	cmp	r3, #32
 8008bdc:	f040 8141 	bne.w	8008e62 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	4798      	blx	r3
      break;
 8008bee:	e13d      	b.n	8008e6c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bf8:	2b20      	cmp	r3, #32
 8008bfa:	d10a      	bne.n	8008c12 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	4798      	blx	r3
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	e12d      	b.n	8008e6e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	785b      	ldrb	r3, [r3, #1]
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d007      	beq.n	8008c2a <USBD_StdEPReq+0x7a>
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	f300 811b 	bgt.w	8008e56 <USBD_StdEPReq+0x2a6>
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d072      	beq.n	8008d0a <USBD_StdEPReq+0x15a>
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d03a      	beq.n	8008c9e <USBD_StdEPReq+0xee>
 8008c28:	e115      	b.n	8008e56 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d002      	beq.n	8008c3a <USBD_StdEPReq+0x8a>
 8008c34:	2b03      	cmp	r3, #3
 8008c36:	d015      	beq.n	8008c64 <USBD_StdEPReq+0xb4>
 8008c38:	e02b      	b.n	8008c92 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00c      	beq.n	8008c5a <USBD_StdEPReq+0xaa>
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
 8008c42:	2b80      	cmp	r3, #128	; 0x80
 8008c44:	d009      	beq.n	8008c5a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c46:	7bbb      	ldrb	r3, [r7, #14]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f001 fa14 	bl	800a078 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c50:	2180      	movs	r1, #128	; 0x80
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f001 fa10 	bl	800a078 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c58:	e020      	b.n	8008c9c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fc1e 	bl	800949e <USBD_CtlError>
              break;
 8008c62:	e01b      	b.n	8008c9c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	885b      	ldrh	r3, [r3, #2]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10e      	bne.n	8008c8a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008c6c:	7bbb      	ldrb	r3, [r7, #14]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00b      	beq.n	8008c8a <USBD_StdEPReq+0xda>
 8008c72:	7bbb      	ldrb	r3, [r7, #14]
 8008c74:	2b80      	cmp	r3, #128	; 0x80
 8008c76:	d008      	beq.n	8008c8a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	88db      	ldrh	r3, [r3, #6]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d104      	bne.n	8008c8a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f001 f9f7 	bl	800a078 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fccf 	bl	800962e <USBD_CtlSendStatus>

              break;
 8008c90:	e004      	b.n	8008c9c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fc02 	bl	800949e <USBD_CtlError>
              break;
 8008c9a:	bf00      	nop
          }
          break;
 8008c9c:	e0e0      	b.n	8008e60 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d002      	beq.n	8008cae <USBD_StdEPReq+0xfe>
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d015      	beq.n	8008cd8 <USBD_StdEPReq+0x128>
 8008cac:	e026      	b.n	8008cfc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00c      	beq.n	8008cce <USBD_StdEPReq+0x11e>
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	2b80      	cmp	r3, #128	; 0x80
 8008cb8:	d009      	beq.n	8008cce <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008cba:	7bbb      	ldrb	r3, [r7, #14]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f001 f9da 	bl	800a078 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008cc4:	2180      	movs	r1, #128	; 0x80
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 f9d6 	bl	800a078 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ccc:	e01c      	b.n	8008d08 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fbe4 	bl	800949e <USBD_CtlError>
              break;
 8008cd6:	e017      	b.n	8008d08 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	885b      	ldrh	r3, [r3, #2]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d112      	bne.n	8008d06 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d004      	beq.n	8008cf4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f001 f9e1 	bl	800a0b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fc9a 	bl	800962e <USBD_CtlSendStatus>
              }
              break;
 8008cfa:	e004      	b.n	8008d06 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fbcd 	bl	800949e <USBD_CtlError>
              break;
 8008d04:	e000      	b.n	8008d08 <USBD_StdEPReq+0x158>
              break;
 8008d06:	bf00      	nop
          }
          break;
 8008d08:	e0aa      	b.n	8008e60 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d002      	beq.n	8008d1a <USBD_StdEPReq+0x16a>
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d032      	beq.n	8008d7e <USBD_StdEPReq+0x1ce>
 8008d18:	e097      	b.n	8008e4a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d007      	beq.n	8008d30 <USBD_StdEPReq+0x180>
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	2b80      	cmp	r3, #128	; 0x80
 8008d24:	d004      	beq.n	8008d30 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fbb8 	bl	800949e <USBD_CtlError>
                break;
 8008d2e:	e091      	b.n	8008e54 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	da0b      	bge.n	8008d50 <USBD_StdEPReq+0x1a0>
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d3e:	4613      	mov	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	3310      	adds	r3, #16
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	e00b      	b.n	8008d68 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d56:	4613      	mov	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4413      	add	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	4413      	add	r3, r2
 8008d66:	3304      	adds	r3, #4
 8008d68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2202      	movs	r2, #2
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fbfb 	bl	8009572 <USBD_CtlSendData>
              break;
 8008d7c:	e06a      	b.n	8008e54 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	da11      	bge.n	8008daa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	f003 020f 	and.w	r2, r3, #15
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	440b      	add	r3, r1
 8008d98:	3318      	adds	r3, #24
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d117      	bne.n	8008dd0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fb7b 	bl	800949e <USBD_CtlError>
                  break;
 8008da8:	e054      	b.n	8008e54 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008daa:	7bbb      	ldrb	r3, [r7, #14]
 8008dac:	f003 020f 	and.w	r2, r3, #15
 8008db0:	6879      	ldr	r1, [r7, #4]
 8008db2:	4613      	mov	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d104      	bne.n	8008dd0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fb68 	bl	800949e <USBD_CtlError>
                  break;
 8008dce:	e041      	b.n	8008e54 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	da0b      	bge.n	8008df0 <USBD_StdEPReq+0x240>
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
 8008dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dde:	4613      	mov	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	3310      	adds	r3, #16
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	4413      	add	r3, r2
 8008dec:	3304      	adds	r3, #4
 8008dee:	e00b      	b.n	8008e08 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	4413      	add	r3, r2
 8008e06:	3304      	adds	r3, #4
 8008e08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e0a:	7bbb      	ldrb	r3, [r7, #14]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <USBD_StdEPReq+0x266>
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	2b80      	cmp	r3, #128	; 0x80
 8008e14:	d103      	bne.n	8008e1e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	e00e      	b.n	8008e3c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	4619      	mov	r1, r3
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f001 f966 	bl	800a0f4 <USBD_LL_IsStallEP>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2201      	movs	r2, #1
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	e002      	b.n	8008e3c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fb95 	bl	8009572 <USBD_CtlSendData>
              break;
 8008e48:	e004      	b.n	8008e54 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fb26 	bl	800949e <USBD_CtlError>
              break;
 8008e52:	bf00      	nop
          }
          break;
 8008e54:	e004      	b.n	8008e60 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008e56:	6839      	ldr	r1, [r7, #0]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fb20 	bl	800949e <USBD_CtlError>
          break;
 8008e5e:	bf00      	nop
      }
      break;
 8008e60:	e004      	b.n	8008e6c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fb1a 	bl	800949e <USBD_CtlError>
      break;
 8008e6a:	bf00      	nop
  }

  return ret;
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e86:	2300      	movs	r3, #0
 8008e88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	885b      	ldrh	r3, [r3, #2]
 8008e92:	0a1b      	lsrs	r3, r3, #8
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	2b06      	cmp	r3, #6
 8008e9a:	f200 8128 	bhi.w	80090ee <USBD_GetDescriptor+0x276>
 8008e9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <USBD_GetDescriptor+0x2c>)
 8008ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea4:	08008ec1 	.word	0x08008ec1
 8008ea8:	08008ed9 	.word	0x08008ed9
 8008eac:	08008f19 	.word	0x08008f19
 8008eb0:	080090ef 	.word	0x080090ef
 8008eb4:	080090ef 	.word	0x080090ef
 8008eb8:	0800908f 	.word	0x0800908f
 8008ebc:	080090bb 	.word	0x080090bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	7c12      	ldrb	r2, [r2, #16]
 8008ecc:	f107 0108 	add.w	r1, r7, #8
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4798      	blx	r3
 8008ed4:	60f8      	str	r0, [r7, #12]
      break;
 8008ed6:	e112      	b.n	80090fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	7c1b      	ldrb	r3, [r3, #16]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10d      	bne.n	8008efc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee8:	f107 0208 	add.w	r2, r7, #8
 8008eec:	4610      	mov	r0, r2
 8008eee:	4798      	blx	r3
 8008ef0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008efa:	e100      	b.n	80090fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	f107 0208 	add.w	r2, r7, #8
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4798      	blx	r3
 8008f0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	3301      	adds	r3, #1
 8008f12:	2202      	movs	r2, #2
 8008f14:	701a      	strb	r2, [r3, #0]
      break;
 8008f16:	e0f2      	b.n	80090fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	885b      	ldrh	r3, [r3, #2]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	f200 80ac 	bhi.w	800907c <USBD_GetDescriptor+0x204>
 8008f24:	a201      	add	r2, pc, #4	; (adr r2, 8008f2c <USBD_GetDescriptor+0xb4>)
 8008f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2a:	bf00      	nop
 8008f2c:	08008f45 	.word	0x08008f45
 8008f30:	08008f79 	.word	0x08008f79
 8008f34:	08008fad 	.word	0x08008fad
 8008f38:	08008fe1 	.word	0x08008fe1
 8008f3c:	08009015 	.word	0x08009015
 8008f40:	08009049 	.word	0x08009049
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00b      	beq.n	8008f68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	7c12      	ldrb	r2, [r2, #16]
 8008f5c:	f107 0108 	add.w	r1, r7, #8
 8008f60:	4610      	mov	r0, r2
 8008f62:	4798      	blx	r3
 8008f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f66:	e091      	b.n	800908c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fa97 	bl	800949e <USBD_CtlError>
            err++;
 8008f70:	7afb      	ldrb	r3, [r7, #11]
 8008f72:	3301      	adds	r3, #1
 8008f74:	72fb      	strb	r3, [r7, #11]
          break;
 8008f76:	e089      	b.n	800908c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00b      	beq.n	8008f9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	7c12      	ldrb	r2, [r2, #16]
 8008f90:	f107 0108 	add.w	r1, r7, #8
 8008f94:	4610      	mov	r0, r2
 8008f96:	4798      	blx	r3
 8008f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f9a:	e077      	b.n	800908c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fa7d 	bl	800949e <USBD_CtlError>
            err++;
 8008fa4:	7afb      	ldrb	r3, [r7, #11]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8008faa:	e06f      	b.n	800908c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00b      	beq.n	8008fd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	7c12      	ldrb	r2, [r2, #16]
 8008fc4:	f107 0108 	add.w	r1, r7, #8
 8008fc8:	4610      	mov	r0, r2
 8008fca:	4798      	blx	r3
 8008fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fce:	e05d      	b.n	800908c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fa63 	bl	800949e <USBD_CtlError>
            err++;
 8008fd8:	7afb      	ldrb	r3, [r7, #11]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8008fde:	e055      	b.n	800908c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00b      	beq.n	8009004 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	7c12      	ldrb	r2, [r2, #16]
 8008ff8:	f107 0108 	add.w	r1, r7, #8
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	4798      	blx	r3
 8009000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009002:	e043      	b.n	800908c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009004:	6839      	ldr	r1, [r7, #0]
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fa49 	bl	800949e <USBD_CtlError>
            err++;
 800900c:	7afb      	ldrb	r3, [r7, #11]
 800900e:	3301      	adds	r3, #1
 8009010:	72fb      	strb	r3, [r7, #11]
          break;
 8009012:	e03b      	b.n	800908c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800901a:	695b      	ldr	r3, [r3, #20]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00b      	beq.n	8009038 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009026:	695b      	ldr	r3, [r3, #20]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	7c12      	ldrb	r2, [r2, #16]
 800902c:	f107 0108 	add.w	r1, r7, #8
 8009030:	4610      	mov	r0, r2
 8009032:	4798      	blx	r3
 8009034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009036:	e029      	b.n	800908c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fa2f 	bl	800949e <USBD_CtlError>
            err++;
 8009040:	7afb      	ldrb	r3, [r7, #11]
 8009042:	3301      	adds	r3, #1
 8009044:	72fb      	strb	r3, [r7, #11]
          break;
 8009046:	e021      	b.n	800908c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00b      	beq.n	800906c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	7c12      	ldrb	r2, [r2, #16]
 8009060:	f107 0108 	add.w	r1, r7, #8
 8009064:	4610      	mov	r0, r2
 8009066:	4798      	blx	r3
 8009068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800906a:	e00f      	b.n	800908c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fa15 	bl	800949e <USBD_CtlError>
            err++;
 8009074:	7afb      	ldrb	r3, [r7, #11]
 8009076:	3301      	adds	r3, #1
 8009078:	72fb      	strb	r3, [r7, #11]
          break;
 800907a:	e007      	b.n	800908c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fa0d 	bl	800949e <USBD_CtlError>
          err++;
 8009084:	7afb      	ldrb	r3, [r7, #11]
 8009086:	3301      	adds	r3, #1
 8009088:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800908a:	e038      	b.n	80090fe <USBD_GetDescriptor+0x286>
 800908c:	e037      	b.n	80090fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	7c1b      	ldrb	r3, [r3, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d109      	bne.n	80090aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800909c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909e:	f107 0208 	add.w	r2, r7, #8
 80090a2:	4610      	mov	r0, r2
 80090a4:	4798      	blx	r3
 80090a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090a8:	e029      	b.n	80090fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f9f6 	bl	800949e <USBD_CtlError>
        err++;
 80090b2:	7afb      	ldrb	r3, [r7, #11]
 80090b4:	3301      	adds	r3, #1
 80090b6:	72fb      	strb	r3, [r7, #11]
      break;
 80090b8:	e021      	b.n	80090fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	7c1b      	ldrb	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10d      	bne.n	80090de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ca:	f107 0208 	add.w	r2, r7, #8
 80090ce:	4610      	mov	r0, r2
 80090d0:	4798      	blx	r3
 80090d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	3301      	adds	r3, #1
 80090d8:	2207      	movs	r2, #7
 80090da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090dc:	e00f      	b.n	80090fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f9dc 	bl	800949e <USBD_CtlError>
        err++;
 80090e6:	7afb      	ldrb	r3, [r7, #11]
 80090e8:	3301      	adds	r3, #1
 80090ea:	72fb      	strb	r3, [r7, #11]
      break;
 80090ec:	e007      	b.n	80090fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f9d4 	bl	800949e <USBD_CtlError>
      err++;
 80090f6:	7afb      	ldrb	r3, [r7, #11]
 80090f8:	3301      	adds	r3, #1
 80090fa:	72fb      	strb	r3, [r7, #11]
      break;
 80090fc:	bf00      	nop
  }

  if (err != 0U)
 80090fe:	7afb      	ldrb	r3, [r7, #11]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d11c      	bne.n	800913e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009104:	893b      	ldrh	r3, [r7, #8]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d011      	beq.n	800912e <USBD_GetDescriptor+0x2b6>
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	88db      	ldrh	r3, [r3, #6]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00d      	beq.n	800912e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	88da      	ldrh	r2, [r3, #6]
 8009116:	893b      	ldrh	r3, [r7, #8]
 8009118:	4293      	cmp	r3, r2
 800911a:	bf28      	it	cs
 800911c:	4613      	movcs	r3, r2
 800911e:	b29b      	uxth	r3, r3
 8009120:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009122:	893b      	ldrh	r3, [r7, #8]
 8009124:	461a      	mov	r2, r3
 8009126:	68f9      	ldr	r1, [r7, #12]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fa22 	bl	8009572 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	88db      	ldrh	r3, [r3, #6]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d104      	bne.n	8009140 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fa79 	bl	800962e <USBD_CtlSendStatus>
 800913c:	e000      	b.n	8009140 <USBD_GetDescriptor+0x2c8>
    return;
 800913e:	bf00      	nop
    }
  }
}
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop

08009148 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	889b      	ldrh	r3, [r3, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d130      	bne.n	80091bc <USBD_SetAddress+0x74>
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	88db      	ldrh	r3, [r3, #6]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d12c      	bne.n	80091bc <USBD_SetAddress+0x74>
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	885b      	ldrh	r3, [r3, #2]
 8009166:	2b7f      	cmp	r3, #127	; 0x7f
 8009168:	d828      	bhi.n	80091bc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	885b      	ldrh	r3, [r3, #2]
 800916e:	b2db      	uxtb	r3, r3
 8009170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009174:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800917c:	2b03      	cmp	r3, #3
 800917e:	d104      	bne.n	800918a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f98b 	bl	800949e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009188:	e01d      	b.n	80091c6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	7bfa      	ldrb	r2, [r7, #15]
 800918e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009192:	7bfb      	ldrb	r3, [r7, #15]
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 ffd8 	bl	800a14c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fa46 	bl	800962e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d004      	beq.n	80091b2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b0:	e009      	b.n	80091c6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ba:	e004      	b.n	80091c6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f96d 	bl	800949e <USBD_CtlError>
  }
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
	...

080091d0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	885b      	ldrh	r3, [r3, #2]
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	4b41      	ldr	r3, [pc, #260]	; (80092e8 <USBD_SetConfig+0x118>)
 80091e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091e4:	4b40      	ldr	r3, [pc, #256]	; (80092e8 <USBD_SetConfig+0x118>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d904      	bls.n	80091f6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f955 	bl	800949e <USBD_CtlError>
 80091f4:	e075      	b.n	80092e2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d002      	beq.n	8009206 <USBD_SetConfig+0x36>
 8009200:	2b03      	cmp	r3, #3
 8009202:	d023      	beq.n	800924c <USBD_SetConfig+0x7c>
 8009204:	e062      	b.n	80092cc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009206:	4b38      	ldr	r3, [pc, #224]	; (80092e8 <USBD_SetConfig+0x118>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d01a      	beq.n	8009244 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800920e:	4b36      	ldr	r3, [pc, #216]	; (80092e8 <USBD_SetConfig+0x118>)
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2203      	movs	r2, #3
 800921c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009220:	4b31      	ldr	r3, [pc, #196]	; (80092e8 <USBD_SetConfig+0x118>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff f9e7 	bl	80085fa <USBD_SetClassConfig>
 800922c:	4603      	mov	r3, r0
 800922e:	2b02      	cmp	r3, #2
 8009230:	d104      	bne.n	800923c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f932 	bl	800949e <USBD_CtlError>
            return;
 800923a:	e052      	b.n	80092e2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f9f6 	bl	800962e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009242:	e04e      	b.n	80092e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f9f2 	bl	800962e <USBD_CtlSendStatus>
        break;
 800924a:	e04a      	b.n	80092e2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800924c:	4b26      	ldr	r3, [pc, #152]	; (80092e8 <USBD_SetConfig+0x118>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d112      	bne.n	800927a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2202      	movs	r2, #2
 8009258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800925c:	4b22      	ldr	r3, [pc, #136]	; (80092e8 <USBD_SetConfig+0x118>)
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009266:	4b20      	ldr	r3, [pc, #128]	; (80092e8 <USBD_SetConfig+0x118>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff f9e3 	bl	8008638 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f9db 	bl	800962e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009278:	e033      	b.n	80092e2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800927a:	4b1b      	ldr	r3, [pc, #108]	; (80092e8 <USBD_SetConfig+0x118>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	429a      	cmp	r2, r3
 8009286:	d01d      	beq.n	80092c4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	b2db      	uxtb	r3, r3
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7ff f9d1 	bl	8008638 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009296:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <USBD_SetConfig+0x118>)
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092a0:	4b11      	ldr	r3, [pc, #68]	; (80092e8 <USBD_SetConfig+0x118>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7ff f9a7 	bl	80085fa <USBD_SetClassConfig>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d104      	bne.n	80092bc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f8f2 	bl	800949e <USBD_CtlError>
            return;
 80092ba:	e012      	b.n	80092e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f9b6 	bl	800962e <USBD_CtlSendStatus>
        break;
 80092c2:	e00e      	b.n	80092e2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f9b2 	bl	800962e <USBD_CtlSendStatus>
        break;
 80092ca:	e00a      	b.n	80092e2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f8e5 	bl	800949e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80092d4:	4b04      	ldr	r3, [pc, #16]	; (80092e8 <USBD_SetConfig+0x118>)
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7ff f9ac 	bl	8008638 <USBD_ClrClassConfig>
        break;
 80092e0:	bf00      	nop
    }
  }
}
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	2000028c 	.word	0x2000028c

080092ec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	88db      	ldrh	r3, [r3, #6]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d004      	beq.n	8009308 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f8cc 	bl	800949e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009306:	e022      	b.n	800934e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800930e:	2b02      	cmp	r3, #2
 8009310:	dc02      	bgt.n	8009318 <USBD_GetConfig+0x2c>
 8009312:	2b00      	cmp	r3, #0
 8009314:	dc03      	bgt.n	800931e <USBD_GetConfig+0x32>
 8009316:	e015      	b.n	8009344 <USBD_GetConfig+0x58>
 8009318:	2b03      	cmp	r3, #3
 800931a:	d00b      	beq.n	8009334 <USBD_GetConfig+0x48>
 800931c:	e012      	b.n	8009344 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	3308      	adds	r3, #8
 8009328:	2201      	movs	r2, #1
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f920 	bl	8009572 <USBD_CtlSendData>
        break;
 8009332:	e00c      	b.n	800934e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3304      	adds	r3, #4
 8009338:	2201      	movs	r2, #1
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f918 	bl	8009572 <USBD_CtlSendData>
        break;
 8009342:	e004      	b.n	800934e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f8a9 	bl	800949e <USBD_CtlError>
        break;
 800934c:	bf00      	nop
}
 800934e:	bf00      	nop
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009366:	3b01      	subs	r3, #1
 8009368:	2b02      	cmp	r3, #2
 800936a:	d81e      	bhi.n	80093aa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	88db      	ldrh	r3, [r3, #6]
 8009370:	2b02      	cmp	r3, #2
 8009372:	d004      	beq.n	800937e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f891 	bl	800949e <USBD_CtlError>
        break;
 800937c:	e01a      	b.n	80093b4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800938a:	2b00      	cmp	r3, #0
 800938c:	d005      	beq.n	800939a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f043 0202 	orr.w	r2, r3, #2
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	330c      	adds	r3, #12
 800939e:	2202      	movs	r2, #2
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f8e5 	bl	8009572 <USBD_CtlSendData>
      break;
 80093a8:	e004      	b.n	80093b4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f876 	bl	800949e <USBD_CtlError>
      break;
 80093b2:	bf00      	nop
  }
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	885b      	ldrh	r3, [r3, #2]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d106      	bne.n	80093dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f929 	bl	800962e <USBD_CtlSendStatus>
  }
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f4:	3b01      	subs	r3, #1
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d80b      	bhi.n	8009412 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	885b      	ldrh	r3, [r3, #2]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d10c      	bne.n	800941c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f90f 	bl	800962e <USBD_CtlSendStatus>
      }
      break;
 8009410:	e004      	b.n	800941c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f842 	bl	800949e <USBD_CtlError>
      break;
 800941a:	e000      	b.n	800941e <USBD_ClrFeature+0x3a>
      break;
 800941c:	bf00      	nop
  }
}
 800941e:	bf00      	nop
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	781a      	ldrb	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	785a      	ldrb	r2, [r3, #1]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	3302      	adds	r3, #2
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	b29a      	uxth	r2, r3
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	3303      	adds	r3, #3
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	b29b      	uxth	r3, r3
 8009450:	021b      	lsls	r3, r3, #8
 8009452:	b29b      	uxth	r3, r3
 8009454:	4413      	add	r3, r2
 8009456:	b29a      	uxth	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	3304      	adds	r3, #4
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	b29a      	uxth	r2, r3
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	3305      	adds	r3, #5
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	b29b      	uxth	r3, r3
 800946c:	021b      	lsls	r3, r3, #8
 800946e:	b29b      	uxth	r3, r3
 8009470:	4413      	add	r3, r2
 8009472:	b29a      	uxth	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	3306      	adds	r3, #6
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	b29a      	uxth	r2, r3
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	3307      	adds	r3, #7
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	b29b      	uxth	r3, r3
 8009488:	021b      	lsls	r3, r3, #8
 800948a:	b29b      	uxth	r3, r3
 800948c:	4413      	add	r3, r2
 800948e:	b29a      	uxth	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	80da      	strh	r2, [r3, #6]

}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	bc80      	pop	{r7}
 800949c:	4770      	bx	lr

0800949e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b082      	sub	sp, #8
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80094a8:	2180      	movs	r1, #128	; 0x80
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fde4 	bl	800a078 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80094b0:	2100      	movs	r1, #0
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fde0 	bl	800a078 <USBD_LL_StallEP>
}
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d032      	beq.n	800953c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f000 f834 	bl	8009544 <USBD_GetLen>
 80094dc:	4603      	mov	r3, r0
 80094de:	3301      	adds	r3, #1
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	005b      	lsls	r3, r3, #1
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	75fa      	strb	r2, [r7, #23]
 80094f0:	461a      	mov	r2, r3
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	4413      	add	r3, r2
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	7812      	ldrb	r2, [r2, #0]
 80094fa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80094fc:	7dfb      	ldrb	r3, [r7, #23]
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	75fa      	strb	r2, [r7, #23]
 8009502:	461a      	mov	r2, r3
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	4413      	add	r3, r2
 8009508:	2203      	movs	r2, #3
 800950a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800950c:	e012      	b.n	8009534 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	1c5a      	adds	r2, r3, #1
 8009512:	60fa      	str	r2, [r7, #12]
 8009514:	7dfa      	ldrb	r2, [r7, #23]
 8009516:	1c51      	adds	r1, r2, #1
 8009518:	75f9      	strb	r1, [r7, #23]
 800951a:	4611      	mov	r1, r2
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	440a      	add	r2, r1
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009524:	7dfb      	ldrb	r3, [r7, #23]
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	75fa      	strb	r2, [r7, #23]
 800952a:	461a      	mov	r2, r3
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	4413      	add	r3, r2
 8009530:	2200      	movs	r2, #0
 8009532:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1e8      	bne.n	800950e <USBD_GetString+0x4e>
    }
  }
}
 800953c:	bf00      	nop
 800953e:	3718      	adds	r7, #24
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800954c:	2300      	movs	r3, #0
 800954e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009550:	e005      	b.n	800955e <USBD_GetLen+0x1a>
  {
    len++;
 8009552:	7bfb      	ldrb	r3, [r7, #15]
 8009554:	3301      	adds	r3, #1
 8009556:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	3301      	adds	r3, #1
 800955c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1f5      	bne.n	8009552 <USBD_GetLen+0xe>
  }

  return len;
 8009566:	7bfb      	ldrb	r3, [r7, #15]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3714      	adds	r7, #20
 800956c:	46bd      	mov	sp, r7
 800956e:	bc80      	pop	{r7}
 8009570:	4770      	bx	lr

08009572 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	4613      	mov	r3, r2
 800957e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2202      	movs	r2, #2
 8009584:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009588:	88fa      	ldrh	r2, [r7, #6]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800958e:	88fa      	ldrh	r2, [r7, #6]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009594:	88fb      	ldrh	r3, [r7, #6]
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	2100      	movs	r1, #0
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 fdf5 	bl	800a18a <USBD_LL_Transmit>

  return USBD_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	60f8      	str	r0, [r7, #12]
 80095b2:	60b9      	str	r1, [r7, #8]
 80095b4:	4613      	mov	r3, r2
 80095b6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095b8:	88fb      	ldrh	r3, [r7, #6]
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	2100      	movs	r1, #0
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 fde3 	bl	800a18a <USBD_LL_Transmit>

  return USBD_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	60f8      	str	r0, [r7, #12]
 80095d6:	60b9      	str	r1, [r7, #8]
 80095d8:	4613      	mov	r3, r2
 80095da:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2203      	movs	r2, #3
 80095e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80095e4:	88fa      	ldrh	r2, [r7, #6]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80095ec:	88fa      	ldrh	r2, [r7, #6]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095f4:	88fb      	ldrh	r3, [r7, #6]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	2100      	movs	r1, #0
 80095fa:	68f8      	ldr	r0, [r7, #12]
 80095fc:	f000 fde8 	bl	800a1d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	60f8      	str	r0, [r7, #12]
 8009612:	60b9      	str	r1, [r7, #8]
 8009614:	4613      	mov	r3, r2
 8009616:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009618:	88fb      	ldrh	r3, [r7, #6]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	2100      	movs	r1, #0
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 fdd6 	bl	800a1d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b082      	sub	sp, #8
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2204      	movs	r2, #4
 800963a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800963e:	2300      	movs	r3, #0
 8009640:	2200      	movs	r2, #0
 8009642:	2100      	movs	r1, #0
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fda0 	bl	800a18a <USBD_LL_Transmit>

  return USBD_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2205      	movs	r2, #5
 8009660:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009664:	2300      	movs	r3, #0
 8009666:	2200      	movs	r2, #0
 8009668:	2100      	movs	r1, #0
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fdb0 	bl	800a1d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
	...

0800967c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009680:	2200      	movs	r2, #0
 8009682:	4912      	ldr	r1, [pc, #72]	; (80096cc <MX_USB_DEVICE_Init+0x50>)
 8009684:	4812      	ldr	r0, [pc, #72]	; (80096d0 <MX_USB_DEVICE_Init+0x54>)
 8009686:	f7fe ff5e 	bl	8008546 <USBD_Init>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009690:	f7f7 fe4a 	bl	8001328 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009694:	490f      	ldr	r1, [pc, #60]	; (80096d4 <MX_USB_DEVICE_Init+0x58>)
 8009696:	480e      	ldr	r0, [pc, #56]	; (80096d0 <MX_USB_DEVICE_Init+0x54>)
 8009698:	f7fe ff80 	bl	800859c <USBD_RegisterClass>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80096a2:	f7f7 fe41 	bl	8001328 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80096a6:	490c      	ldr	r1, [pc, #48]	; (80096d8 <MX_USB_DEVICE_Init+0x5c>)
 80096a8:	4809      	ldr	r0, [pc, #36]	; (80096d0 <MX_USB_DEVICE_Init+0x54>)
 80096aa:	f7fe feb1 	bl	8008410 <USBD_CDC_RegisterInterface>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80096b4:	f7f7 fe38 	bl	8001328 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80096b8:	4805      	ldr	r0, [pc, #20]	; (80096d0 <MX_USB_DEVICE_Init+0x54>)
 80096ba:	f7fe ff88 	bl	80085ce <USBD_Start>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d001      	beq.n	80096c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80096c4:	f7f7 fe30 	bl	8001328 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80096c8:	bf00      	nop
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	20000140 	.word	0x20000140
 80096d0:	20000600 	.word	0x20000600
 80096d4:	2000002c 	.word	0x2000002c
 80096d8:	20000130 	.word	0x20000130

080096dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80096e0:	2200      	movs	r2, #0
 80096e2:	4905      	ldr	r1, [pc, #20]	; (80096f8 <CDC_Init_FS+0x1c>)
 80096e4:	4805      	ldr	r0, [pc, #20]	; (80096fc <CDC_Init_FS+0x20>)
 80096e6:	f7fe fea9 	bl	800843c <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80096ea:	4905      	ldr	r1, [pc, #20]	; (8009700 <CDC_Init_FS+0x24>)
 80096ec:	4803      	ldr	r0, [pc, #12]	; (80096fc <CDC_Init_FS+0x20>)
 80096ee:	f7fe febe 	bl	800846e <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80096f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	20000ac4 	.word	0x20000ac4
 80096fc:	20000600 	.word	0x20000600
 8009700:	200008c4 	.word	0x200008c4

08009704 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8009708:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800970a:	4618      	mov	r0, r3
 800970c:	46bd      	mov	sp, r7
 800970e:	bc80      	pop	{r7}
 8009710:	4770      	bx	lr
	...

08009714 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	4603      	mov	r3, r0
 800971c:	6039      	str	r1, [r7, #0]
 800971e:	71fb      	strb	r3, [r7, #7]
 8009720:	4613      	mov	r3, r2
 8009722:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8009724:	79fb      	ldrb	r3, [r7, #7]
 8009726:	2b23      	cmp	r3, #35	; 0x23
 8009728:	d84a      	bhi.n	80097c0 <CDC_Control_FS+0xac>
 800972a:	a201      	add	r2, pc, #4	; (adr r2, 8009730 <CDC_Control_FS+0x1c>)
 800972c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009730:	080097c1 	.word	0x080097c1
 8009734:	080097c1 	.word	0x080097c1
 8009738:	080097c1 	.word	0x080097c1
 800973c:	080097c1 	.word	0x080097c1
 8009740:	080097c1 	.word	0x080097c1
 8009744:	080097c1 	.word	0x080097c1
 8009748:	080097c1 	.word	0x080097c1
 800974c:	080097c1 	.word	0x080097c1
 8009750:	080097c1 	.word	0x080097c1
 8009754:	080097c1 	.word	0x080097c1
 8009758:	080097c1 	.word	0x080097c1
 800975c:	080097c1 	.word	0x080097c1
 8009760:	080097c1 	.word	0x080097c1
 8009764:	080097c1 	.word	0x080097c1
 8009768:	080097c1 	.word	0x080097c1
 800976c:	080097c1 	.word	0x080097c1
 8009770:	080097c1 	.word	0x080097c1
 8009774:	080097c1 	.word	0x080097c1
 8009778:	080097c1 	.word	0x080097c1
 800977c:	080097c1 	.word	0x080097c1
 8009780:	080097c1 	.word	0x080097c1
 8009784:	080097c1 	.word	0x080097c1
 8009788:	080097c1 	.word	0x080097c1
 800978c:	080097c1 	.word	0x080097c1
 8009790:	080097c1 	.word	0x080097c1
 8009794:	080097c1 	.word	0x080097c1
 8009798:	080097c1 	.word	0x080097c1
 800979c:	080097c1 	.word	0x080097c1
 80097a0:	080097c1 	.word	0x080097c1
 80097a4:	080097c1 	.word	0x080097c1
 80097a8:	080097c1 	.word	0x080097c1
 80097ac:	080097c1 	.word	0x080097c1
 80097b0:	080097c1 	.word	0x080097c1
 80097b4:	080097c1 	.word	0x080097c1
 80097b8:	080097c1 	.word	0x080097c1
 80097bc:	080097c1 	.word	0x080097c1
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80097c0:	bf00      	nop
	}

	return (USBD_OK);
 80097c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bc80      	pop	{r7}
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop

080097d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80097d0:	b590      	push	{r4, r7, lr}
 80097d2:	b089      	sub	sp, #36	; 0x24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80097da:	6879      	ldr	r1, [r7, #4]
 80097dc:	48b2      	ldr	r0, [pc, #712]	; (8009aa8 <CDC_Receive_FS+0x2d8>)
 80097de:	f7fe fe46 	bl	800846e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80097e2:	48b1      	ldr	r0, [pc, #708]	; (8009aa8 <CDC_Receive_FS+0x2d8>)
 80097e4:	f7fe fe85 	bl	80084f2 <USBD_CDC_ReceivePacket>

	if (*Len < 1)	return (USBD_OK);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <CDC_Receive_FS+0x24>
 80097f0:	2300      	movs	r3, #0
 80097f2:	e188      	b.n	8009b06 <CDC_Receive_FS+0x336>

//--------------------------------------------------------------------------

	uint16_t tVal16;
	uint8_t cmd	= Buf[0];
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	77fb      	strb	r3, [r7, #31]

//--------------------------------------------------------------------------


	// Relay:1 - 12V	[0x01 - 0x01]
	if (cmd == 0x01) {
 80097fa:	7ffb      	ldrb	r3, [r7, #31]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d15b      	bne.n	80098b8 <CDC_Receive_FS+0xe8>
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00)) {
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d94b      	bls.n	80098a0 <CDC_Receive_FS+0xd0>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	3301      	adds	r3, #1
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d004      	beq.n	800981c <CDC_Receive_FS+0x4c>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3301      	adds	r3, #1
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d141      	bne.n	80098a0 <CDC_Receive_FS+0xd0>
			if (Buf[1] == 0x01) {
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3301      	adds	r3, #1
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d11b      	bne.n	800985e <CDC_Receive_FS+0x8e>
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8009826:	2201      	movs	r2, #1
 8009828:	2104      	movs	r1, #4
 800982a:	48a0      	ldr	r0, [pc, #640]	; (8009aac <CDC_Receive_FS+0x2dc>)
 800982c:	f7f9 fa15 	bl	8002c5a <HAL_GPIO_WritePin>
				RelayState = 0x01;
 8009830:	4b9f      	ldr	r3, [pc, #636]	; (8009ab0 <CDC_Receive_FS+0x2e0>)
 8009832:	2201      	movs	r2, #1
 8009834:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 8009836:	4b9e      	ldr	r3, [pc, #632]	; (8009ab0 <CDC_Receive_FS+0x2e0>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	4619      	mov	r1, r3
 800983c:	489d      	ldr	r0, [pc, #628]	; (8009ab4 <CDC_Receive_FS+0x2e4>)
 800983e:	f000 fd89 	bl	800a354 <iprintf>
				SetAllDAC();
 8009842:	f7f6 fe4d 	bl	80004e0 <SetAllDAC>

				UserTxBufferFS[0]	= cmd;
 8009846:	4a9c      	ldr	r2, [pc, #624]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009848:	7ffb      	ldrb	r3, [r7, #31]
 800984a:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1]	= 0x00;	// успешно
 800984c:	4b9a      	ldr	r3, [pc, #616]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 800984e:	2200      	movs	r2, #0
 8009850:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8009852:	2102      	movs	r1, #2
 8009854:	4898      	ldr	r0, [pc, #608]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009856:	f000 f95f 	bl	8009b18 <CDC_Transmit_FS>
				return (USBD_OK);
 800985a:	2300      	movs	r3, #0
 800985c:	e153      	b.n	8009b06 <CDC_Receive_FS+0x336>

			} else if (Buf[1] == 0x00) {
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	3301      	adds	r3, #1
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d11b      	bne.n	80098a0 <CDC_Receive_FS+0xd0>
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8009868:	2200      	movs	r2, #0
 800986a:	2104      	movs	r1, #4
 800986c:	488f      	ldr	r0, [pc, #572]	; (8009aac <CDC_Receive_FS+0x2dc>)
 800986e:	f7f9 f9f4 	bl	8002c5a <HAL_GPIO_WritePin>
				RelayState = 0x00;
 8009872:	4b8f      	ldr	r3, [pc, #572]	; (8009ab0 <CDC_Receive_FS+0x2e0>)
 8009874:	2200      	movs	r2, #0
 8009876:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 8009878:	4b8d      	ldr	r3, [pc, #564]	; (8009ab0 <CDC_Receive_FS+0x2e0>)
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	4619      	mov	r1, r3
 800987e:	488f      	ldr	r0, [pc, #572]	; (8009abc <CDC_Receive_FS+0x2ec>)
 8009880:	f000 fd68 	bl	800a354 <iprintf>
				SetAllDAC();
 8009884:	f7f6 fe2c 	bl	80004e0 <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 8009888:	4a8b      	ldr	r2, [pc, #556]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 800988a:	7ffb      	ldrb	r3, [r7, #31]
 800988c:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x00;	// успешно
 800988e:	4b8a      	ldr	r3, [pc, #552]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009890:	2200      	movs	r2, #0
 8009892:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8009894:	2102      	movs	r1, #2
 8009896:	4888      	ldr	r0, [pc, #544]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009898:	f000 f93e 	bl	8009b18 <CDC_Transmit_FS>
				return (USBD_OK);
 800989c:	2300      	movs	r3, #0
 800989e:	e132      	b.n	8009b06 <CDC_Receive_FS+0x336>
			}
		}

		UserTxBufferFS[0] = cmd;
 80098a0:	4a85      	ldr	r2, [pc, #532]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 80098a2:	7ffb      	ldrb	r3, [r7, #31]
 80098a4:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;	// ошибка
 80098a6:	4b84      	ldr	r3, [pc, #528]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 80098a8:	2201      	movs	r2, #1
 80098aa:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 80098ac:	2102      	movs	r1, #2
 80098ae:	4882      	ldr	r0, [pc, #520]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 80098b0:	f000 f932 	bl	8009b18 <CDC_Transmit_FS>
		return (USBD_OK);
 80098b4:	2300      	movs	r3, #0
 80098b6:	e126      	b.n	8009b06 <CDC_Receive_FS+0x336>

//--------------------------------------------------------------------------
	// DA:4095
	} else if (cmd == 0x02) {
 80098b8:	7ffb      	ldrb	r3, [r7, #31]
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d12d      	bne.n	800991a <CDC_Receive_FS+0x14a>
		if (*Len >= 3) {
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d91d      	bls.n	8009902 <CDC_Receive_FS+0x132>
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 80098c6:	f7f6 ff0f 	bl	80006e8 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 80098ca:	f7f6 ff31 	bl	8000730 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	3301      	adds	r3, #1
 80098d2:	881b      	ldrh	r3, [r3, #0]
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	83bb      	strh	r3, [r7, #28]
			SetDacA(tVal16);
 80098d8:	8bbb      	ldrh	r3, [r7, #28]
 80098da:	4618      	mov	r0, r3
 80098dc:	f7f6 fdd4 	bl	8000488 <SetDacA>

			printf("DacA: %d\n", tVal16);
 80098e0:	8bbb      	ldrh	r3, [r7, #28]
 80098e2:	4619      	mov	r1, r3
 80098e4:	4876      	ldr	r0, [pc, #472]	; (8009ac0 <CDC_Receive_FS+0x2f0>)
 80098e6:	f000 fd35 	bl	800a354 <iprintf>
			UserTxBufferFS[0] = cmd;
 80098ea:	4a73      	ldr	r2, [pc, #460]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 80098ec:	7ffb      	ldrb	r3, [r7, #31]
 80098ee:	7013      	strb	r3, [r2, #0]
			UserTxBufferFS[1] = 0x00;	// успешно
 80098f0:	4b71      	ldr	r3, [pc, #452]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 80098f6:	2102      	movs	r1, #2
 80098f8:	486f      	ldr	r0, [pc, #444]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 80098fa:	f000 f90d 	bl	8009b18 <CDC_Transmit_FS>
			return (USBD_OK);
 80098fe:	2300      	movs	r3, #0
 8009900:	e101      	b.n	8009b06 <CDC_Receive_FS+0x336>
		}

		UserTxBufferFS[0] = cmd;
 8009902:	4a6d      	ldr	r2, [pc, #436]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009904:	7ffb      	ldrb	r3, [r7, #31]
 8009906:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;		// ошибка
 8009908:	4b6b      	ldr	r3, [pc, #428]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 800990a:	2201      	movs	r2, #1
 800990c:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800990e:	2102      	movs	r1, #2
 8009910:	4869      	ldr	r0, [pc, #420]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009912:	f000 f901 	bl	8009b18 <CDC_Transmit_FS>
		return (USBD_OK);
 8009916:	2300      	movs	r3, #0
 8009918:	e0f5      	b.n	8009b06 <CDC_Receive_FS+0x336>
//--------------------------------------------------------------------------
	// DB:4095
	} else if (cmd == 0x03) {
 800991a:	7ffb      	ldrb	r3, [r7, #31]
 800991c:	2b03      	cmp	r3, #3
 800991e:	d12d      	bne.n	800997c <CDC_Receive_FS+0x1ac>
		if (*Len >= 3) {
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b02      	cmp	r3, #2
 8009926:	d91d      	bls.n	8009964 <CDC_Receive_FS+0x194>
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8009928:	f7f6 fede 	bl	80006e8 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 800992c:	f7f6 ff00 	bl	8000730 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	3301      	adds	r3, #1
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	b29b      	uxth	r3, r3
 8009938:	83bb      	strh	r3, [r7, #28]
			SetDacB(tVal16);
 800993a:	8bbb      	ldrh	r3, [r7, #28]
 800993c:	4618      	mov	r0, r3
 800993e:	f7f6 fdb9 	bl	80004b4 <SetDacB>

			UserTxBufferFS[0] = cmd;
 8009942:	4a5d      	ldr	r2, [pc, #372]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009944:	7ffb      	ldrb	r3, [r7, #31]
 8009946:	7013      	strb	r3, [r2, #0]
			UserTxBufferFS[1] = 0x00;	// успешно
 8009948:	4b5b      	ldr	r3, [pc, #364]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 800994a:	2200      	movs	r2, #0
 800994c:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n",tVal16);
 800994e:	8bbb      	ldrh	r3, [r7, #28]
 8009950:	4619      	mov	r1, r3
 8009952:	485c      	ldr	r0, [pc, #368]	; (8009ac4 <CDC_Receive_FS+0x2f4>)
 8009954:	f000 fcfe 	bl	800a354 <iprintf>


			CDC_Transmit_FS(UserTxBufferFS, 2);
 8009958:	2102      	movs	r1, #2
 800995a:	4857      	ldr	r0, [pc, #348]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 800995c:	f000 f8dc 	bl	8009b18 <CDC_Transmit_FS>
			return (USBD_OK);
 8009960:	2300      	movs	r3, #0
 8009962:	e0d0      	b.n	8009b06 <CDC_Receive_FS+0x336>
		}

		UserTxBufferFS[0] = cmd;
 8009964:	4a54      	ldr	r2, [pc, #336]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009966:	7ffb      	ldrb	r3, [r7, #31]
 8009968:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;		// ошибка
 800996a:	4b53      	ldr	r3, [pc, #332]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 800996c:	2201      	movs	r2, #1
 800996e:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8009970:	2102      	movs	r1, #2
 8009972:	4851      	ldr	r0, [pc, #324]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009974:	f000 f8d0 	bl	8009b18 <CDC_Transmit_FS>
		return (USBD_OK);
 8009978:	2300      	movs	r3, #0
 800997a:	e0c4      	b.n	8009b06 <CDC_Receive_FS+0x336>
//--------------------------------------------------------------------------
	// ADC?
	} else if (cmd == 0x04) {
 800997c:	7ffb      	ldrb	r3, [r7, #31]
 800997e:	2b04      	cmp	r3, #4
 8009980:	d10f      	bne.n	80099a2 <CDC_Receive_FS+0x1d2>
		tVal16 = GetADC();
 8009982:	f7f6 ff4b 	bl	800081c <GetADC>
 8009986:	4603      	mov	r3, r0
 8009988:	83bb      	strh	r3, [r7, #28]
		UserTxBufferFS[0] = cmd;
 800998a:	4a4b      	ldr	r2, [pc, #300]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 800998c:	7ffb      	ldrb	r3, [r7, #31]
 800998e:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 8009990:	4a4d      	ldr	r2, [pc, #308]	; (8009ac8 <CDC_Receive_FS+0x2f8>)
 8009992:	8bbb      	ldrh	r3, [r7, #28]
 8009994:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 8009996:	2103      	movs	r1, #3
 8009998:	4847      	ldr	r0, [pc, #284]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 800999a:	f000 f8bd 	bl	8009b18 <CDC_Transmit_FS>
		return (USBD_OK);
 800999e:	2300      	movs	r3, #0
 80099a0:	e0b1      	b.n	8009b06 <CDC_Receive_FS+0x336>
//--------------------------------------------------------------------------
	// Relay?DA?DB?
	} else if (cmd == 0x05) {
 80099a2:	7ffb      	ldrb	r3, [r7, #31]
 80099a4:	2b05      	cmp	r3, #5
 80099a6:	d11a      	bne.n	80099de <CDC_Receive_FS+0x20e>
		UserTxBufferFS[0] = cmd;
 80099a8:	4a43      	ldr	r2, [pc, #268]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 80099aa:	7ffb      	ldrb	r3, [r7, #31]
 80099ac:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = RelayState;
 80099ae:	4b40      	ldr	r3, [pc, #256]	; (8009ab0 <CDC_Receive_FS+0x2e0>)
 80099b0:	781a      	ldrb	r2, [r3, #0]
 80099b2:	4b41      	ldr	r3, [pc, #260]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 80099b4:	705a      	strb	r2, [r3, #1]

		tVal16 = GetDacA();
 80099b6:	f7f6 fda5 	bl	8000504 <GetDacA>
 80099ba:	4603      	mov	r3, r0
 80099bc:	83bb      	strh	r3, [r7, #28]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 80099be:	4a43      	ldr	r2, [pc, #268]	; (8009acc <CDC_Receive_FS+0x2fc>)
 80099c0:	8bbb      	ldrh	r3, [r7, #28]
 80099c2:	8013      	strh	r3, [r2, #0]

		tVal16 = GetDacB();
 80099c4:	f7f6 fda8 	bl	8000518 <GetDacB>
 80099c8:	4603      	mov	r3, r0
 80099ca:	83bb      	strh	r3, [r7, #28]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 80099cc:	4a40      	ldr	r2, [pc, #256]	; (8009ad0 <CDC_Receive_FS+0x300>)
 80099ce:	8bbb      	ldrh	r3, [r7, #28]
 80099d0:	8013      	strh	r3, [r2, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 80099d2:	2106      	movs	r1, #6
 80099d4:	4838      	ldr	r0, [pc, #224]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 80099d6:	f000 f89f 	bl	8009b18 <CDC_Transmit_FS>
		return (USBD_OK);
 80099da:	2300      	movs	r3, #0
 80099dc:	e093      	b.n	8009b06 <CDC_Receive_FS+0x336>
//--------------------------------------------------------------------------
	// Btn?
	} else if (cmd == 0x06) {
 80099de:	7ffb      	ldrb	r3, [r7, #31]
 80099e0:	2b06      	cmp	r3, #6
 80099e2:	d11a      	bne.n	8009a1a <CDC_Receive_FS+0x24a>
		UserTxBufferFS[0] = cmd;
 80099e4:	4a34      	ldr	r2, [pc, #208]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 80099e6:	7ffb      	ldrb	r3, [r7, #31]
 80099e8:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 80099ea:	f7f6 fd9f 	bl	800052c <GetBtnRunState>
 80099ee:	4603      	mov	r3, r0
 80099f0:	461a      	mov	r2, r3
 80099f2:	4b31      	ldr	r3, [pc, #196]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 80099f4:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 80099f6:	f7f6 fddb 	bl	80005b0 <GetBtnUpState>
 80099fa:	4603      	mov	r3, r0
 80099fc:	461a      	mov	r2, r3
 80099fe:	4b2e      	ldr	r3, [pc, #184]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009a00:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 8009a02:	f7f6 fe17 	bl	8000634 <GetBtnDownState>
 8009a06:	4603      	mov	r3, r0
 8009a08:	461a      	mov	r2, r3
 8009a0a:	4b2b      	ldr	r3, [pc, #172]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009a0c:	70da      	strb	r2, [r3, #3]

		CDC_Transmit_FS(UserTxBufferFS, 4);
 8009a0e:	2104      	movs	r1, #4
 8009a10:	4829      	ldr	r0, [pc, #164]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009a12:	f000 f881 	bl	8009b18 <CDC_Transmit_FS>
		return (USBD_OK);
 8009a16:	2300      	movs	r3, #0
 8009a18:	e075      	b.n	8009b06 <CDC_Receive_FS+0x336>
	// ID? 
	} else if (cmd == 0x07) {
 8009a1a:	7ffb      	ldrb	r3, [r7, #31]
 8009a1c:	2b07      	cmp	r3, #7
 8009a1e:	d12d      	bne.n	8009a7c <CDC_Receive_FS+0x2ac>
		char str[] = "prb_v0.3";
 8009a20:	4a2c      	ldr	r2, [pc, #176]	; (8009ad4 <CDC_Receive_FS+0x304>)
 8009a22:	f107 0310 	add.w	r3, r7, #16
 8009a26:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a28:	c303      	stmia	r3!, {r0, r1}
 8009a2a:	701a      	strb	r2, [r3, #0]

		UserTxBufferFS[0] = cmd;
 8009a2c:	4a22      	ldr	r2, [pc, #136]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009a2e:	7ffb      	ldrb	r3, [r7, #31]
 8009a30:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = strlen(str);
 8009a32:	f107 0310 	add.w	r3, r7, #16
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7f6 fb88 	bl	800014c <strlen>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	4b1d      	ldr	r3, [pc, #116]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009a42:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 8009a44:	4c21      	ldr	r4, [pc, #132]	; (8009acc <CDC_Receive_FS+0x2fc>)
 8009a46:	f107 0310 	add.w	r3, r7, #16
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7f6 fb7e 	bl	800014c <strlen>
 8009a50:	4602      	mov	r2, r0
 8009a52:	f107 0310 	add.w	r3, r7, #16
 8009a56:	4619      	mov	r1, r3
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 fc65 	bl	800a328 <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 8009a5e:	f107 0310 	add.w	r3, r7, #16
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7f6 fb72 	bl	800014c <strlen>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	3302      	adds	r3, #2
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	4619      	mov	r1, r3
 8009a72:	4811      	ldr	r0, [pc, #68]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009a74:	f000 f850 	bl	8009b18 <CDC_Transmit_FS>
		return (USBD_OK);
 8009a78:	2300      	movs	r3, #0
 8009a7a:	e044      	b.n	8009b06 <CDC_Receive_FS+0x336>
	 * до того момента пока на выходах компараторов не появится 1.
	 * Т.е. каждый раз когда мы меняем входной код - мы запрашиваем контроллер щупа о состоянии выходов компаратора.
	 */

	// inHL?
	} else if (cmd == 0x08) {
 8009a7c:	7ffb      	ldrb	r3, [r7, #31]
 8009a7e:	2b08      	cmp	r3, #8
 8009a80:	d12a      	bne.n	8009ad8 <CDC_Receive_FS+0x308>
		EnableTIM3_PB4();
 8009a82:	f7f6 fe19 	bl	80006b8 <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 8009a86:	f7f6 fe23 	bl	80006d0 <GetTIM3>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	81fb      	strh	r3, [r7, #14]
		UserTxBufferFS[0] = cmd;
 8009a90:	4a09      	ldr	r2, [pc, #36]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009a92:	7ffb      	ldrb	r3, [r7, #31]
 8009a94:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS+1,&temp,sizeof(uint16_t));
 8009a96:	4a0c      	ldr	r2, [pc, #48]	; (8009ac8 <CDC_Receive_FS+0x2f8>)
 8009a98:	89fb      	ldrh	r3, [r7, #14]
 8009a9a:	8013      	strh	r3, [r2, #0]
//	    for(int i = 0;i >= 10; i++ ){
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//			HAL_Delay(250);
//		}

		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8009a9c:	2103      	movs	r1, #3
 8009a9e:	4806      	ldr	r0, [pc, #24]	; (8009ab8 <CDC_Receive_FS+0x2e8>)
 8009aa0:	f000 f83a 	bl	8009b18 <CDC_Transmit_FS>
		return (USBD_OK);
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	e02e      	b.n	8009b06 <CDC_Receive_FS+0x336>
 8009aa8:	20000600 	.word	0x20000600
 8009aac:	40010800 	.word	0x40010800
 8009ab0:	2000028d 	.word	0x2000028d
 8009ab4:	0800b5e8 	.word	0x0800b5e8
 8009ab8:	20000ac4 	.word	0x20000ac4
 8009abc:	0800b600 	.word	0x0800b600
 8009ac0:	0800b618 	.word	0x0800b618
 8009ac4:	0800b624 	.word	0x0800b624
 8009ac8:	20000ac5 	.word	0x20000ac5
 8009acc:	20000ac6 	.word	0x20000ac6
 8009ad0:	20000ac8 	.word	0x20000ac8
 8009ad4:	0800b630 	.word	0x0800b630

	// inLL?
	} else if (cmd == 0x09) {
 8009ad8:	7ffb      	ldrb	r3, [r7, #31]
 8009ada:	2b09      	cmp	r3, #9
 8009adc:	d112      	bne.n	8009b04 <CDC_Receive_FS+0x334>
		EnableTIM4_PB6();
 8009ade:	f7f6 fe0f 	bl	8000700 <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 8009ae2:	f7f6 fe19 	bl	8000718 <GetTIM4>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	81bb      	strh	r3, [r7, #12]
		UserTxBufferFS[0] = cmd;
 8009aec:	4a08      	ldr	r2, [pc, #32]	; (8009b10 <CDC_Receive_FS+0x340>)
 8009aee:	7ffb      	ldrb	r3, [r7, #31]
 8009af0:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS+1,&temp,sizeof(uint16_t));
 8009af2:	4a08      	ldr	r2, [pc, #32]	; (8009b14 <CDC_Receive_FS+0x344>)
 8009af4:	89bb      	ldrh	r3, [r7, #12]
 8009af6:	8013      	strh	r3, [r2, #0]



		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8009af8:	2103      	movs	r1, #3
 8009afa:	4805      	ldr	r0, [pc, #20]	; (8009b10 <CDC_Receive_FS+0x340>)
 8009afc:	f000 f80c 	bl	8009b18 <CDC_Transmit_FS>
		return (USBD_OK);
 8009b00:	2300      	movs	r3, #0
 8009b02:	e000      	b.n	8009b06 <CDC_Receive_FS+0x336>
	}

//--------------------------------------------------------------------------
	return (USBD_OK);
 8009b04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3724      	adds	r7, #36	; 0x24
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd90      	pop	{r4, r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	20000ac4 	.word	0x20000ac4
 8009b14:	20000ac5 	.word	0x20000ac5

08009b18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8009b28:	4b0d      	ldr	r3, [pc, #52]	; (8009b60 <CDC_Transmit_FS+0x48>)
 8009b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b2e:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0) {
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e00b      	b.n	8009b56 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009b3e:	887b      	ldrh	r3, [r7, #2]
 8009b40:	461a      	mov	r2, r3
 8009b42:	6879      	ldr	r1, [r7, #4]
 8009b44:	4806      	ldr	r0, [pc, #24]	; (8009b60 <CDC_Transmit_FS+0x48>)
 8009b46:	f7fe fc79 	bl	800843c <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009b4a:	4805      	ldr	r0, [pc, #20]	; (8009b60 <CDC_Transmit_FS+0x48>)
 8009b4c:	f7fe fca2 	bl	8008494 <USBD_CDC_TransmitPacket>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20000600 	.word	0x20000600

08009b64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	6039      	str	r1, [r7, #0]
 8009b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	2212      	movs	r2, #18
 8009b74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b76:	4b03      	ldr	r3, [pc, #12]	; (8009b84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bc80      	pop	{r7}
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	2000015c 	.word	0x2000015c

08009b88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	6039      	str	r1, [r7, #0]
 8009b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	2204      	movs	r2, #4
 8009b98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b9a:	4b03      	ldr	r3, [pc, #12]	; (8009ba8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bc80      	pop	{r7}
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	20000170 	.word	0x20000170

08009bac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	6039      	str	r1, [r7, #0]
 8009bb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bb8:	79fb      	ldrb	r3, [r7, #7]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d105      	bne.n	8009bca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	4907      	ldr	r1, [pc, #28]	; (8009be0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bc2:	4808      	ldr	r0, [pc, #32]	; (8009be4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bc4:	f7ff fc7c 	bl	80094c0 <USBD_GetString>
 8009bc8:	e004      	b.n	8009bd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	4904      	ldr	r1, [pc, #16]	; (8009be0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009bce:	4805      	ldr	r0, [pc, #20]	; (8009be4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009bd0:	f7ff fc76 	bl	80094c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bd4:	4b02      	ldr	r3, [pc, #8]	; (8009be0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	20000cc4 	.word	0x20000cc4
 8009be4:	0800b63c 	.word	0x0800b63c

08009be8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	6039      	str	r1, [r7, #0]
 8009bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	4904      	ldr	r1, [pc, #16]	; (8009c08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009bf8:	4804      	ldr	r0, [pc, #16]	; (8009c0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009bfa:	f7ff fc61 	bl	80094c0 <USBD_GetString>
  return USBD_StrDesc;
 8009bfe:	4b02      	ldr	r3, [pc, #8]	; (8009c08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	20000cc4 	.word	0x20000cc4
 8009c0c:	0800b654 	.word	0x0800b654

08009c10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	4603      	mov	r3, r0
 8009c18:	6039      	str	r1, [r7, #0]
 8009c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	221a      	movs	r2, #26
 8009c20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c22:	f000 f843 	bl	8009cac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c26:	4b02      	ldr	r3, [pc, #8]	; (8009c30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	20000174 	.word	0x20000174

08009c34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	6039      	str	r1, [r7, #0]
 8009c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c40:	79fb      	ldrb	r3, [r7, #7]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d105      	bne.n	8009c52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	4907      	ldr	r1, [pc, #28]	; (8009c68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c4a:	4808      	ldr	r0, [pc, #32]	; (8009c6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c4c:	f7ff fc38 	bl	80094c0 <USBD_GetString>
 8009c50:	e004      	b.n	8009c5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	4904      	ldr	r1, [pc, #16]	; (8009c68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c56:	4805      	ldr	r0, [pc, #20]	; (8009c6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c58:	f7ff fc32 	bl	80094c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c5c:	4b02      	ldr	r3, [pc, #8]	; (8009c68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3708      	adds	r7, #8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	20000cc4 	.word	0x20000cc4
 8009c6c:	0800b668 	.word	0x0800b668

08009c70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	6039      	str	r1, [r7, #0]
 8009c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c7c:	79fb      	ldrb	r3, [r7, #7]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d105      	bne.n	8009c8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	4907      	ldr	r1, [pc, #28]	; (8009ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c86:	4808      	ldr	r0, [pc, #32]	; (8009ca8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c88:	f7ff fc1a 	bl	80094c0 <USBD_GetString>
 8009c8c:	e004      	b.n	8009c98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	4904      	ldr	r1, [pc, #16]	; (8009ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c92:	4805      	ldr	r0, [pc, #20]	; (8009ca8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c94:	f7ff fc14 	bl	80094c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c98:	4b02      	ldr	r3, [pc, #8]	; (8009ca4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20000cc4 	.word	0x20000cc4
 8009ca8:	0800b674 	.word	0x0800b674

08009cac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cb2:	4b0f      	ldr	r3, [pc, #60]	; (8009cf0 <Get_SerialNum+0x44>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cb8:	4b0e      	ldr	r3, [pc, #56]	; (8009cf4 <Get_SerialNum+0x48>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009cbe:	4b0e      	ldr	r3, [pc, #56]	; (8009cf8 <Get_SerialNum+0x4c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4413      	add	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d009      	beq.n	8009ce6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cd2:	2208      	movs	r2, #8
 8009cd4:	4909      	ldr	r1, [pc, #36]	; (8009cfc <Get_SerialNum+0x50>)
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 f814 	bl	8009d04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009cdc:	2204      	movs	r2, #4
 8009cde:	4908      	ldr	r1, [pc, #32]	; (8009d00 <Get_SerialNum+0x54>)
 8009ce0:	68b8      	ldr	r0, [r7, #8]
 8009ce2:	f000 f80f 	bl	8009d04 <IntToUnicode>
  }
}
 8009ce6:	bf00      	nop
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	1ffff7e8 	.word	0x1ffff7e8
 8009cf4:	1ffff7ec 	.word	0x1ffff7ec
 8009cf8:	1ffff7f0 	.word	0x1ffff7f0
 8009cfc:	20000176 	.word	0x20000176
 8009d00:	20000186 	.word	0x20000186

08009d04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b087      	sub	sp, #28
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d16:	2300      	movs	r3, #0
 8009d18:	75fb      	strb	r3, [r7, #23]
 8009d1a:	e027      	b.n	8009d6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	0f1b      	lsrs	r3, r3, #28
 8009d20:	2b09      	cmp	r3, #9
 8009d22:	d80b      	bhi.n	8009d3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	0f1b      	lsrs	r3, r3, #28
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	4619      	mov	r1, r3
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	440b      	add	r3, r1
 8009d34:	3230      	adds	r2, #48	; 0x30
 8009d36:	b2d2      	uxtb	r2, r2
 8009d38:	701a      	strb	r2, [r3, #0]
 8009d3a:	e00a      	b.n	8009d52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	0f1b      	lsrs	r3, r3, #28
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	005b      	lsls	r3, r3, #1
 8009d46:	4619      	mov	r1, r3
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	440b      	add	r3, r1
 8009d4c:	3237      	adds	r2, #55	; 0x37
 8009d4e:	b2d2      	uxtb	r2, r2
 8009d50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	011b      	lsls	r3, r3, #4
 8009d56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
 8009d5a:	005b      	lsls	r3, r3, #1
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	4413      	add	r3, r2
 8009d62:	2200      	movs	r2, #0
 8009d64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	75fb      	strb	r3, [r7, #23]
 8009d6c:	7dfa      	ldrb	r2, [r7, #23]
 8009d6e:	79fb      	ldrb	r3, [r7, #7]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d3d3      	bcc.n	8009d1c <IntToUnicode+0x18>
  }
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bc80      	pop	{r7}
 8009d7e:	4770      	bx	lr

08009d80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a0d      	ldr	r2, [pc, #52]	; (8009dc4 <HAL_PCD_MspInit+0x44>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d113      	bne.n	8009dba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009d92:	4b0d      	ldr	r3, [pc, #52]	; (8009dc8 <HAL_PCD_MspInit+0x48>)
 8009d94:	69db      	ldr	r3, [r3, #28]
 8009d96:	4a0c      	ldr	r2, [pc, #48]	; (8009dc8 <HAL_PCD_MspInit+0x48>)
 8009d98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d9c:	61d3      	str	r3, [r2, #28]
 8009d9e:	4b0a      	ldr	r3, [pc, #40]	; (8009dc8 <HAL_PCD_MspInit+0x48>)
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009daa:	2200      	movs	r2, #0
 8009dac:	2100      	movs	r1, #0
 8009dae:	2014      	movs	r0, #20
 8009db0:	f7f8 fb33 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009db4:	2014      	movs	r0, #20
 8009db6:	f7f8 fb4c 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009dba:	bf00      	nop
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	40005c00 	.word	0x40005c00
 8009dc8:	40021000 	.word	0x40021000

08009dcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009de0:	4619      	mov	r1, r3
 8009de2:	4610      	mov	r0, r2
 8009de4:	f7fe fc3b 	bl	800865e <USBD_LL_SetupStage>
}
 8009de8:	bf00      	nop
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e02:	78fa      	ldrb	r2, [r7, #3]
 8009e04:	6879      	ldr	r1, [r7, #4]
 8009e06:	4613      	mov	r3, r2
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	00db      	lsls	r3, r3, #3
 8009e0e:	440b      	add	r3, r1
 8009e10:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	78fb      	ldrb	r3, [r7, #3]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	f7fe fc6d 	bl	80086f8 <USBD_LL_DataOutStage>
}
 8009e1e:	bf00      	nop
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b082      	sub	sp, #8
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009e38:	78fa      	ldrb	r2, [r7, #3]
 8009e3a:	6879      	ldr	r1, [r7, #4]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4413      	add	r3, r2
 8009e42:	00db      	lsls	r3, r3, #3
 8009e44:	440b      	add	r3, r1
 8009e46:	333c      	adds	r3, #60	; 0x3c
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	78fb      	ldrb	r3, [r7, #3]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	f7fe fcc4 	bl	80087da <USBD_LL_DataInStage>
}
 8009e52:	bf00      	nop
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe fdd4 	bl	8008a16 <USBD_LL_SOF>
}
 8009e6e:	bf00      	nop
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b084      	sub	sp, #16
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d001      	beq.n	8009e8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e8a:	f7f7 fa4d 	bl	8001328 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009e94:	7bfa      	ldrb	r2, [r7, #15]
 8009e96:	4611      	mov	r1, r2
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fe fd84 	bl	80089a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fe fd3d 	bl	8008924 <USBD_LL_Reset>
}
 8009eaa:	bf00      	nop
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
	...

08009eb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fe fd7e 	bl	80089c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d005      	beq.n	8009edc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ed0:	4b04      	ldr	r3, [pc, #16]	; (8009ee4 <HAL_PCD_SuspendCallback+0x30>)
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	4a03      	ldr	r2, [pc, #12]	; (8009ee4 <HAL_PCD_SuspendCallback+0x30>)
 8009ed6:	f043 0306 	orr.w	r3, r3, #6
 8009eda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009edc:	bf00      	nop
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	e000ed00 	.word	0xe000ed00

08009ee8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe fd78 	bl	80089ec <USBD_LL_Resume>
}
 8009efc:	bf00      	nop
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009f0c:	4a28      	ldr	r2, [pc, #160]	; (8009fb0 <USBD_LL_Init+0xac>)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a26      	ldr	r2, [pc, #152]	; (8009fb0 <USBD_LL_Init+0xac>)
 8009f18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009f1c:	4b24      	ldr	r3, [pc, #144]	; (8009fb0 <USBD_LL_Init+0xac>)
 8009f1e:	4a25      	ldr	r2, [pc, #148]	; (8009fb4 <USBD_LL_Init+0xb0>)
 8009f20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009f22:	4b23      	ldr	r3, [pc, #140]	; (8009fb0 <USBD_LL_Init+0xac>)
 8009f24:	2208      	movs	r2, #8
 8009f26:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009f28:	4b21      	ldr	r3, [pc, #132]	; (8009fb0 <USBD_LL_Init+0xac>)
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009f2e:	4b20      	ldr	r3, [pc, #128]	; (8009fb0 <USBD_LL_Init+0xac>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009f34:	4b1e      	ldr	r3, [pc, #120]	; (8009fb0 <USBD_LL_Init+0xac>)
 8009f36:	2200      	movs	r2, #0
 8009f38:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f3a:	4b1d      	ldr	r3, [pc, #116]	; (8009fb0 <USBD_LL_Init+0xac>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009f40:	481b      	ldr	r0, [pc, #108]	; (8009fb0 <USBD_LL_Init+0xac>)
 8009f42:	f7f8 fea2 	bl	8002c8a <HAL_PCD_Init>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009f4c:	f7f7 f9ec 	bl	8001328 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f56:	2318      	movs	r3, #24
 8009f58:	2200      	movs	r2, #0
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	f7fa f9e4 	bl	8004328 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f66:	2358      	movs	r3, #88	; 0x58
 8009f68:	2200      	movs	r2, #0
 8009f6a:	2180      	movs	r1, #128	; 0x80
 8009f6c:	f7fa f9dc 	bl	8004328 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f76:	23c0      	movs	r3, #192	; 0xc0
 8009f78:	2200      	movs	r2, #0
 8009f7a:	2181      	movs	r1, #129	; 0x81
 8009f7c:	f7fa f9d4 	bl	8004328 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f86:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	2101      	movs	r1, #1
 8009f8e:	f7fa f9cb 	bl	8004328 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2182      	movs	r1, #130	; 0x82
 8009fa0:	f7fa f9c2 	bl	8004328 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20000ec4 	.word	0x20000ec4
 8009fb4:	40005c00 	.word	0x40005c00

08009fb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7f8 ff66 	bl	8002ea0 <HAL_PCD_Start>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 f94e 	bl	800a27c <USBD_Get_USB_Status>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	4608      	mov	r0, r1
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	70fb      	strb	r3, [r7, #3]
 800a000:	460b      	mov	r3, r1
 800a002:	70bb      	strb	r3, [r7, #2]
 800a004:	4613      	mov	r3, r2
 800a006:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a016:	78bb      	ldrb	r3, [r7, #2]
 800a018:	883a      	ldrh	r2, [r7, #0]
 800a01a:	78f9      	ldrb	r1, [r7, #3]
 800a01c:	f7f9 f8e0 	bl	80031e0 <HAL_PCD_EP_Open>
 800a020:	4603      	mov	r3, r0
 800a022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	4618      	mov	r0, r3
 800a028:	f000 f928 	bl	800a27c <USBD_Get_USB_Status>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a030:	7bbb      	ldrb	r3, [r7, #14]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a054:	78fa      	ldrb	r2, [r7, #3]
 800a056:	4611      	mov	r1, r2
 800a058:	4618      	mov	r0, r3
 800a05a:	f7f9 f927 	bl	80032ac <HAL_PCD_EP_Close>
 800a05e:	4603      	mov	r3, r0
 800a060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	4618      	mov	r0, r3
 800a066:	f000 f909 	bl	800a27c <USBD_Get_USB_Status>
 800a06a:	4603      	mov	r3, r0
 800a06c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	460b      	mov	r3, r1
 800a082:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a092:	78fa      	ldrb	r2, [r7, #3]
 800a094:	4611      	mov	r1, r2
 800a096:	4618      	mov	r0, r3
 800a098:	f7f9 f9e7 	bl	800346a <HAL_PCD_EP_SetStall>
 800a09c:	4603      	mov	r3, r0
 800a09e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 f8ea 	bl	800a27c <USBD_Get_USB_Status>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	460b      	mov	r3, r1
 800a0c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0d0:	78fa      	ldrb	r2, [r7, #3]
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7f9 fa28 	bl	800352a <HAL_PCD_EP_ClrStall>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 f8cb 	bl	800a27c <USBD_Get_USB_Status>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a106:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	da0c      	bge.n	800a12a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a110:	78fb      	ldrb	r3, [r7, #3]
 800a112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a116:	68f9      	ldr	r1, [r7, #12]
 800a118:	1c5a      	adds	r2, r3, #1
 800a11a:	4613      	mov	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	00db      	lsls	r3, r3, #3
 800a122:	440b      	add	r3, r1
 800a124:	3302      	adds	r3, #2
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	e00b      	b.n	800a142 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a12a:	78fb      	ldrb	r3, [r7, #3]
 800a12c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a130:	68f9      	ldr	r1, [r7, #12]
 800a132:	4613      	mov	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	00db      	lsls	r3, r3, #3
 800a13a:	440b      	add	r3, r1
 800a13c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a140:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	bc80      	pop	{r7}
 800a14a:	4770      	bx	lr

0800a14c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a166:	78fa      	ldrb	r2, [r7, #3]
 800a168:	4611      	mov	r1, r2
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7f9 f813 	bl	8003196 <HAL_PCD_SetAddress>
 800a170:	4603      	mov	r3, r0
 800a172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a174:	7bfb      	ldrb	r3, [r7, #15]
 800a176:	4618      	mov	r0, r3
 800a178:	f000 f880 	bl	800a27c <USBD_Get_USB_Status>
 800a17c:	4603      	mov	r3, r0
 800a17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a180:	7bbb      	ldrb	r3, [r7, #14]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b086      	sub	sp, #24
 800a18e:	af00      	add	r7, sp, #0
 800a190:	60f8      	str	r0, [r7, #12]
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	461a      	mov	r2, r3
 800a196:	460b      	mov	r3, r1
 800a198:	72fb      	strb	r3, [r7, #11]
 800a19a:	4613      	mov	r3, r2
 800a19c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a1ac:	893b      	ldrh	r3, [r7, #8]
 800a1ae:	7af9      	ldrb	r1, [r7, #11]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	f7f9 f917 	bl	80033e4 <HAL_PCD_EP_Transmit>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 f85d 	bl	800a27c <USBD_Get_USB_Status>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	607a      	str	r2, [r7, #4]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	460b      	mov	r3, r1
 800a1de:	72fb      	strb	r3, [r7, #11]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a1f2:	893b      	ldrh	r3, [r7, #8]
 800a1f4:	7af9      	ldrb	r1, [r7, #11]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	f7f9 f8a0 	bl	800333c <HAL_PCD_EP_Receive>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a200:	7dfb      	ldrb	r3, [r7, #23]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 f83a 	bl	800a27c <USBD_Get_USB_Status>
 800a208:	4603      	mov	r3, r0
 800a20a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a20c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3718      	adds	r7, #24
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b082      	sub	sp, #8
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	460b      	mov	r3, r1
 800a220:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a228:	78fa      	ldrb	r2, [r7, #3]
 800a22a:	4611      	mov	r1, r2
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7f9 f8c2 	bl	80033b6 <HAL_PCD_EP_GetRxCount>
 800a232:	4603      	mov	r3, r0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a244:	4b02      	ldr	r3, [pc, #8]	; (800a250 <USBD_static_malloc+0x14>)
}
 800a246:	4618      	mov	r0, r3
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bc80      	pop	{r7}
 800a24e:	4770      	bx	lr
 800a250:	20000290 	.word	0x20000290

0800a254 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]

}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	bc80      	pop	{r7}
 800a264:	4770      	bx	lr

0800a266 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a266:	b480      	push	{r7}
 800a268:	b083      	sub	sp, #12
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	460b      	mov	r3, r1
 800a270:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a272:	bf00      	nop
 800a274:	370c      	adds	r7, #12
 800a276:	46bd      	mov	sp, r7
 800a278:	bc80      	pop	{r7}
 800a27a:	4770      	bx	lr

0800a27c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	4603      	mov	r3, r0
 800a284:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a28a:	79fb      	ldrb	r3, [r7, #7]
 800a28c:	2b03      	cmp	r3, #3
 800a28e:	d817      	bhi.n	800a2c0 <USBD_Get_USB_Status+0x44>
 800a290:	a201      	add	r2, pc, #4	; (adr r2, 800a298 <USBD_Get_USB_Status+0x1c>)
 800a292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a296:	bf00      	nop
 800a298:	0800a2a9 	.word	0x0800a2a9
 800a29c:	0800a2af 	.word	0x0800a2af
 800a2a0:	0800a2b5 	.word	0x0800a2b5
 800a2a4:	0800a2bb 	.word	0x0800a2bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ac:	e00b      	b.n	800a2c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b2:	e008      	b.n	800a2c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b8:	e005      	b.n	800a2c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a2be:	e002      	b.n	800a2c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2c4:	bf00      	nop
  }
  return usb_status;
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3714      	adds	r7, #20
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bc80      	pop	{r7}
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop

0800a2d4 <__errno>:
 800a2d4:	4b01      	ldr	r3, [pc, #4]	; (800a2dc <__errno+0x8>)
 800a2d6:	6818      	ldr	r0, [r3, #0]
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	20000190 	.word	0x20000190

0800a2e0 <__libc_init_array>:
 800a2e0:	b570      	push	{r4, r5, r6, lr}
 800a2e2:	2600      	movs	r6, #0
 800a2e4:	4d0c      	ldr	r5, [pc, #48]	; (800a318 <__libc_init_array+0x38>)
 800a2e6:	4c0d      	ldr	r4, [pc, #52]	; (800a31c <__libc_init_array+0x3c>)
 800a2e8:	1b64      	subs	r4, r4, r5
 800a2ea:	10a4      	asrs	r4, r4, #2
 800a2ec:	42a6      	cmp	r6, r4
 800a2ee:	d109      	bne.n	800a304 <__libc_init_array+0x24>
 800a2f0:	f001 f954 	bl	800b59c <_init>
 800a2f4:	2600      	movs	r6, #0
 800a2f6:	4d0a      	ldr	r5, [pc, #40]	; (800a320 <__libc_init_array+0x40>)
 800a2f8:	4c0a      	ldr	r4, [pc, #40]	; (800a324 <__libc_init_array+0x44>)
 800a2fa:	1b64      	subs	r4, r4, r5
 800a2fc:	10a4      	asrs	r4, r4, #2
 800a2fe:	42a6      	cmp	r6, r4
 800a300:	d105      	bne.n	800a30e <__libc_init_array+0x2e>
 800a302:	bd70      	pop	{r4, r5, r6, pc}
 800a304:	f855 3b04 	ldr.w	r3, [r5], #4
 800a308:	4798      	blx	r3
 800a30a:	3601      	adds	r6, #1
 800a30c:	e7ee      	b.n	800a2ec <__libc_init_array+0xc>
 800a30e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a312:	4798      	blx	r3
 800a314:	3601      	adds	r6, #1
 800a316:	e7f2      	b.n	800a2fe <__libc_init_array+0x1e>
 800a318:	0800b734 	.word	0x0800b734
 800a31c:	0800b734 	.word	0x0800b734
 800a320:	0800b734 	.word	0x0800b734
 800a324:	0800b738 	.word	0x0800b738

0800a328 <memcpy>:
 800a328:	440a      	add	r2, r1
 800a32a:	4291      	cmp	r1, r2
 800a32c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a330:	d100      	bne.n	800a334 <memcpy+0xc>
 800a332:	4770      	bx	lr
 800a334:	b510      	push	{r4, lr}
 800a336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a33a:	4291      	cmp	r1, r2
 800a33c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a340:	d1f9      	bne.n	800a336 <memcpy+0xe>
 800a342:	bd10      	pop	{r4, pc}

0800a344 <memset>:
 800a344:	4603      	mov	r3, r0
 800a346:	4402      	add	r2, r0
 800a348:	4293      	cmp	r3, r2
 800a34a:	d100      	bne.n	800a34e <memset+0xa>
 800a34c:	4770      	bx	lr
 800a34e:	f803 1b01 	strb.w	r1, [r3], #1
 800a352:	e7f9      	b.n	800a348 <memset+0x4>

0800a354 <iprintf>:
 800a354:	b40f      	push	{r0, r1, r2, r3}
 800a356:	4b0a      	ldr	r3, [pc, #40]	; (800a380 <iprintf+0x2c>)
 800a358:	b513      	push	{r0, r1, r4, lr}
 800a35a:	681c      	ldr	r4, [r3, #0]
 800a35c:	b124      	cbz	r4, 800a368 <iprintf+0x14>
 800a35e:	69a3      	ldr	r3, [r4, #24]
 800a360:	b913      	cbnz	r3, 800a368 <iprintf+0x14>
 800a362:	4620      	mov	r0, r4
 800a364:	f000 f886 	bl	800a474 <__sinit>
 800a368:	ab05      	add	r3, sp, #20
 800a36a:	4620      	mov	r0, r4
 800a36c:	9a04      	ldr	r2, [sp, #16]
 800a36e:	68a1      	ldr	r1, [r4, #8]
 800a370:	9301      	str	r3, [sp, #4]
 800a372:	f000 fafd 	bl	800a970 <_vfiprintf_r>
 800a376:	b002      	add	sp, #8
 800a378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a37c:	b004      	add	sp, #16
 800a37e:	4770      	bx	lr
 800a380:	20000190 	.word	0x20000190

0800a384 <siprintf>:
 800a384:	b40e      	push	{r1, r2, r3}
 800a386:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a38a:	b500      	push	{lr}
 800a38c:	b09c      	sub	sp, #112	; 0x70
 800a38e:	ab1d      	add	r3, sp, #116	; 0x74
 800a390:	9002      	str	r0, [sp, #8]
 800a392:	9006      	str	r0, [sp, #24]
 800a394:	9107      	str	r1, [sp, #28]
 800a396:	9104      	str	r1, [sp, #16]
 800a398:	4808      	ldr	r0, [pc, #32]	; (800a3bc <siprintf+0x38>)
 800a39a:	4909      	ldr	r1, [pc, #36]	; (800a3c0 <siprintf+0x3c>)
 800a39c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3a0:	9105      	str	r1, [sp, #20]
 800a3a2:	6800      	ldr	r0, [r0, #0]
 800a3a4:	a902      	add	r1, sp, #8
 800a3a6:	9301      	str	r3, [sp, #4]
 800a3a8:	f000 f9ba 	bl	800a720 <_svfiprintf_r>
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	9b02      	ldr	r3, [sp, #8]
 800a3b0:	701a      	strb	r2, [r3, #0]
 800a3b2:	b01c      	add	sp, #112	; 0x70
 800a3b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3b8:	b003      	add	sp, #12
 800a3ba:	4770      	bx	lr
 800a3bc:	20000190 	.word	0x20000190
 800a3c0:	ffff0208 	.word	0xffff0208

0800a3c4 <std>:
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	b510      	push	{r4, lr}
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a3ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3d2:	6083      	str	r3, [r0, #8]
 800a3d4:	8181      	strh	r1, [r0, #12]
 800a3d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a3d8:	81c2      	strh	r2, [r0, #14]
 800a3da:	6183      	str	r3, [r0, #24]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	2208      	movs	r2, #8
 800a3e0:	305c      	adds	r0, #92	; 0x5c
 800a3e2:	f7ff ffaf 	bl	800a344 <memset>
 800a3e6:	4b05      	ldr	r3, [pc, #20]	; (800a3fc <std+0x38>)
 800a3e8:	6224      	str	r4, [r4, #32]
 800a3ea:	6263      	str	r3, [r4, #36]	; 0x24
 800a3ec:	4b04      	ldr	r3, [pc, #16]	; (800a400 <std+0x3c>)
 800a3ee:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3f0:	4b04      	ldr	r3, [pc, #16]	; (800a404 <std+0x40>)
 800a3f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3f4:	4b04      	ldr	r3, [pc, #16]	; (800a408 <std+0x44>)
 800a3f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a3f8:	bd10      	pop	{r4, pc}
 800a3fa:	bf00      	nop
 800a3fc:	0800af1d 	.word	0x0800af1d
 800a400:	0800af3f 	.word	0x0800af3f
 800a404:	0800af77 	.word	0x0800af77
 800a408:	0800af9b 	.word	0x0800af9b

0800a40c <_cleanup_r>:
 800a40c:	4901      	ldr	r1, [pc, #4]	; (800a414 <_cleanup_r+0x8>)
 800a40e:	f000 b8af 	b.w	800a570 <_fwalk_reent>
 800a412:	bf00      	nop
 800a414:	0800b275 	.word	0x0800b275

0800a418 <__sfmoreglue>:
 800a418:	b570      	push	{r4, r5, r6, lr}
 800a41a:	2568      	movs	r5, #104	; 0x68
 800a41c:	1e4a      	subs	r2, r1, #1
 800a41e:	4355      	muls	r5, r2
 800a420:	460e      	mov	r6, r1
 800a422:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a426:	f000 f8c5 	bl	800a5b4 <_malloc_r>
 800a42a:	4604      	mov	r4, r0
 800a42c:	b140      	cbz	r0, 800a440 <__sfmoreglue+0x28>
 800a42e:	2100      	movs	r1, #0
 800a430:	e9c0 1600 	strd	r1, r6, [r0]
 800a434:	300c      	adds	r0, #12
 800a436:	60a0      	str	r0, [r4, #8]
 800a438:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a43c:	f7ff ff82 	bl	800a344 <memset>
 800a440:	4620      	mov	r0, r4
 800a442:	bd70      	pop	{r4, r5, r6, pc}

0800a444 <__sfp_lock_acquire>:
 800a444:	4801      	ldr	r0, [pc, #4]	; (800a44c <__sfp_lock_acquire+0x8>)
 800a446:	f000 b8b3 	b.w	800a5b0 <__retarget_lock_acquire_recursive>
 800a44a:	bf00      	nop
 800a44c:	200011b8 	.word	0x200011b8

0800a450 <__sfp_lock_release>:
 800a450:	4801      	ldr	r0, [pc, #4]	; (800a458 <__sfp_lock_release+0x8>)
 800a452:	f000 b8ae 	b.w	800a5b2 <__retarget_lock_release_recursive>
 800a456:	bf00      	nop
 800a458:	200011b8 	.word	0x200011b8

0800a45c <__sinit_lock_acquire>:
 800a45c:	4801      	ldr	r0, [pc, #4]	; (800a464 <__sinit_lock_acquire+0x8>)
 800a45e:	f000 b8a7 	b.w	800a5b0 <__retarget_lock_acquire_recursive>
 800a462:	bf00      	nop
 800a464:	200011b3 	.word	0x200011b3

0800a468 <__sinit_lock_release>:
 800a468:	4801      	ldr	r0, [pc, #4]	; (800a470 <__sinit_lock_release+0x8>)
 800a46a:	f000 b8a2 	b.w	800a5b2 <__retarget_lock_release_recursive>
 800a46e:	bf00      	nop
 800a470:	200011b3 	.word	0x200011b3

0800a474 <__sinit>:
 800a474:	b510      	push	{r4, lr}
 800a476:	4604      	mov	r4, r0
 800a478:	f7ff fff0 	bl	800a45c <__sinit_lock_acquire>
 800a47c:	69a3      	ldr	r3, [r4, #24]
 800a47e:	b11b      	cbz	r3, 800a488 <__sinit+0x14>
 800a480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a484:	f7ff bff0 	b.w	800a468 <__sinit_lock_release>
 800a488:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a48c:	6523      	str	r3, [r4, #80]	; 0x50
 800a48e:	4b13      	ldr	r3, [pc, #76]	; (800a4dc <__sinit+0x68>)
 800a490:	4a13      	ldr	r2, [pc, #76]	; (800a4e0 <__sinit+0x6c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	62a2      	str	r2, [r4, #40]	; 0x28
 800a496:	42a3      	cmp	r3, r4
 800a498:	bf08      	it	eq
 800a49a:	2301      	moveq	r3, #1
 800a49c:	4620      	mov	r0, r4
 800a49e:	bf08      	it	eq
 800a4a0:	61a3      	streq	r3, [r4, #24]
 800a4a2:	f000 f81f 	bl	800a4e4 <__sfp>
 800a4a6:	6060      	str	r0, [r4, #4]
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f000 f81b 	bl	800a4e4 <__sfp>
 800a4ae:	60a0      	str	r0, [r4, #8]
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f000 f817 	bl	800a4e4 <__sfp>
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	2104      	movs	r1, #4
 800a4ba:	60e0      	str	r0, [r4, #12]
 800a4bc:	6860      	ldr	r0, [r4, #4]
 800a4be:	f7ff ff81 	bl	800a3c4 <std>
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	2109      	movs	r1, #9
 800a4c6:	68a0      	ldr	r0, [r4, #8]
 800a4c8:	f7ff ff7c 	bl	800a3c4 <std>
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	2112      	movs	r1, #18
 800a4d0:	68e0      	ldr	r0, [r4, #12]
 800a4d2:	f7ff ff77 	bl	800a3c4 <std>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	61a3      	str	r3, [r4, #24]
 800a4da:	e7d1      	b.n	800a480 <__sinit+0xc>
 800a4dc:	0800b69c 	.word	0x0800b69c
 800a4e0:	0800a40d 	.word	0x0800a40d

0800a4e4 <__sfp>:
 800a4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e6:	4607      	mov	r7, r0
 800a4e8:	f7ff ffac 	bl	800a444 <__sfp_lock_acquire>
 800a4ec:	4b1e      	ldr	r3, [pc, #120]	; (800a568 <__sfp+0x84>)
 800a4ee:	681e      	ldr	r6, [r3, #0]
 800a4f0:	69b3      	ldr	r3, [r6, #24]
 800a4f2:	b913      	cbnz	r3, 800a4fa <__sfp+0x16>
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f7ff ffbd 	bl	800a474 <__sinit>
 800a4fa:	3648      	adds	r6, #72	; 0x48
 800a4fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a500:	3b01      	subs	r3, #1
 800a502:	d503      	bpl.n	800a50c <__sfp+0x28>
 800a504:	6833      	ldr	r3, [r6, #0]
 800a506:	b30b      	cbz	r3, 800a54c <__sfp+0x68>
 800a508:	6836      	ldr	r6, [r6, #0]
 800a50a:	e7f7      	b.n	800a4fc <__sfp+0x18>
 800a50c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a510:	b9d5      	cbnz	r5, 800a548 <__sfp+0x64>
 800a512:	4b16      	ldr	r3, [pc, #88]	; (800a56c <__sfp+0x88>)
 800a514:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a518:	60e3      	str	r3, [r4, #12]
 800a51a:	6665      	str	r5, [r4, #100]	; 0x64
 800a51c:	f000 f847 	bl	800a5ae <__retarget_lock_init_recursive>
 800a520:	f7ff ff96 	bl	800a450 <__sfp_lock_release>
 800a524:	2208      	movs	r2, #8
 800a526:	4629      	mov	r1, r5
 800a528:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a52c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a530:	6025      	str	r5, [r4, #0]
 800a532:	61a5      	str	r5, [r4, #24]
 800a534:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a538:	f7ff ff04 	bl	800a344 <memset>
 800a53c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a540:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a544:	4620      	mov	r0, r4
 800a546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a548:	3468      	adds	r4, #104	; 0x68
 800a54a:	e7d9      	b.n	800a500 <__sfp+0x1c>
 800a54c:	2104      	movs	r1, #4
 800a54e:	4638      	mov	r0, r7
 800a550:	f7ff ff62 	bl	800a418 <__sfmoreglue>
 800a554:	4604      	mov	r4, r0
 800a556:	6030      	str	r0, [r6, #0]
 800a558:	2800      	cmp	r0, #0
 800a55a:	d1d5      	bne.n	800a508 <__sfp+0x24>
 800a55c:	f7ff ff78 	bl	800a450 <__sfp_lock_release>
 800a560:	230c      	movs	r3, #12
 800a562:	603b      	str	r3, [r7, #0]
 800a564:	e7ee      	b.n	800a544 <__sfp+0x60>
 800a566:	bf00      	nop
 800a568:	0800b69c 	.word	0x0800b69c
 800a56c:	ffff0001 	.word	0xffff0001

0800a570 <_fwalk_reent>:
 800a570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a574:	4606      	mov	r6, r0
 800a576:	4688      	mov	r8, r1
 800a578:	2700      	movs	r7, #0
 800a57a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a57e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a582:	f1b9 0901 	subs.w	r9, r9, #1
 800a586:	d505      	bpl.n	800a594 <_fwalk_reent+0x24>
 800a588:	6824      	ldr	r4, [r4, #0]
 800a58a:	2c00      	cmp	r4, #0
 800a58c:	d1f7      	bne.n	800a57e <_fwalk_reent+0xe>
 800a58e:	4638      	mov	r0, r7
 800a590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a594:	89ab      	ldrh	r3, [r5, #12]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d907      	bls.n	800a5aa <_fwalk_reent+0x3a>
 800a59a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	d003      	beq.n	800a5aa <_fwalk_reent+0x3a>
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	47c0      	blx	r8
 800a5a8:	4307      	orrs	r7, r0
 800a5aa:	3568      	adds	r5, #104	; 0x68
 800a5ac:	e7e9      	b.n	800a582 <_fwalk_reent+0x12>

0800a5ae <__retarget_lock_init_recursive>:
 800a5ae:	4770      	bx	lr

0800a5b0 <__retarget_lock_acquire_recursive>:
 800a5b0:	4770      	bx	lr

0800a5b2 <__retarget_lock_release_recursive>:
 800a5b2:	4770      	bx	lr

0800a5b4 <_malloc_r>:
 800a5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b6:	1ccd      	adds	r5, r1, #3
 800a5b8:	f025 0503 	bic.w	r5, r5, #3
 800a5bc:	3508      	adds	r5, #8
 800a5be:	2d0c      	cmp	r5, #12
 800a5c0:	bf38      	it	cc
 800a5c2:	250c      	movcc	r5, #12
 800a5c4:	2d00      	cmp	r5, #0
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	db01      	blt.n	800a5ce <_malloc_r+0x1a>
 800a5ca:	42a9      	cmp	r1, r5
 800a5cc:	d903      	bls.n	800a5d6 <_malloc_r+0x22>
 800a5ce:	230c      	movs	r3, #12
 800a5d0:	6033      	str	r3, [r6, #0]
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5d6:	f000 ff27 	bl	800b428 <__malloc_lock>
 800a5da:	4921      	ldr	r1, [pc, #132]	; (800a660 <_malloc_r+0xac>)
 800a5dc:	680a      	ldr	r2, [r1, #0]
 800a5de:	4614      	mov	r4, r2
 800a5e0:	b99c      	cbnz	r4, 800a60a <_malloc_r+0x56>
 800a5e2:	4f20      	ldr	r7, [pc, #128]	; (800a664 <_malloc_r+0xb0>)
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	b923      	cbnz	r3, 800a5f2 <_malloc_r+0x3e>
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	f000 fc86 	bl	800aefc <_sbrk_r>
 800a5f0:	6038      	str	r0, [r7, #0]
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f000 fc81 	bl	800aefc <_sbrk_r>
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	d123      	bne.n	800a646 <_malloc_r+0x92>
 800a5fe:	230c      	movs	r3, #12
 800a600:	4630      	mov	r0, r6
 800a602:	6033      	str	r3, [r6, #0]
 800a604:	f000 ff16 	bl	800b434 <__malloc_unlock>
 800a608:	e7e3      	b.n	800a5d2 <_malloc_r+0x1e>
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	1b5b      	subs	r3, r3, r5
 800a60e:	d417      	bmi.n	800a640 <_malloc_r+0x8c>
 800a610:	2b0b      	cmp	r3, #11
 800a612:	d903      	bls.n	800a61c <_malloc_r+0x68>
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	441c      	add	r4, r3
 800a618:	6025      	str	r5, [r4, #0]
 800a61a:	e004      	b.n	800a626 <_malloc_r+0x72>
 800a61c:	6863      	ldr	r3, [r4, #4]
 800a61e:	42a2      	cmp	r2, r4
 800a620:	bf0c      	ite	eq
 800a622:	600b      	streq	r3, [r1, #0]
 800a624:	6053      	strne	r3, [r2, #4]
 800a626:	4630      	mov	r0, r6
 800a628:	f000 ff04 	bl	800b434 <__malloc_unlock>
 800a62c:	f104 000b 	add.w	r0, r4, #11
 800a630:	1d23      	adds	r3, r4, #4
 800a632:	f020 0007 	bic.w	r0, r0, #7
 800a636:	1ac2      	subs	r2, r0, r3
 800a638:	d0cc      	beq.n	800a5d4 <_malloc_r+0x20>
 800a63a:	1a1b      	subs	r3, r3, r0
 800a63c:	50a3      	str	r3, [r4, r2]
 800a63e:	e7c9      	b.n	800a5d4 <_malloc_r+0x20>
 800a640:	4622      	mov	r2, r4
 800a642:	6864      	ldr	r4, [r4, #4]
 800a644:	e7cc      	b.n	800a5e0 <_malloc_r+0x2c>
 800a646:	1cc4      	adds	r4, r0, #3
 800a648:	f024 0403 	bic.w	r4, r4, #3
 800a64c:	42a0      	cmp	r0, r4
 800a64e:	d0e3      	beq.n	800a618 <_malloc_r+0x64>
 800a650:	1a21      	subs	r1, r4, r0
 800a652:	4630      	mov	r0, r6
 800a654:	f000 fc52 	bl	800aefc <_sbrk_r>
 800a658:	3001      	adds	r0, #1
 800a65a:	d1dd      	bne.n	800a618 <_malloc_r+0x64>
 800a65c:	e7cf      	b.n	800a5fe <_malloc_r+0x4a>
 800a65e:	bf00      	nop
 800a660:	200004b0 	.word	0x200004b0
 800a664:	200004b4 	.word	0x200004b4

0800a668 <__ssputs_r>:
 800a668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a66c:	688e      	ldr	r6, [r1, #8]
 800a66e:	4682      	mov	sl, r0
 800a670:	429e      	cmp	r6, r3
 800a672:	460c      	mov	r4, r1
 800a674:	4690      	mov	r8, r2
 800a676:	461f      	mov	r7, r3
 800a678:	d838      	bhi.n	800a6ec <__ssputs_r+0x84>
 800a67a:	898a      	ldrh	r2, [r1, #12]
 800a67c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a680:	d032      	beq.n	800a6e8 <__ssputs_r+0x80>
 800a682:	6825      	ldr	r5, [r4, #0]
 800a684:	6909      	ldr	r1, [r1, #16]
 800a686:	3301      	adds	r3, #1
 800a688:	eba5 0901 	sub.w	r9, r5, r1
 800a68c:	6965      	ldr	r5, [r4, #20]
 800a68e:	444b      	add	r3, r9
 800a690:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a698:	106d      	asrs	r5, r5, #1
 800a69a:	429d      	cmp	r5, r3
 800a69c:	bf38      	it	cc
 800a69e:	461d      	movcc	r5, r3
 800a6a0:	0553      	lsls	r3, r2, #21
 800a6a2:	d531      	bpl.n	800a708 <__ssputs_r+0xa0>
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	f7ff ff85 	bl	800a5b4 <_malloc_r>
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	b950      	cbnz	r0, 800a6c4 <__ssputs_r+0x5c>
 800a6ae:	230c      	movs	r3, #12
 800a6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b4:	f8ca 3000 	str.w	r3, [sl]
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6be:	81a3      	strh	r3, [r4, #12]
 800a6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c4:	464a      	mov	r2, r9
 800a6c6:	6921      	ldr	r1, [r4, #16]
 800a6c8:	f7ff fe2e 	bl	800a328 <memcpy>
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d6:	81a3      	strh	r3, [r4, #12]
 800a6d8:	6126      	str	r6, [r4, #16]
 800a6da:	444e      	add	r6, r9
 800a6dc:	6026      	str	r6, [r4, #0]
 800a6de:	463e      	mov	r6, r7
 800a6e0:	6165      	str	r5, [r4, #20]
 800a6e2:	eba5 0509 	sub.w	r5, r5, r9
 800a6e6:	60a5      	str	r5, [r4, #8]
 800a6e8:	42be      	cmp	r6, r7
 800a6ea:	d900      	bls.n	800a6ee <__ssputs_r+0x86>
 800a6ec:	463e      	mov	r6, r7
 800a6ee:	4632      	mov	r2, r6
 800a6f0:	4641      	mov	r1, r8
 800a6f2:	6820      	ldr	r0, [r4, #0]
 800a6f4:	f000 fe7e 	bl	800b3f4 <memmove>
 800a6f8:	68a3      	ldr	r3, [r4, #8]
 800a6fa:	6822      	ldr	r2, [r4, #0]
 800a6fc:	1b9b      	subs	r3, r3, r6
 800a6fe:	4432      	add	r2, r6
 800a700:	2000      	movs	r0, #0
 800a702:	60a3      	str	r3, [r4, #8]
 800a704:	6022      	str	r2, [r4, #0]
 800a706:	e7db      	b.n	800a6c0 <__ssputs_r+0x58>
 800a708:	462a      	mov	r2, r5
 800a70a:	f000 fee5 	bl	800b4d8 <_realloc_r>
 800a70e:	4606      	mov	r6, r0
 800a710:	2800      	cmp	r0, #0
 800a712:	d1e1      	bne.n	800a6d8 <__ssputs_r+0x70>
 800a714:	4650      	mov	r0, sl
 800a716:	6921      	ldr	r1, [r4, #16]
 800a718:	f000 fe92 	bl	800b440 <_free_r>
 800a71c:	e7c7      	b.n	800a6ae <__ssputs_r+0x46>
	...

0800a720 <_svfiprintf_r>:
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	4698      	mov	r8, r3
 800a726:	898b      	ldrh	r3, [r1, #12]
 800a728:	4607      	mov	r7, r0
 800a72a:	061b      	lsls	r3, r3, #24
 800a72c:	460d      	mov	r5, r1
 800a72e:	4614      	mov	r4, r2
 800a730:	b09d      	sub	sp, #116	; 0x74
 800a732:	d50e      	bpl.n	800a752 <_svfiprintf_r+0x32>
 800a734:	690b      	ldr	r3, [r1, #16]
 800a736:	b963      	cbnz	r3, 800a752 <_svfiprintf_r+0x32>
 800a738:	2140      	movs	r1, #64	; 0x40
 800a73a:	f7ff ff3b 	bl	800a5b4 <_malloc_r>
 800a73e:	6028      	str	r0, [r5, #0]
 800a740:	6128      	str	r0, [r5, #16]
 800a742:	b920      	cbnz	r0, 800a74e <_svfiprintf_r+0x2e>
 800a744:	230c      	movs	r3, #12
 800a746:	603b      	str	r3, [r7, #0]
 800a748:	f04f 30ff 	mov.w	r0, #4294967295
 800a74c:	e0d1      	b.n	800a8f2 <_svfiprintf_r+0x1d2>
 800a74e:	2340      	movs	r3, #64	; 0x40
 800a750:	616b      	str	r3, [r5, #20]
 800a752:	2300      	movs	r3, #0
 800a754:	9309      	str	r3, [sp, #36]	; 0x24
 800a756:	2320      	movs	r3, #32
 800a758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a75c:	2330      	movs	r3, #48	; 0x30
 800a75e:	f04f 0901 	mov.w	r9, #1
 800a762:	f8cd 800c 	str.w	r8, [sp, #12]
 800a766:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a90c <_svfiprintf_r+0x1ec>
 800a76a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a76e:	4623      	mov	r3, r4
 800a770:	469a      	mov	sl, r3
 800a772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a776:	b10a      	cbz	r2, 800a77c <_svfiprintf_r+0x5c>
 800a778:	2a25      	cmp	r2, #37	; 0x25
 800a77a:	d1f9      	bne.n	800a770 <_svfiprintf_r+0x50>
 800a77c:	ebba 0b04 	subs.w	fp, sl, r4
 800a780:	d00b      	beq.n	800a79a <_svfiprintf_r+0x7a>
 800a782:	465b      	mov	r3, fp
 800a784:	4622      	mov	r2, r4
 800a786:	4629      	mov	r1, r5
 800a788:	4638      	mov	r0, r7
 800a78a:	f7ff ff6d 	bl	800a668 <__ssputs_r>
 800a78e:	3001      	adds	r0, #1
 800a790:	f000 80aa 	beq.w	800a8e8 <_svfiprintf_r+0x1c8>
 800a794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a796:	445a      	add	r2, fp
 800a798:	9209      	str	r2, [sp, #36]	; 0x24
 800a79a:	f89a 3000 	ldrb.w	r3, [sl]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f000 80a2 	beq.w	800a8e8 <_svfiprintf_r+0x1c8>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7ae:	f10a 0a01 	add.w	sl, sl, #1
 800a7b2:	9304      	str	r3, [sp, #16]
 800a7b4:	9307      	str	r3, [sp, #28]
 800a7b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a7bc:	4654      	mov	r4, sl
 800a7be:	2205      	movs	r2, #5
 800a7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c4:	4851      	ldr	r0, [pc, #324]	; (800a90c <_svfiprintf_r+0x1ec>)
 800a7c6:	f000 fe07 	bl	800b3d8 <memchr>
 800a7ca:	9a04      	ldr	r2, [sp, #16]
 800a7cc:	b9d8      	cbnz	r0, 800a806 <_svfiprintf_r+0xe6>
 800a7ce:	06d0      	lsls	r0, r2, #27
 800a7d0:	bf44      	itt	mi
 800a7d2:	2320      	movmi	r3, #32
 800a7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7d8:	0711      	lsls	r1, r2, #28
 800a7da:	bf44      	itt	mi
 800a7dc:	232b      	movmi	r3, #43	; 0x2b
 800a7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7e8:	d015      	beq.n	800a816 <_svfiprintf_r+0xf6>
 800a7ea:	4654      	mov	r4, sl
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	f04f 0c0a 	mov.w	ip, #10
 800a7f2:	9a07      	ldr	r2, [sp, #28]
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7fa:	3b30      	subs	r3, #48	; 0x30
 800a7fc:	2b09      	cmp	r3, #9
 800a7fe:	d94e      	bls.n	800a89e <_svfiprintf_r+0x17e>
 800a800:	b1b0      	cbz	r0, 800a830 <_svfiprintf_r+0x110>
 800a802:	9207      	str	r2, [sp, #28]
 800a804:	e014      	b.n	800a830 <_svfiprintf_r+0x110>
 800a806:	eba0 0308 	sub.w	r3, r0, r8
 800a80a:	fa09 f303 	lsl.w	r3, r9, r3
 800a80e:	4313      	orrs	r3, r2
 800a810:	46a2      	mov	sl, r4
 800a812:	9304      	str	r3, [sp, #16]
 800a814:	e7d2      	b.n	800a7bc <_svfiprintf_r+0x9c>
 800a816:	9b03      	ldr	r3, [sp, #12]
 800a818:	1d19      	adds	r1, r3, #4
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	9103      	str	r1, [sp, #12]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	bfbb      	ittet	lt
 800a822:	425b      	neglt	r3, r3
 800a824:	f042 0202 	orrlt.w	r2, r2, #2
 800a828:	9307      	strge	r3, [sp, #28]
 800a82a:	9307      	strlt	r3, [sp, #28]
 800a82c:	bfb8      	it	lt
 800a82e:	9204      	strlt	r2, [sp, #16]
 800a830:	7823      	ldrb	r3, [r4, #0]
 800a832:	2b2e      	cmp	r3, #46	; 0x2e
 800a834:	d10c      	bne.n	800a850 <_svfiprintf_r+0x130>
 800a836:	7863      	ldrb	r3, [r4, #1]
 800a838:	2b2a      	cmp	r3, #42	; 0x2a
 800a83a:	d135      	bne.n	800a8a8 <_svfiprintf_r+0x188>
 800a83c:	9b03      	ldr	r3, [sp, #12]
 800a83e:	3402      	adds	r4, #2
 800a840:	1d1a      	adds	r2, r3, #4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	9203      	str	r2, [sp, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	bfb8      	it	lt
 800a84a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a84e:	9305      	str	r3, [sp, #20]
 800a850:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a91c <_svfiprintf_r+0x1fc>
 800a854:	2203      	movs	r2, #3
 800a856:	4650      	mov	r0, sl
 800a858:	7821      	ldrb	r1, [r4, #0]
 800a85a:	f000 fdbd 	bl	800b3d8 <memchr>
 800a85e:	b140      	cbz	r0, 800a872 <_svfiprintf_r+0x152>
 800a860:	2340      	movs	r3, #64	; 0x40
 800a862:	eba0 000a 	sub.w	r0, r0, sl
 800a866:	fa03 f000 	lsl.w	r0, r3, r0
 800a86a:	9b04      	ldr	r3, [sp, #16]
 800a86c:	3401      	adds	r4, #1
 800a86e:	4303      	orrs	r3, r0
 800a870:	9304      	str	r3, [sp, #16]
 800a872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a876:	2206      	movs	r2, #6
 800a878:	4825      	ldr	r0, [pc, #148]	; (800a910 <_svfiprintf_r+0x1f0>)
 800a87a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a87e:	f000 fdab 	bl	800b3d8 <memchr>
 800a882:	2800      	cmp	r0, #0
 800a884:	d038      	beq.n	800a8f8 <_svfiprintf_r+0x1d8>
 800a886:	4b23      	ldr	r3, [pc, #140]	; (800a914 <_svfiprintf_r+0x1f4>)
 800a888:	bb1b      	cbnz	r3, 800a8d2 <_svfiprintf_r+0x1b2>
 800a88a:	9b03      	ldr	r3, [sp, #12]
 800a88c:	3307      	adds	r3, #7
 800a88e:	f023 0307 	bic.w	r3, r3, #7
 800a892:	3308      	adds	r3, #8
 800a894:	9303      	str	r3, [sp, #12]
 800a896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a898:	4433      	add	r3, r6
 800a89a:	9309      	str	r3, [sp, #36]	; 0x24
 800a89c:	e767      	b.n	800a76e <_svfiprintf_r+0x4e>
 800a89e:	460c      	mov	r4, r1
 800a8a0:	2001      	movs	r0, #1
 800a8a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8a6:	e7a5      	b.n	800a7f4 <_svfiprintf_r+0xd4>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	f04f 0c0a 	mov.w	ip, #10
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	3401      	adds	r4, #1
 800a8b2:	9305      	str	r3, [sp, #20]
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8ba:	3a30      	subs	r2, #48	; 0x30
 800a8bc:	2a09      	cmp	r2, #9
 800a8be:	d903      	bls.n	800a8c8 <_svfiprintf_r+0x1a8>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d0c5      	beq.n	800a850 <_svfiprintf_r+0x130>
 800a8c4:	9105      	str	r1, [sp, #20]
 800a8c6:	e7c3      	b.n	800a850 <_svfiprintf_r+0x130>
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8d0:	e7f0      	b.n	800a8b4 <_svfiprintf_r+0x194>
 800a8d2:	ab03      	add	r3, sp, #12
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	462a      	mov	r2, r5
 800a8d8:	4638      	mov	r0, r7
 800a8da:	4b0f      	ldr	r3, [pc, #60]	; (800a918 <_svfiprintf_r+0x1f8>)
 800a8dc:	a904      	add	r1, sp, #16
 800a8de:	f3af 8000 	nop.w
 800a8e2:	1c42      	adds	r2, r0, #1
 800a8e4:	4606      	mov	r6, r0
 800a8e6:	d1d6      	bne.n	800a896 <_svfiprintf_r+0x176>
 800a8e8:	89ab      	ldrh	r3, [r5, #12]
 800a8ea:	065b      	lsls	r3, r3, #25
 800a8ec:	f53f af2c 	bmi.w	800a748 <_svfiprintf_r+0x28>
 800a8f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8f2:	b01d      	add	sp, #116	; 0x74
 800a8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f8:	ab03      	add	r3, sp, #12
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	462a      	mov	r2, r5
 800a8fe:	4638      	mov	r0, r7
 800a900:	4b05      	ldr	r3, [pc, #20]	; (800a918 <_svfiprintf_r+0x1f8>)
 800a902:	a904      	add	r1, sp, #16
 800a904:	f000 f9d4 	bl	800acb0 <_printf_i>
 800a908:	e7eb      	b.n	800a8e2 <_svfiprintf_r+0x1c2>
 800a90a:	bf00      	nop
 800a90c:	0800b700 	.word	0x0800b700
 800a910:	0800b70a 	.word	0x0800b70a
 800a914:	00000000 	.word	0x00000000
 800a918:	0800a669 	.word	0x0800a669
 800a91c:	0800b706 	.word	0x0800b706

0800a920 <__sfputc_r>:
 800a920:	6893      	ldr	r3, [r2, #8]
 800a922:	b410      	push	{r4}
 800a924:	3b01      	subs	r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	6093      	str	r3, [r2, #8]
 800a92a:	da07      	bge.n	800a93c <__sfputc_r+0x1c>
 800a92c:	6994      	ldr	r4, [r2, #24]
 800a92e:	42a3      	cmp	r3, r4
 800a930:	db01      	blt.n	800a936 <__sfputc_r+0x16>
 800a932:	290a      	cmp	r1, #10
 800a934:	d102      	bne.n	800a93c <__sfputc_r+0x1c>
 800a936:	bc10      	pop	{r4}
 800a938:	f000 bb34 	b.w	800afa4 <__swbuf_r>
 800a93c:	6813      	ldr	r3, [r2, #0]
 800a93e:	1c58      	adds	r0, r3, #1
 800a940:	6010      	str	r0, [r2, #0]
 800a942:	7019      	strb	r1, [r3, #0]
 800a944:	4608      	mov	r0, r1
 800a946:	bc10      	pop	{r4}
 800a948:	4770      	bx	lr

0800a94a <__sfputs_r>:
 800a94a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94c:	4606      	mov	r6, r0
 800a94e:	460f      	mov	r7, r1
 800a950:	4614      	mov	r4, r2
 800a952:	18d5      	adds	r5, r2, r3
 800a954:	42ac      	cmp	r4, r5
 800a956:	d101      	bne.n	800a95c <__sfputs_r+0x12>
 800a958:	2000      	movs	r0, #0
 800a95a:	e007      	b.n	800a96c <__sfputs_r+0x22>
 800a95c:	463a      	mov	r2, r7
 800a95e:	4630      	mov	r0, r6
 800a960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a964:	f7ff ffdc 	bl	800a920 <__sfputc_r>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d1f3      	bne.n	800a954 <__sfputs_r+0xa>
 800a96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a970 <_vfiprintf_r>:
 800a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	460d      	mov	r5, r1
 800a976:	4614      	mov	r4, r2
 800a978:	4698      	mov	r8, r3
 800a97a:	4606      	mov	r6, r0
 800a97c:	b09d      	sub	sp, #116	; 0x74
 800a97e:	b118      	cbz	r0, 800a988 <_vfiprintf_r+0x18>
 800a980:	6983      	ldr	r3, [r0, #24]
 800a982:	b90b      	cbnz	r3, 800a988 <_vfiprintf_r+0x18>
 800a984:	f7ff fd76 	bl	800a474 <__sinit>
 800a988:	4b89      	ldr	r3, [pc, #548]	; (800abb0 <_vfiprintf_r+0x240>)
 800a98a:	429d      	cmp	r5, r3
 800a98c:	d11b      	bne.n	800a9c6 <_vfiprintf_r+0x56>
 800a98e:	6875      	ldr	r5, [r6, #4]
 800a990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a992:	07d9      	lsls	r1, r3, #31
 800a994:	d405      	bmi.n	800a9a2 <_vfiprintf_r+0x32>
 800a996:	89ab      	ldrh	r3, [r5, #12]
 800a998:	059a      	lsls	r2, r3, #22
 800a99a:	d402      	bmi.n	800a9a2 <_vfiprintf_r+0x32>
 800a99c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a99e:	f7ff fe07 	bl	800a5b0 <__retarget_lock_acquire_recursive>
 800a9a2:	89ab      	ldrh	r3, [r5, #12]
 800a9a4:	071b      	lsls	r3, r3, #28
 800a9a6:	d501      	bpl.n	800a9ac <_vfiprintf_r+0x3c>
 800a9a8:	692b      	ldr	r3, [r5, #16]
 800a9aa:	b9eb      	cbnz	r3, 800a9e8 <_vfiprintf_r+0x78>
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f000 fb5c 	bl	800b06c <__swsetup_r>
 800a9b4:	b1c0      	cbz	r0, 800a9e8 <_vfiprintf_r+0x78>
 800a9b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9b8:	07dc      	lsls	r4, r3, #31
 800a9ba:	d50e      	bpl.n	800a9da <_vfiprintf_r+0x6a>
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c0:	b01d      	add	sp, #116	; 0x74
 800a9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c6:	4b7b      	ldr	r3, [pc, #492]	; (800abb4 <_vfiprintf_r+0x244>)
 800a9c8:	429d      	cmp	r5, r3
 800a9ca:	d101      	bne.n	800a9d0 <_vfiprintf_r+0x60>
 800a9cc:	68b5      	ldr	r5, [r6, #8]
 800a9ce:	e7df      	b.n	800a990 <_vfiprintf_r+0x20>
 800a9d0:	4b79      	ldr	r3, [pc, #484]	; (800abb8 <_vfiprintf_r+0x248>)
 800a9d2:	429d      	cmp	r5, r3
 800a9d4:	bf08      	it	eq
 800a9d6:	68f5      	ldreq	r5, [r6, #12]
 800a9d8:	e7da      	b.n	800a990 <_vfiprintf_r+0x20>
 800a9da:	89ab      	ldrh	r3, [r5, #12]
 800a9dc:	0598      	lsls	r0, r3, #22
 800a9de:	d4ed      	bmi.n	800a9bc <_vfiprintf_r+0x4c>
 800a9e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9e2:	f7ff fde6 	bl	800a5b2 <__retarget_lock_release_recursive>
 800a9e6:	e7e9      	b.n	800a9bc <_vfiprintf_r+0x4c>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ec:	2320      	movs	r3, #32
 800a9ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9f2:	2330      	movs	r3, #48	; 0x30
 800a9f4:	f04f 0901 	mov.w	r9, #1
 800a9f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9fc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800abbc <_vfiprintf_r+0x24c>
 800aa00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa04:	4623      	mov	r3, r4
 800aa06:	469a      	mov	sl, r3
 800aa08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa0c:	b10a      	cbz	r2, 800aa12 <_vfiprintf_r+0xa2>
 800aa0e:	2a25      	cmp	r2, #37	; 0x25
 800aa10:	d1f9      	bne.n	800aa06 <_vfiprintf_r+0x96>
 800aa12:	ebba 0b04 	subs.w	fp, sl, r4
 800aa16:	d00b      	beq.n	800aa30 <_vfiprintf_r+0xc0>
 800aa18:	465b      	mov	r3, fp
 800aa1a:	4622      	mov	r2, r4
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	4630      	mov	r0, r6
 800aa20:	f7ff ff93 	bl	800a94a <__sfputs_r>
 800aa24:	3001      	adds	r0, #1
 800aa26:	f000 80aa 	beq.w	800ab7e <_vfiprintf_r+0x20e>
 800aa2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa2c:	445a      	add	r2, fp
 800aa2e:	9209      	str	r2, [sp, #36]	; 0x24
 800aa30:	f89a 3000 	ldrb.w	r3, [sl]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 80a2 	beq.w	800ab7e <_vfiprintf_r+0x20e>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa44:	f10a 0a01 	add.w	sl, sl, #1
 800aa48:	9304      	str	r3, [sp, #16]
 800aa4a:	9307      	str	r3, [sp, #28]
 800aa4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa50:	931a      	str	r3, [sp, #104]	; 0x68
 800aa52:	4654      	mov	r4, sl
 800aa54:	2205      	movs	r2, #5
 800aa56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa5a:	4858      	ldr	r0, [pc, #352]	; (800abbc <_vfiprintf_r+0x24c>)
 800aa5c:	f000 fcbc 	bl	800b3d8 <memchr>
 800aa60:	9a04      	ldr	r2, [sp, #16]
 800aa62:	b9d8      	cbnz	r0, 800aa9c <_vfiprintf_r+0x12c>
 800aa64:	06d1      	lsls	r1, r2, #27
 800aa66:	bf44      	itt	mi
 800aa68:	2320      	movmi	r3, #32
 800aa6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa6e:	0713      	lsls	r3, r2, #28
 800aa70:	bf44      	itt	mi
 800aa72:	232b      	movmi	r3, #43	; 0x2b
 800aa74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa78:	f89a 3000 	ldrb.w	r3, [sl]
 800aa7c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa7e:	d015      	beq.n	800aaac <_vfiprintf_r+0x13c>
 800aa80:	4654      	mov	r4, sl
 800aa82:	2000      	movs	r0, #0
 800aa84:	f04f 0c0a 	mov.w	ip, #10
 800aa88:	9a07      	ldr	r2, [sp, #28]
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa90:	3b30      	subs	r3, #48	; 0x30
 800aa92:	2b09      	cmp	r3, #9
 800aa94:	d94e      	bls.n	800ab34 <_vfiprintf_r+0x1c4>
 800aa96:	b1b0      	cbz	r0, 800aac6 <_vfiprintf_r+0x156>
 800aa98:	9207      	str	r2, [sp, #28]
 800aa9a:	e014      	b.n	800aac6 <_vfiprintf_r+0x156>
 800aa9c:	eba0 0308 	sub.w	r3, r0, r8
 800aaa0:	fa09 f303 	lsl.w	r3, r9, r3
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	46a2      	mov	sl, r4
 800aaa8:	9304      	str	r3, [sp, #16]
 800aaaa:	e7d2      	b.n	800aa52 <_vfiprintf_r+0xe2>
 800aaac:	9b03      	ldr	r3, [sp, #12]
 800aaae:	1d19      	adds	r1, r3, #4
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	9103      	str	r1, [sp, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	bfbb      	ittet	lt
 800aab8:	425b      	neglt	r3, r3
 800aaba:	f042 0202 	orrlt.w	r2, r2, #2
 800aabe:	9307      	strge	r3, [sp, #28]
 800aac0:	9307      	strlt	r3, [sp, #28]
 800aac2:	bfb8      	it	lt
 800aac4:	9204      	strlt	r2, [sp, #16]
 800aac6:	7823      	ldrb	r3, [r4, #0]
 800aac8:	2b2e      	cmp	r3, #46	; 0x2e
 800aaca:	d10c      	bne.n	800aae6 <_vfiprintf_r+0x176>
 800aacc:	7863      	ldrb	r3, [r4, #1]
 800aace:	2b2a      	cmp	r3, #42	; 0x2a
 800aad0:	d135      	bne.n	800ab3e <_vfiprintf_r+0x1ce>
 800aad2:	9b03      	ldr	r3, [sp, #12]
 800aad4:	3402      	adds	r4, #2
 800aad6:	1d1a      	adds	r2, r3, #4
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	9203      	str	r2, [sp, #12]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	bfb8      	it	lt
 800aae0:	f04f 33ff 	movlt.w	r3, #4294967295
 800aae4:	9305      	str	r3, [sp, #20]
 800aae6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800abcc <_vfiprintf_r+0x25c>
 800aaea:	2203      	movs	r2, #3
 800aaec:	4650      	mov	r0, sl
 800aaee:	7821      	ldrb	r1, [r4, #0]
 800aaf0:	f000 fc72 	bl	800b3d8 <memchr>
 800aaf4:	b140      	cbz	r0, 800ab08 <_vfiprintf_r+0x198>
 800aaf6:	2340      	movs	r3, #64	; 0x40
 800aaf8:	eba0 000a 	sub.w	r0, r0, sl
 800aafc:	fa03 f000 	lsl.w	r0, r3, r0
 800ab00:	9b04      	ldr	r3, [sp, #16]
 800ab02:	3401      	adds	r4, #1
 800ab04:	4303      	orrs	r3, r0
 800ab06:	9304      	str	r3, [sp, #16]
 800ab08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab0c:	2206      	movs	r2, #6
 800ab0e:	482c      	ldr	r0, [pc, #176]	; (800abc0 <_vfiprintf_r+0x250>)
 800ab10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab14:	f000 fc60 	bl	800b3d8 <memchr>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d03f      	beq.n	800ab9c <_vfiprintf_r+0x22c>
 800ab1c:	4b29      	ldr	r3, [pc, #164]	; (800abc4 <_vfiprintf_r+0x254>)
 800ab1e:	bb1b      	cbnz	r3, 800ab68 <_vfiprintf_r+0x1f8>
 800ab20:	9b03      	ldr	r3, [sp, #12]
 800ab22:	3307      	adds	r3, #7
 800ab24:	f023 0307 	bic.w	r3, r3, #7
 800ab28:	3308      	adds	r3, #8
 800ab2a:	9303      	str	r3, [sp, #12]
 800ab2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab2e:	443b      	add	r3, r7
 800ab30:	9309      	str	r3, [sp, #36]	; 0x24
 800ab32:	e767      	b.n	800aa04 <_vfiprintf_r+0x94>
 800ab34:	460c      	mov	r4, r1
 800ab36:	2001      	movs	r0, #1
 800ab38:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab3c:	e7a5      	b.n	800aa8a <_vfiprintf_r+0x11a>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	f04f 0c0a 	mov.w	ip, #10
 800ab44:	4619      	mov	r1, r3
 800ab46:	3401      	adds	r4, #1
 800ab48:	9305      	str	r3, [sp, #20]
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab50:	3a30      	subs	r2, #48	; 0x30
 800ab52:	2a09      	cmp	r2, #9
 800ab54:	d903      	bls.n	800ab5e <_vfiprintf_r+0x1ee>
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d0c5      	beq.n	800aae6 <_vfiprintf_r+0x176>
 800ab5a:	9105      	str	r1, [sp, #20]
 800ab5c:	e7c3      	b.n	800aae6 <_vfiprintf_r+0x176>
 800ab5e:	4604      	mov	r4, r0
 800ab60:	2301      	movs	r3, #1
 800ab62:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab66:	e7f0      	b.n	800ab4a <_vfiprintf_r+0x1da>
 800ab68:	ab03      	add	r3, sp, #12
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	462a      	mov	r2, r5
 800ab6e:	4630      	mov	r0, r6
 800ab70:	4b15      	ldr	r3, [pc, #84]	; (800abc8 <_vfiprintf_r+0x258>)
 800ab72:	a904      	add	r1, sp, #16
 800ab74:	f3af 8000 	nop.w
 800ab78:	4607      	mov	r7, r0
 800ab7a:	1c78      	adds	r0, r7, #1
 800ab7c:	d1d6      	bne.n	800ab2c <_vfiprintf_r+0x1bc>
 800ab7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab80:	07d9      	lsls	r1, r3, #31
 800ab82:	d405      	bmi.n	800ab90 <_vfiprintf_r+0x220>
 800ab84:	89ab      	ldrh	r3, [r5, #12]
 800ab86:	059a      	lsls	r2, r3, #22
 800ab88:	d402      	bmi.n	800ab90 <_vfiprintf_r+0x220>
 800ab8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab8c:	f7ff fd11 	bl	800a5b2 <__retarget_lock_release_recursive>
 800ab90:	89ab      	ldrh	r3, [r5, #12]
 800ab92:	065b      	lsls	r3, r3, #25
 800ab94:	f53f af12 	bmi.w	800a9bc <_vfiprintf_r+0x4c>
 800ab98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab9a:	e711      	b.n	800a9c0 <_vfiprintf_r+0x50>
 800ab9c:	ab03      	add	r3, sp, #12
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	462a      	mov	r2, r5
 800aba2:	4630      	mov	r0, r6
 800aba4:	4b08      	ldr	r3, [pc, #32]	; (800abc8 <_vfiprintf_r+0x258>)
 800aba6:	a904      	add	r1, sp, #16
 800aba8:	f000 f882 	bl	800acb0 <_printf_i>
 800abac:	e7e4      	b.n	800ab78 <_vfiprintf_r+0x208>
 800abae:	bf00      	nop
 800abb0:	0800b6c0 	.word	0x0800b6c0
 800abb4:	0800b6e0 	.word	0x0800b6e0
 800abb8:	0800b6a0 	.word	0x0800b6a0
 800abbc:	0800b700 	.word	0x0800b700
 800abc0:	0800b70a 	.word	0x0800b70a
 800abc4:	00000000 	.word	0x00000000
 800abc8:	0800a94b 	.word	0x0800a94b
 800abcc:	0800b706 	.word	0x0800b706

0800abd0 <_printf_common>:
 800abd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd4:	4616      	mov	r6, r2
 800abd6:	4699      	mov	r9, r3
 800abd8:	688a      	ldr	r2, [r1, #8]
 800abda:	690b      	ldr	r3, [r1, #16]
 800abdc:	4607      	mov	r7, r0
 800abde:	4293      	cmp	r3, r2
 800abe0:	bfb8      	it	lt
 800abe2:	4613      	movlt	r3, r2
 800abe4:	6033      	str	r3, [r6, #0]
 800abe6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abea:	460c      	mov	r4, r1
 800abec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abf0:	b10a      	cbz	r2, 800abf6 <_printf_common+0x26>
 800abf2:	3301      	adds	r3, #1
 800abf4:	6033      	str	r3, [r6, #0]
 800abf6:	6823      	ldr	r3, [r4, #0]
 800abf8:	0699      	lsls	r1, r3, #26
 800abfa:	bf42      	ittt	mi
 800abfc:	6833      	ldrmi	r3, [r6, #0]
 800abfe:	3302      	addmi	r3, #2
 800ac00:	6033      	strmi	r3, [r6, #0]
 800ac02:	6825      	ldr	r5, [r4, #0]
 800ac04:	f015 0506 	ands.w	r5, r5, #6
 800ac08:	d106      	bne.n	800ac18 <_printf_common+0x48>
 800ac0a:	f104 0a19 	add.w	sl, r4, #25
 800ac0e:	68e3      	ldr	r3, [r4, #12]
 800ac10:	6832      	ldr	r2, [r6, #0]
 800ac12:	1a9b      	subs	r3, r3, r2
 800ac14:	42ab      	cmp	r3, r5
 800ac16:	dc28      	bgt.n	800ac6a <_printf_common+0x9a>
 800ac18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac1c:	1e13      	subs	r3, r2, #0
 800ac1e:	6822      	ldr	r2, [r4, #0]
 800ac20:	bf18      	it	ne
 800ac22:	2301      	movne	r3, #1
 800ac24:	0692      	lsls	r2, r2, #26
 800ac26:	d42d      	bmi.n	800ac84 <_printf_common+0xb4>
 800ac28:	4649      	mov	r1, r9
 800ac2a:	4638      	mov	r0, r7
 800ac2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac30:	47c0      	blx	r8
 800ac32:	3001      	adds	r0, #1
 800ac34:	d020      	beq.n	800ac78 <_printf_common+0xa8>
 800ac36:	6823      	ldr	r3, [r4, #0]
 800ac38:	68e5      	ldr	r5, [r4, #12]
 800ac3a:	f003 0306 	and.w	r3, r3, #6
 800ac3e:	2b04      	cmp	r3, #4
 800ac40:	bf18      	it	ne
 800ac42:	2500      	movne	r5, #0
 800ac44:	6832      	ldr	r2, [r6, #0]
 800ac46:	f04f 0600 	mov.w	r6, #0
 800ac4a:	68a3      	ldr	r3, [r4, #8]
 800ac4c:	bf08      	it	eq
 800ac4e:	1aad      	subeq	r5, r5, r2
 800ac50:	6922      	ldr	r2, [r4, #16]
 800ac52:	bf08      	it	eq
 800ac54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	bfc4      	itt	gt
 800ac5c:	1a9b      	subgt	r3, r3, r2
 800ac5e:	18ed      	addgt	r5, r5, r3
 800ac60:	341a      	adds	r4, #26
 800ac62:	42b5      	cmp	r5, r6
 800ac64:	d11a      	bne.n	800ac9c <_printf_common+0xcc>
 800ac66:	2000      	movs	r0, #0
 800ac68:	e008      	b.n	800ac7c <_printf_common+0xac>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	4652      	mov	r2, sl
 800ac6e:	4649      	mov	r1, r9
 800ac70:	4638      	mov	r0, r7
 800ac72:	47c0      	blx	r8
 800ac74:	3001      	adds	r0, #1
 800ac76:	d103      	bne.n	800ac80 <_printf_common+0xb0>
 800ac78:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac80:	3501      	adds	r5, #1
 800ac82:	e7c4      	b.n	800ac0e <_printf_common+0x3e>
 800ac84:	2030      	movs	r0, #48	; 0x30
 800ac86:	18e1      	adds	r1, r4, r3
 800ac88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac8c:	1c5a      	adds	r2, r3, #1
 800ac8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac92:	4422      	add	r2, r4
 800ac94:	3302      	adds	r3, #2
 800ac96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac9a:	e7c5      	b.n	800ac28 <_printf_common+0x58>
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	4622      	mov	r2, r4
 800aca0:	4649      	mov	r1, r9
 800aca2:	4638      	mov	r0, r7
 800aca4:	47c0      	blx	r8
 800aca6:	3001      	adds	r0, #1
 800aca8:	d0e6      	beq.n	800ac78 <_printf_common+0xa8>
 800acaa:	3601      	adds	r6, #1
 800acac:	e7d9      	b.n	800ac62 <_printf_common+0x92>
	...

0800acb0 <_printf_i>:
 800acb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acb4:	460c      	mov	r4, r1
 800acb6:	7e27      	ldrb	r7, [r4, #24]
 800acb8:	4691      	mov	r9, r2
 800acba:	2f78      	cmp	r7, #120	; 0x78
 800acbc:	4680      	mov	r8, r0
 800acbe:	469a      	mov	sl, r3
 800acc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800acc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acc6:	d807      	bhi.n	800acd8 <_printf_i+0x28>
 800acc8:	2f62      	cmp	r7, #98	; 0x62
 800acca:	d80a      	bhi.n	800ace2 <_printf_i+0x32>
 800accc:	2f00      	cmp	r7, #0
 800acce:	f000 80d9 	beq.w	800ae84 <_printf_i+0x1d4>
 800acd2:	2f58      	cmp	r7, #88	; 0x58
 800acd4:	f000 80a4 	beq.w	800ae20 <_printf_i+0x170>
 800acd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800acdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ace0:	e03a      	b.n	800ad58 <_printf_i+0xa8>
 800ace2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ace6:	2b15      	cmp	r3, #21
 800ace8:	d8f6      	bhi.n	800acd8 <_printf_i+0x28>
 800acea:	a001      	add	r0, pc, #4	; (adr r0, 800acf0 <_printf_i+0x40>)
 800acec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800acf0:	0800ad49 	.word	0x0800ad49
 800acf4:	0800ad5d 	.word	0x0800ad5d
 800acf8:	0800acd9 	.word	0x0800acd9
 800acfc:	0800acd9 	.word	0x0800acd9
 800ad00:	0800acd9 	.word	0x0800acd9
 800ad04:	0800acd9 	.word	0x0800acd9
 800ad08:	0800ad5d 	.word	0x0800ad5d
 800ad0c:	0800acd9 	.word	0x0800acd9
 800ad10:	0800acd9 	.word	0x0800acd9
 800ad14:	0800acd9 	.word	0x0800acd9
 800ad18:	0800acd9 	.word	0x0800acd9
 800ad1c:	0800ae6b 	.word	0x0800ae6b
 800ad20:	0800ad8d 	.word	0x0800ad8d
 800ad24:	0800ae4d 	.word	0x0800ae4d
 800ad28:	0800acd9 	.word	0x0800acd9
 800ad2c:	0800acd9 	.word	0x0800acd9
 800ad30:	0800ae8d 	.word	0x0800ae8d
 800ad34:	0800acd9 	.word	0x0800acd9
 800ad38:	0800ad8d 	.word	0x0800ad8d
 800ad3c:	0800acd9 	.word	0x0800acd9
 800ad40:	0800acd9 	.word	0x0800acd9
 800ad44:	0800ae55 	.word	0x0800ae55
 800ad48:	680b      	ldr	r3, [r1, #0]
 800ad4a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ad4e:	1d1a      	adds	r2, r3, #4
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	600a      	str	r2, [r1, #0]
 800ad54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e0a4      	b.n	800aea6 <_printf_i+0x1f6>
 800ad5c:	6825      	ldr	r5, [r4, #0]
 800ad5e:	6808      	ldr	r0, [r1, #0]
 800ad60:	062e      	lsls	r6, r5, #24
 800ad62:	f100 0304 	add.w	r3, r0, #4
 800ad66:	d50a      	bpl.n	800ad7e <_printf_i+0xce>
 800ad68:	6805      	ldr	r5, [r0, #0]
 800ad6a:	600b      	str	r3, [r1, #0]
 800ad6c:	2d00      	cmp	r5, #0
 800ad6e:	da03      	bge.n	800ad78 <_printf_i+0xc8>
 800ad70:	232d      	movs	r3, #45	; 0x2d
 800ad72:	426d      	negs	r5, r5
 800ad74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad78:	230a      	movs	r3, #10
 800ad7a:	485e      	ldr	r0, [pc, #376]	; (800aef4 <_printf_i+0x244>)
 800ad7c:	e019      	b.n	800adb2 <_printf_i+0x102>
 800ad7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ad82:	6805      	ldr	r5, [r0, #0]
 800ad84:	600b      	str	r3, [r1, #0]
 800ad86:	bf18      	it	ne
 800ad88:	b22d      	sxthne	r5, r5
 800ad8a:	e7ef      	b.n	800ad6c <_printf_i+0xbc>
 800ad8c:	680b      	ldr	r3, [r1, #0]
 800ad8e:	6825      	ldr	r5, [r4, #0]
 800ad90:	1d18      	adds	r0, r3, #4
 800ad92:	6008      	str	r0, [r1, #0]
 800ad94:	0628      	lsls	r0, r5, #24
 800ad96:	d501      	bpl.n	800ad9c <_printf_i+0xec>
 800ad98:	681d      	ldr	r5, [r3, #0]
 800ad9a:	e002      	b.n	800ada2 <_printf_i+0xf2>
 800ad9c:	0669      	lsls	r1, r5, #25
 800ad9e:	d5fb      	bpl.n	800ad98 <_printf_i+0xe8>
 800ada0:	881d      	ldrh	r5, [r3, #0]
 800ada2:	2f6f      	cmp	r7, #111	; 0x6f
 800ada4:	bf0c      	ite	eq
 800ada6:	2308      	moveq	r3, #8
 800ada8:	230a      	movne	r3, #10
 800adaa:	4852      	ldr	r0, [pc, #328]	; (800aef4 <_printf_i+0x244>)
 800adac:	2100      	movs	r1, #0
 800adae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adb2:	6866      	ldr	r6, [r4, #4]
 800adb4:	2e00      	cmp	r6, #0
 800adb6:	bfa8      	it	ge
 800adb8:	6821      	ldrge	r1, [r4, #0]
 800adba:	60a6      	str	r6, [r4, #8]
 800adbc:	bfa4      	itt	ge
 800adbe:	f021 0104 	bicge.w	r1, r1, #4
 800adc2:	6021      	strge	r1, [r4, #0]
 800adc4:	b90d      	cbnz	r5, 800adca <_printf_i+0x11a>
 800adc6:	2e00      	cmp	r6, #0
 800adc8:	d04d      	beq.n	800ae66 <_printf_i+0x1b6>
 800adca:	4616      	mov	r6, r2
 800adcc:	fbb5 f1f3 	udiv	r1, r5, r3
 800add0:	fb03 5711 	mls	r7, r3, r1, r5
 800add4:	5dc7      	ldrb	r7, [r0, r7]
 800add6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800adda:	462f      	mov	r7, r5
 800addc:	42bb      	cmp	r3, r7
 800adde:	460d      	mov	r5, r1
 800ade0:	d9f4      	bls.n	800adcc <_printf_i+0x11c>
 800ade2:	2b08      	cmp	r3, #8
 800ade4:	d10b      	bne.n	800adfe <_printf_i+0x14e>
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	07df      	lsls	r7, r3, #31
 800adea:	d508      	bpl.n	800adfe <_printf_i+0x14e>
 800adec:	6923      	ldr	r3, [r4, #16]
 800adee:	6861      	ldr	r1, [r4, #4]
 800adf0:	4299      	cmp	r1, r3
 800adf2:	bfde      	ittt	le
 800adf4:	2330      	movle	r3, #48	; 0x30
 800adf6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adfa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800adfe:	1b92      	subs	r2, r2, r6
 800ae00:	6122      	str	r2, [r4, #16]
 800ae02:	464b      	mov	r3, r9
 800ae04:	4621      	mov	r1, r4
 800ae06:	4640      	mov	r0, r8
 800ae08:	f8cd a000 	str.w	sl, [sp]
 800ae0c:	aa03      	add	r2, sp, #12
 800ae0e:	f7ff fedf 	bl	800abd0 <_printf_common>
 800ae12:	3001      	adds	r0, #1
 800ae14:	d14c      	bne.n	800aeb0 <_printf_i+0x200>
 800ae16:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1a:	b004      	add	sp, #16
 800ae1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae20:	4834      	ldr	r0, [pc, #208]	; (800aef4 <_printf_i+0x244>)
 800ae22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae26:	680e      	ldr	r6, [r1, #0]
 800ae28:	6823      	ldr	r3, [r4, #0]
 800ae2a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ae2e:	061f      	lsls	r7, r3, #24
 800ae30:	600e      	str	r6, [r1, #0]
 800ae32:	d514      	bpl.n	800ae5e <_printf_i+0x1ae>
 800ae34:	07d9      	lsls	r1, r3, #31
 800ae36:	bf44      	itt	mi
 800ae38:	f043 0320 	orrmi.w	r3, r3, #32
 800ae3c:	6023      	strmi	r3, [r4, #0]
 800ae3e:	b91d      	cbnz	r5, 800ae48 <_printf_i+0x198>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	f023 0320 	bic.w	r3, r3, #32
 800ae46:	6023      	str	r3, [r4, #0]
 800ae48:	2310      	movs	r3, #16
 800ae4a:	e7af      	b.n	800adac <_printf_i+0xfc>
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	f043 0320 	orr.w	r3, r3, #32
 800ae52:	6023      	str	r3, [r4, #0]
 800ae54:	2378      	movs	r3, #120	; 0x78
 800ae56:	4828      	ldr	r0, [pc, #160]	; (800aef8 <_printf_i+0x248>)
 800ae58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae5c:	e7e3      	b.n	800ae26 <_printf_i+0x176>
 800ae5e:	065e      	lsls	r6, r3, #25
 800ae60:	bf48      	it	mi
 800ae62:	b2ad      	uxthmi	r5, r5
 800ae64:	e7e6      	b.n	800ae34 <_printf_i+0x184>
 800ae66:	4616      	mov	r6, r2
 800ae68:	e7bb      	b.n	800ade2 <_printf_i+0x132>
 800ae6a:	680b      	ldr	r3, [r1, #0]
 800ae6c:	6826      	ldr	r6, [r4, #0]
 800ae6e:	1d1d      	adds	r5, r3, #4
 800ae70:	6960      	ldr	r0, [r4, #20]
 800ae72:	600d      	str	r5, [r1, #0]
 800ae74:	0635      	lsls	r5, r6, #24
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	d501      	bpl.n	800ae7e <_printf_i+0x1ce>
 800ae7a:	6018      	str	r0, [r3, #0]
 800ae7c:	e002      	b.n	800ae84 <_printf_i+0x1d4>
 800ae7e:	0671      	lsls	r1, r6, #25
 800ae80:	d5fb      	bpl.n	800ae7a <_printf_i+0x1ca>
 800ae82:	8018      	strh	r0, [r3, #0]
 800ae84:	2300      	movs	r3, #0
 800ae86:	4616      	mov	r6, r2
 800ae88:	6123      	str	r3, [r4, #16]
 800ae8a:	e7ba      	b.n	800ae02 <_printf_i+0x152>
 800ae8c:	680b      	ldr	r3, [r1, #0]
 800ae8e:	1d1a      	adds	r2, r3, #4
 800ae90:	600a      	str	r2, [r1, #0]
 800ae92:	681e      	ldr	r6, [r3, #0]
 800ae94:	2100      	movs	r1, #0
 800ae96:	4630      	mov	r0, r6
 800ae98:	6862      	ldr	r2, [r4, #4]
 800ae9a:	f000 fa9d 	bl	800b3d8 <memchr>
 800ae9e:	b108      	cbz	r0, 800aea4 <_printf_i+0x1f4>
 800aea0:	1b80      	subs	r0, r0, r6
 800aea2:	6060      	str	r0, [r4, #4]
 800aea4:	6863      	ldr	r3, [r4, #4]
 800aea6:	6123      	str	r3, [r4, #16]
 800aea8:	2300      	movs	r3, #0
 800aeaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aeae:	e7a8      	b.n	800ae02 <_printf_i+0x152>
 800aeb0:	4632      	mov	r2, r6
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	4640      	mov	r0, r8
 800aeb6:	6923      	ldr	r3, [r4, #16]
 800aeb8:	47d0      	blx	sl
 800aeba:	3001      	adds	r0, #1
 800aebc:	d0ab      	beq.n	800ae16 <_printf_i+0x166>
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	079b      	lsls	r3, r3, #30
 800aec2:	d413      	bmi.n	800aeec <_printf_i+0x23c>
 800aec4:	68e0      	ldr	r0, [r4, #12]
 800aec6:	9b03      	ldr	r3, [sp, #12]
 800aec8:	4298      	cmp	r0, r3
 800aeca:	bfb8      	it	lt
 800aecc:	4618      	movlt	r0, r3
 800aece:	e7a4      	b.n	800ae1a <_printf_i+0x16a>
 800aed0:	2301      	movs	r3, #1
 800aed2:	4632      	mov	r2, r6
 800aed4:	4649      	mov	r1, r9
 800aed6:	4640      	mov	r0, r8
 800aed8:	47d0      	blx	sl
 800aeda:	3001      	adds	r0, #1
 800aedc:	d09b      	beq.n	800ae16 <_printf_i+0x166>
 800aede:	3501      	adds	r5, #1
 800aee0:	68e3      	ldr	r3, [r4, #12]
 800aee2:	9903      	ldr	r1, [sp, #12]
 800aee4:	1a5b      	subs	r3, r3, r1
 800aee6:	42ab      	cmp	r3, r5
 800aee8:	dcf2      	bgt.n	800aed0 <_printf_i+0x220>
 800aeea:	e7eb      	b.n	800aec4 <_printf_i+0x214>
 800aeec:	2500      	movs	r5, #0
 800aeee:	f104 0619 	add.w	r6, r4, #25
 800aef2:	e7f5      	b.n	800aee0 <_printf_i+0x230>
 800aef4:	0800b711 	.word	0x0800b711
 800aef8:	0800b722 	.word	0x0800b722

0800aefc <_sbrk_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	2300      	movs	r3, #0
 800af00:	4d05      	ldr	r5, [pc, #20]	; (800af18 <_sbrk_r+0x1c>)
 800af02:	4604      	mov	r4, r0
 800af04:	4608      	mov	r0, r1
 800af06:	602b      	str	r3, [r5, #0]
 800af08:	f7f6 fc14 	bl	8001734 <_sbrk>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d102      	bne.n	800af16 <_sbrk_r+0x1a>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	b103      	cbz	r3, 800af16 <_sbrk_r+0x1a>
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	bd38      	pop	{r3, r4, r5, pc}
 800af18:	200011bc 	.word	0x200011bc

0800af1c <__sread>:
 800af1c:	b510      	push	{r4, lr}
 800af1e:	460c      	mov	r4, r1
 800af20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af24:	f000 fafe 	bl	800b524 <_read_r>
 800af28:	2800      	cmp	r0, #0
 800af2a:	bfab      	itete	ge
 800af2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af2e:	89a3      	ldrhlt	r3, [r4, #12]
 800af30:	181b      	addge	r3, r3, r0
 800af32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af36:	bfac      	ite	ge
 800af38:	6563      	strge	r3, [r4, #84]	; 0x54
 800af3a:	81a3      	strhlt	r3, [r4, #12]
 800af3c:	bd10      	pop	{r4, pc}

0800af3e <__swrite>:
 800af3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af42:	461f      	mov	r7, r3
 800af44:	898b      	ldrh	r3, [r1, #12]
 800af46:	4605      	mov	r5, r0
 800af48:	05db      	lsls	r3, r3, #23
 800af4a:	460c      	mov	r4, r1
 800af4c:	4616      	mov	r6, r2
 800af4e:	d505      	bpl.n	800af5c <__swrite+0x1e>
 800af50:	2302      	movs	r3, #2
 800af52:	2200      	movs	r2, #0
 800af54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af58:	f000 f9c8 	bl	800b2ec <_lseek_r>
 800af5c:	89a3      	ldrh	r3, [r4, #12]
 800af5e:	4632      	mov	r2, r6
 800af60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af64:	81a3      	strh	r3, [r4, #12]
 800af66:	4628      	mov	r0, r5
 800af68:	463b      	mov	r3, r7
 800af6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af72:	f000 b869 	b.w	800b048 <_write_r>

0800af76 <__sseek>:
 800af76:	b510      	push	{r4, lr}
 800af78:	460c      	mov	r4, r1
 800af7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af7e:	f000 f9b5 	bl	800b2ec <_lseek_r>
 800af82:	1c43      	adds	r3, r0, #1
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	bf15      	itete	ne
 800af88:	6560      	strne	r0, [r4, #84]	; 0x54
 800af8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af92:	81a3      	strheq	r3, [r4, #12]
 800af94:	bf18      	it	ne
 800af96:	81a3      	strhne	r3, [r4, #12]
 800af98:	bd10      	pop	{r4, pc}

0800af9a <__sclose>:
 800af9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af9e:	f000 b8d3 	b.w	800b148 <_close_r>
	...

0800afa4 <__swbuf_r>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	460e      	mov	r6, r1
 800afa8:	4614      	mov	r4, r2
 800afaa:	4605      	mov	r5, r0
 800afac:	b118      	cbz	r0, 800afb6 <__swbuf_r+0x12>
 800afae:	6983      	ldr	r3, [r0, #24]
 800afb0:	b90b      	cbnz	r3, 800afb6 <__swbuf_r+0x12>
 800afb2:	f7ff fa5f 	bl	800a474 <__sinit>
 800afb6:	4b21      	ldr	r3, [pc, #132]	; (800b03c <__swbuf_r+0x98>)
 800afb8:	429c      	cmp	r4, r3
 800afba:	d12b      	bne.n	800b014 <__swbuf_r+0x70>
 800afbc:	686c      	ldr	r4, [r5, #4]
 800afbe:	69a3      	ldr	r3, [r4, #24]
 800afc0:	60a3      	str	r3, [r4, #8]
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	071a      	lsls	r2, r3, #28
 800afc6:	d52f      	bpl.n	800b028 <__swbuf_r+0x84>
 800afc8:	6923      	ldr	r3, [r4, #16]
 800afca:	b36b      	cbz	r3, 800b028 <__swbuf_r+0x84>
 800afcc:	6923      	ldr	r3, [r4, #16]
 800afce:	6820      	ldr	r0, [r4, #0]
 800afd0:	b2f6      	uxtb	r6, r6
 800afd2:	1ac0      	subs	r0, r0, r3
 800afd4:	6963      	ldr	r3, [r4, #20]
 800afd6:	4637      	mov	r7, r6
 800afd8:	4283      	cmp	r3, r0
 800afda:	dc04      	bgt.n	800afe6 <__swbuf_r+0x42>
 800afdc:	4621      	mov	r1, r4
 800afde:	4628      	mov	r0, r5
 800afe0:	f000 f948 	bl	800b274 <_fflush_r>
 800afe4:	bb30      	cbnz	r0, 800b034 <__swbuf_r+0x90>
 800afe6:	68a3      	ldr	r3, [r4, #8]
 800afe8:	3001      	adds	r0, #1
 800afea:	3b01      	subs	r3, #1
 800afec:	60a3      	str	r3, [r4, #8]
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	1c5a      	adds	r2, r3, #1
 800aff2:	6022      	str	r2, [r4, #0]
 800aff4:	701e      	strb	r6, [r3, #0]
 800aff6:	6963      	ldr	r3, [r4, #20]
 800aff8:	4283      	cmp	r3, r0
 800affa:	d004      	beq.n	800b006 <__swbuf_r+0x62>
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	07db      	lsls	r3, r3, #31
 800b000:	d506      	bpl.n	800b010 <__swbuf_r+0x6c>
 800b002:	2e0a      	cmp	r6, #10
 800b004:	d104      	bne.n	800b010 <__swbuf_r+0x6c>
 800b006:	4621      	mov	r1, r4
 800b008:	4628      	mov	r0, r5
 800b00a:	f000 f933 	bl	800b274 <_fflush_r>
 800b00e:	b988      	cbnz	r0, 800b034 <__swbuf_r+0x90>
 800b010:	4638      	mov	r0, r7
 800b012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b014:	4b0a      	ldr	r3, [pc, #40]	; (800b040 <__swbuf_r+0x9c>)
 800b016:	429c      	cmp	r4, r3
 800b018:	d101      	bne.n	800b01e <__swbuf_r+0x7a>
 800b01a:	68ac      	ldr	r4, [r5, #8]
 800b01c:	e7cf      	b.n	800afbe <__swbuf_r+0x1a>
 800b01e:	4b09      	ldr	r3, [pc, #36]	; (800b044 <__swbuf_r+0xa0>)
 800b020:	429c      	cmp	r4, r3
 800b022:	bf08      	it	eq
 800b024:	68ec      	ldreq	r4, [r5, #12]
 800b026:	e7ca      	b.n	800afbe <__swbuf_r+0x1a>
 800b028:	4621      	mov	r1, r4
 800b02a:	4628      	mov	r0, r5
 800b02c:	f000 f81e 	bl	800b06c <__swsetup_r>
 800b030:	2800      	cmp	r0, #0
 800b032:	d0cb      	beq.n	800afcc <__swbuf_r+0x28>
 800b034:	f04f 37ff 	mov.w	r7, #4294967295
 800b038:	e7ea      	b.n	800b010 <__swbuf_r+0x6c>
 800b03a:	bf00      	nop
 800b03c:	0800b6c0 	.word	0x0800b6c0
 800b040:	0800b6e0 	.word	0x0800b6e0
 800b044:	0800b6a0 	.word	0x0800b6a0

0800b048 <_write_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4604      	mov	r4, r0
 800b04c:	4608      	mov	r0, r1
 800b04e:	4611      	mov	r1, r2
 800b050:	2200      	movs	r2, #0
 800b052:	4d05      	ldr	r5, [pc, #20]	; (800b068 <_write_r+0x20>)
 800b054:	602a      	str	r2, [r5, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	f7f5 f9fa 	bl	8000450 <_write>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_write_r+0x1e>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_write_r+0x1e>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	200011bc 	.word	0x200011bc

0800b06c <__swsetup_r>:
 800b06c:	4b32      	ldr	r3, [pc, #200]	; (800b138 <__swsetup_r+0xcc>)
 800b06e:	b570      	push	{r4, r5, r6, lr}
 800b070:	681d      	ldr	r5, [r3, #0]
 800b072:	4606      	mov	r6, r0
 800b074:	460c      	mov	r4, r1
 800b076:	b125      	cbz	r5, 800b082 <__swsetup_r+0x16>
 800b078:	69ab      	ldr	r3, [r5, #24]
 800b07a:	b913      	cbnz	r3, 800b082 <__swsetup_r+0x16>
 800b07c:	4628      	mov	r0, r5
 800b07e:	f7ff f9f9 	bl	800a474 <__sinit>
 800b082:	4b2e      	ldr	r3, [pc, #184]	; (800b13c <__swsetup_r+0xd0>)
 800b084:	429c      	cmp	r4, r3
 800b086:	d10f      	bne.n	800b0a8 <__swsetup_r+0x3c>
 800b088:	686c      	ldr	r4, [r5, #4]
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b090:	0719      	lsls	r1, r3, #28
 800b092:	d42c      	bmi.n	800b0ee <__swsetup_r+0x82>
 800b094:	06dd      	lsls	r5, r3, #27
 800b096:	d411      	bmi.n	800b0bc <__swsetup_r+0x50>
 800b098:	2309      	movs	r3, #9
 800b09a:	6033      	str	r3, [r6, #0]
 800b09c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a4:	81a3      	strh	r3, [r4, #12]
 800b0a6:	e03e      	b.n	800b126 <__swsetup_r+0xba>
 800b0a8:	4b25      	ldr	r3, [pc, #148]	; (800b140 <__swsetup_r+0xd4>)
 800b0aa:	429c      	cmp	r4, r3
 800b0ac:	d101      	bne.n	800b0b2 <__swsetup_r+0x46>
 800b0ae:	68ac      	ldr	r4, [r5, #8]
 800b0b0:	e7eb      	b.n	800b08a <__swsetup_r+0x1e>
 800b0b2:	4b24      	ldr	r3, [pc, #144]	; (800b144 <__swsetup_r+0xd8>)
 800b0b4:	429c      	cmp	r4, r3
 800b0b6:	bf08      	it	eq
 800b0b8:	68ec      	ldreq	r4, [r5, #12]
 800b0ba:	e7e6      	b.n	800b08a <__swsetup_r+0x1e>
 800b0bc:	0758      	lsls	r0, r3, #29
 800b0be:	d512      	bpl.n	800b0e6 <__swsetup_r+0x7a>
 800b0c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0c2:	b141      	cbz	r1, 800b0d6 <__swsetup_r+0x6a>
 800b0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	d002      	beq.n	800b0d2 <__swsetup_r+0x66>
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f000 f9b7 	bl	800b440 <_free_r>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	6363      	str	r3, [r4, #52]	; 0x34
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0dc:	81a3      	strh	r3, [r4, #12]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	6063      	str	r3, [r4, #4]
 800b0e2:	6923      	ldr	r3, [r4, #16]
 800b0e4:	6023      	str	r3, [r4, #0]
 800b0e6:	89a3      	ldrh	r3, [r4, #12]
 800b0e8:	f043 0308 	orr.w	r3, r3, #8
 800b0ec:	81a3      	strh	r3, [r4, #12]
 800b0ee:	6923      	ldr	r3, [r4, #16]
 800b0f0:	b94b      	cbnz	r3, 800b106 <__swsetup_r+0x9a>
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0fc:	d003      	beq.n	800b106 <__swsetup_r+0x9a>
 800b0fe:	4621      	mov	r1, r4
 800b100:	4630      	mov	r0, r6
 800b102:	f000 f929 	bl	800b358 <__smakebuf_r>
 800b106:	89a0      	ldrh	r0, [r4, #12]
 800b108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b10c:	f010 0301 	ands.w	r3, r0, #1
 800b110:	d00a      	beq.n	800b128 <__swsetup_r+0xbc>
 800b112:	2300      	movs	r3, #0
 800b114:	60a3      	str	r3, [r4, #8]
 800b116:	6963      	ldr	r3, [r4, #20]
 800b118:	425b      	negs	r3, r3
 800b11a:	61a3      	str	r3, [r4, #24]
 800b11c:	6923      	ldr	r3, [r4, #16]
 800b11e:	b943      	cbnz	r3, 800b132 <__swsetup_r+0xc6>
 800b120:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b124:	d1ba      	bne.n	800b09c <__swsetup_r+0x30>
 800b126:	bd70      	pop	{r4, r5, r6, pc}
 800b128:	0781      	lsls	r1, r0, #30
 800b12a:	bf58      	it	pl
 800b12c:	6963      	ldrpl	r3, [r4, #20]
 800b12e:	60a3      	str	r3, [r4, #8]
 800b130:	e7f4      	b.n	800b11c <__swsetup_r+0xb0>
 800b132:	2000      	movs	r0, #0
 800b134:	e7f7      	b.n	800b126 <__swsetup_r+0xba>
 800b136:	bf00      	nop
 800b138:	20000190 	.word	0x20000190
 800b13c:	0800b6c0 	.word	0x0800b6c0
 800b140:	0800b6e0 	.word	0x0800b6e0
 800b144:	0800b6a0 	.word	0x0800b6a0

0800b148 <_close_r>:
 800b148:	b538      	push	{r3, r4, r5, lr}
 800b14a:	2300      	movs	r3, #0
 800b14c:	4d05      	ldr	r5, [pc, #20]	; (800b164 <_close_r+0x1c>)
 800b14e:	4604      	mov	r4, r0
 800b150:	4608      	mov	r0, r1
 800b152:	602b      	str	r3, [r5, #0]
 800b154:	f7f6 fabd 	bl	80016d2 <_close>
 800b158:	1c43      	adds	r3, r0, #1
 800b15a:	d102      	bne.n	800b162 <_close_r+0x1a>
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	b103      	cbz	r3, 800b162 <_close_r+0x1a>
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	200011bc 	.word	0x200011bc

0800b168 <__sflush_r>:
 800b168:	898a      	ldrh	r2, [r1, #12]
 800b16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b16e:	4605      	mov	r5, r0
 800b170:	0710      	lsls	r0, r2, #28
 800b172:	460c      	mov	r4, r1
 800b174:	d458      	bmi.n	800b228 <__sflush_r+0xc0>
 800b176:	684b      	ldr	r3, [r1, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	dc05      	bgt.n	800b188 <__sflush_r+0x20>
 800b17c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b17e:	2b00      	cmp	r3, #0
 800b180:	dc02      	bgt.n	800b188 <__sflush_r+0x20>
 800b182:	2000      	movs	r0, #0
 800b184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b18a:	2e00      	cmp	r6, #0
 800b18c:	d0f9      	beq.n	800b182 <__sflush_r+0x1a>
 800b18e:	2300      	movs	r3, #0
 800b190:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b194:	682f      	ldr	r7, [r5, #0]
 800b196:	602b      	str	r3, [r5, #0]
 800b198:	d032      	beq.n	800b200 <__sflush_r+0x98>
 800b19a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b19c:	89a3      	ldrh	r3, [r4, #12]
 800b19e:	075a      	lsls	r2, r3, #29
 800b1a0:	d505      	bpl.n	800b1ae <__sflush_r+0x46>
 800b1a2:	6863      	ldr	r3, [r4, #4]
 800b1a4:	1ac0      	subs	r0, r0, r3
 800b1a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1a8:	b10b      	cbz	r3, 800b1ae <__sflush_r+0x46>
 800b1aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1ac:	1ac0      	subs	r0, r0, r3
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	6a21      	ldr	r1, [r4, #32]
 800b1b8:	47b0      	blx	r6
 800b1ba:	1c43      	adds	r3, r0, #1
 800b1bc:	89a3      	ldrh	r3, [r4, #12]
 800b1be:	d106      	bne.n	800b1ce <__sflush_r+0x66>
 800b1c0:	6829      	ldr	r1, [r5, #0]
 800b1c2:	291d      	cmp	r1, #29
 800b1c4:	d82c      	bhi.n	800b220 <__sflush_r+0xb8>
 800b1c6:	4a2a      	ldr	r2, [pc, #168]	; (800b270 <__sflush_r+0x108>)
 800b1c8:	40ca      	lsrs	r2, r1
 800b1ca:	07d6      	lsls	r6, r2, #31
 800b1cc:	d528      	bpl.n	800b220 <__sflush_r+0xb8>
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	6062      	str	r2, [r4, #4]
 800b1d2:	6922      	ldr	r2, [r4, #16]
 800b1d4:	04d9      	lsls	r1, r3, #19
 800b1d6:	6022      	str	r2, [r4, #0]
 800b1d8:	d504      	bpl.n	800b1e4 <__sflush_r+0x7c>
 800b1da:	1c42      	adds	r2, r0, #1
 800b1dc:	d101      	bne.n	800b1e2 <__sflush_r+0x7a>
 800b1de:	682b      	ldr	r3, [r5, #0]
 800b1e0:	b903      	cbnz	r3, 800b1e4 <__sflush_r+0x7c>
 800b1e2:	6560      	str	r0, [r4, #84]	; 0x54
 800b1e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1e6:	602f      	str	r7, [r5, #0]
 800b1e8:	2900      	cmp	r1, #0
 800b1ea:	d0ca      	beq.n	800b182 <__sflush_r+0x1a>
 800b1ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1f0:	4299      	cmp	r1, r3
 800b1f2:	d002      	beq.n	800b1fa <__sflush_r+0x92>
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	f000 f923 	bl	800b440 <_free_r>
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	6360      	str	r0, [r4, #52]	; 0x34
 800b1fe:	e7c1      	b.n	800b184 <__sflush_r+0x1c>
 800b200:	6a21      	ldr	r1, [r4, #32]
 800b202:	2301      	movs	r3, #1
 800b204:	4628      	mov	r0, r5
 800b206:	47b0      	blx	r6
 800b208:	1c41      	adds	r1, r0, #1
 800b20a:	d1c7      	bne.n	800b19c <__sflush_r+0x34>
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d0c4      	beq.n	800b19c <__sflush_r+0x34>
 800b212:	2b1d      	cmp	r3, #29
 800b214:	d001      	beq.n	800b21a <__sflush_r+0xb2>
 800b216:	2b16      	cmp	r3, #22
 800b218:	d101      	bne.n	800b21e <__sflush_r+0xb6>
 800b21a:	602f      	str	r7, [r5, #0]
 800b21c:	e7b1      	b.n	800b182 <__sflush_r+0x1a>
 800b21e:	89a3      	ldrh	r3, [r4, #12]
 800b220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b224:	81a3      	strh	r3, [r4, #12]
 800b226:	e7ad      	b.n	800b184 <__sflush_r+0x1c>
 800b228:	690f      	ldr	r7, [r1, #16]
 800b22a:	2f00      	cmp	r7, #0
 800b22c:	d0a9      	beq.n	800b182 <__sflush_r+0x1a>
 800b22e:	0793      	lsls	r3, r2, #30
 800b230:	bf18      	it	ne
 800b232:	2300      	movne	r3, #0
 800b234:	680e      	ldr	r6, [r1, #0]
 800b236:	bf08      	it	eq
 800b238:	694b      	ldreq	r3, [r1, #20]
 800b23a:	eba6 0807 	sub.w	r8, r6, r7
 800b23e:	600f      	str	r7, [r1, #0]
 800b240:	608b      	str	r3, [r1, #8]
 800b242:	f1b8 0f00 	cmp.w	r8, #0
 800b246:	dd9c      	ble.n	800b182 <__sflush_r+0x1a>
 800b248:	4643      	mov	r3, r8
 800b24a:	463a      	mov	r2, r7
 800b24c:	4628      	mov	r0, r5
 800b24e:	6a21      	ldr	r1, [r4, #32]
 800b250:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b252:	47b0      	blx	r6
 800b254:	2800      	cmp	r0, #0
 800b256:	dc06      	bgt.n	800b266 <__sflush_r+0xfe>
 800b258:	89a3      	ldrh	r3, [r4, #12]
 800b25a:	f04f 30ff 	mov.w	r0, #4294967295
 800b25e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b262:	81a3      	strh	r3, [r4, #12]
 800b264:	e78e      	b.n	800b184 <__sflush_r+0x1c>
 800b266:	4407      	add	r7, r0
 800b268:	eba8 0800 	sub.w	r8, r8, r0
 800b26c:	e7e9      	b.n	800b242 <__sflush_r+0xda>
 800b26e:	bf00      	nop
 800b270:	20400001 	.word	0x20400001

0800b274 <_fflush_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	690b      	ldr	r3, [r1, #16]
 800b278:	4605      	mov	r5, r0
 800b27a:	460c      	mov	r4, r1
 800b27c:	b913      	cbnz	r3, 800b284 <_fflush_r+0x10>
 800b27e:	2500      	movs	r5, #0
 800b280:	4628      	mov	r0, r5
 800b282:	bd38      	pop	{r3, r4, r5, pc}
 800b284:	b118      	cbz	r0, 800b28e <_fflush_r+0x1a>
 800b286:	6983      	ldr	r3, [r0, #24]
 800b288:	b90b      	cbnz	r3, 800b28e <_fflush_r+0x1a>
 800b28a:	f7ff f8f3 	bl	800a474 <__sinit>
 800b28e:	4b14      	ldr	r3, [pc, #80]	; (800b2e0 <_fflush_r+0x6c>)
 800b290:	429c      	cmp	r4, r3
 800b292:	d11b      	bne.n	800b2cc <_fflush_r+0x58>
 800b294:	686c      	ldr	r4, [r5, #4]
 800b296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d0ef      	beq.n	800b27e <_fflush_r+0xa>
 800b29e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2a0:	07d0      	lsls	r0, r2, #31
 800b2a2:	d404      	bmi.n	800b2ae <_fflush_r+0x3a>
 800b2a4:	0599      	lsls	r1, r3, #22
 800b2a6:	d402      	bmi.n	800b2ae <_fflush_r+0x3a>
 800b2a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2aa:	f7ff f981 	bl	800a5b0 <__retarget_lock_acquire_recursive>
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	4621      	mov	r1, r4
 800b2b2:	f7ff ff59 	bl	800b168 <__sflush_r>
 800b2b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2b8:	4605      	mov	r5, r0
 800b2ba:	07da      	lsls	r2, r3, #31
 800b2bc:	d4e0      	bmi.n	800b280 <_fflush_r+0xc>
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	059b      	lsls	r3, r3, #22
 800b2c2:	d4dd      	bmi.n	800b280 <_fflush_r+0xc>
 800b2c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2c6:	f7ff f974 	bl	800a5b2 <__retarget_lock_release_recursive>
 800b2ca:	e7d9      	b.n	800b280 <_fflush_r+0xc>
 800b2cc:	4b05      	ldr	r3, [pc, #20]	; (800b2e4 <_fflush_r+0x70>)
 800b2ce:	429c      	cmp	r4, r3
 800b2d0:	d101      	bne.n	800b2d6 <_fflush_r+0x62>
 800b2d2:	68ac      	ldr	r4, [r5, #8]
 800b2d4:	e7df      	b.n	800b296 <_fflush_r+0x22>
 800b2d6:	4b04      	ldr	r3, [pc, #16]	; (800b2e8 <_fflush_r+0x74>)
 800b2d8:	429c      	cmp	r4, r3
 800b2da:	bf08      	it	eq
 800b2dc:	68ec      	ldreq	r4, [r5, #12]
 800b2de:	e7da      	b.n	800b296 <_fflush_r+0x22>
 800b2e0:	0800b6c0 	.word	0x0800b6c0
 800b2e4:	0800b6e0 	.word	0x0800b6e0
 800b2e8:	0800b6a0 	.word	0x0800b6a0

0800b2ec <_lseek_r>:
 800b2ec:	b538      	push	{r3, r4, r5, lr}
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	4608      	mov	r0, r1
 800b2f2:	4611      	mov	r1, r2
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	4d05      	ldr	r5, [pc, #20]	; (800b30c <_lseek_r+0x20>)
 800b2f8:	602a      	str	r2, [r5, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	f7f6 fa0d 	bl	800171a <_lseek>
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	d102      	bne.n	800b30a <_lseek_r+0x1e>
 800b304:	682b      	ldr	r3, [r5, #0]
 800b306:	b103      	cbz	r3, 800b30a <_lseek_r+0x1e>
 800b308:	6023      	str	r3, [r4, #0]
 800b30a:	bd38      	pop	{r3, r4, r5, pc}
 800b30c:	200011bc 	.word	0x200011bc

0800b310 <__swhatbuf_r>:
 800b310:	b570      	push	{r4, r5, r6, lr}
 800b312:	460e      	mov	r6, r1
 800b314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b318:	4614      	mov	r4, r2
 800b31a:	2900      	cmp	r1, #0
 800b31c:	461d      	mov	r5, r3
 800b31e:	b096      	sub	sp, #88	; 0x58
 800b320:	da07      	bge.n	800b332 <__swhatbuf_r+0x22>
 800b322:	2300      	movs	r3, #0
 800b324:	602b      	str	r3, [r5, #0]
 800b326:	89b3      	ldrh	r3, [r6, #12]
 800b328:	061a      	lsls	r2, r3, #24
 800b32a:	d410      	bmi.n	800b34e <__swhatbuf_r+0x3e>
 800b32c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b330:	e00e      	b.n	800b350 <__swhatbuf_r+0x40>
 800b332:	466a      	mov	r2, sp
 800b334:	f000 f908 	bl	800b548 <_fstat_r>
 800b338:	2800      	cmp	r0, #0
 800b33a:	dbf2      	blt.n	800b322 <__swhatbuf_r+0x12>
 800b33c:	9a01      	ldr	r2, [sp, #4]
 800b33e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b342:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b346:	425a      	negs	r2, r3
 800b348:	415a      	adcs	r2, r3
 800b34a:	602a      	str	r2, [r5, #0]
 800b34c:	e7ee      	b.n	800b32c <__swhatbuf_r+0x1c>
 800b34e:	2340      	movs	r3, #64	; 0x40
 800b350:	2000      	movs	r0, #0
 800b352:	6023      	str	r3, [r4, #0]
 800b354:	b016      	add	sp, #88	; 0x58
 800b356:	bd70      	pop	{r4, r5, r6, pc}

0800b358 <__smakebuf_r>:
 800b358:	898b      	ldrh	r3, [r1, #12]
 800b35a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b35c:	079d      	lsls	r5, r3, #30
 800b35e:	4606      	mov	r6, r0
 800b360:	460c      	mov	r4, r1
 800b362:	d507      	bpl.n	800b374 <__smakebuf_r+0x1c>
 800b364:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b368:	6023      	str	r3, [r4, #0]
 800b36a:	6123      	str	r3, [r4, #16]
 800b36c:	2301      	movs	r3, #1
 800b36e:	6163      	str	r3, [r4, #20]
 800b370:	b002      	add	sp, #8
 800b372:	bd70      	pop	{r4, r5, r6, pc}
 800b374:	466a      	mov	r2, sp
 800b376:	ab01      	add	r3, sp, #4
 800b378:	f7ff ffca 	bl	800b310 <__swhatbuf_r>
 800b37c:	9900      	ldr	r1, [sp, #0]
 800b37e:	4605      	mov	r5, r0
 800b380:	4630      	mov	r0, r6
 800b382:	f7ff f917 	bl	800a5b4 <_malloc_r>
 800b386:	b948      	cbnz	r0, 800b39c <__smakebuf_r+0x44>
 800b388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b38c:	059a      	lsls	r2, r3, #22
 800b38e:	d4ef      	bmi.n	800b370 <__smakebuf_r+0x18>
 800b390:	f023 0303 	bic.w	r3, r3, #3
 800b394:	f043 0302 	orr.w	r3, r3, #2
 800b398:	81a3      	strh	r3, [r4, #12]
 800b39a:	e7e3      	b.n	800b364 <__smakebuf_r+0xc>
 800b39c:	4b0d      	ldr	r3, [pc, #52]	; (800b3d4 <__smakebuf_r+0x7c>)
 800b39e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	6020      	str	r0, [r4, #0]
 800b3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3a8:	81a3      	strh	r3, [r4, #12]
 800b3aa:	9b00      	ldr	r3, [sp, #0]
 800b3ac:	6120      	str	r0, [r4, #16]
 800b3ae:	6163      	str	r3, [r4, #20]
 800b3b0:	9b01      	ldr	r3, [sp, #4]
 800b3b2:	b15b      	cbz	r3, 800b3cc <__smakebuf_r+0x74>
 800b3b4:	4630      	mov	r0, r6
 800b3b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3ba:	f000 f8d7 	bl	800b56c <_isatty_r>
 800b3be:	b128      	cbz	r0, 800b3cc <__smakebuf_r+0x74>
 800b3c0:	89a3      	ldrh	r3, [r4, #12]
 800b3c2:	f023 0303 	bic.w	r3, r3, #3
 800b3c6:	f043 0301 	orr.w	r3, r3, #1
 800b3ca:	81a3      	strh	r3, [r4, #12]
 800b3cc:	89a0      	ldrh	r0, [r4, #12]
 800b3ce:	4305      	orrs	r5, r0
 800b3d0:	81a5      	strh	r5, [r4, #12]
 800b3d2:	e7cd      	b.n	800b370 <__smakebuf_r+0x18>
 800b3d4:	0800a40d 	.word	0x0800a40d

0800b3d8 <memchr>:
 800b3d8:	4603      	mov	r3, r0
 800b3da:	b510      	push	{r4, lr}
 800b3dc:	b2c9      	uxtb	r1, r1
 800b3de:	4402      	add	r2, r0
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	d101      	bne.n	800b3ea <memchr+0x12>
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	e003      	b.n	800b3f2 <memchr+0x1a>
 800b3ea:	7804      	ldrb	r4, [r0, #0]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	428c      	cmp	r4, r1
 800b3f0:	d1f6      	bne.n	800b3e0 <memchr+0x8>
 800b3f2:	bd10      	pop	{r4, pc}

0800b3f4 <memmove>:
 800b3f4:	4288      	cmp	r0, r1
 800b3f6:	b510      	push	{r4, lr}
 800b3f8:	eb01 0402 	add.w	r4, r1, r2
 800b3fc:	d902      	bls.n	800b404 <memmove+0x10>
 800b3fe:	4284      	cmp	r4, r0
 800b400:	4623      	mov	r3, r4
 800b402:	d807      	bhi.n	800b414 <memmove+0x20>
 800b404:	1e43      	subs	r3, r0, #1
 800b406:	42a1      	cmp	r1, r4
 800b408:	d008      	beq.n	800b41c <memmove+0x28>
 800b40a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b40e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b412:	e7f8      	b.n	800b406 <memmove+0x12>
 800b414:	4601      	mov	r1, r0
 800b416:	4402      	add	r2, r0
 800b418:	428a      	cmp	r2, r1
 800b41a:	d100      	bne.n	800b41e <memmove+0x2a>
 800b41c:	bd10      	pop	{r4, pc}
 800b41e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b426:	e7f7      	b.n	800b418 <memmove+0x24>

0800b428 <__malloc_lock>:
 800b428:	4801      	ldr	r0, [pc, #4]	; (800b430 <__malloc_lock+0x8>)
 800b42a:	f7ff b8c1 	b.w	800a5b0 <__retarget_lock_acquire_recursive>
 800b42e:	bf00      	nop
 800b430:	200011b4 	.word	0x200011b4

0800b434 <__malloc_unlock>:
 800b434:	4801      	ldr	r0, [pc, #4]	; (800b43c <__malloc_unlock+0x8>)
 800b436:	f7ff b8bc 	b.w	800a5b2 <__retarget_lock_release_recursive>
 800b43a:	bf00      	nop
 800b43c:	200011b4 	.word	0x200011b4

0800b440 <_free_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	4605      	mov	r5, r0
 800b444:	2900      	cmp	r1, #0
 800b446:	d043      	beq.n	800b4d0 <_free_r+0x90>
 800b448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b44c:	1f0c      	subs	r4, r1, #4
 800b44e:	2b00      	cmp	r3, #0
 800b450:	bfb8      	it	lt
 800b452:	18e4      	addlt	r4, r4, r3
 800b454:	f7ff ffe8 	bl	800b428 <__malloc_lock>
 800b458:	4a1e      	ldr	r2, [pc, #120]	; (800b4d4 <_free_r+0x94>)
 800b45a:	6813      	ldr	r3, [r2, #0]
 800b45c:	4610      	mov	r0, r2
 800b45e:	b933      	cbnz	r3, 800b46e <_free_r+0x2e>
 800b460:	6063      	str	r3, [r4, #4]
 800b462:	6014      	str	r4, [r2, #0]
 800b464:	4628      	mov	r0, r5
 800b466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b46a:	f7ff bfe3 	b.w	800b434 <__malloc_unlock>
 800b46e:	42a3      	cmp	r3, r4
 800b470:	d90a      	bls.n	800b488 <_free_r+0x48>
 800b472:	6821      	ldr	r1, [r4, #0]
 800b474:	1862      	adds	r2, r4, r1
 800b476:	4293      	cmp	r3, r2
 800b478:	bf01      	itttt	eq
 800b47a:	681a      	ldreq	r2, [r3, #0]
 800b47c:	685b      	ldreq	r3, [r3, #4]
 800b47e:	1852      	addeq	r2, r2, r1
 800b480:	6022      	streq	r2, [r4, #0]
 800b482:	6063      	str	r3, [r4, #4]
 800b484:	6004      	str	r4, [r0, #0]
 800b486:	e7ed      	b.n	800b464 <_free_r+0x24>
 800b488:	461a      	mov	r2, r3
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	b10b      	cbz	r3, 800b492 <_free_r+0x52>
 800b48e:	42a3      	cmp	r3, r4
 800b490:	d9fa      	bls.n	800b488 <_free_r+0x48>
 800b492:	6811      	ldr	r1, [r2, #0]
 800b494:	1850      	adds	r0, r2, r1
 800b496:	42a0      	cmp	r0, r4
 800b498:	d10b      	bne.n	800b4b2 <_free_r+0x72>
 800b49a:	6820      	ldr	r0, [r4, #0]
 800b49c:	4401      	add	r1, r0
 800b49e:	1850      	adds	r0, r2, r1
 800b4a0:	4283      	cmp	r3, r0
 800b4a2:	6011      	str	r1, [r2, #0]
 800b4a4:	d1de      	bne.n	800b464 <_free_r+0x24>
 800b4a6:	6818      	ldr	r0, [r3, #0]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	4401      	add	r1, r0
 800b4ac:	6011      	str	r1, [r2, #0]
 800b4ae:	6053      	str	r3, [r2, #4]
 800b4b0:	e7d8      	b.n	800b464 <_free_r+0x24>
 800b4b2:	d902      	bls.n	800b4ba <_free_r+0x7a>
 800b4b4:	230c      	movs	r3, #12
 800b4b6:	602b      	str	r3, [r5, #0]
 800b4b8:	e7d4      	b.n	800b464 <_free_r+0x24>
 800b4ba:	6820      	ldr	r0, [r4, #0]
 800b4bc:	1821      	adds	r1, r4, r0
 800b4be:	428b      	cmp	r3, r1
 800b4c0:	bf01      	itttt	eq
 800b4c2:	6819      	ldreq	r1, [r3, #0]
 800b4c4:	685b      	ldreq	r3, [r3, #4]
 800b4c6:	1809      	addeq	r1, r1, r0
 800b4c8:	6021      	streq	r1, [r4, #0]
 800b4ca:	6063      	str	r3, [r4, #4]
 800b4cc:	6054      	str	r4, [r2, #4]
 800b4ce:	e7c9      	b.n	800b464 <_free_r+0x24>
 800b4d0:	bd38      	pop	{r3, r4, r5, pc}
 800b4d2:	bf00      	nop
 800b4d4:	200004b0 	.word	0x200004b0

0800b4d8 <_realloc_r>:
 800b4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4da:	4607      	mov	r7, r0
 800b4dc:	4614      	mov	r4, r2
 800b4de:	460e      	mov	r6, r1
 800b4e0:	b921      	cbnz	r1, 800b4ec <_realloc_r+0x14>
 800b4e2:	4611      	mov	r1, r2
 800b4e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b4e8:	f7ff b864 	b.w	800a5b4 <_malloc_r>
 800b4ec:	b922      	cbnz	r2, 800b4f8 <_realloc_r+0x20>
 800b4ee:	f7ff ffa7 	bl	800b440 <_free_r>
 800b4f2:	4625      	mov	r5, r4
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4f8:	f000 f848 	bl	800b58c <_malloc_usable_size_r>
 800b4fc:	42a0      	cmp	r0, r4
 800b4fe:	d20f      	bcs.n	800b520 <_realloc_r+0x48>
 800b500:	4621      	mov	r1, r4
 800b502:	4638      	mov	r0, r7
 800b504:	f7ff f856 	bl	800a5b4 <_malloc_r>
 800b508:	4605      	mov	r5, r0
 800b50a:	2800      	cmp	r0, #0
 800b50c:	d0f2      	beq.n	800b4f4 <_realloc_r+0x1c>
 800b50e:	4631      	mov	r1, r6
 800b510:	4622      	mov	r2, r4
 800b512:	f7fe ff09 	bl	800a328 <memcpy>
 800b516:	4631      	mov	r1, r6
 800b518:	4638      	mov	r0, r7
 800b51a:	f7ff ff91 	bl	800b440 <_free_r>
 800b51e:	e7e9      	b.n	800b4f4 <_realloc_r+0x1c>
 800b520:	4635      	mov	r5, r6
 800b522:	e7e7      	b.n	800b4f4 <_realloc_r+0x1c>

0800b524 <_read_r>:
 800b524:	b538      	push	{r3, r4, r5, lr}
 800b526:	4604      	mov	r4, r0
 800b528:	4608      	mov	r0, r1
 800b52a:	4611      	mov	r1, r2
 800b52c:	2200      	movs	r2, #0
 800b52e:	4d05      	ldr	r5, [pc, #20]	; (800b544 <_read_r+0x20>)
 800b530:	602a      	str	r2, [r5, #0]
 800b532:	461a      	mov	r2, r3
 800b534:	f7f6 f8b0 	bl	8001698 <_read>
 800b538:	1c43      	adds	r3, r0, #1
 800b53a:	d102      	bne.n	800b542 <_read_r+0x1e>
 800b53c:	682b      	ldr	r3, [r5, #0]
 800b53e:	b103      	cbz	r3, 800b542 <_read_r+0x1e>
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	bd38      	pop	{r3, r4, r5, pc}
 800b544:	200011bc 	.word	0x200011bc

0800b548 <_fstat_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	2300      	movs	r3, #0
 800b54c:	4d06      	ldr	r5, [pc, #24]	; (800b568 <_fstat_r+0x20>)
 800b54e:	4604      	mov	r4, r0
 800b550:	4608      	mov	r0, r1
 800b552:	4611      	mov	r1, r2
 800b554:	602b      	str	r3, [r5, #0]
 800b556:	f7f6 f8c7 	bl	80016e8 <_fstat>
 800b55a:	1c43      	adds	r3, r0, #1
 800b55c:	d102      	bne.n	800b564 <_fstat_r+0x1c>
 800b55e:	682b      	ldr	r3, [r5, #0]
 800b560:	b103      	cbz	r3, 800b564 <_fstat_r+0x1c>
 800b562:	6023      	str	r3, [r4, #0]
 800b564:	bd38      	pop	{r3, r4, r5, pc}
 800b566:	bf00      	nop
 800b568:	200011bc 	.word	0x200011bc

0800b56c <_isatty_r>:
 800b56c:	b538      	push	{r3, r4, r5, lr}
 800b56e:	2300      	movs	r3, #0
 800b570:	4d05      	ldr	r5, [pc, #20]	; (800b588 <_isatty_r+0x1c>)
 800b572:	4604      	mov	r4, r0
 800b574:	4608      	mov	r0, r1
 800b576:	602b      	str	r3, [r5, #0]
 800b578:	f7f6 f8c5 	bl	8001706 <_isatty>
 800b57c:	1c43      	adds	r3, r0, #1
 800b57e:	d102      	bne.n	800b586 <_isatty_r+0x1a>
 800b580:	682b      	ldr	r3, [r5, #0]
 800b582:	b103      	cbz	r3, 800b586 <_isatty_r+0x1a>
 800b584:	6023      	str	r3, [r4, #0]
 800b586:	bd38      	pop	{r3, r4, r5, pc}
 800b588:	200011bc 	.word	0x200011bc

0800b58c <_malloc_usable_size_r>:
 800b58c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b590:	1f18      	subs	r0, r3, #4
 800b592:	2b00      	cmp	r3, #0
 800b594:	bfbc      	itt	lt
 800b596:	580b      	ldrlt	r3, [r1, r0]
 800b598:	18c0      	addlt	r0, r0, r3
 800b59a:	4770      	bx	lr

0800b59c <_init>:
 800b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59e:	bf00      	nop
 800b5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5a2:	bc08      	pop	{r3}
 800b5a4:	469e      	mov	lr, r3
 800b5a6:	4770      	bx	lr

0800b5a8 <_fini>:
 800b5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5aa:	bf00      	nop
 800b5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ae:	bc08      	pop	{r3}
 800b5b0:	469e      	mov	lr, r3
 800b5b2:	4770      	bx	lr
