
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d908  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  0800da18  0800da18  0001da18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc44  0800dc44  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800dc44  0800dc44  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dc44  0800dc44  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc44  0800dc44  0001dc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc48  0800dc48  0001dc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800dc4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  200001f0  0800de3c  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015b8  0800de3c  000215b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb75  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aa8  00000000  00000000  0003fd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00044838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b8  00000000  00000000  00045ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dcd6  00000000  00000000  000473b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be2c  00000000  00000000  00065086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097ebf  00000000  00000000  00080eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118d71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006910  00000000  00000000  00118dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800da00 	.word	0x0800da00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800da00 	.word	0x0800da00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_frsub>:
 8000628:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800062c:	e002      	b.n	8000634 <__addsf3>
 800062e:	bf00      	nop

08000630 <__aeabi_fsub>:
 8000630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000634 <__addsf3>:
 8000634:	0042      	lsls	r2, r0, #1
 8000636:	bf1f      	itttt	ne
 8000638:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800063c:	ea92 0f03 	teqne	r2, r3
 8000640:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000644:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000648:	d06a      	beq.n	8000720 <__addsf3+0xec>
 800064a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800064e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000652:	bfc1      	itttt	gt
 8000654:	18d2      	addgt	r2, r2, r3
 8000656:	4041      	eorgt	r1, r0
 8000658:	4048      	eorgt	r0, r1
 800065a:	4041      	eorgt	r1, r0
 800065c:	bfb8      	it	lt
 800065e:	425b      	neglt	r3, r3
 8000660:	2b19      	cmp	r3, #25
 8000662:	bf88      	it	hi
 8000664:	4770      	bxhi	lr
 8000666:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800066a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000672:	bf18      	it	ne
 8000674:	4240      	negne	r0, r0
 8000676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800067a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800067e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000682:	bf18      	it	ne
 8000684:	4249      	negne	r1, r1
 8000686:	ea92 0f03 	teq	r2, r3
 800068a:	d03f      	beq.n	800070c <__addsf3+0xd8>
 800068c:	f1a2 0201 	sub.w	r2, r2, #1
 8000690:	fa41 fc03 	asr.w	ip, r1, r3
 8000694:	eb10 000c 	adds.w	r0, r0, ip
 8000698:	f1c3 0320 	rsb	r3, r3, #32
 800069c:	fa01 f103 	lsl.w	r1, r1, r3
 80006a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a4:	d502      	bpl.n	80006ac <__addsf3+0x78>
 80006a6:	4249      	negs	r1, r1
 80006a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006b0:	d313      	bcc.n	80006da <__addsf3+0xa6>
 80006b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b6:	d306      	bcc.n	80006c6 <__addsf3+0x92>
 80006b8:	0840      	lsrs	r0, r0, #1
 80006ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80006be:	f102 0201 	add.w	r2, r2, #1
 80006c2:	2afe      	cmp	r2, #254	; 0xfe
 80006c4:	d251      	bcs.n	800076a <__addsf3+0x136>
 80006c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ce:	bf08      	it	eq
 80006d0:	f020 0001 	biceq.w	r0, r0, #1
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	4770      	bx	lr
 80006da:	0049      	lsls	r1, r1, #1
 80006dc:	eb40 0000 	adc.w	r0, r0, r0
 80006e0:	3a01      	subs	r2, #1
 80006e2:	bf28      	it	cs
 80006e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006e8:	d2ed      	bcs.n	80006c6 <__addsf3+0x92>
 80006ea:	fab0 fc80 	clz	ip, r0
 80006ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80006f2:	ebb2 020c 	subs.w	r2, r2, ip
 80006f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006fa:	bfaa      	itet	ge
 80006fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000700:	4252      	neglt	r2, r2
 8000702:	4318      	orrge	r0, r3
 8000704:	bfbc      	itt	lt
 8000706:	40d0      	lsrlt	r0, r2
 8000708:	4318      	orrlt	r0, r3
 800070a:	4770      	bx	lr
 800070c:	f092 0f00 	teq	r2, #0
 8000710:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000714:	bf06      	itte	eq
 8000716:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800071a:	3201      	addeq	r2, #1
 800071c:	3b01      	subne	r3, #1
 800071e:	e7b5      	b.n	800068c <__addsf3+0x58>
 8000720:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000724:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000728:	bf18      	it	ne
 800072a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800072e:	d021      	beq.n	8000774 <__addsf3+0x140>
 8000730:	ea92 0f03 	teq	r2, r3
 8000734:	d004      	beq.n	8000740 <__addsf3+0x10c>
 8000736:	f092 0f00 	teq	r2, #0
 800073a:	bf08      	it	eq
 800073c:	4608      	moveq	r0, r1
 800073e:	4770      	bx	lr
 8000740:	ea90 0f01 	teq	r0, r1
 8000744:	bf1c      	itt	ne
 8000746:	2000      	movne	r0, #0
 8000748:	4770      	bxne	lr
 800074a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800074e:	d104      	bne.n	800075a <__addsf3+0x126>
 8000750:	0040      	lsls	r0, r0, #1
 8000752:	bf28      	it	cs
 8000754:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000758:	4770      	bx	lr
 800075a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800075e:	bf3c      	itt	cc
 8000760:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000764:	4770      	bxcc	lr
 8000766:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800076a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800076e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000772:	4770      	bx	lr
 8000774:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000778:	bf16      	itet	ne
 800077a:	4608      	movne	r0, r1
 800077c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000780:	4601      	movne	r1, r0
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	bf06      	itte	eq
 8000786:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800078a:	ea90 0f01 	teqeq	r0, r1
 800078e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000792:	4770      	bx	lr

08000794 <__aeabi_ui2f>:
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	e004      	b.n	80007a4 <__aeabi_i2f+0x8>
 800079a:	bf00      	nop

0800079c <__aeabi_i2f>:
 800079c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	ea5f 0c00 	movs.w	ip, r0
 80007a8:	bf08      	it	eq
 80007aa:	4770      	bxeq	lr
 80007ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007b0:	4601      	mov	r1, r0
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	e01c      	b.n	80007f2 <__aeabi_l2f+0x2a>

080007b8 <__aeabi_ul2f>:
 80007b8:	ea50 0201 	orrs.w	r2, r0, r1
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e00a      	b.n	80007dc <__aeabi_l2f+0x14>
 80007c6:	bf00      	nop

080007c8 <__aeabi_l2f>:
 80007c8:	ea50 0201 	orrs.w	r2, r0, r1
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007d4:	d502      	bpl.n	80007dc <__aeabi_l2f+0x14>
 80007d6:	4240      	negs	r0, r0
 80007d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007dc:	ea5f 0c01 	movs.w	ip, r1
 80007e0:	bf02      	ittt	eq
 80007e2:	4684      	moveq	ip, r0
 80007e4:	4601      	moveq	r1, r0
 80007e6:	2000      	moveq	r0, #0
 80007e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ec:	bf08      	it	eq
 80007ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007f6:	fabc f28c 	clz	r2, ip
 80007fa:	3a08      	subs	r2, #8
 80007fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000800:	db10      	blt.n	8000824 <__aeabi_l2f+0x5c>
 8000802:	fa01 fc02 	lsl.w	ip, r1, r2
 8000806:	4463      	add	r3, ip
 8000808:	fa00 fc02 	lsl.w	ip, r0, r2
 800080c:	f1c2 0220 	rsb	r2, r2, #32
 8000810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000814:	fa20 f202 	lsr.w	r2, r0, r2
 8000818:	eb43 0002 	adc.w	r0, r3, r2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f102 0220 	add.w	r2, r2, #32
 8000828:	fa01 fc02 	lsl.w	ip, r1, r2
 800082c:	f1c2 0220 	rsb	r2, r2, #32
 8000830:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000834:	fa21 f202 	lsr.w	r2, r1, r2
 8000838:	eb43 0002 	adc.w	r0, r3, r2
 800083c:	bf08      	it	eq
 800083e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000842:	4770      	bx	lr

08000844 <__aeabi_fmul>:
 8000844:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000848:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800084c:	bf1e      	ittt	ne
 800084e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000852:	ea92 0f0c 	teqne	r2, ip
 8000856:	ea93 0f0c 	teqne	r3, ip
 800085a:	d06f      	beq.n	800093c <__aeabi_fmul+0xf8>
 800085c:	441a      	add	r2, r3
 800085e:	ea80 0c01 	eor.w	ip, r0, r1
 8000862:	0240      	lsls	r0, r0, #9
 8000864:	bf18      	it	ne
 8000866:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800086a:	d01e      	beq.n	80008aa <__aeabi_fmul+0x66>
 800086c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000870:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000874:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000878:	fba0 3101 	umull	r3, r1, r0, r1
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000884:	bf3e      	ittt	cc
 8000886:	0049      	lslcc	r1, r1, #1
 8000888:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800088c:	005b      	lslcc	r3, r3, #1
 800088e:	ea40 0001 	orr.w	r0, r0, r1
 8000892:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000896:	2afd      	cmp	r2, #253	; 0xfd
 8000898:	d81d      	bhi.n	80008d6 <__aeabi_fmul+0x92>
 800089a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	4770      	bx	lr
 80008aa:	f090 0f00 	teq	r0, #0
 80008ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008b2:	bf08      	it	eq
 80008b4:	0249      	lsleq	r1, r1, #9
 80008b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008be:	3a7f      	subs	r2, #127	; 0x7f
 80008c0:	bfc2      	ittt	gt
 80008c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ca:	4770      	bxgt	lr
 80008cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	3a01      	subs	r2, #1
 80008d6:	dc5d      	bgt.n	8000994 <__aeabi_fmul+0x150>
 80008d8:	f112 0f19 	cmn.w	r2, #25
 80008dc:	bfdc      	itt	le
 80008de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008e2:	4770      	bxle	lr
 80008e4:	f1c2 0200 	rsb	r2, r2, #0
 80008e8:	0041      	lsls	r1, r0, #1
 80008ea:	fa21 f102 	lsr.w	r1, r1, r2
 80008ee:	f1c2 0220 	rsb	r2, r2, #32
 80008f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008fa:	f140 0000 	adc.w	r0, r0, #0
 80008fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000902:	bf08      	it	eq
 8000904:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000908:	4770      	bx	lr
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000912:	bf02      	ittt	eq
 8000914:	0040      	lsleq	r0, r0, #1
 8000916:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800091a:	3a01      	subeq	r2, #1
 800091c:	d0f9      	beq.n	8000912 <__aeabi_fmul+0xce>
 800091e:	ea40 000c 	orr.w	r0, r0, ip
 8000922:	f093 0f00 	teq	r3, #0
 8000926:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092a:	bf02      	ittt	eq
 800092c:	0049      	lsleq	r1, r1, #1
 800092e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000932:	3b01      	subeq	r3, #1
 8000934:	d0f9      	beq.n	800092a <__aeabi_fmul+0xe6>
 8000936:	ea41 010c 	orr.w	r1, r1, ip
 800093a:	e78f      	b.n	800085c <__aeabi_fmul+0x18>
 800093c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000940:	ea92 0f0c 	teq	r2, ip
 8000944:	bf18      	it	ne
 8000946:	ea93 0f0c 	teqne	r3, ip
 800094a:	d00a      	beq.n	8000962 <__aeabi_fmul+0x11e>
 800094c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000950:	bf18      	it	ne
 8000952:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000956:	d1d8      	bne.n	800090a <__aeabi_fmul+0xc6>
 8000958:	ea80 0001 	eor.w	r0, r0, r1
 800095c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000960:	4770      	bx	lr
 8000962:	f090 0f00 	teq	r0, #0
 8000966:	bf17      	itett	ne
 8000968:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800096c:	4608      	moveq	r0, r1
 800096e:	f091 0f00 	teqne	r1, #0
 8000972:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000976:	d014      	beq.n	80009a2 <__aeabi_fmul+0x15e>
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	d101      	bne.n	8000982 <__aeabi_fmul+0x13e>
 800097e:	0242      	lsls	r2, r0, #9
 8000980:	d10f      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000982:	ea93 0f0c 	teq	r3, ip
 8000986:	d103      	bne.n	8000990 <__aeabi_fmul+0x14c>
 8000988:	024b      	lsls	r3, r1, #9
 800098a:	bf18      	it	ne
 800098c:	4608      	movne	r0, r1
 800098e:	d108      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bx	lr

080009ac <__aeabi_fdiv>:
 80009ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b4:	bf1e      	ittt	ne
 80009b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ba:	ea92 0f0c 	teqne	r2, ip
 80009be:	ea93 0f0c 	teqne	r3, ip
 80009c2:	d069      	beq.n	8000a98 <__aeabi_fdiv+0xec>
 80009c4:	eba2 0203 	sub.w	r2, r2, r3
 80009c8:	ea80 0c01 	eor.w	ip, r0, r1
 80009cc:	0249      	lsls	r1, r1, #9
 80009ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009d2:	d037      	beq.n	8000a44 <__aeabi_fdiv+0x98>
 80009d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e4:	428b      	cmp	r3, r1
 80009e6:	bf38      	it	cc
 80009e8:	005b      	lslcc	r3, r3, #1
 80009ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009f2:	428b      	cmp	r3, r1
 80009f4:	bf24      	itt	cs
 80009f6:	1a5b      	subcs	r3, r3, r1
 80009f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a00:	bf24      	itt	cs
 8000a02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a0e:	bf24      	itt	cs
 8000a10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a1c:	bf24      	itt	cs
 8000a1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	bf18      	it	ne
 8000a2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a2e:	d1e0      	bne.n	80009f2 <__aeabi_fdiv+0x46>
 8000a30:	2afd      	cmp	r2, #253	; 0xfd
 8000a32:	f63f af50 	bhi.w	80008d6 <__aeabi_fmul+0x92>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4c:	327f      	adds	r2, #127	; 0x7f
 8000a4e:	bfc2      	ittt	gt
 8000a50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a58:	4770      	bxgt	lr
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	3a01      	subs	r2, #1
 8000a64:	e737      	b.n	80008d6 <__aeabi_fmul+0x92>
 8000a66:	f092 0f00 	teq	r2, #0
 8000a6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0040      	lsleq	r0, r0, #1
 8000a72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a76:	3a01      	subeq	r2, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fdiv+0xc2>
 8000a7a:	ea40 000c 	orr.w	r0, r0, ip
 8000a7e:	f093 0f00 	teq	r3, #0
 8000a82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a86:	bf02      	ittt	eq
 8000a88:	0049      	lsleq	r1, r1, #1
 8000a8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a8e:	3b01      	subeq	r3, #1
 8000a90:	d0f9      	beq.n	8000a86 <__aeabi_fdiv+0xda>
 8000a92:	ea41 010c 	orr.w	r1, r1, ip
 8000a96:	e795      	b.n	80009c4 <__aeabi_fdiv+0x18>
 8000a98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a9c:	ea92 0f0c 	teq	r2, ip
 8000aa0:	d108      	bne.n	8000ab4 <__aeabi_fdiv+0x108>
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	f47f af7d 	bne.w	80009a2 <__aeabi_fmul+0x15e>
 8000aa8:	ea93 0f0c 	teq	r3, ip
 8000aac:	f47f af70 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	e776      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ab4:	ea93 0f0c 	teq	r3, ip
 8000ab8:	d104      	bne.n	8000ac4 <__aeabi_fdiv+0x118>
 8000aba:	024b      	lsls	r3, r1, #9
 8000abc:	f43f af4c 	beq.w	8000958 <__aeabi_fmul+0x114>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e76e      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ac4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ac8:	bf18      	it	ne
 8000aca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ace:	d1ca      	bne.n	8000a66 <__aeabi_fdiv+0xba>
 8000ad0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ad4:	f47f af5c 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ad8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000adc:	f47f af3c 	bne.w	8000958 <__aeabi_fmul+0x114>
 8000ae0:	e75f      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ae2:	bf00      	nop

08000ae4 <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2102      	movs	r1, #2
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <ToggleLDAC+0x1c>)
 8000aee:	f004 f83e 	bl	8004b6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2102      	movs	r1, #2
 8000af6:	4802      	ldr	r0, [pc, #8]	; (8000b00 <ToggleLDAC+0x1c>)
 8000af8:	f004 f839 	bl	8004b6e <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010800 	.word	0x40010800

08000b04 <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2110      	movs	r1, #16
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <SendSPI+0x34>)
 8000b16:	f004 f82a 	bl	8004b6e <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000b1a:	1cb9      	adds	r1, r7, #2
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2201      	movs	r2, #1
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f006 f9d1 	bl	8006ec8 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <SendSPI+0x34>)
 8000b2c:	f004 f81f 	bl	8004b6e <HAL_GPIO_WritePin>

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010800 	.word	0x40010800

08000b3c <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b4e:	d302      	bcc.n	8000b56 <DAC_AD5322_Ch1+0x1a>
 8000b50:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b54:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000b56:	2300      	movs	r3, #0
 8000b58:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000b5e:	2300      	movs	r3, #0
 8000b60:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000b62:	2300      	movs	r3, #0
 8000b64:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000b66:	8afb      	ldrh	r3, [r7, #22]
 8000b68:	03db      	lsls	r3, r3, #15
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	8abb      	ldrh	r3, [r7, #20]
 8000b6e:	039b      	lsls	r3, r3, #14
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	8a7b      	ldrh	r3, [r7, #18]
 8000b78:	035b      	lsls	r3, r3, #13
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	8a3b      	ldrh	r3, [r7, #16]
 8000b82:	031b      	lsls	r3, r3, #12
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000b94:	f023 030f 	bic.w	r3, r3, #15
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa8 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000bb4:	89bb      	ldrh	r3, [r7, #12]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffa3 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000bbe:	f7ff ff91 	bl	8000ae4 <ToggleLDAC>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bdc:	d302      	bcc.n	8000be4 <DAC_AD5322_Ch2+0x1a>
 8000bde:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000be2:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000be4:	2301      	movs	r3, #1
 8000be6:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000be8:	2301      	movs	r3, #1
 8000bea:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000bec:	2300      	movs	r3, #0
 8000bee:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	03db      	lsls	r3, r3, #15
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	8abb      	ldrh	r3, [r7, #20]
 8000bfc:	039b      	lsls	r3, r3, #14
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	8a7b      	ldrh	r3, [r7, #18]
 8000c06:	035b      	lsls	r3, r3, #13
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	8a3b      	ldrh	r3, [r7, #16]
 8000c10:	031b      	lsls	r3, r3, #12
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c22:	f023 030f 	bic.w	r3, r3, #15
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff61 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000c42:	89bb      	ldrh	r3, [r7, #12]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff5c 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000c4c:	f7ff ff4a 	bl	8000ae4 <ToggleLDAC>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c6e:	d302      	bcc.n	8000c76 <DAC_AD5322_Ch1Ch2+0x1e>
 8000c70:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c74:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000c76:	883b      	ldrh	r3, [r7, #0]
 8000c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c7c:	d302      	bcc.n	8000c84 <DAC_AD5322_Ch1Ch2+0x2c>
 8000c7e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c82:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000c84:	2300      	movs	r3, #0
 8000c86:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000c88:	2301      	movs	r3, #1
 8000c8a:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000c90:	2300      	movs	r3, #0
 8000c92:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000c94:	8afb      	ldrh	r3, [r7, #22]
 8000c96:	03db      	lsls	r3, r3, #15
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	8abb      	ldrh	r3, [r7, #20]
 8000c9c:	039b      	lsls	r3, r3, #14
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	8a7b      	ldrh	r3, [r7, #18]
 8000ca6:	035b      	lsls	r3, r3, #13
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	8a3b      	ldrh	r3, [r7, #16]
 8000cb0:	031b      	lsls	r3, r3, #12
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cbe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000cc2:	f023 030f 	bic.w	r3, r3, #15
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000cd8:	89bb      	ldrh	r3, [r7, #12]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff11 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000ce2:	89bb      	ldrh	r3, [r7, #12]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff0c 	bl	8000b04 <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000cec:	2301      	movs	r3, #1
 8000cee:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000cfc:	8afb      	ldrh	r3, [r7, #22]
 8000cfe:	03db      	lsls	r3, r3, #15
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	8abb      	ldrh	r3, [r7, #20]
 8000d04:	039b      	lsls	r3, r3, #14
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	8a7b      	ldrh	r3, [r7, #18]
 8000d0e:	035b      	lsls	r3, r3, #13
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	8a3b      	ldrh	r3, [r7, #16]
 8000d18:	031b      	lsls	r3, r3, #12
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000d40:	89bb      	ldrh	r3, [r7, #12]
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fedd 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000d4a:	89bb      	ldrh	r3, [r7, #12]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fed8 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000d54:	f7ff fec6 	bl	8000ae4 <ToggleLDAC>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <crete_calibration_table>:
 * @Purpose: Calibration table volt2dac
 *******************************************************************************/
#include <logic_calibration_table.h>
#include <math.h>

void crete_calibration_table(Table_t *calibTable){//de
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

     calibTable->dacValA_m12[0] = 0x0;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	819a      	strh	r2, [r3, #12]
     calibTable->dacValA_m12[1] = 0x189;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f240 1289 	movw	r2, #393	; 0x189
 8000d74:	81da      	strh	r2, [r3, #14]
     calibTable->dacValA_m12[2] = 0x31d;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f240 321d 	movw	r2, #797	; 0x31d
 8000d7c:	821a      	strh	r2, [r3, #16]
     calibTable->dacValA_m12[3] = 0x223;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f240 2223 	movw	r2, #547	; 0x223
 8000d84:	825a      	strh	r2, [r3, #18]
     calibTable->dacValA_m12[4] = 0x21f;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f240 221f 	movw	r2, #543	; 0x21f
 8000d8c:	829a      	strh	r2, [r3, #20]
     calibTable->dacValA_m12[5] = 0x19d;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f240 129d 	movw	r2, #413	; 0x19d
 8000d94:	82da      	strh	r2, [r3, #22]
     calibTable->dacValA_m12[6] = 0x27e;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f240 227e 	movw	r2, #638	; 0x27e
 8000d9c:	831a      	strh	r2, [r3, #24]
     calibTable->dacValA_m12[7] = 0x297;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f240 2297 	movw	r2, #663	; 0x297
 8000da4:	835a      	strh	r2, [r3, #26]
     calibTable->dacValA_m12[8] = 0x27e;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f240 227e 	movw	r2, #638	; 0x27e
 8000dac:	839a      	strh	r2, [r3, #28]
     calibTable->dacValA_m12[9] = 0x297;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f240 2297 	movw	r2, #663	; 0x297
 8000db4:	83da      	strh	r2, [r3, #30]
     calibTable->dacValA_m12[10] = 0x1a1;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f240 12a1 	movw	r2, #417	; 0x1a1
 8000dbc:	841a      	strh	r2, [r3, #32]
     calibTable->dacValA_m12[11] = 0x223;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f240 2223 	movw	r2, #547	; 0x223
 8000dc4:	845a      	strh	r2, [r3, #34]	; 0x22
     calibTable->dacValA_m12[12] = 0x21e;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f240 221e 	movw	r2, #542	; 0x21e
 8000dcc:	849a      	strh	r2, [r3, #36]	; 0x24
     calibTable->dacValA_m12[13] = 0x1b6;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8000dd4:	84da      	strh	r2, [r3, #38]	; 0x26
     calibTable->dacValA_m12[14] = 0x297;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f240 2297 	movw	r2, #663	; 0x297
 8000ddc:	851a      	strh	r2, [r3, #40]	; 0x28
     calibTable->dacValA_m12[15] = 0x188;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8000de4:	855a      	strh	r2, [r3, #42]	; 0x2a
     calibTable->dacValA_m12[16] = 0x223;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f240 2223 	movw	r2, #547	; 0x223
 8000dec:	859a      	strh	r2, [r3, #44]	; 0x2c
     calibTable->dacValA_m12[17] = 0x1a6;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8000df4:	85da      	strh	r2, [r3, #46]	; 0x2e
     calibTable->dacValA_m12[18] = 0x233;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f240 2233 	movw	r2, #563	; 0x233
 8000dfc:	861a      	strh	r2, [r3, #48]	; 0x30
     calibTable->dacValA_m12[19] = 0x29b;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f240 229b 	movw	r2, #667	; 0x29b
 8000e04:	865a      	strh	r2, [r3, #50]	; 0x32
     calibTable->dacValA_m12[20] = 0x21e;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f240 221e 	movw	r2, #542	; 0x21e
 8000e0c:	869a      	strh	r2, [r3, #52]	; 0x34
     calibTable->dacValA_m12[21] = 0x1b6;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8000e14:	86da      	strh	r2, [r3, #54]	; 0x36
     calibTable->dacValA_m12[22] = 0x2e6;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f240 22e6 	movw	r2, #742	; 0x2e6
 8000e1c:	871a      	strh	r2, [r3, #56]	; 0x38
     calibTable->dacValA_m12[23] = 0x233;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f240 2233 	movw	r2, #563	; 0x233
 8000e24:	875a      	strh	r2, [r3, #58]	; 0x3a
     calibTable->dacValA_m12[24] = 0x184;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8000e2c:	879a      	strh	r2, [r3, #60]	; 0x3c
     calibTable->dacValA_m12[25] = 0x27e;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f240 227e 	movw	r2, #638	; 0x27e
 8000e34:	87da      	strh	r2, [r3, #62]	; 0x3e
     calibTable->dacValA_m12[26] = 0x855;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f640 0255 	movw	r2, #2133	; 0x855
 8000e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
     calibTable->dacValA_m12[27] = 0x877;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f640 0277 	movw	r2, #2167	; 0x877
 8000e46:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
     calibTable->dacValA_m12[28] = 0x8b1;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f640 02b1 	movw	r2, #2225	; 0x8b1
 8000e50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
     calibTable->dacValA_m12[29] = 0x8cb;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f640 02cb 	movw	r2, #2251	; 0x8cb
 8000e5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
     calibTable->dacValA_m12[30] = 0x8fc;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000e64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
     calibTable->dacValA_m12[31] = 0x960;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000e6e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
     calibTable->dacValA_m12[32] = 0x953;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f640 1253 	movw	r2, #2387	; 0x953
 8000e78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
     calibTable->dacValA_m12[33] = 0x992;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f640 1292 	movw	r2, #2450	; 0x992
 8000e82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
     calibTable->dacValA_m12[34] = 0x9c4;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000e8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
     calibTable->dacValA_m12[35] = 0x9d6;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f640 12d6 	movw	r2, #2518	; 0x9d6
 8000e96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
     calibTable->dacValA_m12[36] = 0xa02;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f640 2202 	movw	r2, #2562	; 0xa02
 8000ea0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
     calibTable->dacValA_m12[37] = 0xa2f;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f640 222f 	movw	r2, #2607	; 0xa2f
 8000eaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
     calibTable->dacValA_m12[38] = 0x9dd;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f640 12dd 	movw	r2, #2525	; 0x9dd
 8000eb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
     calibTable->dacValA_m12[39] = 0xa89;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f640 2289 	movw	r2, #2697	; 0xa89
 8000ebe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
     calibTable->dacValA_m12[40] = 0xab4;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f640 22b4 	movw	r2, #2740	; 0xab4
 8000ec8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
     calibTable->dacValA_m12[41] = 0xae1;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f640 22e1 	movw	r2, #2785	; 0xae1
 8000ed2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
     calibTable->dacValA_m12[42] = 0xb0b;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f640 320b 	movw	r2, #2827	; 0xb0b
 8000edc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
     calibTable->dacValA_m12[43] = 0xb36;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f640 3236 	movw	r2, #2870	; 0xb36
 8000ee6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
     calibTable->dacValA_m12[44] = 0xb8b;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f640 328b 	movw	r2, #2955	; 0xb8b
 8000ef0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
     calibTable->dacValA_m12[45] = 0xb8f;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f640 328f 	movw	r2, #2959	; 0xb8f
 8000efa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
     calibTable->dacValA_m12[46] = 0xbd1;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f640 32d1 	movw	r2, #3025	; 0xbd1
 8000f04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
     calibTable->dacValA_m12[47] = 0xbe6;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f640 32e6 	movw	r2, #3046	; 0xbe6
 8000f0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
     calibTable->dacValA_m12[48] = 0xc12;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f640 4212 	movw	r2, #3090	; 0xc12
 8000f18:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
     calibTable->dacValA_m12[49] = 0xc4e;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f640 424e 	movw	r2, #3150	; 0xc4e
 8000f22:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
     calibTable->dacValA_m12[50] = 0xc69;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f640 4269 	movw	r2, #3177	; 0xc69
 8000f2c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
     calibTable->dacValA_m12[51] = 0xc96;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f640 4296 	movw	r2, #3222	; 0xc96
 8000f36:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
     calibTable->dacValA_m12[52] = 0xcd5;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8000f40:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
     calibTable->dacValA_m12[53] = 0xcee;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f640 42ee 	movw	r2, #3310	; 0xcee
 8000f4a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
     calibTable->dacValA_m12[54] = 0xd19;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f640 5219 	movw	r2, #3353	; 0xd19
 8000f54:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
     calibTable->dacValA_m12[55] = 0xc98;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f640 4298 	movw	r2, #3224	; 0xc98
 8000f5e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
     calibTable->dacValA_m12[56] = 0xd70;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f44f 6257 	mov.w	r2, #3440	; 0xd70
 8000f68:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
     calibTable->dacValA_m12[57] = 0xd99;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f640 5299 	movw	r2, #3481	; 0xd99
 8000f72:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
     calibTable->dacValA_m12[58] = 0xdb7;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f640 52b7 	movw	r2, #3511	; 0xdb7
 8000f7c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
     calibTable->dacValA_m12[59] = 0xdca;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f640 52ca 	movw	r2, #3530	; 0xdca
 8000f86:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
     calibTable->dacValA_m12[60] = 0xdd8;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f640 52d8 	movw	r2, #3544	; 0xdd8
 8000f90:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
     calibTable->dacValA_m12[61] = 0xddc;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f640 52dc 	movw	r2, #3548	; 0xddc
 8000f9a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
     calibTable->dacValA_m12[62] = 0xde9;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f640 52e9 	movw	r2, #3561	; 0xde9
 8000fa4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
     calibTable->dacValA_m12[63] = 0xded;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f640 52ed 	movw	r2, #3565	; 0xded
 8000fae:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
     calibTable->dacValA_m12[64] = 0xdf4;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f640 52f4 	movw	r2, #3572	; 0xdf4
 8000fb8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
     calibTable->dacValA_m12[65] = 0xdf9;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f640 52f9 	movw	r2, #3577	; 0xdf9
 8000fc2:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
     calibTable->dacValA_m12[66] = 0xdfc;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f640 52fc 	movw	r2, #3580	; 0xdfc
 8000fcc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
     calibTable->dacValA_m12[67] = 0xdf7;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f640 52f7 	movw	r2, #3575	; 0xdf7
 8000fd6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
     calibTable->dacValA_m12[68] = 0xdf8;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f640 52f8 	movw	r2, #3576	; 0xdf8
 8000fe0:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
     calibTable->dacValA_m12[69] = 0xdfa;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f640 52fa 	movw	r2, #3578	; 0xdfa
 8000fea:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
     calibTable->dacValA_m12[70] = 0xdfc;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f640 52fc 	movw	r2, #3580	; 0xdfc
 8000ff4:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
     calibTable->dacValA_m12[71] = 0xdfe;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f640 52fe 	movw	r2, #3582	; 0xdfe
 8000ffe:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
     calibTable->dacValA_m12[72] = 0xe01;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f640 6201 	movw	r2, #3585	; 0xe01
 8001008:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
     calibTable->dacValA_m12[73] = 0xe01;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f640 6201 	movw	r2, #3585	; 0xe01
 8001012:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
     calibTable->dacValA_m12[74] = 0xe06;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f640 6206 	movw	r2, #3590	; 0xe06
 800101c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
     calibTable->dacValA_m12[75] = 0xe06;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f640 6206 	movw	r2, #3590	; 0xe06
 8001026:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
     calibTable->dacValA_m12[76] = 0xe0a;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f640 620a 	movw	r2, #3594	; 0xe0a
 8001030:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
     calibTable->dacValA_m12[77] = 0xe0e;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f640 620e 	movw	r2, #3598	; 0xe0e
 800103a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
     calibTable->dacValA_m12[78] = 0xe05;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f640 6205 	movw	r2, #3589	; 0xe05
 8001044:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
     calibTable->dacValA_m12[79] = 0xe01;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f640 6201 	movw	r2, #3585	; 0xe01
 800104e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
     calibTable->dacValA_m12[80] = 0xe09;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f640 6209 	movw	r2, #3593	; 0xe09
 8001058:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
     calibTable->dacValA_m12[81] = 0x7d0;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001062:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
     calibTable->dacValA_m12[82] = 0xe06;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f640 6206 	movw	r2, #3590	; 0xe06
 800106c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
     calibTable->dacValA_m12[83] = 0x7d0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001076:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
     calibTable->dacValA_m12[84] = 0xe06;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f640 6206 	movw	r2, #3590	; 0xe06
 8001080:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
     calibTable->dacValA_m12[85] = 0xe00;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800108a:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
     calibTable->dacValA_m12[86] = 0xdfe;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f640 52fe 	movw	r2, #3582	; 0xdfe
 8001094:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
     calibTable->dacValA_m12[87] = 0x1000;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800109e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

     calibTable->dacValB_m12[0] = 0x0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
     calibTable->dacValB_m12[1] = 0x1bb;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f240 12bb 	movw	r2, #443	; 0x1bb
 80010b0:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
     calibTable->dacValB_m12[2] = 0x1ed;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f240 12ed 	movw	r2, #493	; 0x1ed
 80010ba:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
     calibTable->dacValB_m12[3] = 0x251;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f240 2251 	movw	r2, #593	; 0x251
 80010c4:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
     calibTable->dacValB_m12[4] = 0x1bb;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f240 12bb 	movw	r2, #443	; 0x1bb
 80010ce:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
     calibTable->dacValB_m12[5] = 0x1ed;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f240 12ed 	movw	r2, #493	; 0x1ed
 80010d8:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
     calibTable->dacValB_m12[6] = 0x2ce;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f240 22ce 	movw	r2, #718	; 0x2ce
 80010e2:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
     calibTable->dacValB_m12[7] = 0x1d4;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80010ec:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
     calibTable->dacValB_m12[8] = 0x1f2;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 80010f6:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
     calibTable->dacValB_m12[9] = 0x1d9;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f240 12d9 	movw	r2, #473	; 0x1d9
 8001100:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
     calibTable->dacValB_m12[10] = 0x1bc;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800110a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
     calibTable->dacValB_m12[11] = 0x1bb;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001114:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
     calibTable->dacValB_m12[12] = 0x1f3;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800111e:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
     calibTable->dacValB_m12[13] = 0x1d9;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f240 12d9 	movw	r2, #473	; 0x1d9
 8001128:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
     calibTable->dacValB_m12[14] = 0x1ed;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f240 12ed 	movw	r2, #493	; 0x1ed
 8001132:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
     calibTable->dacValB_m12[15] = 0x1f3;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f240 12f3 	movw	r2, #499	; 0x1f3
 800113c:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
     calibTable->dacValB_m12[16] = 0x1c0;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001146:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
     calibTable->dacValB_m12[17] = 0x1c1;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001150:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
     calibTable->dacValB_m12[18] = 0x1c0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800115a:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
     calibTable->dacValB_m12[19] = 0x2ec;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8001164:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
     calibTable->dacValB_m12[20] = 0x1d4;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800116e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
     calibTable->dacValB_m12[21] = 0x251;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f240 2251 	movw	r2, #593	; 0x251
 8001178:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
     calibTable->dacValB_m12[22] = 0x1d4;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8001182:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
     calibTable->dacValB_m12[23] = 0x1d4;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800118c:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
     calibTable->dacValB_m12[24] = 0x2ce;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f240 22ce 	movw	r2, #718	; 0x2ce
 8001196:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
     calibTable->dacValB_m12[25] = 0x1cb;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f240 12cb 	movw	r2, #459	; 0x1cb
 80011a0:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
     calibTable->dacValB_m12[26] = 0x857;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f640 0257 	movw	r2, #2135	; 0x857
 80011aa:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
     calibTable->dacValB_m12[27] = 0x877;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f640 0277 	movw	r2, #2167	; 0x877
 80011b4:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
     calibTable->dacValB_m12[28] = 0x8a4;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f640 02a4 	movw	r2, #2212	; 0x8a4
 80011be:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
     calibTable->dacValB_m12[29] = 0x8cf;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f640 02cf 	movw	r2, #2255	; 0x8cf
 80011c8:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
     calibTable->dacValB_m12[30] = 0x8fb;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f640 02fb 	movw	r2, #2299	; 0x8fb
 80011d2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
     calibTable->dacValB_m12[31] = 0x926;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f640 1226 	movw	r2, #2342	; 0x926
 80011dc:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
     calibTable->dacValB_m12[32] = 0x954;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f640 1254 	movw	r2, #2388	; 0x954
 80011e6:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
     calibTable->dacValB_m12[33] = 0x980;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f44f 6218 	mov.w	r2, #2432	; 0x980
 80011f0:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
     calibTable->dacValB_m12[34] = 0x9ac;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f640 12ac 	movw	r2, #2476	; 0x9ac
 80011fa:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
     calibTable->dacValB_m12[35] = 0x9d8;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f640 12d8 	movw	r2, #2520	; 0x9d8
 8001204:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
     calibTable->dacValB_m12[36] = 0xa04;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f640 2204 	movw	r2, #2564	; 0xa04
 800120e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
     calibTable->dacValB_m12[37] = 0xa30;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f44f 6223 	mov.w	r2, #2608	; 0xa30
 8001218:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
     calibTable->dacValB_m12[38] = 0xa5b;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f640 225b 	movw	r2, #2651	; 0xa5b
 8001222:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
     calibTable->dacValB_m12[39] = 0xa86;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f640 2286 	movw	r2, #2694	; 0xa86
 800122c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
     calibTable->dacValB_m12[40] = 0xab2;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f640 22b2 	movw	r2, #2738	; 0xab2
 8001236:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
     calibTable->dacValB_m12[41] = 0xadf;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f640 22df 	movw	r2, #2783	; 0xadf
 8001240:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
     calibTable->dacValB_m12[42] = 0xb0b;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f640 320b 	movw	r2, #2827	; 0xb0b
 800124a:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
     calibTable->dacValB_m12[43] = 0xb36;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f640 3236 	movw	r2, #2870	; 0xb36
 8001254:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
     calibTable->dacValB_m12[44] = 0xb63;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f640 3263 	movw	r2, #2915	; 0xb63
 800125e:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
     calibTable->dacValB_m12[45] = 0xb8e;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f640 328e 	movw	r2, #2958	; 0xb8e
 8001268:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
     calibTable->dacValB_m12[46] = 0xbea;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f640 32ea 	movw	r2, #3050	; 0xbea
 8001272:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
     calibTable->dacValB_m12[47] = 0xafd;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f640 22fd 	movw	r2, #2813	; 0xafd
 800127c:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
     calibTable->dacValB_m12[48] = 0xb91;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f640 3291 	movw	r2, #2961	; 0xb91
 8001286:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
     calibTable->dacValB_m12[49] = 0xc3d;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f640 423d 	movw	r2, #3133	; 0xc3d
 8001290:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
     calibTable->dacValB_m12[50] = 0xc69;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f640 4269 	movw	r2, #3177	; 0xc69
 800129a:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
     calibTable->dacValB_m12[51] = 0xbbe;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f640 32be 	movw	r2, #3006	; 0xbbe
 80012a4:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
     calibTable->dacValB_m12[52] = 0xcc2;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f640 42c2 	movw	r2, #3266	; 0xcc2
 80012ae:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
     calibTable->dacValB_m12[53] = 0xd20;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80012b8:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
     calibTable->dacValB_m12[54] = 0xd19;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f640 5219 	movw	r2, #3353	; 0xd19
 80012c2:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
     calibTable->dacValB_m12[55] = 0xd44;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f640 5244 	movw	r2, #3396	; 0xd44
 80012cc:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
     calibTable->dacValB_m12[56] = 0xd6e;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f640 526e 	movw	r2, #3438	; 0xd6e
 80012d6:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
     calibTable->dacValB_m12[57] = 0xd92;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f640 5292 	movw	r2, #3474	; 0xd92
 80012e0:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
     calibTable->dacValB_m12[58] = 0xd17;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f640 5217 	movw	r2, #3351	; 0xd17
 80012ea:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
     calibTable->dacValB_m12[59] = 0xdc5;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f640 52c5 	movw	r2, #3525	; 0xdc5
 80012f4:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
     calibTable->dacValB_m12[60] = 0xdc2;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f640 52c2 	movw	r2, #3522	; 0xdc2
 80012fe:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
     calibTable->dacValB_m12[61] = 0xdcb;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f640 52cb 	movw	r2, #3531	; 0xdcb
 8001308:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
     calibTable->dacValB_m12[62] = 0xdd4;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f640 52d4 	movw	r2, #3540	; 0xdd4
 8001312:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
     calibTable->dacValB_m12[63] = 0xdd9;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f640 52d9 	movw	r2, #3545	; 0xdd9
 800131c:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
     calibTable->dacValB_m12[64] = 0xe09;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f640 6209 	movw	r2, #3593	; 0xe09
 8001326:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
     calibTable->dacValB_m12[65] = 0xc6a;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f640 426a 	movw	r2, #3178	; 0xc6a
 8001330:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
     calibTable->dacValB_m12[66] = 0xbbc;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f640 32bc 	movw	r2, #3004	; 0xbbc
 800133a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
     calibTable->dacValB_m12[67] = 0xc5d;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f640 425d 	movw	r2, #3165	; 0xc5d
 8001344:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
     calibTable->dacValB_m12[68] = 0xc4f;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f640 424f 	movw	r2, #3151	; 0xc4f
 800134e:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
     calibTable->dacValB_m12[69] = 0xcde;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f640 42de 	movw	r2, #3294	; 0xcde
 8001358:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
     calibTable->dacValB_m12[70] = 0xc52;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f640 4252 	movw	r2, #3154	; 0xc52
 8001362:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
     calibTable->dacValB_m12[71] = 0xdde;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f640 52de 	movw	r2, #3550	; 0xdde
 800136c:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
     calibTable->dacValB_m12[72] = 0xdff;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f640 52ff 	movw	r2, #3583	; 0xdff
 8001376:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
     calibTable->dacValB_m12[73] = 0xe05;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f640 6205 	movw	r2, #3589	; 0xe05
 8001380:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
     calibTable->dacValB_m12[74] = 0xe0b;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f640 620b 	movw	r2, #3595	; 0xe0b
 800138a:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
     calibTable->dacValB_m12[75] = 0xc80;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001394:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152
     calibTable->dacValB_m12[76] = 0xc1f;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f640 421f 	movw	r2, #3103	; 0xc1f
 800139e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
     calibTable->dacValB_m12[77] = 0xe0d;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f640 620d 	movw	r2, #3597	; 0xe0d
 80013a8:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
     calibTable->dacValB_m12[78] = 0xc77;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f640 4277 	movw	r2, #3191	; 0xc77
 80013b2:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
     calibTable->dacValB_m12[79] = 0xd49;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f640 5249 	movw	r2, #3401	; 0xd49
 80013bc:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
     calibTable->dacValB_m12[80] = 0xd55;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f640 5255 	movw	r2, #3413	; 0xd55
 80013c6:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
     calibTable->dacValB_m12[81] = 0xcf5;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f640 42f5 	movw	r2, #3317	; 0xcf5
 80013d0:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
     calibTable->dacValB_m12[82] = 0xe14;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f640 6214 	movw	r2, #3604	; 0xe14
 80013da:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
     calibTable->dacValB_m12[83] = 0xd7f;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f640 527f 	movw	r2, #3455	; 0xd7f
 80013e4:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
     calibTable->dacValB_m12[84] = 0xd2a;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f640 522a 	movw	r2, #3370	; 0xd2a
 80013ee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
     calibTable->dacValB_m12[85] = 0xd51;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f640 5251 	movw	r2, #3409	; 0xd51
 80013f8:	f8a3 2166 	strh.w	r2, [r3, #358]	; 0x166
     calibTable->dacValB_m12[86] = 0xde0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f44f 625e 	mov.w	r2, #3552	; 0xde0
 8001402:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
     calibTable->dacValB_m12[87] = 0x1000;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800140c:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a

     calibTable->dacValA_m27[0] = 0x0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
     calibTable->dacValA_m27[1] = 0x1f1;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f240 12f1 	movw	r2, #497	; 0x1f1
 800141e:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
     calibTable->dacValA_m27[2] = 0x1a6;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8001428:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
     calibTable->dacValA_m27[3] = 0x21e;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f240 221e 	movw	r2, #542	; 0x21e
 8001432:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
     calibTable->dacValA_m27[4] = 0x233;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f240 2233 	movw	r2, #563	; 0x233
 800143c:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
     calibTable->dacValA_m27[5] = 0x27e;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f240 227e 	movw	r2, #638	; 0x27e
 8001446:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
     calibTable->dacValA_m27[6] = 0x27e;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f240 227e 	movw	r2, #638	; 0x27e
 8001450:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
     calibTable->dacValA_m27[7] = 0x1bb;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f240 12bb 	movw	r2, #443	; 0x1bb
 800145a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
     calibTable->dacValA_m27[8] = 0x1bb;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001464:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
     calibTable->dacValA_m27[9] = 0x1bb;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f240 12bb 	movw	r2, #443	; 0x1bb
 800146e:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
     calibTable->dacValA_m27[10] = 0x477;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f240 4277 	movw	r2, #1143	; 0x477
 8001478:	f8a3 2180 	strh.w	r2, [r3, #384]	; 0x180
     calibTable->dacValA_m27[11] = 0x5a3;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f240 52a3 	movw	r2, #1443	; 0x5a3
 8001482:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
     calibTable->dacValA_m27[12] = 0x1c4;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 800148c:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
     calibTable->dacValA_m27[13] = 0x1bb;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001496:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
     calibTable->dacValA_m27[14] = 0x1bb;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014a0:	f8a3 2188 	strh.w	r2, [r3, #392]	; 0x188
     calibTable->dacValA_m27[15] = 0x29c;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f44f 7227 	mov.w	r2, #668	; 0x29c
 80014aa:	f8a3 218a 	strh.w	r2, [r3, #394]	; 0x18a
     calibTable->dacValA_m27[16] = 0x1bf;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f240 12bf 	movw	r2, #447	; 0x1bf
 80014b4:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
     calibTable->dacValA_m27[17] = 0x1bb;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014be:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
     calibTable->dacValA_m27[18] = 0x386;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f240 3286 	movw	r2, #902	; 0x386
 80014c8:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
     calibTable->dacValA_m27[19] = 0x1bf;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f240 12bf 	movw	r2, #447	; 0x1bf
 80014d2:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
     calibTable->dacValA_m27[20] = 0x1bb;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014dc:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
     calibTable->dacValA_m27[21] = 0x283;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f240 2283 	movw	r2, #643	; 0x283
 80014e6:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
     calibTable->dacValA_m27[22] = 0x37d;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f240 327d 	movw	r2, #893	; 0x37d
 80014f0:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
     calibTable->dacValA_m27[23] = 0x283;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f240 2283 	movw	r2, #643	; 0x283
 80014fa:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
     calibTable->dacValA_m27[24] = 0x37d;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f240 327d 	movw	r2, #893	; 0x37d
 8001504:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
     calibTable->dacValA_m27[25] = 0x37d;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f240 327d 	movw	r2, #893	; 0x37d
 800150e:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
     calibTable->dacValA_m27[26] = 0x843;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f640 0243 	movw	r2, #2115	; 0x843
 8001518:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
     calibTable->dacValA_m27[27] = 0x843;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f640 0243 	movw	r2, #2115	; 0x843
 8001522:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
     calibTable->dacValA_m27[28] = 0x83e;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f640 023e 	movw	r2, #2110	; 0x83e
 800152c:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
     calibTable->dacValA_m27[29] = 0x869;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f640 0269 	movw	r2, #2153	; 0x869
 8001536:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
     calibTable->dacValA_m27[30] = 0x870;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f44f 6207 	mov.w	r2, #2160	; 0x870
 8001540:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
     calibTable->dacValA_m27[31] = 0x877;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f640 0277 	movw	r2, #2167	; 0x877
 800154a:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
     calibTable->dacValA_m27[32] = 0x7d9;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f240 72d9 	movw	r2, #2009	; 0x7d9
 8001554:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
     calibTable->dacValA_m27[33] = 0x7e3;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f240 72e3 	movw	r2, #2019	; 0x7e3
 800155e:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
     calibTable->dacValA_m27[34] = 0x864;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f640 0264 	movw	r2, #2148	; 0x864
 8001568:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
     calibTable->dacValA_m27[35] = 0x800;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001572:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
     calibTable->dacValA_m27[36] = 0x864;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f640 0264 	movw	r2, #2148	; 0x864
 800157c:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
     calibTable->dacValA_m27[37] = 0x828;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f640 0228 	movw	r2, #2088	; 0x828
 8001586:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
     calibTable->dacValA_m27[38] = 0x8cc;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f640 02cc 	movw	r2, #2252	; 0x8cc
 8001590:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
     calibTable->dacValA_m27[39] = 0x8d2;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f640 02d2 	movw	r2, #2258	; 0x8d2
 800159a:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
     calibTable->dacValA_m27[40] = 0x7fc;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80015a4:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
     calibTable->dacValA_m27[41] = 0x864;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f640 0264 	movw	r2, #2148	; 0x864
 80015ae:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
     calibTable->dacValA_m27[42] = 0x7fc;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80015b8:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
     calibTable->dacValA_m27[43] = 0x8ff;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f640 02ff 	movw	r2, #2303	; 0x8ff
 80015c2:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
     calibTable->dacValA_m27[44] = 0x87e;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f640 027e 	movw	r2, #2174	; 0x87e
 80015cc:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
     calibTable->dacValA_m27[45] = 0x834;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f640 0234 	movw	r2, #2100	; 0x834
 80015d6:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
     calibTable->dacValA_m27[46] = 0x828;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f640 0228 	movw	r2, #2088	; 0x828
 80015e0:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
     calibTable->dacValA_m27[47] = 0x847;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f640 0247 	movw	r2, #2119	; 0x847
 80015ea:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
     calibTable->dacValA_m27[48] = 0x800;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015f4:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
     calibTable->dacValA_m27[49] = 0x87d;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f640 027d 	movw	r2, #2173	; 0x87d
 80015fe:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
     calibTable->dacValA_m27[50] = 0x94a;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f640 124a 	movw	r2, #2378	; 0x94a
 8001608:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0
     calibTable->dacValA_m27[51] = 0x977;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f640 1277 	movw	r2, #2423	; 0x977
 8001612:	f8a3 21d2 	strh.w	r2, [r3, #466]	; 0x1d2
     calibTable->dacValA_m27[52] = 0x7de;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f240 72de 	movw	r2, #2014	; 0x7de
 800161c:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
     calibTable->dacValA_m27[53] = 0x864;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f640 0264 	movw	r2, #2148	; 0x864
 8001626:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
     calibTable->dacValA_m27[54] = 0x974;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f640 1274 	movw	r2, #2420	; 0x974
 8001630:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
     calibTable->dacValA_m27[55] = 0x90f;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f640 120f 	movw	r2, #2319	; 0x90f
 800163a:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da
     calibTable->dacValA_m27[56] = 0x8dd;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f640 02dd 	movw	r2, #2269	; 0x8dd
 8001644:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
     calibTable->dacValA_m27[57] = 0x874;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f640 0274 	movw	r2, #2164	; 0x874
 800164e:	f8a3 21de 	strh.w	r2, [r3, #478]	; 0x1de
     calibTable->dacValA_m27[58] = 0x7d4;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8001658:	f8a3 21e0 	strh.w	r2, [r3, #480]	; 0x1e0
     calibTable->dacValA_m27[59] = 0x7e3;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f240 72e3 	movw	r2, #2019	; 0x7e3
 8001662:	f8a3 21e2 	strh.w	r2, [r3, #482]	; 0x1e2
     calibTable->dacValA_m27[60] = 0x7e8;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 800166c:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
     calibTable->dacValA_m27[61] = 0x914;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f640 1214 	movw	r2, #2324	; 0x914
 8001676:	f8a3 21e6 	strh.w	r2, [r3, #486]	; 0x1e6
     calibTable->dacValA_m27[62] = 0x9d3;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f640 12d3 	movw	r2, #2515	; 0x9d3
 8001680:	f8a3 21e8 	strh.w	r2, [r3, #488]	; 0x1e8
     calibTable->dacValA_m27[63] = 0x919;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f640 1219 	movw	r2, #2329	; 0x919
 800168a:	f8a3 21ea 	strh.w	r2, [r3, #490]	; 0x1ea
     calibTable->dacValA_m27[64] = 0x8fb;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8001694:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
     calibTable->dacValA_m27[65] = 0x7e4;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f240 72e4 	movw	r2, #2020	; 0x7e4
 800169e:	f8a3 21ee 	strh.w	r2, [r3, #494]	; 0x1ee
     calibTable->dacValA_m27[66] = 0x86b;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f640 026b 	movw	r2, #2155	; 0x86b
 80016a8:	f8a3 21f0 	strh.w	r2, [r3, #496]	; 0x1f0
     calibTable->dacValA_m27[67] = 0x814;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f640 0214 	movw	r2, #2068	; 0x814
 80016b2:	f8a3 21f2 	strh.w	r2, [r3, #498]	; 0x1f2
     calibTable->dacValA_m27[68] = 0x823;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f640 0223 	movw	r2, #2083	; 0x823
 80016bc:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
     calibTable->dacValA_m27[69] = 0x826;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f640 0226 	movw	r2, #2086	; 0x826
 80016c6:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
     calibTable->dacValA_m27[70] = 0x8af;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f640 02af 	movw	r2, #2223	; 0x8af
 80016d0:	f8a3 21f8 	strh.w	r2, [r3, #504]	; 0x1f8
     calibTable->dacValA_m27[71] = 0x804;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f640 0204 	movw	r2, #2052	; 0x804
 80016da:	f8a3 21fa 	strh.w	r2, [r3, #506]	; 0x1fa
     calibTable->dacValA_m27[72] = 0xa44;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f640 2244 	movw	r2, #2628	; 0xa44
 80016e4:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
     calibTable->dacValA_m27[73] = 0x7ef;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f240 72ef 	movw	r2, #2031	; 0x7ef
 80016ee:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
     calibTable->dacValA_m27[74] = 0x8f0;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f44f 620f 	mov.w	r2, #2288	; 0x8f0
 80016f8:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
     calibTable->dacValA_m27[75] = 0x853;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f640 0253 	movw	r2, #2131	; 0x853
 8001702:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
     calibTable->dacValA_m27[76] = 0x7d4;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f240 72d4 	movw	r2, #2004	; 0x7d4
 800170c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
     calibTable->dacValA_m27[77] = 0x900;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8001716:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
     calibTable->dacValA_m27[78] = 0x949;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f640 1249 	movw	r2, #2377	; 0x949
 8001720:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
     calibTable->dacValA_m27[79] = 0x951;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f640 1251 	movw	r2, #2385	; 0x951
 800172a:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
     calibTable->dacValA_m27[80] = 0xa80;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f44f 6228 	mov.w	r2, #2688	; 0xa80
 8001734:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
     calibTable->dacValA_m27[81] = 0x832;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f640 0232 	movw	r2, #2098	; 0x832
 800173e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
     calibTable->dacValA_m27[82] = 0x899;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f640 0299 	movw	r2, #2201	; 0x899
 8001748:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
     calibTable->dacValA_m27[83] = 0x879;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f640 0279 	movw	r2, #2169	; 0x879
 8001752:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
     calibTable->dacValA_m27[84] = 0xac1;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f640 22c1 	movw	r2, #2753	; 0xac1
 800175c:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
     calibTable->dacValA_m27[85] = 0x8b7;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f640 02b7 	movw	r2, #2231	; 0x8b7
 8001766:	f8a3 2216 	strh.w	r2, [r3, #534]	; 0x216
     calibTable->dacValA_m27[86] = 0x8dd;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f640 02dd 	movw	r2, #2269	; 0x8dd
 8001770:	f8a3 2218 	strh.w	r2, [r3, #536]	; 0x218
     calibTable->dacValA_m27[87] = 0x7d0;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800177a:	f8a3 221a 	strh.w	r2, [r3, #538]	; 0x21a
     calibTable->dacValA_m27[88] = 0x897;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f640 0297 	movw	r2, #2199	; 0x897
 8001784:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
     calibTable->dacValA_m27[89] = 0x7d3;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f240 72d3 	movw	r2, #2003	; 0x7d3
 800178e:	f8a3 221e 	strh.w	r2, [r3, #542]	; 0x21e
     calibTable->dacValA_m27[90] = 0x94b;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f640 124b 	movw	r2, #2379	; 0x94b
 8001798:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
     calibTable->dacValA_m27[91] = 0x8e9;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f640 02e9 	movw	r2, #2281	; 0x8e9
 80017a2:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
     calibTable->dacValA_m27[92] = 0x8e9;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f640 02e9 	movw	r2, #2281	; 0x8e9
 80017ac:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
     calibTable->dacValA_m27[93] = 0x7da;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f240 72da 	movw	r2, #2010	; 0x7da
 80017b6:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226
     calibTable->dacValA_m27[94] = 0x836;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f640 0236 	movw	r2, #2102	; 0x836
 80017c0:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
     calibTable->dacValA_m27[95] = 0x802;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f640 0202 	movw	r2, #2050	; 0x802
 80017ca:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a
     calibTable->dacValA_m27[96] = 0x836;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f640 0236 	movw	r2, #2102	; 0x836
 80017d4:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
     calibTable->dacValA_m27[97] = 0x802;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f640 0202 	movw	r2, #2050	; 0x802
 80017de:	f8a3 222e 	strh.w	r2, [r3, #558]	; 0x22e
     calibTable->dacValA_m27[98] = 0x8cc;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f640 02cc 	movw	r2, #2252	; 0x8cc
 80017e8:	f8a3 2230 	strh.w	r2, [r3, #560]	; 0x230
     calibTable->dacValA_m27[99] = 0x8e3;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f640 02e3 	movw	r2, #2275	; 0x8e3
 80017f2:	f8a3 2232 	strh.w	r2, [r3, #562]	; 0x232
     calibTable->dacValA_m27[100] = 0x8cc;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f640 02cc 	movw	r2, #2252	; 0x8cc
 80017fc:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
     calibTable->dacValA_m27[101] = 0x917;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f640 1217 	movw	r2, #2327	; 0x917
 8001806:	f8a3 2236 	strh.w	r2, [r3, #566]	; 0x236
     calibTable->dacValA_m27[102] = 0x917;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f640 1217 	movw	r2, #2327	; 0x917
 8001810:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
     calibTable->dacValA_m27[103] = 0x931;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f640 1231 	movw	r2, #2353	; 0x931
 800181a:	f8a3 223a 	strh.w	r2, [r3, #570]	; 0x23a
     calibTable->dacValA_m27[104] = 0x930;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001824:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
     calibTable->dacValA_m27[105] = 0xb95;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f640 3295 	movw	r2, #2965	; 0xb95
 800182e:	f8a3 223e 	strh.w	r2, [r3, #574]	; 0x23e
     calibTable->dacValA_m27[106] = 0xb90;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f44f 6239 	mov.w	r2, #2960	; 0xb90
 8001838:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
     calibTable->dacValA_m27[107] = 0xbc2;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f640 32c2 	movw	r2, #3010	; 0xbc2
 8001842:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
     calibTable->dacValA_m27[108] = 0x962;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f640 1262 	movw	r2, #2402	; 0x962
 800184c:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
     calibTable->dacValA_m27[109] = 0x992;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f640 1292 	movw	r2, #2450	; 0x992
 8001856:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
     calibTable->dacValA_m27[110] = 0x992;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f640 1292 	movw	r2, #2450	; 0x992
 8001860:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
     calibTable->dacValA_m27[111] = 0x9ab;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f640 12ab 	movw	r2, #2475	; 0x9ab
 800186a:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
     calibTable->dacValA_m27[112] = 0x994;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f640 1294 	movw	r2, #2452	; 0x994
 8001874:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
     calibTable->dacValA_m27[113] = 0xa9f;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f640 229f 	movw	r2, #2719	; 0xa9f
 800187e:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e
     calibTable->dacValA_m27[114] = 0xbd0;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
 8001888:	f8a3 2250 	strh.w	r2, [r3, #592]	; 0x250
     calibTable->dacValA_m27[115] = 0xbea;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f640 32ea 	movw	r2, #3050	; 0xbea
 8001892:	f8a3 2252 	strh.w	r2, [r3, #594]	; 0x252
     calibTable->dacValA_m27[116] = 0x9c6;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f640 12c6 	movw	r2, #2502	; 0x9c6
 800189c:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
     calibTable->dacValA_m27[117] = 0xb31;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f640 3231 	movw	r2, #2865	; 0xb31
 80018a6:	f8a3 2256 	strh.w	r2, [r3, #598]	; 0x256
     calibTable->dacValA_m27[118] = 0xc1c;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f640 421c 	movw	r2, #3100	; 0xc1c
 80018b0:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
     calibTable->dacValA_m27[119] = 0x9ec;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f640 12ec 	movw	r2, #2540	; 0x9ec
 80018ba:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
     calibTable->dacValA_m27[120] = 0x9f8;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f640 12f8 	movw	r2, #2552	; 0x9f8
 80018c4:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
     calibTable->dacValA_m27[121] = 0xa0f;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f640 220f 	movw	r2, #2575	; 0xa0f
 80018ce:	f8a3 225e 	strh.w	r2, [r3, #606]	; 0x25e
     calibTable->dacValA_m27[122] = 0x9fa;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f640 12fa 	movw	r2, #2554	; 0x9fa
 80018d8:	f8a3 2260 	strh.w	r2, [r3, #608]	; 0x260
     calibTable->dacValA_m27[123] = 0xc46;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f640 4246 	movw	r2, #3142	; 0xc46
 80018e2:	f8a3 2262 	strh.w	r2, [r3, #610]	; 0x262
     calibTable->dacValA_m27[124] = 0xc43;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f640 4243 	movw	r2, #3139	; 0xc43
 80018ec:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
     calibTable->dacValA_m27[125] = 0xa1e;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f640 221e 	movw	r2, #2590	; 0xa1e
 80018f6:	f8a3 2266 	strh.w	r2, [r3, #614]	; 0x266
     calibTable->dacValA_m27[126] = 0xa32;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f640 2232 	movw	r2, #2610	; 0xa32
 8001900:	f8a3 2268 	strh.w	r2, [r3, #616]	; 0x268
     calibTable->dacValA_m27[127] = 0xa32;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f640 2232 	movw	r2, #2610	; 0xa32
 800190a:	f8a3 226a 	strh.w	r2, [r3, #618]	; 0x26a
     calibTable->dacValA_m27[128] = 0xa39;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f640 2239 	movw	r2, #2617	; 0xa39
 8001914:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
     calibTable->dacValA_m27[129] = 0xa50;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f44f 6225 	mov.w	r2, #2640	; 0xa50
 800191e:	f8a3 226e 	strh.w	r2, [r3, #622]	; 0x26e
     calibTable->dacValA_m27[130] = 0xcb0;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f44f 624b 	mov.w	r2, #3248	; 0xcb0
 8001928:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
     calibTable->dacValA_m27[131] = 0xa5a;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f640 225a 	movw	r2, #2650	; 0xa5a
 8001932:	f8a3 2272 	strh.w	r2, [r3, #626]	; 0x272
     calibTable->dacValA_m27[132] = 0xa64;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f640 2264 	movw	r2, #2660	; 0xa64
 800193c:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
     calibTable->dacValA_m27[133] = 0xcb0;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f44f 624b 	mov.w	r2, #3248	; 0xcb0
 8001946:	f8a3 2276 	strh.w	r2, [r3, #630]	; 0x276
     calibTable->dacValA_m27[134] = 0xa76;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f640 2276 	movw	r2, #2678	; 0xa76
 8001950:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
     calibTable->dacValA_m27[135] = 0xcbf;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f640 42bf 	movw	r2, #3263	; 0xcbf
 800195a:	f8a3 227a 	strh.w	r2, [r3, #634]	; 0x27a
     calibTable->dacValA_m27[136] = 0xa8c;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001964:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
     calibTable->dacValA_m27[137] = 0xa95;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f640 2295 	movw	r2, #2709	; 0xa95
 800196e:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
     calibTable->dacValA_m27[138] = 0xcd9;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f640 42d9 	movw	r2, #3289	; 0xcd9
 8001978:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
     calibTable->dacValA_m27[139] = 0xaaa;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f640 22aa 	movw	r2, #2730	; 0xaaa
 8001982:	f8a3 2282 	strh.w	r2, [r3, #642]	; 0x282
     calibTable->dacValA_m27[140] = 0xbcb;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f640 32cb 	movw	r2, #3019	; 0xbcb
 800198c:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
     calibTable->dacValA_m27[141] = 0xbcf;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f640 32cf 	movw	r2, #3023	; 0xbcf
 8001996:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
     calibTable->dacValA_m27[142] = 0xacb;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f640 22cb 	movw	r2, #2763	; 0xacb
 80019a0:	f8a3 2288 	strh.w	r2, [r3, #648]	; 0x288
     calibTable->dacValA_m27[143] = 0xae1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f640 22e1 	movw	r2, #2785	; 0xae1
 80019aa:	f8a3 228a 	strh.w	r2, [r3, #650]	; 0x28a
     calibTable->dacValA_m27[144] = 0xaeb;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f640 22eb 	movw	r2, #2795	; 0xaeb
 80019b4:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
     calibTable->dacValA_m27[145] = 0xaeb;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f640 22eb 	movw	r2, #2795	; 0xaeb
 80019be:	f8a3 228e 	strh.w	r2, [r3, #654]	; 0x28e
     calibTable->dacValA_m27[146] = 0xaec;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f640 22ec 	movw	r2, #2796	; 0xaec
 80019c8:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
     calibTable->dacValA_m27[147] = 0xaf4;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f640 22f4 	movw	r2, #2804	; 0xaf4
 80019d2:	f8a3 2292 	strh.w	r2, [r3, #658]	; 0x292
     calibTable->dacValA_m27[148] = 0xafc;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f640 22fc 	movw	r2, #2812	; 0xafc
 80019dc:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
     calibTable->dacValA_m27[149] = 0xc38;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f640 4238 	movw	r2, #3128	; 0xc38
 80019e6:	f8a3 2296 	strh.w	r2, [r3, #662]	; 0x296
     calibTable->dacValA_m27[150] = 0xb18;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f640 3218 	movw	r2, #2840	; 0xb18
 80019f0:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
     calibTable->dacValA_m27[151] = 0xb11;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f640 3211 	movw	r2, #2833	; 0xb11
 80019fa:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
     calibTable->dacValA_m27[152] = 0xb27;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f640 3227 	movw	r2, #2855	; 0xb27
 8001a04:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
     calibTable->dacValA_m27[153] = 0xb25;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f640 3225 	movw	r2, #2853	; 0xb25
 8001a0e:	f8a3 229e 	strh.w	r2, [r3, #670]	; 0x29e
     calibTable->dacValA_m27[154] = 0xb2c;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f640 322c 	movw	r2, #2860	; 0xb2c
 8001a18:	f8a3 22a0 	strh.w	r2, [r3, #672]	; 0x2a0
     calibTable->dacValA_m27[155] = 0xb31;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f640 3231 	movw	r2, #2865	; 0xb31
 8001a22:	f8a3 22a2 	strh.w	r2, [r3, #674]	; 0x2a2
     calibTable->dacValA_m27[156] = 0xb45;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f640 3245 	movw	r2, #2885	; 0xb45
 8001a2c:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
     calibTable->dacValA_m27[157] = 0xb56;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f640 3256 	movw	r2, #2902	; 0xb56
 8001a36:	f8a3 22a6 	strh.w	r2, [r3, #678]	; 0x2a6
     calibTable->dacValA_m27[158] = 0xb54;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f640 3254 	movw	r2, #2900	; 0xb54
 8001a40:	f8a3 22a8 	strh.w	r2, [r3, #680]	; 0x2a8
     calibTable->dacValA_m27[159] = 0xb56;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f640 3256 	movw	r2, #2902	; 0xb56
 8001a4a:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
     calibTable->dacValA_m27[160] = 0xb63;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f640 3263 	movw	r2, #2915	; 0xb63
 8001a54:	f8a3 22ac 	strh.w	r2, [r3, #684]	; 0x2ac
     calibTable->dacValA_m27[161] = 0xb62;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f640 3262 	movw	r2, #2914	; 0xb62
 8001a5e:	f8a3 22ae 	strh.w	r2, [r3, #686]	; 0x2ae
     calibTable->dacValA_m27[162] = 0x1000;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a68:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0

     calibTable->dacValB_m27[0] = 0x0;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f8a3 22b2 	strh.w	r2, [r3, #690]	; 0x2b2
     calibTable->dacValB_m27[1] = 0x1c1;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001a7a:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
     calibTable->dacValB_m27[2] = 0x1d5;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001a84:	f8a3 22b6 	strh.w	r2, [r3, #694]	; 0x2b6
     calibTable->dacValB_m27[3] = 0x1d5;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001a8e:	f8a3 22b8 	strh.w	r2, [r3, #696]	; 0x2b8
     calibTable->dacValB_m27[4] = 0x1d5;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001a98:	f8a3 22ba 	strh.w	r2, [r3, #698]	; 0x2ba
     calibTable->dacValB_m27[5] = 0x1d5;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001aa2:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
     calibTable->dacValB_m27[6] = 0x1d5;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001aac:	f8a3 22be 	strh.w	r2, [r3, #702]	; 0x2be
     calibTable->dacValB_m27[7] = 0x1d5;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001ab6:	f8a3 22c0 	strh.w	r2, [r3, #704]	; 0x2c0
     calibTable->dacValB_m27[8] = 0x1d9;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f240 12d9 	movw	r2, #473	; 0x1d9
 8001ac0:	f8a3 22c2 	strh.w	r2, [r3, #706]	; 0x2c2
     calibTable->dacValB_m27[9] = 0x1f8;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8001aca:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
     calibTable->dacValB_m27[10] = 0x1bb;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001ad4:	f8a3 22c6 	strh.w	r2, [r3, #710]	; 0x2c6
     calibTable->dacValB_m27[11] = 0x1bb;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001ade:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
     calibTable->dacValB_m27[12] = 0x1bb;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001ae8:	f8a3 22ca 	strh.w	r2, [r3, #714]	; 0x2ca
     calibTable->dacValB_m27[13] = 0x571;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f240 5271 	movw	r2, #1393	; 0x571
 8001af2:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
     calibTable->dacValB_m27[14] = 0x1bb;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001afc:	f8a3 22ce 	strh.w	r2, [r3, #718]	; 0x2ce
     calibTable->dacValB_m27[15] = 0x283;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f240 2283 	movw	r2, #643	; 0x283
 8001b06:	f8a3 22d0 	strh.w	r2, [r3, #720]	; 0x2d0
     calibTable->dacValB_m27[16] = 0x1cf;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f240 12cf 	movw	r2, #463	; 0x1cf
 8001b10:	f8a3 22d2 	strh.w	r2, [r3, #722]	; 0x2d2
     calibTable->dacValB_m27[17] = 0x1c9;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f240 12c9 	movw	r2, #457	; 0x1c9
 8001b1a:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
     calibTable->dacValB_m27[18] = 0x1bf;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001b24:	f8a3 22d6 	strh.w	r2, [r3, #726]	; 0x2d6
     calibTable->dacValB_m27[19] = 0x1bb;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001b2e:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8
     calibTable->dacValB_m27[20] = 0x21f;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f240 221f 	movw	r2, #543	; 0x21f
 8001b38:	f8a3 22da 	strh.w	r2, [r3, #730]	; 0x2da
     calibTable->dacValB_m27[21] = 0x1cf;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f240 12cf 	movw	r2, #463	; 0x1cf
 8001b42:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
     calibTable->dacValB_m27[22] = 0x1e8;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001b4c:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
     calibTable->dacValB_m27[23] = 0x1e8;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001b56:	f8a3 22e0 	strh.w	r2, [r3, #736]	; 0x2e0
     calibTable->dacValB_m27[24] = 0x1cf;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f240 12cf 	movw	r2, #463	; 0x1cf
 8001b60:	f8a3 22e2 	strh.w	r2, [r3, #738]	; 0x2e2
     calibTable->dacValB_m27[25] = 0x1e8;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001b6a:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
     calibTable->dacValB_m27[26] = 0x7d3;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f240 72d3 	movw	r2, #2003	; 0x7d3
 8001b74:	f8a3 22e6 	strh.w	r2, [r3, #742]	; 0x2e6
     calibTable->dacValB_m27[27] = 0x80b;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f640 020b 	movw	r2, #2059	; 0x80b
 8001b7e:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8
     calibTable->dacValB_m27[28] = 0x857;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f640 0257 	movw	r2, #2135	; 0x857
 8001b88:	f8a3 22ea 	strh.w	r2, [r3, #746]	; 0x2ea
     calibTable->dacValB_m27[29] = 0x875;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f640 0275 	movw	r2, #2165	; 0x875
 8001b92:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec
     calibTable->dacValB_m27[30] = 0x866;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f640 0266 	movw	r2, #2150	; 0x866
 8001b9c:	f8a3 22ee 	strh.w	r2, [r3, #750]	; 0x2ee
     calibTable->dacValB_m27[31] = 0x7d0;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ba6:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
     calibTable->dacValB_m27[32] = 0x877;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f640 0277 	movw	r2, #2167	; 0x877
 8001bb0:	f8a3 22f2 	strh.w	r2, [r3, #754]	; 0x2f2
     calibTable->dacValB_m27[33] = 0x8a7;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f640 02a7 	movw	r2, #2215	; 0x8a7
 8001bba:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
     calibTable->dacValB_m27[34] = 0x8a2;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f640 02a2 	movw	r2, #2210	; 0x8a2
 8001bc4:	f8a3 22f6 	strh.w	r2, [r3, #758]	; 0x2f6
     calibTable->dacValB_m27[35] = 0x7f7;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f240 72f7 	movw	r2, #2039	; 0x7f7
 8001bce:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
     calibTable->dacValB_m27[36] = 0x857;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f640 0257 	movw	r2, #2135	; 0x857
 8001bd8:	f8a3 22fa 	strh.w	r2, [r3, #762]	; 0x2fa
     calibTable->dacValB_m27[37] = 0x829;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f640 0229 	movw	r2, #2089	; 0x829
 8001be2:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
     calibTable->dacValB_m27[38] = 0x8f2;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f640 02f2 	movw	r2, #2290	; 0x8f2
 8001bec:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
     calibTable->dacValB_m27[39] = 0x897;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f640 0297 	movw	r2, #2199	; 0x897
 8001bf6:	f8a3 2300 	strh.w	r2, [r3, #768]	; 0x300
     calibTable->dacValB_m27[40] = 0x8cc;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f640 02cc 	movw	r2, #2252	; 0x8cc
 8001c00:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
     calibTable->dacValB_m27[41] = 0x8ca;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001c0a:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
     calibTable->dacValB_m27[42] = 0x81f;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f640 021f 	movw	r2, #2079	; 0x81f
 8001c14:	f8a3 2306 	strh.w	r2, [r3, #774]	; 0x306
     calibTable->dacValB_m27[43] = 0x7de;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f240 72de 	movw	r2, #2014	; 0x7de
 8001c1e:	f8a3 2308 	strh.w	r2, [r3, #776]	; 0x308
     calibTable->dacValB_m27[44] = 0x864;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f640 0264 	movw	r2, #2148	; 0x864
 8001c28:	f8a3 230a 	strh.w	r2, [r3, #778]	; 0x30a
     calibTable->dacValB_m27[45] = 0x8ce;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f640 02ce 	movw	r2, #2254	; 0x8ce
 8001c32:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
     calibTable->dacValB_m27[46] = 0x8d9;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f640 02d9 	movw	r2, #2265	; 0x8d9
 8001c3c:	f8a3 230e 	strh.w	r2, [r3, #782]	; 0x30e
     calibTable->dacValB_m27[47] = 0x870;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f44f 6207 	mov.w	r2, #2160	; 0x870
 8001c46:	f8a3 2310 	strh.w	r2, [r3, #784]	; 0x310
     calibTable->dacValB_m27[48] = 0x7de;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f240 72de 	movw	r2, #2014	; 0x7de
 8001c50:	f8a3 2312 	strh.w	r2, [r3, #786]	; 0x312
     calibTable->dacValB_m27[49] = 0x80b;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f640 020b 	movw	r2, #2059	; 0x80b
 8001c5a:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
     calibTable->dacValB_m27[50] = 0x95b;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f640 125b 	movw	r2, #2395	; 0x95b
 8001c64:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316
     calibTable->dacValB_m27[51] = 0x89c;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f640 029c 	movw	r2, #2204	; 0x89c
 8001c6e:	f8a3 2318 	strh.w	r2, [r3, #792]	; 0x318
     calibTable->dacValB_m27[52] = 0x95b;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f640 125b 	movw	r2, #2395	; 0x95b
 8001c78:	f8a3 231a 	strh.w	r2, [r3, #794]	; 0x31a
     calibTable->dacValB_m27[53] = 0x7e2;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f240 72e2 	movw	r2, #2018	; 0x7e2
 8001c82:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
     calibTable->dacValB_m27[54] = 0x8ce;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f640 02ce 	movw	r2, #2254	; 0x8ce
 8001c8c:	f8a3 231e 	strh.w	r2, [r3, #798]	; 0x31e
     calibTable->dacValB_m27[55] = 0x974;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f640 1274 	movw	r2, #2420	; 0x974
 8001c96:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
     calibTable->dacValB_m27[56] = 0x7e7;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8001ca0:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
     calibTable->dacValB_m27[57] = 0x801;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f640 0201 	movw	r2, #2049	; 0x801
 8001caa:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
     calibTable->dacValB_m27[58] = 0x864;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f640 0264 	movw	r2, #2148	; 0x864
 8001cb4:	f8a3 2326 	strh.w	r2, [r3, #806]	; 0x326
     calibTable->dacValB_m27[59] = 0x8a1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f640 02a1 	movw	r2, #2209	; 0x8a1
 8001cbe:	f8a3 2328 	strh.w	r2, [r3, #808]	; 0x328
     calibTable->dacValB_m27[60] = 0x988;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f640 1288 	movw	r2, #2440	; 0x988
 8001cc8:	f8a3 232a 	strh.w	r2, [r3, #810]	; 0x32a
     calibTable->dacValB_m27[61] = 0x7e3;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f240 72e3 	movw	r2, #2019	; 0x7e3
 8001cd2:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
     calibTable->dacValB_m27[62] = 0x864;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f640 0264 	movw	r2, #2148	; 0x864
 8001cdc:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
     calibTable->dacValB_m27[63] = 0x92a;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f640 122a 	movw	r2, #2346	; 0x92a
 8001ce6:	f8a3 2330 	strh.w	r2, [r3, #816]	; 0x330
     calibTable->dacValB_m27[64] = 0x7fc;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001cf0:	f8a3 2332 	strh.w	r2, [r3, #818]	; 0x332
     calibTable->dacValB_m27[65] = 0x897;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f640 0297 	movw	r2, #2199	; 0x897
 8001cfa:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
     calibTable->dacValB_m27[66] = 0x892;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f640 0292 	movw	r2, #2194	; 0x892
 8001d04:	f8a3 2336 	strh.w	r2, [r3, #822]	; 0x336
     calibTable->dacValB_m27[67] = 0x8af;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f640 02af 	movw	r2, #2223	; 0x8af
 8001d0e:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
     calibTable->dacValB_m27[68] = 0x83a;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f640 023a 	movw	r2, #2106	; 0x83a
 8001d18:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
     calibTable->dacValB_m27[69] = 0x810;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f44f 6201 	mov.w	r2, #2064	; 0x810
 8001d22:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
     calibTable->dacValB_m27[70] = 0x83a;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f640 023a 	movw	r2, #2106	; 0x83a
 8001d2c:	f8a3 233e 	strh.w	r2, [r3, #830]	; 0x33e
     calibTable->dacValB_m27[71] = 0x7d4;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8001d36:	f8a3 2340 	strh.w	r2, [r3, #832]	; 0x340
     calibTable->dacValB_m27[72] = 0x914;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f640 1214 	movw	r2, #2324	; 0x914
 8001d40:	f8a3 2342 	strh.w	r2, [r3, #834]	; 0x342
     calibTable->dacValB_m27[73] = 0x7d6;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f240 72d6 	movw	r2, #2006	; 0x7d6
 8001d4a:	f8a3 2344 	strh.w	r2, [r3, #836]	; 0x344
     calibTable->dacValB_m27[74] = 0x8e8;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f640 02e8 	movw	r2, #2280	; 0x8e8
 8001d54:	f8a3 2346 	strh.w	r2, [r3, #838]	; 0x346
     calibTable->dacValB_m27[75] = 0x7e8;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 8001d5e:	f8a3 2348 	strh.w	r2, [r3, #840]	; 0x348
     calibTable->dacValB_m27[76] = 0x8e7;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f640 02e7 	movw	r2, #2279	; 0x8e7
 8001d68:	f8a3 234a 	strh.w	r2, [r3, #842]	; 0x34a
     calibTable->dacValB_m27[77] = 0x8fa;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f640 02fa 	movw	r2, #2298	; 0x8fa
 8001d72:	f8a3 234c 	strh.w	r2, [r3, #844]	; 0x34c
     calibTable->dacValB_m27[78] = 0xa82;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f640 2282 	movw	r2, #2690	; 0xa82
 8001d7c:	f8a3 234e 	strh.w	r2, [r3, #846]	; 0x34e
     calibTable->dacValB_m27[79] = 0x86c;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f640 026c 	movw	r2, #2156	; 0x86c
 8001d86:	f8a3 2350 	strh.w	r2, [r3, #848]	; 0x350
     calibTable->dacValB_m27[80] = 0x906;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f640 1206 	movw	r2, #2310	; 0x906
 8001d90:	f8a3 2352 	strh.w	r2, [r3, #850]	; 0x352
     calibTable->dacValB_m27[81] = 0x8f8;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f640 02f8 	movw	r2, #2296	; 0x8f8
 8001d9a:	f8a3 2354 	strh.w	r2, [r3, #852]	; 0x354
     calibTable->dacValB_m27[82] = 0x885;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f640 0285 	movw	r2, #2181	; 0x885
 8001da4:	f8a3 2356 	strh.w	r2, [r3, #854]	; 0x356
     calibTable->dacValB_m27[83] = 0x884;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f640 0284 	movw	r2, #2180	; 0x884
 8001dae:	f8a3 2358 	strh.w	r2, [r3, #856]	; 0x358
     calibTable->dacValB_m27[84] = 0x930;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001db8:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a
     calibTable->dacValB_m27[85] = 0x865;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f640 0265 	movw	r2, #2149	; 0x865
 8001dc2:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
     calibTable->dacValB_m27[86] = 0x8d0;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f44f 620d 	mov.w	r2, #2256	; 0x8d0
 8001dcc:	f8a3 235e 	strh.w	r2, [r3, #862]	; 0x35e
     calibTable->dacValB_m27[87] = 0x7e7;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8001dd6:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
     calibTable->dacValB_m27[88] = 0x8b9;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f640 02b9 	movw	r2, #2233	; 0x8b9
 8001de0:	f8a3 2362 	strh.w	r2, [r3, #866]	; 0x362
     calibTable->dacValB_m27[89] = 0xab4;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f640 22b4 	movw	r2, #2740	; 0xab4
 8001dea:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
     calibTable->dacValB_m27[90] = 0x8c8;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f640 02c8 	movw	r2, #2248	; 0x8c8
 8001df4:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
     calibTable->dacValB_m27[91] = 0x8e9;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f640 02e9 	movw	r2, #2281	; 0x8e9
 8001dfe:	f8a3 2368 	strh.w	r2, [r3, #872]	; 0x368
     calibTable->dacValB_m27[92] = 0xaff;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f640 22ff 	movw	r2, #2815	; 0xaff
 8001e08:	f8a3 236a 	strh.w	r2, [r3, #874]	; 0x36a
     calibTable->dacValB_m27[93] = 0x7da;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f240 72da 	movw	r2, #2010	; 0x7da
 8001e12:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
     calibTable->dacValB_m27[94] = 0x804;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f640 0204 	movw	r2, #2052	; 0x804
 8001e1c:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
     calibTable->dacValB_m27[95] = 0x7da;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f240 72da 	movw	r2, #2010	; 0x7da
 8001e26:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
     calibTable->dacValB_m27[96] = 0x804;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f640 0204 	movw	r2, #2052	; 0x804
 8001e30:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
     calibTable->dacValB_m27[97] = 0x7da;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f240 72da 	movw	r2, #2010	; 0x7da
 8001e3a:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
     calibTable->dacValB_m27[98] = 0x8ca;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001e44:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
     calibTable->dacValB_m27[99] = 0x947;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f640 1247 	movw	r2, #2375	; 0x947
 8001e4e:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
     calibTable->dacValB_m27[100] = 0x8fe;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f640 02fe 	movw	r2, #2302	; 0x8fe
 8001e58:	f8a3 237a 	strh.w	r2, [r3, #890]	; 0x37a
     calibTable->dacValB_m27[101] = 0x8fc;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001e62:	f8a3 237c 	strh.w	r2, [r3, #892]	; 0x37c
     calibTable->dacValB_m27[102] = 0x8ed;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f640 02ed 	movw	r2, #2285	; 0x8ed
 8001e6c:	f8a3 237e 	strh.w	r2, [r3, #894]	; 0x37e
     calibTable->dacValB_m27[103] = 0x989;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f640 1289 	movw	r2, #2441	; 0x989
 8001e76:	f8a3 2380 	strh.w	r2, [r3, #896]	; 0x380
     calibTable->dacValB_m27[104] = 0x92e;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f640 122e 	movw	r2, #2350	; 0x92e
 8001e80:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382
     calibTable->dacValB_m27[105] = 0x930;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001e8a:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
     calibTable->dacValB_m27[106] = 0x9cf;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f640 12cf 	movw	r2, #2511	; 0x9cf
 8001e94:	f8a3 2386 	strh.w	r2, [r3, #902]	; 0x386
     calibTable->dacValB_m27[107] = 0x979;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f640 1279 	movw	r2, #2425	; 0x979
 8001e9e:	f8a3 2388 	strh.w	r2, [r3, #904]	; 0x388
     calibTable->dacValB_m27[108] = 0x9cf;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f640 12cf 	movw	r2, #2511	; 0x9cf
 8001ea8:	f8a3 238a 	strh.w	r2, [r3, #906]	; 0x38a
     calibTable->dacValB_m27[109] = 0x979;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f640 1279 	movw	r2, #2425	; 0x979
 8001eb2:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
     calibTable->dacValB_m27[110] = 0x9e6;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f640 12e6 	movw	r2, #2534	; 0x9e6
 8001ebc:	f8a3 238e 	strh.w	r2, [r3, #910]	; 0x38e
     calibTable->dacValB_m27[111] = 0x9fc;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f640 12fc 	movw	r2, #2556	; 0x9fc
 8001ec6:	f8a3 2390 	strh.w	r2, [r3, #912]	; 0x390
     calibTable->dacValB_m27[112] = 0x992;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f640 1292 	movw	r2, #2450	; 0x992
 8001ed0:	f8a3 2392 	strh.w	r2, [r3, #914]	; 0x392
     calibTable->dacValB_m27[113] = 0xaa9;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8001eda:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
     calibTable->dacValB_m27[114] = 0xbd0;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
 8001ee4:	f8a3 2396 	strh.w	r2, [r3, #918]	; 0x396
     calibTable->dacValB_m27[115] = 0xc1c;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f640 421c 	movw	r2, #3100	; 0xc1c
 8001eee:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
     calibTable->dacValB_m27[116] = 0x9c6;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f640 12c6 	movw	r2, #2502	; 0x9c6
 8001ef8:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
     calibTable->dacValB_m27[117] = 0xb2b;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f640 322b 	movw	r2, #2859	; 0xb2b
 8001f02:	f8a3 239c 	strh.w	r2, [r3, #924]	; 0x39c
     calibTable->dacValB_m27[118] = 0x9d8;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f640 12d8 	movw	r2, #2520	; 0x9d8
 8001f0c:	f8a3 239e 	strh.w	r2, [r3, #926]	; 0x39e
     calibTable->dacValB_m27[119] = 0xc1f;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f640 421f 	movw	r2, #3103	; 0xc1f
 8001f16:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
     calibTable->dacValB_m27[120] = 0xb5d;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f640 325d 	movw	r2, #2909	; 0xb5d
 8001f20:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
     calibTable->dacValB_m27[121] = 0xc50;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f44f 6245 	mov.w	r2, #3152	; 0xc50
 8001f2a:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4
     calibTable->dacValB_m27[122] = 0xc4e;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f640 424e 	movw	r2, #3150	; 0xc4e
 8001f34:	f8a3 23a6 	strh.w	r2, [r3, #934]	; 0x3a6
     calibTable->dacValB_m27[123] = 0xc4c;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f640 424c 	movw	r2, #3148	; 0xc4c
 8001f3e:	f8a3 23a8 	strh.w	r2, [r3, #936]	; 0x3a8
     calibTable->dacValB_m27[124] = 0xa0e;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f640 220e 	movw	r2, #2574	; 0xa0e
 8001f48:	f8a3 23aa 	strh.w	r2, [r3, #938]	; 0x3aa
     calibTable->dacValB_m27[125] = 0xc76;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f640 4276 	movw	r2, #3190	; 0xc76
 8001f52:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
     calibTable->dacValB_m27[126] = 0xbed;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f640 32ed 	movw	r2, #3053	; 0xbed
 8001f5c:	f8a3 23ae 	strh.w	r2, [r3, #942]	; 0x3ae
     calibTable->dacValB_m27[127] = 0xa2f;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f640 222f 	movw	r2, #2607	; 0xa2f
 8001f66:	f8a3 23b0 	strh.w	r2, [r3, #944]	; 0x3b0
     calibTable->dacValB_m27[128] = 0xa36;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f640 2236 	movw	r2, #2614	; 0xa36
 8001f70:	f8a3 23b2 	strh.w	r2, [r3, #946]	; 0x3b2
     calibTable->dacValB_m27[129] = 0xc80;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001f7a:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
     calibTable->dacValB_m27[130] = 0xc71;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f640 4271 	movw	r2, #3185	; 0xc71
 8001f84:	f8a3 23b6 	strh.w	r2, [r3, #950]	; 0x3b6
     calibTable->dacValB_m27[131] = 0xa55;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f640 2255 	movw	r2, #2645	; 0xa55
 8001f8e:	f8a3 23b8 	strh.w	r2, [r3, #952]	; 0x3b8
     calibTable->dacValB_m27[132] = 0xcac;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f640 42ac 	movw	r2, #3244	; 0xcac
 8001f98:	f8a3 23ba 	strh.w	r2, [r3, #954]	; 0x3ba
     calibTable->dacValB_m27[133] = 0xa6b;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001fa2:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
     calibTable->dacValB_m27[134] = 0xcbb;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f640 42bb 	movw	r2, #3259	; 0xcbb
 8001fac:	f8a3 23be 	strh.w	r2, [r3, #958]	; 0x3be
     calibTable->dacValB_m27[135] = 0xa7d;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f640 227d 	movw	r2, #2685	; 0xa7d
 8001fb6:	f8a3 23c0 	strh.w	r2, [r3, #960]	; 0x3c0
     calibTable->dacValB_m27[136] = 0xb9a;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f640 329a 	movw	r2, #2970	; 0xb9a
 8001fc0:	f8a3 23c2 	strh.w	r2, [r3, #962]	; 0x3c2
     calibTable->dacValB_m27[137] = 0xba7;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f640 32a7 	movw	r2, #2983	; 0xba7
 8001fca:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
     calibTable->dacValB_m27[138] = 0xab4;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f640 22b4 	movw	r2, #2740	; 0xab4
 8001fd4:	f8a3 23c6 	strh.w	r2, [r3, #966]	; 0x3c6
     calibTable->dacValB_m27[139] = 0xbe4;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f640 32e4 	movw	r2, #3044	; 0xbe4
 8001fde:	f8a3 23c8 	strh.w	r2, [r3, #968]	; 0x3c8
     calibTable->dacValB_m27[140] = 0xab4;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f640 22b4 	movw	r2, #2740	; 0xab4
 8001fe8:	f8a3 23ca 	strh.w	r2, [r3, #970]	; 0x3ca
     calibTable->dacValB_m27[141] = 0xbbc;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f640 32bc 	movw	r2, #3004	; 0xbbc
 8001ff2:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
     calibTable->dacValB_m27[142] = 0xbba;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f640 32ba 	movw	r2, #3002	; 0xbba
 8001ffc:	f8a3 23ce 	strh.w	r2, [r3, #974]	; 0x3ce
     calibTable->dacValB_m27[143] = 0xd02;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f640 5202 	movw	r2, #3330	; 0xd02
 8002006:	f8a3 23d0 	strh.w	r2, [r3, #976]	; 0x3d0
     calibTable->dacValB_m27[144] = 0xbf3;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f640 32f3 	movw	r2, #3059	; 0xbf3
 8002010:	f8a3 23d2 	strh.w	r2, [r3, #978]	; 0x3d2
     calibTable->dacValB_m27[145] = 0xaf0;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800201a:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
     calibTable->dacValB_m27[146] = 0xaed;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f640 22ed 	movw	r2, #2797	; 0xaed
 8002024:	f8a3 23d6 	strh.w	r2, [r3, #982]	; 0x3d6
     calibTable->dacValB_m27[147] = 0xaf8;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f640 22f8 	movw	r2, #2808	; 0xaf8
 800202e:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
     calibTable->dacValB_m27[148] = 0xcfc;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f640 42fc 	movw	r2, #3324	; 0xcfc
 8002038:	f8a3 23da 	strh.w	r2, [r3, #986]	; 0x3da
     calibTable->dacValB_m27[149] = 0xc18;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f640 4218 	movw	r2, #3096	; 0xc18
 8002042:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
     calibTable->dacValB_m27[150] = 0xb0b;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f640 320b 	movw	r2, #2827	; 0xb0b
 800204c:	f8a3 23de 	strh.w	r2, [r3, #990]	; 0x3de
     calibTable->dacValB_m27[151] = 0xb18;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f640 3218 	movw	r2, #2840	; 0xb18
 8002056:	f8a3 23e0 	strh.w	r2, [r3, #992]	; 0x3e0
     calibTable->dacValB_m27[152] = 0xb1b;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f640 321b 	movw	r2, #2843	; 0xb1b
 8002060:	f8a3 23e2 	strh.w	r2, [r3, #994]	; 0x3e2
     calibTable->dacValB_m27[153] = 0xc08;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f640 4208 	movw	r2, #3080	; 0xc08
 800206a:	f8a3 23e4 	strh.w	r2, [r3, #996]	; 0x3e4
     calibTable->dacValB_m27[154] = 0xb2a;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f640 322a 	movw	r2, #2858	; 0xb2a
 8002074:	f8a3 23e6 	strh.w	r2, [r3, #998]	; 0x3e6
     calibTable->dacValB_m27[155] = 0xb2f;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f640 322f 	movw	r2, #2863	; 0xb2f
 800207e:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
     calibTable->dacValB_m27[156] = 0xd09;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f640 5209 	movw	r2, #3337	; 0xd09
 8002088:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
     calibTable->dacValB_m27[157] = 0xc0a;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f640 420a 	movw	r2, #3082	; 0xc0a
 8002092:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
     calibTable->dacValB_m27[158] = 0xb4f;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f640 324f 	movw	r2, #2895	; 0xb4f
 800209c:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
     calibTable->dacValB_m27[159] = 0xb56;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f640 3256 	movw	r2, #2902	; 0xb56
 80020a6:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
     calibTable->dacValB_m27[160] = 0xb6d;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f640 326d 	movw	r2, #2925	; 0xb6d
 80020b0:	f8a3 23f2 	strh.w	r2, [r3, #1010]	; 0x3f2
     calibTable->dacValB_m27[161] = 0xb44;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f640 3244 	movw	r2, #2884	; 0xb44
 80020ba:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
     calibTable->dacValB_m27[162] = 0x1000;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020c4:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

 }
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
	...

080020d4 <volt2dgt>:
// floor()
// Пример: 
// Следующий фрагмент кода выводит на экран «10»:
// printf("%f", floor(10.9));

uint16_t volt2dgt(Table_t *calibTable, int16_t volt){
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]

// TODO: Нужно ли учитывать Ктр? volt = volt*Ktr 
float count = (abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE;
 80020e0:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <volt2dgt+0x10c>)
 80020e2:	60fb      	str	r3, [r7, #12]
uint16_t y = (floor((count*abs(MIN_VOLT_MODE_12))/(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/abs(MIN_VOLT_MODE_12)*volt+(count*abs(MIN_VOLT_MODE_12))/(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 80020e4:	493f      	ldr	r1, [pc, #252]	; (80021e4 <volt2dgt+0x110>)
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7fe fbac 	bl	8000844 <__aeabi_fmul>
 80020ec:	4603      	mov	r3, r0
 80020ee:	493e      	ldr	r1, [pc, #248]	; (80021e8 <volt2dgt+0x114>)
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fc5b 	bl	80009ac <__aeabi_fdiv>
 80020f6:	4603      	mov	r3, r0
 80020f8:	493a      	ldr	r1, [pc, #232]	; (80021e4 <volt2dgt+0x110>)
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fc56 	bl	80009ac <__aeabi_fdiv>
 8002100:	4603      	mov	r3, r0
 8002102:	461c      	mov	r4, r3
 8002104:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fb47 	bl	800079c <__aeabi_i2f>
 800210e:	4603      	mov	r3, r0
 8002110:	4619      	mov	r1, r3
 8002112:	4620      	mov	r0, r4
 8002114:	f7fe fb96 	bl	8000844 <__aeabi_fmul>
 8002118:	4603      	mov	r3, r0
 800211a:	461c      	mov	r4, r3
 800211c:	4931      	ldr	r1, [pc, #196]	; (80021e4 <volt2dgt+0x110>)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7fe fb90 	bl	8000844 <__aeabi_fmul>
 8002124:	4603      	mov	r3, r0
 8002126:	4930      	ldr	r1, [pc, #192]	; (80021e8 <volt2dgt+0x114>)
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fc3f 	bl	80009ac <__aeabi_fdiv>
 800212e:	4603      	mov	r3, r0
 8002130:	4619      	mov	r1, r3
 8002132:	4620      	mov	r0, r4
 8002134:	f7fe fa7e 	bl	8000634 <__addsf3>
 8002138:	4603      	mov	r3, r0
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f974 	bl	8000428 <__aeabi_f2d>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f00b fbda 	bl	800d900 <floor>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	f7fe fa48 	bl	80005e8 <__aeabi_d2uiz>
 8002158:	4603      	mov	r3, r0
 800215a:	817b      	strh	r3, [r7, #10]
uint16_t CodeX = (((calibTable->dacValA_m12[y+1+1]-calibTable->dacValA_m12[y])/(((y+1+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12)-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))))*(volt-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))+calibTable->dacValA_m12[y+1];
 800215c:	897b      	ldrh	r3, [r7, #10]
 800215e:	3302      	adds	r3, #2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	3304      	adds	r3, #4
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	889b      	ldrh	r3, [r3, #4]
 800216a:	4619      	mov	r1, r3
 800216c:	897b      	ldrh	r3, [r7, #10]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	3304      	adds	r3, #4
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	889b      	ldrh	r3, [r3, #4]
 8002178:	1aca      	subs	r2, r1, r3
 800217a:	897b      	ldrh	r3, [r7, #10]
 800217c:	3302      	adds	r3, #2
 800217e:	21c8      	movs	r1, #200	; 0xc8
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8002188:	3b08      	subs	r3, #8
 800218a:	8979      	ldrh	r1, [r7, #10]
 800218c:	3101      	adds	r1, #1
 800218e:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8002192:	fb00 f101 	mul.w	r1, r0, r1
 8002196:	440b      	add	r3, r1
 8002198:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 800219c:	3b08      	subs	r3, #8
 800219e:	fb92 f3f3 	sdiv	r3, r2, r3
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80021a8:	897b      	ldrh	r3, [r7, #10]
 80021aa:	3301      	adds	r3, #1
 80021ac:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 80021b0:	fb00 f303 	mul.w	r3, r0, r3
 80021b4:	440b      	add	r3, r1
 80021b6:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 80021ba:	3b08      	subs	r3, #8
 80021bc:	b29b      	uxth	r3, r3
 80021be:	fb03 f302 	mul.w	r3, r3, r2
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	897b      	ldrh	r3, [r7, #10]
 80021c6:	3301      	adds	r3, #1
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	440b      	add	r3, r1
 80021d0:	889b      	ldrh	r3, [r3, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	813b      	strh	r3, [r7, #8]
	return CodeX;
 80021d6:	893b      	ldrh	r3, [r7, #8]





}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd90      	pop	{r4, r7, pc}
 80021e0:	42aa0000 	.word	0x42aa0000
 80021e4:	459c4000 	.word	0x459c4000
 80021e8:	4684d000 	.word	0x4684d000

080021ec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80021f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80021f8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002204:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002208:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800220c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002214:	e000      	b.n	8002218 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002216:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002218:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f9      	beq.n	8002216 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002222:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800222c:	687b      	ldr	r3, [r7, #4]
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <DWT_Init+0x24>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a06      	ldr	r2, [pc, #24]	; (800225c <DWT_Init+0x24>)
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002246:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <DWT_Init+0x28>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <DWT_Init+0x28>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	e000edf0 	.word	0xe000edf0
 8002260:	e0001000 	.word	0xe0001000

08002264 <_write>:
static void MX_TIM4_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	e009      	b.n	800228a <_write+0x26>
		ITM_SendChar(*ptr++);
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	60ba      	str	r2, [r7, #8]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ffb4 	bl	80021ec <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	dbf1      	blt.n	8002276 <_write+0x12>
	}
	return len;
 8002292:	687b      	ldr	r3, [r7, #4]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <getCRC_table_a_m12>:
//	DAC_AD5322_Ch1Ch2(&hspi1,VDAC_A,VDAC_B);
//}
//--------------------------------------------------------------------------
union NVRAM DevNVRAM;
//--------------------------------------------------------------------------
uint32_t getCRC_table_a_m12(){
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
//	uint16_t len_ = sizeof(aqrr)/(sizeof(uint32_t)*2);
	uint32_t crc = HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table.dacValA_m12,  sizeof(DevNVRAM.calibration_table.dacValA_m12)/(sizeof(uint32_t)*2));
 80022a2:	2216      	movs	r2, #22
 80022a4:	4906      	ldr	r1, [pc, #24]	; (80022c0 <getCRC_table_a_m12+0x24>)
 80022a6:	4807      	ldr	r0, [pc, #28]	; (80022c4 <getCRC_table_a_m12+0x28>)
 80022a8:	f002 f893 	bl	80043d2 <HAL_CRC_Calculate>
 80022ac:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f001 fab2 	bl	8003818 <HAL_Delay>
	return crc;
 80022b4:	687b      	ldr	r3, [r7, #4]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200004c0 	.word	0x200004c0
 80022c4:	200008fc 	.word	0x200008fc

080022c8 <getCRC_table_b_m12>:
uint32_t getCRC_table_b_m12(){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
//	uint16_t len_ = sizeof(aqrr)/(sizeof(uint32_t)*2);
	return HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table.dacValB_m12,  sizeof(DevNVRAM.calibration_table.dacValB_m12)/(sizeof(uint32_t)*2));
 80022cc:	2216      	movs	r2, #22
 80022ce:	4903      	ldr	r1, [pc, #12]	; (80022dc <getCRC_table_b_m12+0x14>)
 80022d0:	4803      	ldr	r0, [pc, #12]	; (80022e0 <getCRC_table_b_m12+0x18>)
 80022d2:	f002 f87e 	bl	80043d2 <HAL_CRC_Calculate>
 80022d6:	4603      	mov	r3, r0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000570 	.word	0x20000570
 80022e0:	200008fc 	.word	0x200008fc

080022e4 <getCRC_table_a_m27>:
uint32_t getCRC_table_a_m27(){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
//	uint16_t len_ = sizeof(aqrr)/(sizeof(uint32_t)*2);
	return HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table.dacValA_m27,  sizeof(DevNVRAM.calibration_table.dacValA_m27)/(sizeof(uint32_t)*2));
 80022e8:	2228      	movs	r2, #40	; 0x28
 80022ea:	4903      	ldr	r1, [pc, #12]	; (80022f8 <getCRC_table_a_m27+0x14>)
 80022ec:	4803      	ldr	r0, [pc, #12]	; (80022fc <getCRC_table_a_m27+0x18>)
 80022ee:	f002 f870 	bl	80043d2 <HAL_CRC_Calculate>
 80022f2:	4603      	mov	r3, r0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000620 	.word	0x20000620
 80022fc:	200008fc 	.word	0x200008fc

08002300 <getCRC_table_b_m27>:
uint32_t getCRC_table_b_m27(){
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
//	uint16_t len_ = sizeof(aqrr)/(sizeof(uint32_t)*2);
	return HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table.dacValB_m27,  sizeof(DevNVRAM.calibration_table.dacValB_m27)/(sizeof(uint32_t)*2));
 8002304:	2228      	movs	r2, #40	; 0x28
 8002306:	4903      	ldr	r1, [pc, #12]	; (8002314 <getCRC_table_b_m27+0x14>)
 8002308:	4803      	ldr	r0, [pc, #12]	; (8002318 <getCRC_table_b_m27+0x18>)
 800230a:	f002 f862 	bl	80043d2 <HAL_CRC_Calculate>
 800230e:	4603      	mov	r3, r0
}
 8002310:	4618      	mov	r0, r3
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000766 	.word	0x20000766
 8002318:	200008fc 	.word	0x200008fc

0800231c <SetDacA>:
//--------------------------------------------------------------------------

//**************************************************************************
void SetDacA(int16_t da) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	80fb      	strh	r3, [r7, #6]
	VDAC_A = volt2dgt(&(DevNVRAM.calibration_table), da);
 8002326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800232a:	4619      	mov	r1, r3
 800232c:	4808      	ldr	r0, [pc, #32]	; (8002350 <SetDacA+0x34>)
 800232e:	f7ff fed1 	bl	80020d4 <volt2dgt>
 8002332:	4603      	mov	r3, r0
 8002334:	461a      	mov	r2, r3
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <SetDacA+0x38>)
 8002338:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <SetDacA+0x38>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	4805      	ldr	r0, [pc, #20]	; (8002358 <SetDacA+0x3c>)
 8002342:	f7fe fbfb 	bl	8000b3c <DAC_AD5322_Ch1>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200004b4 	.word	0x200004b4
 8002354:	2000024c 	.word	0x2000024c
 8002358:	2000097c 	.word	0x2000097c

0800235c <SetDacB>:
void SetDacB(int16_t db) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	80fb      	strh	r3, [r7, #6]
	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table), db);
 8002366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800236a:	4619      	mov	r1, r3
 800236c:	4808      	ldr	r0, [pc, #32]	; (8002390 <SetDacB+0x34>)
 800236e:	f7ff feb1 	bl	80020d4 <volt2dgt>
 8002372:	4603      	mov	r3, r0
 8002374:	461a      	mov	r2, r3
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <SetDacB+0x38>)
 8002378:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <SetDacB+0x38>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	4619      	mov	r1, r3
 8002380:	4805      	ldr	r0, [pc, #20]	; (8002398 <SetDacB+0x3c>)
 8002382:	f7fe fc22 	bl	8000bca <DAC_AD5322_Ch2>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200004b4 	.word	0x200004b4
 8002394:	2000024e 	.word	0x2000024e
 8002398:	2000097c 	.word	0x2000097c

0800239c <SetAllDAC>:
void SetAllDAC() {
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0

	DAC_AD5322_Ch1Ch2(&hspi1,VDAC_A,VDAC_B);
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <SetAllDAC+0x18>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <SetAllDAC+0x1c>)
 80023a6:	8812      	ldrh	r2, [r2, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	4804      	ldr	r0, [pc, #16]	; (80023bc <SetAllDAC+0x20>)
 80023ac:	f7fe fc54 	bl	8000c58 <DAC_AD5322_Ch1Ch2>
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	2000024c 	.word	0x2000024c
 80023b8:	2000024e 	.word	0x2000024e
 80023bc:	2000097c 	.word	0x2000097c

080023c0 <GetDacA>:
uint16_t GetDacA() {
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
	return VDAC_A;
 80023c4:	4b02      	ldr	r3, [pc, #8]	; (80023d0 <GetDacA+0x10>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	2000024c 	.word	0x2000024c

080023d4 <GetDacB>:
uint16_t GetDacB() {
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
	return VDAC_B;
 80023d8:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <GetDacB+0x10>)
 80023da:	881b      	ldrh	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	2000024e 	.word	0x2000024e

080023e8 <GetBtnRunState>:
uint32_t time_key3 = 0;

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState() {
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00) {
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <GetBtnRunState+0x7c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <GetBtnRunState+0x24>
 80023f4:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <GetBtnRunState+0x80>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d107      	bne.n	800240c <GetBtnRunState+0x24>
		btn1_long_rd	 = 0;
 80023fc:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <GetBtnRunState+0x80>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
		btn1_short_rd	 = 0;
 8002402:	4b18      	ldr	r3, [pc, #96]	; (8002464 <GetBtnRunState+0x7c>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8002408:	2300      	movs	r3, #0
 800240a:	e026      	b.n	800245a <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00) {
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <GetBtnRunState+0x7c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d10b      	bne.n	800242c <GetBtnRunState+0x44>
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <GetBtnRunState+0x80>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <GetBtnRunState+0x44>
		btn1_long_rd 	= 0;
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <GetBtnRunState+0x80>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
		btn1_short_rd 	= 0;
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <GetBtnRunState+0x7c>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8002428:	2301      	movs	r3, #1
 800242a:	e016      	b.n	800245a <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01) {
 800242c:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <GetBtnRunState+0x7c>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10b      	bne.n	800244c <GetBtnRunState+0x64>
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <GetBtnRunState+0x80>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d107      	bne.n	800244c <GetBtnRunState+0x64>
		btn1_long_rd 	= 0;
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <GetBtnRunState+0x80>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
		btn1_short_rd 	= 0;
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <GetBtnRunState+0x7c>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8002448:	2302      	movs	r3, #2
 800244a:	e006      	b.n	800245a <GetBtnRunState+0x72>
	}

	btn1_long_rd 		= 0;
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <GetBtnRunState+0x80>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
	btn1_short_rd	 	= 0;
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <GetBtnRunState+0x7c>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]

//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000259 	.word	0x20000259
 8002468:	20000258 	.word	0x20000258

0800246c <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState() {
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00) {
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <GetBtnUpState+0x7c>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10b      	bne.n	8002490 <GetBtnUpState+0x24>
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <GetBtnUpState+0x80>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <GetBtnUpState+0x24>
		btn2_long_rd	 = 0;
 8002480:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <GetBtnUpState+0x80>)
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
		btn2_short_rd	 = 0;
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <GetBtnUpState+0x7c>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
		return 0x00;
 800248c:	2300      	movs	r3, #0
 800248e:	e026      	b.n	80024de <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00) {
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <GetBtnUpState+0x7c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d10b      	bne.n	80024b0 <GetBtnUpState+0x44>
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <GetBtnUpState+0x80>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <GetBtnUpState+0x44>
		btn2_long_rd 	= 0;
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <GetBtnUpState+0x80>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
		btn2_short_rd 	= 0;
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <GetBtnUpState+0x7c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e016      	b.n	80024de <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01) {
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <GetBtnUpState+0x7c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10b      	bne.n	80024d0 <GetBtnUpState+0x64>
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <GetBtnUpState+0x80>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d107      	bne.n	80024d0 <GetBtnUpState+0x64>
		btn2_long_rd 	= 0;
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <GetBtnUpState+0x80>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
		btn2_short_rd 	= 0;
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <GetBtnUpState+0x7c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80024cc:	2302      	movs	r3, #2
 80024ce:	e006      	b.n	80024de <GetBtnUpState+0x72>
	}

	btn2_long_rd 		= 0;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <GetBtnUpState+0x80>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
	btn2_short_rd	 	= 0;
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <GetBtnUpState+0x7c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000261 	.word	0x20000261
 80024ec:	20000260 	.word	0x20000260

080024f0 <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState() {
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00) {
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <GetBtnDownState+0x7c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10b      	bne.n	8002514 <GetBtnDownState+0x24>
 80024fc:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <GetBtnDownState+0x80>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <GetBtnDownState+0x24>
		btn3_long_rd	 = 0;
 8002504:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <GetBtnDownState+0x80>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
		btn3_short_rd	 = 0;
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <GetBtnDownState+0x7c>)
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8002510:	2300      	movs	r3, #0
 8002512:	e026      	b.n	8002562 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00) {
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <GetBtnDownState+0x7c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d10b      	bne.n	8002534 <GetBtnDownState+0x44>
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <GetBtnDownState+0x80>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d107      	bne.n	8002534 <GetBtnDownState+0x44>
		btn3_long_rd 	= 0;
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <GetBtnDownState+0x80>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
		btn3_short_rd 	= 0;
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <GetBtnDownState+0x7c>)
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8002530:	2301      	movs	r3, #1
 8002532:	e016      	b.n	8002562 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01) {
 8002534:	4b0d      	ldr	r3, [pc, #52]	; (800256c <GetBtnDownState+0x7c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10b      	bne.n	8002554 <GetBtnDownState+0x64>
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <GetBtnDownState+0x80>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d107      	bne.n	8002554 <GetBtnDownState+0x64>
		btn3_long_rd 	= 0;
 8002544:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <GetBtnDownState+0x80>)
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
		btn3_short_rd 	= 0;
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <GetBtnDownState+0x7c>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8002550:	2302      	movs	r3, #2
 8002552:	e006      	b.n	8002562 <GetBtnDownState+0x72>
	}

	btn3_long_rd 		= 0;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <GetBtnDownState+0x80>)
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
	btn3_short_rd	 	= 0;
 800255a:	4b04      	ldr	r3, [pc, #16]	; (800256c <GetBtnDownState+0x7c>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000269 	.word	0x20000269
 8002570:	20000268 	.word	0x20000268

08002574 <EnableTIM3_PB4>:
volatile uint16_t g_vTIM3_PB4 = 0;
volatile uint16_t g_vTIM4_PB6 = 0;

char trans2_str[64] = {0,};
//--------------------------------------------------------------------------
void EnableTIM3_PB4(){
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
	 timWork = 1 ;
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <EnableTIM3_PB4+0x14>)
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	2000026a 	.word	0x2000026a

0800258c <GetTIM3>:
uint16_t GetTIM3(){
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <GetTIM3+0x14>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	2000026c 	.word	0x2000026c

080025a4 <resValTIM3_PB4>:
void resValTIM3_PB4(){
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <resValTIM3_PB4+0x14>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	801a      	strh	r2, [r3, #0]
}
 80025ae:	bf00      	nop
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	2000026c 	.word	0x2000026c

080025bc <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6(){
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
	 timWork = 0 ;
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <EnableTIM4_PB6+0x14>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	2000026a 	.word	0x2000026a

080025d4 <GetTIM4>:
uint16_t GetTIM4(){
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <GetTIM4+0x14>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	b29b      	uxth	r3, r3
}
 80025de:	4618      	mov	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	2000026e 	.word	0x2000026e

080025ec <resValTIM4_PB6>:
void resValTIM4_PB6(){
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <resValTIM4_PB6+0x14>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	801a      	strh	r2, [r3, #0]
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	2000026e 	.word	0x2000026e

08002604 <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork) {
 800260c:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <HAL_TIM_IC_CaptureCallback+0xb8>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d027      	beq.n	8002666 <HAL_TIM_IC_CaptureCallback+0x62>
		if (htim->Instance == TIM3) {
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d149      	bne.n	80026b4 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7f1b      	ldrb	r3, [r3, #28]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d145      	bne.n	80026b4 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8002628:	2100      	movs	r1, #0
 800262a:	4826      	ldr	r0, [pc, #152]	; (80026c4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800262c:	f005 f920 	bl	8007870 <HAL_TIM_ReadCapturedValue>
 8002630:	4603      	mov	r3, r0
 8002632:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 8002634:	2104      	movs	r1, #4
 8002636:	4823      	ldr	r0, [pc, #140]	; (80026c4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002638:	f005 f91a 	bl	8007870 <HAL_TIM_ReadCapturedValue>
 800263c:	4603      	mov	r3, r0
 800263e:	81fb      	strh	r3, [r7, #14]
						TIM_CHANNEL_2);

				TIM3->CNT = 0;
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002642:	2200      	movs	r2, #0
 8002644:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t) periodTIM3
						- (int16_t) pulseWidthTIM3;
 8002646:	8a3a      	ldrh	r2, [r7, #16]
 8002648:	89fb      	ldrh	r3, [r7, #14]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	b29b      	uxth	r3, r3
				int16_t deltaTIM3 = (int16_t) periodTIM3
 800264e:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 8002650:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	bfb8      	it	lt
 8002658:	425b      	neglt	r3, r3
 800265a:	b29b      	uxth	r3, r3
 800265c:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 800265e:	89ba      	ldrh	r2, [r7, #12]
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002662:	801a      	strh	r2, [r3, #0]

			}
		}
	}

}
 8002664:	e026      	b.n	80026b4 <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4) {
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a18      	ldr	r2, [pc, #96]	; (80026cc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d121      	bne.n	80026b4 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7f1b      	ldrb	r3, [r3, #28]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d11d      	bne.n	80026b4 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8002678:	2100      	movs	r1, #0
 800267a:	4815      	ldr	r0, [pc, #84]	; (80026d0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800267c:	f005 f8f8 	bl	8007870 <HAL_TIM_ReadCapturedValue>
 8002680:	4603      	mov	r3, r0
 8002682:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 8002684:	2104      	movs	r1, #4
 8002686:	4812      	ldr	r0, [pc, #72]	; (80026d0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8002688:	f005 f8f2 	bl	8007870 <HAL_TIM_ReadCapturedValue>
 800268c:	4603      	mov	r3, r0
 800268e:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 8002690:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002692:	2200      	movs	r2, #0
 8002694:	625a      	str	r2, [r3, #36]	; 0x24
						- (int16_t) pulseWidthTIM4;
 8002696:	8afa      	ldrh	r2, [r7, #22]
 8002698:	8abb      	ldrh	r3, [r7, #20]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	b29b      	uxth	r3, r3
				int16_t deltaTIM4 = (int16_t) periodTIM4
 800269e:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 80026a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bfb8      	it	lt
 80026a8:	425b      	neglt	r3, r3
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 80026ae:	8a7a      	ldrh	r2, [r7, #18]
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80026b2:	801a      	strh	r2, [r3, #0]
}
 80026b4:	bf00      	nop
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	2000026a 	.word	0x2000026a
 80026c0:	40000400 	.word	0x40000400
 80026c4:	20000904 	.word	0x20000904
 80026c8:	2000026c 	.word	0x2000026c
 80026cc:	40000800 	.word	0x40000800
 80026d0:	200008b4 	.word	0x200008b4
 80026d4:	2000026e 	.word	0x2000026e

080026d8 <GetADC>:
/* USER CODE BEGIN 0 */
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC(){
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
	return g_VADC;
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <GetADC+0x14>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000270 	.word	0x20000270

080026f0 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) 				//check if the interrupt comes from ACD1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a06      	ldr	r2, [pc, #24]	; (8002718 <HAL_ADC_ConvCpltCallback+0x28>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d106      	bne.n	8002710 <HAL_ADC_ConvCpltCallback+0x20>
    {
    	g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 8002702:	4806      	ldr	r0, [pc, #24]	; (800271c <HAL_ADC_ConvCpltCallback+0x2c>)
 8002704:	f001 fa3a 	bl	8003b7c <HAL_ADC_GetValue>
 8002708:	4603      	mov	r3, r0
 800270a:	b29a      	uxth	r2, r3
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <HAL_ADC_ConvCpltCallback+0x30>)
 800270e:	801a      	strh	r2, [r3, #0]
    }
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40012400 	.word	0x40012400
 800271c:	2000094c 	.word	0x2000094c
 8002720:	20000270 	.word	0x20000270

08002724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	; 0x30
 8002728:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800272a:	f001 f813 	bl	8003754 <HAL_Init>

  /* USER CODE BEGIN Init */
//--------------------------------------------------------------------------
#if DWT_INIT
	DWT_Init();
 800272e:	f7ff fd83 	bl	8002238 <DWT_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002732:	f000 fb35 	bl	8002da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002736:	f000 fcdf 	bl	80030f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800273a:	f000 fbe1 	bl	8002f00 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800273e:	f008 ff27 	bl	800b590 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8002742:	f000 fb8b 	bl	8002e5c <MX_ADC1_Init>
  MX_TIM3_Init();
 8002746:	f000 fc13 	bl	8002f70 <MX_TIM3_Init>
  MX_TIM4_Init();
 800274a:	f000 fc73 	bl	8003034 <MX_TIM4_Init>
  MX_CRC_Init();
 800274e:	f000 fbc3 	bl	8002ed8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  //**************************************************************************
#if  TEST_UID
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 8002752:	4ba4      	ldr	r3, [pc, #656]	; (80029e4 <main+0x2c0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	4619      	mov	r1, r3
 800275a:	4ba3      	ldr	r3, [pc, #652]	; (80029e8 <main+0x2c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	4ba2      	ldr	r3, [pc, #648]	; (80029ec <main+0x2c8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4aa1      	ldr	r2, [pc, #644]	; (80029f0 <main+0x2cc>)
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	9201      	str	r2, [sp, #4]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	4603      	mov	r3, r0
 8002774:	460a      	mov	r2, r1
 8002776:	499f      	ldr	r1, [pc, #636]	; (80029f4 <main+0x2d0>)
 8002778:	489f      	ldr	r0, [pc, #636]	; (80029f8 <main+0x2d4>)
 800277a:	f009 ff71 	bl	800c660 <siprintf>
	printf((uint8_t*)buffer);
 800277e:	489e      	ldr	r0, [pc, #632]	; (80029f8 <main+0x2d4>)
 8002780:	f009 ff56 	bl	800c630 <iprintf>
#endif	/* TEST_UID */

	//**************************************************************************
#if	TEST_TIM_CAPTURE
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002784:	2100      	movs	r1, #0
 8002786:	489d      	ldr	r0, [pc, #628]	; (80029fc <main+0x2d8>)
 8002788:	f004 fdd0 	bl	800732c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800278c:	2104      	movs	r1, #4
 800278e:	489b      	ldr	r0, [pc, #620]	; (80029fc <main+0x2d8>)
 8002790:	f004 fdcc 	bl	800732c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002794:	2100      	movs	r1, #0
 8002796:	489a      	ldr	r0, [pc, #616]	; (8002a00 <main+0x2dc>)
 8002798:	f004 fdc8 	bl	800732c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 800279c:	2104      	movs	r1, #4
 800279e:	4898      	ldr	r0, [pc, #608]	; (8002a00 <main+0x2dc>)
 80027a0:	f004 fdc4 	bl	800732c <HAL_TIM_IC_Start_IT>
#endif	/* TEST_TIM_CAPTURE */
//--------------------------------------------------------------------------
#if	TEST_DAC
	SetAllDAC();
 80027a4:	f7ff fdfa 	bl	800239c <SetAllDAC>
#endif	/* TEST_DAC */
	//**************************************************************************
#if	TEST_ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 80027a8:	4896      	ldr	r0, [pc, #600]	; (8002a04 <main+0x2e0>)
 80027aa:	f001 fc43 	bl	8004034 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 80027ae:	4895      	ldr	r0, [pc, #596]	; (8002a04 <main+0x2e0>)
 80027b0:	f001 f92e 	bl	8003a10 <HAL_ADC_Start_IT>
#endif	/* TEST_ADC */
//**************************************************************************

	static FLASH_EraseInitTypeDef EraseInitStruct; // структура для очистки флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 80027b4:	4b94      	ldr	r3, [pc, #592]	; (8002a08 <main+0x2e4>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = FLASH_TABLE_START_ADDR; // адрес 127-ой страницы
 80027ba:	4b93      	ldr	r3, [pc, #588]	; (8002a08 <main+0x2e4>)
 80027bc:	4a93      	ldr	r2, [pc, #588]	; (8002a0c <main+0x2e8>)
 80027be:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 0x01;               // кол-во страниц для стирания
 80027c0:	4b91      	ldr	r3, [pc, #580]	; (8002a08 <main+0x2e4>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	60da      	str	r2, [r3, #12]
	uint32_t l_Address;
	uint32_t l_Error;
	uint32_t l_Index;
//--------------------------------------------------------------------------
// Чтение DevNVRAM
	l_Address = FLASH_TABLE_START_ADDR;
 80027c6:	4b91      	ldr	r3, [pc, #580]	; (8002a0c <main+0x2e8>)
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
	l_Error = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	603b      	str	r3, [r7, #0]
	l_Index = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80027d2:	e00b      	b.n	80027ec <main+0xc8>
		DevNVRAM.data32[l_Index] = *(__IO uint32_t*) l_Address;
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	498d      	ldr	r1, [pc, #564]	; (8002a10 <main+0x2ec>)
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		l_Index = l_Index + 1;
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	3301      	adds	r3, #1
 80027e4:	623b      	str	r3, [r7, #32]
		l_Address = l_Address + 4;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	3304      	adds	r3, #4
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	4a89      	ldr	r2, [pc, #548]	; (8002a14 <main+0x2f0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d9ef      	bls.n	80027d4 <main+0xb0>
	}

//--------------------------------------------------------------------------
// если после чтения майджик кей не найден, то это первый запуск

	if (DevNVRAM.calibration_table.MagicNum != MAGIC_KEY_DEFINE) {
 80027f4:	4b86      	ldr	r3, [pc, #536]	; (8002a10 <main+0x2ec>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a87      	ldr	r2, [pc, #540]	; (8002a18 <main+0x2f4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	f000 80b4 	beq.w	8002968 <main+0x244>
		// Подготовка
		// Заносим типовые значения
		memset(DevNVRAM.data32, 0, sizeof(DevNVRAM.data32));
 8002800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002804:	2100      	movs	r1, #0
 8002806:	4882      	ldr	r0, [pc, #520]	; (8002a10 <main+0x2ec>)
 8002808:	f009 ff0a 	bl	800c620 <memset>

		// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!

		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 800280c:	2300      	movs	r3, #0
 800280e:	77fb      	strb	r3, [r7, #31]
 8002810:	e00b      	b.n	800282a <main+0x106>
			DevNVRAM.calibration_table.dacValA_m12[i] = i;
 8002812:	7ffb      	ldrb	r3, [r7, #31]
 8002814:	7ffa      	ldrb	r2, [r7, #31]
 8002816:	b291      	uxth	r1, r2
 8002818:	4a7d      	ldr	r2, [pc, #500]	; (8002a10 <main+0x2ec>)
 800281a:	3304      	adds	r3, #4
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	460a      	mov	r2, r1
 8002822:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8002824:	7ffb      	ldrb	r3, [r7, #31]
 8002826:	3301      	adds	r3, #1
 8002828:	77fb      	strb	r3, [r7, #31]
 800282a:	7ffb      	ldrb	r3, [r7, #31]
 800282c:	2b57      	cmp	r3, #87	; 0x57
 800282e:	d9f0      	bls.n	8002812 <main+0xee>
		}
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8002830:	2300      	movs	r3, #0
 8002832:	77bb      	strb	r3, [r7, #30]
 8002834:	e00b      	b.n	800284e <main+0x12a>
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 8002836:	7fbb      	ldrb	r3, [r7, #30]
 8002838:	7fba      	ldrb	r2, [r7, #30]
 800283a:	b291      	uxth	r1, r2
 800283c:	4a74      	ldr	r2, [pc, #464]	; (8002a10 <main+0x2ec>)
 800283e:	335c      	adds	r3, #92	; 0x5c
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	460a      	mov	r2, r1
 8002846:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8002848:	7fbb      	ldrb	r3, [r7, #30]
 800284a:	3301      	adds	r3, #1
 800284c:	77bb      	strb	r3, [r7, #30]
 800284e:	7fbb      	ldrb	r3, [r7, #30]
 8002850:	2b57      	cmp	r3, #87	; 0x57
 8002852:	d9f0      	bls.n	8002836 <main+0x112>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 8002854:	2300      	movs	r3, #0
 8002856:	777b      	strb	r3, [r7, #29]
 8002858:	e00b      	b.n	8002872 <main+0x14e>
			DevNVRAM.calibration_table.dacValA_m27[i] = i;
 800285a:	7f7b      	ldrb	r3, [r7, #29]
 800285c:	7f7a      	ldrb	r2, [r7, #29]
 800285e:	b291      	uxth	r1, r2
 8002860:	4a6b      	ldr	r2, [pc, #428]	; (8002a10 <main+0x2ec>)
 8002862:	33b4      	adds	r3, #180	; 0xb4
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4413      	add	r3, r2
 8002868:	460a      	mov	r2, r1
 800286a:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 800286c:	7f7b      	ldrb	r3, [r7, #29]
 800286e:	3301      	adds	r3, #1
 8002870:	777b      	strb	r3, [r7, #29]
 8002872:	7f7b      	ldrb	r3, [r7, #29]
 8002874:	2ba2      	cmp	r3, #162	; 0xa2
 8002876:	d9f0      	bls.n	800285a <main+0x136>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 8002878:	2300      	movs	r3, #0
 800287a:	773b      	strb	r3, [r7, #28]
 800287c:	e00b      	b.n	8002896 <main+0x172>
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 800287e:	7f3b      	ldrb	r3, [r7, #28]
 8002880:	7f3a      	ldrb	r2, [r7, #28]
 8002882:	b291      	uxth	r1, r2
 8002884:	4a62      	ldr	r2, [pc, #392]	; (8002a10 <main+0x2ec>)
 8002886:	335c      	adds	r3, #92	; 0x5c
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	460a      	mov	r2, r1
 800288e:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 8002890:	7f3b      	ldrb	r3, [r7, #28]
 8002892:	3301      	adds	r3, #1
 8002894:	773b      	strb	r3, [r7, #28]
 8002896:	7f3b      	ldrb	r3, [r7, #28]
 8002898:	2ba2      	cmp	r3, #162	; 0xa2
 800289a:	d9f0      	bls.n	800287e <main+0x15a>
		}
		DevNVRAM.calibration_table.Hardwire = 0x06;
 800289c:	4b5c      	ldr	r3, [pc, #368]	; (8002a10 <main+0x2ec>)
 800289e:	2206      	movs	r2, #6
 80028a0:	801a      	strh	r2, [r3, #0]
		DevNVRAM.calibration_table.Firmware = 0x05;
 80028a2:	4b5b      	ldr	r3, [pc, #364]	; (8002a10 <main+0x2ec>)
 80028a4:	2205      	movs	r2, #5
 80028a6:	805a      	strh	r2, [r3, #2]
		DevNVRAM.calibration_table.SN 		= 0x1121001; //11 недел	я + год + порядковый номер изготовления
 80028a8:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <main+0x2ec>)
 80028aa:	4a5c      	ldr	r2, [pc, #368]	; (8002a1c <main+0x2f8>)
 80028ac:	605a      	str	r2, [r3, #4]
		DevNVRAM.calibration_table.MagicNum = MAGIC_KEY_DEFINE;
 80028ae:	4b58      	ldr	r3, [pc, #352]	; (8002a10 <main+0x2ec>)
 80028b0:	4a59      	ldr	r2, [pc, #356]	; (8002a18 <main+0x2f4>)
 80028b2:	609a      	str	r2, [r3, #8]

		DevNVRAM.sector.NWrite = 0;
 80028b4:	4b56      	ldr	r3, [pc, #344]	; (8002a10 <main+0x2ec>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

		DevNVRAM.sector.CheckSum = HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));//DONE: нужно отправлять длину кратную 32b! -  по какой то причине в этом проекте не работает CRC!!! 
 80028bc:	22fe      	movs	r2, #254	; 0xfe
 80028be:	4954      	ldr	r1, [pc, #336]	; (8002a10 <main+0x2ec>)
 80028c0:	4857      	ldr	r0, [pc, #348]	; (8002a20 <main+0x2fc>)
 80028c2:	f001 fd86 	bl	80043d2 <HAL_CRC_Calculate>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4a51      	ldr	r2, [pc, #324]	; (8002a10 <main+0x2ec>)
 80028ca:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc


//--------------------------------------------------------------------------
		//если после чтения майджик кей не найден, то это первый запуск записываем дефолтную таблицу
		l_Address = FLASH_TABLE_START_ADDR;
 80028ce:	4b4f      	ldr	r3, [pc, #316]	; (8002a0c <main+0x2e8>)
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
		l_Error = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	603b      	str	r3, [r7, #0]
		l_Index = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	623b      	str	r3, [r7, #32]

		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80028da:	e010      	b.n	80028fe <main+0x1da>
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t*) l_Address) {
 80028dc:	4a4c      	ldr	r2, [pc, #304]	; (8002a10 <main+0x2ec>)
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d002      	beq.n	80028f2 <main+0x1ce>
				l_Error++;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	3301      	adds	r3, #1
 80028f0:	603b      	str	r3, [r7, #0]
			}
			l_Index = l_Index + 1;
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	3301      	adds	r3, #1
 80028f6:	623b      	str	r3, [r7, #32]
			l_Address = l_Address + 4;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	3304      	adds	r3, #4
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	4a44      	ldr	r2, [pc, #272]	; (8002a14 <main+0x2f0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d9ea      	bls.n	80028dc <main+0x1b8>
		}

		if (l_Error > 0) { // конфигурация изменилась сохраняем
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d02d      	beq.n	8002968 <main+0x244>
			// Готовим к записи в память
			HAL_FLASH_Unlock();
 800290c:	f001 fe04 	bl	8004518 <HAL_FLASH_Unlock>
			// Очищаем страницу памяти
			HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8002910:	463b      	mov	r3, r7
 8002912:	4619      	mov	r1, r3
 8002914:	483c      	ldr	r0, [pc, #240]	; (8002a08 <main+0x2e4>)
 8002916:	f001 fee7 	bl	80046e8 <HAL_FLASHEx_Erase>
			//Пишем данные в память
			l_Address = FLASH_TABLE_START_ADDR;
 800291a:	4b3c      	ldr	r3, [pc, #240]	; (8002a0c <main+0x2e8>)
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
			l_Error = 0x00;
 800291e:	2300      	movs	r3, #0
 8002920:	603b      	str	r3, [r7, #0]
			l_Index = 0x00;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]

			while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002926:	e019      	b.n	800295c <main+0x238>
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
						DevNVRAM.data32[l_Index]) != HAL_OK) {
 8002928:	4a39      	ldr	r2, [pc, #228]	; (8002a10 <main+0x2ec>)
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8002930:	461a      	mov	r2, r3
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002938:	2002      	movs	r0, #2
 800293a:	f001 fd7d 	bl	8004438 <HAL_FLASH_Program>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <main+0x226>
					l_Error++;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	3301      	adds	r3, #1
 8002948:	603b      	str	r3, [r7, #0]
				}

				l_Address = l_Address + 4;
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	3304      	adds	r3, #4
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
				l_Index = l_Index + 1;
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	3301      	adds	r3, #1
 8002954:	623b      	str	r3, [r7, #32]
				HAL_Delay(10);
 8002956:	200a      	movs	r0, #10
 8002958:	f000 ff5e 	bl	8003818 <HAL_Delay>
			while (l_Address < FLASH_TABLE_STOP_ADDR) {
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	4a2d      	ldr	r2, [pc, #180]	; (8002a14 <main+0x2f0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d9e1      	bls.n	8002928 <main+0x204>
			}
			HAL_FLASH_Lock();
 8002964:	f001 fdfe 	bl	8004564 <HAL_FLASH_Lock>
	// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!


// Циклически проверяем соотвествует ли информация в памяти массиву настроек?

	l_Address = FLASH_TABLE_START_ADDR;
 8002968:	4b28      	ldr	r3, [pc, #160]	; (8002a0c <main+0x2e8>)
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
	l_Error = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	603b      	str	r3, [r7, #0]
	l_Index = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	623b      	str	r3, [r7, #32]
	//Читаем и сравниваем
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002974:	e010      	b.n	8002998 <main+0x274>
		if (DevNVRAM.data32[l_Index] != *(__IO uint32_t*) l_Address) {
 8002976:	4a26      	ldr	r2, [pc, #152]	; (8002a10 <main+0x2ec>)
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d002      	beq.n	800298c <main+0x268>
			l_Error++;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	603b      	str	r3, [r7, #0]
		}
		l_Index = l_Index + 1;
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	3301      	adds	r3, #1
 8002990:	623b      	str	r3, [r7, #32]
		l_Address = l_Address + 4;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	3304      	adds	r3, #4
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	4a1e      	ldr	r2, [pc, #120]	; (8002a14 <main+0x2f0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d9ea      	bls.n	8002976 <main+0x252>
	}

	if (l_Error > 0) { // конфигурация изменилась сохраняем
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d05e      	beq.n	8002a64 <main+0x340>
		// Готовим к записи в память
		HAL_FLASH_Unlock();
 80029a6:	f001 fdb7 	bl	8004518 <HAL_FLASH_Unlock>
		// Очищаем страницу памяти
		HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 80029aa:	463b      	mov	r3, r7
 80029ac:	4619      	mov	r1, r3
 80029ae:	4816      	ldr	r0, [pc, #88]	; (8002a08 <main+0x2e4>)
 80029b0:	f001 fe9a 	bl	80046e8 <HAL_FLASHEx_Erase>
		//Пишем данные в память
		l_Address = FLASH_TABLE_START_ADDR;
 80029b4:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <main+0x2e8>)
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
		l_Error = 0x00;
 80029b8:	2300      	movs	r3, #0
 80029ba:	603b      	str	r3, [r7, #0]
		l_Index = 0x00;
 80029bc:	2300      	movs	r3, #0
 80029be:	623b      	str	r3, [r7, #32]

		DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <main+0x2ec>)
 80029c2:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 80029c6:	3301      	adds	r3, #1
 80029c8:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <main+0x2ec>)
 80029ca:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		DevNVRAM.sector.CheckSum = HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));
 80029ce:	22fe      	movs	r2, #254	; 0xfe
 80029d0:	490f      	ldr	r1, [pc, #60]	; (8002a10 <main+0x2ec>)
 80029d2:	4813      	ldr	r0, [pc, #76]	; (8002a20 <main+0x2fc>)
 80029d4:	f001 fcfd 	bl	80043d2 <HAL_CRC_Calculate>
 80029d8:	4603      	mov	r3, r0
 80029da:	4a0d      	ldr	r2, [pc, #52]	; (8002a10 <main+0x2ec>)
 80029dc:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc

		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80029e0:	e03a      	b.n	8002a58 <main+0x334>
 80029e2:	bf00      	nop
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000004 	.word	0x20000004
 80029ec:	20000008 	.word	0x20000008
 80029f0:	2000000c 	.word	0x2000000c
 80029f4:	0800da18 	.word	0x0800da18
 80029f8:	2000020c 	.word	0x2000020c
 80029fc:	20000904 	.word	0x20000904
 8002a00:	200008b4 	.word	0x200008b4
 8002a04:	2000094c 	.word	0x2000094c
 8002a08:	20000274 	.word	0x20000274
 8002a0c:	0801fc00 	.word	0x0801fc00
 8002a10:	200004b4 	.word	0x200004b4
 8002a14:	0801ffff 	.word	0x0801ffff
 8002a18:	48151623 	.word	0x48151623
 8002a1c:	01121001 	.word	0x01121001
 8002a20:	200008fc 	.word	0x200008fc
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
					DevNVRAM.data32[l_Index]) != HAL_OK) {
 8002a24:	4a8e      	ldr	r2, [pc, #568]	; (8002c60 <main+0x53c>)
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a34:	2002      	movs	r0, #2
 8002a36:	f001 fcff 	bl	8004438 <HAL_FLASH_Program>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <main+0x322>
				l_Error++;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	3301      	adds	r3, #1
 8002a44:	603b      	str	r3, [r7, #0]
			}

			l_Address = l_Address + 4;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	3304      	adds	r3, #4
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
			l_Index = l_Index + 1;
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	623b      	str	r3, [r7, #32]
			HAL_Delay(10);
 8002a52:	200a      	movs	r0, #10
 8002a54:	f000 fee0 	bl	8003818 <HAL_Delay>
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	4a82      	ldr	r2, [pc, #520]	; (8002c64 <main+0x540>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d9e1      	bls.n	8002a24 <main+0x300>
		}
		HAL_FLASH_Lock();
 8002a60:	f001 fd80 	bl	8004564 <HAL_FLASH_Lock>
	}
	HAL_Delay(100);
 8002a64:	2064      	movs	r0, #100	; 0x64
 8002a66:	f000 fed7 	bl	8003818 <HAL_Delay>
//--------------------------------------------------------------------------


	crete_calibration_table(&DevNVRAM);
 8002a6a:	487d      	ldr	r0, [pc, #500]	; (8002c60 <main+0x53c>)
 8002a6c:	f7fe f978 	bl	8000d60 <crete_calibration_table>

//**************************************************************************
// Циклически проверяем соотвествует ли информация в памяти массиву настроек?
//		if()

		l_Address = FLASH_TABLE_START_ADDR;
 8002a70:	4b7d      	ldr	r3, [pc, #500]	; (8002c68 <main+0x544>)
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
		l_Error = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	603b      	str	r3, [r7, #0]
		l_Index = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	623b      	str	r3, [r7, #32]
		//Читаем и сравниваем
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002a7c:	e010      	b.n	8002aa0 <main+0x37c>
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t*) l_Address) {
 8002a7e:	4a78      	ldr	r2, [pc, #480]	; (8002c60 <main+0x53c>)
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d002      	beq.n	8002a94 <main+0x370>
				l_Error++;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	3301      	adds	r3, #1
 8002a92:	603b      	str	r3, [r7, #0]
			}
			l_Index = l_Index + 1;
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	3301      	adds	r3, #1
 8002a98:	623b      	str	r3, [r7, #32]
			l_Address = l_Address + 4;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	4a70      	ldr	r2, [pc, #448]	; (8002c64 <main+0x540>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d9ea      	bls.n	8002a7e <main+0x35a>
		}

		if (l_Error > 0) { // конфигурация изменилась сохраняем
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d048      	beq.n	8002b40 <main+0x41c>
			printf("Ошибка чтения таблицы :%i", l_Error);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	486e      	ldr	r0, [pc, #440]	; (8002c6c <main+0x548>)
 8002ab4:	f009 fdbc 	bl	800c630 <iprintf>
			if (l_Error > 0) { // конфигурация изменилась сохраняем
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d03d      	beq.n	8002b3a <main+0x416>
					// Готовим к записи в память
					HAL_FLASH_Unlock();
 8002abe:	f001 fd2b 	bl	8004518 <HAL_FLASH_Unlock>
					// Очищаем страницу памяти
					HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8002ac2:	463b      	mov	r3, r7
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	486a      	ldr	r0, [pc, #424]	; (8002c70 <main+0x54c>)
 8002ac8:	f001 fe0e 	bl	80046e8 <HAL_FLASHEx_Erase>
					//Пишем данные в память
					l_Address = FLASH_TABLE_START_ADDR;
 8002acc:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <main+0x544>)
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
					l_Error = 0x00;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	603b      	str	r3, [r7, #0]
					l_Index = 0x00;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	623b      	str	r3, [r7, #32]

					DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8002ad8:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <main+0x53c>)
 8002ada:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8002ade:	3301      	adds	r3, #1
 8002ae0:	4a5f      	ldr	r2, [pc, #380]	; (8002c60 <main+0x53c>)
 8002ae2:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
					DevNVRAM.sector.CheckSum = HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));
 8002ae6:	22fe      	movs	r2, #254	; 0xfe
 8002ae8:	495d      	ldr	r1, [pc, #372]	; (8002c60 <main+0x53c>)
 8002aea:	4862      	ldr	r0, [pc, #392]	; (8002c74 <main+0x550>)
 8002aec:	f001 fc71 	bl	80043d2 <HAL_CRC_Calculate>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4a5b      	ldr	r2, [pc, #364]	; (8002c60 <main+0x53c>)
 8002af4:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc

					while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002af8:	e019      	b.n	8002b2e <main+0x40a>
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
								DevNVRAM.data32[l_Index]) != HAL_OK) {
 8002afa:	4a59      	ldr	r2, [pc, #356]	; (8002c60 <main+0x53c>)
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8002b02:	461a      	mov	r2, r3
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0a:	2002      	movs	r0, #2
 8002b0c:	f001 fc94 	bl	8004438 <HAL_FLASH_Program>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <main+0x3f8>
							l_Error++;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	603b      	str	r3, [r7, #0]
						}

						l_Address = l_Address + 4;
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	3304      	adds	r3, #4
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
						l_Index = l_Index + 1;
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	3301      	adds	r3, #1
 8002b26:	623b      	str	r3, [r7, #32]
						HAL_Delay(10);
 8002b28:	200a      	movs	r0, #10
 8002b2a:	f000 fe75 	bl	8003818 <HAL_Delay>
					while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	4a4c      	ldr	r2, [pc, #304]	; (8002c64 <main+0x540>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d9e1      	bls.n	8002afa <main+0x3d6>
					}
					HAL_FLASH_Lock();
 8002b36:	f001 fd15 	bl	8004564 <HAL_FLASH_Lock>
				}
				HAL_Delay(100);
 8002b3a:	2064      	movs	r0, #100	; 0x64
 8002b3c:	f000 fe6c 	bl	8003818 <HAL_Delay>
		}

//**************************************************************************


		uint32_t Crc_cal_a_m12 = getCRC_table_a_m12();
 8002b40:	f7ff fbac 	bl	800229c <getCRC_table_a_m12>
 8002b44:	61b8      	str	r0, [r7, #24]
		uint32_t Crc_cal_b_m12 = getCRC_table_b_m12();
 8002b46:	f7ff fbbf 	bl	80022c8 <getCRC_table_b_m12>
 8002b4a:	6178      	str	r0, [r7, #20]
		uint32_t Crc_cal_a_m27 = getCRC_table_a_m27();
 8002b4c:	f7ff fbca 	bl	80022e4 <getCRC_table_a_m27>
 8002b50:	6138      	str	r0, [r7, #16]
		uint32_t Crc_cal_b_m27 = getCRC_table_b_m27();
 8002b52:	f7ff fbd5 	bl	8002300 <getCRC_table_b_m27>
 8002b56:	60f8      	str	r0, [r7, #12]


//**************************************************************************
#if  TEST_READ_BTN

		uint32_t ms = HAL_GetTick();
 8002b58:	f000 fe54 	bl	8003804 <HAL_GetTick>
 8002b5c:	60b8      	str	r0, [r7, #8]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 8002b5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b62:	4845      	ldr	r0, [pc, #276]	; (8002c78 <main+0x554>)
 8002b64:	f001 ffec 	bl	8004b40 <HAL_GPIO_ReadPin>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	71fb      	strb	r3, [r7, #7]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50) {
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d113      	bne.n	8002b9a <main+0x476>
 8002b72:	4b42      	ldr	r3, [pc, #264]	; (8002c7c <main+0x558>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10f      	bne.n	8002b9a <main+0x476>
 8002b7a:	4b41      	ldr	r3, [pc, #260]	; (8002c80 <main+0x55c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b32      	cmp	r3, #50	; 0x32
 8002b84:	d909      	bls.n	8002b9a <main+0x476>
			short_state1 = 1;
 8002b86:	4b3d      	ldr	r3, [pc, #244]	; (8002c7c <main+0x558>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 8002b8c:	4b3d      	ldr	r3, [pc, #244]	; (8002c84 <main+0x560>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8002b92:	4a3b      	ldr	r2, [pc, #236]	; (8002c80 <main+0x55c>)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	e02e      	b.n	8002bf8 <main+0x4d4>
		} else if (key1_state
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d111      	bne.n	8002bc4 <main+0x4a0>
				== 0&& !long_state1 && (ms - time_key1) > KEY_LONG_DELAY) {
 8002ba0:	4b38      	ldr	r3, [pc, #224]	; (8002c84 <main+0x560>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10d      	bne.n	8002bc4 <main+0x4a0>
 8002ba8:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <main+0x55c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb4:	d906      	bls.n	8002bc4 <main+0x4a0>
			long_state1 = 1;
 8002bb6:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <main+0x560>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 8002bbc:	4b32      	ldr	r3, [pc, #200]	; (8002c88 <main+0x564>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	e019      	b.n	8002bf8 <main+0x4d4>

		} else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50) {
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d116      	bne.n	8002bf8 <main+0x4d4>
 8002bca:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <main+0x558>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d012      	beq.n	8002bf8 <main+0x4d4>
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <main+0x55c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b32      	cmp	r3, #50	; 0x32
 8002bdc:	d90c      	bls.n	8002bf8 <main+0x4d4>
			short_state1 = 0;
 8002bde:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <main+0x558>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8002be4:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <main+0x55c>)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	6013      	str	r3, [r2, #0]

			if (!long_state1) {
 8002bea:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <main+0x560>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d102      	bne.n	8002bf8 <main+0x4d4>
				// действие на короткое нажатие
				btn1_short_rd = 1;
 8002bf2:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <main+0x568>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 8002bf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bfc:	481e      	ldr	r0, [pc, #120]	; (8002c78 <main+0x554>)
 8002bfe:	f001 ff9f 	bl	8004b40 <HAL_GPIO_ReadPin>
 8002c02:	4603      	mov	r3, r0
 8002c04:	71bb      	strb	r3, [r7, #6]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50) {
 8002c06:	79bb      	ldrb	r3, [r7, #6]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d113      	bne.n	8002c34 <main+0x510>
 8002c0c:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <main+0x56c>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10f      	bne.n	8002c34 <main+0x510>
 8002c14:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <main+0x570>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b32      	cmp	r3, #50	; 0x32
 8002c1e:	d909      	bls.n	8002c34 <main+0x510>
			short_state2 = 1;
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <main+0x56c>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 8002c26:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <main+0x574>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8002c2c:	4a19      	ldr	r2, [pc, #100]	; (8002c94 <main+0x570>)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e04f      	b.n	8002cd4 <main+0x5b0>
		} else if (key2_state
 8002c34:	79bb      	ldrb	r3, [r7, #6]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d132      	bne.n	8002ca0 <main+0x57c>
				== 0&& !long_state2 && (ms - time_key2) > KEY_LONG_DELAY) {
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <main+0x574>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d12e      	bne.n	8002ca0 <main+0x57c>
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <main+0x570>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c4e:	d927      	bls.n	8002ca0 <main+0x57c>
			long_state2 = 1;
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <main+0x574>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <main+0x578>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e03a      	b.n	8002cd4 <main+0x5b0>
 8002c5e:	bf00      	nop
 8002c60:	200004b4 	.word	0x200004b4
 8002c64:	0801ffff 	.word	0x0801ffff
 8002c68:	0801fc00 	.word	0x0801fc00
 8002c6c:	0800da2c 	.word	0x0800da2c
 8002c70:	20000274 	.word	0x20000274
 8002c74:	200008fc 	.word	0x200008fc
 8002c78:	40010c00 	.word	0x40010c00
 8002c7c:	20000250 	.word	0x20000250
 8002c80:	20000254 	.word	0x20000254
 8002c84:	20000251 	.word	0x20000251
 8002c88:	20000258 	.word	0x20000258
 8002c8c:	20000259 	.word	0x20000259
 8002c90:	2000025a 	.word	0x2000025a
 8002c94:	2000025c 	.word	0x2000025c
 8002c98:	2000025b 	.word	0x2000025b
 8002c9c:	20000260 	.word	0x20000260
		} else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50) {
 8002ca0:	79bb      	ldrb	r3, [r7, #6]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d116      	bne.n	8002cd4 <main+0x5b0>
 8002ca6:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <main+0x654>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d012      	beq.n	8002cd4 <main+0x5b0>
 8002cae:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <main+0x658>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b32      	cmp	r3, #50	; 0x32
 8002cb8:	d90c      	bls.n	8002cd4 <main+0x5b0>
			short_state2 = 0;
 8002cba:	4b2f      	ldr	r3, [pc, #188]	; (8002d78 <main+0x654>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8002cc0:	4a2e      	ldr	r2, [pc, #184]	; (8002d7c <main+0x658>)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6013      	str	r3, [r2, #0]

			if (!long_state2) {
 8002cc6:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <main+0x65c>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <main+0x5b0>
				// действие на короткое нажатие
				btn2_short_rd = 1;
 8002cce:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <main+0x660>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 8002cd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cd8:	482b      	ldr	r0, [pc, #172]	; (8002d88 <main+0x664>)
 8002cda:	f001 ff31 	bl	8004b40 <HAL_GPIO_ReadPin>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	717b      	strb	r3, [r7, #5]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50) {
 8002ce2:	797b      	ldrb	r3, [r7, #5]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d113      	bne.n	8002d10 <main+0x5ec>
 8002ce8:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <main+0x668>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10f      	bne.n	8002d10 <main+0x5ec>
 8002cf0:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <main+0x66c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b32      	cmp	r3, #50	; 0x32
 8002cfa:	d909      	bls.n	8002d10 <main+0x5ec>
			short_state3 = 1;
 8002cfc:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <main+0x668>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 8002d02:	4b24      	ldr	r3, [pc, #144]	; (8002d94 <main+0x670>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8002d08:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <main+0x66c>)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e032      	b.n	8002d76 <main+0x652>
		} else if (key3_state
 8002d10:	797b      	ldrb	r3, [r7, #5]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d111      	bne.n	8002d3a <main+0x616>
				== 0&& !long_state3 && (ms - time_key3) > KEY_LONG_DELAY) {
 8002d16:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <main+0x670>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10d      	bne.n	8002d3a <main+0x616>
 8002d1e:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <main+0x66c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d2a:	d906      	bls.n	8002d3a <main+0x616>
			long_state3 = 1;
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <main+0x670>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 8002d32:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <main+0x674>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	e01d      	b.n	8002d76 <main+0x652>
		} else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50) {
 8002d3a:	797b      	ldrb	r3, [r7, #5]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	f47f ae97 	bne.w	8002a70 <main+0x34c>
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <main+0x668>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f43f ae92 	beq.w	8002a70 <main+0x34c>
 8002d4c:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <main+0x66c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b32      	cmp	r3, #50	; 0x32
 8002d56:	f67f ae8b 	bls.w	8002a70 <main+0x34c>
			short_state3 = 0;
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <main+0x668>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8002d60:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <main+0x66c>)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	6013      	str	r3, [r2, #0]

			if (!long_state3) {
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <main+0x670>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f47f ae80 	bne.w	8002a70 <main+0x34c>
				// действие на короткое нажатие
				btn3_short_rd = 1;
 8002d70:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <main+0x678>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
	while (1) {
 8002d76:	e67b      	b.n	8002a70 <main+0x34c>
 8002d78:	2000025a 	.word	0x2000025a
 8002d7c:	2000025c 	.word	0x2000025c
 8002d80:	2000025b 	.word	0x2000025b
 8002d84:	20000261 	.word	0x20000261
 8002d88:	40010c00 	.word	0x40010c00
 8002d8c:	20000262 	.word	0x20000262
 8002d90:	20000264 	.word	0x20000264
 8002d94:	20000263 	.word	0x20000263
 8002d98:	20000268 	.word	0x20000268
 8002d9c:	20000269 	.word	0x20000269

08002da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b094      	sub	sp, #80	; 0x50
 8002da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002da6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002daa:	2228      	movs	r2, #40	; 0x28
 8002dac:	2100      	movs	r1, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f009 fc36 	bl	800c620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dde:	2301      	movs	r3, #1
 8002de0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002de2:	2302      	movs	r3, #2
 8002de4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002dec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 fa62 	bl	80062c0 <HAL_RCC_OscConfig>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002e02:	f000 fa09 	bl	8003218 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e06:	230f      	movs	r3, #15
 8002e08:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	2102      	movs	r1, #2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 fccc 	bl	80067c0 <HAL_RCC_ClockConfig>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002e2e:	f000 f9f3 	bl	8003218 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002e32:	2312      	movs	r3, #18
 8002e34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	4618      	mov	r0, r3
 8002e44:	f003 fe42 	bl	8006acc <HAL_RCCEx_PeriphCLKConfig>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002e4e:	f000 f9e3 	bl	8003218 <Error_Handler>
  }
}
 8002e52:	bf00      	nop
 8002e54:	3750      	adds	r7, #80	; 0x50
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e62:	1d3b      	adds	r3, r7, #4
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002e6c:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <MX_ADC1_Init+0x74>)
 8002e6e:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <MX_ADC1_Init+0x78>)
 8002e70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e72:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <MX_ADC1_Init+0x74>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e78:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <MX_ADC1_Init+0x74>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <MX_ADC1_Init+0x74>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <MX_ADC1_Init+0x74>)
 8002e86:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002e8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e8c:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <MX_ADC1_Init+0x74>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002e92:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <MX_ADC1_Init+0x74>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e98:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <MX_ADC1_Init+0x74>)
 8002e9a:	f000 fce1 	bl	8003860 <HAL_ADC_Init>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002ea4:	f000 f9b8 	bl	8003218 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002eac:	2301      	movs	r3, #1
 8002eae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4805      	ldr	r0, [pc, #20]	; (8002ed0 <MX_ADC1_Init+0x74>)
 8002eba:	f000 ff37 	bl	8003d2c <HAL_ADC_ConfigChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002ec4:	f000 f9a8 	bl	8003218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ec8:	bf00      	nop
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	2000094c 	.word	0x2000094c
 8002ed4:	40012400 	.word	0x40012400

08002ed8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <MX_CRC_Init+0x20>)
 8002ede:	4a07      	ldr	r2, [pc, #28]	; (8002efc <MX_CRC_Init+0x24>)
 8002ee0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002ee2:	4805      	ldr	r0, [pc, #20]	; (8002ef8 <MX_CRC_Init+0x20>)
 8002ee4:	f001 fa59 	bl	800439a <HAL_CRC_Init>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002eee:	f000 f993 	bl	8003218 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200008fc 	.word	0x200008fc
 8002efc:	40023000 	.word	0x40023000

08002f00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f04:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <MX_SPI1_Init+0x68>)
 8002f06:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <MX_SPI1_Init+0x6c>)
 8002f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f0a:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <MX_SPI1_Init+0x68>)
 8002f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <MX_SPI1_Init+0x68>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <MX_SPI1_Init+0x68>)
 8002f1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f1e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <MX_SPI1_Init+0x68>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <MX_SPI1_Init+0x68>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f2c:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <MX_SPI1_Init+0x68>)
 8002f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <MX_SPI1_Init+0x68>)
 8002f36:	2208      	movs	r2, #8
 8002f38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <MX_SPI1_Init+0x68>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f40:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <MX_SPI1_Init+0x68>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f46:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <MX_SPI1_Init+0x68>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <MX_SPI1_Init+0x68>)
 8002f4e:	220a      	movs	r2, #10
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f52:	4805      	ldr	r0, [pc, #20]	; (8002f68 <MX_SPI1_Init+0x68>)
 8002f54:	f003 ff34 	bl	8006dc0 <HAL_SPI_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002f5e:	f000 f95b 	bl	8003218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000097c 	.word	0x2000097c
 8002f6c:	40013000 	.word	0x40013000

08002f70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f76:	f107 0310 	add.w	r3, r7, #16
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f80:	463b      	mov	r3, r7
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	609a      	str	r2, [r3, #8]
 8002f8a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f8c:	4b27      	ldr	r3, [pc, #156]	; (800302c <MX_TIM3_Init+0xbc>)
 8002f8e:	4a28      	ldr	r2, [pc, #160]	; (8003030 <MX_TIM3_Init+0xc0>)
 8002f90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002f92:	4b26      	ldr	r3, [pc, #152]	; (800302c <MX_TIM3_Init+0xbc>)
 8002f94:	2247      	movs	r2, #71	; 0x47
 8002f96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f98:	4b24      	ldr	r3, [pc, #144]	; (800302c <MX_TIM3_Init+0xbc>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 8002f9e:	4b23      	ldr	r3, [pc, #140]	; (800302c <MX_TIM3_Init+0xbc>)
 8002fa0:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8002fa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa6:	4b21      	ldr	r3, [pc, #132]	; (800302c <MX_TIM3_Init+0xbc>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fac:	4b1f      	ldr	r3, [pc, #124]	; (800302c <MX_TIM3_Init+0xbc>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002fb2:	481e      	ldr	r0, [pc, #120]	; (800302c <MX_TIM3_Init+0xbc>)
 8002fb4:	f004 f96a 	bl	800728c <HAL_TIM_IC_Init>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002fbe:	f000 f92b 	bl	8003218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fca:	f107 0310 	add.w	r3, r7, #16
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4816      	ldr	r0, [pc, #88]	; (800302c <MX_TIM3_Init+0xbc>)
 8002fd2:	f004 fe49 	bl	8007c68 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002fdc:	f000 f91c 	bl	8003218 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002ff0:	463b      	mov	r3, r7
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	480d      	ldr	r0, [pc, #52]	; (800302c <MX_TIM3_Init+0xbc>)
 8002ff8:	f004 fba6 	bl	8007748 <HAL_TIM_IC_ConfigChannel>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003002:	f000 f909 	bl	8003218 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003006:	2302      	movs	r3, #2
 8003008:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800300a:	2302      	movs	r3, #2
 800300c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800300e:	463b      	mov	r3, r7
 8003010:	2204      	movs	r2, #4
 8003012:	4619      	mov	r1, r3
 8003014:	4805      	ldr	r0, [pc, #20]	; (800302c <MX_TIM3_Init+0xbc>)
 8003016:	f004 fb97 	bl	8007748 <HAL_TIM_IC_ConfigChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003020:	f000 f8fa 	bl	8003218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003024:	bf00      	nop
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000904 	.word	0x20000904
 8003030:	40000400 	.word	0x40000400

08003034 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800303a:	f107 0310 	add.w	r3, r7, #16
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003044:	463b      	mov	r3, r7
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	609a      	str	r2, [r3, #8]
 800304e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003050:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <MX_TIM4_Init+0xbc>)
 8003052:	4a28      	ldr	r2, [pc, #160]	; (80030f4 <MX_TIM4_Init+0xc0>)
 8003054:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8003056:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <MX_TIM4_Init+0xbc>)
 8003058:	2247      	movs	r2, #71	; 0x47
 800305a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800305c:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <MX_TIM4_Init+0xbc>)
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 8003062:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <MX_TIM4_Init+0xbc>)
 8003064:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8003068:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800306a:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <MX_TIM4_Init+0xbc>)
 800306c:	2200      	movs	r2, #0
 800306e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003070:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <MX_TIM4_Init+0xbc>)
 8003072:	2200      	movs	r2, #0
 8003074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003076:	481e      	ldr	r0, [pc, #120]	; (80030f0 <MX_TIM4_Init+0xbc>)
 8003078:	f004 f908 	bl	800728c <HAL_TIM_IC_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003082:	f000 f8c9 	bl	8003218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800308e:	f107 0310 	add.w	r3, r7, #16
 8003092:	4619      	mov	r1, r3
 8003094:	4816      	ldr	r0, [pc, #88]	; (80030f0 <MX_TIM4_Init+0xbc>)
 8003096:	f004 fde7 	bl	8007c68 <HAL_TIMEx_MasterConfigSynchronization>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80030a0:	f000 f8ba 	bl	8003218 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80030a4:	2300      	movs	r3, #0
 80030a6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80030a8:	2301      	movs	r3, #1
 80030aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80030b4:	463b      	mov	r3, r7
 80030b6:	2200      	movs	r2, #0
 80030b8:	4619      	mov	r1, r3
 80030ba:	480d      	ldr	r0, [pc, #52]	; (80030f0 <MX_TIM4_Init+0xbc>)
 80030bc:	f004 fb44 	bl	8007748 <HAL_TIM_IC_ConfigChannel>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80030c6:	f000 f8a7 	bl	8003218 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80030ca:	2302      	movs	r3, #2
 80030cc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80030ce:	2302      	movs	r3, #2
 80030d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80030d2:	463b      	mov	r3, r7
 80030d4:	2204      	movs	r2, #4
 80030d6:	4619      	mov	r1, r3
 80030d8:	4805      	ldr	r0, [pc, #20]	; (80030f0 <MX_TIM4_Init+0xbc>)
 80030da:	f004 fb35 	bl	8007748 <HAL_TIM_IC_ConfigChannel>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80030e4:	f000 f898 	bl	8003218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030e8:	bf00      	nop
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	200008b4 	.word	0x200008b4
 80030f4:	40000800 	.word	0x40000800

080030f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fe:	f107 0310 	add.w	r3, r7, #16
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800310c:	4b3e      	ldr	r3, [pc, #248]	; (8003208 <MX_GPIO_Init+0x110>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	4a3d      	ldr	r2, [pc, #244]	; (8003208 <MX_GPIO_Init+0x110>)
 8003112:	f043 0310 	orr.w	r3, r3, #16
 8003116:	6193      	str	r3, [r2, #24]
 8003118:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <MX_GPIO_Init+0x110>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003124:	4b38      	ldr	r3, [pc, #224]	; (8003208 <MX_GPIO_Init+0x110>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	4a37      	ldr	r2, [pc, #220]	; (8003208 <MX_GPIO_Init+0x110>)
 800312a:	f043 0320 	orr.w	r3, r3, #32
 800312e:	6193      	str	r3, [r2, #24]
 8003130:	4b35      	ldr	r3, [pc, #212]	; (8003208 <MX_GPIO_Init+0x110>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800313c:	4b32      	ldr	r3, [pc, #200]	; (8003208 <MX_GPIO_Init+0x110>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	4a31      	ldr	r2, [pc, #196]	; (8003208 <MX_GPIO_Init+0x110>)
 8003142:	f043 0304 	orr.w	r3, r3, #4
 8003146:	6193      	str	r3, [r2, #24]
 8003148:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <MX_GPIO_Init+0x110>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003154:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <MX_GPIO_Init+0x110>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	4a2b      	ldr	r2, [pc, #172]	; (8003208 <MX_GPIO_Init+0x110>)
 800315a:	f043 0308 	orr.w	r3, r3, #8
 800315e:	6193      	str	r3, [r2, #24]
 8003160:	4b29      	ldr	r3, [pc, #164]	; (8003208 <MX_GPIO_Init+0x110>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800316c:	2200      	movs	r2, #0
 800316e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003172:	4826      	ldr	r0, [pc, #152]	; (800320c <MX_GPIO_Init+0x114>)
 8003174:	f001 fcfb 	bl	8004b6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8003178:	2200      	movs	r2, #0
 800317a:	f240 4112 	movw	r1, #1042	; 0x412
 800317e:	4824      	ldr	r0, [pc, #144]	; (8003210 <MX_GPIO_Init+0x118>)
 8003180:	f001 fcf5 	bl	8004b6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8003184:	2201      	movs	r2, #1
 8003186:	2104      	movs	r1, #4
 8003188:	4821      	ldr	r0, [pc, #132]	; (8003210 <MX_GPIO_Init+0x118>)
 800318a:	f001 fcf0 	bl	8004b6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800318e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003194:	2301      	movs	r3, #1
 8003196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319c:	2302      	movs	r3, #2
 800319e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a0:	f107 0310 	add.w	r3, r7, #16
 80031a4:	4619      	mov	r1, r3
 80031a6:	4819      	ldr	r0, [pc, #100]	; (800320c <MX_GPIO_Init+0x114>)
 80031a8:	f001 fb46 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 80031ac:	f240 4316 	movw	r3, #1046	; 0x416
 80031b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b2:	2301      	movs	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ba:	2302      	movs	r3, #2
 80031bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031be:	f107 0310 	add.w	r3, r7, #16
 80031c2:	4619      	mov	r1, r3
 80031c4:	4812      	ldr	r0, [pc, #72]	; (8003210 <MX_GPIO_Init+0x118>)
 80031c6:	f001 fb37 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80031ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031d4:	2301      	movs	r3, #1
 80031d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d8:	f107 0310 	add.w	r3, r7, #16
 80031dc:	4619      	mov	r1, r3
 80031de:	480d      	ldr	r0, [pc, #52]	; (8003214 <MX_GPIO_Init+0x11c>)
 80031e0:	f001 fb2a 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80031e4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80031e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f2:	f107 0310 	add.w	r3, r7, #16
 80031f6:	4619      	mov	r1, r3
 80031f8:	4806      	ldr	r0, [pc, #24]	; (8003214 <MX_GPIO_Init+0x11c>)
 80031fa:	f001 fb1d 	bl	8004838 <HAL_GPIO_Init>

}
 80031fe:	bf00      	nop
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	40011000 	.word	0x40011000
 8003210:	40010800 	.word	0x40010800
 8003214:	40010c00 	.word	0x40010c00

08003218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800322a:	4b15      	ldr	r3, [pc, #84]	; (8003280 <HAL_MspInit+0x5c>)
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	4a14      	ldr	r2, [pc, #80]	; (8003280 <HAL_MspInit+0x5c>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6193      	str	r3, [r2, #24]
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_MspInit+0x5c>)
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <HAL_MspInit+0x5c>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <HAL_MspInit+0x5c>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324c:	61d3      	str	r3, [r2, #28]
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <HAL_MspInit+0x5c>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <HAL_MspInit+0x60>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	4a04      	ldr	r2, [pc, #16]	; (8003284 <HAL_MspInit+0x60>)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	40021000 	.word	0x40021000
 8003284:	40010000 	.word	0x40010000

08003288 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a18      	ldr	r2, [pc, #96]	; (8003304 <HAL_ADC_MspInit+0x7c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d129      	bne.n	80032fc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032a8:	4b17      	ldr	r3, [pc, #92]	; (8003308 <HAL_ADC_MspInit+0x80>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	4a16      	ldr	r2, [pc, #88]	; (8003308 <HAL_ADC_MspInit+0x80>)
 80032ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b2:	6193      	str	r3, [r2, #24]
 80032b4:	4b14      	ldr	r3, [pc, #80]	; (8003308 <HAL_ADC_MspInit+0x80>)
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <HAL_ADC_MspInit+0x80>)
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	4a10      	ldr	r2, [pc, #64]	; (8003308 <HAL_ADC_MspInit+0x80>)
 80032c6:	f043 0304 	orr.w	r3, r3, #4
 80032ca:	6193      	str	r3, [r2, #24]
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <HAL_ADC_MspInit+0x80>)
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032d8:	2308      	movs	r3, #8
 80032da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032dc:	2303      	movs	r3, #3
 80032de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 0310 	add.w	r3, r7, #16
 80032e4:	4619      	mov	r1, r3
 80032e6:	4809      	ldr	r0, [pc, #36]	; (800330c <HAL_ADC_MspInit+0x84>)
 80032e8:	f001 faa6 	bl	8004838 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2100      	movs	r1, #0
 80032f0:	2012      	movs	r0, #18
 80032f2:	f001 f81c 	bl	800432e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80032f6:	2012      	movs	r0, #18
 80032f8:	f001 f835 	bl	8004366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032fc:	bf00      	nop
 80032fe:	3720      	adds	r7, #32
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40012400 	.word	0x40012400
 8003308:	40021000 	.word	0x40021000
 800330c:	40010800 	.word	0x40010800

08003310 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a09      	ldr	r2, [pc, #36]	; (8003344 <HAL_CRC_MspInit+0x34>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d10b      	bne.n	800333a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003322:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_CRC_MspInit+0x38>)
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4a08      	ldr	r2, [pc, #32]	; (8003348 <HAL_CRC_MspInit+0x38>)
 8003328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800332c:	6153      	str	r3, [r2, #20]
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_CRC_MspInit+0x38>)
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40023000 	.word	0x40023000
 8003348:	40021000 	.word	0x40021000

0800334c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003354:	f107 0310 	add.w	r3, r7, #16
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a15      	ldr	r2, [pc, #84]	; (80033bc <HAL_SPI_MspInit+0x70>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d123      	bne.n	80033b4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800336c:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <HAL_SPI_MspInit+0x74>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <HAL_SPI_MspInit+0x74>)
 8003372:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003376:	6193      	str	r3, [r2, #24]
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_SPI_MspInit+0x74>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_SPI_MspInit+0x74>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <HAL_SPI_MspInit+0x74>)
 800338a:	f043 0304 	orr.w	r3, r3, #4
 800338e:	6193      	str	r3, [r2, #24]
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_SPI_MspInit+0x74>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 800339c:	23a0      	movs	r3, #160	; 0xa0
 800339e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	2302      	movs	r3, #2
 80033a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033a4:	2303      	movs	r3, #3
 80033a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a8:	f107 0310 	add.w	r3, r7, #16
 80033ac:	4619      	mov	r1, r3
 80033ae:	4805      	ldr	r0, [pc, #20]	; (80033c4 <HAL_SPI_MspInit+0x78>)
 80033b0:	f001 fa42 	bl	8004838 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033b4:	bf00      	nop
 80033b6:	3720      	adds	r7, #32
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40013000 	.word	0x40013000
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40010800 	.word	0x40010800

080033c8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 031c 	add.w	r3, r7, #28
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a3b      	ldr	r2, [pc, #236]	; (80034d0 <HAL_TIM_IC_MspInit+0x108>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d13e      	bne.n	8003466 <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033e8:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_TIM_IC_MspInit+0x10c>)
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	4a39      	ldr	r2, [pc, #228]	; (80034d4 <HAL_TIM_IC_MspInit+0x10c>)
 80033ee:	f043 0302 	orr.w	r3, r3, #2
 80033f2:	61d3      	str	r3, [r2, #28]
 80033f4:	4b37      	ldr	r3, [pc, #220]	; (80034d4 <HAL_TIM_IC_MspInit+0x10c>)
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003400:	4b34      	ldr	r3, [pc, #208]	; (80034d4 <HAL_TIM_IC_MspInit+0x10c>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	4a33      	ldr	r2, [pc, #204]	; (80034d4 <HAL_TIM_IC_MspInit+0x10c>)
 8003406:	f043 0308 	orr.w	r3, r3, #8
 800340a:	6193      	str	r3, [r2, #24]
 800340c:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <HAL_TIM_IC_MspInit+0x10c>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003418:	2310      	movs	r3, #16
 800341a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800341c:	2300      	movs	r3, #0
 800341e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003424:	f107 031c 	add.w	r3, r7, #28
 8003428:	4619      	mov	r1, r3
 800342a:	482b      	ldr	r0, [pc, #172]	; (80034d8 <HAL_TIM_IC_MspInit+0x110>)
 800342c:	f001 fa04 	bl	8004838 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003430:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <HAL_TIM_IC_MspInit+0x114>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344e:	4a23      	ldr	r2, [pc, #140]	; (80034dc <HAL_TIM_IC_MspInit+0x114>)
 8003450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003452:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003454:	2200      	movs	r2, #0
 8003456:	2100      	movs	r1, #0
 8003458:	201d      	movs	r0, #29
 800345a:	f000 ff68 	bl	800432e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800345e:	201d      	movs	r0, #29
 8003460:	f000 ff81 	bl	8004366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003464:	e030      	b.n	80034c8 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <HAL_TIM_IC_MspInit+0x118>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d12b      	bne.n	80034c8 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003470:	4b18      	ldr	r3, [pc, #96]	; (80034d4 <HAL_TIM_IC_MspInit+0x10c>)
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	4a17      	ldr	r2, [pc, #92]	; (80034d4 <HAL_TIM_IC_MspInit+0x10c>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	61d3      	str	r3, [r2, #28]
 800347c:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <HAL_TIM_IC_MspInit+0x10c>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_TIM_IC_MspInit+0x10c>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	4a11      	ldr	r2, [pc, #68]	; (80034d4 <HAL_TIM_IC_MspInit+0x10c>)
 800348e:	f043 0308 	orr.w	r3, r3, #8
 8003492:	6193      	str	r3, [r2, #24]
 8003494:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <HAL_TIM_IC_MspInit+0x10c>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034a0:	2340      	movs	r3, #64	; 0x40
 80034a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a4:	2300      	movs	r3, #0
 80034a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ac:	f107 031c 	add.w	r3, r7, #28
 80034b0:	4619      	mov	r1, r3
 80034b2:	4809      	ldr	r0, [pc, #36]	; (80034d8 <HAL_TIM_IC_MspInit+0x110>)
 80034b4:	f001 f9c0 	bl	8004838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80034b8:	2200      	movs	r2, #0
 80034ba:	2100      	movs	r1, #0
 80034bc:	201e      	movs	r0, #30
 80034be:	f000 ff36 	bl	800432e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80034c2:	201e      	movs	r0, #30
 80034c4:	f000 ff4f 	bl	8004366 <HAL_NVIC_EnableIRQ>
}
 80034c8:	bf00      	nop
 80034ca:	3730      	adds	r7, #48	; 0x30
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40010c00 	.word	0x40010c00
 80034dc:	40010000 	.word	0x40010000
 80034e0:	40000800 	.word	0x40000800

080034e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 80034f4:	4806      	ldr	r0, [pc, #24]	; (8003510 <HardFault_Handler+0x20>)
 80034f6:	f009 f89b 	bl	800c630 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 80034fa:	4805      	ldr	r0, [pc, #20]	; (8003510 <HardFault_Handler+0x20>)
 80034fc:	f009 f898 	bl	800c630 <iprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003500:	2200      	movs	r2, #0
 8003502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003506:	4803      	ldr	r0, [pc, #12]	; (8003514 <HardFault_Handler+0x24>)
 8003508:	f001 fb31 	bl	8004b6e <HAL_GPIO_WritePin>
	  printf("HardFault_IRQn");
 800350c:	e7f5      	b.n	80034fa <HardFault_Handler+0xa>
 800350e:	bf00      	nop
 8003510:	0800da8c 	.word	0x0800da8c
 8003514:	40011000 	.word	0x40011000

08003518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800351c:	e7fe      	b.n	800351c <MemManage_Handler+0x4>

0800351e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003522:	e7fe      	b.n	8003522 <BusFault_Handler+0x4>

08003524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003528:	e7fe      	b.n	8003528 <UsageFault_Handler+0x4>

0800352a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr

08003536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003536:	b480      	push	{r7}
 8003538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr

08003542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003542:	b480      	push	{r7}
 8003544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003552:	f000 f945 	bl	80037e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003560:	4802      	ldr	r0, [pc, #8]	; (800356c <ADC1_2_IRQHandler+0x10>)
 8003562:	f000 fb17 	bl	8003b94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	2000094c 	.word	0x2000094c

08003570 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003576:	f001 fc43 	bl	8004e00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200012bc 	.word	0x200012bc

08003584 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <TIM3_IRQHandler+0x10>)
 800358a:	f003 ffd5 	bl	8007538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000904 	.word	0x20000904

08003598 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800359c:	4802      	ldr	r0, [pc, #8]	; (80035a8 <TIM4_IRQHandler+0x10>)
 800359e:	f003 ffcb 	bl	8007538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200008b4 	.word	0x200008b4

080035ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e00a      	b.n	80035d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035be:	f3af 8000 	nop.w
 80035c2:	4601      	mov	r1, r0
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	60ba      	str	r2, [r7, #8]
 80035ca:	b2ca      	uxtb	r2, r1
 80035cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	3301      	adds	r3, #1
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	429a      	cmp	r2, r3
 80035da:	dbf0      	blt.n	80035be <_read+0x12>
	}

return len;
 80035dc:	687b      	ldr	r3, [r7, #4]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
	return -1;
 80035ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800360c:	605a      	str	r2, [r3, #4]
	return 0;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr

0800361a <_isatty>:

int _isatty(int file)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
	return 1;
 8003622:	2301      	movs	r3, #1
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800362e:	b480      	push	{r7}
 8003630:	b085      	sub	sp, #20
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
	return 0;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
	...

08003648 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003650:	4b11      	ldr	r3, [pc, #68]	; (8003698 <_sbrk+0x50>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d102      	bne.n	800365e <_sbrk+0x16>
		heap_end = &end;
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <_sbrk+0x50>)
 800365a:	4a10      	ldr	r2, [pc, #64]	; (800369c <_sbrk+0x54>)
 800365c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <_sbrk+0x50>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003664:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <_sbrk+0x50>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4413      	add	r3, r2
 800366c:	466a      	mov	r2, sp
 800366e:	4293      	cmp	r3, r2
 8003670:	d907      	bls.n	8003682 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003672:	f008 ff83 	bl	800c57c <__errno>
 8003676:	4603      	mov	r3, r0
 8003678:	220c      	movs	r2, #12
 800367a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800367c:	f04f 33ff 	mov.w	r3, #4294967295
 8003680:	e006      	b.n	8003690 <_sbrk+0x48>
	}

	heap_end += incr;
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <_sbrk+0x50>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	4a03      	ldr	r2, [pc, #12]	; (8003698 <_sbrk+0x50>)
 800368c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800368e:	68fb      	ldr	r3, [r7, #12]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20000284 	.word	0x20000284
 800369c:	200015b8 	.word	0x200015b8

080036a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80036a4:	4b15      	ldr	r3, [pc, #84]	; (80036fc <SystemInit+0x5c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a14      	ldr	r2, [pc, #80]	; (80036fc <SystemInit+0x5c>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80036b0:	4b12      	ldr	r3, [pc, #72]	; (80036fc <SystemInit+0x5c>)
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	4911      	ldr	r1, [pc, #68]	; (80036fc <SystemInit+0x5c>)
 80036b6:	4b12      	ldr	r3, [pc, #72]	; (8003700 <SystemInit+0x60>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <SystemInit+0x5c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0e      	ldr	r2, [pc, #56]	; (80036fc <SystemInit+0x5c>)
 80036c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <SystemInit+0x5c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <SystemInit+0x5c>)
 80036d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <SystemInit+0x5c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a07      	ldr	r2, [pc, #28]	; (80036fc <SystemInit+0x5c>)
 80036de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80036e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <SystemInit+0x5c>)
 80036e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80036ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <SystemInit+0x64>)
 80036ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	40021000 	.word	0x40021000
 8003700:	f8ff0000 	.word	0xf8ff0000
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003708:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800370a:	e003      	b.n	8003714 <LoopCopyDataInit>

0800370c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800370e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003710:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003712:	3104      	adds	r1, #4

08003714 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003714:	480a      	ldr	r0, [pc, #40]	; (8003740 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003718:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800371a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800371c:	d3f6      	bcc.n	800370c <CopyDataInit>
  ldr r2, =_sbss
 800371e:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003720:	e002      	b.n	8003728 <LoopFillZerobss>

08003722 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003722:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003724:	f842 3b04 	str.w	r3, [r2], #4

08003728 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800372a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800372c:	d3f9      	bcc.n	8003722 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800372e:	f7ff ffb7 	bl	80036a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003732:	f008 ff29 	bl	800c588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003736:	f7fe fff5 	bl	8002724 <main>
  bx lr
 800373a:	4770      	bx	lr
  ldr r3, =_sidata
 800373c:	0800dc4c 	.word	0x0800dc4c
  ldr r0, =_sdata
 8003740:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003744:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 8003748:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 800374c:	200015b8 	.word	0x200015b8

08003750 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003750:	e7fe      	b.n	8003750 <CAN1_RX1_IRQHandler>
	...

08003754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <HAL_Init+0x28>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a07      	ldr	r2, [pc, #28]	; (800377c <HAL_Init+0x28>)
 800375e:	f043 0310 	orr.w	r3, r3, #16
 8003762:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003764:	2003      	movs	r0, #3
 8003766:	f000 fdd7 	bl	8004318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800376a:	2000      	movs	r0, #0
 800376c:	f000 f808 	bl	8003780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003770:	f7ff fd58 	bl	8003224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40022000 	.word	0x40022000

08003780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003788:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_InitTick+0x54>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_InitTick+0x58>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	4619      	mov	r1, r3
 8003792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003796:	fbb3 f3f1 	udiv	r3, r3, r1
 800379a:	fbb2 f3f3 	udiv	r3, r2, r3
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fdef 	bl	8004382 <HAL_SYSTICK_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e00e      	b.n	80037cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b0f      	cmp	r3, #15
 80037b2:	d80a      	bhi.n	80037ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037b4:	2200      	movs	r2, #0
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295
 80037bc:	f000 fdb7 	bl	800432e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037c0:	4a06      	ldr	r2, [pc, #24]	; (80037dc <HAL_InitTick+0x5c>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000010 	.word	0x20000010
 80037d8:	20000018 	.word	0x20000018
 80037dc:	20000014 	.word	0x20000014

080037e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_IncTick+0x1c>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_IncTick+0x20>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4413      	add	r3, r2
 80037f0:	4a03      	ldr	r2, [pc, #12]	; (8003800 <HAL_IncTick+0x20>)
 80037f2:	6013      	str	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	20000018 	.word	0x20000018
 8003800:	200009d4 	.word	0x200009d4

08003804 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return uwTick;
 8003808:	4b02      	ldr	r3, [pc, #8]	; (8003814 <HAL_GetTick+0x10>)
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	200009d4 	.word	0x200009d4

08003818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003820:	f7ff fff0 	bl	8003804 <HAL_GetTick>
 8003824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d005      	beq.n	800383e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_Delay+0x44>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800383e:	bf00      	nop
 8003840:	f7ff ffe0 	bl	8003804 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	429a      	cmp	r2, r3
 800384e:	d8f7      	bhi.n	8003840 <HAL_Delay+0x28>
  {
  }
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000018 	.word	0x20000018

08003860 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0be      	b.n	8003a00 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff fcf2 	bl	8003288 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fb8b 	bl	8003fc0 <ADC_ConversionStop_Disable>
 80038aa:	4603      	mov	r3, r0
 80038ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f040 8099 	bne.w	80039ee <HAL_ADC_Init+0x18e>
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f040 8095 	bne.w	80039ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038cc:	f023 0302 	bic.w	r3, r3, #2
 80038d0:	f043 0202 	orr.w	r2, r3, #2
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	7b1b      	ldrb	r3, [r3, #12]
 80038e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80038e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f8:	d003      	beq.n	8003902 <HAL_ADC_Init+0xa2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d102      	bne.n	8003908 <HAL_ADC_Init+0xa8>
 8003902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003906:	e000      	b.n	800390a <HAL_ADC_Init+0xaa>
 8003908:	2300      	movs	r3, #0
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7d1b      	ldrb	r3, [r3, #20]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d119      	bne.n	800394c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	7b1b      	ldrb	r3, [r3, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d109      	bne.n	8003934 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	3b01      	subs	r3, #1
 8003926:	035a      	lsls	r2, r3, #13
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	e00b      	b.n	800394c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	f043 0220 	orr.w	r2, r3, #32
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	f043 0201 	orr.w	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	430a      	orrs	r2, r1
 800395e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	4b28      	ldr	r3, [pc, #160]	; (8003a08 <HAL_ADC_Init+0x1a8>)
 8003968:	4013      	ands	r3, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	430b      	orrs	r3, r1
 8003972:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397c:	d003      	beq.n	8003986 <HAL_ADC_Init+0x126>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d104      	bne.n	8003990 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	3b01      	subs	r3, #1
 800398c:	051b      	lsls	r3, r3, #20
 800398e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <HAL_ADC_Init+0x1ac>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d10b      	bne.n	80039cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	f043 0201 	orr.w	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039ca:	e018      	b.n	80039fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	f023 0312 	bic.w	r3, r3, #18
 80039d4:	f043 0210 	orr.w	r2, r3, #16
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	f043 0201 	orr.w	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039ec:	e007      	b.n	80039fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	f043 0210 	orr.w	r2, r3, #16
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	ffe1f7fd 	.word	0xffe1f7fd
 8003a0c:	ff1f0efe 	.word	0xff1f0efe

08003a10 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_ADC_Start_IT+0x1a>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e0a0      	b.n	8003b6c <HAL_ADC_Start_IT+0x15c>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fa72 	bl	8003f1c <ADC_Enable>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f040 808f 	bne.w	8003b62 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a45      	ldr	r2, [pc, #276]	; (8003b74 <HAL_ADC_Start_IT+0x164>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d105      	bne.n	8003a6e <HAL_ADC_Start_IT+0x5e>
 8003a62:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <HAL_ADC_Start_IT+0x168>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d115      	bne.n	8003a9a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d026      	beq.n	8003ad6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a98:	e01d      	b.n	8003ad6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a33      	ldr	r2, [pc, #204]	; (8003b78 <HAL_ADC_Start_IT+0x168>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d004      	beq.n	8003aba <HAL_ADC_Start_IT+0xaa>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2f      	ldr	r2, [pc, #188]	; (8003b74 <HAL_ADC_Start_IT+0x164>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10d      	bne.n	8003ad6 <HAL_ADC_Start_IT+0xc6>
 8003aba:	4b2f      	ldr	r3, [pc, #188]	; (8003b78 <HAL_ADC_Start_IT+0x168>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ace:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d006      	beq.n	8003af0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	f023 0206 	bic.w	r2, r3, #6
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aee:	e002      	b.n	8003af6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f06f 0202 	mvn.w	r2, #2
 8003b06:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0220 	orr.w	r2, r2, #32
 8003b16:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003b22:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003b26:	d113      	bne.n	8003b50 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003b2c:	4a11      	ldr	r2, [pc, #68]	; (8003b74 <HAL_ADC_Start_IT+0x164>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d105      	bne.n	8003b3e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_ADC_Start_IT+0x168>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d108      	bne.n	8003b50 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003b4c:	609a      	str	r2, [r3, #8]
 8003b4e:	e00c      	b.n	8003b6a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	e003      	b.n	8003b6a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40012800 	.word	0x40012800
 8003b78:	40012400 	.word	0x40012400

08003b7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d140      	bne.n	8003c2c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d139      	bne.n	8003c2c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d105      	bne.n	8003bd0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003bda:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003bde:	d11d      	bne.n	8003c1c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d119      	bne.n	8003c1c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0220 	bic.w	r2, r2, #32
 8003bf6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d105      	bne.n	8003c1c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	f043 0201 	orr.w	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7fe fd67 	bl	80026f0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f06f 0212 	mvn.w	r2, #18
 8003c2a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b80      	cmp	r3, #128	; 0x80
 8003c38:	d14f      	bne.n	8003cda <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d148      	bne.n	8003cda <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003c6a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003c6e:	d012      	beq.n	8003c96 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d125      	bne.n	8003cca <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003c88:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003c8c:	d11d      	bne.n	8003cca <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d119      	bne.n	8003cca <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d105      	bne.n	8003cca <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc2:	f043 0201 	orr.w	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fa4e 	bl	800416c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 020c 	mvn.w	r2, #12
 8003cd8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d114      	bne.n	8003d12 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d10d      	bne.n	8003d12 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f809 	bl	8003d1a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0201 	mvn.w	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x20>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e0dc      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x1da>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b06      	cmp	r3, #6
 8003d5a:	d81c      	bhi.n	8003d96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3b05      	subs	r3, #5
 8003d6e:	221f      	movs	r2, #31
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	4019      	ands	r1, r3
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	3b05      	subs	r3, #5
 8003d88:	fa00 f203 	lsl.w	r2, r0, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	635a      	str	r2, [r3, #52]	; 0x34
 8003d94:	e03c      	b.n	8003e10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b0c      	cmp	r3, #12
 8003d9c:	d81c      	bhi.n	8003dd8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	3b23      	subs	r3, #35	; 0x23
 8003db0:	221f      	movs	r2, #31
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	4019      	ands	r1, r3
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3b23      	subs	r3, #35	; 0x23
 8003dca:	fa00 f203 	lsl.w	r2, r0, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30
 8003dd6:	e01b      	b.n	8003e10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	3b41      	subs	r3, #65	; 0x41
 8003dea:	221f      	movs	r2, #31
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	4019      	ands	r1, r3
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	3b41      	subs	r3, #65	; 0x41
 8003e04:	fa00 f203 	lsl.w	r2, r0, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b09      	cmp	r3, #9
 8003e16:	d91c      	bls.n	8003e52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68d9      	ldr	r1, [r3, #12]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4613      	mov	r3, r2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	3b1e      	subs	r3, #30
 8003e2a:	2207      	movs	r2, #7
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	4019      	ands	r1, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6898      	ldr	r0, [r3, #8]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	3b1e      	subs	r3, #30
 8003e44:	fa00 f203 	lsl.w	r2, r0, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	60da      	str	r2, [r3, #12]
 8003e50:	e019      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6919      	ldr	r1, [r3, #16]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	2207      	movs	r2, #7
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	4019      	ands	r1, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	6898      	ldr	r0, [r3, #8]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4613      	mov	r3, r2
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	4413      	add	r3, r2
 8003e7a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d003      	beq.n	8003e96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003e92:	2b11      	cmp	r3, #17
 8003e94:	d132      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <HAL_ADC_ConfigChannel+0x1e4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d125      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d126      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ebc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b10      	cmp	r3, #16
 8003ec4:	d11a      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <HAL_ADC_ConfigChannel+0x1e8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <HAL_ADC_ConfigChannel+0x1ec>)
 8003ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed0:	0c9a      	lsrs	r2, r3, #18
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003edc:	e002      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f9      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x1b2>
 8003eea:	e007      	b.n	8003efc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr
 8003f10:	40012400 	.word	0x40012400
 8003f14:	20000010 	.word	0x20000010
 8003f18:	431bde83 	.word	0x431bde83

08003f1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d039      	beq.n	8003fae <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0201 	orr.w	r2, r2, #1
 8003f48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f4a:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <ADC_Enable+0x9c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1b      	ldr	r2, [pc, #108]	; (8003fbc <ADC_Enable+0xa0>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	0c9b      	lsrs	r3, r3, #18
 8003f56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f58:	e002      	b.n	8003f60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f9      	bne.n	8003f5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f66:	f7ff fc4d 	bl	8003804 <HAL_GetTick>
 8003f6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003f6c:	e018      	b.n	8003fa0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f6e:	f7ff fc49 	bl	8003804 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d911      	bls.n	8003fa0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	f043 0210 	orr.w	r2, r3, #16
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	f043 0201 	orr.w	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e007      	b.n	8003fb0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d1df      	bne.n	8003f6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20000010 	.word	0x20000010
 8003fbc:	431bde83 	.word	0x431bde83

08003fc0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d127      	bne.n	800402a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fea:	f7ff fc0b 	bl	8003804 <HAL_GetTick>
 8003fee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ff0:	e014      	b.n	800401c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ff2:	f7ff fc07 	bl	8003804 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d90d      	bls.n	800401c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	f043 0210 	orr.w	r2, r3, #16
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	f043 0201 	orr.w	r2, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e007      	b.n	800402c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b01      	cmp	r3, #1
 8004028:	d0e3      	beq.n	8003ff2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_ADCEx_Calibration_Start+0x1e>
 800404e:	2302      	movs	r3, #2
 8004050:	e086      	b.n	8004160 <HAL_ADCEx_Calibration_Start+0x12c>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ffb0 	bl	8003fc0 <ADC_ConversionStop_Disable>
 8004060:	4603      	mov	r3, r0
 8004062:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d175      	bne.n	8004156 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004072:	f023 0302 	bic.w	r3, r3, #2
 8004076:	f043 0202 	orr.w	r2, r3, #2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800407e:	4b3a      	ldr	r3, [pc, #232]	; (8004168 <HAL_ADCEx_Calibration_Start+0x134>)
 8004080:	681c      	ldr	r4, [r3, #0]
 8004082:	2002      	movs	r0, #2
 8004084:	f002 fdd8 	bl	8006c38 <HAL_RCCEx_GetPeriphCLKFreq>
 8004088:	4603      	mov	r3, r0
 800408a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800408e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004090:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004092:	e002      	b.n	800409a <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3b01      	subs	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f9      	bne.n	8004094 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff ff3b 	bl	8003f1c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0208 	orr.w	r2, r2, #8
 80040b4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80040b6:	f7ff fba5 	bl	8003804 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80040bc:	e014      	b.n	80040e8 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80040be:	f7ff fba1 	bl	8003804 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b0a      	cmp	r3, #10
 80040ca:	d90d      	bls.n	80040e8 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	f023 0312 	bic.w	r3, r3, #18
 80040d4:	f043 0210 	orr.w	r2, r3, #16
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e03b      	b.n	8004160 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e3      	bne.n	80040be <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0204 	orr.w	r2, r2, #4
 8004104:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004106:	f7ff fb7d 	bl	8003804 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800410c:	e014      	b.n	8004138 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800410e:	f7ff fb79 	bl	8003804 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b0a      	cmp	r3, #10
 800411a:	d90d      	bls.n	8004138 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	f023 0312 	bic.w	r3, r3, #18
 8004124:	f043 0210 	orr.w	r2, r3, #16
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e013      	b.n	8004160 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e3      	bne.n	800410e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	f023 0303 	bic.w	r3, r3, #3
 800414e:	f043 0201 	orr.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800415e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004160:	4618      	mov	r0, r3
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	bd90      	pop	{r4, r7, pc}
 8004168:	20000010 	.word	0x20000010

0800416c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr
	...

08004180 <__NVIC_SetPriorityGrouping>:
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004190:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800419c:	4013      	ands	r3, r2
 800419e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041b2:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <__NVIC_SetPriorityGrouping+0x44>)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	60d3      	str	r3, [r2, #12]
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	e000ed00 	.word	0xe000ed00

080041c8 <__NVIC_GetPriorityGrouping>:
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <__NVIC_GetPriorityGrouping+0x18>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	0a1b      	lsrs	r3, r3, #8
 80041d2:	f003 0307 	and.w	r3, r3, #7
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	e000ed00 	.word	0xe000ed00

080041e4 <__NVIC_EnableIRQ>:
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	db0b      	blt.n	800420e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	f003 021f 	and.w	r2, r3, #31
 80041fc:	4906      	ldr	r1, [pc, #24]	; (8004218 <__NVIC_EnableIRQ+0x34>)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2001      	movs	r0, #1
 8004206:	fa00 f202 	lsl.w	r2, r0, r2
 800420a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr
 8004218:	e000e100 	.word	0xe000e100

0800421c <__NVIC_SetPriority>:
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422c:	2b00      	cmp	r3, #0
 800422e:	db0a      	blt.n	8004246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	490c      	ldr	r1, [pc, #48]	; (8004268 <__NVIC_SetPriority+0x4c>)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	0112      	lsls	r2, r2, #4
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	440b      	add	r3, r1
 8004240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004244:	e00a      	b.n	800425c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	4908      	ldr	r1, [pc, #32]	; (800426c <__NVIC_SetPriority+0x50>)
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	3b04      	subs	r3, #4
 8004254:	0112      	lsls	r2, r2, #4
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	440b      	add	r3, r1
 800425a:	761a      	strb	r2, [r3, #24]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	e000e100 	.word	0xe000e100
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <NVIC_EncodePriority>:
{
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f1c3 0307 	rsb	r3, r3, #7
 800428a:	2b04      	cmp	r3, #4
 800428c:	bf28      	it	cs
 800428e:	2304      	movcs	r3, #4
 8004290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3304      	adds	r3, #4
 8004296:	2b06      	cmp	r3, #6
 8004298:	d902      	bls.n	80042a0 <NVIC_EncodePriority+0x30>
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3b03      	subs	r3, #3
 800429e:	e000      	b.n	80042a2 <NVIC_EncodePriority+0x32>
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43da      	mvns	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	401a      	ands	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042b8:	f04f 31ff 	mov.w	r1, #4294967295
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
 80042c2:	43d9      	mvns	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c8:	4313      	orrs	r3, r2
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3724      	adds	r7, #36	; 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr

080042d4 <SysTick_Config>:
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3b01      	subs	r3, #1
 80042e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042e4:	d301      	bcc.n	80042ea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80042e6:	2301      	movs	r3, #1
 80042e8:	e00f      	b.n	800430a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ea:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <SysTick_Config+0x40>)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042f2:	210f      	movs	r1, #15
 80042f4:	f04f 30ff 	mov.w	r0, #4294967295
 80042f8:	f7ff ff90 	bl	800421c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <SysTick_Config+0x40>)
 80042fe:	2200      	movs	r2, #0
 8004300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004302:	4b04      	ldr	r3, [pc, #16]	; (8004314 <SysTick_Config+0x40>)
 8004304:	2207      	movs	r2, #7
 8004306:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	e000e010 	.word	0xe000e010

08004318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ff2d 	bl	8004180 <__NVIC_SetPriorityGrouping>
}
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800432e:	b580      	push	{r7, lr}
 8004330:	b086      	sub	sp, #24
 8004332:	af00      	add	r7, sp, #0
 8004334:	4603      	mov	r3, r0
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
 800433a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004340:	f7ff ff42 	bl	80041c8 <__NVIC_GetPriorityGrouping>
 8004344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	6978      	ldr	r0, [r7, #20]
 800434c:	f7ff ff90 	bl	8004270 <NVIC_EncodePriority>
 8004350:	4602      	mov	r2, r0
 8004352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004356:	4611      	mov	r1, r2
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff ff5f 	bl	800421c <__NVIC_SetPriority>
}
 800435e:	bf00      	nop
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	af00      	add	r7, sp, #0
 800436c:	4603      	mov	r3, r0
 800436e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ff35 	bl	80041e4 <__NVIC_EnableIRQ>
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff ffa2 	bl	80042d4 <SysTick_Config>
 8004390:	4603      	mov	r3, r0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e00e      	b.n	80043ca <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	795b      	ldrb	r3, [r3, #5]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d105      	bne.n	80043c2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7fe ffa7 	bl	8003310 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b087      	sub	sp, #28
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2202      	movs	r2, #2
 80043e6:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	e00a      	b.n	8004414 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	441a      	add	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	3301      	adds	r3, #1
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	d3f0      	bcc.n	80043fe <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800442a:	693b      	ldr	r3, [r7, #16]
}
 800442c:	4618      	mov	r0, r3
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
	...

08004438 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800444e:	2300      	movs	r3, #0
 8004450:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004452:	4b2f      	ldr	r3, [pc, #188]	; (8004510 <HAL_FLASH_Program+0xd8>)
 8004454:	7e1b      	ldrb	r3, [r3, #24]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_FLASH_Program+0x26>
 800445a:	2302      	movs	r3, #2
 800445c:	e054      	b.n	8004508 <HAL_FLASH_Program+0xd0>
 800445e:	4b2c      	ldr	r3, [pc, #176]	; (8004510 <HAL_FLASH_Program+0xd8>)
 8004460:	2201      	movs	r2, #1
 8004462:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004464:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004468:	f000 f8a8 	bl	80045bc <FLASH_WaitForLastOperation>
 800446c:	4603      	mov	r3, r0
 800446e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004470:	7dfb      	ldrb	r3, [r7, #23]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d144      	bne.n	8004500 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d102      	bne.n	8004482 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800447c:	2301      	movs	r3, #1
 800447e:	757b      	strb	r3, [r7, #21]
 8004480:	e007      	b.n	8004492 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d102      	bne.n	800448e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004488:	2302      	movs	r3, #2
 800448a:	757b      	strb	r3, [r7, #21]
 800448c:	e001      	b.n	8004492 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800448e:	2304      	movs	r3, #4
 8004490:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004492:	2300      	movs	r3, #0
 8004494:	75bb      	strb	r3, [r7, #22]
 8004496:	e02d      	b.n	80044f4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004498:	7dbb      	ldrb	r3, [r7, #22]
 800449a:	005a      	lsls	r2, r3, #1
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	eb02 0c03 	add.w	ip, r2, r3
 80044a2:	7dbb      	ldrb	r3, [r7, #22]
 80044a4:	0119      	lsls	r1, r3, #4
 80044a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044aa:	f1c1 0620 	rsb	r6, r1, #32
 80044ae:	f1a1 0020 	sub.w	r0, r1, #32
 80044b2:	fa22 f401 	lsr.w	r4, r2, r1
 80044b6:	fa03 f606 	lsl.w	r6, r3, r6
 80044ba:	4334      	orrs	r4, r6
 80044bc:	fa23 f000 	lsr.w	r0, r3, r0
 80044c0:	4304      	orrs	r4, r0
 80044c2:	fa23 f501 	lsr.w	r5, r3, r1
 80044c6:	b2a3      	uxth	r3, r4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4660      	mov	r0, ip
 80044cc:	f000 f85a 	bl	8004584 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044d4:	f000 f872 	bl	80045bc <FLASH_WaitForLastOperation>
 80044d8:	4603      	mov	r3, r0
 80044da:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80044dc:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <HAL_FLASH_Program+0xdc>)
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	4a0c      	ldr	r2, [pc, #48]	; (8004514 <HAL_FLASH_Program+0xdc>)
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d107      	bne.n	80044fe <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80044ee:	7dbb      	ldrb	r3, [r7, #22]
 80044f0:	3301      	adds	r3, #1
 80044f2:	75bb      	strb	r3, [r7, #22]
 80044f4:	7dba      	ldrb	r2, [r7, #22]
 80044f6:	7d7b      	ldrb	r3, [r7, #21]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d3cd      	bcc.n	8004498 <HAL_FLASH_Program+0x60>
 80044fc:	e000      	b.n	8004500 <HAL_FLASH_Program+0xc8>
      {
        break;
 80044fe:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <HAL_FLASH_Program+0xd8>)
 8004502:	2200      	movs	r2, #0
 8004504:	761a      	strb	r2, [r3, #24]

  return status;
 8004506:	7dfb      	ldrb	r3, [r7, #23]
}
 8004508:	4618      	mov	r0, r3
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004510:	200009d8 	.word	0x200009d8
 8004514:	40022000 	.word	0x40022000

08004518 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004522:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <HAL_FLASH_Unlock+0x40>)
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800452e:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <HAL_FLASH_Unlock+0x40>)
 8004530:	4a0a      	ldr	r2, [pc, #40]	; (800455c <HAL_FLASH_Unlock+0x44>)
 8004532:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004534:	4b08      	ldr	r3, [pc, #32]	; (8004558 <HAL_FLASH_Unlock+0x40>)
 8004536:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <HAL_FLASH_Unlock+0x48>)
 8004538:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800453a:	4b07      	ldr	r3, [pc, #28]	; (8004558 <HAL_FLASH_Unlock+0x40>)
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800454a:	79fb      	ldrb	r3, [r7, #7]
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40022000 	.word	0x40022000
 800455c:	45670123 	.word	0x45670123
 8004560:	cdef89ab 	.word	0xcdef89ab

08004564 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <HAL_FLASH_Lock+0x1c>)
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	4a04      	ldr	r2, [pc, #16]	; (8004580 <HAL_FLASH_Lock+0x1c>)
 800456e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004572:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40022000 	.word	0x40022000

08004584 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004590:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <FLASH_Program_HalfWord+0x30>)
 8004592:	2200      	movs	r2, #0
 8004594:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004596:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <FLASH_Program_HalfWord+0x34>)
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	4a07      	ldr	r2, [pc, #28]	; (80045b8 <FLASH_Program_HalfWord+0x34>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	887a      	ldrh	r2, [r7, #2]
 80045a6:	801a      	strh	r2, [r3, #0]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	200009d8 	.word	0x200009d8
 80045b8:	40022000 	.word	0x40022000

080045bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80045c4:	f7ff f91e 	bl	8003804 <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80045ca:	e010      	b.n	80045ee <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d00c      	beq.n	80045ee <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <FLASH_WaitForLastOperation+0x2e>
 80045da:	f7ff f913 	bl	8003804 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d201      	bcs.n	80045ee <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e025      	b.n	800463a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80045ee:	4b15      	ldr	r3, [pc, #84]	; (8004644 <FLASH_WaitForLastOperation+0x88>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e8      	bne.n	80045cc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <FLASH_WaitForLastOperation+0x88>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004606:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <FLASH_WaitForLastOperation+0x88>)
 8004608:	2220      	movs	r2, #32
 800460a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800460c:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <FLASH_WaitForLastOperation+0x88>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10b      	bne.n	8004630 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <FLASH_WaitForLastOperation+0x88>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004620:	2b00      	cmp	r3, #0
 8004622:	d105      	bne.n	8004630 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004624:	4b07      	ldr	r3, [pc, #28]	; (8004644 <FLASH_WaitForLastOperation+0x88>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004630:	f000 f80a 	bl	8004648 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40022000 	.word	0x40022000

08004648 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004652:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <FLASH_SetErrorCode+0x98>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800465e:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <FLASH_SetErrorCode+0x9c>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f043 0302 	orr.w	r3, r3, #2
 8004666:	4a1f      	ldr	r2, [pc, #124]	; (80046e4 <FLASH_SetErrorCode+0x9c>)
 8004668:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f043 0310 	orr.w	r3, r3, #16
 8004670:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004672:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <FLASH_SetErrorCode+0x98>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800467e:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <FLASH_SetErrorCode+0x9c>)
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <FLASH_SetErrorCode+0x9c>)
 8004688:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f043 0304 	orr.w	r3, r3, #4
 8004690:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004692:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <FLASH_SetErrorCode+0x98>)
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800469e:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <FLASH_SetErrorCode+0x9c>)
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f043 0304 	orr.w	r3, r3, #4
 80046a6:	4a0f      	ldr	r2, [pc, #60]	; (80046e4 <FLASH_SetErrorCode+0x9c>)
 80046a8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <FLASH_SetErrorCode+0x98>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	4a0c      	ldr	r2, [pc, #48]	; (80046e0 <FLASH_SetErrorCode+0x98>)
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f240 1201 	movw	r2, #257	; 0x101
 80046bc:	4293      	cmp	r3, r2
 80046be:	d106      	bne.n	80046ce <FLASH_SetErrorCode+0x86>
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <FLASH_SetErrorCode+0x98>)
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	4a06      	ldr	r2, [pc, #24]	; (80046e0 <FLASH_SetErrorCode+0x98>)
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	61d3      	str	r3, [r2, #28]
}  
 80046cc:	e002      	b.n	80046d4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80046ce:	4a04      	ldr	r2, [pc, #16]	; (80046e0 <FLASH_SetErrorCode+0x98>)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	60d3      	str	r3, [r2, #12]
}  
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40022000 	.word	0x40022000
 80046e4:	200009d8 	.word	0x200009d8

080046e8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80046fa:	4b2f      	ldr	r3, [pc, #188]	; (80047b8 <HAL_FLASHEx_Erase+0xd0>)
 80046fc:	7e1b      	ldrb	r3, [r3, #24]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_FLASHEx_Erase+0x1e>
 8004702:	2302      	movs	r3, #2
 8004704:	e053      	b.n	80047ae <HAL_FLASHEx_Erase+0xc6>
 8004706:	4b2c      	ldr	r3, [pc, #176]	; (80047b8 <HAL_FLASHEx_Erase+0xd0>)
 8004708:	2201      	movs	r2, #1
 800470a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d116      	bne.n	8004742 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004714:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004718:	f7ff ff50 	bl	80045bc <FLASH_WaitForLastOperation>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d141      	bne.n	80047a6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004722:	2001      	movs	r0, #1
 8004724:	f000 f84c 	bl	80047c0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004728:	f24c 3050 	movw	r0, #50000	; 0xc350
 800472c:	f7ff ff46 	bl	80045bc <FLASH_WaitForLastOperation>
 8004730:	4603      	mov	r3, r0
 8004732:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004734:	4b21      	ldr	r3, [pc, #132]	; (80047bc <HAL_FLASHEx_Erase+0xd4>)
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	4a20      	ldr	r2, [pc, #128]	; (80047bc <HAL_FLASHEx_Erase+0xd4>)
 800473a:	f023 0304 	bic.w	r3, r3, #4
 800473e:	6113      	str	r3, [r2, #16]
 8004740:	e031      	b.n	80047a6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004742:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004746:	f7ff ff39 	bl	80045bc <FLASH_WaitForLastOperation>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d12a      	bne.n	80047a6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	f04f 32ff 	mov.w	r2, #4294967295
 8004756:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	e019      	b.n	8004794 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004760:	68b8      	ldr	r0, [r7, #8]
 8004762:	f000 f849 	bl	80047f8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004766:	f24c 3050 	movw	r0, #50000	; 0xc350
 800476a:	f7ff ff27 	bl	80045bc <FLASH_WaitForLastOperation>
 800476e:	4603      	mov	r3, r0
 8004770:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004772:	4b12      	ldr	r3, [pc, #72]	; (80047bc <HAL_FLASHEx_Erase+0xd4>)
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	4a11      	ldr	r2, [pc, #68]	; (80047bc <HAL_FLASHEx_Erase+0xd4>)
 8004778:	f023 0302 	bic.w	r3, r3, #2
 800477c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	601a      	str	r2, [r3, #0]
            break;
 800478a:	e00c      	b.n	80047a6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004792:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	029a      	lsls	r2, r3, #10
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d3dc      	bcc.n	8004760 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80047a6:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <HAL_FLASHEx_Erase+0xd0>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	761a      	strb	r2, [r3, #24]

  return status;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	200009d8 	.word	0x200009d8
 80047bc:	40022000 	.word	0x40022000

080047c0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <FLASH_MassErase+0x30>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <FLASH_MassErase+0x34>)
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	4a08      	ldr	r2, [pc, #32]	; (80047f4 <FLASH_MassErase+0x34>)
 80047d4:	f043 0304 	orr.w	r3, r3, #4
 80047d8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80047da:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <FLASH_MassErase+0x34>)
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	4a05      	ldr	r2, [pc, #20]	; (80047f4 <FLASH_MassErase+0x34>)
 80047e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr
 80047f0:	200009d8 	.word	0x200009d8
 80047f4:	40022000 	.word	0x40022000

080047f8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <FLASH_PageErase+0x38>)
 8004802:	2200      	movs	r2, #0
 8004804:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004806:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <FLASH_PageErase+0x3c>)
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	4a0a      	ldr	r2, [pc, #40]	; (8004834 <FLASH_PageErase+0x3c>)
 800480c:	f043 0302 	orr.w	r3, r3, #2
 8004810:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <FLASH_PageErase+0x3c>)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <FLASH_PageErase+0x3c>)
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	4a05      	ldr	r2, [pc, #20]	; (8004834 <FLASH_PageErase+0x3c>)
 800481e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004822:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	200009d8 	.word	0x200009d8
 8004834:	40022000 	.word	0x40022000

08004838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004838:	b480      	push	{r7}
 800483a:	b08b      	sub	sp, #44	; 0x2c
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004842:	2300      	movs	r3, #0
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004846:	2300      	movs	r3, #0
 8004848:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800484a:	e169      	b.n	8004b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800484c:	2201      	movs	r2, #1
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	429a      	cmp	r2, r3
 8004866:	f040 8158 	bne.w	8004b1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	4a9a      	ldr	r2, [pc, #616]	; (8004ad8 <HAL_GPIO_Init+0x2a0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d05e      	beq.n	8004932 <HAL_GPIO_Init+0xfa>
 8004874:	4a98      	ldr	r2, [pc, #608]	; (8004ad8 <HAL_GPIO_Init+0x2a0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d875      	bhi.n	8004966 <HAL_GPIO_Init+0x12e>
 800487a:	4a98      	ldr	r2, [pc, #608]	; (8004adc <HAL_GPIO_Init+0x2a4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d058      	beq.n	8004932 <HAL_GPIO_Init+0xfa>
 8004880:	4a96      	ldr	r2, [pc, #600]	; (8004adc <HAL_GPIO_Init+0x2a4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d86f      	bhi.n	8004966 <HAL_GPIO_Init+0x12e>
 8004886:	4a96      	ldr	r2, [pc, #600]	; (8004ae0 <HAL_GPIO_Init+0x2a8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d052      	beq.n	8004932 <HAL_GPIO_Init+0xfa>
 800488c:	4a94      	ldr	r2, [pc, #592]	; (8004ae0 <HAL_GPIO_Init+0x2a8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d869      	bhi.n	8004966 <HAL_GPIO_Init+0x12e>
 8004892:	4a94      	ldr	r2, [pc, #592]	; (8004ae4 <HAL_GPIO_Init+0x2ac>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d04c      	beq.n	8004932 <HAL_GPIO_Init+0xfa>
 8004898:	4a92      	ldr	r2, [pc, #584]	; (8004ae4 <HAL_GPIO_Init+0x2ac>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d863      	bhi.n	8004966 <HAL_GPIO_Init+0x12e>
 800489e:	4a92      	ldr	r2, [pc, #584]	; (8004ae8 <HAL_GPIO_Init+0x2b0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d046      	beq.n	8004932 <HAL_GPIO_Init+0xfa>
 80048a4:	4a90      	ldr	r2, [pc, #576]	; (8004ae8 <HAL_GPIO_Init+0x2b0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d85d      	bhi.n	8004966 <HAL_GPIO_Init+0x12e>
 80048aa:	2b12      	cmp	r3, #18
 80048ac:	d82a      	bhi.n	8004904 <HAL_GPIO_Init+0xcc>
 80048ae:	2b12      	cmp	r3, #18
 80048b0:	d859      	bhi.n	8004966 <HAL_GPIO_Init+0x12e>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <HAL_GPIO_Init+0x80>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	08004933 	.word	0x08004933
 80048bc:	0800490d 	.word	0x0800490d
 80048c0:	0800491f 	.word	0x0800491f
 80048c4:	08004961 	.word	0x08004961
 80048c8:	08004967 	.word	0x08004967
 80048cc:	08004967 	.word	0x08004967
 80048d0:	08004967 	.word	0x08004967
 80048d4:	08004967 	.word	0x08004967
 80048d8:	08004967 	.word	0x08004967
 80048dc:	08004967 	.word	0x08004967
 80048e0:	08004967 	.word	0x08004967
 80048e4:	08004967 	.word	0x08004967
 80048e8:	08004967 	.word	0x08004967
 80048ec:	08004967 	.word	0x08004967
 80048f0:	08004967 	.word	0x08004967
 80048f4:	08004967 	.word	0x08004967
 80048f8:	08004967 	.word	0x08004967
 80048fc:	08004915 	.word	0x08004915
 8004900:	08004929 	.word	0x08004929
 8004904:	4a79      	ldr	r2, [pc, #484]	; (8004aec <HAL_GPIO_Init+0x2b4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800490a:	e02c      	b.n	8004966 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	623b      	str	r3, [r7, #32]
          break;
 8004912:	e029      	b.n	8004968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	3304      	adds	r3, #4
 800491a:	623b      	str	r3, [r7, #32]
          break;
 800491c:	e024      	b.n	8004968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	3308      	adds	r3, #8
 8004924:	623b      	str	r3, [r7, #32]
          break;
 8004926:	e01f      	b.n	8004968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	330c      	adds	r3, #12
 800492e:	623b      	str	r3, [r7, #32]
          break;
 8004930:	e01a      	b.n	8004968 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d102      	bne.n	8004940 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800493a:	2304      	movs	r3, #4
 800493c:	623b      	str	r3, [r7, #32]
          break;
 800493e:	e013      	b.n	8004968 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d105      	bne.n	8004954 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004948:	2308      	movs	r3, #8
 800494a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	611a      	str	r2, [r3, #16]
          break;
 8004952:	e009      	b.n	8004968 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004954:	2308      	movs	r3, #8
 8004956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	615a      	str	r2, [r3, #20]
          break;
 800495e:	e003      	b.n	8004968 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004960:	2300      	movs	r3, #0
 8004962:	623b      	str	r3, [r7, #32]
          break;
 8004964:	e000      	b.n	8004968 <HAL_GPIO_Init+0x130>
          break;
 8004966:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2bff      	cmp	r3, #255	; 0xff
 800496c:	d801      	bhi.n	8004972 <HAL_GPIO_Init+0x13a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	e001      	b.n	8004976 <HAL_GPIO_Init+0x13e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2bff      	cmp	r3, #255	; 0xff
 800497c:	d802      	bhi.n	8004984 <HAL_GPIO_Init+0x14c>
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	e002      	b.n	800498a <HAL_GPIO_Init+0x152>
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	3b08      	subs	r3, #8
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	210f      	movs	r1, #15
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	fa01 f303 	lsl.w	r3, r1, r3
 8004998:	43db      	mvns	r3, r3
 800499a:	401a      	ands	r2, r3
 800499c:	6a39      	ldr	r1, [r7, #32]
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	fa01 f303 	lsl.w	r3, r1, r3
 80049a4:	431a      	orrs	r2, r3
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 80b1 	beq.w	8004b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80049b8:	4b4d      	ldr	r3, [pc, #308]	; (8004af0 <HAL_GPIO_Init+0x2b8>)
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	4a4c      	ldr	r2, [pc, #304]	; (8004af0 <HAL_GPIO_Init+0x2b8>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6193      	str	r3, [r2, #24]
 80049c4:	4b4a      	ldr	r3, [pc, #296]	; (8004af0 <HAL_GPIO_Init+0x2b8>)
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80049d0:	4a48      	ldr	r2, [pc, #288]	; (8004af4 <HAL_GPIO_Init+0x2bc>)
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	089b      	lsrs	r3, r3, #2
 80049d6:	3302      	adds	r3, #2
 80049d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	220f      	movs	r2, #15
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4013      	ands	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a40      	ldr	r2, [pc, #256]	; (8004af8 <HAL_GPIO_Init+0x2c0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d013      	beq.n	8004a24 <HAL_GPIO_Init+0x1ec>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a3f      	ldr	r2, [pc, #252]	; (8004afc <HAL_GPIO_Init+0x2c4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00d      	beq.n	8004a20 <HAL_GPIO_Init+0x1e8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a3e      	ldr	r2, [pc, #248]	; (8004b00 <HAL_GPIO_Init+0x2c8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d007      	beq.n	8004a1c <HAL_GPIO_Init+0x1e4>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a3d      	ldr	r2, [pc, #244]	; (8004b04 <HAL_GPIO_Init+0x2cc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d101      	bne.n	8004a18 <HAL_GPIO_Init+0x1e0>
 8004a14:	2303      	movs	r3, #3
 8004a16:	e006      	b.n	8004a26 <HAL_GPIO_Init+0x1ee>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	e004      	b.n	8004a26 <HAL_GPIO_Init+0x1ee>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e002      	b.n	8004a26 <HAL_GPIO_Init+0x1ee>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <HAL_GPIO_Init+0x1ee>
 8004a24:	2300      	movs	r3, #0
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	f002 0203 	and.w	r2, r2, #3
 8004a2c:	0092      	lsls	r2, r2, #2
 8004a2e:	4093      	lsls	r3, r2
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a36:	492f      	ldr	r1, [pc, #188]	; (8004af4 <HAL_GPIO_Init+0x2bc>)
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	089b      	lsrs	r3, r3, #2
 8004a3c:	3302      	adds	r3, #2
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d006      	beq.n	8004a5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004a50:	4b2d      	ldr	r3, [pc, #180]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	492c      	ldr	r1, [pc, #176]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
 8004a5c:	e006      	b.n	8004a6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004a5e:	4b2a      	ldr	r3, [pc, #168]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	4928      	ldr	r1, [pc, #160]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d006      	beq.n	8004a86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004a78:	4b23      	ldr	r3, [pc, #140]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	4922      	ldr	r1, [pc, #136]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	604b      	str	r3, [r1, #4]
 8004a84:	e006      	b.n	8004a94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004a86:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	491e      	ldr	r1, [pc, #120]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d006      	beq.n	8004aae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004aa0:	4b19      	ldr	r3, [pc, #100]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	4918      	ldr	r1, [pc, #96]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	608b      	str	r3, [r1, #8]
 8004aac:	e006      	b.n	8004abc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004aae:	4b16      	ldr	r3, [pc, #88]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	4914      	ldr	r1, [pc, #80]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d021      	beq.n	8004b0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	490e      	ldr	r1, [pc, #56]	; (8004b08 <HAL_GPIO_Init+0x2d0>)
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60cb      	str	r3, [r1, #12]
 8004ad4:	e021      	b.n	8004b1a <HAL_GPIO_Init+0x2e2>
 8004ad6:	bf00      	nop
 8004ad8:	10320000 	.word	0x10320000
 8004adc:	10310000 	.word	0x10310000
 8004ae0:	10220000 	.word	0x10220000
 8004ae4:	10210000 	.word	0x10210000
 8004ae8:	10120000 	.word	0x10120000
 8004aec:	10110000 	.word	0x10110000
 8004af0:	40021000 	.word	0x40021000
 8004af4:	40010000 	.word	0x40010000
 8004af8:	40010800 	.word	0x40010800
 8004afc:	40010c00 	.word	0x40010c00
 8004b00:	40011000 	.word	0x40011000
 8004b04:	40011400 	.word	0x40011400
 8004b08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <HAL_GPIO_Init+0x304>)
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	43db      	mvns	r3, r3
 8004b14:	4909      	ldr	r1, [pc, #36]	; (8004b3c <HAL_GPIO_Init+0x304>)
 8004b16:	4013      	ands	r3, r2
 8004b18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f47f ae8e 	bne.w	800484c <HAL_GPIO_Init+0x14>
  }
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	372c      	adds	r7, #44	; 0x2c
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr
 8004b3c:	40010400 	.word	0x40010400

08004b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	887b      	ldrh	r3, [r7, #2]
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
 8004b5c:	e001      	b.n	8004b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr

08004b6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	460b      	mov	r3, r1
 8004b78:	807b      	strh	r3, [r7, #2]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b7e:	787b      	ldrb	r3, [r7, #1]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b84:	887a      	ldrh	r2, [r7, #2]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004b8a:	e003      	b.n	8004b94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b8c:	887b      	ldrh	r3, [r7, #2]
 8004b8e:	041a      	lsls	r2, r3, #16
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	611a      	str	r2, [r3, #16]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr

08004b9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ba0:	b08b      	sub	sp, #44	; 0x2c
 8004ba2:	af06      	add	r7, sp, #24
 8004ba4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e0fd      	b.n	8004dac <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f007 fa2f 	bl	800c028 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2203      	movs	r2, #3
 8004bce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f003 f8dc 	bl	8007d94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	687e      	ldr	r6, [r7, #4]
 8004be4:	466d      	mov	r5, sp
 8004be6:	f106 0410 	add.w	r4, r6, #16
 8004bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	602b      	str	r3, [r5, #0]
 8004bf2:	1d33      	adds	r3, r6, #4
 8004bf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bf6:	6838      	ldr	r0, [r7, #0]
 8004bf8:	f003 f8a6 	bl	8007d48 <USB_CoreInit>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2202      	movs	r2, #2
 8004c06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e0ce      	b.n	8004dac <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2100      	movs	r1, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f003 f8d7 	bl	8007dc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]
 8004c1e:	e04c      	b.n	8004cba <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	440b      	add	r3, r1
 8004c30:	3301      	adds	r3, #1
 8004c32:	2201      	movs	r2, #1
 8004c34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	440b      	add	r3, r1
 8004c46:	7bfa      	ldrb	r2, [r7, #15]
 8004c48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c4a:	7bfa      	ldrb	r2, [r7, #15]
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	b298      	uxth	r0, r3
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3336      	adds	r3, #54	; 0x36
 8004c5e:	4602      	mov	r2, r0
 8004c60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	440b      	add	r3, r1
 8004c72:	3303      	adds	r3, #3
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c78:	7bfa      	ldrb	r2, [r7, #15]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	440b      	add	r3, r1
 8004c86:	3338      	adds	r3, #56	; 0x38
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c8c:	7bfa      	ldrb	r2, [r7, #15]
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	440b      	add	r3, r1
 8004c9a:	333c      	adds	r3, #60	; 0x3c
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ca0:	7bfa      	ldrb	r2, [r7, #15]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	440b      	add	r3, r1
 8004cae:	3340      	adds	r3, #64	; 0x40
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
 8004cba:	7bfa      	ldrb	r2, [r7, #15]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d3ad      	bcc.n	8004c20 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	73fb      	strb	r3, [r7, #15]
 8004cc8:	e044      	b.n	8004d54 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cca:	7bfa      	ldrb	r2, [r7, #15]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	440b      	add	r3, r1
 8004cd8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004cdc:	2200      	movs	r2, #0
 8004cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ce0:	7bfa      	ldrb	r2, [r7, #15]
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	440b      	add	r3, r1
 8004cee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004cf2:	7bfa      	ldrb	r2, [r7, #15]
 8004cf4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cf6:	7bfa      	ldrb	r2, [r7, #15]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	440b      	add	r3, r1
 8004d04:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d0c:	7bfa      	ldrb	r2, [r7, #15]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	440b      	add	r3, r1
 8004d1a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d22:	7bfa      	ldrb	r2, [r7, #15]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	440b      	add	r3, r1
 8004d30:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d38:	7bfa      	ldrb	r2, [r7, #15]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	440b      	add	r3, r1
 8004d46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	3301      	adds	r3, #1
 8004d52:	73fb      	strb	r3, [r7, #15]
 8004d54:	7bfa      	ldrb	r2, [r7, #15]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d3b5      	bcc.n	8004cca <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	687e      	ldr	r6, [r7, #4]
 8004d66:	466d      	mov	r5, sp
 8004d68:	f106 0410 	add.w	r4, r6, #16
 8004d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	602b      	str	r3, [r5, #0]
 8004d74:	1d33      	adds	r3, r6, #4
 8004d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d78:	6838      	ldr	r0, [r7, #0]
 8004d7a:	f003 f831 	bl	8007de0 <USB_DevInit>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e00d      	b.n	8004dac <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f004 ffcb 	bl	8009d40 <USB_DevDisconnect>

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004db4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_PCD_Start+0x16>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e016      	b.n	8004df8 <HAL_PCD_Start+0x44>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f002 ffc6 	bl	8007d68 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004ddc:	2101      	movs	r1, #1
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f007 fb95 	bl	800c50e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f004 ff9f 	bl	8009d2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f004 ffa1 	bl	8009d54 <USB_ReadInterrupts>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1c:	d102      	bne.n	8004e24 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fb61 	bl	80054e6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f004 ff93 	bl	8009d54 <USB_ReadInterrupts>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e38:	d112      	bne.n	8004e60 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4c:	b292      	uxth	r2, r2
 8004e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f007 f963 	bl	800c11e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004e58:	2100      	movs	r1, #0
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f925 	bl	80050aa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f004 ff75 	bl	8009d54 <USB_ReadInterrupts>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e74:	d10b      	bne.n	8004e8e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e88:	b292      	uxth	r2, r2
 8004e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f004 ff5e 	bl	8009d54 <USB_ReadInterrupts>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea2:	d10b      	bne.n	8004ebc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eb6:	b292      	uxth	r2, r2
 8004eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f004 ff47 	bl	8009d54 <USB_ReadInterrupts>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed0:	d126      	bne.n	8004f20 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0204 	bic.w	r2, r2, #4
 8004ee4:	b292      	uxth	r2, r2
 8004ee6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0208 	bic.w	r2, r2, #8
 8004efc:	b292      	uxth	r2, r2
 8004efe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f007 f944 	bl	800c190 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f1a:	b292      	uxth	r2, r2
 8004f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f004 ff15 	bl	8009d54 <USB_ReadInterrupts>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f34:	f040 8084 	bne.w	8005040 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e011      	b.n	8004f62 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	7ffb      	ldrb	r3, [r7, #31]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	441a      	add	r2, r3
 8004f4a:	7ffb      	ldrb	r3, [r7, #31]
 8004f4c:	8812      	ldrh	r2, [r2, #0]
 8004f4e:	b292      	uxth	r2, r2
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	f107 0120 	add.w	r1, r7, #32
 8004f56:	440b      	add	r3, r1
 8004f58:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004f5c:	7ffb      	ldrb	r3, [r7, #31]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	77fb      	strb	r3, [r7, #31]
 8004f62:	7ffb      	ldrb	r3, [r7, #31]
 8004f64:	2b07      	cmp	r3, #7
 8004f66:	d9ea      	bls.n	8004f3e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	b292      	uxth	r2, r2
 8004f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0201 	bic.w	r2, r2, #1
 8004f92:	b292      	uxth	r2, r2
 8004f94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004f98:	bf00      	nop
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f6      	beq.n	8004f9a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbe:	b292      	uxth	r2, r2
 8004fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	77fb      	strb	r3, [r7, #31]
 8004fc8:	e010      	b.n	8004fec <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004fca:	7ffb      	ldrb	r3, [r7, #31]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	7ffa      	ldrb	r2, [r7, #31]
 8004fd4:	0092      	lsls	r2, r2, #2
 8004fd6:	440a      	add	r2, r1
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	f107 0120 	add.w	r1, r7, #32
 8004fde:	440b      	add	r3, r1
 8004fe0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004fe4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004fe6:	7ffb      	ldrb	r3, [r7, #31]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	7ffb      	ldrb	r3, [r7, #31]
 8004fee:	2b07      	cmp	r3, #7
 8004ff0:	d9eb      	bls.n	8004fca <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0208 	orr.w	r2, r2, #8
 8005004:	b292      	uxth	r2, r2
 8005006:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005012:	b29a      	uxth	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800501c:	b292      	uxth	r2, r2
 800501e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800502a:	b29a      	uxth	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0204 	orr.w	r2, r2, #4
 8005034:	b292      	uxth	r2, r2
 8005036:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f007 f88e 	bl	800c15c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f004 fe85 	bl	8009d54 <USB_ReadInterrupts>
 800504a:	4603      	mov	r3, r0
 800504c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005054:	d10e      	bne.n	8005074 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005068:	b292      	uxth	r2, r2
 800506a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f007 f847 	bl	800c102 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f004 fe6b 	bl	8009d54 <USB_ReadInterrupts>
 800507e:	4603      	mov	r3, r0
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005088:	d10b      	bne.n	80050a2 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005092:	b29a      	uxth	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800509c:	b292      	uxth	r2, r2
 800509e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80050a2:	bf00      	nop
 80050a4:	3720      	adds	r7, #32
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	460b      	mov	r3, r1
 80050b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_PCD_SetAddress+0x1a>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e013      	b.n	80050ec <HAL_PCD_SetAddress+0x42>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	4611      	mov	r1, r2
 80050dc:	4618      	mov	r0, r3
 80050de:	f004 fe12 	bl	8009d06 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	4608      	mov	r0, r1
 80050fe:	4611      	mov	r1, r2
 8005100:	461a      	mov	r2, r3
 8005102:	4603      	mov	r3, r0
 8005104:	70fb      	strb	r3, [r7, #3]
 8005106:	460b      	mov	r3, r1
 8005108:	803b      	strh	r3, [r7, #0]
 800510a:	4613      	mov	r3, r2
 800510c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005116:	2b00      	cmp	r3, #0
 8005118:	da0e      	bge.n	8005138 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800511a:	78fb      	ldrb	r3, [r7, #3]
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	4413      	add	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2201      	movs	r2, #1
 8005134:	705a      	strb	r2, [r3, #1]
 8005136:	e00e      	b.n	8005156 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	f003 0207 	and.w	r2, r3, #7
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4413      	add	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	b2da      	uxtb	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005162:	883a      	ldrh	r2, [r7, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	78ba      	ldrb	r2, [r7, #2]
 800516c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	785b      	ldrb	r3, [r3, #1]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d004      	beq.n	8005180 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005180:	78bb      	ldrb	r3, [r7, #2]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d102      	bne.n	800518c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_PCD_EP_Open+0xa6>
 8005196:	2302      	movs	r3, #2
 8005198:	e00e      	b.n	80051b8 <HAL_PCD_EP_Open+0xc4>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68f9      	ldr	r1, [r7, #12]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f002 fe39 	bl	8007e20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80051b6:	7afb      	ldrb	r3, [r7, #11]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	da0e      	bge.n	80051f2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	4413      	add	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	705a      	strb	r2, [r3, #1]
 80051f0:	e00e      	b.n	8005210 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	f003 0207 	and.w	r2, r3, #7
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	4413      	add	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	b2da      	uxtb	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_PCD_EP_Close+0x6a>
 8005226:	2302      	movs	r3, #2
 8005228:	e00e      	b.n	8005248 <HAL_PCD_EP_Close+0x88>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68f9      	ldr	r1, [r7, #12]
 8005238:	4618      	mov	r0, r3
 800523a:	f003 f95b 	bl	80084f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	607a      	str	r2, [r7, #4]
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	460b      	mov	r3, r1
 800525e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005260:	7afb      	ldrb	r3, [r7, #11]
 8005262:	f003 0207 	and.w	r2, r3, #7
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2200      	movs	r2, #0
 8005288:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2200      	movs	r2, #0
 800528e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005290:	7afb      	ldrb	r3, [r7, #11]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	b2da      	uxtb	r2, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800529c:	7afb      	ldrb	r3, [r7, #11]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6979      	ldr	r1, [r7, #20]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f003 fb0d 	bl	80088cc <USB_EPStartXfer>
 80052b2:	e005      	b.n	80052c0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6979      	ldr	r1, [r7, #20]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f003 fb06 	bl	80088cc <USB_EPStartXfer>
  }

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	460b      	mov	r3, r1
 80052d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	f003 0207 	and.w	r2, r3, #7
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	440b      	add	r3, r1
 80052e8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80052ec:	681b      	ldr	r3, [r3, #0]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr

080052f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	460b      	mov	r3, r1
 8005306:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005308:	7afb      	ldrb	r3, [r7, #11]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2200      	movs	r2, #0
 800533c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2201      	movs	r2, #1
 8005342:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005344:	7afb      	ldrb	r3, [r7, #11]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	b2da      	uxtb	r2, r3
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005350:	7afb      	ldrb	r3, [r7, #11]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6979      	ldr	r1, [r7, #20]
 8005360:	4618      	mov	r0, r3
 8005362:	f003 fab3 	bl	80088cc <USB_EPStartXfer>
 8005366:	e005      	b.n	8005374 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6979      	ldr	r1, [r7, #20]
 800536e:	4618      	mov	r0, r3
 8005370:	f003 faac 	bl	80088cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	460b      	mov	r3, r1
 8005388:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800538a:	78fb      	ldrb	r3, [r7, #3]
 800538c:	f003 0207 	and.w	r2, r3, #7
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	429a      	cmp	r2, r3
 8005396:	d901      	bls.n	800539c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e04c      	b.n	8005436 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800539c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	da0e      	bge.n	80053c2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	4413      	add	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	705a      	strb	r2, [r3, #1]
 80053c0:	e00c      	b.n	80053dc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053c2:	78fa      	ldrb	r2, [r7, #3]
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	4413      	add	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053e2:	78fb      	ldrb	r3, [r7, #3]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_PCD_EP_SetStall+0x7e>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e01c      	b.n	8005436 <HAL_PCD_EP_SetStall+0xb8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68f9      	ldr	r1, [r7, #12]
 800540a:	4618      	mov	r0, r3
 800540c:	f004 fb7e 	bl	8009b0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	2b00      	cmp	r3, #0
 8005418:	d108      	bne.n	800542c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f004 fca3 	bl	8009d72 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	460b      	mov	r3, r1
 8005448:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800544a:	78fb      	ldrb	r3, [r7, #3]
 800544c:	f003 020f 	and.w	r2, r3, #15
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	d901      	bls.n	800545c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e040      	b.n	80054de <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800545c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005460:	2b00      	cmp	r3, #0
 8005462:	da0e      	bge.n	8005482 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	4413      	add	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	705a      	strb	r2, [r3, #1]
 8005480:	e00e      	b.n	80054a0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005482:	78fb      	ldrb	r3, [r7, #3]
 8005484:	f003 0207 	and.w	r2, r3, #7
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	4413      	add	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_PCD_EP_ClrStall+0x82>
 80054bc:	2302      	movs	r3, #2
 80054be:	e00e      	b.n	80054de <HAL_PCD_EP_ClrStall+0xa0>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68f9      	ldr	r1, [r7, #12]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f004 fb6c 	bl	8009bac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b08e      	sub	sp, #56	; 0x38
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80054ee:	e2df      	b.n	8005ab0 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054f8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80054fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005506:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 8158 	bne.w	80057c0 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005510:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b00      	cmp	r3, #0
 8005518:	d152      	bne.n	80055c0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	81fb      	strh	r3, [r7, #14]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	89fb      	ldrh	r3, [r7, #14]
 8005532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800553a:	b29b      	uxth	r3, r3
 800553c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3328      	adds	r3, #40	; 0x28
 8005542:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554c:	b29b      	uxth	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	4413      	add	r3, r2
 8005558:	3302      	adds	r3, #2
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	695a      	ldr	r2, [r3, #20]
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	441a      	add	r2, r3
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800557e:	2100      	movs	r1, #0
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f006 fda4 	bl	800c0ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 828e 	beq.w	8005ab0 <PCD_EP_ISR_Handler+0x5ca>
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f040 8289 	bne.w	8005ab0 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	b292      	uxth	r2, r2
 80055b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80055be:	e277      	b.n	8005ab0 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80055d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d034      	beq.n	8005644 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4413      	add	r3, r2
 80055ee:	3306      	adds	r3, #6
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005618:	b29b      	uxth	r3, r3
 800561a:	f004 fbfa 	bl	8009e12 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29a      	uxth	r2, r3
 8005626:	f640 738f 	movw	r3, #3983	; 0xf8f
 800562a:	4013      	ands	r3, r2
 800562c:	823b      	strh	r3, [r7, #16]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	8a3a      	ldrh	r2, [r7, #16]
 8005634:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005638:	b292      	uxth	r2, r2
 800563a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f006 fd19 	bl	800c074 <HAL_PCD_SetupStageCallback>
 8005642:	e235      	b.n	8005ab0 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005644:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005648:	2b00      	cmp	r3, #0
 800564a:	f280 8231 	bge.w	8005ab0 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29a      	uxth	r2, r3
 8005656:	f640 738f 	movw	r3, #3983	; 0xf8f
 800565a:	4013      	ands	r3, r2
 800565c:	83bb      	strh	r3, [r7, #28]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	8bba      	ldrh	r2, [r7, #28]
 8005664:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005668:	b292      	uxth	r2, r2
 800566a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005674:	b29b      	uxth	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4413      	add	r3, r2
 8005680:	3306      	adds	r3, #6
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6812      	ldr	r2, [r2, #0]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d019      	beq.n	80056d4 <PCD_EP_ISR_Handler+0x1ee>
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d015      	beq.n	80056d4 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6818      	ldr	r0, [r3, #0]
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	6959      	ldr	r1, [r3, #20]
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f004 fbaa 	bl	8009e12 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	695a      	ldr	r2, [r3, #20]
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	441a      	add	r2, r3
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80056cc:	2100      	movs	r1, #0
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f006 fce2 	bl	800c098 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	4413      	add	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d112      	bne.n	8005722 <PCD_EP_ISR_Handler+0x23c>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005706:	b29a      	uxth	r2, r3
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	801a      	strh	r2, [r3, #0]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571a:	b29a      	uxth	r2, r3
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	e02f      	b.n	8005782 <PCD_EP_ISR_Handler+0x29c>
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	2b3e      	cmp	r3, #62	; 0x3e
 8005728:	d813      	bhi.n	8005752 <PCD_EP_ISR_Handler+0x26c>
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	085b      	lsrs	r3, r3, #1
 8005730:	633b      	str	r3, [r7, #48]	; 0x30
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <PCD_EP_ISR_Handler+0x25e>
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	3301      	adds	r3, #1
 8005742:	633b      	str	r3, [r7, #48]	; 0x30
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	b29b      	uxth	r3, r3
 8005748:	029b      	lsls	r3, r3, #10
 800574a:	b29a      	uxth	r2, r3
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	e017      	b.n	8005782 <PCD_EP_ISR_Handler+0x29c>
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	633b      	str	r3, [r7, #48]	; 0x30
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	2b00      	cmp	r3, #0
 8005764:	d102      	bne.n	800576c <PCD_EP_ISR_Handler+0x286>
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	3b01      	subs	r3, #1
 800576a:	633b      	str	r3, [r7, #48]	; 0x30
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	b29b      	uxth	r3, r3
 8005770:	029b      	lsls	r3, r3, #10
 8005772:	b29b      	uxth	r3, r3
 8005774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577c:	b29a      	uxth	r2, r3
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800578e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005792:	827b      	strh	r3, [r7, #18]
 8005794:	8a7b      	ldrh	r3, [r7, #18]
 8005796:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800579a:	827b      	strh	r3, [r7, #18]
 800579c:	8a7b      	ldrh	r3, [r7, #18]
 800579e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057a2:	827b      	strh	r3, [r7, #18]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	8a7b      	ldrh	r3, [r7, #18]
 80057aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	8013      	strh	r3, [r2, #0]
 80057be:	e177      	b.n	8005ab0 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80057d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f280 80ea 	bge.w	80059b0 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	461a      	mov	r2, r3
 80057e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80057f2:	4013      	ands	r3, r2
 80057f4:	853b      	strh	r3, [r7, #40]	; 0x28
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800580a:	b292      	uxth	r2, r2
 800580c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800580e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4413      	add	r3, r2
 8005822:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	7b1b      	ldrb	r3, [r3, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d122      	bne.n	8005872 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005834:	b29b      	uxth	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	4413      	add	r3, r2
 8005840:	3306      	adds	r3, #6
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6812      	ldr	r2, [r2, #0]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005854:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005856:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8087 	beq.w	800596c <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	6959      	ldr	r1, [r3, #20]
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	88da      	ldrh	r2, [r3, #6]
 800586a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800586c:	f004 fad1 	bl	8009e12 <USB_ReadPMA>
 8005870:	e07c      	b.n	800596c <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	78db      	ldrb	r3, [r3, #3]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d108      	bne.n	800588c <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800587a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800587c:	461a      	mov	r2, r3
 800587e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f923 	bl	8005acc <HAL_PCD_EP_DB_Receive>
 8005886:	4603      	mov	r3, r0
 8005888:	86fb      	strh	r3, [r7, #54]	; 0x36
 800588a:	e06f      	b.n	800596c <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	441a      	add	r2, r3
 80058b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	461a      	mov	r2, r3
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d021      	beq.n	800592a <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	4413      	add	r3, r2
 80058fa:	3302      	adds	r3, #2
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800590e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005910:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005912:	2b00      	cmp	r3, #0
 8005914:	d02a      	beq.n	800596c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	6959      	ldr	r1, [r3, #20]
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	891a      	ldrh	r2, [r3, #8]
 8005922:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005924:	f004 fa75 	bl	8009e12 <USB_ReadPMA>
 8005928:	e020      	b.n	800596c <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005932:	b29b      	uxth	r3, r3
 8005934:	461a      	mov	r2, r3
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	4413      	add	r3, r2
 800593e:	3306      	adds	r3, #6
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005952:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005954:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005956:	2b00      	cmp	r3, #0
 8005958:	d008      	beq.n	800596c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	6959      	ldr	r1, [r3, #20]
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	895a      	ldrh	r2, [r3, #10]
 8005966:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005968:	f004 fa53 	bl	8009e12 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005972:	441a      	add	r2, r3
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	695a      	ldr	r2, [r3, #20]
 800597c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800597e:	441a      	add	r2, r3
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <PCD_EP_ISR_Handler+0x4b0>
 800598c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	429a      	cmp	r2, r3
 8005994:	d206      	bcs.n	80059a4 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f006 fb7b 	bl	800c098 <HAL_PCD_DataOutStageCallback>
 80059a2:	e005      	b.n	80059b0 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f002 ff8e 	bl	80088cc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80059b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80059b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d07a      	beq.n	8005ab0 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80059ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	4413      	add	r3, r2
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80059e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e8:	843b      	strh	r3, [r7, #32]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	441a      	add	r2, r3
 80059f8:	8c3b      	ldrh	r3, [r7, #32]
 80059fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	78db      	ldrb	r3, [r3, #3]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d108      	bne.n	8005a20 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d146      	bne.n	8005aa4 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005a16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d141      	bne.n	8005aa4 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	4413      	add	r3, r2
 8005a34:	3302      	adds	r3, #2
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6812      	ldr	r2, [r2, #0]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a48:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	8bfb      	ldrh	r3, [r7, #30]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d906      	bls.n	8005a62 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	699a      	ldr	r2, [r3, #24]
 8005a58:	8bfb      	ldrh	r3, [r7, #30]
 8005a5a:	1ad2      	subs	r2, r2, r3
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	619a      	str	r2, [r3, #24]
 8005a60:	e002      	b.n	8005a68 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	2200      	movs	r2, #0
 8005a66:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d106      	bne.n	8005a7e <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f006 fb29 	bl	800c0ce <HAL_PCD_DataInStageCallback>
 8005a7c:	e018      	b.n	8005ab0 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	695a      	ldr	r2, [r3, #20]
 8005a82:	8bfb      	ldrh	r3, [r7, #30]
 8005a84:	441a      	add	r2, r3
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	69da      	ldr	r2, [r3, #28]
 8005a8e:	8bfb      	ldrh	r3, [r7, #30]
 8005a90:	441a      	add	r2, r3
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f002 ff15 	bl	80088cc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005aa2:	e005      	b.n	8005ab0 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005aa4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f91b 	bl	8005ce6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	b21b      	sxth	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f6ff ad17 	blt.w	80054f0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3738      	adds	r7, #56	; 0x38
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d07e      	beq.n	8005be2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	4413      	add	r3, r2
 8005af8:	3302      	adds	r3, #2
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b0c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	8b7b      	ldrh	r3, [r7, #26]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d306      	bcc.n	8005b26 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	8b7b      	ldrh	r3, [r7, #26]
 8005b1e:	1ad2      	subs	r2, r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	619a      	str	r2, [r3, #24]
 8005b24:	e002      	b.n	8005b2c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d123      	bne.n	8005b7c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4e:	833b      	strh	r3, [r7, #24]
 8005b50:	8b3b      	ldrh	r3, [r7, #24]
 8005b52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b56:	833b      	strh	r3, [r7, #24]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	441a      	add	r2, r3
 8005b66:	8b3b      	ldrh	r3, [r7, #24]
 8005b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b7c:	88fb      	ldrh	r3, [r7, #6]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d01f      	beq.n	8005bc6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba0:	82fb      	strh	r3, [r7, #22]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	441a      	add	r2, r3
 8005bb0:	8afb      	ldrh	r3, [r7, #22]
 8005bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005bc6:	8b7b      	ldrh	r3, [r7, #26]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8087 	beq.w	8005cdc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6959      	ldr	r1, [r3, #20]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	891a      	ldrh	r2, [r3, #8]
 8005bda:	8b7b      	ldrh	r3, [r7, #26]
 8005bdc:	f004 f919 	bl	8009e12 <USB_ReadPMA>
 8005be0:	e07c      	b.n	8005cdc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	3306      	adds	r3, #6
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	6812      	ldr	r2, [r2, #0]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c0a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	699a      	ldr	r2, [r3, #24]
 8005c10:	8b7b      	ldrh	r3, [r7, #26]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d306      	bcc.n	8005c24 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	8b7b      	ldrh	r3, [r7, #26]
 8005c1c:	1ad2      	subs	r2, r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	619a      	str	r2, [r3, #24]
 8005c22:	e002      	b.n	8005c2a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2200      	movs	r2, #0
 8005c28:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d123      	bne.n	8005c7a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4c:	83fb      	strh	r3, [r7, #30]
 8005c4e:	8bfb      	ldrh	r3, [r7, #30]
 8005c50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c54:	83fb      	strh	r3, [r7, #30]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	441a      	add	r2, r3
 8005c64:	8bfb      	ldrh	r3, [r7, #30]
 8005c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005c7a:	88fb      	ldrh	r3, [r7, #6]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d11f      	bne.n	8005cc4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9e:	83bb      	strh	r3, [r7, #28]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	441a      	add	r2, r3
 8005cae:	8bbb      	ldrh	r3, [r7, #28]
 8005cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005cc4:	8b7b      	ldrh	r3, [r7, #26]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d008      	beq.n	8005cdc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	6959      	ldr	r1, [r3, #20]
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	895a      	ldrh	r2, [r3, #10]
 8005cd6:	8b7b      	ldrh	r3, [r7, #26]
 8005cd8:	f004 f89b 	bl	8009e12 <USB_ReadPMA>
    }
  }

  return count;
 8005cdc:	8b7b      	ldrh	r3, [r7, #26]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3720      	adds	r7, #32
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b094      	sub	sp, #80	; 0x50
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005cf4:	88fb      	ldrh	r3, [r7, #6]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 8138 	beq.w	8005f70 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	4413      	add	r3, r2
 8005d14:	3302      	adds	r3, #2
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d28:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d907      	bls.n	8005d48 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	699a      	ldr	r2, [r3, #24]
 8005d3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d40:	1ad2      	subs	r2, r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	619a      	str	r2, [r3, #24]
 8005d46:	e002      	b.n	8005d4e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d12c      	bne.n	8005db0 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f006 f9b6 	bl	800c0ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 823a 	beq.w	80061e2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d88:	82fb      	strh	r3, [r7, #22]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	441a      	add	r2, r3
 8005d98:	8afb      	ldrh	r3, [r7, #22]
 8005d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	8013      	strh	r3, [r2, #0]
 8005dae:	e218      	b.n	80061e2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005db0:	88fb      	ldrh	r3, [r7, #6]
 8005db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01f      	beq.n	8005dfa <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	441a      	add	r2, r3
 8005de4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	f040 81ee 	bne.w	80061e2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	695a      	ldr	r2, [r3, #20]
 8005e0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e0e:	441a      	add	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e1c:	441a      	add	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6a1a      	ldr	r2, [r3, #32]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d309      	bcc.n	8005e42 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	6a1a      	ldr	r2, [r3, #32]
 8005e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3a:	1ad2      	subs	r2, r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	621a      	str	r2, [r3, #32]
 8005e40:	e015      	b.n	8005e6e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d107      	bne.n	8005e5a <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8005e4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e4e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005e58:	e009      	b.n	8005e6e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	785b      	ldrb	r3, [r3, #1]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d155      	bne.n	8005f22 <HAL_PCD_EP_DB_Transmit+0x23c>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	011a      	lsls	r2, r3, #4
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d112      	bne.n	8005eca <HAL_PCD_EP_DB_Transmit+0x1e4>
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	801a      	strh	r2, [r3, #0]
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	801a      	strh	r2, [r3, #0]
 8005ec8:	e047      	b.n	8005f5a <HAL_PCD_EP_DB_Transmit+0x274>
 8005eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ecc:	2b3e      	cmp	r3, #62	; 0x3e
 8005ece:	d811      	bhi.n	8005ef4 <HAL_PCD_EP_DB_Transmit+0x20e>
 8005ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_PCD_EP_DB_Transmit+0x200>
 8005ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	029b      	lsls	r3, r3, #10
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	801a      	strh	r2, [r3, #0]
 8005ef2:	e032      	b.n	8005f5a <HAL_PCD_EP_DB_Transmit+0x274>
 8005ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005efc:	f003 031f 	and.w	r3, r3, #31
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d102      	bne.n	8005f0a <HAL_PCD_EP_DB_Transmit+0x224>
 8005f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f06:	3b01      	subs	r3, #1
 8005f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	029b      	lsls	r3, r3, #10
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	801a      	strh	r2, [r3, #0]
 8005f20:	e01b      	b.n	8005f5a <HAL_PCD_EP_DB_Transmit+0x274>
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	785b      	ldrb	r3, [r3, #1]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d117      	bne.n	8005f5a <HAL_PCD_EP_DB_Transmit+0x274>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	4413      	add	r3, r2
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	011a      	lsls	r2, r3, #4
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f50:	623b      	str	r3, [r7, #32]
 8005f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	6959      	ldr	r1, [r3, #20]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	891a      	ldrh	r2, [r3, #8]
 8005f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f003 ff0d 	bl	8009d88 <USB_WritePMA>
 8005f6e:	e138      	b.n	80061e2 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	4413      	add	r3, r2
 8005f84:	3306      	adds	r3, #6
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	6812      	ldr	r2, [r2, #0]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f98:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	699a      	ldr	r2, [r3, #24]
 8005fa0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d307      	bcc.n	8005fb8 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	699a      	ldr	r2, [r3, #24]
 8005fac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005fb0:	1ad2      	subs	r2, r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	619a      	str	r2, [r3, #24]
 8005fb6:	e002      	b.n	8005fbe <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d12e      	bne.n	8006024 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f006 f87e 	bl	800c0ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f040 8102 	bne.w	80061e2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	441a      	add	r2, r3
 800600a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800600e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006016:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800601a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601e:	b29b      	uxth	r3, r3
 8006020:	8013      	strh	r3, [r2, #0]
 8006022:	e0de      	b.n	80061e2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006024:	88fb      	ldrh	r3, [r7, #6]
 8006026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d11f      	bne.n	800606e <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006048:	867b      	strh	r3, [r7, #50]	; 0x32
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006062:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006074:	2b01      	cmp	r3, #1
 8006076:	f040 80b4 	bne.w	80061e2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	695a      	ldr	r2, [r3, #20]
 800607e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006082:	441a      	add	r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006090:	441a      	add	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6a1a      	ldr	r2, [r3, #32]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d309      	bcc.n	80060b6 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6a1a      	ldr	r2, [r3, #32]
 80060ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ae:	1ad2      	subs	r2, r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	621a      	str	r2, [r3, #32]
 80060b4:	e015      	b.n	80060e2 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d107      	bne.n	80060ce <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80060be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060c2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80060cc:	e009      	b.n	80060e2 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2200      	movs	r2, #0
 80060d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	643b      	str	r3, [r7, #64]	; 0x40
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	785b      	ldrb	r3, [r3, #1]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d155      	bne.n	800619c <HAL_PCD_EP_DB_Transmit+0x4b6>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060fe:	b29b      	uxth	r3, r3
 8006100:	461a      	mov	r2, r3
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	4413      	add	r3, r2
 8006106:	63bb      	str	r3, [r7, #56]	; 0x38
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	011a      	lsls	r2, r3, #4
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	4413      	add	r3, r2
 8006112:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006116:	637b      	str	r3, [r7, #52]	; 0x34
 8006118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611a:	2b00      	cmp	r3, #0
 800611c:	d112      	bne.n	8006144 <HAL_PCD_EP_DB_Transmit+0x45e>
 800611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006128:	b29a      	uxth	r2, r3
 800612a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800613c:	b29a      	uxth	r2, r3
 800613e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006140:	801a      	strh	r2, [r3, #0]
 8006142:	e044      	b.n	80061ce <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006146:	2b3e      	cmp	r3, #62	; 0x3e
 8006148:	d811      	bhi.n	800616e <HAL_PCD_EP_DB_Transmit+0x488>
 800614a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800614c:	085b      	lsrs	r3, r3, #1
 800614e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <HAL_PCD_EP_DB_Transmit+0x47a>
 800615a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615c:	3301      	adds	r3, #1
 800615e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006162:	b29b      	uxth	r3, r3
 8006164:	029b      	lsls	r3, r3, #10
 8006166:	b29a      	uxth	r2, r3
 8006168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	e02f      	b.n	80061ce <HAL_PCD_EP_DB_Transmit+0x4e8>
 800616e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006176:	f003 031f 	and.w	r3, r3, #31
 800617a:	2b00      	cmp	r3, #0
 800617c:	d102      	bne.n	8006184 <HAL_PCD_EP_DB_Transmit+0x49e>
 800617e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006180:	3b01      	subs	r3, #1
 8006182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006186:	b29b      	uxth	r3, r3
 8006188:	029b      	lsls	r3, r3, #10
 800618a:	b29b      	uxth	r3, r3
 800618c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006194:	b29a      	uxth	r2, r3
 8006196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006198:	801a      	strh	r2, [r3, #0]
 800619a:	e018      	b.n	80061ce <HAL_PCD_EP_DB_Transmit+0x4e8>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	785b      	ldrb	r3, [r3, #1]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d114      	bne.n	80061ce <HAL_PCD_EP_DB_Transmit+0x4e8>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b2:	4413      	add	r3, r2
 80061b4:	643b      	str	r3, [r7, #64]	; 0x40
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	011a      	lsls	r2, r3, #4
 80061bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061be:	4413      	add	r3, r2
 80061c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061cc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6959      	ldr	r1, [r3, #20]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	895a      	ldrh	r2, [r3, #10]
 80061da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f003 fdd3 	bl	8009d88 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061fc:	82bb      	strh	r3, [r7, #20]
 80061fe:	8abb      	ldrh	r3, [r7, #20]
 8006200:	f083 0310 	eor.w	r3, r3, #16
 8006204:	82bb      	strh	r3, [r7, #20]
 8006206:	8abb      	ldrh	r3, [r7, #20]
 8006208:	f083 0320 	eor.w	r3, r3, #32
 800620c:	82bb      	strh	r3, [r7, #20]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	441a      	add	r2, r3
 800621c:	8abb      	ldrh	r3, [r7, #20]
 800621e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800622e:	b29b      	uxth	r3, r3
 8006230:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3750      	adds	r7, #80	; 0x50
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	607b      	str	r3, [r7, #4]
 8006246:	460b      	mov	r3, r1
 8006248:	817b      	strh	r3, [r7, #10]
 800624a:	4613      	mov	r3, r2
 800624c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800624e:	897b      	ldrh	r3, [r7, #10]
 8006250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00b      	beq.n	8006272 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800625a:	897b      	ldrh	r3, [r7, #10]
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4413      	add	r3, r2
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	e009      	b.n	8006286 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006272:	897a      	ldrh	r2, [r7, #10]
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4413      	add	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006286:	893b      	ldrh	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d107      	bne.n	800629c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2200      	movs	r2, #0
 8006290:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	b29a      	uxth	r2, r3
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	80da      	strh	r2, [r3, #6]
 800629a:	e00b      	b.n	80062b4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2201      	movs	r2, #1
 80062a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr

080062c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e26c      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8087 	beq.w	80063ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062e0:	4b92      	ldr	r3, [pc, #584]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f003 030c 	and.w	r3, r3, #12
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d00c      	beq.n	8006306 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80062ec:	4b8f      	ldr	r3, [pc, #572]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f003 030c 	and.w	r3, r3, #12
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d112      	bne.n	800631e <HAL_RCC_OscConfig+0x5e>
 80062f8:	4b8c      	ldr	r3, [pc, #560]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006304:	d10b      	bne.n	800631e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006306:	4b89      	ldr	r3, [pc, #548]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d06c      	beq.n	80063ec <HAL_RCC_OscConfig+0x12c>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d168      	bne.n	80063ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e246      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006326:	d106      	bne.n	8006336 <HAL_RCC_OscConfig+0x76>
 8006328:	4b80      	ldr	r3, [pc, #512]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a7f      	ldr	r2, [pc, #508]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 800632e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	e02e      	b.n	8006394 <HAL_RCC_OscConfig+0xd4>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10c      	bne.n	8006358 <HAL_RCC_OscConfig+0x98>
 800633e:	4b7b      	ldr	r3, [pc, #492]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a7a      	ldr	r2, [pc, #488]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	4b78      	ldr	r3, [pc, #480]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a77      	ldr	r2, [pc, #476]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	e01d      	b.n	8006394 <HAL_RCC_OscConfig+0xd4>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006360:	d10c      	bne.n	800637c <HAL_RCC_OscConfig+0xbc>
 8006362:	4b72      	ldr	r3, [pc, #456]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a71      	ldr	r2, [pc, #452]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	4b6f      	ldr	r3, [pc, #444]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a6e      	ldr	r2, [pc, #440]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	e00b      	b.n	8006394 <HAL_RCC_OscConfig+0xd4>
 800637c:	4b6b      	ldr	r3, [pc, #428]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a6a      	ldr	r2, [pc, #424]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	4b68      	ldr	r3, [pc, #416]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a67      	ldr	r2, [pc, #412]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 800638e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006392:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d013      	beq.n	80063c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800639c:	f7fd fa32 	bl	8003804 <HAL_GetTick>
 80063a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063a4:	f7fd fa2e 	bl	8003804 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b64      	cmp	r3, #100	; 0x64
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e1fa      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b6:	4b5d      	ldr	r3, [pc, #372]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0f0      	beq.n	80063a4 <HAL_RCC_OscConfig+0xe4>
 80063c2:	e014      	b.n	80063ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c4:	f7fd fa1e 	bl	8003804 <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063cc:	f7fd fa1a 	bl	8003804 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b64      	cmp	r3, #100	; 0x64
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e1e6      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063de:	4b53      	ldr	r3, [pc, #332]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1f0      	bne.n	80063cc <HAL_RCC_OscConfig+0x10c>
 80063ea:	e000      	b.n	80063ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d063      	beq.n	80064c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063fa:	4b4c      	ldr	r3, [pc, #304]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f003 030c 	and.w	r3, r3, #12
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00b      	beq.n	800641e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006406:	4b49      	ldr	r3, [pc, #292]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f003 030c 	and.w	r3, r3, #12
 800640e:	2b08      	cmp	r3, #8
 8006410:	d11c      	bne.n	800644c <HAL_RCC_OscConfig+0x18c>
 8006412:	4b46      	ldr	r3, [pc, #280]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d116      	bne.n	800644c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800641e:	4b43      	ldr	r3, [pc, #268]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <HAL_RCC_OscConfig+0x176>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d001      	beq.n	8006436 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e1ba      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006436:	4b3d      	ldr	r3, [pc, #244]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	4939      	ldr	r1, [pc, #228]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006446:	4313      	orrs	r3, r2
 8006448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800644a:	e03a      	b.n	80064c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d020      	beq.n	8006496 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006454:	4b36      	ldr	r3, [pc, #216]	; (8006530 <HAL_RCC_OscConfig+0x270>)
 8006456:	2201      	movs	r2, #1
 8006458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800645a:	f7fd f9d3 	bl	8003804 <HAL_GetTick>
 800645e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006460:	e008      	b.n	8006474 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006462:	f7fd f9cf 	bl	8003804 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e19b      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006474:	4b2d      	ldr	r3, [pc, #180]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0f0      	beq.n	8006462 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006480:	4b2a      	ldr	r3, [pc, #168]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	4927      	ldr	r1, [pc, #156]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 8006490:	4313      	orrs	r3, r2
 8006492:	600b      	str	r3, [r1, #0]
 8006494:	e015      	b.n	80064c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006496:	4b26      	ldr	r3, [pc, #152]	; (8006530 <HAL_RCC_OscConfig+0x270>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800649c:	f7fd f9b2 	bl	8003804 <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064a4:	f7fd f9ae 	bl	8003804 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e17a      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064b6:	4b1d      	ldr	r3, [pc, #116]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f0      	bne.n	80064a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d03a      	beq.n	8006544 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d019      	beq.n	800650a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064d6:	4b17      	ldr	r3, [pc, #92]	; (8006534 <HAL_RCC_OscConfig+0x274>)
 80064d8:	2201      	movs	r2, #1
 80064da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064dc:	f7fd f992 	bl	8003804 <HAL_GetTick>
 80064e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064e4:	f7fd f98e 	bl	8003804 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e15a      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f6:	4b0d      	ldr	r3, [pc, #52]	; (800652c <HAL_RCC_OscConfig+0x26c>)
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0f0      	beq.n	80064e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006502:	2001      	movs	r0, #1
 8006504:	f000 fac4 	bl	8006a90 <RCC_Delay>
 8006508:	e01c      	b.n	8006544 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800650a:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <HAL_RCC_OscConfig+0x274>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006510:	f7fd f978 	bl	8003804 <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006516:	e00f      	b.n	8006538 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006518:	f7fd f974 	bl	8003804 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d908      	bls.n	8006538 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e140      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
 800652a:	bf00      	nop
 800652c:	40021000 	.word	0x40021000
 8006530:	42420000 	.word	0x42420000
 8006534:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006538:	4b9e      	ldr	r3, [pc, #632]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e9      	bne.n	8006518 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 80a6 	beq.w	800669e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006552:	2300      	movs	r3, #0
 8006554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006556:	4b97      	ldr	r3, [pc, #604]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10d      	bne.n	800657e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006562:	4b94      	ldr	r3, [pc, #592]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	4a93      	ldr	r2, [pc, #588]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800656c:	61d3      	str	r3, [r2, #28]
 800656e:	4b91      	ldr	r3, [pc, #580]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006576:	60bb      	str	r3, [r7, #8]
 8006578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800657a:	2301      	movs	r3, #1
 800657c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800657e:	4b8e      	ldr	r3, [pc, #568]	; (80067b8 <HAL_RCC_OscConfig+0x4f8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006586:	2b00      	cmp	r3, #0
 8006588:	d118      	bne.n	80065bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800658a:	4b8b      	ldr	r3, [pc, #556]	; (80067b8 <HAL_RCC_OscConfig+0x4f8>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a8a      	ldr	r2, [pc, #552]	; (80067b8 <HAL_RCC_OscConfig+0x4f8>)
 8006590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006596:	f7fd f935 	bl	8003804 <HAL_GetTick>
 800659a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800659e:	f7fd f931 	bl	8003804 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b64      	cmp	r3, #100	; 0x64
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e0fd      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b0:	4b81      	ldr	r3, [pc, #516]	; (80067b8 <HAL_RCC_OscConfig+0x4f8>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f0      	beq.n	800659e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d106      	bne.n	80065d2 <HAL_RCC_OscConfig+0x312>
 80065c4:	4b7b      	ldr	r3, [pc, #492]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	4a7a      	ldr	r2, [pc, #488]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	6213      	str	r3, [r2, #32]
 80065d0:	e02d      	b.n	800662e <HAL_RCC_OscConfig+0x36e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10c      	bne.n	80065f4 <HAL_RCC_OscConfig+0x334>
 80065da:	4b76      	ldr	r3, [pc, #472]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	4a75      	ldr	r2, [pc, #468]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 80065e0:	f023 0301 	bic.w	r3, r3, #1
 80065e4:	6213      	str	r3, [r2, #32]
 80065e6:	4b73      	ldr	r3, [pc, #460]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	4a72      	ldr	r2, [pc, #456]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 80065ec:	f023 0304 	bic.w	r3, r3, #4
 80065f0:	6213      	str	r3, [r2, #32]
 80065f2:	e01c      	b.n	800662e <HAL_RCC_OscConfig+0x36e>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	2b05      	cmp	r3, #5
 80065fa:	d10c      	bne.n	8006616 <HAL_RCC_OscConfig+0x356>
 80065fc:	4b6d      	ldr	r3, [pc, #436]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	4a6c      	ldr	r2, [pc, #432]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006602:	f043 0304 	orr.w	r3, r3, #4
 8006606:	6213      	str	r3, [r2, #32]
 8006608:	4b6a      	ldr	r3, [pc, #424]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	4a69      	ldr	r2, [pc, #420]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 800660e:	f043 0301 	orr.w	r3, r3, #1
 8006612:	6213      	str	r3, [r2, #32]
 8006614:	e00b      	b.n	800662e <HAL_RCC_OscConfig+0x36e>
 8006616:	4b67      	ldr	r3, [pc, #412]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	4a66      	ldr	r2, [pc, #408]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	6213      	str	r3, [r2, #32]
 8006622:	4b64      	ldr	r3, [pc, #400]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	4a63      	ldr	r2, [pc, #396]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006628:	f023 0304 	bic.w	r3, r3, #4
 800662c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d015      	beq.n	8006662 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006636:	f7fd f8e5 	bl	8003804 <HAL_GetTick>
 800663a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800663c:	e00a      	b.n	8006654 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800663e:	f7fd f8e1 	bl	8003804 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	f241 3288 	movw	r2, #5000	; 0x1388
 800664c:	4293      	cmp	r3, r2
 800664e:	d901      	bls.n	8006654 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e0ab      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006654:	4b57      	ldr	r3, [pc, #348]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0ee      	beq.n	800663e <HAL_RCC_OscConfig+0x37e>
 8006660:	e014      	b.n	800668c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006662:	f7fd f8cf 	bl	8003804 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006668:	e00a      	b.n	8006680 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800666a:	f7fd f8cb 	bl	8003804 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	f241 3288 	movw	r2, #5000	; 0x1388
 8006678:	4293      	cmp	r3, r2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e095      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006680:	4b4c      	ldr	r3, [pc, #304]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006682:	6a1b      	ldr	r3, [r3, #32]
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1ee      	bne.n	800666a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800668c:	7dfb      	ldrb	r3, [r7, #23]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d105      	bne.n	800669e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006692:	4b48      	ldr	r3, [pc, #288]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	4a47      	ldr	r2, [pc, #284]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800669c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 8081 	beq.w	80067aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066a8:	4b42      	ldr	r3, [pc, #264]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f003 030c 	and.w	r3, r3, #12
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d061      	beq.n	8006778 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d146      	bne.n	800674a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066bc:	4b3f      	ldr	r3, [pc, #252]	; (80067bc <HAL_RCC_OscConfig+0x4fc>)
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c2:	f7fd f89f 	bl	8003804 <HAL_GetTick>
 80066c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066c8:	e008      	b.n	80066dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ca:	f7fd f89b 	bl	8003804 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e067      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066dc:	4b35      	ldr	r3, [pc, #212]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1f0      	bne.n	80066ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f0:	d108      	bne.n	8006704 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80066f2:	4b30      	ldr	r3, [pc, #192]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	492d      	ldr	r1, [pc, #180]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006700:	4313      	orrs	r3, r2
 8006702:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006704:	4b2b      	ldr	r3, [pc, #172]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a19      	ldr	r1, [r3, #32]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	430b      	orrs	r3, r1
 8006716:	4927      	ldr	r1, [pc, #156]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006718:	4313      	orrs	r3, r2
 800671a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800671c:	4b27      	ldr	r3, [pc, #156]	; (80067bc <HAL_RCC_OscConfig+0x4fc>)
 800671e:	2201      	movs	r2, #1
 8006720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006722:	f7fd f86f 	bl	8003804 <HAL_GetTick>
 8006726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006728:	e008      	b.n	800673c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800672a:	f7fd f86b 	bl	8003804 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e037      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800673c:	4b1d      	ldr	r3, [pc, #116]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0f0      	beq.n	800672a <HAL_RCC_OscConfig+0x46a>
 8006748:	e02f      	b.n	80067aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800674a:	4b1c      	ldr	r3, [pc, #112]	; (80067bc <HAL_RCC_OscConfig+0x4fc>)
 800674c:	2200      	movs	r2, #0
 800674e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006750:	f7fd f858 	bl	8003804 <HAL_GetTick>
 8006754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006756:	e008      	b.n	800676a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006758:	f7fd f854 	bl	8003804 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b02      	cmp	r3, #2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e020      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800676a:	4b12      	ldr	r3, [pc, #72]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f0      	bne.n	8006758 <HAL_RCC_OscConfig+0x498>
 8006776:	e018      	b.n	80067aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e013      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006784:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <HAL_RCC_OscConfig+0x4f4>)
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	429a      	cmp	r2, r3
 8006796:	d106      	bne.n	80067a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d001      	beq.n	80067aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	40021000 	.word	0x40021000
 80067b8:	40007000 	.word	0x40007000
 80067bc:	42420060 	.word	0x42420060

080067c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0d0      	b.n	8006976 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067d4:	4b6a      	ldr	r3, [pc, #424]	; (8006980 <HAL_RCC_ClockConfig+0x1c0>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d910      	bls.n	8006804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e2:	4b67      	ldr	r3, [pc, #412]	; (8006980 <HAL_RCC_ClockConfig+0x1c0>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f023 0207 	bic.w	r2, r3, #7
 80067ea:	4965      	ldr	r1, [pc, #404]	; (8006980 <HAL_RCC_ClockConfig+0x1c0>)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f2:	4b63      	ldr	r3, [pc, #396]	; (8006980 <HAL_RCC_ClockConfig+0x1c0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d001      	beq.n	8006804 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e0b8      	b.n	8006976 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d020      	beq.n	8006852 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800681c:	4b59      	ldr	r3, [pc, #356]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	4a58      	ldr	r2, [pc, #352]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 8006822:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006826:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b00      	cmp	r3, #0
 8006832:	d005      	beq.n	8006840 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006834:	4b53      	ldr	r3, [pc, #332]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	4a52      	ldr	r2, [pc, #328]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 800683a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800683e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006840:	4b50      	ldr	r3, [pc, #320]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	494d      	ldr	r1, [pc, #308]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 800684e:	4313      	orrs	r3, r2
 8006850:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d040      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d107      	bne.n	8006876 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006866:	4b47      	ldr	r3, [pc, #284]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d115      	bne.n	800689e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e07f      	b.n	8006976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d107      	bne.n	800688e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800687e:	4b41      	ldr	r3, [pc, #260]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d109      	bne.n	800689e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e073      	b.n	8006976 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800688e:	4b3d      	ldr	r3, [pc, #244]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e06b      	b.n	8006976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800689e:	4b39      	ldr	r3, [pc, #228]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f023 0203 	bic.w	r2, r3, #3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	4936      	ldr	r1, [pc, #216]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068b0:	f7fc ffa8 	bl	8003804 <HAL_GetTick>
 80068b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068b6:	e00a      	b.n	80068ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068b8:	f7fc ffa4 	bl	8003804 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e053      	b.n	8006976 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ce:	4b2d      	ldr	r3, [pc, #180]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f003 020c 	and.w	r2, r3, #12
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	429a      	cmp	r2, r3
 80068de:	d1eb      	bne.n	80068b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068e0:	4b27      	ldr	r3, [pc, #156]	; (8006980 <HAL_RCC_ClockConfig+0x1c0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d210      	bcs.n	8006910 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ee:	4b24      	ldr	r3, [pc, #144]	; (8006980 <HAL_RCC_ClockConfig+0x1c0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f023 0207 	bic.w	r2, r3, #7
 80068f6:	4922      	ldr	r1, [pc, #136]	; (8006980 <HAL_RCC_ClockConfig+0x1c0>)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068fe:	4b20      	ldr	r3, [pc, #128]	; (8006980 <HAL_RCC_ClockConfig+0x1c0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d001      	beq.n	8006910 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e032      	b.n	8006976 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800691c:	4b19      	ldr	r3, [pc, #100]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	4916      	ldr	r1, [pc, #88]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 800692a:	4313      	orrs	r3, r2
 800692c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d009      	beq.n	800694e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800693a:	4b12      	ldr	r3, [pc, #72]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	490e      	ldr	r1, [pc, #56]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 800694a:	4313      	orrs	r3, r2
 800694c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800694e:	f000 f821 	bl	8006994 <HAL_RCC_GetSysClockFreq>
 8006952:	4602      	mov	r2, r0
 8006954:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <HAL_RCC_ClockConfig+0x1c4>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	091b      	lsrs	r3, r3, #4
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	490a      	ldr	r1, [pc, #40]	; (8006988 <HAL_RCC_ClockConfig+0x1c8>)
 8006960:	5ccb      	ldrb	r3, [r1, r3]
 8006962:	fa22 f303 	lsr.w	r3, r2, r3
 8006966:	4a09      	ldr	r2, [pc, #36]	; (800698c <HAL_RCC_ClockConfig+0x1cc>)
 8006968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800696a:	4b09      	ldr	r3, [pc, #36]	; (8006990 <HAL_RCC_ClockConfig+0x1d0>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f7fc ff06 	bl	8003780 <HAL_InitTick>

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	40022000 	.word	0x40022000
 8006984:	40021000 	.word	0x40021000
 8006988:	0800db6c 	.word	0x0800db6c
 800698c:	20000010 	.word	0x20000010
 8006990:	20000014 	.word	0x20000014

08006994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006994:	b490      	push	{r4, r7}
 8006996:	b08a      	sub	sp, #40	; 0x28
 8006998:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800699a:	4b2a      	ldr	r3, [pc, #168]	; (8006a44 <HAL_RCC_GetSysClockFreq+0xb0>)
 800699c:	1d3c      	adds	r4, r7, #4
 800699e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80069a4:	f240 2301 	movw	r3, #513	; 0x201
 80069a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
 80069ae:	2300      	movs	r3, #0
 80069b0:	61bb      	str	r3, [r7, #24]
 80069b2:	2300      	movs	r3, #0
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
 80069b6:	2300      	movs	r3, #0
 80069b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80069be:	4b22      	ldr	r3, [pc, #136]	; (8006a48 <HAL_RCC_GetSysClockFreq+0xb4>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f003 030c 	and.w	r3, r3, #12
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d002      	beq.n	80069d4 <HAL_RCC_GetSysClockFreq+0x40>
 80069ce:	2b08      	cmp	r3, #8
 80069d0:	d003      	beq.n	80069da <HAL_RCC_GetSysClockFreq+0x46>
 80069d2:	e02d      	b.n	8006a30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80069d4:	4b1d      	ldr	r3, [pc, #116]	; (8006a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 80069d6:	623b      	str	r3, [r7, #32]
      break;
 80069d8:	e02d      	b.n	8006a36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	0c9b      	lsrs	r3, r3, #18
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80069e6:	4413      	add	r3, r2
 80069e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80069ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d013      	beq.n	8006a20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80069f8:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <HAL_RCC_GetSysClockFreq+0xb4>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	0c5b      	lsrs	r3, r3, #17
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a06:	4413      	add	r3, r2
 8006a08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	4a0e      	ldr	r2, [pc, #56]	; (8006a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a12:	fb02 f203 	mul.w	r2, r2, r3
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a1e:	e004      	b.n	8006a2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	4a0b      	ldr	r2, [pc, #44]	; (8006a50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a24:	fb02 f303 	mul.w	r3, r2, r3
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	623b      	str	r3, [r7, #32]
      break;
 8006a2e:	e002      	b.n	8006a36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a30:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a32:	623b      	str	r3, [r7, #32]
      break;
 8006a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a36:	6a3b      	ldr	r3, [r7, #32]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3728      	adds	r7, #40	; 0x28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bc90      	pop	{r4, r7}
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	0800da9c 	.word	0x0800da9c
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	007a1200 	.word	0x007a1200
 8006a50:	003d0900 	.word	0x003d0900

08006a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a58:	4b02      	ldr	r3, [pc, #8]	; (8006a64 <HAL_RCC_GetHCLKFreq+0x10>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr
 8006a64:	20000010 	.word	0x20000010

08006a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a6c:	f7ff fff2 	bl	8006a54 <HAL_RCC_GetHCLKFreq>
 8006a70:	4602      	mov	r2, r0
 8006a72:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	0adb      	lsrs	r3, r3, #11
 8006a78:	f003 0307 	and.w	r3, r3, #7
 8006a7c:	4903      	ldr	r1, [pc, #12]	; (8006a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a7e:	5ccb      	ldrb	r3, [r1, r3]
 8006a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	40021000 	.word	0x40021000
 8006a8c:	0800db7c 	.word	0x0800db7c

08006a90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006a98:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <RCC_Delay+0x34>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a0a      	ldr	r2, [pc, #40]	; (8006ac8 <RCC_Delay+0x38>)
 8006a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa2:	0a5b      	lsrs	r3, r3, #9
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	fb02 f303 	mul.w	r3, r2, r3
 8006aaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006aac:	bf00      	nop
  }
  while (Delay --);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1e5a      	subs	r2, r3, #1
 8006ab2:	60fa      	str	r2, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1f9      	bne.n	8006aac <RCC_Delay+0x1c>
}
 8006ab8:	bf00      	nop
 8006aba:	bf00      	nop
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr
 8006ac4:	20000010 	.word	0x20000010
 8006ac8:	10624dd3 	.word	0x10624dd3

08006acc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d07d      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aec:	4b4f      	ldr	r3, [pc, #316]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10d      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006af8:	4b4c      	ldr	r3, [pc, #304]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	4a4b      	ldr	r2, [pc, #300]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b02:	61d3      	str	r3, [r2, #28]
 8006b04:	4b49      	ldr	r3, [pc, #292]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b06:	69db      	ldr	r3, [r3, #28]
 8006b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0c:	60bb      	str	r3, [r7, #8]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b10:	2301      	movs	r3, #1
 8006b12:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b14:	4b46      	ldr	r3, [pc, #280]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d118      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b20:	4b43      	ldr	r3, [pc, #268]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a42      	ldr	r2, [pc, #264]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b2c:	f7fc fe6a 	bl	8003804 <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b32:	e008      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b34:	f7fc fe66 	bl	8003804 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b64      	cmp	r3, #100	; 0x64
 8006b40:	d901      	bls.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e06d      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b46:	4b3a      	ldr	r3, [pc, #232]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0f0      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b52:	4b36      	ldr	r3, [pc, #216]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d02e      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d027      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b70:	4b2e      	ldr	r3, [pc, #184]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b7a:	4b2e      	ldr	r3, [pc, #184]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b80:	4b2c      	ldr	r3, [pc, #176]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b86:	4a29      	ldr	r2, [pc, #164]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d014      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b96:	f7fc fe35 	bl	8003804 <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b9c:	e00a      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b9e:	f7fc fe31 	bl	8003804 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e036      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bb4:	4b1d      	ldr	r3, [pc, #116]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0ee      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bc0:	4b1a      	ldr	r3, [pc, #104]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	4917      	ldr	r1, [pc, #92]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d105      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bd8:	4b14      	ldr	r3, [pc, #80]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	4a13      	ldr	r2, [pc, #76]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006be2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bf0:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	490b      	ldr	r1, [pc, #44]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0310 	and.w	r3, r3, #16
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d008      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c0e:	4b07      	ldr	r3, [pc, #28]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	4904      	ldr	r1, [pc, #16]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	40021000 	.word	0x40021000
 8006c30:	40007000 	.word	0x40007000
 8006c34:	42420440 	.word	0x42420440

08006c38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b08d      	sub	sp, #52	; 0x34
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006c40:	4b5a      	ldr	r3, [pc, #360]	; (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006c42:	f107 040c 	add.w	r4, r7, #12
 8006c46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006c4c:	f240 2301 	movw	r3, #513	; 0x201
 8006c50:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
 8006c56:	2300      	movs	r3, #0
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	2300      	movs	r3, #0
 8006c64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b10      	cmp	r3, #16
 8006c6a:	d00a      	beq.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b10      	cmp	r3, #16
 8006c70:	f200 8091 	bhi.w	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d04c      	beq.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d07c      	beq.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006c80:	e089      	b.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8006c82:	4b4b      	ldr	r3, [pc, #300]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006c88:	4b49      	ldr	r3, [pc, #292]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 8082 	beq.w	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	0c9b      	lsrs	r3, r3, #18
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006ca8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d018      	beq.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006cb4:	4b3e      	ldr	r3, [pc, #248]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	0c5b      	lsrs	r3, r3, #17
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00d      	beq.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006cd4:	4a37      	ldr	r2, [pc, #220]	; (8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	fb02 f303 	mul.w	r3, r2, r3
 8006ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ce4:	e004      	b.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	4a33      	ldr	r2, [pc, #204]	; (8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006cea:	fb02 f303 	mul.w	r3, r2, r3
 8006cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006cf0:	4b2f      	ldr	r3, [pc, #188]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cfc:	d102      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d02:	e04a      	b.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	4a2c      	ldr	r2, [pc, #176]	; (8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	085b      	lsrs	r3, r3, #1
 8006d10:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d12:	e042      	b.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8006d14:	4b26      	ldr	r3, [pc, #152]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d24:	d108      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8006d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d36:	e01f      	b.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d42:	d109      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006d44:	4b1a      	ldr	r3, [pc, #104]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8006d50:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d56:	e00f      	b.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d62:	d11c      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006d64:	4b12      	ldr	r3, [pc, #72]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d016      	beq.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8006d70:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006d74:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d76:	e012      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006d78:	e011      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006d7a:	f7ff fe75 	bl	8006a68 <HAL_RCC_GetPCLK2Freq>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	0b9b      	lsrs	r3, r3, #14
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d92:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d94:	e004      	b.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006d96:	bf00      	nop
 8006d98:	e002      	b.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006d9a:	bf00      	nop
 8006d9c:	e000      	b.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006d9e:	bf00      	nop
    }
  }
  return (frequency);
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3734      	adds	r7, #52	; 0x34
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd90      	pop	{r4, r7, pc}
 8006daa:	bf00      	nop
 8006dac:	0800daac 	.word	0x0800daac
 8006db0:	40021000 	.word	0x40021000
 8006db4:	007a1200 	.word	0x007a1200
 8006db8:	003d0900 	.word	0x003d0900
 8006dbc:	aaaaaaab 	.word	0xaaaaaaab

08006dc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e076      	b.n	8006ec0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d108      	bne.n	8006dec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006de2:	d009      	beq.n	8006df8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	61da      	str	r2, [r3, #28]
 8006dea:	e005      	b.n	8006df8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fc fa9a 	bl	800334c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	431a      	orrs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e72:	431a      	orrs	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7c:	ea42 0103 	orr.w	r1, r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	0c1a      	lsrs	r2, r3, #16
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f002 0204 	and.w	r2, r2, #4
 8006e9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	69da      	ldr	r2, [r3, #28]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006eae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d101      	bne.n	8006eea <HAL_SPI_Transmit+0x22>
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	e126      	b.n	8007138 <HAL_SPI_Transmit+0x270>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ef2:	f7fc fc87 	bl	8003804 <HAL_GetTick>
 8006ef6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ef8:	88fb      	ldrh	r3, [r7, #6]
 8006efa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d002      	beq.n	8006f0e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f08:	2302      	movs	r3, #2
 8006f0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f0c:	e10b      	b.n	8007126 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <HAL_SPI_Transmit+0x52>
 8006f14:	88fb      	ldrh	r3, [r7, #6]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d102      	bne.n	8006f20 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f1e:	e102      	b.n	8007126 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2203      	movs	r2, #3
 8006f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	88fa      	ldrh	r2, [r7, #6]
 8006f38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	88fa      	ldrh	r2, [r7, #6]
 8006f3e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f66:	d10f      	bne.n	8006f88 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f92:	2b40      	cmp	r3, #64	; 0x40
 8006f94:	d007      	beq.n	8006fa6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fae:	d14b      	bne.n	8007048 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <HAL_SPI_Transmit+0xf6>
 8006fb8:	8afb      	ldrh	r3, [r7, #22]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d13e      	bne.n	800703c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc2:	881a      	ldrh	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fce:	1c9a      	adds	r2, r3, #2
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fe2:	e02b      	b.n	800703c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d112      	bne.n	8007018 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff6:	881a      	ldrh	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	1c9a      	adds	r2, r3, #2
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800700c:	b29b      	uxth	r3, r3
 800700e:	3b01      	subs	r3, #1
 8007010:	b29a      	uxth	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	86da      	strh	r2, [r3, #54]	; 0x36
 8007016:	e011      	b.n	800703c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007018:	f7fc fbf4 	bl	8003804 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d803      	bhi.n	8007030 <HAL_SPI_Transmit+0x168>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702e:	d102      	bne.n	8007036 <HAL_SPI_Transmit+0x16e>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	77fb      	strb	r3, [r7, #31]
          goto error;
 800703a:	e074      	b.n	8007126 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1ce      	bne.n	8006fe4 <HAL_SPI_Transmit+0x11c>
 8007046:	e04c      	b.n	80070e2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <HAL_SPI_Transmit+0x18e>
 8007050:	8afb      	ldrh	r3, [r7, #22]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d140      	bne.n	80070d8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	330c      	adds	r3, #12
 8007060:	7812      	ldrb	r2, [r2, #0]
 8007062:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800707c:	e02c      	b.n	80070d8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b02      	cmp	r3, #2
 800708a:	d113      	bne.n	80070b4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	330c      	adds	r3, #12
 8007096:	7812      	ldrb	r2, [r2, #0]
 8007098:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80070b2:	e011      	b.n	80070d8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070b4:	f7fc fba6 	bl	8003804 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d803      	bhi.n	80070cc <HAL_SPI_Transmit+0x204>
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ca:	d102      	bne.n	80070d2 <HAL_SPI_Transmit+0x20a>
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d102      	bne.n	80070d8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070d6:	e026      	b.n	8007126 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1cd      	bne.n	800707e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f000 f8b2 	bl	8007250 <SPI_EndRxTxTransaction>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d002      	beq.n	80070f8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2220      	movs	r2, #32
 80070f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007100:	2300      	movs	r3, #0
 8007102:	613b      	str	r3, [r7, #16]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	77fb      	strb	r3, [r7, #31]
 8007122:	e000      	b.n	8007126 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007124:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007136:	7ffb      	ldrb	r3, [r7, #31]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3720      	adds	r7, #32
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b088      	sub	sp, #32
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	4613      	mov	r3, r2
 800714e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007150:	f7fc fb58 	bl	8003804 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007158:	1a9b      	subs	r3, r3, r2
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	4413      	add	r3, r2
 800715e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007160:	f7fc fb50 	bl	8003804 <HAL_GetTick>
 8007164:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007166:	4b39      	ldr	r3, [pc, #228]	; (800724c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	015b      	lsls	r3, r3, #5
 800716c:	0d1b      	lsrs	r3, r3, #20
 800716e:	69fa      	ldr	r2, [r7, #28]
 8007170:	fb02 f303 	mul.w	r3, r2, r3
 8007174:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007176:	e054      	b.n	8007222 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717e:	d050      	beq.n	8007222 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007180:	f7fc fb40 	bl	8003804 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	69fa      	ldr	r2, [r7, #28]
 800718c:	429a      	cmp	r2, r3
 800718e:	d902      	bls.n	8007196 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d13d      	bne.n	8007212 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071ae:	d111      	bne.n	80071d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b8:	d004      	beq.n	80071c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c2:	d107      	bne.n	80071d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071dc:	d10f      	bne.n	80071fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e017      	b.n	8007242 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	3b01      	subs	r3, #1
 8007220:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4013      	ands	r3, r2
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	429a      	cmp	r2, r3
 8007230:	bf0c      	ite	eq
 8007232:	2301      	moveq	r3, #1
 8007234:	2300      	movne	r3, #0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	461a      	mov	r2, r3
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	429a      	cmp	r2, r3
 800723e:	d19b      	bne.n	8007178 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3720      	adds	r7, #32
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20000010 	.word	0x20000010

08007250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af02      	add	r7, sp, #8
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2200      	movs	r2, #0
 8007264:	2180      	movs	r1, #128	; 0x80
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f7ff ff6a 	bl	8007140 <SPI_WaitFlagStateUntilTimeout>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d007      	beq.n	8007282 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007276:	f043 0220 	orr.w	r2, r3, #32
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e000      	b.n	8007284 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e041      	b.n	8007322 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d106      	bne.n	80072b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7fc f888 	bl	80033c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	3304      	adds	r3, #4
 80072c8:	4619      	mov	r1, r3
 80072ca:	4610      	mov	r0, r2
 80072cc:	f000 fb38 	bl	8007940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d104      	bne.n	8007346 <HAL_TIM_IC_Start_IT+0x1a>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007342:	b2db      	uxtb	r3, r3
 8007344:	e013      	b.n	800736e <HAL_TIM_IC_Start_IT+0x42>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b04      	cmp	r3, #4
 800734a:	d104      	bne.n	8007356 <HAL_TIM_IC_Start_IT+0x2a>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007352:	b2db      	uxtb	r3, r3
 8007354:	e00b      	b.n	800736e <HAL_TIM_IC_Start_IT+0x42>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b08      	cmp	r3, #8
 800735a:	d104      	bne.n	8007366 <HAL_TIM_IC_Start_IT+0x3a>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007362:	b2db      	uxtb	r3, r3
 8007364:	e003      	b.n	800736e <HAL_TIM_IC_Start_IT+0x42>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800736c:	b2db      	uxtb	r3, r3
 800736e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d104      	bne.n	8007380 <HAL_TIM_IC_Start_IT+0x54>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800737c:	b2db      	uxtb	r3, r3
 800737e:	e013      	b.n	80073a8 <HAL_TIM_IC_Start_IT+0x7c>
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2b04      	cmp	r3, #4
 8007384:	d104      	bne.n	8007390 <HAL_TIM_IC_Start_IT+0x64>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800738c:	b2db      	uxtb	r3, r3
 800738e:	e00b      	b.n	80073a8 <HAL_TIM_IC_Start_IT+0x7c>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2b08      	cmp	r3, #8
 8007394:	d104      	bne.n	80073a0 <HAL_TIM_IC_Start_IT+0x74>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800739c:	b2db      	uxtb	r3, r3
 800739e:	e003      	b.n	80073a8 <HAL_TIM_IC_Start_IT+0x7c>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d102      	bne.n	80073b6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d001      	beq.n	80073ba <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e0b3      	b.n	8007522 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <HAL_TIM_IC_Start_IT+0x9e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2202      	movs	r2, #2
 80073c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073c8:	e013      	b.n	80073f2 <HAL_TIM_IC_Start_IT+0xc6>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d104      	bne.n	80073da <HAL_TIM_IC_Start_IT+0xae>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073d8:	e00b      	b.n	80073f2 <HAL_TIM_IC_Start_IT+0xc6>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d104      	bne.n	80073ea <HAL_TIM_IC_Start_IT+0xbe>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073e8:	e003      	b.n	80073f2 <HAL_TIM_IC_Start_IT+0xc6>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2202      	movs	r2, #2
 80073ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d104      	bne.n	8007402 <HAL_TIM_IC_Start_IT+0xd6>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007400:	e013      	b.n	800742a <HAL_TIM_IC_Start_IT+0xfe>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b04      	cmp	r3, #4
 8007406:	d104      	bne.n	8007412 <HAL_TIM_IC_Start_IT+0xe6>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007410:	e00b      	b.n	800742a <HAL_TIM_IC_Start_IT+0xfe>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b08      	cmp	r3, #8
 8007416:	d104      	bne.n	8007422 <HAL_TIM_IC_Start_IT+0xf6>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007420:	e003      	b.n	800742a <HAL_TIM_IC_Start_IT+0xfe>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2202      	movs	r2, #2
 8007426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b0c      	cmp	r3, #12
 800742e:	d841      	bhi.n	80074b4 <HAL_TIM_IC_Start_IT+0x188>
 8007430:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <HAL_TIM_IC_Start_IT+0x10c>)
 8007432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007436:	bf00      	nop
 8007438:	0800746d 	.word	0x0800746d
 800743c:	080074b5 	.word	0x080074b5
 8007440:	080074b5 	.word	0x080074b5
 8007444:	080074b5 	.word	0x080074b5
 8007448:	0800747f 	.word	0x0800747f
 800744c:	080074b5 	.word	0x080074b5
 8007450:	080074b5 	.word	0x080074b5
 8007454:	080074b5 	.word	0x080074b5
 8007458:	08007491 	.word	0x08007491
 800745c:	080074b5 	.word	0x080074b5
 8007460:	080074b5 	.word	0x080074b5
 8007464:	080074b5 	.word	0x080074b5
 8007468:	080074a3 	.word	0x080074a3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0202 	orr.w	r2, r2, #2
 800747a:	60da      	str	r2, [r3, #12]
      break;
 800747c:	e01b      	b.n	80074b6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f042 0204 	orr.w	r2, r2, #4
 800748c:	60da      	str	r2, [r3, #12]
      break;
 800748e:	e012      	b.n	80074b6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0208 	orr.w	r2, r2, #8
 800749e:	60da      	str	r2, [r3, #12]
      break;
 80074a0:	e009      	b.n	80074b6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68da      	ldr	r2, [r3, #12]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f042 0210 	orr.w	r2, r2, #16
 80074b0:	60da      	str	r2, [r3, #12]
      break;
 80074b2:	e000      	b.n	80074b6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80074b4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2201      	movs	r2, #1
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 fbad 	bl	8007c1e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a18      	ldr	r2, [pc, #96]	; (800752c <HAL_TIM_IC_Start_IT+0x200>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d00e      	beq.n	80074ec <HAL_TIM_IC_Start_IT+0x1c0>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d6:	d009      	beq.n	80074ec <HAL_TIM_IC_Start_IT+0x1c0>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a14      	ldr	r2, [pc, #80]	; (8007530 <HAL_TIM_IC_Start_IT+0x204>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d004      	beq.n	80074ec <HAL_TIM_IC_Start_IT+0x1c0>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a13      	ldr	r2, [pc, #76]	; (8007534 <HAL_TIM_IC_Start_IT+0x208>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d111      	bne.n	8007510 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b06      	cmp	r3, #6
 80074fc:	d010      	beq.n	8007520 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f042 0201 	orr.w	r2, r2, #1
 800750c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800750e:	e007      	b.n	8007520 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0201 	orr.w	r2, r2, #1
 800751e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	40012c00 	.word	0x40012c00
 8007530:	40000400 	.word	0x40000400
 8007534:	40000800 	.word	0x40000800

08007538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b02      	cmp	r3, #2
 800754c:	d122      	bne.n	8007594 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b02      	cmp	r3, #2
 800755a:	d11b      	bne.n	8007594 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f06f 0202 	mvn.w	r2, #2
 8007564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	f003 0303 	and.w	r3, r3, #3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7fb f842 	bl	8002604 <HAL_TIM_IC_CaptureCallback>
 8007580:	e005      	b.n	800758e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f9c1 	bl	800790a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f9c7 	bl	800791c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 0304 	and.w	r3, r3, #4
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d122      	bne.n	80075e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b04      	cmp	r3, #4
 80075ae:	d11b      	bne.n	80075e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f06f 0204 	mvn.w	r2, #4
 80075b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2202      	movs	r2, #2
 80075be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7fb f818 	bl	8002604 <HAL_TIM_IC_CaptureCallback>
 80075d4:	e005      	b.n	80075e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f997 	bl	800790a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f99d 	bl	800791c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0308 	and.w	r3, r3, #8
 80075f2:	2b08      	cmp	r3, #8
 80075f4:	d122      	bne.n	800763c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b08      	cmp	r3, #8
 8007602:	d11b      	bne.n	800763c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0208 	mvn.w	r2, #8
 800760c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2204      	movs	r2, #4
 8007612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7fa ffee 	bl	8002604 <HAL_TIM_IC_CaptureCallback>
 8007628:	e005      	b.n	8007636 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f96d 	bl	800790a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f973 	bl	800791c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f003 0310 	and.w	r3, r3, #16
 8007646:	2b10      	cmp	r3, #16
 8007648:	d122      	bne.n	8007690 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f003 0310 	and.w	r3, r3, #16
 8007654:	2b10      	cmp	r3, #16
 8007656:	d11b      	bne.n	8007690 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f06f 0210 	mvn.w	r2, #16
 8007660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2208      	movs	r2, #8
 8007666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7fa ffc4 	bl	8002604 <HAL_TIM_IC_CaptureCallback>
 800767c:	e005      	b.n	800768a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f943 	bl	800790a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f949 	bl	800791c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b01      	cmp	r3, #1
 800769c:	d10e      	bne.n	80076bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d107      	bne.n	80076bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f06f 0201 	mvn.w	r2, #1
 80076b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f91e 	bl	80078f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c6:	2b80      	cmp	r3, #128	; 0x80
 80076c8:	d10e      	bne.n	80076e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d4:	2b80      	cmp	r3, #128	; 0x80
 80076d6:	d107      	bne.n	80076e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fb27 	bl	8007d36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f2:	2b40      	cmp	r3, #64	; 0x40
 80076f4:	d10e      	bne.n	8007714 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007700:	2b40      	cmp	r3, #64	; 0x40
 8007702:	d107      	bne.n	8007714 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800770c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f90d 	bl	800792e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b20      	cmp	r3, #32
 8007720:	d10e      	bne.n	8007740 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b20      	cmp	r3, #32
 800772e:	d107      	bne.n	8007740 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f06f 0220 	mvn.w	r2, #32
 8007738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 faf2 	bl	8007d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007740:	bf00      	nop
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800775a:	2b01      	cmp	r3, #1
 800775c:	d101      	bne.n	8007762 <HAL_TIM_IC_ConfigChannel+0x1a>
 800775e:	2302      	movs	r3, #2
 8007760:	e082      	b.n	8007868 <HAL_TIM_IC_ConfigChannel+0x120>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d11b      	bne.n	80077a8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	6819      	ldr	r1, [r3, #0]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f000 f940 	bl	8007a04 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 020c 	bic.w	r2, r2, #12
 8007792:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6999      	ldr	r1, [r3, #24]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	689a      	ldr	r2, [r3, #8]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	619a      	str	r2, [r3, #24]
 80077a6:	e05a      	b.n	800785e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	d11c      	bne.n	80077e8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6818      	ldr	r0, [r3, #0]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	6819      	ldr	r1, [r3, #0]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f000 f97b 	bl	8007ab8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	699a      	ldr	r2, [r3, #24]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80077d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6999      	ldr	r1, [r3, #24]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	021a      	lsls	r2, r3, #8
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	619a      	str	r2, [r3, #24]
 80077e6:	e03a      	b.n	800785e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b08      	cmp	r3, #8
 80077ec:	d11b      	bne.n	8007826 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6819      	ldr	r1, [r3, #0]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	685a      	ldr	r2, [r3, #4]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	f000 f997 	bl	8007b30 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69da      	ldr	r2, [r3, #28]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 020c 	bic.w	r2, r2, #12
 8007810:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69d9      	ldr	r1, [r3, #28]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	61da      	str	r2, [r3, #28]
 8007824:	e01b      	b.n	800785e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	6819      	ldr	r1, [r3, #0]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f000 f9b6 	bl	8007ba6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69da      	ldr	r2, [r3, #28]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007848:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69d9      	ldr	r1, [r3, #28]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	021a      	lsls	r2, r3, #8
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b0c      	cmp	r3, #12
 8007882:	d831      	bhi.n	80078e8 <HAL_TIM_ReadCapturedValue+0x78>
 8007884:	a201      	add	r2, pc, #4	; (adr r2, 800788c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788a:	bf00      	nop
 800788c:	080078c1 	.word	0x080078c1
 8007890:	080078e9 	.word	0x080078e9
 8007894:	080078e9 	.word	0x080078e9
 8007898:	080078e9 	.word	0x080078e9
 800789c:	080078cb 	.word	0x080078cb
 80078a0:	080078e9 	.word	0x080078e9
 80078a4:	080078e9 	.word	0x080078e9
 80078a8:	080078e9 	.word	0x080078e9
 80078ac:	080078d5 	.word	0x080078d5
 80078b0:	080078e9 	.word	0x080078e9
 80078b4:	080078e9 	.word	0x080078e9
 80078b8:	080078e9 	.word	0x080078e9
 80078bc:	080078df 	.word	0x080078df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c6:	60fb      	str	r3, [r7, #12]

      break;
 80078c8:	e00f      	b.n	80078ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d0:	60fb      	str	r3, [r7, #12]

      break;
 80078d2:	e00a      	b.n	80078ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078da:	60fb      	str	r3, [r7, #12]

      break;
 80078dc:	e005      	b.n	80078ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e4:	60fb      	str	r3, [r7, #12]

      break;
 80078e6:	e000      	b.n	80078ea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80078e8:	bf00      	nop
  }

  return tmpreg;
 80078ea:	68fb      	ldr	r3, [r7, #12]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bc80      	pop	{r7}
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop

080078f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	bc80      	pop	{r7}
 8007908:	4770      	bx	lr

0800790a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800790a:	b480      	push	{r7}
 800790c:	b083      	sub	sp, #12
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007912:	bf00      	nop
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	bc80      	pop	{r7}
 800791a:	4770      	bx	lr

0800791c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	bc80      	pop	{r7}
 800792c:	4770      	bx	lr

0800792e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	bc80      	pop	{r7}
 800793e:	4770      	bx	lr

08007940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a29      	ldr	r2, [pc, #164]	; (80079f8 <TIM_Base_SetConfig+0xb8>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00b      	beq.n	8007970 <TIM_Base_SetConfig+0x30>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795e:	d007      	beq.n	8007970 <TIM_Base_SetConfig+0x30>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a26      	ldr	r2, [pc, #152]	; (80079fc <TIM_Base_SetConfig+0xbc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d003      	beq.n	8007970 <TIM_Base_SetConfig+0x30>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a25      	ldr	r2, [pc, #148]	; (8007a00 <TIM_Base_SetConfig+0xc0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d108      	bne.n	8007982 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	4313      	orrs	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a1c      	ldr	r2, [pc, #112]	; (80079f8 <TIM_Base_SetConfig+0xb8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00b      	beq.n	80079a2 <TIM_Base_SetConfig+0x62>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007990:	d007      	beq.n	80079a2 <TIM_Base_SetConfig+0x62>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a19      	ldr	r2, [pc, #100]	; (80079fc <TIM_Base_SetConfig+0xbc>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d003      	beq.n	80079a2 <TIM_Base_SetConfig+0x62>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a18      	ldr	r2, [pc, #96]	; (8007a00 <TIM_Base_SetConfig+0xc0>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d108      	bne.n	80079b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a07      	ldr	r2, [pc, #28]	; (80079f8 <TIM_Base_SetConfig+0xb8>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d103      	bne.n	80079e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	691a      	ldr	r2, [r3, #16]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	615a      	str	r2, [r3, #20]
}
 80079ee:	bf00      	nop
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bc80      	pop	{r7}
 80079f6:	4770      	bx	lr
 80079f8:	40012c00 	.word	0x40012c00
 80079fc:	40000400 	.word	0x40000400
 8007a00:	40000800 	.word	0x40000800

08007a04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	f023 0201 	bic.w	r2, r3, #1
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	4a1f      	ldr	r2, [pc, #124]	; (8007aac <TIM_TI1_SetConfig+0xa8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00b      	beq.n	8007a4a <TIM_TI1_SetConfig+0x46>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a38:	d007      	beq.n	8007a4a <TIM_TI1_SetConfig+0x46>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	4a1c      	ldr	r2, [pc, #112]	; (8007ab0 <TIM_TI1_SetConfig+0xac>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d003      	beq.n	8007a4a <TIM_TI1_SetConfig+0x46>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4a1b      	ldr	r2, [pc, #108]	; (8007ab4 <TIM_TI1_SetConfig+0xb0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d101      	bne.n	8007a4e <TIM_TI1_SetConfig+0x4a>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e000      	b.n	8007a50 <TIM_TI1_SetConfig+0x4c>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d008      	beq.n	8007a66 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f023 0303 	bic.w	r3, r3, #3
 8007a5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	e003      	b.n	8007a6e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f043 0301 	orr.w	r3, r3, #1
 8007a6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f023 030a 	bic.w	r3, r3, #10
 8007a88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f003 030a 	and.w	r3, r3, #10
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	621a      	str	r2, [r3, #32]
}
 8007aa2:	bf00      	nop
 8007aa4:	371c      	adds	r7, #28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bc80      	pop	{r7}
 8007aaa:	4770      	bx	lr
 8007aac:	40012c00 	.word	0x40012c00
 8007ab0:	40000400 	.word	0x40000400
 8007ab4:	40000800 	.word	0x40000800

08007ab8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	f023 0210 	bic.w	r2, r3, #16
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007af6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	031b      	lsls	r3, r3, #12
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	621a      	str	r2, [r3, #32]
}
 8007b26:	bf00      	nop
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bc80      	pop	{r7}
 8007b2e:	4770      	bx	lr

08007b30 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f023 0303 	bic.w	r3, r3, #3
 8007b5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	621a      	str	r2, [r3, #32]
}
 8007b9c:	bf00      	nop
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bc80      	pop	{r7}
 8007ba4:	4770      	bx	lr

08007ba6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b087      	sub	sp, #28
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	60f8      	str	r0, [r7, #12]
 8007bae:	60b9      	str	r1, [r7, #8]
 8007bb0:	607a      	str	r2, [r7, #4]
 8007bb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007be4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	031b      	lsls	r3, r3, #12
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bf8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	031b      	lsls	r3, r3, #12
 8007bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	621a      	str	r2, [r3, #32]
}
 8007c14:	bf00      	nop
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bc80      	pop	{r7}
 8007c1c:	4770      	bx	lr

08007c1e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b087      	sub	sp, #28
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f003 031f 	and.w	r3, r3, #31
 8007c30:	2201      	movs	r2, #1
 8007c32:	fa02 f303 	lsl.w	r3, r2, r3
 8007c36:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a1a      	ldr	r2, [r3, #32]
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	43db      	mvns	r3, r3
 8007c40:	401a      	ands	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6a1a      	ldr	r2, [r3, #32]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f003 031f 	and.w	r3, r3, #31
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	fa01 f303 	lsl.w	r3, r1, r3
 8007c56:	431a      	orrs	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	621a      	str	r2, [r3, #32]
}
 8007c5c:	bf00      	nop
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bc80      	pop	{r7}
 8007c64:	4770      	bx	lr
	...

08007c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e046      	b.n	8007d0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a16      	ldr	r2, [pc, #88]	; (8007d18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d00e      	beq.n	8007ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ccc:	d009      	beq.n	8007ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a12      	ldr	r2, [pc, #72]	; (8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d004      	beq.n	8007ce2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a10      	ldr	r2, [pc, #64]	; (8007d20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d10c      	bne.n	8007cfc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ce8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bc80      	pop	{r7}
 8007d16:	4770      	bx	lr
 8007d18:	40012c00 	.word	0x40012c00
 8007d1c:	40000400 	.word	0x40000400
 8007d20:	40000800 	.word	0x40000800

08007d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr

08007d36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bc80      	pop	{r7}
 8007d46:	4770      	bx	lr

08007d48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d48:	b084      	sub	sp, #16
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	f107 0014 	add.w	r0, r7, #20
 8007d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bc80      	pop	{r7}
 8007d64:	b004      	add	sp, #16
 8007d66:	4770      	bx	lr

08007d68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d78:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007d7c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bc80      	pop	{r7}
 8007d92:	4770      	bx	lr

08007d94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d9c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007da0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	43db      	mvns	r3, r3
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	4013      	ands	r3, r2
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bc80      	pop	{r7}
 8007dc6:	4770      	bx	lr

08007dc8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bc80      	pop	{r7}
 8007dde:	4770      	bx	lr

08007de0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007de0:	b084      	sub	sp, #16
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	f107 0014 	add.w	r0, r7, #20
 8007dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bc80      	pop	{r7}
 8007e1c:	b004      	add	sp, #16
 8007e1e:	4770      	bx	lr

08007e20 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b09b      	sub	sp, #108	; 0x6c
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e46:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	78db      	ldrb	r3, [r3, #3]
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d81f      	bhi.n	8007e92 <USB_ActivateEndpoint+0x72>
 8007e52:	a201      	add	r2, pc, #4	; (adr r2, 8007e58 <USB_ActivateEndpoint+0x38>)
 8007e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e58:	08007e69 	.word	0x08007e69
 8007e5c:	08007e85 	.word	0x08007e85
 8007e60:	08007e9b 	.word	0x08007e9b
 8007e64:	08007e77 	.word	0x08007e77
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007e68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e70:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007e74:	e012      	b.n	8007e9c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007e76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e7a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007e7e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007e82:	e00b      	b.n	8007e9c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007e84:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e8c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007e90:	e004      	b.n	8007e9c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007e98:	e000      	b.n	8007e9c <USB_ActivateEndpoint+0x7c>
      break;
 8007e9a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	441a      	add	r2, r3
 8007ea6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	4313      	orrs	r3, r2
 8007ede:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	441a      	add	r2, r3
 8007eec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	7b1b      	ldrb	r3, [r3, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f040 8149 	bne.w	80081a0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	785b      	ldrb	r3, [r3, #1]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 8084 	beq.w	8008020 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	4413      	add	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	011a      	lsls	r2, r3, #4
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f3a:	613b      	str	r3, [r7, #16]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	88db      	ldrh	r3, [r3, #6]
 8007f40:	085b      	lsrs	r3, r3, #1
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	81fb      	strh	r3, [r7, #14]
 8007f5a:	89fb      	ldrh	r3, [r7, #14]
 8007f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d01b      	beq.n	8007f9c <USB_ActivateEndpoint+0x17c>
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7a:	81bb      	strh	r3, [r7, #12]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	441a      	add	r2, r3
 8007f86:	89bb      	ldrh	r3, [r7, #12]
 8007f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	78db      	ldrb	r3, [r3, #3]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d020      	beq.n	8007fe6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fba:	813b      	strh	r3, [r7, #8]
 8007fbc:	893b      	ldrh	r3, [r7, #8]
 8007fbe:	f083 0320 	eor.w	r3, r3, #32
 8007fc2:	813b      	strh	r3, [r7, #8]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	441a      	add	r2, r3
 8007fce:	893b      	ldrh	r3, [r7, #8]
 8007fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	8013      	strh	r3, [r2, #0]
 8007fe4:	e27f      	b.n	80084e6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ffc:	817b      	strh	r3, [r7, #10]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	441a      	add	r2, r3
 8008008:	897b      	ldrh	r3, [r7, #10]
 800800a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800800e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800801a:	b29b      	uxth	r3, r3
 800801c:	8013      	strh	r3, [r2, #0]
 800801e:	e262      	b.n	80084e6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800802a:	b29b      	uxth	r3, r3
 800802c:	461a      	mov	r2, r3
 800802e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008030:	4413      	add	r3, r2
 8008032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	011a      	lsls	r2, r3, #4
 800803a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803c:	4413      	add	r3, r2
 800803e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008042:	62bb      	str	r3, [r7, #40]	; 0x28
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	88db      	ldrh	r3, [r3, #6]
 8008048:	085b      	lsrs	r3, r3, #1
 800804a:	b29b      	uxth	r3, r3
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	b29a      	uxth	r2, r3
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800805e:	b29b      	uxth	r3, r3
 8008060:	461a      	mov	r2, r3
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	4413      	add	r3, r2
 8008066:	627b      	str	r3, [r7, #36]	; 0x24
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	011a      	lsls	r2, r3, #4
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	4413      	add	r3, r2
 8008072:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008076:	623b      	str	r3, [r7, #32]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d112      	bne.n	80080a6 <USB_ActivateEndpoint+0x286>
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800808a:	b29a      	uxth	r2, r3
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	801a      	strh	r2, [r3, #0]
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	b29b      	uxth	r3, r3
 8008096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800809a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800809e:	b29a      	uxth	r2, r3
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	801a      	strh	r2, [r3, #0]
 80080a4:	e02f      	b.n	8008106 <USB_ActivateEndpoint+0x2e6>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	2b3e      	cmp	r3, #62	; 0x3e
 80080ac:	d813      	bhi.n	80080d6 <USB_ActivateEndpoint+0x2b6>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	085b      	lsrs	r3, r3, #1
 80080b4:	663b      	str	r3, [r7, #96]	; 0x60
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d002      	beq.n	80080c8 <USB_ActivateEndpoint+0x2a8>
 80080c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080c4:	3301      	adds	r3, #1
 80080c6:	663b      	str	r3, [r7, #96]	; 0x60
 80080c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	029b      	lsls	r3, r3, #10
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	801a      	strh	r2, [r3, #0]
 80080d4:	e017      	b.n	8008106 <USB_ActivateEndpoint+0x2e6>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	095b      	lsrs	r3, r3, #5
 80080dc:	663b      	str	r3, [r7, #96]	; 0x60
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	f003 031f 	and.w	r3, r3, #31
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <USB_ActivateEndpoint+0x2d0>
 80080ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080ec:	3b01      	subs	r3, #1
 80080ee:	663b      	str	r3, [r7, #96]	; 0x60
 80080f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	029b      	lsls	r3, r3, #10
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008100:	b29a      	uxth	r2, r3
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	83fb      	strh	r3, [r7, #30]
 8008114:	8bfb      	ldrh	r3, [r7, #30]
 8008116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d01b      	beq.n	8008156 <USB_ActivateEndpoint+0x336>
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008134:	83bb      	strh	r3, [r7, #28]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	441a      	add	r2, r3
 8008140:	8bbb      	ldrh	r3, [r7, #28]
 8008142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800814a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800814e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008152:	b29b      	uxth	r3, r3
 8008154:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	b29b      	uxth	r3, r3
 8008164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816c:	837b      	strh	r3, [r7, #26]
 800816e:	8b7b      	ldrh	r3, [r7, #26]
 8008170:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008174:	837b      	strh	r3, [r7, #26]
 8008176:	8b7b      	ldrh	r3, [r7, #26]
 8008178:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800817c:	837b      	strh	r3, [r7, #26]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	441a      	add	r2, r3
 8008188:	8b7b      	ldrh	r3, [r7, #26]
 800818a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800818e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800819a:	b29b      	uxth	r3, r3
 800819c:	8013      	strh	r3, [r2, #0]
 800819e:	e1a2      	b.n	80084e6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	441a      	add	r2, r3
 80081c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80081c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80081d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d8:	b29b      	uxth	r3, r3
 80081da:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	65bb      	str	r3, [r7, #88]	; 0x58
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	461a      	mov	r2, r3
 80081ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081ec:	4413      	add	r3, r2
 80081ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	011a      	lsls	r2, r3, #4
 80081f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081fe:	657b      	str	r3, [r7, #84]	; 0x54
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	891b      	ldrh	r3, [r3, #8]
 8008204:	085b      	lsrs	r3, r3, #1
 8008206:	b29b      	uxth	r3, r3
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	b29a      	uxth	r2, r3
 800820c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800820e:	801a      	strh	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	653b      	str	r3, [r7, #80]	; 0x50
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800821a:	b29b      	uxth	r3, r3
 800821c:	461a      	mov	r2, r3
 800821e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008220:	4413      	add	r3, r2
 8008222:	653b      	str	r3, [r7, #80]	; 0x50
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	011a      	lsls	r2, r3, #4
 800822a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800822c:	4413      	add	r3, r2
 800822e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	895b      	ldrh	r3, [r3, #10]
 8008238:	085b      	lsrs	r3, r3, #1
 800823a:	b29b      	uxth	r3, r3
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	b29a      	uxth	r2, r3
 8008240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008242:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	785b      	ldrb	r3, [r3, #1]
 8008248:	2b00      	cmp	r3, #0
 800824a:	f040 8091 	bne.w	8008370 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	881b      	ldrh	r3, [r3, #0]
 800825a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800825c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800825e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d01b      	beq.n	800829e <USB_ActivateEndpoint+0x47e>
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29b      	uxth	r3, r3
 8008274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	441a      	add	r2, r3
 8008288:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800828a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800828e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008292:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829a:	b29b      	uxth	r3, r3
 800829c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	873b      	strh	r3, [r7, #56]	; 0x38
 80082ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80082ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d01b      	beq.n	80082ee <USB_ActivateEndpoint+0x4ce>
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082cc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	441a      	add	r2, r3
 80082d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80082da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008304:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008306:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008308:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800830c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800830e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008310:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008314:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	441a      	add	r2, r3
 8008320:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800832a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800832e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008332:	b29b      	uxth	r3, r3
 8008334:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800834c:	867b      	strh	r3, [r7, #50]	; 0x32
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	441a      	add	r2, r3
 8008358:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800835a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800835e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836a:	b29b      	uxth	r3, r3
 800836c:	8013      	strh	r3, [r2, #0]
 800836e:	e0ba      	b.n	80084e6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008380:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01d      	beq.n	80083c8 <USB_ActivateEndpoint+0x5a8>
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	b29b      	uxth	r3, r3
 800839a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800839e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	441a      	add	r2, r3
 80083b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80083b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80083d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80083dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d01d      	beq.n	8008420 <USB_ActivateEndpoint+0x600>
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	441a      	add	r2, r3
 8008408:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800840c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008418:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800841c:	b29b      	uxth	r3, r3
 800841e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	78db      	ldrb	r3, [r3, #3]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d024      	beq.n	8008472 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	b29b      	uxth	r3, r3
 8008436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800843a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800843e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008442:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008446:	f083 0320 	eor.w	r3, r3, #32
 800844a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	441a      	add	r2, r3
 8008458:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800845c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800846c:	b29b      	uxth	r3, r3
 800846e:	8013      	strh	r3, [r2, #0]
 8008470:	e01d      	b.n	80084ae <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008488:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	441a      	add	r2, r3
 8008496:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800849a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800849e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	441a      	add	r2, r3
 80084d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80084d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80084e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	376c      	adds	r7, #108	; 0x6c
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bc80      	pop	{r7}
 80084f2:	4770      	bx	lr

080084f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b08d      	sub	sp, #52	; 0x34
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	7b1b      	ldrb	r3, [r3, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	f040 808e 	bne.w	8008624 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d044      	beq.n	800859a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	81bb      	strh	r3, [r7, #12]
 800851e:	89bb      	ldrh	r3, [r7, #12]
 8008520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01b      	beq.n	8008560 <USB_DeactivateEndpoint+0x6c>
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29b      	uxth	r3, r3
 8008536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800853a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853e:	817b      	strh	r3, [r7, #10]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	441a      	add	r2, r3
 800854a:	897b      	ldrh	r3, [r7, #10]
 800854c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008558:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800855c:	b29b      	uxth	r3, r3
 800855e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	b29b      	uxth	r3, r3
 800856e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008576:	813b      	strh	r3, [r7, #8]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	441a      	add	r2, r3
 8008582:	893b      	ldrh	r3, [r7, #8]
 8008584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800858c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008594:	b29b      	uxth	r3, r3
 8008596:	8013      	strh	r3, [r2, #0]
 8008598:	e192      	b.n	80088c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	827b      	strh	r3, [r7, #18]
 80085a8:	8a7b      	ldrh	r3, [r7, #18]
 80085aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d01b      	beq.n	80085ea <USB_DeactivateEndpoint+0xf6>
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c8:	823b      	strh	r3, [r7, #16]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	441a      	add	r2, r3
 80085d4:	8a3b      	ldrh	r3, [r7, #16]
 80085d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008600:	81fb      	strh	r3, [r7, #14]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	441a      	add	r2, r3
 800860c:	89fb      	ldrh	r3, [r7, #14]
 800860e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800861a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861e:	b29b      	uxth	r3, r3
 8008620:	8013      	strh	r3, [r2, #0]
 8008622:	e14d      	b.n	80088c0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	785b      	ldrb	r3, [r3, #1]
 8008628:	2b00      	cmp	r3, #0
 800862a:	f040 80a5 	bne.w	8008778 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	843b      	strh	r3, [r7, #32]
 800863c:	8c3b      	ldrh	r3, [r7, #32]
 800863e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d01b      	beq.n	800867e <USB_DeactivateEndpoint+0x18a>
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	b29b      	uxth	r3, r3
 8008654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865c:	83fb      	strh	r3, [r7, #30]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	441a      	add	r2, r3
 8008668:	8bfb      	ldrh	r3, [r7, #30]
 800866a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800866e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800867a:	b29b      	uxth	r3, r3
 800867c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	83bb      	strh	r3, [r7, #28]
 800868c:	8bbb      	ldrh	r3, [r7, #28]
 800868e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008692:	2b00      	cmp	r3, #0
 8008694:	d01b      	beq.n	80086ce <USB_DeactivateEndpoint+0x1da>
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ac:	837b      	strh	r3, [r7, #26]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	441a      	add	r2, r3
 80086b8:	8b7b      	ldrh	r3, [r7, #26]
 80086ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e4:	833b      	strh	r3, [r7, #24]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	441a      	add	r2, r3
 80086f0:	8b3b      	ldrh	r3, [r7, #24]
 80086f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008702:	b29b      	uxth	r3, r3
 8008704:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	b29b      	uxth	r3, r3
 8008714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800871c:	82fb      	strh	r3, [r7, #22]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	441a      	add	r2, r3
 8008728:	8afb      	ldrh	r3, [r7, #22]
 800872a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800872e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800873a:	b29b      	uxth	r3, r3
 800873c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	b29b      	uxth	r3, r3
 800874c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008754:	82bb      	strh	r3, [r7, #20]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	441a      	add	r2, r3
 8008760:	8abb      	ldrh	r3, [r7, #20]
 8008762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800876a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800876e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008772:	b29b      	uxth	r3, r3
 8008774:	8013      	strh	r3, [r2, #0]
 8008776:	e0a3      	b.n	80088c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008786:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d01b      	beq.n	80087c8 <USB_DeactivateEndpoint+0x2d4>
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	b29b      	uxth	r3, r3
 800879e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	441a      	add	r2, r3
 80087b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80087b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80087d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80087d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d01b      	beq.n	8008818 <USB_DeactivateEndpoint+0x324>
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f6:	853b      	strh	r3, [r7, #40]	; 0x28
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	441a      	add	r2, r3
 8008802:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800880c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008814:	b29b      	uxth	r3, r3
 8008816:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	b29b      	uxth	r3, r3
 8008826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800882a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	441a      	add	r2, r3
 800883a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800883c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884c:	b29b      	uxth	r3, r3
 800884e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	b29b      	uxth	r3, r3
 800885e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008866:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	441a      	add	r2, r3
 8008872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800887c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008884:	b29b      	uxth	r3, r3
 8008886:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	b29b      	uxth	r3, r3
 8008896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800889a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800889e:	847b      	strh	r3, [r7, #34]	; 0x22
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	441a      	add	r2, r3
 80088aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80088ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088bc:	b29b      	uxth	r3, r3
 80088be:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3734      	adds	r7, #52	; 0x34
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bc80      	pop	{r7}
 80088ca:	4770      	bx	lr

080088cc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b0c4      	sub	sp, #272	; 0x110
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	1d3b      	adds	r3, r7, #4
 80088d4:	6018      	str	r0, [r3, #0]
 80088d6:	463b      	mov	r3, r7
 80088d8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088da:	463b      	mov	r3, r7
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	785b      	ldrb	r3, [r3, #1]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	f040 8557 	bne.w	8009394 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80088e6:	463b      	mov	r3, r7
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	699a      	ldr	r2, [r3, #24]
 80088ec:	463b      	mov	r3, r7
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d905      	bls.n	8008902 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80088f6:	463b      	mov	r3, r7
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008900:	e004      	b.n	800890c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008902:	463b      	mov	r3, r7
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800890c:	463b      	mov	r3, r7
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	7b1b      	ldrb	r3, [r3, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d12c      	bne.n	8008970 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008916:	463b      	mov	r3, r7
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6959      	ldr	r1, [r3, #20]
 800891c:	463b      	mov	r3, r7
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	88da      	ldrh	r2, [r3, #6]
 8008922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008926:	b29b      	uxth	r3, r3
 8008928:	1d38      	adds	r0, r7, #4
 800892a:	6800      	ldr	r0, [r0, #0]
 800892c:	f001 fa2c 	bl	8009d88 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008930:	1d3b      	adds	r3, r7, #4
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	617b      	str	r3, [r7, #20]
 8008936:	1d3b      	adds	r3, r7, #4
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800893e:	b29b      	uxth	r3, r3
 8008940:	461a      	mov	r2, r3
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	4413      	add	r3, r2
 8008946:	617b      	str	r3, [r7, #20]
 8008948:	463b      	mov	r3, r7
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	011a      	lsls	r2, r3, #4
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	4413      	add	r3, r2
 8008954:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008958:	f107 0310 	add.w	r3, r7, #16
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008962:	b29a      	uxth	r2, r3
 8008964:	f107 0310 	add.w	r3, r7, #16
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	801a      	strh	r2, [r3, #0]
 800896c:	f000 bcdd 	b.w	800932a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008970:	463b      	mov	r3, r7
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	78db      	ldrb	r3, [r3, #3]
 8008976:	2b02      	cmp	r3, #2
 8008978:	f040 8347 	bne.w	800900a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800897c:	463b      	mov	r3, r7
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6a1a      	ldr	r2, [r3, #32]
 8008982:	463b      	mov	r3, r7
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	429a      	cmp	r2, r3
 800898a:	f240 82eb 	bls.w	8008f64 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800898e:	1d3b      	adds	r3, r7, #4
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	463b      	mov	r3, r7
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80089ac:	1d3b      	adds	r3, r7, #4
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	463b      	mov	r3, r7
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	441a      	add	r2, r3
 80089ba:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80089be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089c6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80089ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80089d2:	463b      	mov	r3, r7
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6a1a      	ldr	r2, [r3, #32]
 80089d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089dc:	1ad2      	subs	r2, r2, r3
 80089de:	463b      	mov	r3, r7
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80089e4:	1d3b      	adds	r3, r7, #4
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	463b      	mov	r3, r7
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 8159 	beq.w	8008cb2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a00:	1d3b      	adds	r3, r7, #4
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	637b      	str	r3, [r7, #52]	; 0x34
 8008a06:	463b      	mov	r3, r7
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	785b      	ldrb	r3, [r3, #1]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d164      	bne.n	8008ada <USB_EPStartXfer+0x20e>
 8008a10:	1d3b      	adds	r3, r7, #4
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a16:	1d3b      	adds	r3, r7, #4
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	461a      	mov	r2, r3
 8008a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a24:	4413      	add	r3, r2
 8008a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a28:	463b      	mov	r3, r7
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	011a      	lsls	r2, r3, #4
 8008a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a32:	4413      	add	r3, r2
 8008a34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d112      	bne.n	8008a68 <USB_EPStartXfer+0x19c>
 8008a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	801a      	strh	r2, [r3, #0]
 8008a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a64:	801a      	strh	r2, [r3, #0]
 8008a66:	e054      	b.n	8008b12 <USB_EPStartXfer+0x246>
 8008a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a6c:	2b3e      	cmp	r3, #62	; 0x3e
 8008a6e:	d817      	bhi.n	8008aa0 <USB_EPStartXfer+0x1d4>
 8008a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a74:	085b      	lsrs	r3, r3, #1
 8008a76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d004      	beq.n	8008a90 <USB_EPStartXfer+0x1c4>
 8008a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	029b      	lsls	r3, r3, #10
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9c:	801a      	strh	r2, [r3, #0]
 8008a9e:	e038      	b.n	8008b12 <USB_EPStartXfer+0x246>
 8008aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008aa4:	095b      	lsrs	r3, r3, #5
 8008aa6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008aae:	f003 031f 	and.w	r3, r3, #31
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d104      	bne.n	8008ac0 <USB_EPStartXfer+0x1f4>
 8008ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aba:	3b01      	subs	r3, #1
 8008abc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	029b      	lsls	r3, r3, #10
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	801a      	strh	r2, [r3, #0]
 8008ad8:	e01b      	b.n	8008b12 <USB_EPStartXfer+0x246>
 8008ada:	463b      	mov	r3, r7
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	785b      	ldrb	r3, [r3, #1]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d116      	bne.n	8008b12 <USB_EPStartXfer+0x246>
 8008ae4:	1d3b      	adds	r3, r7, #4
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	461a      	mov	r2, r3
 8008af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af2:	4413      	add	r3, r2
 8008af4:	637b      	str	r3, [r7, #52]	; 0x34
 8008af6:	463b      	mov	r3, r7
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	011a      	lsls	r2, r3, #4
 8008afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b00:	4413      	add	r3, r2
 8008b02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b06:	633b      	str	r3, [r7, #48]	; 0x30
 8008b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b12:	463b      	mov	r3, r7
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	895b      	ldrh	r3, [r3, #10]
 8008b18:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b1c:	463b      	mov	r3, r7
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6959      	ldr	r1, [r3, #20]
 8008b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008b2c:	1d38      	adds	r0, r7, #4
 8008b2e:	6800      	ldr	r0, [r0, #0]
 8008b30:	f001 f92a 	bl	8009d88 <USB_WritePMA>
            ep->xfer_buff += len;
 8008b34:	463b      	mov	r3, r7
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	695a      	ldr	r2, [r3, #20]
 8008b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b3e:	441a      	add	r2, r3
 8008b40:	463b      	mov	r3, r7
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008b46:	463b      	mov	r3, r7
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6a1a      	ldr	r2, [r3, #32]
 8008b4c:	463b      	mov	r3, r7
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d909      	bls.n	8008b6a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8008b56:	463b      	mov	r3, r7
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6a1a      	ldr	r2, [r3, #32]
 8008b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b60:	1ad2      	subs	r2, r2, r3
 8008b62:	463b      	mov	r3, r7
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	621a      	str	r2, [r3, #32]
 8008b68:	e008      	b.n	8008b7c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8008b6a:	463b      	mov	r3, r7
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
 8008b70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8008b74:	463b      	mov	r3, r7
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b7c:	463b      	mov	r3, r7
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	785b      	ldrb	r3, [r3, #1]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d164      	bne.n	8008c50 <USB_EPStartXfer+0x384>
 8008b86:	1d3b      	adds	r3, r7, #4
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	61fb      	str	r3, [r7, #28]
 8008b8c:	1d3b      	adds	r3, r7, #4
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	461a      	mov	r2, r3
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	61fb      	str	r3, [r7, #28]
 8008b9e:	463b      	mov	r3, r7
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	011a      	lsls	r2, r3, #4
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bae:	61bb      	str	r3, [r7, #24]
 8008bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d112      	bne.n	8008bde <USB_EPStartXfer+0x312>
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	801a      	strh	r2, [r3, #0]
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	801a      	strh	r2, [r3, #0]
 8008bdc:	e057      	b.n	8008c8e <USB_EPStartXfer+0x3c2>
 8008bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008be2:	2b3e      	cmp	r3, #62	; 0x3e
 8008be4:	d817      	bhi.n	8008c16 <USB_EPStartXfer+0x34a>
 8008be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bea:	085b      	lsrs	r3, r3, #1
 8008bec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d004      	beq.n	8008c06 <USB_EPStartXfer+0x33a>
 8008bfc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c00:	3301      	adds	r3, #1
 8008c02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	029b      	lsls	r3, r3, #10
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	801a      	strh	r2, [r3, #0]
 8008c14:	e03b      	b.n	8008c8e <USB_EPStartXfer+0x3c2>
 8008c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c1a:	095b      	lsrs	r3, r3, #5
 8008c1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c24:	f003 031f 	and.w	r3, r3, #31
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d104      	bne.n	8008c36 <USB_EPStartXfer+0x36a>
 8008c2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c30:	3b01      	subs	r3, #1
 8008c32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	029b      	lsls	r3, r3, #10
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	801a      	strh	r2, [r3, #0]
 8008c4e:	e01e      	b.n	8008c8e <USB_EPStartXfer+0x3c2>
 8008c50:	463b      	mov	r3, r7
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	785b      	ldrb	r3, [r3, #1]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d119      	bne.n	8008c8e <USB_EPStartXfer+0x3c2>
 8008c5a:	1d3b      	adds	r3, r7, #4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c60:	1d3b      	adds	r3, r7, #4
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	4413      	add	r3, r2
 8008c70:	627b      	str	r3, [r7, #36]	; 0x24
 8008c72:	463b      	mov	r3, r7
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	011a      	lsls	r2, r3, #4
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c82:	623b      	str	r3, [r7, #32]
 8008c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008c8e:	463b      	mov	r3, r7
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	891b      	ldrh	r3, [r3, #8]
 8008c94:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c98:	463b      	mov	r3, r7
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6959      	ldr	r1, [r3, #20]
 8008c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008ca8:	1d38      	adds	r0, r7, #4
 8008caa:	6800      	ldr	r0, [r0, #0]
 8008cac:	f001 f86c 	bl	8009d88 <USB_WritePMA>
 8008cb0:	e33b      	b.n	800932a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008cb2:	463b      	mov	r3, r7
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	785b      	ldrb	r3, [r3, #1]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d164      	bne.n	8008d86 <USB_EPStartXfer+0x4ba>
 8008cbc:	1d3b      	adds	r3, r7, #4
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cc2:	1d3b      	adds	r3, r7, #4
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	461a      	mov	r2, r3
 8008cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cd0:	4413      	add	r3, r2
 8008cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cd4:	463b      	mov	r3, r7
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	011a      	lsls	r2, r3, #4
 8008cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cde:	4413      	add	r3, r2
 8008ce0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d112      	bne.n	8008d14 <USB_EPStartXfer+0x448>
 8008cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cfc:	801a      	strh	r2, [r3, #0]
 8008cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d10:	801a      	strh	r2, [r3, #0]
 8008d12:	e057      	b.n	8008dc4 <USB_EPStartXfer+0x4f8>
 8008d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d18:	2b3e      	cmp	r3, #62	; 0x3e
 8008d1a:	d817      	bhi.n	8008d4c <USB_EPStartXfer+0x480>
 8008d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d20:	085b      	lsrs	r3, r3, #1
 8008d22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d004      	beq.n	8008d3c <USB_EPStartXfer+0x470>
 8008d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d36:	3301      	adds	r3, #1
 8008d38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	029b      	lsls	r3, r3, #10
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d48:	801a      	strh	r2, [r3, #0]
 8008d4a:	e03b      	b.n	8008dc4 <USB_EPStartXfer+0x4f8>
 8008d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d50:	095b      	lsrs	r3, r3, #5
 8008d52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d5a:	f003 031f 	and.w	r3, r3, #31
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d104      	bne.n	8008d6c <USB_EPStartXfer+0x4a0>
 8008d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d66:	3b01      	subs	r3, #1
 8008d68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	029b      	lsls	r3, r3, #10
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d82:	801a      	strh	r2, [r3, #0]
 8008d84:	e01e      	b.n	8008dc4 <USB_EPStartXfer+0x4f8>
 8008d86:	463b      	mov	r3, r7
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	785b      	ldrb	r3, [r3, #1]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d119      	bne.n	8008dc4 <USB_EPStartXfer+0x4f8>
 8008d90:	1d3b      	adds	r3, r7, #4
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	657b      	str	r3, [r7, #84]	; 0x54
 8008d96:	1d3b      	adds	r3, r7, #4
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	461a      	mov	r2, r3
 8008da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008da4:	4413      	add	r3, r2
 8008da6:	657b      	str	r3, [r7, #84]	; 0x54
 8008da8:	463b      	mov	r3, r7
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	011a      	lsls	r2, r3, #4
 8008db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008db2:	4413      	add	r3, r2
 8008db4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008db8:	653b      	str	r3, [r7, #80]	; 0x50
 8008dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dc2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008dc4:	463b      	mov	r3, r7
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	891b      	ldrh	r3, [r3, #8]
 8008dca:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dce:	463b      	mov	r3, r7
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6959      	ldr	r1, [r3, #20]
 8008dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008dde:	1d38      	adds	r0, r7, #4
 8008de0:	6800      	ldr	r0, [r0, #0]
 8008de2:	f000 ffd1 	bl	8009d88 <USB_WritePMA>
            ep->xfer_buff += len;
 8008de6:	463b      	mov	r3, r7
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	695a      	ldr	r2, [r3, #20]
 8008dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008df0:	441a      	add	r2, r3
 8008df2:	463b      	mov	r3, r7
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008df8:	463b      	mov	r3, r7
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6a1a      	ldr	r2, [r3, #32]
 8008dfe:	463b      	mov	r3, r7
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d909      	bls.n	8008e1c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8008e08:	463b      	mov	r3, r7
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6a1a      	ldr	r2, [r3, #32]
 8008e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e12:	1ad2      	subs	r2, r2, r3
 8008e14:	463b      	mov	r3, r7
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	621a      	str	r2, [r3, #32]
 8008e1a:	e008      	b.n	8008e2e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8008e1c:	463b      	mov	r3, r7
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8008e26:	463b      	mov	r3, r7
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e2e:	1d3b      	adds	r3, r7, #4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	647b      	str	r3, [r7, #68]	; 0x44
 8008e34:	463b      	mov	r3, r7
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	785b      	ldrb	r3, [r3, #1]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d164      	bne.n	8008f08 <USB_EPStartXfer+0x63c>
 8008e3e:	1d3b      	adds	r3, r7, #4
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e44:	1d3b      	adds	r3, r7, #4
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	461a      	mov	r2, r3
 8008e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e52:	4413      	add	r3, r2
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e56:	463b      	mov	r3, r7
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	011a      	lsls	r2, r3, #4
 8008e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e60:	4413      	add	r3, r2
 8008e62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e66:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d112      	bne.n	8008e96 <USB_EPStartXfer+0x5ca>
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	801a      	strh	r2, [r3, #0]
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e92:	801a      	strh	r2, [r3, #0]
 8008e94:	e054      	b.n	8008f40 <USB_EPStartXfer+0x674>
 8008e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e9a:	2b3e      	cmp	r3, #62	; 0x3e
 8008e9c:	d817      	bhi.n	8008ece <USB_EPStartXfer+0x602>
 8008e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ea2:	085b      	lsrs	r3, r3, #1
 8008ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d004      	beq.n	8008ebe <USB_EPStartXfer+0x5f2>
 8008eb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008eb8:	3301      	adds	r3, #1
 8008eba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	029b      	lsls	r3, r3, #10
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eca:	801a      	strh	r2, [r3, #0]
 8008ecc:	e038      	b.n	8008f40 <USB_EPStartXfer+0x674>
 8008ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008edc:	f003 031f 	and.w	r3, r3, #31
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d104      	bne.n	8008eee <USB_EPStartXfer+0x622>
 8008ee4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	029b      	lsls	r3, r3, #10
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f04:	801a      	strh	r2, [r3, #0]
 8008f06:	e01b      	b.n	8008f40 <USB_EPStartXfer+0x674>
 8008f08:	463b      	mov	r3, r7
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d116      	bne.n	8008f40 <USB_EPStartXfer+0x674>
 8008f12:	1d3b      	adds	r3, r7, #4
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f20:	4413      	add	r3, r2
 8008f22:	647b      	str	r3, [r7, #68]	; 0x44
 8008f24:	463b      	mov	r3, r7
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	011a      	lsls	r2, r3, #4
 8008f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f2e:	4413      	add	r3, r2
 8008f30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f34:	643b      	str	r3, [r7, #64]	; 0x40
 8008f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f3e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008f40:	463b      	mov	r3, r7
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	895b      	ldrh	r3, [r3, #10]
 8008f46:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f4a:	463b      	mov	r3, r7
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6959      	ldr	r1, [r3, #20]
 8008f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008f5a:	1d38      	adds	r0, r7, #4
 8008f5c:	6800      	ldr	r0, [r0, #0]
 8008f5e:	f000 ff13 	bl	8009d88 <USB_WritePMA>
 8008f62:	e1e2      	b.n	800932a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008f64:	463b      	mov	r3, r7
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008f6e:	1d3b      	adds	r3, r7, #4
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	463b      	mov	r3, r7
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f88:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008f8c:	1d3b      	adds	r3, r7, #4
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	463b      	mov	r3, r7
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	441a      	add	r2, r3
 8008f9a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008fb2:	1d3b      	adds	r3, r7, #4
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	663b      	str	r3, [r7, #96]	; 0x60
 8008fb8:	1d3b      	adds	r3, r7, #4
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fc6:	4413      	add	r3, r2
 8008fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8008fca:	463b      	mov	r3, r7
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	011a      	lsls	r2, r3, #4
 8008fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fe4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008fe6:	463b      	mov	r3, r7
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	891b      	ldrh	r3, [r3, #8]
 8008fec:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ff0:	463b      	mov	r3, r7
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6959      	ldr	r1, [r3, #20]
 8008ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009000:	1d38      	adds	r0, r7, #4
 8009002:	6800      	ldr	r0, [r0, #0]
 8009004:	f000 fec0 	bl	8009d88 <USB_WritePMA>
 8009008:	e18f      	b.n	800932a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800900a:	1d3b      	adds	r3, r7, #4
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	463b      	mov	r3, r7
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	b29b      	uxth	r3, r3
 800901c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 808f 	beq.w	8009144 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009026:	1d3b      	adds	r3, r7, #4
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	67bb      	str	r3, [r7, #120]	; 0x78
 800902c:	463b      	mov	r3, r7
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	785b      	ldrb	r3, [r3, #1]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d164      	bne.n	8009100 <USB_EPStartXfer+0x834>
 8009036:	1d3b      	adds	r3, r7, #4
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	673b      	str	r3, [r7, #112]	; 0x70
 800903c:	1d3b      	adds	r3, r7, #4
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009044:	b29b      	uxth	r3, r3
 8009046:	461a      	mov	r2, r3
 8009048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800904a:	4413      	add	r3, r2
 800904c:	673b      	str	r3, [r7, #112]	; 0x70
 800904e:	463b      	mov	r3, r7
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	011a      	lsls	r2, r3, #4
 8009056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009058:	4413      	add	r3, r2
 800905a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800905e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009064:	2b00      	cmp	r3, #0
 8009066:	d112      	bne.n	800908e <USB_EPStartXfer+0x7c2>
 8009068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800906a:	881b      	ldrh	r3, [r3, #0]
 800906c:	b29b      	uxth	r3, r3
 800906e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009072:	b29a      	uxth	r2, r3
 8009074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009076:	801a      	strh	r2, [r3, #0]
 8009078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	b29b      	uxth	r3, r3
 800907e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009086:	b29a      	uxth	r2, r3
 8009088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800908a:	801a      	strh	r2, [r3, #0]
 800908c:	e054      	b.n	8009138 <USB_EPStartXfer+0x86c>
 800908e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009092:	2b3e      	cmp	r3, #62	; 0x3e
 8009094:	d817      	bhi.n	80090c6 <USB_EPStartXfer+0x7fa>
 8009096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800909a:	085b      	lsrs	r3, r3, #1
 800909c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80090a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d004      	beq.n	80090b6 <USB_EPStartXfer+0x7ea>
 80090ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b0:	3301      	adds	r3, #1
 80090b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80090b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	029b      	lsls	r3, r3, #10
 80090be:	b29a      	uxth	r2, r3
 80090c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090c2:	801a      	strh	r2, [r3, #0]
 80090c4:	e038      	b.n	8009138 <USB_EPStartXfer+0x86c>
 80090c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80090d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090d4:	f003 031f 	and.w	r3, r3, #31
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d104      	bne.n	80090e6 <USB_EPStartXfer+0x81a>
 80090dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e0:	3b01      	subs	r3, #1
 80090e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80090e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	029b      	lsls	r3, r3, #10
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090fc:	801a      	strh	r2, [r3, #0]
 80090fe:	e01b      	b.n	8009138 <USB_EPStartXfer+0x86c>
 8009100:	463b      	mov	r3, r7
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	785b      	ldrb	r3, [r3, #1]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d116      	bne.n	8009138 <USB_EPStartXfer+0x86c>
 800910a:	1d3b      	adds	r3, r7, #4
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009112:	b29b      	uxth	r3, r3
 8009114:	461a      	mov	r2, r3
 8009116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009118:	4413      	add	r3, r2
 800911a:	67bb      	str	r3, [r7, #120]	; 0x78
 800911c:	463b      	mov	r3, r7
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	011a      	lsls	r2, r3, #4
 8009124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009126:	4413      	add	r3, r2
 8009128:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800912c:	677b      	str	r3, [r7, #116]	; 0x74
 800912e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009132:	b29a      	uxth	r2, r3
 8009134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009136:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009138:	463b      	mov	r3, r7
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	895b      	ldrh	r3, [r3, #10]
 800913e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8009142:	e097      	b.n	8009274 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009144:	463b      	mov	r3, r7
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	785b      	ldrb	r3, [r3, #1]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d168      	bne.n	8009220 <USB_EPStartXfer+0x954>
 800914e:	1d3b      	adds	r3, r7, #4
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009156:	1d3b      	adds	r3, r7, #4
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800915e:	b29b      	uxth	r3, r3
 8009160:	461a      	mov	r2, r3
 8009162:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009166:	4413      	add	r3, r2
 8009168:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800916c:	463b      	mov	r3, r7
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	011a      	lsls	r2, r3, #4
 8009174:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009178:	4413      	add	r3, r2
 800917a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800917e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009184:	2b00      	cmp	r3, #0
 8009186:	d112      	bne.n	80091ae <USB_EPStartXfer+0x8e2>
 8009188:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	b29b      	uxth	r3, r3
 800918e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009192:	b29a      	uxth	r2, r3
 8009194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009196:	801a      	strh	r2, [r3, #0]
 8009198:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800919a:	881b      	ldrh	r3, [r3, #0]
 800919c:	b29b      	uxth	r3, r3
 800919e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091aa:	801a      	strh	r2, [r3, #0]
 80091ac:	e05d      	b.n	800926a <USB_EPStartXfer+0x99e>
 80091ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091b2:	2b3e      	cmp	r3, #62	; 0x3e
 80091b4:	d817      	bhi.n	80091e6 <USB_EPStartXfer+0x91a>
 80091b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091ba:	085b      	lsrs	r3, r3, #1
 80091bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80091c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d004      	beq.n	80091d6 <USB_EPStartXfer+0x90a>
 80091cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80091d0:	3301      	adds	r3, #1
 80091d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80091d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80091da:	b29b      	uxth	r3, r3
 80091dc:	029b      	lsls	r3, r3, #10
 80091de:	b29a      	uxth	r2, r3
 80091e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091e2:	801a      	strh	r2, [r3, #0]
 80091e4:	e041      	b.n	800926a <USB_EPStartXfer+0x99e>
 80091e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091ea:	095b      	lsrs	r3, r3, #5
 80091ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80091f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091f4:	f003 031f 	and.w	r3, r3, #31
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <USB_EPStartXfer+0x93a>
 80091fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009200:	3b01      	subs	r3, #1
 8009202:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009206:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800920a:	b29b      	uxth	r3, r3
 800920c:	029b      	lsls	r3, r3, #10
 800920e:	b29b      	uxth	r3, r3
 8009210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009218:	b29a      	uxth	r2, r3
 800921a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800921c:	801a      	strh	r2, [r3, #0]
 800921e:	e024      	b.n	800926a <USB_EPStartXfer+0x99e>
 8009220:	463b      	mov	r3, r7
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	785b      	ldrb	r3, [r3, #1]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d11f      	bne.n	800926a <USB_EPStartXfer+0x99e>
 800922a:	1d3b      	adds	r3, r7, #4
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009232:	1d3b      	adds	r3, r7, #4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800923a:	b29b      	uxth	r3, r3
 800923c:	461a      	mov	r2, r3
 800923e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009242:	4413      	add	r3, r2
 8009244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009248:	463b      	mov	r3, r7
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	011a      	lsls	r2, r3, #4
 8009250:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009254:	4413      	add	r3, r2
 8009256:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800925a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800925e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009262:	b29a      	uxth	r2, r3
 8009264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009268:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800926a:	463b      	mov	r3, r7
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	891b      	ldrh	r3, [r3, #8]
 8009270:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009274:	463b      	mov	r3, r7
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6959      	ldr	r1, [r3, #20]
 800927a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800927e:	b29b      	uxth	r3, r3
 8009280:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009284:	1d38      	adds	r0, r7, #4
 8009286:	6800      	ldr	r0, [r0, #0]
 8009288:	f000 fd7e 	bl	8009d88 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800928c:	463b      	mov	r3, r7
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	785b      	ldrb	r3, [r3, #1]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d122      	bne.n	80092dc <USB_EPStartXfer+0xa10>
 8009296:	1d3b      	adds	r3, r7, #4
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	463b      	mov	r3, r7
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4413      	add	r3, r2
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092b0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80092b4:	1d3b      	adds	r3, r7, #4
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	463b      	mov	r3, r7
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	441a      	add	r2, r3
 80092c2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80092c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	8013      	strh	r3, [r2, #0]
 80092da:	e026      	b.n	800932a <USB_EPStartXfer+0xa5e>
 80092dc:	463b      	mov	r3, r7
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	785b      	ldrb	r3, [r3, #1]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d121      	bne.n	800932a <USB_EPStartXfer+0xa5e>
 80092e6:	1d3b      	adds	r3, r7, #4
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	463b      	mov	r3, r7
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009300:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8009304:	1d3b      	adds	r3, r7, #4
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	463b      	mov	r3, r7
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	441a      	add	r2, r3
 8009312:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8009316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800931a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800931e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009326:	b29b      	uxth	r3, r3
 8009328:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800932a:	1d3b      	adds	r3, r7, #4
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	463b      	mov	r3, r7
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	4413      	add	r3, r2
 8009338:	881b      	ldrh	r3, [r3, #0]
 800933a:	b29b      	uxth	r3, r3
 800933c:	f107 020e 	add.w	r2, r7, #14
 8009340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009348:	8013      	strh	r3, [r2, #0]
 800934a:	f107 030e 	add.w	r3, r7, #14
 800934e:	f107 020e 	add.w	r2, r7, #14
 8009352:	8812      	ldrh	r2, [r2, #0]
 8009354:	f082 0210 	eor.w	r2, r2, #16
 8009358:	801a      	strh	r2, [r3, #0]
 800935a:	f107 030e 	add.w	r3, r7, #14
 800935e:	f107 020e 	add.w	r2, r7, #14
 8009362:	8812      	ldrh	r2, [r2, #0]
 8009364:	f082 0220 	eor.w	r2, r2, #32
 8009368:	801a      	strh	r2, [r3, #0]
 800936a:	1d3b      	adds	r3, r7, #4
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	463b      	mov	r3, r7
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	441a      	add	r2, r3
 8009378:	f107 030e 	add.w	r3, r7, #14
 800937c:	881b      	ldrh	r3, [r3, #0]
 800937e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800938a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800938e:	b29b      	uxth	r3, r3
 8009390:	8013      	strh	r3, [r2, #0]
 8009392:	e3b5      	b.n	8009b00 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009394:	463b      	mov	r3, r7
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	7b1b      	ldrb	r3, [r3, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	f040 8090 	bne.w	80094c0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80093a0:	463b      	mov	r3, r7
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	699a      	ldr	r2, [r3, #24]
 80093a6:	463b      	mov	r3, r7
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d90e      	bls.n	80093ce <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80093b0:	463b      	mov	r3, r7
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80093ba:	463b      	mov	r3, r7
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	699a      	ldr	r2, [r3, #24]
 80093c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093c4:	1ad2      	subs	r2, r2, r3
 80093c6:	463b      	mov	r3, r7
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	619a      	str	r2, [r3, #24]
 80093cc:	e008      	b.n	80093e0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80093ce:	463b      	mov	r3, r7
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80093d8:	463b      	mov	r3, r7
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2200      	movs	r2, #0
 80093de:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80093e0:	1d3b      	adds	r3, r7, #4
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80093e8:	1d3b      	adds	r3, r7, #4
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	461a      	mov	r2, r3
 80093f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093f8:	4413      	add	r3, r2
 80093fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80093fe:	463b      	mov	r3, r7
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	011a      	lsls	r2, r3, #4
 8009406:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800940a:	4413      	add	r3, r2
 800940c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009410:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009418:	2b00      	cmp	r3, #0
 800941a:	d116      	bne.n	800944a <USB_EPStartXfer+0xb7e>
 800941c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009420:	881b      	ldrh	r3, [r3, #0]
 8009422:	b29b      	uxth	r3, r3
 8009424:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009428:	b29a      	uxth	r2, r3
 800942a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800942e:	801a      	strh	r2, [r3, #0]
 8009430:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	b29b      	uxth	r3, r3
 8009438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800943c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009440:	b29a      	uxth	r2, r3
 8009442:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009446:	801a      	strh	r2, [r3, #0]
 8009448:	e32c      	b.n	8009aa4 <USB_EPStartXfer+0x11d8>
 800944a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800944e:	2b3e      	cmp	r3, #62	; 0x3e
 8009450:	d818      	bhi.n	8009484 <USB_EPStartXfer+0xbb8>
 8009452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800945c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	2b00      	cmp	r3, #0
 8009466:	d004      	beq.n	8009472 <USB_EPStartXfer+0xba6>
 8009468:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800946c:	3301      	adds	r3, #1
 800946e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009472:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009476:	b29b      	uxth	r3, r3
 8009478:	029b      	lsls	r3, r3, #10
 800947a:	b29a      	uxth	r2, r3
 800947c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009480:	801a      	strh	r2, [r3, #0]
 8009482:	e30f      	b.n	8009aa4 <USB_EPStartXfer+0x11d8>
 8009484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009488:	095b      	lsrs	r3, r3, #5
 800948a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800948e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009492:	f003 031f 	and.w	r3, r3, #31
 8009496:	2b00      	cmp	r3, #0
 8009498:	d104      	bne.n	80094a4 <USB_EPStartXfer+0xbd8>
 800949a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800949e:	3b01      	subs	r3, #1
 80094a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	029b      	lsls	r3, r3, #10
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094bc:	801a      	strh	r2, [r3, #0]
 80094be:	e2f1      	b.n	8009aa4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80094c0:	463b      	mov	r3, r7
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	78db      	ldrb	r3, [r3, #3]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	f040 818f 	bne.w	80097ea <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80094cc:	463b      	mov	r3, r7
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	785b      	ldrb	r3, [r3, #1]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d175      	bne.n	80095c2 <USB_EPStartXfer+0xcf6>
 80094d6:	1d3b      	adds	r3, r7, #4
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80094de:	1d3b      	adds	r3, r7, #4
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	461a      	mov	r2, r3
 80094ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80094ee:	4413      	add	r3, r2
 80094f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80094f4:	463b      	mov	r3, r7
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	011a      	lsls	r2, r3, #4
 80094fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009500:	4413      	add	r3, r2
 8009502:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800950a:	463b      	mov	r3, r7
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d116      	bne.n	8009542 <USB_EPStartXfer+0xc76>
 8009514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009518:	881b      	ldrh	r3, [r3, #0]
 800951a:	b29b      	uxth	r3, r3
 800951c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009520:	b29a      	uxth	r2, r3
 8009522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009526:	801a      	strh	r2, [r3, #0]
 8009528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800952c:	881b      	ldrh	r3, [r3, #0]
 800952e:	b29b      	uxth	r3, r3
 8009530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009538:	b29a      	uxth	r2, r3
 800953a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800953e:	801a      	strh	r2, [r3, #0]
 8009540:	e065      	b.n	800960e <USB_EPStartXfer+0xd42>
 8009542:	463b      	mov	r3, r7
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	2b3e      	cmp	r3, #62	; 0x3e
 800954a:	d81a      	bhi.n	8009582 <USB_EPStartXfer+0xcb6>
 800954c:	463b      	mov	r3, r7
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	085b      	lsrs	r3, r3, #1
 8009554:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009558:	463b      	mov	r3, r7
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	2b00      	cmp	r3, #0
 8009564:	d004      	beq.n	8009570 <USB_EPStartXfer+0xca4>
 8009566:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800956a:	3301      	adds	r3, #1
 800956c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009570:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009574:	b29b      	uxth	r3, r3
 8009576:	029b      	lsls	r3, r3, #10
 8009578:	b29a      	uxth	r2, r3
 800957a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800957e:	801a      	strh	r2, [r3, #0]
 8009580:	e045      	b.n	800960e <USB_EPStartXfer+0xd42>
 8009582:	463b      	mov	r3, r7
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	095b      	lsrs	r3, r3, #5
 800958a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800958e:	463b      	mov	r3, r7
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	f003 031f 	and.w	r3, r3, #31
 8009598:	2b00      	cmp	r3, #0
 800959a:	d104      	bne.n	80095a6 <USB_EPStartXfer+0xcda>
 800959c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095a0:	3b01      	subs	r3, #1
 80095a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	029b      	lsls	r3, r3, #10
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095be:	801a      	strh	r2, [r3, #0]
 80095c0:	e025      	b.n	800960e <USB_EPStartXfer+0xd42>
 80095c2:	463b      	mov	r3, r7
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	785b      	ldrb	r3, [r3, #1]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d120      	bne.n	800960e <USB_EPStartXfer+0xd42>
 80095cc:	1d3b      	adds	r3, r7, #4
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095d4:	1d3b      	adds	r3, r7, #4
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095dc:	b29b      	uxth	r3, r3
 80095de:	461a      	mov	r2, r3
 80095e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80095e4:	4413      	add	r3, r2
 80095e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80095ea:	463b      	mov	r3, r7
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	011a      	lsls	r2, r3, #4
 80095f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80095f6:	4413      	add	r3, r2
 80095f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009600:	463b      	mov	r3, r7
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	b29a      	uxth	r2, r3
 8009608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800960c:	801a      	strh	r2, [r3, #0]
 800960e:	1d3b      	adds	r3, r7, #4
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009616:	463b      	mov	r3, r7
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	785b      	ldrb	r3, [r3, #1]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d175      	bne.n	800970c <USB_EPStartXfer+0xe40>
 8009620:	1d3b      	adds	r3, r7, #4
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009628:	1d3b      	adds	r3, r7, #4
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009630:	b29b      	uxth	r3, r3
 8009632:	461a      	mov	r2, r3
 8009634:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009638:	4413      	add	r3, r2
 800963a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800963e:	463b      	mov	r3, r7
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	011a      	lsls	r2, r3, #4
 8009646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800964a:	4413      	add	r3, r2
 800964c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009654:	463b      	mov	r3, r7
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d116      	bne.n	800968c <USB_EPStartXfer+0xdc0>
 800965e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009662:	881b      	ldrh	r3, [r3, #0]
 8009664:	b29b      	uxth	r3, r3
 8009666:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800966a:	b29a      	uxth	r2, r3
 800966c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009670:	801a      	strh	r2, [r3, #0]
 8009672:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	b29b      	uxth	r3, r3
 800967a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800967e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009682:	b29a      	uxth	r2, r3
 8009684:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009688:	801a      	strh	r2, [r3, #0]
 800968a:	e061      	b.n	8009750 <USB_EPStartXfer+0xe84>
 800968c:	463b      	mov	r3, r7
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	2b3e      	cmp	r3, #62	; 0x3e
 8009694:	d81a      	bhi.n	80096cc <USB_EPStartXfer+0xe00>
 8009696:	463b      	mov	r3, r7
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	085b      	lsrs	r3, r3, #1
 800969e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096a2:	463b      	mov	r3, r7
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	f003 0301 	and.w	r3, r3, #1
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d004      	beq.n	80096ba <USB_EPStartXfer+0xdee>
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b4:	3301      	adds	r3, #1
 80096b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096be:	b29b      	uxth	r3, r3
 80096c0:	029b      	lsls	r3, r3, #10
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096c8:	801a      	strh	r2, [r3, #0]
 80096ca:	e041      	b.n	8009750 <USB_EPStartXfer+0xe84>
 80096cc:	463b      	mov	r3, r7
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	095b      	lsrs	r3, r3, #5
 80096d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096d8:	463b      	mov	r3, r7
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	f003 031f 	and.w	r3, r3, #31
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d104      	bne.n	80096f0 <USB_EPStartXfer+0xe24>
 80096e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ea:	3b01      	subs	r3, #1
 80096ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	029b      	lsls	r3, r3, #10
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009702:	b29a      	uxth	r2, r3
 8009704:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009708:	801a      	strh	r2, [r3, #0]
 800970a:	e021      	b.n	8009750 <USB_EPStartXfer+0xe84>
 800970c:	463b      	mov	r3, r7
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	785b      	ldrb	r3, [r3, #1]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d11c      	bne.n	8009750 <USB_EPStartXfer+0xe84>
 8009716:	1d3b      	adds	r3, r7, #4
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800971e:	b29b      	uxth	r3, r3
 8009720:	461a      	mov	r2, r3
 8009722:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009726:	4413      	add	r3, r2
 8009728:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800972c:	463b      	mov	r3, r7
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	011a      	lsls	r2, r3, #4
 8009734:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009738:	4413      	add	r3, r2
 800973a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800973e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009742:	463b      	mov	r3, r7
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	b29a      	uxth	r2, r3
 800974a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800974e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009750:	463b      	mov	r3, r7
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 81a4 	beq.w	8009aa4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800975c:	1d3b      	adds	r3, r7, #4
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	463b      	mov	r3, r7
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009770:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d005      	beq.n	8009788 <USB_EPStartXfer+0xebc>
 800977c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10d      	bne.n	80097a4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009788:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800978c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009790:	2b00      	cmp	r3, #0
 8009792:	f040 8187 	bne.w	8009aa4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009796:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800979a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f040 8180 	bne.w	8009aa4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80097a4:	1d3b      	adds	r3, r7, #4
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	463b      	mov	r3, r7
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4413      	add	r3, r2
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097be:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80097c2:	1d3b      	adds	r3, r7, #4
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	463b      	mov	r3, r7
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	441a      	add	r2, r3
 80097d0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80097d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	8013      	strh	r3, [r2, #0]
 80097e8:	e15c      	b.n	8009aa4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80097ea:	463b      	mov	r3, r7
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	78db      	ldrb	r3, [r3, #3]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	f040 8155 	bne.w	8009aa0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80097f6:	463b      	mov	r3, r7
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	699a      	ldr	r2, [r3, #24]
 80097fc:	463b      	mov	r3, r7
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	429a      	cmp	r2, r3
 8009804:	d90e      	bls.n	8009824 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8009806:	463b      	mov	r3, r7
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8009810:	463b      	mov	r3, r7
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	699a      	ldr	r2, [r3, #24]
 8009816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800981a:	1ad2      	subs	r2, r2, r3
 800981c:	463b      	mov	r3, r7
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	619a      	str	r2, [r3, #24]
 8009822:	e008      	b.n	8009836 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8009824:	463b      	mov	r3, r7
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800982e:	463b      	mov	r3, r7
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2200      	movs	r2, #0
 8009834:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009836:	463b      	mov	r3, r7
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	785b      	ldrb	r3, [r3, #1]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d16f      	bne.n	8009920 <USB_EPStartXfer+0x1054>
 8009840:	1d3b      	adds	r3, r7, #4
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009848:	1d3b      	adds	r3, r7, #4
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009850:	b29b      	uxth	r3, r3
 8009852:	461a      	mov	r2, r3
 8009854:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009858:	4413      	add	r3, r2
 800985a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800985e:	463b      	mov	r3, r7
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	011a      	lsls	r2, r3, #4
 8009866:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800986a:	4413      	add	r3, r2
 800986c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009870:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009878:	2b00      	cmp	r3, #0
 800987a:	d116      	bne.n	80098aa <USB_EPStartXfer+0xfde>
 800987c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	b29b      	uxth	r3, r3
 8009884:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009888:	b29a      	uxth	r2, r3
 800988a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800988e:	801a      	strh	r2, [r3, #0]
 8009890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	b29b      	uxth	r3, r3
 8009898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800989c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80098a6:	801a      	strh	r2, [r3, #0]
 80098a8:	e05f      	b.n	800996a <USB_EPStartXfer+0x109e>
 80098aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098ae:	2b3e      	cmp	r3, #62	; 0x3e
 80098b0:	d818      	bhi.n	80098e4 <USB_EPStartXfer+0x1018>
 80098b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098b6:	085b      	lsrs	r3, r3, #1
 80098b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d004      	beq.n	80098d2 <USB_EPStartXfer+0x1006>
 80098c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098cc:	3301      	adds	r3, #1
 80098ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	029b      	lsls	r3, r3, #10
 80098da:	b29a      	uxth	r2, r3
 80098dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80098e0:	801a      	strh	r2, [r3, #0]
 80098e2:	e042      	b.n	800996a <USB_EPStartXfer+0x109e>
 80098e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098e8:	095b      	lsrs	r3, r3, #5
 80098ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098f2:	f003 031f 	and.w	r3, r3, #31
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d104      	bne.n	8009904 <USB_EPStartXfer+0x1038>
 80098fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098fe:	3b01      	subs	r3, #1
 8009900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009908:	b29b      	uxth	r3, r3
 800990a:	029b      	lsls	r3, r3, #10
 800990c:	b29b      	uxth	r3, r3
 800990e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009916:	b29a      	uxth	r2, r3
 8009918:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800991c:	801a      	strh	r2, [r3, #0]
 800991e:	e024      	b.n	800996a <USB_EPStartXfer+0x109e>
 8009920:	463b      	mov	r3, r7
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	785b      	ldrb	r3, [r3, #1]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d11f      	bne.n	800996a <USB_EPStartXfer+0x109e>
 800992a:	1d3b      	adds	r3, r7, #4
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009932:	1d3b      	adds	r3, r7, #4
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800993a:	b29b      	uxth	r3, r3
 800993c:	461a      	mov	r2, r3
 800993e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009942:	4413      	add	r3, r2
 8009944:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009948:	463b      	mov	r3, r7
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	011a      	lsls	r2, r3, #4
 8009950:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009954:	4413      	add	r3, r2
 8009956:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800995a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800995e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009962:	b29a      	uxth	r2, r3
 8009964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009968:	801a      	strh	r2, [r3, #0]
 800996a:	1d3b      	adds	r3, r7, #4
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009972:	463b      	mov	r3, r7
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	785b      	ldrb	r3, [r3, #1]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d16f      	bne.n	8009a5c <USB_EPStartXfer+0x1190>
 800997c:	1d3b      	adds	r3, r7, #4
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009984:	1d3b      	adds	r3, r7, #4
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800998c:	b29b      	uxth	r3, r3
 800998e:	461a      	mov	r2, r3
 8009990:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009994:	4413      	add	r3, r2
 8009996:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800999a:	463b      	mov	r3, r7
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	011a      	lsls	r2, r3, #4
 80099a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80099a6:	4413      	add	r3, r2
 80099a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80099b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d116      	bne.n	80099e6 <USB_EPStartXfer+0x111a>
 80099b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80099ca:	801a      	strh	r2, [r3, #0]
 80099cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099dc:	b29a      	uxth	r2, r3
 80099de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80099e2:	801a      	strh	r2, [r3, #0]
 80099e4:	e05e      	b.n	8009aa4 <USB_EPStartXfer+0x11d8>
 80099e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099ea:	2b3e      	cmp	r3, #62	; 0x3e
 80099ec:	d818      	bhi.n	8009a20 <USB_EPStartXfer+0x1154>
 80099ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099f2:	085b      	lsrs	r3, r3, #1
 80099f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80099f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d004      	beq.n	8009a0e <USB_EPStartXfer+0x1142>
 8009a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a08:	3301      	adds	r3, #1
 8009a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	029b      	lsls	r3, r3, #10
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009a1c:	801a      	strh	r2, [r3, #0]
 8009a1e:	e041      	b.n	8009aa4 <USB_EPStartXfer+0x11d8>
 8009a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a24:	095b      	lsrs	r3, r3, #5
 8009a26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a2e:	f003 031f 	and.w	r3, r3, #31
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d104      	bne.n	8009a40 <USB_EPStartXfer+0x1174>
 8009a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	029b      	lsls	r3, r3, #10
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009a58:	801a      	strh	r2, [r3, #0]
 8009a5a:	e023      	b.n	8009aa4 <USB_EPStartXfer+0x11d8>
 8009a5c:	463b      	mov	r3, r7
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	785b      	ldrb	r3, [r3, #1]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d11e      	bne.n	8009aa4 <USB_EPStartXfer+0x11d8>
 8009a66:	1d3b      	adds	r3, r7, #4
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	461a      	mov	r2, r3
 8009a72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009a76:	4413      	add	r3, r2
 8009a78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a7c:	463b      	mov	r3, r7
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	011a      	lsls	r2, r3, #4
 8009a84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009a88:	4413      	add	r3, r2
 8009a8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a9c:	801a      	strh	r2, [r3, #0]
 8009a9e:	e001      	b.n	8009aa4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e02e      	b.n	8009b02 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009aa4:	1d3b      	adds	r3, r7, #4
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	463b      	mov	r3, r7
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009abe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009ac2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009ac6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009aca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009ace:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009ad2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ad6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009ada:	1d3b      	adds	r3, r7, #4
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	463b      	mov	r3, r7
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	441a      	add	r2, r3
 8009ae8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	785b      	ldrb	r3, [r3, #1]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d020      	beq.n	8009b60 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b34:	81bb      	strh	r3, [r7, #12]
 8009b36:	89bb      	ldrh	r3, [r7, #12]
 8009b38:	f083 0310 	eor.w	r3, r3, #16
 8009b3c:	81bb      	strh	r3, [r7, #12]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	441a      	add	r2, r3
 8009b48:	89bb      	ldrh	r3, [r7, #12]
 8009b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	8013      	strh	r3, [r2, #0]
 8009b5e:	e01f      	b.n	8009ba0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	881b      	ldrh	r3, [r3, #0]
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b76:	81fb      	strh	r3, [r7, #14]
 8009b78:	89fb      	ldrh	r3, [r7, #14]
 8009b7a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b7e:	81fb      	strh	r3, [r7, #14]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	441a      	add	r2, r3
 8009b8a:	89fb      	ldrh	r3, [r7, #14]
 8009b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bc80      	pop	{r7}
 8009baa:	4770      	bx	lr

08009bac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	7b1b      	ldrb	r3, [r3, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f040 809d 	bne.w	8009cfa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	785b      	ldrb	r3, [r3, #1]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d04c      	beq.n	8009c62 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4413      	add	r3, r2
 8009bd2:	881b      	ldrh	r3, [r3, #0]
 8009bd4:	823b      	strh	r3, [r7, #16]
 8009bd6:	8a3b      	ldrh	r3, [r7, #16]
 8009bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d01b      	beq.n	8009c18 <USB_EPClearStall+0x6c>
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf6:	81fb      	strh	r3, [r7, #14]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	441a      	add	r2, r3
 8009c02:	89fb      	ldrh	r3, [r7, #14]
 8009c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	78db      	ldrb	r3, [r3, #3]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d06c      	beq.n	8009cfa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	881b      	ldrh	r3, [r3, #0]
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c36:	81bb      	strh	r3, [r7, #12]
 8009c38:	89bb      	ldrh	r3, [r7, #12]
 8009c3a:	f083 0320 	eor.w	r3, r3, #32
 8009c3e:	81bb      	strh	r3, [r7, #12]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	441a      	add	r2, r3
 8009c4a:	89bb      	ldrh	r3, [r7, #12]
 8009c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	8013      	strh	r3, [r2, #0]
 8009c60:	e04b      	b.n	8009cfa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	82fb      	strh	r3, [r7, #22]
 8009c70:	8afb      	ldrh	r3, [r7, #22]
 8009c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d01b      	beq.n	8009cb2 <USB_EPClearStall+0x106>
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c90:	82bb      	strh	r3, [r7, #20]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	441a      	add	r2, r3
 8009c9c:	8abb      	ldrh	r3, [r7, #20]
 8009c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cc8:	827b      	strh	r3, [r7, #18]
 8009cca:	8a7b      	ldrh	r3, [r7, #18]
 8009ccc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009cd0:	827b      	strh	r3, [r7, #18]
 8009cd2:	8a7b      	ldrh	r3, [r7, #18]
 8009cd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009cd8:	827b      	strh	r3, [r7, #18]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	441a      	add	r2, r3
 8009ce4:	8a7b      	ldrh	r3, [r7, #18]
 8009ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	371c      	adds	r7, #28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bc80      	pop	{r7}
 8009d04:	4770      	bx	lr

08009d06 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b083      	sub	sp, #12
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	460b      	mov	r3, r1
 8009d10:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009d12:	78fb      	ldrb	r3, [r7, #3]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d103      	bne.n	8009d20 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2280      	movs	r2, #128	; 0x80
 8009d1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bc80      	pop	{r7}
 8009d2a:	4770      	bx	lr

08009d2c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	370c      	adds	r7, #12
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bc80      	pop	{r7}
 8009d3e:	4770      	bx	lr

08009d40 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	370c      	adds	r7, #12
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bc80      	pop	{r7}
 8009d52:	4770      	bx	lr

08009d54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009d66:	68fb      	ldr	r3, [r7, #12]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bc80      	pop	{r7}
 8009d70:	4770      	bx	lr

08009d72 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b083      	sub	sp, #12
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	370c      	adds	r7, #12
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bc80      	pop	{r7}
 8009d86:	4770      	bx	lr

08009d88 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b08d      	sub	sp, #52	; 0x34
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	4611      	mov	r1, r2
 8009d94:	461a      	mov	r2, r3
 8009d96:	460b      	mov	r3, r1
 8009d98:	80fb      	strh	r3, [r7, #6]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009d9e:	88bb      	ldrh	r3, [r7, #4]
 8009da0:	3301      	adds	r3, #1
 8009da2:	085b      	lsrs	r3, r3, #1
 8009da4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009dae:	88fb      	ldrh	r3, [r7, #6]
 8009db0:	005a      	lsls	r2, r3, #1
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dba:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dc0:	e01e      	b.n	8009e00 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	3301      	adds	r3, #1
 8009dcc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	021b      	lsls	r3, r3, #8
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	461a      	mov	r2, r3
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	3302      	adds	r3, #2
 8009dec:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df0:	3302      	adds	r3, #2
 8009df2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	3301      	adds	r3, #1
 8009df8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1dd      	bne.n	8009dc2 <USB_WritePMA+0x3a>
  }
}
 8009e06:	bf00      	nop
 8009e08:	bf00      	nop
 8009e0a:	3734      	adds	r7, #52	; 0x34
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bc80      	pop	{r7}
 8009e10:	4770      	bx	lr

08009e12 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b08b      	sub	sp, #44	; 0x2c
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	60f8      	str	r0, [r7, #12]
 8009e1a:	60b9      	str	r1, [r7, #8]
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	461a      	mov	r2, r3
 8009e20:	460b      	mov	r3, r1
 8009e22:	80fb      	strh	r3, [r7, #6]
 8009e24:	4613      	mov	r3, r2
 8009e26:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009e28:	88bb      	ldrh	r3, [r7, #4]
 8009e2a:	085b      	lsrs	r3, r3, #1
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e38:	88fb      	ldrh	r3, [r7, #6]
 8009e3a:	005a      	lsls	r2, r3, #1
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e44:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	627b      	str	r3, [r7, #36]	; 0x24
 8009e4a:	e01b      	b.n	8009e84 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	3302      	adds	r3, #2
 8009e58:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	3301      	adds	r3, #1
 8009e66:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	0a1b      	lsrs	r3, r3, #8
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	3301      	adds	r3, #1
 8009e76:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	3302      	adds	r3, #2
 8009e7c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	3b01      	subs	r3, #1
 8009e82:	627b      	str	r3, [r7, #36]	; 0x24
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1e0      	bne.n	8009e4c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009e8a:	88bb      	ldrh	r3, [r7, #4]
 8009e8c:	f003 0301 	and.w	r3, r3, #1
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d007      	beq.n	8009ea6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009e96:	6a3b      	ldr	r3, [r7, #32]
 8009e98:	881b      	ldrh	r3, [r3, #0]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	701a      	strb	r2, [r3, #0]
  }
}
 8009ea6:	bf00      	nop
 8009ea8:	372c      	adds	r7, #44	; 0x2c
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bc80      	pop	{r7}
 8009eae:	4770      	bx	lr

08009eb0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	7c1b      	ldrb	r3, [r3, #16]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d115      	bne.n	8009ef4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ecc:	2202      	movs	r2, #2
 8009ece:	2181      	movs	r1, #129	; 0x81
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f002 f9e0 	bl	800c296 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	2101      	movs	r1, #1
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f002 f9d6 	bl	800c296 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009ef2:	e012      	b.n	8009f1a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ef4:	2340      	movs	r3, #64	; 0x40
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	2181      	movs	r1, #129	; 0x81
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f002 f9cb 	bl	800c296 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009f06:	2340      	movs	r3, #64	; 0x40
 8009f08:	2202      	movs	r2, #2
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f002 f9c2 	bl	800c296 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009f1a:	2308      	movs	r3, #8
 8009f1c:	2203      	movs	r2, #3
 8009f1e:	2182      	movs	r1, #130	; 0x82
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f002 f9b8 	bl	800c296 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009f2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009f30:	f002 fad8 	bl	800c4e4 <USBD_static_malloc>
 8009f34:	4602      	mov	r2, r0
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d102      	bne.n	8009f4c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009f46:	2301      	movs	r3, #1
 8009f48:	73fb      	strb	r3, [r7, #15]
 8009f4a:	e026      	b.n	8009f9a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f52:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	7c1b      	ldrb	r3, [r3, #16]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d109      	bne.n	8009f8a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f80:	2101      	movs	r1, #1
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f002 fa78 	bl	800c478 <USBD_LL_PrepareReceive>
 8009f88:	e007      	b.n	8009f9a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f90:	2340      	movs	r3, #64	; 0x40
 8009f92:	2101      	movs	r1, #1
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f002 fa6f 	bl	800c478 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	460b      	mov	r3, r1
 8009fae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009fb4:	2181      	movs	r1, #129	; 0x81
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f002 f993 	bl	800c2e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009fc2:	2101      	movs	r1, #1
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f002 f98c 	bl	800c2e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009fd2:	2182      	movs	r1, #130	; 0x82
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f002 f984 	bl	800c2e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00e      	beq.n	800a008 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f002 fa7e 	bl	800c4fc <USBD_static_free>
    pdev->pClassData = NULL;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a008:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b086      	sub	sp, #24
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a022:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a024:	2300      	movs	r3, #0
 800a026:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a028:	2300      	movs	r3, #0
 800a02a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a02c:	2300      	movs	r3, #0
 800a02e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d039      	beq.n	800a0b0 <USBD_CDC_Setup+0x9e>
 800a03c:	2b20      	cmp	r3, #32
 800a03e:	d17f      	bne.n	800a140 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	88db      	ldrh	r3, [r3, #6]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d029      	beq.n	800a09c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	b25b      	sxtb	r3, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	da11      	bge.n	800a076 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	683a      	ldr	r2, [r7, #0]
 800a05c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a05e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	88d2      	ldrh	r2, [r2, #6]
 800a064:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a066:	6939      	ldr	r1, [r7, #16]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	88db      	ldrh	r3, [r3, #6]
 800a06c:	461a      	mov	r2, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f001 fa09 	bl	800b486 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a074:	e06b      	b.n	800a14e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	785a      	ldrb	r2, [r3, #1]
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	88db      	ldrh	r3, [r3, #6]
 800a084:	b2da      	uxtb	r2, r3
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a08c:	6939      	ldr	r1, [r7, #16]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	88db      	ldrh	r3, [r3, #6]
 800a092:	461a      	mov	r2, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f001 fa24 	bl	800b4e2 <USBD_CtlPrepareRx>
      break;
 800a09a:	e058      	b.n	800a14e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	7850      	ldrb	r0, [r2, #1]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	6839      	ldr	r1, [r7, #0]
 800a0ac:	4798      	blx	r3
      break;
 800a0ae:	e04e      	b.n	800a14e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	785b      	ldrb	r3, [r3, #1]
 800a0b4:	2b0b      	cmp	r3, #11
 800a0b6:	d02e      	beq.n	800a116 <USBD_CDC_Setup+0x104>
 800a0b8:	2b0b      	cmp	r3, #11
 800a0ba:	dc38      	bgt.n	800a12e <USBD_CDC_Setup+0x11c>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <USBD_CDC_Setup+0xb4>
 800a0c0:	2b0a      	cmp	r3, #10
 800a0c2:	d014      	beq.n	800a0ee <USBD_CDC_Setup+0xdc>
 800a0c4:	e033      	b.n	800a12e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d107      	bne.n	800a0e0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a0d0:	f107 030c 	add.w	r3, r7, #12
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f001 f9d4 	bl	800b486 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0de:	e02e      	b.n	800a13e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f001 f965 	bl	800b3b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	75fb      	strb	r3, [r7, #23]
          break;
 800a0ec:	e027      	b.n	800a13e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0f4:	2b03      	cmp	r3, #3
 800a0f6:	d107      	bne.n	800a108 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a0f8:	f107 030f 	add.w	r3, r7, #15
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f001 f9c0 	bl	800b486 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a106:	e01a      	b.n	800a13e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f001 f951 	bl	800b3b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a110:	2302      	movs	r3, #2
 800a112:	75fb      	strb	r3, [r7, #23]
          break;
 800a114:	e013      	b.n	800a13e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a11c:	2b03      	cmp	r3, #3
 800a11e:	d00d      	beq.n	800a13c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f001 f945 	bl	800b3b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a128:	2302      	movs	r3, #2
 800a12a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a12c:	e006      	b.n	800a13c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 f93e 	bl	800b3b2 <USBD_CtlError>
          ret = USBD_FAIL;
 800a136:	2302      	movs	r3, #2
 800a138:	75fb      	strb	r3, [r7, #23]
          break;
 800a13a:	e000      	b.n	800a13e <USBD_CDC_Setup+0x12c>
          break;
 800a13c:	bf00      	nop
      }
      break;
 800a13e:	e006      	b.n	800a14e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f001 f935 	bl	800b3b2 <USBD_CtlError>
      ret = USBD_FAIL;
 800a148:	2302      	movs	r3, #2
 800a14a:	75fb      	strb	r3, [r7, #23]
      break;
 800a14c:	bf00      	nop
  }

  return ret;
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	460b      	mov	r3, r1
 800a162:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a16a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a172:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d03a      	beq.n	800a1f4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a17e:	78fa      	ldrb	r2, [r7, #3]
 800a180:	6879      	ldr	r1, [r7, #4]
 800a182:	4613      	mov	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	440b      	add	r3, r1
 800a18c:	331c      	adds	r3, #28
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d029      	beq.n	800a1e8 <USBD_CDC_DataIn+0x90>
 800a194:	78fa      	ldrb	r2, [r7, #3]
 800a196:	6879      	ldr	r1, [r7, #4]
 800a198:	4613      	mov	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4413      	add	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	440b      	add	r3, r1
 800a1a2:	331c      	adds	r3, #28
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	78f9      	ldrb	r1, [r7, #3]
 800a1a8:	68b8      	ldr	r0, [r7, #8]
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	440b      	add	r3, r1
 800a1b0:	00db      	lsls	r3, r3, #3
 800a1b2:	4403      	add	r3, r0
 800a1b4:	3338      	adds	r3, #56	; 0x38
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	fbb2 f1f3 	udiv	r1, r2, r3
 800a1bc:	fb03 f301 	mul.w	r3, r3, r1
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d110      	bne.n	800a1e8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a1c6:	78fa      	ldrb	r2, [r7, #3]
 800a1c8:	6879      	ldr	r1, [r7, #4]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	4413      	add	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	440b      	add	r3, r1
 800a1d4:	331c      	adds	r3, #28
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a1da:	78f9      	ldrb	r1, [r7, #3]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	2200      	movs	r2, #0
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f002 f926 	bl	800c432 <USBD_LL_Transmit>
 800a1e6:	e003      	b.n	800a1f0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	e000      	b.n	800a1f6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a1f4:	2302      	movs	r3, #2
  }
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	460b      	mov	r3, r1
 800a208:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a210:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a212:	78fb      	ldrb	r3, [r7, #3]
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f002 f951 	bl	800c4be <USBD_LL_GetRxDataSize>
 800a21c:	4602      	mov	r2, r0
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00d      	beq.n	800a24a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a242:	4611      	mov	r1, r2
 800a244:	4798      	blx	r3

    return USBD_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	e000      	b.n	800a24c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a24a:	2302      	movs	r3, #2
  }
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a262:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d015      	beq.n	800a29a <USBD_CDC_EP0_RxReady+0x46>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a274:	2bff      	cmp	r3, #255	; 0xff
 800a276:	d010      	beq.n	800a29a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	68fa      	ldr	r2, [r7, #12]
 800a282:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a286:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a28e:	b292      	uxth	r2, r2
 800a290:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	22ff      	movs	r2, #255	; 0xff
 800a296:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2243      	movs	r2, #67	; 0x43
 800a2b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a2b2:	4b03      	ldr	r3, [pc, #12]	; (800a2c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bc80      	pop	{r7}
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	200000a4 	.word	0x200000a4

0800a2c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2243      	movs	r2, #67	; 0x43
 800a2d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a2d2:	4b03      	ldr	r3, [pc, #12]	; (800a2e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bc80      	pop	{r7}
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	20000060 	.word	0x20000060

0800a2e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2243      	movs	r2, #67	; 0x43
 800a2f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a2f2:	4b03      	ldr	r3, [pc, #12]	; (800a300 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bc80      	pop	{r7}
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	200000e8 	.word	0x200000e8

0800a304 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	220a      	movs	r2, #10
 800a310:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a312:	4b03      	ldr	r3, [pc, #12]	; (800a320 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a314:	4618      	mov	r0, r3
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	bc80      	pop	{r7}
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	2000001c 	.word	0x2000001c

0800a324 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a32e:	2302      	movs	r3, #2
 800a330:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d005      	beq.n	800a344 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a344:	7bfb      	ldrb	r3, [r7, #15]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bc80      	pop	{r7}
 800a34e:	4770      	bx	lr

0800a350 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a350:	b480      	push	{r7}
 800a352:	b087      	sub	sp, #28
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	4613      	mov	r3, r2
 800a35c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a364:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	68ba      	ldr	r2, [r7, #8]
 800a36a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a36e:	88fa      	ldrh	r2, [r7, #6]
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	371c      	adds	r7, #28
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bc80      	pop	{r7}
 800a380:	4770      	bx	lr

0800a382 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a382:	b480      	push	{r7}
 800a384:	b085      	sub	sp, #20
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a392:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bc80      	pop	{r7}
 800a3a6:	4770      	bx	lr

0800a3a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d01c      	beq.n	800a3fc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d115      	bne.n	800a3f8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	2181      	movs	r1, #129	; 0x81
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f002 f81f 	bl	800c432 <USBD_LL_Transmit>

      return USBD_OK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	e002      	b.n	800a3fe <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e000      	b.n	800a3fe <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a3fc:	2302      	movs	r3, #2
  }
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a414:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d017      	beq.n	800a450 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	7c1b      	ldrb	r3, [r3, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d109      	bne.n	800a43c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a42e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a432:	2101      	movs	r1, #1
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f002 f81f 	bl	800c478 <USBD_LL_PrepareReceive>
 800a43a:	e007      	b.n	800a44c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a442:	2340      	movs	r3, #64	; 0x40
 800a444:	2101      	movs	r1, #1
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f002 f816 	bl	800c478 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	e000      	b.n	800a452 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a450:	2302      	movs	r3, #2
  }
}
 800a452:	4618      	mov	r0, r3
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b084      	sub	sp, #16
 800a45e:	af00      	add	r7, sp, #0
 800a460:	60f8      	str	r0, [r7, #12]
 800a462:	60b9      	str	r1, [r7, #8]
 800a464:	4613      	mov	r3, r2
 800a466:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d101      	bne.n	800a472 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a46e:	2302      	movs	r3, #2
 800a470:	e01a      	b.n	800a4a8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d003      	beq.n	800a484 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d003      	beq.n	800a492 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	79fa      	ldrb	r2, [r7, #7]
 800a49e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f001 fe83 	bl	800c1ac <USBD_LL_Init>

  return USBD_OK;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d006      	beq.n	800a4d2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	73fb      	strb	r3, [r7, #15]
 800a4d0:	e001      	b.n	800a4d6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bc80      	pop	{r7}
 800a4e0:	4770      	bx	lr

0800a4e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f001 feb8 	bl	800c260 <USBD_LL_Start>

  return USBD_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	bc80      	pop	{r7}
 800a50c:	4770      	bx	lr

0800a50e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	460b      	mov	r3, r1
 800a518:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a51a:	2302      	movs	r3, #2
 800a51c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00c      	beq.n	800a542 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	78fa      	ldrb	r2, [r7, #3]
 800a532:	4611      	mov	r1, r2
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	4798      	blx	r3
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d101      	bne.n	800a542 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a542:	7bfb      	ldrb	r3, [r7, #15]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	460b      	mov	r3, r1
 800a556:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	78fa      	ldrb	r2, [r7, #3]
 800a562:	4611      	mov	r1, r2
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	4798      	blx	r3

  return USBD_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	4618      	mov	r0, r3
 800a586:	f000 fed8 	bl	800b33a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a598:	461a      	mov	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a5a6:	f003 031f 	and.w	r3, r3, #31
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d016      	beq.n	800a5dc <USBD_LL_SetupStage+0x6a>
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d81c      	bhi.n	800a5ec <USBD_LL_SetupStage+0x7a>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d002      	beq.n	800a5bc <USBD_LL_SetupStage+0x4a>
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d008      	beq.n	800a5cc <USBD_LL_SetupStage+0x5a>
 800a5ba:	e017      	b.n	800a5ec <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f9cb 	bl	800a960 <USBD_StdDevReq>
      break;
 800a5ca:	e01a      	b.n	800a602 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fa2d 	bl	800aa34 <USBD_StdItfReq>
      break;
 800a5da:	e012      	b.n	800a602 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fa6d 	bl	800aac4 <USBD_StdEPReq>
      break;
 800a5ea:	e00a      	b.n	800a602 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a5f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f001 fe90 	bl	800c320 <USBD_LL_StallEP>
      break;
 800a600:	bf00      	nop
  }

  return USBD_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	460b      	mov	r3, r1
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a61a:	7afb      	ldrb	r3, [r7, #11]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d14b      	bne.n	800a6b8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a626:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d134      	bne.n	800a69c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d919      	bls.n	800a672 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	68da      	ldr	r2, [r3, #12]
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	1ad2      	subs	r2, r2, r3
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a654:	429a      	cmp	r2, r3
 800a656:	d203      	bcs.n	800a660 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	e002      	b.n	800a666 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a664:	b29b      	uxth	r3, r3
 800a666:	461a      	mov	r2, r3
 800a668:	6879      	ldr	r1, [r7, #4]
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f000 ff57 	bl	800b51e <USBD_CtlContinueRx>
 800a670:	e038      	b.n	800a6e4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00a      	beq.n	800a694 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a684:	2b03      	cmp	r3, #3
 800a686:	d105      	bne.n	800a694 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 ff54 	bl	800b542 <USBD_CtlSendStatus>
 800a69a:	e023      	b.n	800a6e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6a2:	2b05      	cmp	r3, #5
 800a6a4:	d11e      	bne.n	800a6e4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f001 fe35 	bl	800c320 <USBD_LL_StallEP>
 800a6b6:	e015      	b.n	800a6e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00d      	beq.n	800a6e0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a6ca:	2b03      	cmp	r3, #3
 800a6cc:	d108      	bne.n	800a6e0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	7afa      	ldrb	r2, [r7, #11]
 800a6d8:	4611      	mov	r1, r2
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	4798      	blx	r3
 800a6de:	e001      	b.n	800a6e4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	e000      	b.n	800a6e6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b086      	sub	sp, #24
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	60f8      	str	r0, [r7, #12]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	607a      	str	r2, [r7, #4]
 800a6fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a6fc:	7afb      	ldrb	r3, [r7, #11]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d17f      	bne.n	800a802 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3314      	adds	r3, #20
 800a706:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d15c      	bne.n	800a7cc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	68da      	ldr	r2, [r3, #12]
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d915      	bls.n	800a74a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	68da      	ldr	r2, [r3, #12]
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	1ad2      	subs	r2, r2, r3
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	b29b      	uxth	r3, r3
 800a732:	461a      	mov	r2, r3
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f000 fec1 	bl	800b4be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a73c:	2300      	movs	r3, #0
 800a73e:	2200      	movs	r2, #0
 800a740:	2100      	movs	r1, #0
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f001 fe98 	bl	800c478 <USBD_LL_PrepareReceive>
 800a748:	e04e      	b.n	800a7e8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	6912      	ldr	r2, [r2, #16]
 800a752:	fbb3 f1f2 	udiv	r1, r3, r2
 800a756:	fb02 f201 	mul.w	r2, r2, r1
 800a75a:	1a9b      	subs	r3, r3, r2
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d11c      	bne.n	800a79a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	689a      	ldr	r2, [r3, #8]
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a768:	429a      	cmp	r2, r3
 800a76a:	d316      	bcc.n	800a79a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	689a      	ldr	r2, [r3, #8]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a776:	429a      	cmp	r2, r3
 800a778:	d20f      	bcs.n	800a79a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a77a:	2200      	movs	r2, #0
 800a77c:	2100      	movs	r1, #0
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 fe9d 	bl	800b4be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a78c:	2300      	movs	r3, #0
 800a78e:	2200      	movs	r2, #0
 800a790:	2100      	movs	r1, #0
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f001 fe70 	bl	800c478 <USBD_LL_PrepareReceive>
 800a798:	e026      	b.n	800a7e8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00a      	beq.n	800a7bc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a7ac:	2b03      	cmp	r3, #3
 800a7ae:	d105      	bne.n	800a7bc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a7bc:	2180      	movs	r1, #128	; 0x80
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f001 fdae 	bl	800c320 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f000 fecf 	bl	800b568 <USBD_CtlReceiveStatus>
 800a7ca:	e00d      	b.n	800a7e8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7d2:	2b04      	cmp	r3, #4
 800a7d4:	d004      	beq.n	800a7e0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d103      	bne.n	800a7e8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a7e0:	2180      	movs	r1, #128	; 0x80
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f001 fd9c 	bl	800c320 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d11d      	bne.n	800a82e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f7ff fe81 	bl	800a4fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a800:	e015      	b.n	800a82e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00d      	beq.n	800a82a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a814:	2b03      	cmp	r3, #3
 800a816:	d108      	bne.n	800a82a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	7afa      	ldrb	r2, [r7, #11]
 800a822:	4611      	mov	r1, r2
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	4798      	blx	r3
 800a828:	e001      	b.n	800a82e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a82a:	2302      	movs	r3, #2
 800a82c:	e000      	b.n	800a830 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3718      	adds	r7, #24
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a840:	2340      	movs	r3, #64	; 0x40
 800a842:	2200      	movs	r2, #0
 800a844:	2100      	movs	r1, #0
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f001 fd25 	bl	800c296 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2240      	movs	r2, #64	; 0x40
 800a858:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a85c:	2340      	movs	r3, #64	; 0x40
 800a85e:	2200      	movs	r2, #0
 800a860:	2180      	movs	r1, #128	; 0x80
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f001 fd17 	bl	800c296 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2240      	movs	r2, #64	; 0x40
 800a872:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d009      	beq.n	800a8b0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	6852      	ldr	r2, [r2, #4]
 800a8a8:	b2d2      	uxtb	r2, r2
 800a8aa:	4611      	mov	r1, r2
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	4798      	blx	r3
  }

  return USBD_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b083      	sub	sp, #12
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	78fa      	ldrb	r2, [r7, #3]
 800a8ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bc80      	pop	{r7}
 800a8d6:	4770      	bx	lr

0800a8d8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2204      	movs	r2, #4
 800a8f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bc80      	pop	{r7}
 800a8fe:	4770      	bx	lr

0800a900 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a90e:	2b04      	cmp	r3, #4
 800a910:	d105      	bne.n	800a91e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	bc80      	pop	{r7}
 800a928:	4770      	bx	lr

0800a92a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b082      	sub	sp, #8
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a938:	2b03      	cmp	r3, #3
 800a93a:	d10b      	bne.n	800a954 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a942:	69db      	ldr	r3, [r3, #28]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d005      	beq.n	800a954 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a94e:	69db      	ldr	r3, [r3, #28]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
	...

0800a960 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a976:	2b40      	cmp	r3, #64	; 0x40
 800a978:	d005      	beq.n	800a986 <USBD_StdDevReq+0x26>
 800a97a:	2b40      	cmp	r3, #64	; 0x40
 800a97c:	d84f      	bhi.n	800aa1e <USBD_StdDevReq+0xbe>
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d009      	beq.n	800a996 <USBD_StdDevReq+0x36>
 800a982:	2b20      	cmp	r3, #32
 800a984:	d14b      	bne.n	800aa1e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	4798      	blx	r3
      break;
 800a994:	e048      	b.n	800aa28 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	785b      	ldrb	r3, [r3, #1]
 800a99a:	2b09      	cmp	r3, #9
 800a99c:	d839      	bhi.n	800aa12 <USBD_StdDevReq+0xb2>
 800a99e:	a201      	add	r2, pc, #4	; (adr r2, 800a9a4 <USBD_StdDevReq+0x44>)
 800a9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a4:	0800a9f5 	.word	0x0800a9f5
 800a9a8:	0800aa09 	.word	0x0800aa09
 800a9ac:	0800aa13 	.word	0x0800aa13
 800a9b0:	0800a9ff 	.word	0x0800a9ff
 800a9b4:	0800aa13 	.word	0x0800aa13
 800a9b8:	0800a9d7 	.word	0x0800a9d7
 800a9bc:	0800a9cd 	.word	0x0800a9cd
 800a9c0:	0800aa13 	.word	0x0800aa13
 800a9c4:	0800a9eb 	.word	0x0800a9eb
 800a9c8:	0800a9e1 	.word	0x0800a9e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a9cc:	6839      	ldr	r1, [r7, #0]
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f9dc 	bl	800ad8c <USBD_GetDescriptor>
          break;
 800a9d4:	e022      	b.n	800aa1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a9d6:	6839      	ldr	r1, [r7, #0]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fb3f 	bl	800b05c <USBD_SetAddress>
          break;
 800a9de:	e01d      	b.n	800aa1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fb7e 	bl	800b0e4 <USBD_SetConfig>
          break;
 800a9e8:	e018      	b.n	800aa1c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 fc07 	bl	800b200 <USBD_GetConfig>
          break;
 800a9f2:	e013      	b.n	800aa1c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a9f4:	6839      	ldr	r1, [r7, #0]
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 fc37 	bl	800b26a <USBD_GetStatus>
          break;
 800a9fc:	e00e      	b.n	800aa1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fc65 	bl	800b2d0 <USBD_SetFeature>
          break;
 800aa06:	e009      	b.n	800aa1c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fc74 	bl	800b2f8 <USBD_ClrFeature>
          break;
 800aa10:	e004      	b.n	800aa1c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fccc 	bl	800b3b2 <USBD_CtlError>
          break;
 800aa1a:	bf00      	nop
      }
      break;
 800aa1c:	e004      	b.n	800aa28 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fcc6 	bl	800b3b2 <USBD_CtlError>
      break;
 800aa26:	bf00      	nop
  }

  return ret;
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop

0800aa34 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa4a:	2b40      	cmp	r3, #64	; 0x40
 800aa4c:	d005      	beq.n	800aa5a <USBD_StdItfReq+0x26>
 800aa4e:	2b40      	cmp	r3, #64	; 0x40
 800aa50:	d82e      	bhi.n	800aab0 <USBD_StdItfReq+0x7c>
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <USBD_StdItfReq+0x26>
 800aa56:	2b20      	cmp	r3, #32
 800aa58:	d12a      	bne.n	800aab0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa60:	3b01      	subs	r3, #1
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d81d      	bhi.n	800aaa2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	889b      	ldrh	r3, [r3, #4]
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d813      	bhi.n	800aa98 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	4798      	blx	r3
 800aa7e:	4603      	mov	r3, r0
 800aa80:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	88db      	ldrh	r3, [r3, #6]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d110      	bne.n	800aaac <USBD_StdItfReq+0x78>
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10d      	bne.n	800aaac <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 fd56 	bl	800b542 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa96:	e009      	b.n	800aaac <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fc89 	bl	800b3b2 <USBD_CtlError>
          break;
 800aaa0:	e004      	b.n	800aaac <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800aaa2:	6839      	ldr	r1, [r7, #0]
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fc84 	bl	800b3b2 <USBD_CtlError>
          break;
 800aaaa:	e000      	b.n	800aaae <USBD_StdItfReq+0x7a>
          break;
 800aaac:	bf00      	nop
      }
      break;
 800aaae:	e004      	b.n	800aaba <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800aab0:	6839      	ldr	r1, [r7, #0]
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fc7d 	bl	800b3b2 <USBD_CtlError>
      break;
 800aab8:	bf00      	nop
  }

  return USBD_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	889b      	ldrh	r3, [r3, #4]
 800aad6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aae0:	2b40      	cmp	r3, #64	; 0x40
 800aae2:	d007      	beq.n	800aaf4 <USBD_StdEPReq+0x30>
 800aae4:	2b40      	cmp	r3, #64	; 0x40
 800aae6:	f200 8146 	bhi.w	800ad76 <USBD_StdEPReq+0x2b2>
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00a      	beq.n	800ab04 <USBD_StdEPReq+0x40>
 800aaee:	2b20      	cmp	r3, #32
 800aaf0:	f040 8141 	bne.w	800ad76 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	4798      	blx	r3
      break;
 800ab02:	e13d      	b.n	800ad80 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab0c:	2b20      	cmp	r3, #32
 800ab0e:	d10a      	bne.n	800ab26 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	4798      	blx	r3
 800ab1e:	4603      	mov	r3, r0
 800ab20:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ab22:	7bfb      	ldrb	r3, [r7, #15]
 800ab24:	e12d      	b.n	800ad82 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	785b      	ldrb	r3, [r3, #1]
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d007      	beq.n	800ab3e <USBD_StdEPReq+0x7a>
 800ab2e:	2b03      	cmp	r3, #3
 800ab30:	f300 811b 	bgt.w	800ad6a <USBD_StdEPReq+0x2a6>
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d072      	beq.n	800ac1e <USBD_StdEPReq+0x15a>
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d03a      	beq.n	800abb2 <USBD_StdEPReq+0xee>
 800ab3c:	e115      	b.n	800ad6a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d002      	beq.n	800ab4e <USBD_StdEPReq+0x8a>
 800ab48:	2b03      	cmp	r3, #3
 800ab4a:	d015      	beq.n	800ab78 <USBD_StdEPReq+0xb4>
 800ab4c:	e02b      	b.n	800aba6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00c      	beq.n	800ab6e <USBD_StdEPReq+0xaa>
 800ab54:	7bbb      	ldrb	r3, [r7, #14]
 800ab56:	2b80      	cmp	r3, #128	; 0x80
 800ab58:	d009      	beq.n	800ab6e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ab5a:	7bbb      	ldrb	r3, [r7, #14]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f001 fbde 	bl	800c320 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ab64:	2180      	movs	r1, #128	; 0x80
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f001 fbda 	bl	800c320 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab6c:	e020      	b.n	800abb0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fc1e 	bl	800b3b2 <USBD_CtlError>
              break;
 800ab76:	e01b      	b.n	800abb0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	885b      	ldrh	r3, [r3, #2]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10e      	bne.n	800ab9e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00b      	beq.n	800ab9e <USBD_StdEPReq+0xda>
 800ab86:	7bbb      	ldrb	r3, [r7, #14]
 800ab88:	2b80      	cmp	r3, #128	; 0x80
 800ab8a:	d008      	beq.n	800ab9e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	88db      	ldrh	r3, [r3, #6]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d104      	bne.n	800ab9e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	4619      	mov	r1, r3
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f001 fbc1 	bl	800c320 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 fccf 	bl	800b542 <USBD_CtlSendStatus>

              break;
 800aba4:	e004      	b.n	800abb0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 fc02 	bl	800b3b2 <USBD_CtlError>
              break;
 800abae:	bf00      	nop
          }
          break;
 800abb0:	e0e0      	b.n	800ad74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d002      	beq.n	800abc2 <USBD_StdEPReq+0xfe>
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d015      	beq.n	800abec <USBD_StdEPReq+0x128>
 800abc0:	e026      	b.n	800ac10 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abc2:	7bbb      	ldrb	r3, [r7, #14]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00c      	beq.n	800abe2 <USBD_StdEPReq+0x11e>
 800abc8:	7bbb      	ldrb	r3, [r7, #14]
 800abca:	2b80      	cmp	r3, #128	; 0x80
 800abcc:	d009      	beq.n	800abe2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800abce:	7bbb      	ldrb	r3, [r7, #14]
 800abd0:	4619      	mov	r1, r3
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f001 fba4 	bl	800c320 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800abd8:	2180      	movs	r1, #128	; 0x80
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f001 fba0 	bl	800c320 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abe0:	e01c      	b.n	800ac1c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fbe4 	bl	800b3b2 <USBD_CtlError>
              break;
 800abea:	e017      	b.n	800ac1c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	885b      	ldrh	r3, [r3, #2]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d112      	bne.n	800ac1a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800abf4:	7bbb      	ldrb	r3, [r7, #14]
 800abf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d004      	beq.n	800ac08 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800abfe:	7bbb      	ldrb	r3, [r7, #14]
 800ac00:	4619      	mov	r1, r3
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f001 fbab 	bl	800c35e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 fc9a 	bl	800b542 <USBD_CtlSendStatus>
              }
              break;
 800ac0e:	e004      	b.n	800ac1a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ac10:	6839      	ldr	r1, [r7, #0]
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 fbcd 	bl	800b3b2 <USBD_CtlError>
              break;
 800ac18:	e000      	b.n	800ac1c <USBD_StdEPReq+0x158>
              break;
 800ac1a:	bf00      	nop
          }
          break;
 800ac1c:	e0aa      	b.n	800ad74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d002      	beq.n	800ac2e <USBD_StdEPReq+0x16a>
 800ac28:	2b03      	cmp	r3, #3
 800ac2a:	d032      	beq.n	800ac92 <USBD_StdEPReq+0x1ce>
 800ac2c:	e097      	b.n	800ad5e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac2e:	7bbb      	ldrb	r3, [r7, #14]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d007      	beq.n	800ac44 <USBD_StdEPReq+0x180>
 800ac34:	7bbb      	ldrb	r3, [r7, #14]
 800ac36:	2b80      	cmp	r3, #128	; 0x80
 800ac38:	d004      	beq.n	800ac44 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fbb8 	bl	800b3b2 <USBD_CtlError>
                break;
 800ac42:	e091      	b.n	800ad68 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	da0b      	bge.n	800ac64 <USBD_StdEPReq+0x1a0>
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac52:	4613      	mov	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	3310      	adds	r3, #16
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	4413      	add	r3, r2
 800ac60:	3304      	adds	r3, #4
 800ac62:	e00b      	b.n	800ac7c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
 800ac66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	4413      	add	r3, r2
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	2200      	movs	r2, #0
 800ac82:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	2202      	movs	r2, #2
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fbfb 	bl	800b486 <USBD_CtlSendData>
              break;
 800ac90:	e06a      	b.n	800ad68 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	da11      	bge.n	800acbe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
 800ac9c:	f003 020f 	and.w	r2, r3, #15
 800aca0:	6879      	ldr	r1, [r7, #4]
 800aca2:	4613      	mov	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	4413      	add	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	440b      	add	r3, r1
 800acac:	3318      	adds	r3, #24
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d117      	bne.n	800ace4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800acb4:	6839      	ldr	r1, [r7, #0]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fb7b 	bl	800b3b2 <USBD_CtlError>
                  break;
 800acbc:	e054      	b.n	800ad68 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800acbe:	7bbb      	ldrb	r3, [r7, #14]
 800acc0:	f003 020f 	and.w	r2, r3, #15
 800acc4:	6879      	ldr	r1, [r7, #4]
 800acc6:	4613      	mov	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	440b      	add	r3, r1
 800acd0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d104      	bne.n	800ace4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fb68 	bl	800b3b2 <USBD_CtlError>
                  break;
 800ace2:	e041      	b.n	800ad68 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ace4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	da0b      	bge.n	800ad04 <USBD_StdEPReq+0x240>
 800acec:	7bbb      	ldrb	r3, [r7, #14]
 800acee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acf2:	4613      	mov	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4413      	add	r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	3310      	adds	r3, #16
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	4413      	add	r3, r2
 800ad00:	3304      	adds	r3, #4
 800ad02:	e00b      	b.n	800ad1c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad04:	7bbb      	ldrb	r3, [r7, #14]
 800ad06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4413      	add	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	4413      	add	r3, r2
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad1e:	7bbb      	ldrb	r3, [r7, #14]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <USBD_StdEPReq+0x266>
 800ad24:	7bbb      	ldrb	r3, [r7, #14]
 800ad26:	2b80      	cmp	r3, #128	; 0x80
 800ad28:	d103      	bne.n	800ad32 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	601a      	str	r2, [r3, #0]
 800ad30:	e00e      	b.n	800ad50 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ad32:	7bbb      	ldrb	r3, [r7, #14]
 800ad34:	4619      	mov	r1, r3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f001 fb30 	bl	800c39c <USBD_LL_IsStallEP>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d003      	beq.n	800ad4a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2201      	movs	r2, #1
 800ad46:	601a      	str	r2, [r3, #0]
 800ad48:	e002      	b.n	800ad50 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	2202      	movs	r2, #2
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fb95 	bl	800b486 <USBD_CtlSendData>
              break;
 800ad5c:	e004      	b.n	800ad68 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fb26 	bl	800b3b2 <USBD_CtlError>
              break;
 800ad66:	bf00      	nop
          }
          break;
 800ad68:	e004      	b.n	800ad74 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ad6a:	6839      	ldr	r1, [r7, #0]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fb20 	bl	800b3b2 <USBD_CtlError>
          break;
 800ad72:	bf00      	nop
      }
      break;
 800ad74:	e004      	b.n	800ad80 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 fb1a 	bl	800b3b2 <USBD_CtlError>
      break;
 800ad7e:	bf00      	nop
  }

  return ret;
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
	...

0800ad8c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad96:	2300      	movs	r3, #0
 800ad98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	885b      	ldrh	r3, [r3, #2]
 800ada6:	0a1b      	lsrs	r3, r3, #8
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	3b01      	subs	r3, #1
 800adac:	2b06      	cmp	r3, #6
 800adae:	f200 8128 	bhi.w	800b002 <USBD_GetDescriptor+0x276>
 800adb2:	a201      	add	r2, pc, #4	; (adr r2, 800adb8 <USBD_GetDescriptor+0x2c>)
 800adb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb8:	0800add5 	.word	0x0800add5
 800adbc:	0800aded 	.word	0x0800aded
 800adc0:	0800ae2d 	.word	0x0800ae2d
 800adc4:	0800b003 	.word	0x0800b003
 800adc8:	0800b003 	.word	0x0800b003
 800adcc:	0800afa3 	.word	0x0800afa3
 800add0:	0800afcf 	.word	0x0800afcf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	7c12      	ldrb	r2, [r2, #16]
 800ade0:	f107 0108 	add.w	r1, r7, #8
 800ade4:	4610      	mov	r0, r2
 800ade6:	4798      	blx	r3
 800ade8:	60f8      	str	r0, [r7, #12]
      break;
 800adea:	e112      	b.n	800b012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	7c1b      	ldrb	r3, [r3, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10d      	bne.n	800ae10 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfc:	f107 0208 	add.w	r2, r7, #8
 800ae00:	4610      	mov	r0, r2
 800ae02:	4798      	blx	r3
 800ae04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae0e:	e100      	b.n	800b012 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae18:	f107 0208 	add.w	r2, r7, #8
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	4798      	blx	r3
 800ae20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3301      	adds	r3, #1
 800ae26:	2202      	movs	r2, #2
 800ae28:	701a      	strb	r2, [r3, #0]
      break;
 800ae2a:	e0f2      	b.n	800b012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	885b      	ldrh	r3, [r3, #2]
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	2b05      	cmp	r3, #5
 800ae34:	f200 80ac 	bhi.w	800af90 <USBD_GetDescriptor+0x204>
 800ae38:	a201      	add	r2, pc, #4	; (adr r2, 800ae40 <USBD_GetDescriptor+0xb4>)
 800ae3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae3e:	bf00      	nop
 800ae40:	0800ae59 	.word	0x0800ae59
 800ae44:	0800ae8d 	.word	0x0800ae8d
 800ae48:	0800aec1 	.word	0x0800aec1
 800ae4c:	0800aef5 	.word	0x0800aef5
 800ae50:	0800af29 	.word	0x0800af29
 800ae54:	0800af5d 	.word	0x0800af5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00b      	beq.n	800ae7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	7c12      	ldrb	r2, [r2, #16]
 800ae70:	f107 0108 	add.w	r1, r7, #8
 800ae74:	4610      	mov	r0, r2
 800ae76:	4798      	blx	r3
 800ae78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae7a:	e091      	b.n	800afa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fa97 	bl	800b3b2 <USBD_CtlError>
            err++;
 800ae84:	7afb      	ldrb	r3, [r7, #11]
 800ae86:	3301      	adds	r3, #1
 800ae88:	72fb      	strb	r3, [r7, #11]
          break;
 800ae8a:	e089      	b.n	800afa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00b      	beq.n	800aeb0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	7c12      	ldrb	r2, [r2, #16]
 800aea4:	f107 0108 	add.w	r1, r7, #8
 800aea8:	4610      	mov	r0, r2
 800aeaa:	4798      	blx	r3
 800aeac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeae:	e077      	b.n	800afa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fa7d 	bl	800b3b2 <USBD_CtlError>
            err++;
 800aeb8:	7afb      	ldrb	r3, [r7, #11]
 800aeba:	3301      	adds	r3, #1
 800aebc:	72fb      	strb	r3, [r7, #11]
          break;
 800aebe:	e06f      	b.n	800afa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00b      	beq.n	800aee4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	7c12      	ldrb	r2, [r2, #16]
 800aed8:	f107 0108 	add.w	r1, r7, #8
 800aedc:	4610      	mov	r0, r2
 800aede:	4798      	blx	r3
 800aee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aee2:	e05d      	b.n	800afa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fa63 	bl	800b3b2 <USBD_CtlError>
            err++;
 800aeec:	7afb      	ldrb	r3, [r7, #11]
 800aeee:	3301      	adds	r3, #1
 800aef0:	72fb      	strb	r3, [r7, #11]
          break;
 800aef2:	e055      	b.n	800afa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00b      	beq.n	800af18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	7c12      	ldrb	r2, [r2, #16]
 800af0c:	f107 0108 	add.w	r1, r7, #8
 800af10:	4610      	mov	r0, r2
 800af12:	4798      	blx	r3
 800af14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af16:	e043      	b.n	800afa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fa49 	bl	800b3b2 <USBD_CtlError>
            err++;
 800af20:	7afb      	ldrb	r3, [r7, #11]
 800af22:	3301      	adds	r3, #1
 800af24:	72fb      	strb	r3, [r7, #11]
          break;
 800af26:	e03b      	b.n	800afa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00b      	beq.n	800af4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af3a:	695b      	ldr	r3, [r3, #20]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	7c12      	ldrb	r2, [r2, #16]
 800af40:	f107 0108 	add.w	r1, r7, #8
 800af44:	4610      	mov	r0, r2
 800af46:	4798      	blx	r3
 800af48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af4a:	e029      	b.n	800afa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fa2f 	bl	800b3b2 <USBD_CtlError>
            err++;
 800af54:	7afb      	ldrb	r3, [r7, #11]
 800af56:	3301      	adds	r3, #1
 800af58:	72fb      	strb	r3, [r7, #11]
          break;
 800af5a:	e021      	b.n	800afa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00b      	beq.n	800af80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af6e:	699b      	ldr	r3, [r3, #24]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	7c12      	ldrb	r2, [r2, #16]
 800af74:	f107 0108 	add.w	r1, r7, #8
 800af78:	4610      	mov	r0, r2
 800af7a:	4798      	blx	r3
 800af7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af7e:	e00f      	b.n	800afa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fa15 	bl	800b3b2 <USBD_CtlError>
            err++;
 800af88:	7afb      	ldrb	r3, [r7, #11]
 800af8a:	3301      	adds	r3, #1
 800af8c:	72fb      	strb	r3, [r7, #11]
          break;
 800af8e:	e007      	b.n	800afa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800af90:	6839      	ldr	r1, [r7, #0]
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fa0d 	bl	800b3b2 <USBD_CtlError>
          err++;
 800af98:	7afb      	ldrb	r3, [r7, #11]
 800af9a:	3301      	adds	r3, #1
 800af9c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800af9e:	e038      	b.n	800b012 <USBD_GetDescriptor+0x286>
 800afa0:	e037      	b.n	800b012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	7c1b      	ldrb	r3, [r3, #16]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d109      	bne.n	800afbe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afb2:	f107 0208 	add.w	r2, r7, #8
 800afb6:	4610      	mov	r0, r2
 800afb8:	4798      	blx	r3
 800afba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afbc:	e029      	b.n	800b012 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f9f6 	bl	800b3b2 <USBD_CtlError>
        err++;
 800afc6:	7afb      	ldrb	r3, [r7, #11]
 800afc8:	3301      	adds	r3, #1
 800afca:	72fb      	strb	r3, [r7, #11]
      break;
 800afcc:	e021      	b.n	800b012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	7c1b      	ldrb	r3, [r3, #16]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10d      	bne.n	800aff2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afde:	f107 0208 	add.w	r2, r7, #8
 800afe2:	4610      	mov	r0, r2
 800afe4:	4798      	blx	r3
 800afe6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	3301      	adds	r3, #1
 800afec:	2207      	movs	r2, #7
 800afee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aff0:	e00f      	b.n	800b012 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f9dc 	bl	800b3b2 <USBD_CtlError>
        err++;
 800affa:	7afb      	ldrb	r3, [r7, #11]
 800affc:	3301      	adds	r3, #1
 800affe:	72fb      	strb	r3, [r7, #11]
      break;
 800b000:	e007      	b.n	800b012 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b002:	6839      	ldr	r1, [r7, #0]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 f9d4 	bl	800b3b2 <USBD_CtlError>
      err++;
 800b00a:	7afb      	ldrb	r3, [r7, #11]
 800b00c:	3301      	adds	r3, #1
 800b00e:	72fb      	strb	r3, [r7, #11]
      break;
 800b010:	bf00      	nop
  }

  if (err != 0U)
 800b012:	7afb      	ldrb	r3, [r7, #11]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d11c      	bne.n	800b052 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b018:	893b      	ldrh	r3, [r7, #8]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d011      	beq.n	800b042 <USBD_GetDescriptor+0x2b6>
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	88db      	ldrh	r3, [r3, #6]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00d      	beq.n	800b042 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	88da      	ldrh	r2, [r3, #6]
 800b02a:	893b      	ldrh	r3, [r7, #8]
 800b02c:	4293      	cmp	r3, r2
 800b02e:	bf28      	it	cs
 800b030:	4613      	movcs	r3, r2
 800b032:	b29b      	uxth	r3, r3
 800b034:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b036:	893b      	ldrh	r3, [r7, #8]
 800b038:	461a      	mov	r2, r3
 800b03a:	68f9      	ldr	r1, [r7, #12]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 fa22 	bl	800b486 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	88db      	ldrh	r3, [r3, #6]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d104      	bne.n	800b054 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fa79 	bl	800b542 <USBD_CtlSendStatus>
 800b050:	e000      	b.n	800b054 <USBD_GetDescriptor+0x2c8>
    return;
 800b052:	bf00      	nop
    }
  }
}
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop

0800b05c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	889b      	ldrh	r3, [r3, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d130      	bne.n	800b0d0 <USBD_SetAddress+0x74>
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	88db      	ldrh	r3, [r3, #6]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d12c      	bne.n	800b0d0 <USBD_SetAddress+0x74>
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	885b      	ldrh	r3, [r3, #2]
 800b07a:	2b7f      	cmp	r3, #127	; 0x7f
 800b07c:	d828      	bhi.n	800b0d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	885b      	ldrh	r3, [r3, #2]
 800b082:	b2db      	uxtb	r3, r3
 800b084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b088:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b090:	2b03      	cmp	r3, #3
 800b092:	d104      	bne.n	800b09e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b094:	6839      	ldr	r1, [r7, #0]
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f98b 	bl	800b3b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b09c:	e01d      	b.n	800b0da <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	7bfa      	ldrb	r2, [r7, #15]
 800b0a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b0a6:	7bfb      	ldrb	r3, [r7, #15]
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f001 f9a2 	bl	800c3f4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fa46 	bl	800b542 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b0b6:	7bfb      	ldrb	r3, [r7, #15]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d004      	beq.n	800b0c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2202      	movs	r2, #2
 800b0c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0c4:	e009      	b.n	800b0da <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ce:	e004      	b.n	800b0da <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f96d 	bl	800b3b2 <USBD_CtlError>
  }
}
 800b0d8:	bf00      	nop
 800b0da:	bf00      	nop
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
	...

0800b0e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	885b      	ldrh	r3, [r3, #2]
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	4b41      	ldr	r3, [pc, #260]	; (800b1fc <USBD_SetConfig+0x118>)
 800b0f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b0f8:	4b40      	ldr	r3, [pc, #256]	; (800b1fc <USBD_SetConfig+0x118>)
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d904      	bls.n	800b10a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f955 	bl	800b3b2 <USBD_CtlError>
 800b108:	e075      	b.n	800b1f6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b110:	2b02      	cmp	r3, #2
 800b112:	d002      	beq.n	800b11a <USBD_SetConfig+0x36>
 800b114:	2b03      	cmp	r3, #3
 800b116:	d023      	beq.n	800b160 <USBD_SetConfig+0x7c>
 800b118:	e062      	b.n	800b1e0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b11a:	4b38      	ldr	r3, [pc, #224]	; (800b1fc <USBD_SetConfig+0x118>)
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d01a      	beq.n	800b158 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b122:	4b36      	ldr	r3, [pc, #216]	; (800b1fc <USBD_SetConfig+0x118>)
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	461a      	mov	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2203      	movs	r2, #3
 800b130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b134:	4b31      	ldr	r3, [pc, #196]	; (800b1fc <USBD_SetConfig+0x118>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7ff f9e7 	bl	800a50e <USBD_SetClassConfig>
 800b140:	4603      	mov	r3, r0
 800b142:	2b02      	cmp	r3, #2
 800b144:	d104      	bne.n	800b150 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f932 	bl	800b3b2 <USBD_CtlError>
            return;
 800b14e:	e052      	b.n	800b1f6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f9f6 	bl	800b542 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b156:	e04e      	b.n	800b1f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 f9f2 	bl	800b542 <USBD_CtlSendStatus>
        break;
 800b15e:	e04a      	b.n	800b1f6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b160:	4b26      	ldr	r3, [pc, #152]	; (800b1fc <USBD_SetConfig+0x118>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d112      	bne.n	800b18e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2202      	movs	r2, #2
 800b16c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b170:	4b22      	ldr	r3, [pc, #136]	; (800b1fc <USBD_SetConfig+0x118>)
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	461a      	mov	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b17a:	4b20      	ldr	r3, [pc, #128]	; (800b1fc <USBD_SetConfig+0x118>)
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	4619      	mov	r1, r3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7ff f9e3 	bl	800a54c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 f9db 	bl	800b542 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b18c:	e033      	b.n	800b1f6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b18e:	4b1b      	ldr	r3, [pc, #108]	; (800b1fc <USBD_SetConfig+0x118>)
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	461a      	mov	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d01d      	beq.n	800b1d8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f7ff f9d1 	bl	800a54c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b1aa:	4b14      	ldr	r3, [pc, #80]	; (800b1fc <USBD_SetConfig+0x118>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b1b4:	4b11      	ldr	r3, [pc, #68]	; (800b1fc <USBD_SetConfig+0x118>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7ff f9a7 	bl	800a50e <USBD_SetClassConfig>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d104      	bne.n	800b1d0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f8f2 	bl	800b3b2 <USBD_CtlError>
            return;
 800b1ce:	e012      	b.n	800b1f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f9b6 	bl	800b542 <USBD_CtlSendStatus>
        break;
 800b1d6:	e00e      	b.n	800b1f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f9b2 	bl	800b542 <USBD_CtlSendStatus>
        break;
 800b1de:	e00a      	b.n	800b1f6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 f8e5 	bl	800b3b2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b1e8:	4b04      	ldr	r3, [pc, #16]	; (800b1fc <USBD_SetConfig+0x118>)
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f7ff f9ac 	bl	800a54c <USBD_ClrClassConfig>
        break;
 800b1f4:	bf00      	nop
    }
  }
}
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	20000288 	.word	0x20000288

0800b200 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	88db      	ldrh	r3, [r3, #6]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d004      	beq.n	800b21c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f8cc 	bl	800b3b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b21a:	e022      	b.n	800b262 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b222:	2b02      	cmp	r3, #2
 800b224:	dc02      	bgt.n	800b22c <USBD_GetConfig+0x2c>
 800b226:	2b00      	cmp	r3, #0
 800b228:	dc03      	bgt.n	800b232 <USBD_GetConfig+0x32>
 800b22a:	e015      	b.n	800b258 <USBD_GetConfig+0x58>
 800b22c:	2b03      	cmp	r3, #3
 800b22e:	d00b      	beq.n	800b248 <USBD_GetConfig+0x48>
 800b230:	e012      	b.n	800b258 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	3308      	adds	r3, #8
 800b23c:	2201      	movs	r2, #1
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f920 	bl	800b486 <USBD_CtlSendData>
        break;
 800b246:	e00c      	b.n	800b262 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3304      	adds	r3, #4
 800b24c:	2201      	movs	r2, #1
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 f918 	bl	800b486 <USBD_CtlSendData>
        break;
 800b256:	e004      	b.n	800b262 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 f8a9 	bl	800b3b2 <USBD_CtlError>
        break;
 800b260:	bf00      	nop
}
 800b262:	bf00      	nop
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b082      	sub	sp, #8
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
 800b272:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b27a:	3b01      	subs	r3, #1
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d81e      	bhi.n	800b2be <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	88db      	ldrh	r3, [r3, #6]
 800b284:	2b02      	cmp	r3, #2
 800b286:	d004      	beq.n	800b292 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f891 	bl	800b3b2 <USBD_CtlError>
        break;
 800b290:	e01a      	b.n	800b2c8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2201      	movs	r2, #1
 800b296:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d005      	beq.n	800b2ae <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	f043 0202 	orr.w	r2, r3, #2
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	330c      	adds	r3, #12
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f8e5 	bl	800b486 <USBD_CtlSendData>
      break;
 800b2bc:	e004      	b.n	800b2c8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f876 	bl	800b3b2 <USBD_CtlError>
      break;
 800b2c6:	bf00      	nop
  }
}
 800b2c8:	bf00      	nop
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	885b      	ldrh	r3, [r3, #2]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d106      	bne.n	800b2f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f929 	bl	800b542 <USBD_CtlSendStatus>
  }
}
 800b2f0:	bf00      	nop
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b308:	3b01      	subs	r3, #1
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d80b      	bhi.n	800b326 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	885b      	ldrh	r3, [r3, #2]
 800b312:	2b01      	cmp	r3, #1
 800b314:	d10c      	bne.n	800b330 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f90f 	bl	800b542 <USBD_CtlSendStatus>
      }
      break;
 800b324:	e004      	b.n	800b330 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b326:	6839      	ldr	r1, [r7, #0]
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f842 	bl	800b3b2 <USBD_CtlError>
      break;
 800b32e:	e000      	b.n	800b332 <USBD_ClrFeature+0x3a>
      break;
 800b330:	bf00      	nop
  }
}
 800b332:	bf00      	nop
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b083      	sub	sp, #12
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	781a      	ldrb	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	785a      	ldrb	r2, [r3, #1]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	3302      	adds	r3, #2
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	b29a      	uxth	r2, r3
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	3303      	adds	r3, #3
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	b29b      	uxth	r3, r3
 800b364:	021b      	lsls	r3, r3, #8
 800b366:	b29b      	uxth	r3, r3
 800b368:	4413      	add	r3, r2
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	3304      	adds	r3, #4
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	b29a      	uxth	r2, r3
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	3305      	adds	r3, #5
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	b29b      	uxth	r3, r3
 800b380:	021b      	lsls	r3, r3, #8
 800b382:	b29b      	uxth	r3, r3
 800b384:	4413      	add	r3, r2
 800b386:	b29a      	uxth	r2, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	3306      	adds	r3, #6
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	b29a      	uxth	r2, r3
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	3307      	adds	r3, #7
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	021b      	lsls	r3, r3, #8
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	4413      	add	r3, r2
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	80da      	strh	r2, [r3, #6]

}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bc80      	pop	{r7}
 800b3b0:	4770      	bx	lr

0800b3b2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b082      	sub	sp, #8
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b3bc:	2180      	movs	r1, #128	; 0x80
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 ffae 	bl	800c320 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 ffaa 	bl	800c320 <USBD_LL_StallEP>
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d032      	beq.n	800b450 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f000 f834 	bl	800b458 <USBD_GetLen>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
 800b400:	1c5a      	adds	r2, r3, #1
 800b402:	75fa      	strb	r2, [r7, #23]
 800b404:	461a      	mov	r2, r3
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	4413      	add	r3, r2
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	7812      	ldrb	r2, [r2, #0]
 800b40e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b410:	7dfb      	ldrb	r3, [r7, #23]
 800b412:	1c5a      	adds	r2, r3, #1
 800b414:	75fa      	strb	r2, [r7, #23]
 800b416:	461a      	mov	r2, r3
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	4413      	add	r3, r2
 800b41c:	2203      	movs	r2, #3
 800b41e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b420:	e012      	b.n	800b448 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	1c5a      	adds	r2, r3, #1
 800b426:	60fa      	str	r2, [r7, #12]
 800b428:	7dfa      	ldrb	r2, [r7, #23]
 800b42a:	1c51      	adds	r1, r2, #1
 800b42c:	75f9      	strb	r1, [r7, #23]
 800b42e:	4611      	mov	r1, r2
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	440a      	add	r2, r1
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b438:	7dfb      	ldrb	r3, [r7, #23]
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	75fa      	strb	r2, [r7, #23]
 800b43e:	461a      	mov	r2, r3
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	4413      	add	r3, r2
 800b444:	2200      	movs	r2, #0
 800b446:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1e8      	bne.n	800b422 <USBD_GetString+0x4e>
    }
  }
}
 800b450:	bf00      	nop
 800b452:	3718      	adds	r7, #24
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b460:	2300      	movs	r3, #0
 800b462:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b464:	e005      	b.n	800b472 <USBD_GetLen+0x1a>
  {
    len++;
 800b466:	7bfb      	ldrb	r3, [r7, #15]
 800b468:	3301      	adds	r3, #1
 800b46a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	3301      	adds	r3, #1
 800b470:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1f5      	bne.n	800b466 <USBD_GetLen+0xe>
  }

  return len;
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3714      	adds	r7, #20
 800b480:	46bd      	mov	sp, r7
 800b482:	bc80      	pop	{r7}
 800b484:	4770      	bx	lr

0800b486 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b084      	sub	sp, #16
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	60f8      	str	r0, [r7, #12]
 800b48e:	60b9      	str	r1, [r7, #8]
 800b490:	4613      	mov	r3, r2
 800b492:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2202      	movs	r2, #2
 800b498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b49c:	88fa      	ldrh	r2, [r7, #6]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b4a2:	88fa      	ldrh	r2, [r7, #6]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4a8:	88fb      	ldrh	r3, [r7, #6]
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f000 ffbf 	bl	800c432 <USBD_LL_Transmit>

  return USBD_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b084      	sub	sp, #16
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	60f8      	str	r0, [r7, #12]
 800b4c6:	60b9      	str	r1, [r7, #8]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4cc:	88fb      	ldrh	r3, [r7, #6]
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f000 ffad 	bl	800c432 <USBD_LL_Transmit>

  return USBD_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b084      	sub	sp, #16
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	60f8      	str	r0, [r7, #12]
 800b4ea:	60b9      	str	r1, [r7, #8]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2203      	movs	r2, #3
 800b4f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b4f8:	88fa      	ldrh	r2, [r7, #6]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b500:	88fa      	ldrh	r2, [r7, #6]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b508:	88fb      	ldrh	r3, [r7, #6]
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	2100      	movs	r1, #0
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f000 ffb2 	bl	800c478 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b084      	sub	sp, #16
 800b522:	af00      	add	r7, sp, #0
 800b524:	60f8      	str	r0, [r7, #12]
 800b526:	60b9      	str	r1, [r7, #8]
 800b528:	4613      	mov	r3, r2
 800b52a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b52c:	88fb      	ldrh	r3, [r7, #6]
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	2100      	movs	r1, #0
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f000 ffa0 	bl	800c478 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b082      	sub	sp, #8
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2204      	movs	r2, #4
 800b54e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b552:	2300      	movs	r3, #0
 800b554:	2200      	movs	r2, #0
 800b556:	2100      	movs	r1, #0
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 ff6a 	bl	800c432 <USBD_LL_Transmit>

  return USBD_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2205      	movs	r2, #5
 800b574:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b578:	2300      	movs	r3, #0
 800b57a:	2200      	movs	r2, #0
 800b57c:	2100      	movs	r1, #0
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 ff7a 	bl	800c478 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
	...

0800b590 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b594:	2200      	movs	r2, #0
 800b596:	4912      	ldr	r1, [pc, #72]	; (800b5e0 <MX_USB_DEVICE_Init+0x50>)
 800b598:	4812      	ldr	r0, [pc, #72]	; (800b5e4 <MX_USB_DEVICE_Init+0x54>)
 800b59a:	f7fe ff5e 	bl	800a45a <USBD_Init>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d001      	beq.n	800b5a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b5a4:	f7f7 fe38 	bl	8003218 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b5a8:	490f      	ldr	r1, [pc, #60]	; (800b5e8 <MX_USB_DEVICE_Init+0x58>)
 800b5aa:	480e      	ldr	r0, [pc, #56]	; (800b5e4 <MX_USB_DEVICE_Init+0x54>)
 800b5ac:	f7fe ff80 	bl	800a4b0 <USBD_RegisterClass>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d001      	beq.n	800b5ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b5b6:	f7f7 fe2f 	bl	8003218 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b5ba:	490c      	ldr	r1, [pc, #48]	; (800b5ec <MX_USB_DEVICE_Init+0x5c>)
 800b5bc:	4809      	ldr	r0, [pc, #36]	; (800b5e4 <MX_USB_DEVICE_Init+0x54>)
 800b5be:	f7fe feb1 	bl	800a324 <USBD_CDC_RegisterInterface>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b5c8:	f7f7 fe26 	bl	8003218 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b5cc:	4805      	ldr	r0, [pc, #20]	; (800b5e4 <MX_USB_DEVICE_Init+0x54>)
 800b5ce:	f7fe ff88 	bl	800a4e2 <USBD_Start>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d001      	beq.n	800b5dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b5d8:	f7f7 fe1e 	bl	8003218 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b5dc:	bf00      	nop
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	2000013c 	.word	0x2000013c
 800b5e4:	200009f8 	.word	0x200009f8
 800b5e8:	20000028 	.word	0x20000028
 800b5ec:	2000012c 	.word	0x2000012c

0800b5f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	4905      	ldr	r1, [pc, #20]	; (800b60c <CDC_Init_FS+0x1c>)
 800b5f8:	4805      	ldr	r0, [pc, #20]	; (800b610 <CDC_Init_FS+0x20>)
 800b5fa:	f7fe fea9 	bl	800a350 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b5fe:	4905      	ldr	r1, [pc, #20]	; (800b614 <CDC_Init_FS+0x24>)
 800b600:	4803      	ldr	r0, [pc, #12]	; (800b610 <CDC_Init_FS+0x20>)
 800b602:	f7fe febe 	bl	800a382 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800b606:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 800b608:	4618      	mov	r0, r3
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	20000ebc 	.word	0x20000ebc
 800b610:	200009f8 	.word	0x200009f8
 800b614:	20000cbc 	.word	0x20000cbc

0800b618 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b618:	b480      	push	{r7}
 800b61a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800b61c:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800b61e:	4618      	mov	r0, r3
 800b620:	46bd      	mov	sp, r7
 800b622:	bc80      	pop	{r7}
 800b624:	4770      	bx	lr
	...

0800b628 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	4603      	mov	r3, r0
 800b630:	6039      	str	r1, [r7, #0]
 800b632:	71fb      	strb	r3, [r7, #7]
 800b634:	4613      	mov	r3, r2
 800b636:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd)
 800b638:	79fb      	ldrb	r3, [r7, #7]
 800b63a:	2b23      	cmp	r3, #35	; 0x23
 800b63c:	d84a      	bhi.n	800b6d4 <CDC_Control_FS+0xac>
 800b63e:	a201      	add	r2, pc, #4	; (adr r2, 800b644 <CDC_Control_FS+0x1c>)
 800b640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b644:	0800b6d5 	.word	0x0800b6d5
 800b648:	0800b6d5 	.word	0x0800b6d5
 800b64c:	0800b6d5 	.word	0x0800b6d5
 800b650:	0800b6d5 	.word	0x0800b6d5
 800b654:	0800b6d5 	.word	0x0800b6d5
 800b658:	0800b6d5 	.word	0x0800b6d5
 800b65c:	0800b6d5 	.word	0x0800b6d5
 800b660:	0800b6d5 	.word	0x0800b6d5
 800b664:	0800b6d5 	.word	0x0800b6d5
 800b668:	0800b6d5 	.word	0x0800b6d5
 800b66c:	0800b6d5 	.word	0x0800b6d5
 800b670:	0800b6d5 	.word	0x0800b6d5
 800b674:	0800b6d5 	.word	0x0800b6d5
 800b678:	0800b6d5 	.word	0x0800b6d5
 800b67c:	0800b6d5 	.word	0x0800b6d5
 800b680:	0800b6d5 	.word	0x0800b6d5
 800b684:	0800b6d5 	.word	0x0800b6d5
 800b688:	0800b6d5 	.word	0x0800b6d5
 800b68c:	0800b6d5 	.word	0x0800b6d5
 800b690:	0800b6d5 	.word	0x0800b6d5
 800b694:	0800b6d5 	.word	0x0800b6d5
 800b698:	0800b6d5 	.word	0x0800b6d5
 800b69c:	0800b6d5 	.word	0x0800b6d5
 800b6a0:	0800b6d5 	.word	0x0800b6d5
 800b6a4:	0800b6d5 	.word	0x0800b6d5
 800b6a8:	0800b6d5 	.word	0x0800b6d5
 800b6ac:	0800b6d5 	.word	0x0800b6d5
 800b6b0:	0800b6d5 	.word	0x0800b6d5
 800b6b4:	0800b6d5 	.word	0x0800b6d5
 800b6b8:	0800b6d5 	.word	0x0800b6d5
 800b6bc:	0800b6d5 	.word	0x0800b6d5
 800b6c0:	0800b6d5 	.word	0x0800b6d5
 800b6c4:	0800b6d5 	.word	0x0800b6d5
 800b6c8:	0800b6d5 	.word	0x0800b6d5
 800b6cc:	0800b6d5 	.word	0x0800b6d5
 800b6d0:	0800b6d5 	.word	0x0800b6d5
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800b6d4:	bf00      	nop
	}

	return (USBD_OK);
 800b6d6:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bc80      	pop	{r7}
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop

0800b6e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 800b6e4:	b590      	push	{r4, r7, lr}
 800b6e6:	b089      	sub	sp, #36	; 0x24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b6ee:	6879      	ldr	r1, [r7, #4]
 800b6f0:	48b0      	ldr	r0, [pc, #704]	; (800b9b4 <CDC_Receive_FS+0x2d0>)
 800b6f2:	f7fe fe46 	bl	800a382 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b6f6:	48af      	ldr	r0, [pc, #700]	; (800b9b4 <CDC_Receive_FS+0x2d0>)
 800b6f8:	f7fe fe85 	bl	800a406 <USBD_CDC_ReceivePacket>

	if (*Len < 1)
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <CDC_Receive_FS+0x24>
		return (USBD_OK);
 800b704:	2300      	movs	r3, #0
 800b706:	e34f      	b.n	800bda8 <CDC_Receive_FS+0x6c4>

	//--------------------------------------------------------------------------

	uint16_t tVal16;
	uint8_t cmd = Buf[0];
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	77fb      	strb	r3, [r7, #31]
	 */

	//--------------------------------------------------------------------------

	// Relay:1 - 12V	[0x01 - 0x01]
	if (cmd == 0x01)
 800b70e:	7ffb      	ldrb	r3, [r7, #31]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d15b      	bne.n	800b7cc <CDC_Receive_FS+0xe8>
	{
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00))
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d94b      	bls.n	800b7b4 <CDC_Receive_FS+0xd0>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	3301      	adds	r3, #1
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d004      	beq.n	800b730 <CDC_Receive_FS+0x4c>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	3301      	adds	r3, #1
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d141      	bne.n	800b7b4 <CDC_Receive_FS+0xd0>
		{
			if (Buf[1] == 0x01)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3301      	adds	r3, #1
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	2b01      	cmp	r3, #1
 800b738:	d11b      	bne.n	800b772 <CDC_Receive_FS+0x8e>
			{
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 800b73a:	2201      	movs	r2, #1
 800b73c:	2104      	movs	r1, #4
 800b73e:	489e      	ldr	r0, [pc, #632]	; (800b9b8 <CDC_Receive_FS+0x2d4>)
 800b740:	f7f9 fa15 	bl	8004b6e <HAL_GPIO_WritePin>
				RelayState = 0x01;
 800b744:	4b9d      	ldr	r3, [pc, #628]	; (800b9bc <CDC_Receive_FS+0x2d8>)
 800b746:	2201      	movs	r2, #1
 800b748:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 800b74a:	4b9c      	ldr	r3, [pc, #624]	; (800b9bc <CDC_Receive_FS+0x2d8>)
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	4619      	mov	r1, r3
 800b750:	489b      	ldr	r0, [pc, #620]	; (800b9c0 <CDC_Receive_FS+0x2dc>)
 800b752:	f000 ff6d 	bl	800c630 <iprintf>
				SetAllDAC();
 800b756:	f7f6 fe21 	bl	800239c <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800b75a:	4a9a      	ldr	r2, [pc, #616]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b75c:	7ffb      	ldrb	r3, [r7, #31]
 800b75e:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800b760:	4b98      	ldr	r3, [pc, #608]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b762:	2200      	movs	r2, #0
 800b764:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800b766:	2102      	movs	r1, #2
 800b768:	4896      	ldr	r0, [pc, #600]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b76a:	f000 fb29 	bl	800bdc0 <CDC_Transmit_FS>
				return (USBD_OK);
 800b76e:	2300      	movs	r3, #0
 800b770:	e31a      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
			}
			else if (Buf[1] == 0x00)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	3301      	adds	r3, #1
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d11b      	bne.n	800b7b4 <CDC_Receive_FS+0xd0>
			{
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800b77c:	2200      	movs	r2, #0
 800b77e:	2104      	movs	r1, #4
 800b780:	488d      	ldr	r0, [pc, #564]	; (800b9b8 <CDC_Receive_FS+0x2d4>)
 800b782:	f7f9 f9f4 	bl	8004b6e <HAL_GPIO_WritePin>
				RelayState = 0x00;
 800b786:	4b8d      	ldr	r3, [pc, #564]	; (800b9bc <CDC_Receive_FS+0x2d8>)
 800b788:	2200      	movs	r2, #0
 800b78a:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800b78c:	4b8b      	ldr	r3, [pc, #556]	; (800b9bc <CDC_Receive_FS+0x2d8>)
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	4619      	mov	r1, r3
 800b792:	488d      	ldr	r0, [pc, #564]	; (800b9c8 <CDC_Receive_FS+0x2e4>)
 800b794:	f000 ff4c 	bl	800c630 <iprintf>
				SetAllDAC();
 800b798:	f7f6 fe00 	bl	800239c <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800b79c:	4a89      	ldr	r2, [pc, #548]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b79e:	7ffb      	ldrb	r3, [r7, #31]
 800b7a0:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800b7a2:	4b88      	ldr	r3, [pc, #544]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800b7a8:	2102      	movs	r1, #2
 800b7aa:	4886      	ldr	r0, [pc, #536]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b7ac:	f000 fb08 	bl	800bdc0 <CDC_Transmit_FS>
				return (USBD_OK);
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	e2f9      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
			}
		}

		UserTxBufferFS[0] = cmd;
 800b7b4:	4a83      	ldr	r2, [pc, #524]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b7b6:	7ffb      	ldrb	r3, [r7, #31]
 800b7b8:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800b7ba:	4b82      	ldr	r3, [pc, #520]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b7bc:	2201      	movs	r2, #1
 800b7be:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800b7c0:	2102      	movs	r1, #2
 800b7c2:	4880      	ldr	r0, [pc, #512]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b7c4:	f000 fafc 	bl	800bdc0 <CDC_Transmit_FS>
		return (USBD_OK);
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	e2ed      	b.n	800bda8 <CDC_Receive_FS+0x6c4>

		//--------------------------------------------------------------------------
		// DA:4095
	}
	else if (cmd == 0x02)
 800b7cc:	7ffb      	ldrb	r3, [r7, #31]
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d12e      	bne.n	800b830 <CDC_Receive_FS+0x14c>
	{
		if (*Len >= 3)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d91e      	bls.n	800b818 <CDC_Receive_FS+0x134>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 800b7da:	f7f6 fee3 	bl	80025a4 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 800b7de:	f7f6 ff05 	bl	80025ec <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	881b      	ldrh	r3, [r3, #0]
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	82fb      	strh	r3, [r7, #22]
			SetDacA(tVal16);
 800b7ec:	8afb      	ldrh	r3, [r7, #22]
 800b7ee:	b21b      	sxth	r3, r3
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7f6 fd93 	bl	800231c <SetDacA>
			//			SetDacA(tVal16);

			printf("DacA: %d\n", tVal16);
 800b7f6:	8afb      	ldrh	r3, [r7, #22]
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	4874      	ldr	r0, [pc, #464]	; (800b9cc <CDC_Receive_FS+0x2e8>)
 800b7fc:	f000 ff18 	bl	800c630 <iprintf>
			UserTxBufferFS[0] = cmd;
 800b800:	4a70      	ldr	r2, [pc, #448]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b802:	7ffb      	ldrb	r3, [r7, #31]
 800b804:	7013      	strb	r3, [r2, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 800b806:	4b6f      	ldr	r3, [pc, #444]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b808:	2200      	movs	r2, #0
 800b80a:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 800b80c:	2102      	movs	r1, #2
 800b80e:	486d      	ldr	r0, [pc, #436]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b810:	f000 fad6 	bl	800bdc0 <CDC_Transmit_FS>
			return (USBD_OK);
 800b814:	2300      	movs	r3, #0
 800b816:	e2c7      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
		}

		UserTxBufferFS[0] = cmd;
 800b818:	4a6a      	ldr	r2, [pc, #424]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b81a:	7ffb      	ldrb	r3, [r7, #31]
 800b81c:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800b81e:	4b69      	ldr	r3, [pc, #420]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b820:	2201      	movs	r2, #1
 800b822:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800b824:	2102      	movs	r1, #2
 800b826:	4867      	ldr	r0, [pc, #412]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b828:	f000 faca 	bl	800bdc0 <CDC_Transmit_FS>
		return (USBD_OK);
 800b82c:	2300      	movs	r3, #0
 800b82e:	e2bb      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
		//--------------------------------------------------------------------------
		// DB:4095
	}
	else if (cmd == 0x03)
 800b830:	7ffb      	ldrb	r3, [r7, #31]
 800b832:	2b03      	cmp	r3, #3
 800b834:	d12e      	bne.n	800b894 <CDC_Receive_FS+0x1b0>
	{
		if (*Len >= 3)
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	d91e      	bls.n	800b87c <CDC_Receive_FS+0x198>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 800b83e:	f7f6 feb1 	bl	80025a4 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 800b842:	f7f6 fed3 	bl	80025ec <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3301      	adds	r3, #1
 800b84a:	881b      	ldrh	r3, [r3, #0]
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	82fb      	strh	r3, [r7, #22]
			SetDacB(tVal16);
 800b850:	8afb      	ldrh	r3, [r7, #22]
 800b852:	b21b      	sxth	r3, r3
 800b854:	4618      	mov	r0, r3
 800b856:	f7f6 fd81 	bl	800235c <SetDacB>

			UserTxBufferFS[0] = cmd;
 800b85a:	4a5a      	ldr	r2, [pc, #360]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b85c:	7ffb      	ldrb	r3, [r7, #31]
 800b85e:	7013      	strb	r3, [r2, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 800b860:	4b58      	ldr	r3, [pc, #352]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b862:	2200      	movs	r2, #0
 800b864:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n", tVal16);
 800b866:	8afb      	ldrh	r3, [r7, #22]
 800b868:	4619      	mov	r1, r3
 800b86a:	4859      	ldr	r0, [pc, #356]	; (800b9d0 <CDC_Receive_FS+0x2ec>)
 800b86c:	f000 fee0 	bl	800c630 <iprintf>

			CDC_Transmit_FS(UserTxBufferFS, 2);
 800b870:	2102      	movs	r1, #2
 800b872:	4854      	ldr	r0, [pc, #336]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b874:	f000 faa4 	bl	800bdc0 <CDC_Transmit_FS>
			return (USBD_OK);
 800b878:	2300      	movs	r3, #0
 800b87a:	e295      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
		}

		UserTxBufferFS[0] = cmd;
 800b87c:	4a51      	ldr	r2, [pc, #324]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b87e:	7ffb      	ldrb	r3, [r7, #31]
 800b880:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800b882:	4b50      	ldr	r3, [pc, #320]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b884:	2201      	movs	r2, #1
 800b886:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800b888:	2102      	movs	r1, #2
 800b88a:	484e      	ldr	r0, [pc, #312]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b88c:	f000 fa98 	bl	800bdc0 <CDC_Transmit_FS>
		return (USBD_OK);
 800b890:	2300      	movs	r3, #0
 800b892:	e289      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
		//--------------------------------------------------------------------------
		// ADC?
	}
	else if (cmd == 0x04)
 800b894:	7ffb      	ldrb	r3, [r7, #31]
 800b896:	2b04      	cmp	r3, #4
 800b898:	d10f      	bne.n	800b8ba <CDC_Receive_FS+0x1d6>
	{
		tVal16 = GetADC();
 800b89a:	f7f6 ff1d 	bl	80026d8 <GetADC>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	82fb      	strh	r3, [r7, #22]
		UserTxBufferFS[0] = cmd;
 800b8a2:	4a48      	ldr	r2, [pc, #288]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b8a4:	7ffb      	ldrb	r3, [r7, #31]
 800b8a6:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 800b8a8:	4a4a      	ldr	r2, [pc, #296]	; (800b9d4 <CDC_Receive_FS+0x2f0>)
 800b8aa:	8afb      	ldrh	r3, [r7, #22]
 800b8ac:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 800b8ae:	2103      	movs	r1, #3
 800b8b0:	4844      	ldr	r0, [pc, #272]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b8b2:	f000 fa85 	bl	800bdc0 <CDC_Transmit_FS>
		return (USBD_OK);
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	e276      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
		//--------------------------------------------------------------------------
		// Relay?DA?DB?
	}
	else if (cmd == 0x05)
 800b8ba:	7ffb      	ldrb	r3, [r7, #31]
 800b8bc:	2b05      	cmp	r3, #5
 800b8be:	d11a      	bne.n	800b8f6 <CDC_Receive_FS+0x212>
	{
		UserTxBufferFS[0] = cmd;
 800b8c0:	4a40      	ldr	r2, [pc, #256]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b8c2:	7ffb      	ldrb	r3, [r7, #31]
 800b8c4:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = RelayState;
 800b8c6:	4b3d      	ldr	r3, [pc, #244]	; (800b9bc <CDC_Receive_FS+0x2d8>)
 800b8c8:	781a      	ldrb	r2, [r3, #0]
 800b8ca:	4b3e      	ldr	r3, [pc, #248]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b8cc:	705a      	strb	r2, [r3, #1]

		tVal16 = GetDacA();
 800b8ce:	f7f6 fd77 	bl	80023c0 <GetDacA>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	82fb      	strh	r3, [r7, #22]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 800b8d6:	4a40      	ldr	r2, [pc, #256]	; (800b9d8 <CDC_Receive_FS+0x2f4>)
 800b8d8:	8afb      	ldrh	r3, [r7, #22]
 800b8da:	8013      	strh	r3, [r2, #0]

		tVal16 = GetDacB();
 800b8dc:	f7f6 fd7a 	bl	80023d4 <GetDacB>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	82fb      	strh	r3, [r7, #22]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 800b8e4:	4a3d      	ldr	r2, [pc, #244]	; (800b9dc <CDC_Receive_FS+0x2f8>)
 800b8e6:	8afb      	ldrh	r3, [r7, #22]
 800b8e8:	8013      	strh	r3, [r2, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 800b8ea:	2106      	movs	r1, #6
 800b8ec:	4835      	ldr	r0, [pc, #212]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b8ee:	f000 fa67 	bl	800bdc0 <CDC_Transmit_FS>
		return (USBD_OK);
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	e258      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
		//--------------------------------------------------------------------------
		// Btn?
	}
	else if (cmd == 0x06)
 800b8f6:	7ffb      	ldrb	r3, [r7, #31]
 800b8f8:	2b06      	cmp	r3, #6
 800b8fa:	d11a      	bne.n	800b932 <CDC_Receive_FS+0x24e>
	{
		UserTxBufferFS[0] = cmd;
 800b8fc:	4a31      	ldr	r2, [pc, #196]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b8fe:	7ffb      	ldrb	r3, [r7, #31]
 800b900:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 800b902:	f7f6 fd71 	bl	80023e8 <GetBtnRunState>
 800b906:	4603      	mov	r3, r0
 800b908:	461a      	mov	r2, r3
 800b90a:	4b2e      	ldr	r3, [pc, #184]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b90c:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 800b90e:	f7f6 fdad 	bl	800246c <GetBtnUpState>
 800b912:	4603      	mov	r3, r0
 800b914:	461a      	mov	r2, r3
 800b916:	4b2b      	ldr	r3, [pc, #172]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b918:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 800b91a:	f7f6 fde9 	bl	80024f0 <GetBtnDownState>
 800b91e:	4603      	mov	r3, r0
 800b920:	461a      	mov	r2, r3
 800b922:	4b28      	ldr	r3, [pc, #160]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b924:	70da      	strb	r2, [r3, #3]
		CDC_Transmit_FS(UserTxBufferFS, 4);
 800b926:	2104      	movs	r1, #4
 800b928:	4826      	ldr	r0, [pc, #152]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b92a:	f000 fa49 	bl	800bdc0 <CDC_Transmit_FS>
		return (USBD_OK);
 800b92e:	2300      	movs	r3, #0
 800b930:	e23a      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
		//--------------------------------------------------------------------------
		// ID?
	}
	else if (cmd == 0x07)
 800b932:	7ffb      	ldrb	r3, [r7, #31]
 800b934:	2b07      	cmp	r3, #7
 800b936:	d157      	bne.n	800b9e8 <CDC_Receive_FS+0x304>
	{
		char str[9] = {
 800b938:	2300      	movs	r3, #0
 800b93a:	60fb      	str	r3, [r7, #12]
 800b93c:	f107 0310 	add.w	r3, r7, #16
 800b940:	2200      	movs	r2, #0
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	711a      	strb	r2, [r3, #4]
			0,
		};
		memcpy(str, "SN", strlen("SN"));
 800b946:	f107 030c 	add.w	r3, r7, #12
 800b94a:	2202      	movs	r2, #2
 800b94c:	4924      	ldr	r1, [pc, #144]	; (800b9e0 <CDC_Receive_FS+0x2fc>)
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 fe58 	bl	800c604 <memcpy>
		itoa(SN_DEFINE, str + 2, 16);
 800b954:	f107 030c 	add.w	r3, r7, #12
 800b958:	3302      	adds	r3, #2
 800b95a:	2210      	movs	r2, #16
 800b95c:	4619      	mov	r1, r3
 800b95e:	4821      	ldr	r0, [pc, #132]	; (800b9e4 <CDC_Receive_FS+0x300>)
 800b960:	f000 fe4e 	bl	800c600 <itoa>

		UserTxBufferFS[0] = cmd;
 800b964:	4a17      	ldr	r2, [pc, #92]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b966:	7ffb      	ldrb	r3, [r7, #31]
 800b968:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = strlen(str);
 800b96a:	f107 030c 	add.w	r3, r7, #12
 800b96e:	4618      	mov	r0, r3
 800b970:	f7f4 fbee 	bl	8000150 <strlen>
 800b974:	4603      	mov	r3, r0
 800b976:	b2da      	uxtb	r2, r3
 800b978:	4b12      	ldr	r3, [pc, #72]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b97a:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 800b97c:	4c16      	ldr	r4, [pc, #88]	; (800b9d8 <CDC_Receive_FS+0x2f4>)
 800b97e:	f107 030c 	add.w	r3, r7, #12
 800b982:	4618      	mov	r0, r3
 800b984:	f7f4 fbe4 	bl	8000150 <strlen>
 800b988:	4602      	mov	r2, r0
 800b98a:	f107 030c 	add.w	r3, r7, #12
 800b98e:	4619      	mov	r1, r3
 800b990:	4620      	mov	r0, r4
 800b992:	f000 fe37 	bl	800c604 <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 800b996:	f107 030c 	add.w	r3, r7, #12
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7f4 fbd8 	bl	8000150 <strlen>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	3302      	adds	r3, #2
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	4806      	ldr	r0, [pc, #24]	; (800b9c4 <CDC_Receive_FS+0x2e0>)
 800b9ac:	f000 fa08 	bl	800bdc0 <CDC_Transmit_FS>
		return (USBD_OK);
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	e1f9      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
 800b9b4:	200009f8 	.word	0x200009f8
 800b9b8:	40010800 	.word	0x40010800
 800b9bc:	20000289 	.word	0x20000289
 800b9c0:	0800dabc 	.word	0x0800dabc
 800b9c4:	20000ebc 	.word	0x20000ebc
 800b9c8:	0800dad4 	.word	0x0800dad4
 800b9cc:	0800daec 	.word	0x0800daec
 800b9d0:	0800daf8 	.word	0x0800daf8
 800b9d4:	20000ebd 	.word	0x20000ebd
 800b9d8:	20000ebe 	.word	0x20000ebe
 800b9dc:	20000ec0 	.word	0x20000ec0
 800b9e0:	0800db04 	.word	0x0800db04
 800b9e4:	01121001 	.word	0x01121001
	 */

		//--------------------------------------------------------------------------
		// TIM inHL?
	}
	else if (cmd == 0x08)
 800b9e8:	7ffb      	ldrb	r3, [r7, #31]
 800b9ea:	2b08      	cmp	r3, #8
 800b9ec:	d112      	bne.n	800ba14 <CDC_Receive_FS+0x330>
	{
		EnableTIM3_PB4();
 800b9ee:	f7f6 fdc1 	bl	8002574 <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 800b9f2:	f7f6 fdcb 	bl	800258c <GetTIM3>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	817b      	strh	r3, [r7, #10]
		UserTxBufferFS[0] = cmd;
 800b9fc:	4ab3      	ldr	r2, [pc, #716]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800b9fe:	7ffb      	ldrb	r3, [r7, #31]
 800ba00:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 800ba02:	4ab3      	ldr	r2, [pc, #716]	; (800bcd0 <CDC_Receive_FS+0x5ec>)
 800ba04:	897b      	ldrh	r3, [r7, #10]
 800ba06:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800ba08:	2103      	movs	r1, #3
 800ba0a:	48b0      	ldr	r0, [pc, #704]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800ba0c:	f000 f9d8 	bl	800bdc0 <CDC_Transmit_FS>
		return (USBD_OK);
 800ba10:	2300      	movs	r3, #0
 800ba12:	e1c9      	b.n	800bda8 <CDC_Receive_FS+0x6c4>

		// TIM inLL?
		//--------------------------------------------------------------------------
	}
	else if (cmd == 0x09)
 800ba14:	7ffb      	ldrb	r3, [r7, #31]
 800ba16:	2b09      	cmp	r3, #9
 800ba18:	d112      	bne.n	800ba40 <CDC_Receive_FS+0x35c>
	{
		EnableTIM4_PB6();
 800ba1a:	f7f6 fdcf 	bl	80025bc <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 800ba1e:	f7f6 fdd9 	bl	80025d4 <GetTIM4>
 800ba22:	4603      	mov	r3, r0
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	813b      	strh	r3, [r7, #8]
		UserTxBufferFS[0] = cmd;
 800ba28:	4aa8      	ldr	r2, [pc, #672]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800ba2a:	7ffb      	ldrb	r3, [r7, #31]
 800ba2c:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 800ba2e:	4aa8      	ldr	r2, [pc, #672]	; (800bcd0 <CDC_Receive_FS+0x5ec>)
 800ba30:	893b      	ldrh	r3, [r7, #8]
 800ba32:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800ba34:	2103      	movs	r1, #3
 800ba36:	48a5      	ldr	r0, [pc, #660]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800ba38:	f000 f9c2 	bl	800bdc0 <CDC_Transmit_FS>
		return (USBD_OK);
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	e1b3      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
		//--------------------------------------------------------------------------
		// TODO:Прием калибровочной таблицы [0x0A][1-4][offset][count][data] 	answer:
	}
	else if (cmd == 0x0A)
 800ba40:	7ffb      	ldrb	r3, [r7, #31]
 800ba42:	2b0a      	cmp	r3, #10
 800ba44:	f040 80ad 	bne.w	800bba2 <CDC_Receive_FS+0x4be>
	{
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x02 || Buf[1] == 0x03 || Buf[1] == 0x04))
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	f240 808e 	bls.w	800bb6e <CDC_Receive_FS+0x48a>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	3301      	adds	r3, #1
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d00e      	beq.n	800ba7a <CDC_Receive_FS+0x396>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	2b02      	cmp	r3, #2
 800ba64:	d009      	beq.n	800ba7a <CDC_Receive_FS+0x396>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	2b03      	cmp	r3, #3
 800ba6e:	d004      	beq.n	800ba7a <CDC_Receive_FS+0x396>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	3301      	adds	r3, #1
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	2b04      	cmp	r3, #4
 800ba78:	d179      	bne.n	800bb6e <CDC_Receive_FS+0x48a>
		{
			if (Buf[1] == 0x01)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d111      	bne.n	800baa8 <CDC_Receive_FS+0x3c4>
			{
				UserTxBufferFS[0] = cmd;
 800ba84:	4a91      	ldr	r2, [pc, #580]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800ba86:	7ffb      	ldrb	r3, [r7, #31]
 800ba88:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x01;
 800ba8a:	4b90      	ldr	r3, [pc, #576]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	705a      	strb	r2, [r3, #1]
				// UserTxBufferFS[2] = getCRC_table_a_m12();
				printf("getCRC_table_a_m12 - %d \n", UserTxBufferFS[2]);
 800ba90:	4b8e      	ldr	r3, [pc, #568]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800ba92:	789b      	ldrb	r3, [r3, #2]
 800ba94:	4619      	mov	r1, r3
 800ba96:	488f      	ldr	r0, [pc, #572]	; (800bcd4 <CDC_Receive_FS+0x5f0>)
 800ba98:	f000 fdca 	bl	800c630 <iprintf>

				//				UserTxBufferFS[1] = strlen(str);
				//				memcpy(UserTxBufferFS + 2, str, strlen(str));
				//				CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);

				CDC_Transmit_FS(UserTxBufferFS, 2);
 800ba9c:	2102      	movs	r1, #2
 800ba9e:	488b      	ldr	r0, [pc, #556]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800baa0:	f000 f98e 	bl	800bdc0 <CDC_Transmit_FS>
				return (USBD_OK);
 800baa4:	2300      	movs	r3, #0
 800baa6:	e17f      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
			}
			else if (Buf[1] == 0x02)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	3301      	adds	r3, #1
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d11b      	bne.n	800baea <CDC_Receive_FS+0x406>
			{
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800bab2:	2200      	movs	r2, #0
 800bab4:	2104      	movs	r1, #4
 800bab6:	4888      	ldr	r0, [pc, #544]	; (800bcd8 <CDC_Receive_FS+0x5f4>)
 800bab8:	f7f9 f859 	bl	8004b6e <HAL_GPIO_WritePin>
				RelayState = 0x00;
 800babc:	4b87      	ldr	r3, [pc, #540]	; (800bcdc <CDC_Receive_FS+0x5f8>)
 800babe:	2200      	movs	r2, #0
 800bac0:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800bac2:	4b86      	ldr	r3, [pc, #536]	; (800bcdc <CDC_Receive_FS+0x5f8>)
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	4619      	mov	r1, r3
 800bac8:	4885      	ldr	r0, [pc, #532]	; (800bce0 <CDC_Receive_FS+0x5fc>)
 800baca:	f000 fdb1 	bl	800c630 <iprintf>
				SetAllDAC();
 800bace:	f7f6 fc65 	bl	800239c <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800bad2:	4a7e      	ldr	r2, [pc, #504]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bad4:	7ffb      	ldrb	r3, [r7, #31]
 800bad6:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800bad8:	4b7c      	ldr	r3, [pc, #496]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bada:	2200      	movs	r2, #0
 800badc:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800bade:	2102      	movs	r1, #2
 800bae0:	487a      	ldr	r0, [pc, #488]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bae2:	f000 f96d 	bl	800bdc0 <CDC_Transmit_FS>
				return (USBD_OK);
 800bae6:	2300      	movs	r3, #0
 800bae8:	e15e      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
			}
			else if (Buf[1] == 0x03)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	3301      	adds	r3, #1
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	2b03      	cmp	r3, #3
 800baf2:	d11b      	bne.n	800bb2c <CDC_Receive_FS+0x448>
			{
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800baf4:	2200      	movs	r2, #0
 800baf6:	2104      	movs	r1, #4
 800baf8:	4877      	ldr	r0, [pc, #476]	; (800bcd8 <CDC_Receive_FS+0x5f4>)
 800bafa:	f7f9 f838 	bl	8004b6e <HAL_GPIO_WritePin>
				RelayState = 0x00;
 800bafe:	4b77      	ldr	r3, [pc, #476]	; (800bcdc <CDC_Receive_FS+0x5f8>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800bb04:	4b75      	ldr	r3, [pc, #468]	; (800bcdc <CDC_Receive_FS+0x5f8>)
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	4619      	mov	r1, r3
 800bb0a:	4875      	ldr	r0, [pc, #468]	; (800bce0 <CDC_Receive_FS+0x5fc>)
 800bb0c:	f000 fd90 	bl	800c630 <iprintf>
				SetAllDAC();
 800bb10:	f7f6 fc44 	bl	800239c <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800bb14:	4a6d      	ldr	r2, [pc, #436]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bb16:	7ffb      	ldrb	r3, [r7, #31]
 800bb18:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800bb1a:	4b6c      	ldr	r3, [pc, #432]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800bb20:	2102      	movs	r1, #2
 800bb22:	486a      	ldr	r0, [pc, #424]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bb24:	f000 f94c 	bl	800bdc0 <CDC_Transmit_FS>
				return (USBD_OK);
 800bb28:	2300      	movs	r3, #0
 800bb2a:	e13d      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
			}
			else if (Buf[1] == 0x04)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	2b04      	cmp	r3, #4
 800bb34:	d11b      	bne.n	800bb6e <CDC_Receive_FS+0x48a>
			{
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800bb36:	2200      	movs	r2, #0
 800bb38:	2104      	movs	r1, #4
 800bb3a:	4867      	ldr	r0, [pc, #412]	; (800bcd8 <CDC_Receive_FS+0x5f4>)
 800bb3c:	f7f9 f817 	bl	8004b6e <HAL_GPIO_WritePin>
				RelayState = 0x00;
 800bb40:	4b66      	ldr	r3, [pc, #408]	; (800bcdc <CDC_Receive_FS+0x5f8>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800bb46:	4b65      	ldr	r3, [pc, #404]	; (800bcdc <CDC_Receive_FS+0x5f8>)
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	4864      	ldr	r0, [pc, #400]	; (800bce0 <CDC_Receive_FS+0x5fc>)
 800bb4e:	f000 fd6f 	bl	800c630 <iprintf>
				SetAllDAC();
 800bb52:	f7f6 fc23 	bl	800239c <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800bb56:	4a5d      	ldr	r2, [pc, #372]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bb58:	7ffb      	ldrb	r3, [r7, #31]
 800bb5a:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800bb5c:	4b5b      	ldr	r3, [pc, #364]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bb5e:	2200      	movs	r2, #0
 800bb60:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800bb62:	2102      	movs	r1, #2
 800bb64:	4859      	ldr	r0, [pc, #356]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bb66:	f000 f92b 	bl	800bdc0 <CDC_Transmit_FS>
				return (USBD_OK);
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	e11c      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
			}
		}

		UserTxBufferFS[0] = cmd;
 800bb6e:	4a57      	ldr	r2, [pc, #348]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bb70:	7ffb      	ldrb	r3, [r7, #31]
 800bb72:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x00;
 800bb74:	4b55      	ldr	r3, [pc, #340]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	705a      	strb	r2, [r3, #1]

		tVal16 = GetDacA();
 800bb7a:	f7f6 fc21 	bl	80023c0 <GetDacA>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	82fb      	strh	r3, [r7, #22]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 800bb82:	4a58      	ldr	r2, [pc, #352]	; (800bce4 <CDC_Receive_FS+0x600>)
 800bb84:	8afb      	ldrh	r3, [r7, #22]
 800bb86:	8013      	strh	r3, [r2, #0]
		tVal16 = GetDacB();
 800bb88:	f7f6 fc24 	bl	80023d4 <GetDacB>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	82fb      	strh	r3, [r7, #22]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 800bb90:	4a55      	ldr	r2, [pc, #340]	; (800bce8 <CDC_Receive_FS+0x604>)
 800bb92:	8afb      	ldrh	r3, [r7, #22]
 800bb94:	8013      	strh	r3, [r2, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 800bb96:	2106      	movs	r1, #6
 800bb98:	484c      	ldr	r0, [pc, #304]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bb9a:	f000 f911 	bl	800bdc0 <CDC_Transmit_FS>
		return (USBD_OK);
 800bb9e:	2300      	movs	r3, #0
 800bba0:	e102      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
	}
		//--------------------------------------------------------------------------
	// TODO:Отправка CRC 1-4 таблицы [0x0B][1-4][CRC(1-4)]	answer:
	else if (cmd == 0x0B)
 800bba2:	7ffb      	ldrb	r3, [r7, #31]
 800bba4:	2b0b      	cmp	r3, #11
 800bba6:	f040 80c2 	bne.w	800bd2e <CDC_Receive_FS+0x64a>
	{
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x02 || Buf[1] == 0x03 || Buf[1] == 0x04))
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	f240 809c 	bls.w	800bcec <CDC_Receive_FS+0x608>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d00f      	beq.n	800bbde <CDC_Receive_FS+0x4fa>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	d00a      	beq.n	800bbde <CDC_Receive_FS+0x4fa>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	2b03      	cmp	r3, #3
 800bbd0:	d005      	beq.n	800bbde <CDC_Receive_FS+0x4fa>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	2b04      	cmp	r3, #4
 800bbda:	f040 8087 	bne.w	800bcec <CDC_Receive_FS+0x608>
		{
			if (Buf[1] == 0x01)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d10e      	bne.n	800bc06 <CDC_Receive_FS+0x522>
			{
				UserTxBufferFS[0] = cmd;
 800bbe8:	4a38      	ldr	r2, [pc, #224]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bbea:	7ffb      	ldrb	r3, [r7, #31]
 800bbec:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x01;
 800bbee:	4b37      	ldr	r3, [pc, #220]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	705a      	strb	r2, [r3, #1]

				uint32_t crc_1 = getCRC_table_a_m12();//270814253
 800bbf4:	f7f6 fb52 	bl	800229c <getCRC_table_a_m12>
 800bbf8:	61b8      	str	r0, [r7, #24]
//				memcpy(UserTxBufferFS + 2, crc_1, sizeof(crc_1));
				
				printf("getCRC_table_a_m12 - %d \n", crc_1);
 800bbfa:	69b9      	ldr	r1, [r7, #24]
 800bbfc:	4835      	ldr	r0, [pc, #212]	; (800bcd4 <CDC_Receive_FS+0x5f0>)
 800bbfe:	f000 fd17 	bl	800c630 <iprintf>

//				CDC_Transmit_FS(UserTxBufferFS, sizeof(crc_1) + 2);

				return (USBD_OK);
 800bc02:	2300      	movs	r3, #0
 800bc04:	e0d0      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
			}
			else if (Buf[1] == 0x02)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d11b      	bne.n	800bc48 <CDC_Receive_FS+0x564>
			{
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800bc10:	2200      	movs	r2, #0
 800bc12:	2104      	movs	r1, #4
 800bc14:	4830      	ldr	r0, [pc, #192]	; (800bcd8 <CDC_Receive_FS+0x5f4>)
 800bc16:	f7f8 ffaa 	bl	8004b6e <HAL_GPIO_WritePin>
				RelayState = 0x00;
 800bc1a:	4b30      	ldr	r3, [pc, #192]	; (800bcdc <CDC_Receive_FS+0x5f8>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800bc20:	4b2e      	ldr	r3, [pc, #184]	; (800bcdc <CDC_Receive_FS+0x5f8>)
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	4619      	mov	r1, r3
 800bc26:	482e      	ldr	r0, [pc, #184]	; (800bce0 <CDC_Receive_FS+0x5fc>)
 800bc28:	f000 fd02 	bl	800c630 <iprintf>
				SetAllDAC();
 800bc2c:	f7f6 fbb6 	bl	800239c <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800bc30:	4a26      	ldr	r2, [pc, #152]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bc32:	7ffb      	ldrb	r3, [r7, #31]
 800bc34:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800bc36:	4b25      	ldr	r3, [pc, #148]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800bc3c:	2102      	movs	r1, #2
 800bc3e:	4823      	ldr	r0, [pc, #140]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bc40:	f000 f8be 	bl	800bdc0 <CDC_Transmit_FS>
				return (USBD_OK);
 800bc44:	2300      	movs	r3, #0
 800bc46:	e0af      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
			}
			else if (Buf[1] == 0x03)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	2b03      	cmp	r3, #3
 800bc50:	d11b      	bne.n	800bc8a <CDC_Receive_FS+0x5a6>
			{
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800bc52:	2200      	movs	r2, #0
 800bc54:	2104      	movs	r1, #4
 800bc56:	4820      	ldr	r0, [pc, #128]	; (800bcd8 <CDC_Receive_FS+0x5f4>)
 800bc58:	f7f8 ff89 	bl	8004b6e <HAL_GPIO_WritePin>
				RelayState = 0x00;
 800bc5c:	4b1f      	ldr	r3, [pc, #124]	; (800bcdc <CDC_Receive_FS+0x5f8>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800bc62:	4b1e      	ldr	r3, [pc, #120]	; (800bcdc <CDC_Receive_FS+0x5f8>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	4619      	mov	r1, r3
 800bc68:	481d      	ldr	r0, [pc, #116]	; (800bce0 <CDC_Receive_FS+0x5fc>)
 800bc6a:	f000 fce1 	bl	800c630 <iprintf>
				SetAllDAC();
 800bc6e:	f7f6 fb95 	bl	800239c <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800bc72:	4a16      	ldr	r2, [pc, #88]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bc74:	7ffb      	ldrb	r3, [r7, #31]
 800bc76:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800bc78:	4b14      	ldr	r3, [pc, #80]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800bc7e:	2102      	movs	r1, #2
 800bc80:	4812      	ldr	r0, [pc, #72]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bc82:	f000 f89d 	bl	800bdc0 <CDC_Transmit_FS>
				return (USBD_OK);
 800bc86:	2300      	movs	r3, #0
 800bc88:	e08e      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
			}
			else if (Buf[1] == 0x04)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	2b04      	cmp	r3, #4
 800bc92:	d12b      	bne.n	800bcec <CDC_Receive_FS+0x608>
			{
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800bc94:	2200      	movs	r2, #0
 800bc96:	2104      	movs	r1, #4
 800bc98:	480f      	ldr	r0, [pc, #60]	; (800bcd8 <CDC_Receive_FS+0x5f4>)
 800bc9a:	f7f8 ff68 	bl	8004b6e <HAL_GPIO_WritePin>
				RelayState = 0x00;
 800bc9e:	4b0f      	ldr	r3, [pc, #60]	; (800bcdc <CDC_Receive_FS+0x5f8>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800bca4:	4b0d      	ldr	r3, [pc, #52]	; (800bcdc <CDC_Receive_FS+0x5f8>)
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	4619      	mov	r1, r3
 800bcaa:	480d      	ldr	r0, [pc, #52]	; (800bce0 <CDC_Receive_FS+0x5fc>)
 800bcac:	f000 fcc0 	bl	800c630 <iprintf>
				SetAllDAC();
 800bcb0:	f7f6 fb74 	bl	800239c <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800bcb4:	4a05      	ldr	r2, [pc, #20]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bcb6:	7ffb      	ldrb	r3, [r7, #31]
 800bcb8:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800bcba:	4b04      	ldr	r3, [pc, #16]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800bcc0:	2102      	movs	r1, #2
 800bcc2:	4802      	ldr	r0, [pc, #8]	; (800bccc <CDC_Receive_FS+0x5e8>)
 800bcc4:	f000 f87c 	bl	800bdc0 <CDC_Transmit_FS>
				return (USBD_OK);
 800bcc8:	2300      	movs	r3, #0
 800bcca:	e06d      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
 800bccc:	20000ebc 	.word	0x20000ebc
 800bcd0:	20000ebd 	.word	0x20000ebd
 800bcd4:	0800db08 	.word	0x0800db08
 800bcd8:	40010800 	.word	0x40010800
 800bcdc:	20000289 	.word	0x20000289
 800bce0:	0800dad4 	.word	0x0800dad4
 800bce4:	20000ebe 	.word	0x20000ebe
 800bce8:	20000ec0 	.word	0x20000ec0
			}
		}

		UserTxBufferFS[0] = cmd;
 800bcec:	4a30      	ldr	r2, [pc, #192]	; (800bdb0 <CDC_Receive_FS+0x6cc>)
 800bcee:	7ffb      	ldrb	r3, [r7, #31]
 800bcf0:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x00;
 800bcf2:	4b2f      	ldr	r3, [pc, #188]	; (800bdb0 <CDC_Receive_FS+0x6cc>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	705a      	strb	r2, [r3, #1]

		UserTxBufferFS[0] = cmd;
 800bcf8:	4a2d      	ldr	r2, [pc, #180]	; (800bdb0 <CDC_Receive_FS+0x6cc>)
 800bcfa:	7ffb      	ldrb	r3, [r7, #31]
 800bcfc:	7013      	strb	r3, [r2, #0]

		UserTxBufferFS[1] = RelayState;
 800bcfe:	4b2d      	ldr	r3, [pc, #180]	; (800bdb4 <CDC_Receive_FS+0x6d0>)
 800bd00:	781a      	ldrb	r2, [r3, #0]
 800bd02:	4b2b      	ldr	r3, [pc, #172]	; (800bdb0 <CDC_Receive_FS+0x6cc>)
 800bd04:	705a      	strb	r2, [r3, #1]
		tVal16 = GetDacA();
 800bd06:	f7f6 fb5b 	bl	80023c0 <GetDacA>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	82fb      	strh	r3, [r7, #22]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 800bd0e:	4a2a      	ldr	r2, [pc, #168]	; (800bdb8 <CDC_Receive_FS+0x6d4>)
 800bd10:	8afb      	ldrh	r3, [r7, #22]
 800bd12:	8013      	strh	r3, [r2, #0]
		tVal16 = GetDacB();
 800bd14:	f7f6 fb5e 	bl	80023d4 <GetDacB>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	82fb      	strh	r3, [r7, #22]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 800bd1c:	4a27      	ldr	r2, [pc, #156]	; (800bdbc <CDC_Receive_FS+0x6d8>)
 800bd1e:	8afb      	ldrh	r3, [r7, #22]
 800bd20:	8013      	strh	r3, [r2, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 800bd22:	2106      	movs	r1, #6
 800bd24:	4822      	ldr	r0, [pc, #136]	; (800bdb0 <CDC_Receive_FS+0x6cc>)
 800bd26:	f000 f84b 	bl	800bdc0 <CDC_Transmit_FS>
		return (USBD_OK);
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	e03c      	b.n	800bda8 <CDC_Receive_FS+0x6c4>

		//--------------------------------------------------------------------------
		// TODO:Прием калибровочной таблицы [0x0C][Длина][???]
	}
	else if (cmd == 0x0C)
 800bd2e:	7ffb      	ldrb	r3, [r7, #31]
 800bd30:	2b0c      	cmp	r3, #12
 800bd32:	d11a      	bne.n	800bd6a <CDC_Receive_FS+0x686>
	{
		UserTxBufferFS[0] = cmd;
 800bd34:	4a1e      	ldr	r2, [pc, #120]	; (800bdb0 <CDC_Receive_FS+0x6cc>)
 800bd36:	7ffb      	ldrb	r3, [r7, #31]
 800bd38:	7013      	strb	r3, [r2, #0]

		UserTxBufferFS[1] = RelayState;
 800bd3a:	4b1e      	ldr	r3, [pc, #120]	; (800bdb4 <CDC_Receive_FS+0x6d0>)
 800bd3c:	781a      	ldrb	r2, [r3, #0]
 800bd3e:	4b1c      	ldr	r3, [pc, #112]	; (800bdb0 <CDC_Receive_FS+0x6cc>)
 800bd40:	705a      	strb	r2, [r3, #1]
		tVal16 = GetDacA();
 800bd42:	f7f6 fb3d 	bl	80023c0 <GetDacA>
 800bd46:	4603      	mov	r3, r0
 800bd48:	82fb      	strh	r3, [r7, #22]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 800bd4a:	4a1b      	ldr	r2, [pc, #108]	; (800bdb8 <CDC_Receive_FS+0x6d4>)
 800bd4c:	8afb      	ldrh	r3, [r7, #22]
 800bd4e:	8013      	strh	r3, [r2, #0]
		tVal16 = GetDacB();
 800bd50:	f7f6 fb40 	bl	80023d4 <GetDacB>
 800bd54:	4603      	mov	r3, r0
 800bd56:	82fb      	strh	r3, [r7, #22]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 800bd58:	4a18      	ldr	r2, [pc, #96]	; (800bdbc <CDC_Receive_FS+0x6d8>)
 800bd5a:	8afb      	ldrh	r3, [r7, #22]
 800bd5c:	8013      	strh	r3, [r2, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 800bd5e:	2106      	movs	r1, #6
 800bd60:	4813      	ldr	r0, [pc, #76]	; (800bdb0 <CDC_Receive_FS+0x6cc>)
 800bd62:	f000 f82d 	bl	800bdc0 <CDC_Transmit_FS>
		return (USBD_OK);
 800bd66:	2300      	movs	r3, #0
 800bd68:	e01e      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
		//--------------------------------------------------------------------------
		// TODO:Запись во флеш калибровочной таблицы [0x0D] data: 1B (0x00 - успешно; 0x01 - ошибка при записи)	answer: 0x0D + 1B status
	}
	else if (cmd == 0x0D)
 800bd6a:	7ffb      	ldrb	r3, [r7, #31]
 800bd6c:	2b0d      	cmp	r3, #13
 800bd6e:	d11a      	bne.n	800bda6 <CDC_Receive_FS+0x6c2>
	{
		UserTxBufferFS[0] = cmd;
 800bd70:	4a0f      	ldr	r2, [pc, #60]	; (800bdb0 <CDC_Receive_FS+0x6cc>)
 800bd72:	7ffb      	ldrb	r3, [r7, #31]
 800bd74:	7013      	strb	r3, [r2, #0]
		//		UserTxBufferFS[1] = flash_write();

		// Сделать функцию записи во флеш по флагу?! сравнивать CRC?

		UserTxBufferFS[1] = RelayState;
 800bd76:	4b0f      	ldr	r3, [pc, #60]	; (800bdb4 <CDC_Receive_FS+0x6d0>)
 800bd78:	781a      	ldrb	r2, [r3, #0]
 800bd7a:	4b0d      	ldr	r3, [pc, #52]	; (800bdb0 <CDC_Receive_FS+0x6cc>)
 800bd7c:	705a      	strb	r2, [r3, #1]
		tVal16 = GetDacA();
 800bd7e:	f7f6 fb1f 	bl	80023c0 <GetDacA>
 800bd82:	4603      	mov	r3, r0
 800bd84:	82fb      	strh	r3, [r7, #22]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 800bd86:	4a0c      	ldr	r2, [pc, #48]	; (800bdb8 <CDC_Receive_FS+0x6d4>)
 800bd88:	8afb      	ldrh	r3, [r7, #22]
 800bd8a:	8013      	strh	r3, [r2, #0]
		tVal16 = GetDacB();
 800bd8c:	f7f6 fb22 	bl	80023d4 <GetDacB>
 800bd90:	4603      	mov	r3, r0
 800bd92:	82fb      	strh	r3, [r7, #22]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 800bd94:	4a09      	ldr	r2, [pc, #36]	; (800bdbc <CDC_Receive_FS+0x6d8>)
 800bd96:	8afb      	ldrh	r3, [r7, #22]
 800bd98:	8013      	strh	r3, [r2, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 800bd9a:	2106      	movs	r1, #6
 800bd9c:	4804      	ldr	r0, [pc, #16]	; (800bdb0 <CDC_Receive_FS+0x6cc>)
 800bd9e:	f000 f80f 	bl	800bdc0 <CDC_Transmit_FS>
		return (USBD_OK);
 800bda2:	2300      	movs	r3, #0
 800bda4:	e000      	b.n	800bda8 <CDC_Receive_FS+0x6c4>
	}
	//--------------------------------------------------------------------------
	return (USBD_OK);
 800bda6:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3724      	adds	r7, #36	; 0x24
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd90      	pop	{r4, r7, pc}
 800bdb0:	20000ebc 	.word	0x20000ebc
 800bdb4:	20000289 	.word	0x20000289
 800bdb8:	20000ebe 	.word	0x20000ebe
 800bdbc:	20000ec0 	.word	0x20000ec0

0800bdc0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	460b      	mov	r3, r1
 800bdca:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800bdd0:	4b0d      	ldr	r3, [pc, #52]	; (800be08 <CDC_Transmit_FS+0x48>)
 800bdd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdd6:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800bde2:	2301      	movs	r3, #1
 800bde4:	e00b      	b.n	800bdfe <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bde6:	887b      	ldrh	r3, [r7, #2]
 800bde8:	461a      	mov	r2, r3
 800bdea:	6879      	ldr	r1, [r7, #4]
 800bdec:	4806      	ldr	r0, [pc, #24]	; (800be08 <CDC_Transmit_FS+0x48>)
 800bdee:	f7fe faaf 	bl	800a350 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bdf2:	4805      	ldr	r0, [pc, #20]	; (800be08 <CDC_Transmit_FS+0x48>)
 800bdf4:	f7fe fad8 	bl	800a3a8 <USBD_CDC_TransmitPacket>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 800bdfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	200009f8 	.word	0x200009f8

0800be0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	4603      	mov	r3, r0
 800be14:	6039      	str	r1, [r7, #0]
 800be16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	2212      	movs	r2, #18
 800be1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be1e:	4b03      	ldr	r3, [pc, #12]	; (800be2c <USBD_FS_DeviceDescriptor+0x20>)
}
 800be20:	4618      	mov	r0, r3
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	bc80      	pop	{r7}
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	20000158 	.word	0x20000158

0800be30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be30:	b480      	push	{r7}
 800be32:	b083      	sub	sp, #12
 800be34:	af00      	add	r7, sp, #0
 800be36:	4603      	mov	r3, r0
 800be38:	6039      	str	r1, [r7, #0]
 800be3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	2204      	movs	r2, #4
 800be40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be42:	4b03      	ldr	r3, [pc, #12]	; (800be50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be44:	4618      	mov	r0, r3
 800be46:	370c      	adds	r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	bc80      	pop	{r7}
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	2000016c 	.word	0x2000016c

0800be54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	4603      	mov	r3, r0
 800be5c:	6039      	str	r1, [r7, #0]
 800be5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be60:	79fb      	ldrb	r3, [r7, #7]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d105      	bne.n	800be72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	4907      	ldr	r1, [pc, #28]	; (800be88 <USBD_FS_ProductStrDescriptor+0x34>)
 800be6a:	4808      	ldr	r0, [pc, #32]	; (800be8c <USBD_FS_ProductStrDescriptor+0x38>)
 800be6c:	f7ff fab2 	bl	800b3d4 <USBD_GetString>
 800be70:	e004      	b.n	800be7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be72:	683a      	ldr	r2, [r7, #0]
 800be74:	4904      	ldr	r1, [pc, #16]	; (800be88 <USBD_FS_ProductStrDescriptor+0x34>)
 800be76:	4805      	ldr	r0, [pc, #20]	; (800be8c <USBD_FS_ProductStrDescriptor+0x38>)
 800be78:	f7ff faac 	bl	800b3d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be7c:	4b02      	ldr	r3, [pc, #8]	; (800be88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	200010bc 	.word	0x200010bc
 800be8c:	0800db24 	.word	0x0800db24

0800be90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	4603      	mov	r3, r0
 800be98:	6039      	str	r1, [r7, #0]
 800be9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	4904      	ldr	r1, [pc, #16]	; (800beb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bea0:	4804      	ldr	r0, [pc, #16]	; (800beb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bea2:	f7ff fa97 	bl	800b3d4 <USBD_GetString>
  return USBD_StrDesc;
 800bea6:	4b02      	ldr	r3, [pc, #8]	; (800beb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	200010bc 	.word	0x200010bc
 800beb4:	0800db3c 	.word	0x0800db3c

0800beb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	4603      	mov	r3, r0
 800bec0:	6039      	str	r1, [r7, #0]
 800bec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	221a      	movs	r2, #26
 800bec8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800beca:	f000 f843 	bl	800bf54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bece:	4b02      	ldr	r3, [pc, #8]	; (800bed8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	20000170 	.word	0x20000170

0800bedc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	4603      	mov	r3, r0
 800bee4:	6039      	str	r1, [r7, #0]
 800bee6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bee8:	79fb      	ldrb	r3, [r7, #7]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d105      	bne.n	800befa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	4907      	ldr	r1, [pc, #28]	; (800bf10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bef2:	4808      	ldr	r0, [pc, #32]	; (800bf14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bef4:	f7ff fa6e 	bl	800b3d4 <USBD_GetString>
 800bef8:	e004      	b.n	800bf04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	4904      	ldr	r1, [pc, #16]	; (800bf10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800befe:	4805      	ldr	r0, [pc, #20]	; (800bf14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf00:	f7ff fa68 	bl	800b3d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf04:	4b02      	ldr	r3, [pc, #8]	; (800bf10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	200010bc 	.word	0x200010bc
 800bf14:	0800db50 	.word	0x0800db50

0800bf18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	4603      	mov	r3, r0
 800bf20:	6039      	str	r1, [r7, #0]
 800bf22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf24:	79fb      	ldrb	r3, [r7, #7]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d105      	bne.n	800bf36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	4907      	ldr	r1, [pc, #28]	; (800bf4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf2e:	4808      	ldr	r0, [pc, #32]	; (800bf50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf30:	f7ff fa50 	bl	800b3d4 <USBD_GetString>
 800bf34:	e004      	b.n	800bf40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	4904      	ldr	r1, [pc, #16]	; (800bf4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf3a:	4805      	ldr	r0, [pc, #20]	; (800bf50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf3c:	f7ff fa4a 	bl	800b3d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf40:	4b02      	ldr	r3, [pc, #8]	; (800bf4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	200010bc 	.word	0x200010bc
 800bf50:	0800db5c 	.word	0x0800db5c

0800bf54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf5a:	4b0f      	ldr	r3, [pc, #60]	; (800bf98 <Get_SerialNum+0x44>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf60:	4b0e      	ldr	r3, [pc, #56]	; (800bf9c <Get_SerialNum+0x48>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf66:	4b0e      	ldr	r3, [pc, #56]	; (800bfa0 <Get_SerialNum+0x4c>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4413      	add	r3, r2
 800bf72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d009      	beq.n	800bf8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf7a:	2208      	movs	r2, #8
 800bf7c:	4909      	ldr	r1, [pc, #36]	; (800bfa4 <Get_SerialNum+0x50>)
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f000 f814 	bl	800bfac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf84:	2204      	movs	r2, #4
 800bf86:	4908      	ldr	r1, [pc, #32]	; (800bfa8 <Get_SerialNum+0x54>)
 800bf88:	68b8      	ldr	r0, [r7, #8]
 800bf8a:	f000 f80f 	bl	800bfac <IntToUnicode>
  }
}
 800bf8e:	bf00      	nop
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	1ffff7e8 	.word	0x1ffff7e8
 800bf9c:	1ffff7ec 	.word	0x1ffff7ec
 800bfa0:	1ffff7f0 	.word	0x1ffff7f0
 800bfa4:	20000172 	.word	0x20000172
 800bfa8:	20000182 	.word	0x20000182

0800bfac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b087      	sub	sp, #28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	75fb      	strb	r3, [r7, #23]
 800bfc2:	e027      	b.n	800c014 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	0f1b      	lsrs	r3, r3, #28
 800bfc8:	2b09      	cmp	r3, #9
 800bfca:	d80b      	bhi.n	800bfe4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	0f1b      	lsrs	r3, r3, #28
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
 800bfd4:	005b      	lsls	r3, r3, #1
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	440b      	add	r3, r1
 800bfdc:	3230      	adds	r2, #48	; 0x30
 800bfde:	b2d2      	uxtb	r2, r2
 800bfe0:	701a      	strb	r2, [r3, #0]
 800bfe2:	e00a      	b.n	800bffa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	0f1b      	lsrs	r3, r3, #28
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	7dfb      	ldrb	r3, [r7, #23]
 800bfec:	005b      	lsls	r3, r3, #1
 800bfee:	4619      	mov	r1, r3
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	440b      	add	r3, r1
 800bff4:	3237      	adds	r2, #55	; 0x37
 800bff6:	b2d2      	uxtb	r2, r2
 800bff8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	011b      	lsls	r3, r3, #4
 800bffe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c000:	7dfb      	ldrb	r3, [r7, #23]
 800c002:	005b      	lsls	r3, r3, #1
 800c004:	3301      	adds	r3, #1
 800c006:	68ba      	ldr	r2, [r7, #8]
 800c008:	4413      	add	r3, r2
 800c00a:	2200      	movs	r2, #0
 800c00c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c00e:	7dfb      	ldrb	r3, [r7, #23]
 800c010:	3301      	adds	r3, #1
 800c012:	75fb      	strb	r3, [r7, #23]
 800c014:	7dfa      	ldrb	r2, [r7, #23]
 800c016:	79fb      	ldrb	r3, [r7, #7]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d3d3      	bcc.n	800bfc4 <IntToUnicode+0x18>
  }
}
 800c01c:	bf00      	nop
 800c01e:	bf00      	nop
 800c020:	371c      	adds	r7, #28
 800c022:	46bd      	mov	sp, r7
 800c024:	bc80      	pop	{r7}
 800c026:	4770      	bx	lr

0800c028 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a0d      	ldr	r2, [pc, #52]	; (800c06c <HAL_PCD_MspInit+0x44>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d113      	bne.n	800c062 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c03a:	4b0d      	ldr	r3, [pc, #52]	; (800c070 <HAL_PCD_MspInit+0x48>)
 800c03c:	69db      	ldr	r3, [r3, #28]
 800c03e:	4a0c      	ldr	r2, [pc, #48]	; (800c070 <HAL_PCD_MspInit+0x48>)
 800c040:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c044:	61d3      	str	r3, [r2, #28]
 800c046:	4b0a      	ldr	r3, [pc, #40]	; (800c070 <HAL_PCD_MspInit+0x48>)
 800c048:	69db      	ldr	r3, [r3, #28]
 800c04a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c04e:	60fb      	str	r3, [r7, #12]
 800c050:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c052:	2200      	movs	r2, #0
 800c054:	2100      	movs	r1, #0
 800c056:	2014      	movs	r0, #20
 800c058:	f7f8 f969 	bl	800432e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c05c:	2014      	movs	r0, #20
 800c05e:	f7f8 f982 	bl	8004366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c062:	bf00      	nop
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	40005c00 	.word	0x40005c00
 800c070:	40021000 	.word	0x40021000

0800c074 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c088:	4619      	mov	r1, r3
 800c08a:	4610      	mov	r0, r2
 800c08c:	f7fe fa71 	bl	800a572 <USBD_LL_SetupStage>
}
 800c090:	bf00      	nop
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c0aa:	78fa      	ldrb	r2, [r7, #3]
 800c0ac:	6879      	ldr	r1, [r7, #4]
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	00db      	lsls	r3, r3, #3
 800c0b6:	440b      	add	r3, r1
 800c0b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	78fb      	ldrb	r3, [r7, #3]
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	f7fe faa3 	bl	800a60c <USBD_LL_DataOutStage>
}
 800c0c6:	bf00      	nop
 800c0c8:	3708      	adds	r7, #8
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c0e0:	78fa      	ldrb	r2, [r7, #3]
 800c0e2:	6879      	ldr	r1, [r7, #4]
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	4413      	add	r3, r2
 800c0ea:	00db      	lsls	r3, r3, #3
 800c0ec:	440b      	add	r3, r1
 800c0ee:	333c      	adds	r3, #60	; 0x3c
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	78fb      	ldrb	r3, [r7, #3]
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	f7fe fafa 	bl	800a6ee <USBD_LL_DataInStage>
}
 800c0fa:	bf00      	nop
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b082      	sub	sp, #8
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c110:	4618      	mov	r0, r3
 800c112:	f7fe fc0a 	bl	800a92a <USBD_LL_SOF>
}
 800c116:	bf00      	nop
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b084      	sub	sp, #16
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c126:	2301      	movs	r3, #1
 800c128:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	2b02      	cmp	r3, #2
 800c130:	d001      	beq.n	800c136 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c132:	f7f7 f871 	bl	8003218 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c13c:	7bfa      	ldrb	r2, [r7, #15]
 800c13e:	4611      	mov	r1, r2
 800c140:	4618      	mov	r0, r3
 800c142:	f7fe fbba 	bl	800a8ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fe fb73 	bl	800a838 <USBD_LL_Reset>
}
 800c152:	bf00      	nop
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
	...

0800c15c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7fe fbb4 	bl	800a8d8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	699b      	ldr	r3, [r3, #24]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d005      	beq.n	800c184 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c178:	4b04      	ldr	r3, [pc, #16]	; (800c18c <HAL_PCD_SuspendCallback+0x30>)
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	4a03      	ldr	r2, [pc, #12]	; (800c18c <HAL_PCD_SuspendCallback+0x30>)
 800c17e:	f043 0306 	orr.w	r3, r3, #6
 800c182:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c184:	bf00      	nop
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	e000ed00 	.word	0xe000ed00

0800c190 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fe fbae 	bl	800a900 <USBD_LL_Resume>
}
 800c1a4:	bf00      	nop
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c1b4:	4a28      	ldr	r2, [pc, #160]	; (800c258 <USBD_LL_Init+0xac>)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a26      	ldr	r2, [pc, #152]	; (800c258 <USBD_LL_Init+0xac>)
 800c1c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c1c4:	4b24      	ldr	r3, [pc, #144]	; (800c258 <USBD_LL_Init+0xac>)
 800c1c6:	4a25      	ldr	r2, [pc, #148]	; (800c25c <USBD_LL_Init+0xb0>)
 800c1c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c1ca:	4b23      	ldr	r3, [pc, #140]	; (800c258 <USBD_LL_Init+0xac>)
 800c1cc:	2208      	movs	r2, #8
 800c1ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c1d0:	4b21      	ldr	r3, [pc, #132]	; (800c258 <USBD_LL_Init+0xac>)
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c1d6:	4b20      	ldr	r3, [pc, #128]	; (800c258 <USBD_LL_Init+0xac>)
 800c1d8:	2200      	movs	r2, #0
 800c1da:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c1dc:	4b1e      	ldr	r3, [pc, #120]	; (800c258 <USBD_LL_Init+0xac>)
 800c1de:	2200      	movs	r2, #0
 800c1e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c1e2:	4b1d      	ldr	r3, [pc, #116]	; (800c258 <USBD_LL_Init+0xac>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c1e8:	481b      	ldr	r0, [pc, #108]	; (800c258 <USBD_LL_Init+0xac>)
 800c1ea:	f7f8 fcd8 	bl	8004b9e <HAL_PCD_Init>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d001      	beq.n	800c1f8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c1f4:	f7f7 f810 	bl	8003218 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1fe:	2318      	movs	r3, #24
 800c200:	2200      	movs	r2, #0
 800c202:	2100      	movs	r1, #0
 800c204:	f7fa f81a 	bl	800623c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c20e:	2358      	movs	r3, #88	; 0x58
 800c210:	2200      	movs	r2, #0
 800c212:	2180      	movs	r1, #128	; 0x80
 800c214:	f7fa f812 	bl	800623c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c21e:	23c0      	movs	r3, #192	; 0xc0
 800c220:	2200      	movs	r2, #0
 800c222:	2181      	movs	r1, #129	; 0x81
 800c224:	f7fa f80a 	bl	800623c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c22e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c232:	2200      	movs	r2, #0
 800c234:	2101      	movs	r1, #1
 800c236:	f7fa f801 	bl	800623c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c240:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c244:	2200      	movs	r2, #0
 800c246:	2182      	movs	r1, #130	; 0x82
 800c248:	f7f9 fff8 	bl	800623c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	200012bc 	.word	0x200012bc
 800c25c:	40005c00 	.word	0x40005c00

0800c260 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c268:	2300      	movs	r3, #0
 800c26a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c26c:	2300      	movs	r3, #0
 800c26e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c276:	4618      	mov	r0, r3
 800c278:	f7f8 fd9c 	bl	8004db4 <HAL_PCD_Start>
 800c27c:	4603      	mov	r3, r0
 800c27e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c280:	7bfb      	ldrb	r3, [r7, #15]
 800c282:	4618      	mov	r0, r3
 800c284:	f000 f94e 	bl	800c524 <USBD_Get_USB_Status>
 800c288:	4603      	mov	r3, r0
 800c28a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c28c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c296:	b580      	push	{r7, lr}
 800c298:	b084      	sub	sp, #16
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
 800c29e:	4608      	mov	r0, r1
 800c2a0:	4611      	mov	r1, r2
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	70fb      	strb	r3, [r7, #3]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	70bb      	strb	r3, [r7, #2]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c2be:	78bb      	ldrb	r3, [r7, #2]
 800c2c0:	883a      	ldrh	r2, [r7, #0]
 800c2c2:	78f9      	ldrb	r1, [r7, #3]
 800c2c4:	f7f8 ff16 	bl	80050f4 <HAL_PCD_EP_Open>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 f928 	bl	800c524 <USBD_Get_USB_Status>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b084      	sub	sp, #16
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2fc:	78fa      	ldrb	r2, [r7, #3]
 800c2fe:	4611      	mov	r1, r2
 800c300:	4618      	mov	r0, r3
 800c302:	f7f8 ff5d 	bl	80051c0 <HAL_PCD_EP_Close>
 800c306:	4603      	mov	r3, r0
 800c308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c30a:	7bfb      	ldrb	r3, [r7, #15]
 800c30c:	4618      	mov	r0, r3
 800c30e:	f000 f909 	bl	800c524 <USBD_Get_USB_Status>
 800c312:	4603      	mov	r3, r0
 800c314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c316:	7bbb      	ldrb	r3, [r7, #14]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	460b      	mov	r3, r1
 800c32a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c32c:	2300      	movs	r3, #0
 800c32e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c330:	2300      	movs	r3, #0
 800c332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c33a:	78fa      	ldrb	r2, [r7, #3]
 800c33c:	4611      	mov	r1, r2
 800c33e:	4618      	mov	r0, r3
 800c340:	f7f9 f81d 	bl	800537e <HAL_PCD_EP_SetStall>
 800c344:	4603      	mov	r3, r0
 800c346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c348:	7bfb      	ldrb	r3, [r7, #15]
 800c34a:	4618      	mov	r0, r3
 800c34c:	f000 f8ea 	bl	800c524 <USBD_Get_USB_Status>
 800c350:	4603      	mov	r3, r0
 800c352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c354:	7bbb      	ldrb	r3, [r7, #14]
}
 800c356:	4618      	mov	r0, r3
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b084      	sub	sp, #16
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	460b      	mov	r3, r1
 800c368:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c36a:	2300      	movs	r3, #0
 800c36c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c36e:	2300      	movs	r3, #0
 800c370:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c378:	78fa      	ldrb	r2, [r7, #3]
 800c37a:	4611      	mov	r1, r2
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7f9 f85e 	bl	800543e <HAL_PCD_EP_ClrStall>
 800c382:	4603      	mov	r3, r0
 800c384:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c386:	7bfb      	ldrb	r3, [r7, #15]
 800c388:	4618      	mov	r0, r3
 800c38a:	f000 f8cb 	bl	800c524 <USBD_Get_USB_Status>
 800c38e:	4603      	mov	r3, r0
 800c390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c392:	7bbb      	ldrb	r3, [r7, #14]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	da0c      	bge.n	800c3d2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3b8:	78fb      	ldrb	r3, [r7, #3]
 800c3ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3be:	68f9      	ldr	r1, [r7, #12]
 800c3c0:	1c5a      	adds	r2, r3, #1
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	4413      	add	r3, r2
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	440b      	add	r3, r1
 800c3cc:	3302      	adds	r3, #2
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	e00b      	b.n	800c3ea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3d2:	78fb      	ldrb	r3, [r7, #3]
 800c3d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3d8:	68f9      	ldr	r1, [r7, #12]
 800c3da:	4613      	mov	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	00db      	lsls	r3, r3, #3
 800c3e2:	440b      	add	r3, r1
 800c3e4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c3e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3714      	adds	r7, #20
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bc80      	pop	{r7}
 800c3f2:	4770      	bx	lr

0800c3f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c400:	2300      	movs	r3, #0
 800c402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c404:	2300      	movs	r3, #0
 800c406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c40e:	78fa      	ldrb	r2, [r7, #3]
 800c410:	4611      	mov	r1, r2
 800c412:	4618      	mov	r0, r3
 800c414:	f7f8 fe49 	bl	80050aa <HAL_PCD_SetAddress>
 800c418:	4603      	mov	r3, r0
 800c41a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 f880 	bl	800c524 <USBD_Get_USB_Status>
 800c424:	4603      	mov	r3, r0
 800c426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c428:	7bbb      	ldrb	r3, [r7, #14]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b086      	sub	sp, #24
 800c436:	af00      	add	r7, sp, #0
 800c438:	60f8      	str	r0, [r7, #12]
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	461a      	mov	r2, r3
 800c43e:	460b      	mov	r3, r1
 800c440:	72fb      	strb	r3, [r7, #11]
 800c442:	4613      	mov	r3, r2
 800c444:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c446:	2300      	movs	r3, #0
 800c448:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c454:	893b      	ldrh	r3, [r7, #8]
 800c456:	7af9      	ldrb	r1, [r7, #11]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	f7f8 ff4d 	bl	80052f8 <HAL_PCD_EP_Transmit>
 800c45e:	4603      	mov	r3, r0
 800c460:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c462:	7dfb      	ldrb	r3, [r7, #23]
 800c464:	4618      	mov	r0, r3
 800c466:	f000 f85d 	bl	800c524 <USBD_Get_USB_Status>
 800c46a:	4603      	mov	r3, r0
 800c46c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c46e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c470:	4618      	mov	r0, r3
 800c472:	3718      	adds	r7, #24
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	607a      	str	r2, [r7, #4]
 800c482:	461a      	mov	r2, r3
 800c484:	460b      	mov	r3, r1
 800c486:	72fb      	strb	r3, [r7, #11]
 800c488:	4613      	mov	r3, r2
 800c48a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c48c:	2300      	movs	r3, #0
 800c48e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c490:	2300      	movs	r3, #0
 800c492:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c49a:	893b      	ldrh	r3, [r7, #8]
 800c49c:	7af9      	ldrb	r1, [r7, #11]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	f7f8 fed6 	bl	8005250 <HAL_PCD_EP_Receive>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4a8:	7dfb      	ldrb	r3, [r7, #23]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f000 f83a 	bl	800c524 <USBD_Get_USB_Status>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3718      	adds	r7, #24
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b082      	sub	sp, #8
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c4d0:	78fa      	ldrb	r2, [r7, #3]
 800c4d2:	4611      	mov	r1, r2
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7f8 fef8 	bl	80052ca <HAL_PCD_EP_GetRxCount>
 800c4da:	4603      	mov	r3, r0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3708      	adds	r7, #8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c4ec:	4b02      	ldr	r3, [pc, #8]	; (800c4f8 <USBD_static_malloc+0x14>)
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	370c      	adds	r7, #12
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bc80      	pop	{r7}
 800c4f6:	4770      	bx	lr
 800c4f8:	2000028c 	.word	0x2000028c

0800c4fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]

}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	bc80      	pop	{r7}
 800c50c:	4770      	bx	lr

0800c50e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c50e:	b480      	push	{r7}
 800c510:	b083      	sub	sp, #12
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
 800c516:	460b      	mov	r3, r1
 800c518:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c51a:	bf00      	nop
 800c51c:	370c      	adds	r7, #12
 800c51e:	46bd      	mov	sp, r7
 800c520:	bc80      	pop	{r7}
 800c522:	4770      	bx	lr

0800c524 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c52e:	2300      	movs	r3, #0
 800c530:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c532:	79fb      	ldrb	r3, [r7, #7]
 800c534:	2b03      	cmp	r3, #3
 800c536:	d817      	bhi.n	800c568 <USBD_Get_USB_Status+0x44>
 800c538:	a201      	add	r2, pc, #4	; (adr r2, 800c540 <USBD_Get_USB_Status+0x1c>)
 800c53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c53e:	bf00      	nop
 800c540:	0800c551 	.word	0x0800c551
 800c544:	0800c557 	.word	0x0800c557
 800c548:	0800c55d 	.word	0x0800c55d
 800c54c:	0800c563 	.word	0x0800c563
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c550:	2300      	movs	r3, #0
 800c552:	73fb      	strb	r3, [r7, #15]
    break;
 800c554:	e00b      	b.n	800c56e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c556:	2302      	movs	r3, #2
 800c558:	73fb      	strb	r3, [r7, #15]
    break;
 800c55a:	e008      	b.n	800c56e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c55c:	2301      	movs	r3, #1
 800c55e:	73fb      	strb	r3, [r7, #15]
    break;
 800c560:	e005      	b.n	800c56e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c562:	2302      	movs	r3, #2
 800c564:	73fb      	strb	r3, [r7, #15]
    break;
 800c566:	e002      	b.n	800c56e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c568:	2302      	movs	r3, #2
 800c56a:	73fb      	strb	r3, [r7, #15]
    break;
 800c56c:	bf00      	nop
  }
  return usb_status;
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	bc80      	pop	{r7}
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop

0800c57c <__errno>:
 800c57c:	4b01      	ldr	r3, [pc, #4]	; (800c584 <__errno+0x8>)
 800c57e:	6818      	ldr	r0, [r3, #0]
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	2000018c 	.word	0x2000018c

0800c588 <__libc_init_array>:
 800c588:	b570      	push	{r4, r5, r6, lr}
 800c58a:	2600      	movs	r6, #0
 800c58c:	4d0c      	ldr	r5, [pc, #48]	; (800c5c0 <__libc_init_array+0x38>)
 800c58e:	4c0d      	ldr	r4, [pc, #52]	; (800c5c4 <__libc_init_array+0x3c>)
 800c590:	1b64      	subs	r4, r4, r5
 800c592:	10a4      	asrs	r4, r4, #2
 800c594:	42a6      	cmp	r6, r4
 800c596:	d109      	bne.n	800c5ac <__libc_init_array+0x24>
 800c598:	f001 fa32 	bl	800da00 <_init>
 800c59c:	2600      	movs	r6, #0
 800c59e:	4d0a      	ldr	r5, [pc, #40]	; (800c5c8 <__libc_init_array+0x40>)
 800c5a0:	4c0a      	ldr	r4, [pc, #40]	; (800c5cc <__libc_init_array+0x44>)
 800c5a2:	1b64      	subs	r4, r4, r5
 800c5a4:	10a4      	asrs	r4, r4, #2
 800c5a6:	42a6      	cmp	r6, r4
 800c5a8:	d105      	bne.n	800c5b6 <__libc_init_array+0x2e>
 800c5aa:	bd70      	pop	{r4, r5, r6, pc}
 800c5ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5b0:	4798      	blx	r3
 800c5b2:	3601      	adds	r6, #1
 800c5b4:	e7ee      	b.n	800c594 <__libc_init_array+0xc>
 800c5b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5ba:	4798      	blx	r3
 800c5bc:	3601      	adds	r6, #1
 800c5be:	e7f2      	b.n	800c5a6 <__libc_init_array+0x1e>
 800c5c0:	0800dc44 	.word	0x0800dc44
 800c5c4:	0800dc44 	.word	0x0800dc44
 800c5c8:	0800dc44 	.word	0x0800dc44
 800c5cc:	0800dc48 	.word	0x0800dc48

0800c5d0 <__itoa>:
 800c5d0:	1e93      	subs	r3, r2, #2
 800c5d2:	2b22      	cmp	r3, #34	; 0x22
 800c5d4:	b510      	push	{r4, lr}
 800c5d6:	460c      	mov	r4, r1
 800c5d8:	d904      	bls.n	800c5e4 <__itoa+0x14>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	461c      	mov	r4, r3
 800c5de:	700b      	strb	r3, [r1, #0]
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	bd10      	pop	{r4, pc}
 800c5e4:	2a0a      	cmp	r2, #10
 800c5e6:	d109      	bne.n	800c5fc <__itoa+0x2c>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	da07      	bge.n	800c5fc <__itoa+0x2c>
 800c5ec:	232d      	movs	r3, #45	; 0x2d
 800c5ee:	700b      	strb	r3, [r1, #0]
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	4240      	negs	r0, r0
 800c5f4:	4421      	add	r1, r4
 800c5f6:	f000 f853 	bl	800c6a0 <__utoa>
 800c5fa:	e7f1      	b.n	800c5e0 <__itoa+0x10>
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	e7f9      	b.n	800c5f4 <__itoa+0x24>

0800c600 <itoa>:
 800c600:	f7ff bfe6 	b.w	800c5d0 <__itoa>

0800c604 <memcpy>:
 800c604:	440a      	add	r2, r1
 800c606:	4291      	cmp	r1, r2
 800c608:	f100 33ff 	add.w	r3, r0, #4294967295
 800c60c:	d100      	bne.n	800c610 <memcpy+0xc>
 800c60e:	4770      	bx	lr
 800c610:	b510      	push	{r4, lr}
 800c612:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c616:	4291      	cmp	r1, r2
 800c618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c61c:	d1f9      	bne.n	800c612 <memcpy+0xe>
 800c61e:	bd10      	pop	{r4, pc}

0800c620 <memset>:
 800c620:	4603      	mov	r3, r0
 800c622:	4402      	add	r2, r0
 800c624:	4293      	cmp	r3, r2
 800c626:	d100      	bne.n	800c62a <memset+0xa>
 800c628:	4770      	bx	lr
 800c62a:	f803 1b01 	strb.w	r1, [r3], #1
 800c62e:	e7f9      	b.n	800c624 <memset+0x4>

0800c630 <iprintf>:
 800c630:	b40f      	push	{r0, r1, r2, r3}
 800c632:	4b0a      	ldr	r3, [pc, #40]	; (800c65c <iprintf+0x2c>)
 800c634:	b513      	push	{r0, r1, r4, lr}
 800c636:	681c      	ldr	r4, [r3, #0]
 800c638:	b124      	cbz	r4, 800c644 <iprintf+0x14>
 800c63a:	69a3      	ldr	r3, [r4, #24]
 800c63c:	b913      	cbnz	r3, 800c644 <iprintf+0x14>
 800c63e:	4620      	mov	r0, r4
 800c640:	f000 f8c8 	bl	800c7d4 <__sinit>
 800c644:	ab05      	add	r3, sp, #20
 800c646:	4620      	mov	r0, r4
 800c648:	9a04      	ldr	r2, [sp, #16]
 800c64a:	68a1      	ldr	r1, [r4, #8]
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	f000 fb3f 	bl	800ccd0 <_vfiprintf_r>
 800c652:	b002      	add	sp, #8
 800c654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c658:	b004      	add	sp, #16
 800c65a:	4770      	bx	lr
 800c65c:	2000018c 	.word	0x2000018c

0800c660 <siprintf>:
 800c660:	b40e      	push	{r1, r2, r3}
 800c662:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c666:	b500      	push	{lr}
 800c668:	b09c      	sub	sp, #112	; 0x70
 800c66a:	ab1d      	add	r3, sp, #116	; 0x74
 800c66c:	9002      	str	r0, [sp, #8]
 800c66e:	9006      	str	r0, [sp, #24]
 800c670:	9107      	str	r1, [sp, #28]
 800c672:	9104      	str	r1, [sp, #16]
 800c674:	4808      	ldr	r0, [pc, #32]	; (800c698 <siprintf+0x38>)
 800c676:	4909      	ldr	r1, [pc, #36]	; (800c69c <siprintf+0x3c>)
 800c678:	f853 2b04 	ldr.w	r2, [r3], #4
 800c67c:	9105      	str	r1, [sp, #20]
 800c67e:	6800      	ldr	r0, [r0, #0]
 800c680:	a902      	add	r1, sp, #8
 800c682:	9301      	str	r3, [sp, #4]
 800c684:	f000 f9fc 	bl	800ca80 <_svfiprintf_r>
 800c688:	2200      	movs	r2, #0
 800c68a:	9b02      	ldr	r3, [sp, #8]
 800c68c:	701a      	strb	r2, [r3, #0]
 800c68e:	b01c      	add	sp, #112	; 0x70
 800c690:	f85d eb04 	ldr.w	lr, [sp], #4
 800c694:	b003      	add	sp, #12
 800c696:	4770      	bx	lr
 800c698:	2000018c 	.word	0x2000018c
 800c69c:	ffff0208 	.word	0xffff0208

0800c6a0 <__utoa>:
 800c6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6a2:	b08b      	sub	sp, #44	; 0x2c
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	466e      	mov	r6, sp
 800c6aa:	4c1d      	ldr	r4, [pc, #116]	; (800c720 <__utoa+0x80>)
 800c6ac:	f104 0c20 	add.w	ip, r4, #32
 800c6b0:	4637      	mov	r7, r6
 800c6b2:	6820      	ldr	r0, [r4, #0]
 800c6b4:	6861      	ldr	r1, [r4, #4]
 800c6b6:	3408      	adds	r4, #8
 800c6b8:	c703      	stmia	r7!, {r0, r1}
 800c6ba:	4564      	cmp	r4, ip
 800c6bc:	463e      	mov	r6, r7
 800c6be:	d1f7      	bne.n	800c6b0 <__utoa+0x10>
 800c6c0:	7921      	ldrb	r1, [r4, #4]
 800c6c2:	6820      	ldr	r0, [r4, #0]
 800c6c4:	7139      	strb	r1, [r7, #4]
 800c6c6:	1e91      	subs	r1, r2, #2
 800c6c8:	2922      	cmp	r1, #34	; 0x22
 800c6ca:	6038      	str	r0, [r7, #0]
 800c6cc:	f04f 0100 	mov.w	r1, #0
 800c6d0:	d904      	bls.n	800c6dc <__utoa+0x3c>
 800c6d2:	7019      	strb	r1, [r3, #0]
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	b00b      	add	sp, #44	; 0x2c
 800c6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6dc:	1e58      	subs	r0, r3, #1
 800c6de:	4684      	mov	ip, r0
 800c6e0:	fbb5 f7f2 	udiv	r7, r5, r2
 800c6e4:	fb02 5617 	mls	r6, r2, r7, r5
 800c6e8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800c6ec:	4476      	add	r6, lr
 800c6ee:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c6f8:	462e      	mov	r6, r5
 800c6fa:	42b2      	cmp	r2, r6
 800c6fc:	463d      	mov	r5, r7
 800c6fe:	f101 0101 	add.w	r1, r1, #1
 800c702:	d9ed      	bls.n	800c6e0 <__utoa+0x40>
 800c704:	2200      	movs	r2, #0
 800c706:	545a      	strb	r2, [r3, r1]
 800c708:	1919      	adds	r1, r3, r4
 800c70a:	1aa5      	subs	r5, r4, r2
 800c70c:	42aa      	cmp	r2, r5
 800c70e:	dae2      	bge.n	800c6d6 <__utoa+0x36>
 800c710:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c714:	780e      	ldrb	r6, [r1, #0]
 800c716:	3201      	adds	r2, #1
 800c718:	7006      	strb	r6, [r0, #0]
 800c71a:	f801 5901 	strb.w	r5, [r1], #-1
 800c71e:	e7f4      	b.n	800c70a <__utoa+0x6a>
 800c720:	0800db88 	.word	0x0800db88

0800c724 <std>:
 800c724:	2300      	movs	r3, #0
 800c726:	b510      	push	{r4, lr}
 800c728:	4604      	mov	r4, r0
 800c72a:	e9c0 3300 	strd	r3, r3, [r0]
 800c72e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c732:	6083      	str	r3, [r0, #8]
 800c734:	8181      	strh	r1, [r0, #12]
 800c736:	6643      	str	r3, [r0, #100]	; 0x64
 800c738:	81c2      	strh	r2, [r0, #14]
 800c73a:	6183      	str	r3, [r0, #24]
 800c73c:	4619      	mov	r1, r3
 800c73e:	2208      	movs	r2, #8
 800c740:	305c      	adds	r0, #92	; 0x5c
 800c742:	f7ff ff6d 	bl	800c620 <memset>
 800c746:	4b05      	ldr	r3, [pc, #20]	; (800c75c <std+0x38>)
 800c748:	6224      	str	r4, [r4, #32]
 800c74a:	6263      	str	r3, [r4, #36]	; 0x24
 800c74c:	4b04      	ldr	r3, [pc, #16]	; (800c760 <std+0x3c>)
 800c74e:	62a3      	str	r3, [r4, #40]	; 0x28
 800c750:	4b04      	ldr	r3, [pc, #16]	; (800c764 <std+0x40>)
 800c752:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c754:	4b04      	ldr	r3, [pc, #16]	; (800c768 <std+0x44>)
 800c756:	6323      	str	r3, [r4, #48]	; 0x30
 800c758:	bd10      	pop	{r4, pc}
 800c75a:	bf00      	nop
 800c75c:	0800d27d 	.word	0x0800d27d
 800c760:	0800d29f 	.word	0x0800d29f
 800c764:	0800d2d7 	.word	0x0800d2d7
 800c768:	0800d2fb 	.word	0x0800d2fb

0800c76c <_cleanup_r>:
 800c76c:	4901      	ldr	r1, [pc, #4]	; (800c774 <_cleanup_r+0x8>)
 800c76e:	f000 b8af 	b.w	800c8d0 <_fwalk_reent>
 800c772:	bf00      	nop
 800c774:	0800d5d5 	.word	0x0800d5d5

0800c778 <__sfmoreglue>:
 800c778:	b570      	push	{r4, r5, r6, lr}
 800c77a:	2568      	movs	r5, #104	; 0x68
 800c77c:	1e4a      	subs	r2, r1, #1
 800c77e:	4355      	muls	r5, r2
 800c780:	460e      	mov	r6, r1
 800c782:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c786:	f000 f8c5 	bl	800c914 <_malloc_r>
 800c78a:	4604      	mov	r4, r0
 800c78c:	b140      	cbz	r0, 800c7a0 <__sfmoreglue+0x28>
 800c78e:	2100      	movs	r1, #0
 800c790:	e9c0 1600 	strd	r1, r6, [r0]
 800c794:	300c      	adds	r0, #12
 800c796:	60a0      	str	r0, [r4, #8]
 800c798:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c79c:	f7ff ff40 	bl	800c620 <memset>
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	bd70      	pop	{r4, r5, r6, pc}

0800c7a4 <__sfp_lock_acquire>:
 800c7a4:	4801      	ldr	r0, [pc, #4]	; (800c7ac <__sfp_lock_acquire+0x8>)
 800c7a6:	f000 b8b3 	b.w	800c910 <__retarget_lock_acquire_recursive>
 800c7aa:	bf00      	nop
 800c7ac:	200015b0 	.word	0x200015b0

0800c7b0 <__sfp_lock_release>:
 800c7b0:	4801      	ldr	r0, [pc, #4]	; (800c7b8 <__sfp_lock_release+0x8>)
 800c7b2:	f000 b8ae 	b.w	800c912 <__retarget_lock_release_recursive>
 800c7b6:	bf00      	nop
 800c7b8:	200015b0 	.word	0x200015b0

0800c7bc <__sinit_lock_acquire>:
 800c7bc:	4801      	ldr	r0, [pc, #4]	; (800c7c4 <__sinit_lock_acquire+0x8>)
 800c7be:	f000 b8a7 	b.w	800c910 <__retarget_lock_acquire_recursive>
 800c7c2:	bf00      	nop
 800c7c4:	200015ab 	.word	0x200015ab

0800c7c8 <__sinit_lock_release>:
 800c7c8:	4801      	ldr	r0, [pc, #4]	; (800c7d0 <__sinit_lock_release+0x8>)
 800c7ca:	f000 b8a2 	b.w	800c912 <__retarget_lock_release_recursive>
 800c7ce:	bf00      	nop
 800c7d0:	200015ab 	.word	0x200015ab

0800c7d4 <__sinit>:
 800c7d4:	b510      	push	{r4, lr}
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	f7ff fff0 	bl	800c7bc <__sinit_lock_acquire>
 800c7dc:	69a3      	ldr	r3, [r4, #24]
 800c7de:	b11b      	cbz	r3, 800c7e8 <__sinit+0x14>
 800c7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7e4:	f7ff bff0 	b.w	800c7c8 <__sinit_lock_release>
 800c7e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c7ec:	6523      	str	r3, [r4, #80]	; 0x50
 800c7ee:	4b13      	ldr	r3, [pc, #76]	; (800c83c <__sinit+0x68>)
 800c7f0:	4a13      	ldr	r2, [pc, #76]	; (800c840 <__sinit+0x6c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c7f6:	42a3      	cmp	r3, r4
 800c7f8:	bf08      	it	eq
 800c7fa:	2301      	moveq	r3, #1
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	bf08      	it	eq
 800c800:	61a3      	streq	r3, [r4, #24]
 800c802:	f000 f81f 	bl	800c844 <__sfp>
 800c806:	6060      	str	r0, [r4, #4]
 800c808:	4620      	mov	r0, r4
 800c80a:	f000 f81b 	bl	800c844 <__sfp>
 800c80e:	60a0      	str	r0, [r4, #8]
 800c810:	4620      	mov	r0, r4
 800c812:	f000 f817 	bl	800c844 <__sfp>
 800c816:	2200      	movs	r2, #0
 800c818:	2104      	movs	r1, #4
 800c81a:	60e0      	str	r0, [r4, #12]
 800c81c:	6860      	ldr	r0, [r4, #4]
 800c81e:	f7ff ff81 	bl	800c724 <std>
 800c822:	2201      	movs	r2, #1
 800c824:	2109      	movs	r1, #9
 800c826:	68a0      	ldr	r0, [r4, #8]
 800c828:	f7ff ff7c 	bl	800c724 <std>
 800c82c:	2202      	movs	r2, #2
 800c82e:	2112      	movs	r1, #18
 800c830:	68e0      	ldr	r0, [r4, #12]
 800c832:	f7ff ff77 	bl	800c724 <std>
 800c836:	2301      	movs	r3, #1
 800c838:	61a3      	str	r3, [r4, #24]
 800c83a:	e7d1      	b.n	800c7e0 <__sinit+0xc>
 800c83c:	0800db84 	.word	0x0800db84
 800c840:	0800c76d 	.word	0x0800c76d

0800c844 <__sfp>:
 800c844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c846:	4607      	mov	r7, r0
 800c848:	f7ff ffac 	bl	800c7a4 <__sfp_lock_acquire>
 800c84c:	4b1e      	ldr	r3, [pc, #120]	; (800c8c8 <__sfp+0x84>)
 800c84e:	681e      	ldr	r6, [r3, #0]
 800c850:	69b3      	ldr	r3, [r6, #24]
 800c852:	b913      	cbnz	r3, 800c85a <__sfp+0x16>
 800c854:	4630      	mov	r0, r6
 800c856:	f7ff ffbd 	bl	800c7d4 <__sinit>
 800c85a:	3648      	adds	r6, #72	; 0x48
 800c85c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c860:	3b01      	subs	r3, #1
 800c862:	d503      	bpl.n	800c86c <__sfp+0x28>
 800c864:	6833      	ldr	r3, [r6, #0]
 800c866:	b30b      	cbz	r3, 800c8ac <__sfp+0x68>
 800c868:	6836      	ldr	r6, [r6, #0]
 800c86a:	e7f7      	b.n	800c85c <__sfp+0x18>
 800c86c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c870:	b9d5      	cbnz	r5, 800c8a8 <__sfp+0x64>
 800c872:	4b16      	ldr	r3, [pc, #88]	; (800c8cc <__sfp+0x88>)
 800c874:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c878:	60e3      	str	r3, [r4, #12]
 800c87a:	6665      	str	r5, [r4, #100]	; 0x64
 800c87c:	f000 f847 	bl	800c90e <__retarget_lock_init_recursive>
 800c880:	f7ff ff96 	bl	800c7b0 <__sfp_lock_release>
 800c884:	2208      	movs	r2, #8
 800c886:	4629      	mov	r1, r5
 800c888:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c88c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c890:	6025      	str	r5, [r4, #0]
 800c892:	61a5      	str	r5, [r4, #24]
 800c894:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c898:	f7ff fec2 	bl	800c620 <memset>
 800c89c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c8a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8a8:	3468      	adds	r4, #104	; 0x68
 800c8aa:	e7d9      	b.n	800c860 <__sfp+0x1c>
 800c8ac:	2104      	movs	r1, #4
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	f7ff ff62 	bl	800c778 <__sfmoreglue>
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	6030      	str	r0, [r6, #0]
 800c8b8:	2800      	cmp	r0, #0
 800c8ba:	d1d5      	bne.n	800c868 <__sfp+0x24>
 800c8bc:	f7ff ff78 	bl	800c7b0 <__sfp_lock_release>
 800c8c0:	230c      	movs	r3, #12
 800c8c2:	603b      	str	r3, [r7, #0]
 800c8c4:	e7ee      	b.n	800c8a4 <__sfp+0x60>
 800c8c6:	bf00      	nop
 800c8c8:	0800db84 	.word	0x0800db84
 800c8cc:	ffff0001 	.word	0xffff0001

0800c8d0 <_fwalk_reent>:
 800c8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8d4:	4606      	mov	r6, r0
 800c8d6:	4688      	mov	r8, r1
 800c8d8:	2700      	movs	r7, #0
 800c8da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c8de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8e2:	f1b9 0901 	subs.w	r9, r9, #1
 800c8e6:	d505      	bpl.n	800c8f4 <_fwalk_reent+0x24>
 800c8e8:	6824      	ldr	r4, [r4, #0]
 800c8ea:	2c00      	cmp	r4, #0
 800c8ec:	d1f7      	bne.n	800c8de <_fwalk_reent+0xe>
 800c8ee:	4638      	mov	r0, r7
 800c8f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8f4:	89ab      	ldrh	r3, [r5, #12]
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d907      	bls.n	800c90a <_fwalk_reent+0x3a>
 800c8fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8fe:	3301      	adds	r3, #1
 800c900:	d003      	beq.n	800c90a <_fwalk_reent+0x3a>
 800c902:	4629      	mov	r1, r5
 800c904:	4630      	mov	r0, r6
 800c906:	47c0      	blx	r8
 800c908:	4307      	orrs	r7, r0
 800c90a:	3568      	adds	r5, #104	; 0x68
 800c90c:	e7e9      	b.n	800c8e2 <_fwalk_reent+0x12>

0800c90e <__retarget_lock_init_recursive>:
 800c90e:	4770      	bx	lr

0800c910 <__retarget_lock_acquire_recursive>:
 800c910:	4770      	bx	lr

0800c912 <__retarget_lock_release_recursive>:
 800c912:	4770      	bx	lr

0800c914 <_malloc_r>:
 800c914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c916:	1ccd      	adds	r5, r1, #3
 800c918:	f025 0503 	bic.w	r5, r5, #3
 800c91c:	3508      	adds	r5, #8
 800c91e:	2d0c      	cmp	r5, #12
 800c920:	bf38      	it	cc
 800c922:	250c      	movcc	r5, #12
 800c924:	2d00      	cmp	r5, #0
 800c926:	4606      	mov	r6, r0
 800c928:	db01      	blt.n	800c92e <_malloc_r+0x1a>
 800c92a:	42a9      	cmp	r1, r5
 800c92c:	d903      	bls.n	800c936 <_malloc_r+0x22>
 800c92e:	230c      	movs	r3, #12
 800c930:	6033      	str	r3, [r6, #0]
 800c932:	2000      	movs	r0, #0
 800c934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c936:	f000 ff27 	bl	800d788 <__malloc_lock>
 800c93a:	4921      	ldr	r1, [pc, #132]	; (800c9c0 <_malloc_r+0xac>)
 800c93c:	680a      	ldr	r2, [r1, #0]
 800c93e:	4614      	mov	r4, r2
 800c940:	b99c      	cbnz	r4, 800c96a <_malloc_r+0x56>
 800c942:	4f20      	ldr	r7, [pc, #128]	; (800c9c4 <_malloc_r+0xb0>)
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	b923      	cbnz	r3, 800c952 <_malloc_r+0x3e>
 800c948:	4621      	mov	r1, r4
 800c94a:	4630      	mov	r0, r6
 800c94c:	f000 fc86 	bl	800d25c <_sbrk_r>
 800c950:	6038      	str	r0, [r7, #0]
 800c952:	4629      	mov	r1, r5
 800c954:	4630      	mov	r0, r6
 800c956:	f000 fc81 	bl	800d25c <_sbrk_r>
 800c95a:	1c43      	adds	r3, r0, #1
 800c95c:	d123      	bne.n	800c9a6 <_malloc_r+0x92>
 800c95e:	230c      	movs	r3, #12
 800c960:	4630      	mov	r0, r6
 800c962:	6033      	str	r3, [r6, #0]
 800c964:	f000 ff16 	bl	800d794 <__malloc_unlock>
 800c968:	e7e3      	b.n	800c932 <_malloc_r+0x1e>
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	1b5b      	subs	r3, r3, r5
 800c96e:	d417      	bmi.n	800c9a0 <_malloc_r+0x8c>
 800c970:	2b0b      	cmp	r3, #11
 800c972:	d903      	bls.n	800c97c <_malloc_r+0x68>
 800c974:	6023      	str	r3, [r4, #0]
 800c976:	441c      	add	r4, r3
 800c978:	6025      	str	r5, [r4, #0]
 800c97a:	e004      	b.n	800c986 <_malloc_r+0x72>
 800c97c:	6863      	ldr	r3, [r4, #4]
 800c97e:	42a2      	cmp	r2, r4
 800c980:	bf0c      	ite	eq
 800c982:	600b      	streq	r3, [r1, #0]
 800c984:	6053      	strne	r3, [r2, #4]
 800c986:	4630      	mov	r0, r6
 800c988:	f000 ff04 	bl	800d794 <__malloc_unlock>
 800c98c:	f104 000b 	add.w	r0, r4, #11
 800c990:	1d23      	adds	r3, r4, #4
 800c992:	f020 0007 	bic.w	r0, r0, #7
 800c996:	1ac2      	subs	r2, r0, r3
 800c998:	d0cc      	beq.n	800c934 <_malloc_r+0x20>
 800c99a:	1a1b      	subs	r3, r3, r0
 800c99c:	50a3      	str	r3, [r4, r2]
 800c99e:	e7c9      	b.n	800c934 <_malloc_r+0x20>
 800c9a0:	4622      	mov	r2, r4
 800c9a2:	6864      	ldr	r4, [r4, #4]
 800c9a4:	e7cc      	b.n	800c940 <_malloc_r+0x2c>
 800c9a6:	1cc4      	adds	r4, r0, #3
 800c9a8:	f024 0403 	bic.w	r4, r4, #3
 800c9ac:	42a0      	cmp	r0, r4
 800c9ae:	d0e3      	beq.n	800c978 <_malloc_r+0x64>
 800c9b0:	1a21      	subs	r1, r4, r0
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f000 fc52 	bl	800d25c <_sbrk_r>
 800c9b8:	3001      	adds	r0, #1
 800c9ba:	d1dd      	bne.n	800c978 <_malloc_r+0x64>
 800c9bc:	e7cf      	b.n	800c95e <_malloc_r+0x4a>
 800c9be:	bf00      	nop
 800c9c0:	200004ac 	.word	0x200004ac
 800c9c4:	200004b0 	.word	0x200004b0

0800c9c8 <__ssputs_r>:
 800c9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9cc:	688e      	ldr	r6, [r1, #8]
 800c9ce:	4682      	mov	sl, r0
 800c9d0:	429e      	cmp	r6, r3
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	4690      	mov	r8, r2
 800c9d6:	461f      	mov	r7, r3
 800c9d8:	d838      	bhi.n	800ca4c <__ssputs_r+0x84>
 800c9da:	898a      	ldrh	r2, [r1, #12]
 800c9dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9e0:	d032      	beq.n	800ca48 <__ssputs_r+0x80>
 800c9e2:	6825      	ldr	r5, [r4, #0]
 800c9e4:	6909      	ldr	r1, [r1, #16]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	eba5 0901 	sub.w	r9, r5, r1
 800c9ec:	6965      	ldr	r5, [r4, #20]
 800c9ee:	444b      	add	r3, r9
 800c9f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9f8:	106d      	asrs	r5, r5, #1
 800c9fa:	429d      	cmp	r5, r3
 800c9fc:	bf38      	it	cc
 800c9fe:	461d      	movcc	r5, r3
 800ca00:	0553      	lsls	r3, r2, #21
 800ca02:	d531      	bpl.n	800ca68 <__ssputs_r+0xa0>
 800ca04:	4629      	mov	r1, r5
 800ca06:	f7ff ff85 	bl	800c914 <_malloc_r>
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	b950      	cbnz	r0, 800ca24 <__ssputs_r+0x5c>
 800ca0e:	230c      	movs	r3, #12
 800ca10:	f04f 30ff 	mov.w	r0, #4294967295
 800ca14:	f8ca 3000 	str.w	r3, [sl]
 800ca18:	89a3      	ldrh	r3, [r4, #12]
 800ca1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca1e:	81a3      	strh	r3, [r4, #12]
 800ca20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca24:	464a      	mov	r2, r9
 800ca26:	6921      	ldr	r1, [r4, #16]
 800ca28:	f7ff fdec 	bl	800c604 <memcpy>
 800ca2c:	89a3      	ldrh	r3, [r4, #12]
 800ca2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca36:	81a3      	strh	r3, [r4, #12]
 800ca38:	6126      	str	r6, [r4, #16]
 800ca3a:	444e      	add	r6, r9
 800ca3c:	6026      	str	r6, [r4, #0]
 800ca3e:	463e      	mov	r6, r7
 800ca40:	6165      	str	r5, [r4, #20]
 800ca42:	eba5 0509 	sub.w	r5, r5, r9
 800ca46:	60a5      	str	r5, [r4, #8]
 800ca48:	42be      	cmp	r6, r7
 800ca4a:	d900      	bls.n	800ca4e <__ssputs_r+0x86>
 800ca4c:	463e      	mov	r6, r7
 800ca4e:	4632      	mov	r2, r6
 800ca50:	4641      	mov	r1, r8
 800ca52:	6820      	ldr	r0, [r4, #0]
 800ca54:	f000 fe7e 	bl	800d754 <memmove>
 800ca58:	68a3      	ldr	r3, [r4, #8]
 800ca5a:	6822      	ldr	r2, [r4, #0]
 800ca5c:	1b9b      	subs	r3, r3, r6
 800ca5e:	4432      	add	r2, r6
 800ca60:	2000      	movs	r0, #0
 800ca62:	60a3      	str	r3, [r4, #8]
 800ca64:	6022      	str	r2, [r4, #0]
 800ca66:	e7db      	b.n	800ca20 <__ssputs_r+0x58>
 800ca68:	462a      	mov	r2, r5
 800ca6a:	f000 fee5 	bl	800d838 <_realloc_r>
 800ca6e:	4606      	mov	r6, r0
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d1e1      	bne.n	800ca38 <__ssputs_r+0x70>
 800ca74:	4650      	mov	r0, sl
 800ca76:	6921      	ldr	r1, [r4, #16]
 800ca78:	f000 fe92 	bl	800d7a0 <_free_r>
 800ca7c:	e7c7      	b.n	800ca0e <__ssputs_r+0x46>
	...

0800ca80 <_svfiprintf_r>:
 800ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca84:	4698      	mov	r8, r3
 800ca86:	898b      	ldrh	r3, [r1, #12]
 800ca88:	4607      	mov	r7, r0
 800ca8a:	061b      	lsls	r3, r3, #24
 800ca8c:	460d      	mov	r5, r1
 800ca8e:	4614      	mov	r4, r2
 800ca90:	b09d      	sub	sp, #116	; 0x74
 800ca92:	d50e      	bpl.n	800cab2 <_svfiprintf_r+0x32>
 800ca94:	690b      	ldr	r3, [r1, #16]
 800ca96:	b963      	cbnz	r3, 800cab2 <_svfiprintf_r+0x32>
 800ca98:	2140      	movs	r1, #64	; 0x40
 800ca9a:	f7ff ff3b 	bl	800c914 <_malloc_r>
 800ca9e:	6028      	str	r0, [r5, #0]
 800caa0:	6128      	str	r0, [r5, #16]
 800caa2:	b920      	cbnz	r0, 800caae <_svfiprintf_r+0x2e>
 800caa4:	230c      	movs	r3, #12
 800caa6:	603b      	str	r3, [r7, #0]
 800caa8:	f04f 30ff 	mov.w	r0, #4294967295
 800caac:	e0d1      	b.n	800cc52 <_svfiprintf_r+0x1d2>
 800caae:	2340      	movs	r3, #64	; 0x40
 800cab0:	616b      	str	r3, [r5, #20]
 800cab2:	2300      	movs	r3, #0
 800cab4:	9309      	str	r3, [sp, #36]	; 0x24
 800cab6:	2320      	movs	r3, #32
 800cab8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cabc:	2330      	movs	r3, #48	; 0x30
 800cabe:	f04f 0901 	mov.w	r9, #1
 800cac2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cac6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cc6c <_svfiprintf_r+0x1ec>
 800caca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cace:	4623      	mov	r3, r4
 800cad0:	469a      	mov	sl, r3
 800cad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cad6:	b10a      	cbz	r2, 800cadc <_svfiprintf_r+0x5c>
 800cad8:	2a25      	cmp	r2, #37	; 0x25
 800cada:	d1f9      	bne.n	800cad0 <_svfiprintf_r+0x50>
 800cadc:	ebba 0b04 	subs.w	fp, sl, r4
 800cae0:	d00b      	beq.n	800cafa <_svfiprintf_r+0x7a>
 800cae2:	465b      	mov	r3, fp
 800cae4:	4622      	mov	r2, r4
 800cae6:	4629      	mov	r1, r5
 800cae8:	4638      	mov	r0, r7
 800caea:	f7ff ff6d 	bl	800c9c8 <__ssputs_r>
 800caee:	3001      	adds	r0, #1
 800caf0:	f000 80aa 	beq.w	800cc48 <_svfiprintf_r+0x1c8>
 800caf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caf6:	445a      	add	r2, fp
 800caf8:	9209      	str	r2, [sp, #36]	; 0x24
 800cafa:	f89a 3000 	ldrb.w	r3, [sl]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f000 80a2 	beq.w	800cc48 <_svfiprintf_r+0x1c8>
 800cb04:	2300      	movs	r3, #0
 800cb06:	f04f 32ff 	mov.w	r2, #4294967295
 800cb0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb0e:	f10a 0a01 	add.w	sl, sl, #1
 800cb12:	9304      	str	r3, [sp, #16]
 800cb14:	9307      	str	r3, [sp, #28]
 800cb16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb1a:	931a      	str	r3, [sp, #104]	; 0x68
 800cb1c:	4654      	mov	r4, sl
 800cb1e:	2205      	movs	r2, #5
 800cb20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb24:	4851      	ldr	r0, [pc, #324]	; (800cc6c <_svfiprintf_r+0x1ec>)
 800cb26:	f000 fe07 	bl	800d738 <memchr>
 800cb2a:	9a04      	ldr	r2, [sp, #16]
 800cb2c:	b9d8      	cbnz	r0, 800cb66 <_svfiprintf_r+0xe6>
 800cb2e:	06d0      	lsls	r0, r2, #27
 800cb30:	bf44      	itt	mi
 800cb32:	2320      	movmi	r3, #32
 800cb34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb38:	0711      	lsls	r1, r2, #28
 800cb3a:	bf44      	itt	mi
 800cb3c:	232b      	movmi	r3, #43	; 0x2b
 800cb3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb42:	f89a 3000 	ldrb.w	r3, [sl]
 800cb46:	2b2a      	cmp	r3, #42	; 0x2a
 800cb48:	d015      	beq.n	800cb76 <_svfiprintf_r+0xf6>
 800cb4a:	4654      	mov	r4, sl
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	f04f 0c0a 	mov.w	ip, #10
 800cb52:	9a07      	ldr	r2, [sp, #28]
 800cb54:	4621      	mov	r1, r4
 800cb56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb5a:	3b30      	subs	r3, #48	; 0x30
 800cb5c:	2b09      	cmp	r3, #9
 800cb5e:	d94e      	bls.n	800cbfe <_svfiprintf_r+0x17e>
 800cb60:	b1b0      	cbz	r0, 800cb90 <_svfiprintf_r+0x110>
 800cb62:	9207      	str	r2, [sp, #28]
 800cb64:	e014      	b.n	800cb90 <_svfiprintf_r+0x110>
 800cb66:	eba0 0308 	sub.w	r3, r0, r8
 800cb6a:	fa09 f303 	lsl.w	r3, r9, r3
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	46a2      	mov	sl, r4
 800cb72:	9304      	str	r3, [sp, #16]
 800cb74:	e7d2      	b.n	800cb1c <_svfiprintf_r+0x9c>
 800cb76:	9b03      	ldr	r3, [sp, #12]
 800cb78:	1d19      	adds	r1, r3, #4
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	9103      	str	r1, [sp, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	bfbb      	ittet	lt
 800cb82:	425b      	neglt	r3, r3
 800cb84:	f042 0202 	orrlt.w	r2, r2, #2
 800cb88:	9307      	strge	r3, [sp, #28]
 800cb8a:	9307      	strlt	r3, [sp, #28]
 800cb8c:	bfb8      	it	lt
 800cb8e:	9204      	strlt	r2, [sp, #16]
 800cb90:	7823      	ldrb	r3, [r4, #0]
 800cb92:	2b2e      	cmp	r3, #46	; 0x2e
 800cb94:	d10c      	bne.n	800cbb0 <_svfiprintf_r+0x130>
 800cb96:	7863      	ldrb	r3, [r4, #1]
 800cb98:	2b2a      	cmp	r3, #42	; 0x2a
 800cb9a:	d135      	bne.n	800cc08 <_svfiprintf_r+0x188>
 800cb9c:	9b03      	ldr	r3, [sp, #12]
 800cb9e:	3402      	adds	r4, #2
 800cba0:	1d1a      	adds	r2, r3, #4
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	9203      	str	r2, [sp, #12]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	bfb8      	it	lt
 800cbaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbae:	9305      	str	r3, [sp, #20]
 800cbb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc7c <_svfiprintf_r+0x1fc>
 800cbb4:	2203      	movs	r2, #3
 800cbb6:	4650      	mov	r0, sl
 800cbb8:	7821      	ldrb	r1, [r4, #0]
 800cbba:	f000 fdbd 	bl	800d738 <memchr>
 800cbbe:	b140      	cbz	r0, 800cbd2 <_svfiprintf_r+0x152>
 800cbc0:	2340      	movs	r3, #64	; 0x40
 800cbc2:	eba0 000a 	sub.w	r0, r0, sl
 800cbc6:	fa03 f000 	lsl.w	r0, r3, r0
 800cbca:	9b04      	ldr	r3, [sp, #16]
 800cbcc:	3401      	adds	r4, #1
 800cbce:	4303      	orrs	r3, r0
 800cbd0:	9304      	str	r3, [sp, #16]
 800cbd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbd6:	2206      	movs	r2, #6
 800cbd8:	4825      	ldr	r0, [pc, #148]	; (800cc70 <_svfiprintf_r+0x1f0>)
 800cbda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbde:	f000 fdab 	bl	800d738 <memchr>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d038      	beq.n	800cc58 <_svfiprintf_r+0x1d8>
 800cbe6:	4b23      	ldr	r3, [pc, #140]	; (800cc74 <_svfiprintf_r+0x1f4>)
 800cbe8:	bb1b      	cbnz	r3, 800cc32 <_svfiprintf_r+0x1b2>
 800cbea:	9b03      	ldr	r3, [sp, #12]
 800cbec:	3307      	adds	r3, #7
 800cbee:	f023 0307 	bic.w	r3, r3, #7
 800cbf2:	3308      	adds	r3, #8
 800cbf4:	9303      	str	r3, [sp, #12]
 800cbf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbf8:	4433      	add	r3, r6
 800cbfa:	9309      	str	r3, [sp, #36]	; 0x24
 800cbfc:	e767      	b.n	800cace <_svfiprintf_r+0x4e>
 800cbfe:	460c      	mov	r4, r1
 800cc00:	2001      	movs	r0, #1
 800cc02:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc06:	e7a5      	b.n	800cb54 <_svfiprintf_r+0xd4>
 800cc08:	2300      	movs	r3, #0
 800cc0a:	f04f 0c0a 	mov.w	ip, #10
 800cc0e:	4619      	mov	r1, r3
 800cc10:	3401      	adds	r4, #1
 800cc12:	9305      	str	r3, [sp, #20]
 800cc14:	4620      	mov	r0, r4
 800cc16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc1a:	3a30      	subs	r2, #48	; 0x30
 800cc1c:	2a09      	cmp	r2, #9
 800cc1e:	d903      	bls.n	800cc28 <_svfiprintf_r+0x1a8>
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d0c5      	beq.n	800cbb0 <_svfiprintf_r+0x130>
 800cc24:	9105      	str	r1, [sp, #20]
 800cc26:	e7c3      	b.n	800cbb0 <_svfiprintf_r+0x130>
 800cc28:	4604      	mov	r4, r0
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc30:	e7f0      	b.n	800cc14 <_svfiprintf_r+0x194>
 800cc32:	ab03      	add	r3, sp, #12
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	462a      	mov	r2, r5
 800cc38:	4638      	mov	r0, r7
 800cc3a:	4b0f      	ldr	r3, [pc, #60]	; (800cc78 <_svfiprintf_r+0x1f8>)
 800cc3c:	a904      	add	r1, sp, #16
 800cc3e:	f3af 8000 	nop.w
 800cc42:	1c42      	adds	r2, r0, #1
 800cc44:	4606      	mov	r6, r0
 800cc46:	d1d6      	bne.n	800cbf6 <_svfiprintf_r+0x176>
 800cc48:	89ab      	ldrh	r3, [r5, #12]
 800cc4a:	065b      	lsls	r3, r3, #25
 800cc4c:	f53f af2c 	bmi.w	800caa8 <_svfiprintf_r+0x28>
 800cc50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc52:	b01d      	add	sp, #116	; 0x74
 800cc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc58:	ab03      	add	r3, sp, #12
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	462a      	mov	r2, r5
 800cc5e:	4638      	mov	r0, r7
 800cc60:	4b05      	ldr	r3, [pc, #20]	; (800cc78 <_svfiprintf_r+0x1f8>)
 800cc62:	a904      	add	r1, sp, #16
 800cc64:	f000 f9d4 	bl	800d010 <_printf_i>
 800cc68:	e7eb      	b.n	800cc42 <_svfiprintf_r+0x1c2>
 800cc6a:	bf00      	nop
 800cc6c:	0800dc10 	.word	0x0800dc10
 800cc70:	0800dc1a 	.word	0x0800dc1a
 800cc74:	00000000 	.word	0x00000000
 800cc78:	0800c9c9 	.word	0x0800c9c9
 800cc7c:	0800dc16 	.word	0x0800dc16

0800cc80 <__sfputc_r>:
 800cc80:	6893      	ldr	r3, [r2, #8]
 800cc82:	b410      	push	{r4}
 800cc84:	3b01      	subs	r3, #1
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	6093      	str	r3, [r2, #8]
 800cc8a:	da07      	bge.n	800cc9c <__sfputc_r+0x1c>
 800cc8c:	6994      	ldr	r4, [r2, #24]
 800cc8e:	42a3      	cmp	r3, r4
 800cc90:	db01      	blt.n	800cc96 <__sfputc_r+0x16>
 800cc92:	290a      	cmp	r1, #10
 800cc94:	d102      	bne.n	800cc9c <__sfputc_r+0x1c>
 800cc96:	bc10      	pop	{r4}
 800cc98:	f000 bb34 	b.w	800d304 <__swbuf_r>
 800cc9c:	6813      	ldr	r3, [r2, #0]
 800cc9e:	1c58      	adds	r0, r3, #1
 800cca0:	6010      	str	r0, [r2, #0]
 800cca2:	7019      	strb	r1, [r3, #0]
 800cca4:	4608      	mov	r0, r1
 800cca6:	bc10      	pop	{r4}
 800cca8:	4770      	bx	lr

0800ccaa <__sfputs_r>:
 800ccaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccac:	4606      	mov	r6, r0
 800ccae:	460f      	mov	r7, r1
 800ccb0:	4614      	mov	r4, r2
 800ccb2:	18d5      	adds	r5, r2, r3
 800ccb4:	42ac      	cmp	r4, r5
 800ccb6:	d101      	bne.n	800ccbc <__sfputs_r+0x12>
 800ccb8:	2000      	movs	r0, #0
 800ccba:	e007      	b.n	800cccc <__sfputs_r+0x22>
 800ccbc:	463a      	mov	r2, r7
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccc4:	f7ff ffdc 	bl	800cc80 <__sfputc_r>
 800ccc8:	1c43      	adds	r3, r0, #1
 800ccca:	d1f3      	bne.n	800ccb4 <__sfputs_r+0xa>
 800cccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ccd0 <_vfiprintf_r>:
 800ccd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd4:	460d      	mov	r5, r1
 800ccd6:	4614      	mov	r4, r2
 800ccd8:	4698      	mov	r8, r3
 800ccda:	4606      	mov	r6, r0
 800ccdc:	b09d      	sub	sp, #116	; 0x74
 800ccde:	b118      	cbz	r0, 800cce8 <_vfiprintf_r+0x18>
 800cce0:	6983      	ldr	r3, [r0, #24]
 800cce2:	b90b      	cbnz	r3, 800cce8 <_vfiprintf_r+0x18>
 800cce4:	f7ff fd76 	bl	800c7d4 <__sinit>
 800cce8:	4b89      	ldr	r3, [pc, #548]	; (800cf10 <_vfiprintf_r+0x240>)
 800ccea:	429d      	cmp	r5, r3
 800ccec:	d11b      	bne.n	800cd26 <_vfiprintf_r+0x56>
 800ccee:	6875      	ldr	r5, [r6, #4]
 800ccf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccf2:	07d9      	lsls	r1, r3, #31
 800ccf4:	d405      	bmi.n	800cd02 <_vfiprintf_r+0x32>
 800ccf6:	89ab      	ldrh	r3, [r5, #12]
 800ccf8:	059a      	lsls	r2, r3, #22
 800ccfa:	d402      	bmi.n	800cd02 <_vfiprintf_r+0x32>
 800ccfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccfe:	f7ff fe07 	bl	800c910 <__retarget_lock_acquire_recursive>
 800cd02:	89ab      	ldrh	r3, [r5, #12]
 800cd04:	071b      	lsls	r3, r3, #28
 800cd06:	d501      	bpl.n	800cd0c <_vfiprintf_r+0x3c>
 800cd08:	692b      	ldr	r3, [r5, #16]
 800cd0a:	b9eb      	cbnz	r3, 800cd48 <_vfiprintf_r+0x78>
 800cd0c:	4629      	mov	r1, r5
 800cd0e:	4630      	mov	r0, r6
 800cd10:	f000 fb5c 	bl	800d3cc <__swsetup_r>
 800cd14:	b1c0      	cbz	r0, 800cd48 <_vfiprintf_r+0x78>
 800cd16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd18:	07dc      	lsls	r4, r3, #31
 800cd1a:	d50e      	bpl.n	800cd3a <_vfiprintf_r+0x6a>
 800cd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd20:	b01d      	add	sp, #116	; 0x74
 800cd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd26:	4b7b      	ldr	r3, [pc, #492]	; (800cf14 <_vfiprintf_r+0x244>)
 800cd28:	429d      	cmp	r5, r3
 800cd2a:	d101      	bne.n	800cd30 <_vfiprintf_r+0x60>
 800cd2c:	68b5      	ldr	r5, [r6, #8]
 800cd2e:	e7df      	b.n	800ccf0 <_vfiprintf_r+0x20>
 800cd30:	4b79      	ldr	r3, [pc, #484]	; (800cf18 <_vfiprintf_r+0x248>)
 800cd32:	429d      	cmp	r5, r3
 800cd34:	bf08      	it	eq
 800cd36:	68f5      	ldreq	r5, [r6, #12]
 800cd38:	e7da      	b.n	800ccf0 <_vfiprintf_r+0x20>
 800cd3a:	89ab      	ldrh	r3, [r5, #12]
 800cd3c:	0598      	lsls	r0, r3, #22
 800cd3e:	d4ed      	bmi.n	800cd1c <_vfiprintf_r+0x4c>
 800cd40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd42:	f7ff fde6 	bl	800c912 <__retarget_lock_release_recursive>
 800cd46:	e7e9      	b.n	800cd1c <_vfiprintf_r+0x4c>
 800cd48:	2300      	movs	r3, #0
 800cd4a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd4c:	2320      	movs	r3, #32
 800cd4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd52:	2330      	movs	r3, #48	; 0x30
 800cd54:	f04f 0901 	mov.w	r9, #1
 800cd58:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd5c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cf1c <_vfiprintf_r+0x24c>
 800cd60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd64:	4623      	mov	r3, r4
 800cd66:	469a      	mov	sl, r3
 800cd68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd6c:	b10a      	cbz	r2, 800cd72 <_vfiprintf_r+0xa2>
 800cd6e:	2a25      	cmp	r2, #37	; 0x25
 800cd70:	d1f9      	bne.n	800cd66 <_vfiprintf_r+0x96>
 800cd72:	ebba 0b04 	subs.w	fp, sl, r4
 800cd76:	d00b      	beq.n	800cd90 <_vfiprintf_r+0xc0>
 800cd78:	465b      	mov	r3, fp
 800cd7a:	4622      	mov	r2, r4
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	4630      	mov	r0, r6
 800cd80:	f7ff ff93 	bl	800ccaa <__sfputs_r>
 800cd84:	3001      	adds	r0, #1
 800cd86:	f000 80aa 	beq.w	800cede <_vfiprintf_r+0x20e>
 800cd8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd8c:	445a      	add	r2, fp
 800cd8e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd90:	f89a 3000 	ldrb.w	r3, [sl]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	f000 80a2 	beq.w	800cede <_vfiprintf_r+0x20e>
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	f04f 32ff 	mov.w	r2, #4294967295
 800cda0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cda4:	f10a 0a01 	add.w	sl, sl, #1
 800cda8:	9304      	str	r3, [sp, #16]
 800cdaa:	9307      	str	r3, [sp, #28]
 800cdac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdb0:	931a      	str	r3, [sp, #104]	; 0x68
 800cdb2:	4654      	mov	r4, sl
 800cdb4:	2205      	movs	r2, #5
 800cdb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdba:	4858      	ldr	r0, [pc, #352]	; (800cf1c <_vfiprintf_r+0x24c>)
 800cdbc:	f000 fcbc 	bl	800d738 <memchr>
 800cdc0:	9a04      	ldr	r2, [sp, #16]
 800cdc2:	b9d8      	cbnz	r0, 800cdfc <_vfiprintf_r+0x12c>
 800cdc4:	06d1      	lsls	r1, r2, #27
 800cdc6:	bf44      	itt	mi
 800cdc8:	2320      	movmi	r3, #32
 800cdca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdce:	0713      	lsls	r3, r2, #28
 800cdd0:	bf44      	itt	mi
 800cdd2:	232b      	movmi	r3, #43	; 0x2b
 800cdd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdd8:	f89a 3000 	ldrb.w	r3, [sl]
 800cddc:	2b2a      	cmp	r3, #42	; 0x2a
 800cdde:	d015      	beq.n	800ce0c <_vfiprintf_r+0x13c>
 800cde0:	4654      	mov	r4, sl
 800cde2:	2000      	movs	r0, #0
 800cde4:	f04f 0c0a 	mov.w	ip, #10
 800cde8:	9a07      	ldr	r2, [sp, #28]
 800cdea:	4621      	mov	r1, r4
 800cdec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdf0:	3b30      	subs	r3, #48	; 0x30
 800cdf2:	2b09      	cmp	r3, #9
 800cdf4:	d94e      	bls.n	800ce94 <_vfiprintf_r+0x1c4>
 800cdf6:	b1b0      	cbz	r0, 800ce26 <_vfiprintf_r+0x156>
 800cdf8:	9207      	str	r2, [sp, #28]
 800cdfa:	e014      	b.n	800ce26 <_vfiprintf_r+0x156>
 800cdfc:	eba0 0308 	sub.w	r3, r0, r8
 800ce00:	fa09 f303 	lsl.w	r3, r9, r3
 800ce04:	4313      	orrs	r3, r2
 800ce06:	46a2      	mov	sl, r4
 800ce08:	9304      	str	r3, [sp, #16]
 800ce0a:	e7d2      	b.n	800cdb2 <_vfiprintf_r+0xe2>
 800ce0c:	9b03      	ldr	r3, [sp, #12]
 800ce0e:	1d19      	adds	r1, r3, #4
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	9103      	str	r1, [sp, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	bfbb      	ittet	lt
 800ce18:	425b      	neglt	r3, r3
 800ce1a:	f042 0202 	orrlt.w	r2, r2, #2
 800ce1e:	9307      	strge	r3, [sp, #28]
 800ce20:	9307      	strlt	r3, [sp, #28]
 800ce22:	bfb8      	it	lt
 800ce24:	9204      	strlt	r2, [sp, #16]
 800ce26:	7823      	ldrb	r3, [r4, #0]
 800ce28:	2b2e      	cmp	r3, #46	; 0x2e
 800ce2a:	d10c      	bne.n	800ce46 <_vfiprintf_r+0x176>
 800ce2c:	7863      	ldrb	r3, [r4, #1]
 800ce2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ce30:	d135      	bne.n	800ce9e <_vfiprintf_r+0x1ce>
 800ce32:	9b03      	ldr	r3, [sp, #12]
 800ce34:	3402      	adds	r4, #2
 800ce36:	1d1a      	adds	r2, r3, #4
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	9203      	str	r2, [sp, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	bfb8      	it	lt
 800ce40:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce44:	9305      	str	r3, [sp, #20]
 800ce46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cf2c <_vfiprintf_r+0x25c>
 800ce4a:	2203      	movs	r2, #3
 800ce4c:	4650      	mov	r0, sl
 800ce4e:	7821      	ldrb	r1, [r4, #0]
 800ce50:	f000 fc72 	bl	800d738 <memchr>
 800ce54:	b140      	cbz	r0, 800ce68 <_vfiprintf_r+0x198>
 800ce56:	2340      	movs	r3, #64	; 0x40
 800ce58:	eba0 000a 	sub.w	r0, r0, sl
 800ce5c:	fa03 f000 	lsl.w	r0, r3, r0
 800ce60:	9b04      	ldr	r3, [sp, #16]
 800ce62:	3401      	adds	r4, #1
 800ce64:	4303      	orrs	r3, r0
 800ce66:	9304      	str	r3, [sp, #16]
 800ce68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce6c:	2206      	movs	r2, #6
 800ce6e:	482c      	ldr	r0, [pc, #176]	; (800cf20 <_vfiprintf_r+0x250>)
 800ce70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce74:	f000 fc60 	bl	800d738 <memchr>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	d03f      	beq.n	800cefc <_vfiprintf_r+0x22c>
 800ce7c:	4b29      	ldr	r3, [pc, #164]	; (800cf24 <_vfiprintf_r+0x254>)
 800ce7e:	bb1b      	cbnz	r3, 800cec8 <_vfiprintf_r+0x1f8>
 800ce80:	9b03      	ldr	r3, [sp, #12]
 800ce82:	3307      	adds	r3, #7
 800ce84:	f023 0307 	bic.w	r3, r3, #7
 800ce88:	3308      	adds	r3, #8
 800ce8a:	9303      	str	r3, [sp, #12]
 800ce8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce8e:	443b      	add	r3, r7
 800ce90:	9309      	str	r3, [sp, #36]	; 0x24
 800ce92:	e767      	b.n	800cd64 <_vfiprintf_r+0x94>
 800ce94:	460c      	mov	r4, r1
 800ce96:	2001      	movs	r0, #1
 800ce98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce9c:	e7a5      	b.n	800cdea <_vfiprintf_r+0x11a>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	f04f 0c0a 	mov.w	ip, #10
 800cea4:	4619      	mov	r1, r3
 800cea6:	3401      	adds	r4, #1
 800cea8:	9305      	str	r3, [sp, #20]
 800ceaa:	4620      	mov	r0, r4
 800ceac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceb0:	3a30      	subs	r2, #48	; 0x30
 800ceb2:	2a09      	cmp	r2, #9
 800ceb4:	d903      	bls.n	800cebe <_vfiprintf_r+0x1ee>
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d0c5      	beq.n	800ce46 <_vfiprintf_r+0x176>
 800ceba:	9105      	str	r1, [sp, #20]
 800cebc:	e7c3      	b.n	800ce46 <_vfiprintf_r+0x176>
 800cebe:	4604      	mov	r4, r0
 800cec0:	2301      	movs	r3, #1
 800cec2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cec6:	e7f0      	b.n	800ceaa <_vfiprintf_r+0x1da>
 800cec8:	ab03      	add	r3, sp, #12
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	462a      	mov	r2, r5
 800cece:	4630      	mov	r0, r6
 800ced0:	4b15      	ldr	r3, [pc, #84]	; (800cf28 <_vfiprintf_r+0x258>)
 800ced2:	a904      	add	r1, sp, #16
 800ced4:	f3af 8000 	nop.w
 800ced8:	4607      	mov	r7, r0
 800ceda:	1c78      	adds	r0, r7, #1
 800cedc:	d1d6      	bne.n	800ce8c <_vfiprintf_r+0x1bc>
 800cede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cee0:	07d9      	lsls	r1, r3, #31
 800cee2:	d405      	bmi.n	800cef0 <_vfiprintf_r+0x220>
 800cee4:	89ab      	ldrh	r3, [r5, #12]
 800cee6:	059a      	lsls	r2, r3, #22
 800cee8:	d402      	bmi.n	800cef0 <_vfiprintf_r+0x220>
 800ceea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ceec:	f7ff fd11 	bl	800c912 <__retarget_lock_release_recursive>
 800cef0:	89ab      	ldrh	r3, [r5, #12]
 800cef2:	065b      	lsls	r3, r3, #25
 800cef4:	f53f af12 	bmi.w	800cd1c <_vfiprintf_r+0x4c>
 800cef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cefa:	e711      	b.n	800cd20 <_vfiprintf_r+0x50>
 800cefc:	ab03      	add	r3, sp, #12
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	462a      	mov	r2, r5
 800cf02:	4630      	mov	r0, r6
 800cf04:	4b08      	ldr	r3, [pc, #32]	; (800cf28 <_vfiprintf_r+0x258>)
 800cf06:	a904      	add	r1, sp, #16
 800cf08:	f000 f882 	bl	800d010 <_printf_i>
 800cf0c:	e7e4      	b.n	800ced8 <_vfiprintf_r+0x208>
 800cf0e:	bf00      	nop
 800cf10:	0800dbd0 	.word	0x0800dbd0
 800cf14:	0800dbf0 	.word	0x0800dbf0
 800cf18:	0800dbb0 	.word	0x0800dbb0
 800cf1c:	0800dc10 	.word	0x0800dc10
 800cf20:	0800dc1a 	.word	0x0800dc1a
 800cf24:	00000000 	.word	0x00000000
 800cf28:	0800ccab 	.word	0x0800ccab
 800cf2c:	0800dc16 	.word	0x0800dc16

0800cf30 <_printf_common>:
 800cf30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf34:	4616      	mov	r6, r2
 800cf36:	4699      	mov	r9, r3
 800cf38:	688a      	ldr	r2, [r1, #8]
 800cf3a:	690b      	ldr	r3, [r1, #16]
 800cf3c:	4607      	mov	r7, r0
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	bfb8      	it	lt
 800cf42:	4613      	movlt	r3, r2
 800cf44:	6033      	str	r3, [r6, #0]
 800cf46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf4a:	460c      	mov	r4, r1
 800cf4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf50:	b10a      	cbz	r2, 800cf56 <_printf_common+0x26>
 800cf52:	3301      	adds	r3, #1
 800cf54:	6033      	str	r3, [r6, #0]
 800cf56:	6823      	ldr	r3, [r4, #0]
 800cf58:	0699      	lsls	r1, r3, #26
 800cf5a:	bf42      	ittt	mi
 800cf5c:	6833      	ldrmi	r3, [r6, #0]
 800cf5e:	3302      	addmi	r3, #2
 800cf60:	6033      	strmi	r3, [r6, #0]
 800cf62:	6825      	ldr	r5, [r4, #0]
 800cf64:	f015 0506 	ands.w	r5, r5, #6
 800cf68:	d106      	bne.n	800cf78 <_printf_common+0x48>
 800cf6a:	f104 0a19 	add.w	sl, r4, #25
 800cf6e:	68e3      	ldr	r3, [r4, #12]
 800cf70:	6832      	ldr	r2, [r6, #0]
 800cf72:	1a9b      	subs	r3, r3, r2
 800cf74:	42ab      	cmp	r3, r5
 800cf76:	dc28      	bgt.n	800cfca <_printf_common+0x9a>
 800cf78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf7c:	1e13      	subs	r3, r2, #0
 800cf7e:	6822      	ldr	r2, [r4, #0]
 800cf80:	bf18      	it	ne
 800cf82:	2301      	movne	r3, #1
 800cf84:	0692      	lsls	r2, r2, #26
 800cf86:	d42d      	bmi.n	800cfe4 <_printf_common+0xb4>
 800cf88:	4649      	mov	r1, r9
 800cf8a:	4638      	mov	r0, r7
 800cf8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf90:	47c0      	blx	r8
 800cf92:	3001      	adds	r0, #1
 800cf94:	d020      	beq.n	800cfd8 <_printf_common+0xa8>
 800cf96:	6823      	ldr	r3, [r4, #0]
 800cf98:	68e5      	ldr	r5, [r4, #12]
 800cf9a:	f003 0306 	and.w	r3, r3, #6
 800cf9e:	2b04      	cmp	r3, #4
 800cfa0:	bf18      	it	ne
 800cfa2:	2500      	movne	r5, #0
 800cfa4:	6832      	ldr	r2, [r6, #0]
 800cfa6:	f04f 0600 	mov.w	r6, #0
 800cfaa:	68a3      	ldr	r3, [r4, #8]
 800cfac:	bf08      	it	eq
 800cfae:	1aad      	subeq	r5, r5, r2
 800cfb0:	6922      	ldr	r2, [r4, #16]
 800cfb2:	bf08      	it	eq
 800cfb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	bfc4      	itt	gt
 800cfbc:	1a9b      	subgt	r3, r3, r2
 800cfbe:	18ed      	addgt	r5, r5, r3
 800cfc0:	341a      	adds	r4, #26
 800cfc2:	42b5      	cmp	r5, r6
 800cfc4:	d11a      	bne.n	800cffc <_printf_common+0xcc>
 800cfc6:	2000      	movs	r0, #0
 800cfc8:	e008      	b.n	800cfdc <_printf_common+0xac>
 800cfca:	2301      	movs	r3, #1
 800cfcc:	4652      	mov	r2, sl
 800cfce:	4649      	mov	r1, r9
 800cfd0:	4638      	mov	r0, r7
 800cfd2:	47c0      	blx	r8
 800cfd4:	3001      	adds	r0, #1
 800cfd6:	d103      	bne.n	800cfe0 <_printf_common+0xb0>
 800cfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe0:	3501      	adds	r5, #1
 800cfe2:	e7c4      	b.n	800cf6e <_printf_common+0x3e>
 800cfe4:	2030      	movs	r0, #48	; 0x30
 800cfe6:	18e1      	adds	r1, r4, r3
 800cfe8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cfec:	1c5a      	adds	r2, r3, #1
 800cfee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cff2:	4422      	add	r2, r4
 800cff4:	3302      	adds	r3, #2
 800cff6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cffa:	e7c5      	b.n	800cf88 <_printf_common+0x58>
 800cffc:	2301      	movs	r3, #1
 800cffe:	4622      	mov	r2, r4
 800d000:	4649      	mov	r1, r9
 800d002:	4638      	mov	r0, r7
 800d004:	47c0      	blx	r8
 800d006:	3001      	adds	r0, #1
 800d008:	d0e6      	beq.n	800cfd8 <_printf_common+0xa8>
 800d00a:	3601      	adds	r6, #1
 800d00c:	e7d9      	b.n	800cfc2 <_printf_common+0x92>
	...

0800d010 <_printf_i>:
 800d010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d014:	460c      	mov	r4, r1
 800d016:	7e27      	ldrb	r7, [r4, #24]
 800d018:	4691      	mov	r9, r2
 800d01a:	2f78      	cmp	r7, #120	; 0x78
 800d01c:	4680      	mov	r8, r0
 800d01e:	469a      	mov	sl, r3
 800d020:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d022:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d026:	d807      	bhi.n	800d038 <_printf_i+0x28>
 800d028:	2f62      	cmp	r7, #98	; 0x62
 800d02a:	d80a      	bhi.n	800d042 <_printf_i+0x32>
 800d02c:	2f00      	cmp	r7, #0
 800d02e:	f000 80d9 	beq.w	800d1e4 <_printf_i+0x1d4>
 800d032:	2f58      	cmp	r7, #88	; 0x58
 800d034:	f000 80a4 	beq.w	800d180 <_printf_i+0x170>
 800d038:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d03c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d040:	e03a      	b.n	800d0b8 <_printf_i+0xa8>
 800d042:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d046:	2b15      	cmp	r3, #21
 800d048:	d8f6      	bhi.n	800d038 <_printf_i+0x28>
 800d04a:	a001      	add	r0, pc, #4	; (adr r0, 800d050 <_printf_i+0x40>)
 800d04c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d050:	0800d0a9 	.word	0x0800d0a9
 800d054:	0800d0bd 	.word	0x0800d0bd
 800d058:	0800d039 	.word	0x0800d039
 800d05c:	0800d039 	.word	0x0800d039
 800d060:	0800d039 	.word	0x0800d039
 800d064:	0800d039 	.word	0x0800d039
 800d068:	0800d0bd 	.word	0x0800d0bd
 800d06c:	0800d039 	.word	0x0800d039
 800d070:	0800d039 	.word	0x0800d039
 800d074:	0800d039 	.word	0x0800d039
 800d078:	0800d039 	.word	0x0800d039
 800d07c:	0800d1cb 	.word	0x0800d1cb
 800d080:	0800d0ed 	.word	0x0800d0ed
 800d084:	0800d1ad 	.word	0x0800d1ad
 800d088:	0800d039 	.word	0x0800d039
 800d08c:	0800d039 	.word	0x0800d039
 800d090:	0800d1ed 	.word	0x0800d1ed
 800d094:	0800d039 	.word	0x0800d039
 800d098:	0800d0ed 	.word	0x0800d0ed
 800d09c:	0800d039 	.word	0x0800d039
 800d0a0:	0800d039 	.word	0x0800d039
 800d0a4:	0800d1b5 	.word	0x0800d1b5
 800d0a8:	680b      	ldr	r3, [r1, #0]
 800d0aa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d0ae:	1d1a      	adds	r2, r3, #4
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	600a      	str	r2, [r1, #0]
 800d0b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e0a4      	b.n	800d206 <_printf_i+0x1f6>
 800d0bc:	6825      	ldr	r5, [r4, #0]
 800d0be:	6808      	ldr	r0, [r1, #0]
 800d0c0:	062e      	lsls	r6, r5, #24
 800d0c2:	f100 0304 	add.w	r3, r0, #4
 800d0c6:	d50a      	bpl.n	800d0de <_printf_i+0xce>
 800d0c8:	6805      	ldr	r5, [r0, #0]
 800d0ca:	600b      	str	r3, [r1, #0]
 800d0cc:	2d00      	cmp	r5, #0
 800d0ce:	da03      	bge.n	800d0d8 <_printf_i+0xc8>
 800d0d0:	232d      	movs	r3, #45	; 0x2d
 800d0d2:	426d      	negs	r5, r5
 800d0d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0d8:	230a      	movs	r3, #10
 800d0da:	485e      	ldr	r0, [pc, #376]	; (800d254 <_printf_i+0x244>)
 800d0dc:	e019      	b.n	800d112 <_printf_i+0x102>
 800d0de:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d0e2:	6805      	ldr	r5, [r0, #0]
 800d0e4:	600b      	str	r3, [r1, #0]
 800d0e6:	bf18      	it	ne
 800d0e8:	b22d      	sxthne	r5, r5
 800d0ea:	e7ef      	b.n	800d0cc <_printf_i+0xbc>
 800d0ec:	680b      	ldr	r3, [r1, #0]
 800d0ee:	6825      	ldr	r5, [r4, #0]
 800d0f0:	1d18      	adds	r0, r3, #4
 800d0f2:	6008      	str	r0, [r1, #0]
 800d0f4:	0628      	lsls	r0, r5, #24
 800d0f6:	d501      	bpl.n	800d0fc <_printf_i+0xec>
 800d0f8:	681d      	ldr	r5, [r3, #0]
 800d0fa:	e002      	b.n	800d102 <_printf_i+0xf2>
 800d0fc:	0669      	lsls	r1, r5, #25
 800d0fe:	d5fb      	bpl.n	800d0f8 <_printf_i+0xe8>
 800d100:	881d      	ldrh	r5, [r3, #0]
 800d102:	2f6f      	cmp	r7, #111	; 0x6f
 800d104:	bf0c      	ite	eq
 800d106:	2308      	moveq	r3, #8
 800d108:	230a      	movne	r3, #10
 800d10a:	4852      	ldr	r0, [pc, #328]	; (800d254 <_printf_i+0x244>)
 800d10c:	2100      	movs	r1, #0
 800d10e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d112:	6866      	ldr	r6, [r4, #4]
 800d114:	2e00      	cmp	r6, #0
 800d116:	bfa8      	it	ge
 800d118:	6821      	ldrge	r1, [r4, #0]
 800d11a:	60a6      	str	r6, [r4, #8]
 800d11c:	bfa4      	itt	ge
 800d11e:	f021 0104 	bicge.w	r1, r1, #4
 800d122:	6021      	strge	r1, [r4, #0]
 800d124:	b90d      	cbnz	r5, 800d12a <_printf_i+0x11a>
 800d126:	2e00      	cmp	r6, #0
 800d128:	d04d      	beq.n	800d1c6 <_printf_i+0x1b6>
 800d12a:	4616      	mov	r6, r2
 800d12c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d130:	fb03 5711 	mls	r7, r3, r1, r5
 800d134:	5dc7      	ldrb	r7, [r0, r7]
 800d136:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d13a:	462f      	mov	r7, r5
 800d13c:	42bb      	cmp	r3, r7
 800d13e:	460d      	mov	r5, r1
 800d140:	d9f4      	bls.n	800d12c <_printf_i+0x11c>
 800d142:	2b08      	cmp	r3, #8
 800d144:	d10b      	bne.n	800d15e <_printf_i+0x14e>
 800d146:	6823      	ldr	r3, [r4, #0]
 800d148:	07df      	lsls	r7, r3, #31
 800d14a:	d508      	bpl.n	800d15e <_printf_i+0x14e>
 800d14c:	6923      	ldr	r3, [r4, #16]
 800d14e:	6861      	ldr	r1, [r4, #4]
 800d150:	4299      	cmp	r1, r3
 800d152:	bfde      	ittt	le
 800d154:	2330      	movle	r3, #48	; 0x30
 800d156:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d15a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d15e:	1b92      	subs	r2, r2, r6
 800d160:	6122      	str	r2, [r4, #16]
 800d162:	464b      	mov	r3, r9
 800d164:	4621      	mov	r1, r4
 800d166:	4640      	mov	r0, r8
 800d168:	f8cd a000 	str.w	sl, [sp]
 800d16c:	aa03      	add	r2, sp, #12
 800d16e:	f7ff fedf 	bl	800cf30 <_printf_common>
 800d172:	3001      	adds	r0, #1
 800d174:	d14c      	bne.n	800d210 <_printf_i+0x200>
 800d176:	f04f 30ff 	mov.w	r0, #4294967295
 800d17a:	b004      	add	sp, #16
 800d17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d180:	4834      	ldr	r0, [pc, #208]	; (800d254 <_printf_i+0x244>)
 800d182:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d186:	680e      	ldr	r6, [r1, #0]
 800d188:	6823      	ldr	r3, [r4, #0]
 800d18a:	f856 5b04 	ldr.w	r5, [r6], #4
 800d18e:	061f      	lsls	r7, r3, #24
 800d190:	600e      	str	r6, [r1, #0]
 800d192:	d514      	bpl.n	800d1be <_printf_i+0x1ae>
 800d194:	07d9      	lsls	r1, r3, #31
 800d196:	bf44      	itt	mi
 800d198:	f043 0320 	orrmi.w	r3, r3, #32
 800d19c:	6023      	strmi	r3, [r4, #0]
 800d19e:	b91d      	cbnz	r5, 800d1a8 <_printf_i+0x198>
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	f023 0320 	bic.w	r3, r3, #32
 800d1a6:	6023      	str	r3, [r4, #0]
 800d1a8:	2310      	movs	r3, #16
 800d1aa:	e7af      	b.n	800d10c <_printf_i+0xfc>
 800d1ac:	6823      	ldr	r3, [r4, #0]
 800d1ae:	f043 0320 	orr.w	r3, r3, #32
 800d1b2:	6023      	str	r3, [r4, #0]
 800d1b4:	2378      	movs	r3, #120	; 0x78
 800d1b6:	4828      	ldr	r0, [pc, #160]	; (800d258 <_printf_i+0x248>)
 800d1b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d1bc:	e7e3      	b.n	800d186 <_printf_i+0x176>
 800d1be:	065e      	lsls	r6, r3, #25
 800d1c0:	bf48      	it	mi
 800d1c2:	b2ad      	uxthmi	r5, r5
 800d1c4:	e7e6      	b.n	800d194 <_printf_i+0x184>
 800d1c6:	4616      	mov	r6, r2
 800d1c8:	e7bb      	b.n	800d142 <_printf_i+0x132>
 800d1ca:	680b      	ldr	r3, [r1, #0]
 800d1cc:	6826      	ldr	r6, [r4, #0]
 800d1ce:	1d1d      	adds	r5, r3, #4
 800d1d0:	6960      	ldr	r0, [r4, #20]
 800d1d2:	600d      	str	r5, [r1, #0]
 800d1d4:	0635      	lsls	r5, r6, #24
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	d501      	bpl.n	800d1de <_printf_i+0x1ce>
 800d1da:	6018      	str	r0, [r3, #0]
 800d1dc:	e002      	b.n	800d1e4 <_printf_i+0x1d4>
 800d1de:	0671      	lsls	r1, r6, #25
 800d1e0:	d5fb      	bpl.n	800d1da <_printf_i+0x1ca>
 800d1e2:	8018      	strh	r0, [r3, #0]
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	4616      	mov	r6, r2
 800d1e8:	6123      	str	r3, [r4, #16]
 800d1ea:	e7ba      	b.n	800d162 <_printf_i+0x152>
 800d1ec:	680b      	ldr	r3, [r1, #0]
 800d1ee:	1d1a      	adds	r2, r3, #4
 800d1f0:	600a      	str	r2, [r1, #0]
 800d1f2:	681e      	ldr	r6, [r3, #0]
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	6862      	ldr	r2, [r4, #4]
 800d1fa:	f000 fa9d 	bl	800d738 <memchr>
 800d1fe:	b108      	cbz	r0, 800d204 <_printf_i+0x1f4>
 800d200:	1b80      	subs	r0, r0, r6
 800d202:	6060      	str	r0, [r4, #4]
 800d204:	6863      	ldr	r3, [r4, #4]
 800d206:	6123      	str	r3, [r4, #16]
 800d208:	2300      	movs	r3, #0
 800d20a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d20e:	e7a8      	b.n	800d162 <_printf_i+0x152>
 800d210:	4632      	mov	r2, r6
 800d212:	4649      	mov	r1, r9
 800d214:	4640      	mov	r0, r8
 800d216:	6923      	ldr	r3, [r4, #16]
 800d218:	47d0      	blx	sl
 800d21a:	3001      	adds	r0, #1
 800d21c:	d0ab      	beq.n	800d176 <_printf_i+0x166>
 800d21e:	6823      	ldr	r3, [r4, #0]
 800d220:	079b      	lsls	r3, r3, #30
 800d222:	d413      	bmi.n	800d24c <_printf_i+0x23c>
 800d224:	68e0      	ldr	r0, [r4, #12]
 800d226:	9b03      	ldr	r3, [sp, #12]
 800d228:	4298      	cmp	r0, r3
 800d22a:	bfb8      	it	lt
 800d22c:	4618      	movlt	r0, r3
 800d22e:	e7a4      	b.n	800d17a <_printf_i+0x16a>
 800d230:	2301      	movs	r3, #1
 800d232:	4632      	mov	r2, r6
 800d234:	4649      	mov	r1, r9
 800d236:	4640      	mov	r0, r8
 800d238:	47d0      	blx	sl
 800d23a:	3001      	adds	r0, #1
 800d23c:	d09b      	beq.n	800d176 <_printf_i+0x166>
 800d23e:	3501      	adds	r5, #1
 800d240:	68e3      	ldr	r3, [r4, #12]
 800d242:	9903      	ldr	r1, [sp, #12]
 800d244:	1a5b      	subs	r3, r3, r1
 800d246:	42ab      	cmp	r3, r5
 800d248:	dcf2      	bgt.n	800d230 <_printf_i+0x220>
 800d24a:	e7eb      	b.n	800d224 <_printf_i+0x214>
 800d24c:	2500      	movs	r5, #0
 800d24e:	f104 0619 	add.w	r6, r4, #25
 800d252:	e7f5      	b.n	800d240 <_printf_i+0x230>
 800d254:	0800dc21 	.word	0x0800dc21
 800d258:	0800dc32 	.word	0x0800dc32

0800d25c <_sbrk_r>:
 800d25c:	b538      	push	{r3, r4, r5, lr}
 800d25e:	2300      	movs	r3, #0
 800d260:	4d05      	ldr	r5, [pc, #20]	; (800d278 <_sbrk_r+0x1c>)
 800d262:	4604      	mov	r4, r0
 800d264:	4608      	mov	r0, r1
 800d266:	602b      	str	r3, [r5, #0]
 800d268:	f7f6 f9ee 	bl	8003648 <_sbrk>
 800d26c:	1c43      	adds	r3, r0, #1
 800d26e:	d102      	bne.n	800d276 <_sbrk_r+0x1a>
 800d270:	682b      	ldr	r3, [r5, #0]
 800d272:	b103      	cbz	r3, 800d276 <_sbrk_r+0x1a>
 800d274:	6023      	str	r3, [r4, #0]
 800d276:	bd38      	pop	{r3, r4, r5, pc}
 800d278:	200015b4 	.word	0x200015b4

0800d27c <__sread>:
 800d27c:	b510      	push	{r4, lr}
 800d27e:	460c      	mov	r4, r1
 800d280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d284:	f000 fafe 	bl	800d884 <_read_r>
 800d288:	2800      	cmp	r0, #0
 800d28a:	bfab      	itete	ge
 800d28c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d28e:	89a3      	ldrhlt	r3, [r4, #12]
 800d290:	181b      	addge	r3, r3, r0
 800d292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d296:	bfac      	ite	ge
 800d298:	6563      	strge	r3, [r4, #84]	; 0x54
 800d29a:	81a3      	strhlt	r3, [r4, #12]
 800d29c:	bd10      	pop	{r4, pc}

0800d29e <__swrite>:
 800d29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a2:	461f      	mov	r7, r3
 800d2a4:	898b      	ldrh	r3, [r1, #12]
 800d2a6:	4605      	mov	r5, r0
 800d2a8:	05db      	lsls	r3, r3, #23
 800d2aa:	460c      	mov	r4, r1
 800d2ac:	4616      	mov	r6, r2
 800d2ae:	d505      	bpl.n	800d2bc <__swrite+0x1e>
 800d2b0:	2302      	movs	r3, #2
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2b8:	f000 f9c8 	bl	800d64c <_lseek_r>
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	4632      	mov	r2, r6
 800d2c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2c4:	81a3      	strh	r3, [r4, #12]
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	463b      	mov	r3, r7
 800d2ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d2:	f000 b869 	b.w	800d3a8 <_write_r>

0800d2d6 <__sseek>:
 800d2d6:	b510      	push	{r4, lr}
 800d2d8:	460c      	mov	r4, r1
 800d2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2de:	f000 f9b5 	bl	800d64c <_lseek_r>
 800d2e2:	1c43      	adds	r3, r0, #1
 800d2e4:	89a3      	ldrh	r3, [r4, #12]
 800d2e6:	bf15      	itete	ne
 800d2e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d2ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d2ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d2f2:	81a3      	strheq	r3, [r4, #12]
 800d2f4:	bf18      	it	ne
 800d2f6:	81a3      	strhne	r3, [r4, #12]
 800d2f8:	bd10      	pop	{r4, pc}

0800d2fa <__sclose>:
 800d2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2fe:	f000 b8d3 	b.w	800d4a8 <_close_r>
	...

0800d304 <__swbuf_r>:
 800d304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d306:	460e      	mov	r6, r1
 800d308:	4614      	mov	r4, r2
 800d30a:	4605      	mov	r5, r0
 800d30c:	b118      	cbz	r0, 800d316 <__swbuf_r+0x12>
 800d30e:	6983      	ldr	r3, [r0, #24]
 800d310:	b90b      	cbnz	r3, 800d316 <__swbuf_r+0x12>
 800d312:	f7ff fa5f 	bl	800c7d4 <__sinit>
 800d316:	4b21      	ldr	r3, [pc, #132]	; (800d39c <__swbuf_r+0x98>)
 800d318:	429c      	cmp	r4, r3
 800d31a:	d12b      	bne.n	800d374 <__swbuf_r+0x70>
 800d31c:	686c      	ldr	r4, [r5, #4]
 800d31e:	69a3      	ldr	r3, [r4, #24]
 800d320:	60a3      	str	r3, [r4, #8]
 800d322:	89a3      	ldrh	r3, [r4, #12]
 800d324:	071a      	lsls	r2, r3, #28
 800d326:	d52f      	bpl.n	800d388 <__swbuf_r+0x84>
 800d328:	6923      	ldr	r3, [r4, #16]
 800d32a:	b36b      	cbz	r3, 800d388 <__swbuf_r+0x84>
 800d32c:	6923      	ldr	r3, [r4, #16]
 800d32e:	6820      	ldr	r0, [r4, #0]
 800d330:	b2f6      	uxtb	r6, r6
 800d332:	1ac0      	subs	r0, r0, r3
 800d334:	6963      	ldr	r3, [r4, #20]
 800d336:	4637      	mov	r7, r6
 800d338:	4283      	cmp	r3, r0
 800d33a:	dc04      	bgt.n	800d346 <__swbuf_r+0x42>
 800d33c:	4621      	mov	r1, r4
 800d33e:	4628      	mov	r0, r5
 800d340:	f000 f948 	bl	800d5d4 <_fflush_r>
 800d344:	bb30      	cbnz	r0, 800d394 <__swbuf_r+0x90>
 800d346:	68a3      	ldr	r3, [r4, #8]
 800d348:	3001      	adds	r0, #1
 800d34a:	3b01      	subs	r3, #1
 800d34c:	60a3      	str	r3, [r4, #8]
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	1c5a      	adds	r2, r3, #1
 800d352:	6022      	str	r2, [r4, #0]
 800d354:	701e      	strb	r6, [r3, #0]
 800d356:	6963      	ldr	r3, [r4, #20]
 800d358:	4283      	cmp	r3, r0
 800d35a:	d004      	beq.n	800d366 <__swbuf_r+0x62>
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	07db      	lsls	r3, r3, #31
 800d360:	d506      	bpl.n	800d370 <__swbuf_r+0x6c>
 800d362:	2e0a      	cmp	r6, #10
 800d364:	d104      	bne.n	800d370 <__swbuf_r+0x6c>
 800d366:	4621      	mov	r1, r4
 800d368:	4628      	mov	r0, r5
 800d36a:	f000 f933 	bl	800d5d4 <_fflush_r>
 800d36e:	b988      	cbnz	r0, 800d394 <__swbuf_r+0x90>
 800d370:	4638      	mov	r0, r7
 800d372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d374:	4b0a      	ldr	r3, [pc, #40]	; (800d3a0 <__swbuf_r+0x9c>)
 800d376:	429c      	cmp	r4, r3
 800d378:	d101      	bne.n	800d37e <__swbuf_r+0x7a>
 800d37a:	68ac      	ldr	r4, [r5, #8]
 800d37c:	e7cf      	b.n	800d31e <__swbuf_r+0x1a>
 800d37e:	4b09      	ldr	r3, [pc, #36]	; (800d3a4 <__swbuf_r+0xa0>)
 800d380:	429c      	cmp	r4, r3
 800d382:	bf08      	it	eq
 800d384:	68ec      	ldreq	r4, [r5, #12]
 800d386:	e7ca      	b.n	800d31e <__swbuf_r+0x1a>
 800d388:	4621      	mov	r1, r4
 800d38a:	4628      	mov	r0, r5
 800d38c:	f000 f81e 	bl	800d3cc <__swsetup_r>
 800d390:	2800      	cmp	r0, #0
 800d392:	d0cb      	beq.n	800d32c <__swbuf_r+0x28>
 800d394:	f04f 37ff 	mov.w	r7, #4294967295
 800d398:	e7ea      	b.n	800d370 <__swbuf_r+0x6c>
 800d39a:	bf00      	nop
 800d39c:	0800dbd0 	.word	0x0800dbd0
 800d3a0:	0800dbf0 	.word	0x0800dbf0
 800d3a4:	0800dbb0 	.word	0x0800dbb0

0800d3a8 <_write_r>:
 800d3a8:	b538      	push	{r3, r4, r5, lr}
 800d3aa:	4604      	mov	r4, r0
 800d3ac:	4608      	mov	r0, r1
 800d3ae:	4611      	mov	r1, r2
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	4d05      	ldr	r5, [pc, #20]	; (800d3c8 <_write_r+0x20>)
 800d3b4:	602a      	str	r2, [r5, #0]
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	f7f4 ff54 	bl	8002264 <_write>
 800d3bc:	1c43      	adds	r3, r0, #1
 800d3be:	d102      	bne.n	800d3c6 <_write_r+0x1e>
 800d3c0:	682b      	ldr	r3, [r5, #0]
 800d3c2:	b103      	cbz	r3, 800d3c6 <_write_r+0x1e>
 800d3c4:	6023      	str	r3, [r4, #0]
 800d3c6:	bd38      	pop	{r3, r4, r5, pc}
 800d3c8:	200015b4 	.word	0x200015b4

0800d3cc <__swsetup_r>:
 800d3cc:	4b32      	ldr	r3, [pc, #200]	; (800d498 <__swsetup_r+0xcc>)
 800d3ce:	b570      	push	{r4, r5, r6, lr}
 800d3d0:	681d      	ldr	r5, [r3, #0]
 800d3d2:	4606      	mov	r6, r0
 800d3d4:	460c      	mov	r4, r1
 800d3d6:	b125      	cbz	r5, 800d3e2 <__swsetup_r+0x16>
 800d3d8:	69ab      	ldr	r3, [r5, #24]
 800d3da:	b913      	cbnz	r3, 800d3e2 <__swsetup_r+0x16>
 800d3dc:	4628      	mov	r0, r5
 800d3de:	f7ff f9f9 	bl	800c7d4 <__sinit>
 800d3e2:	4b2e      	ldr	r3, [pc, #184]	; (800d49c <__swsetup_r+0xd0>)
 800d3e4:	429c      	cmp	r4, r3
 800d3e6:	d10f      	bne.n	800d408 <__swsetup_r+0x3c>
 800d3e8:	686c      	ldr	r4, [r5, #4]
 800d3ea:	89a3      	ldrh	r3, [r4, #12]
 800d3ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3f0:	0719      	lsls	r1, r3, #28
 800d3f2:	d42c      	bmi.n	800d44e <__swsetup_r+0x82>
 800d3f4:	06dd      	lsls	r5, r3, #27
 800d3f6:	d411      	bmi.n	800d41c <__swsetup_r+0x50>
 800d3f8:	2309      	movs	r3, #9
 800d3fa:	6033      	str	r3, [r6, #0]
 800d3fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d400:	f04f 30ff 	mov.w	r0, #4294967295
 800d404:	81a3      	strh	r3, [r4, #12]
 800d406:	e03e      	b.n	800d486 <__swsetup_r+0xba>
 800d408:	4b25      	ldr	r3, [pc, #148]	; (800d4a0 <__swsetup_r+0xd4>)
 800d40a:	429c      	cmp	r4, r3
 800d40c:	d101      	bne.n	800d412 <__swsetup_r+0x46>
 800d40e:	68ac      	ldr	r4, [r5, #8]
 800d410:	e7eb      	b.n	800d3ea <__swsetup_r+0x1e>
 800d412:	4b24      	ldr	r3, [pc, #144]	; (800d4a4 <__swsetup_r+0xd8>)
 800d414:	429c      	cmp	r4, r3
 800d416:	bf08      	it	eq
 800d418:	68ec      	ldreq	r4, [r5, #12]
 800d41a:	e7e6      	b.n	800d3ea <__swsetup_r+0x1e>
 800d41c:	0758      	lsls	r0, r3, #29
 800d41e:	d512      	bpl.n	800d446 <__swsetup_r+0x7a>
 800d420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d422:	b141      	cbz	r1, 800d436 <__swsetup_r+0x6a>
 800d424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d428:	4299      	cmp	r1, r3
 800d42a:	d002      	beq.n	800d432 <__swsetup_r+0x66>
 800d42c:	4630      	mov	r0, r6
 800d42e:	f000 f9b7 	bl	800d7a0 <_free_r>
 800d432:	2300      	movs	r3, #0
 800d434:	6363      	str	r3, [r4, #52]	; 0x34
 800d436:	89a3      	ldrh	r3, [r4, #12]
 800d438:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d43c:	81a3      	strh	r3, [r4, #12]
 800d43e:	2300      	movs	r3, #0
 800d440:	6063      	str	r3, [r4, #4]
 800d442:	6923      	ldr	r3, [r4, #16]
 800d444:	6023      	str	r3, [r4, #0]
 800d446:	89a3      	ldrh	r3, [r4, #12]
 800d448:	f043 0308 	orr.w	r3, r3, #8
 800d44c:	81a3      	strh	r3, [r4, #12]
 800d44e:	6923      	ldr	r3, [r4, #16]
 800d450:	b94b      	cbnz	r3, 800d466 <__swsetup_r+0x9a>
 800d452:	89a3      	ldrh	r3, [r4, #12]
 800d454:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d45c:	d003      	beq.n	800d466 <__swsetup_r+0x9a>
 800d45e:	4621      	mov	r1, r4
 800d460:	4630      	mov	r0, r6
 800d462:	f000 f929 	bl	800d6b8 <__smakebuf_r>
 800d466:	89a0      	ldrh	r0, [r4, #12]
 800d468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d46c:	f010 0301 	ands.w	r3, r0, #1
 800d470:	d00a      	beq.n	800d488 <__swsetup_r+0xbc>
 800d472:	2300      	movs	r3, #0
 800d474:	60a3      	str	r3, [r4, #8]
 800d476:	6963      	ldr	r3, [r4, #20]
 800d478:	425b      	negs	r3, r3
 800d47a:	61a3      	str	r3, [r4, #24]
 800d47c:	6923      	ldr	r3, [r4, #16]
 800d47e:	b943      	cbnz	r3, 800d492 <__swsetup_r+0xc6>
 800d480:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d484:	d1ba      	bne.n	800d3fc <__swsetup_r+0x30>
 800d486:	bd70      	pop	{r4, r5, r6, pc}
 800d488:	0781      	lsls	r1, r0, #30
 800d48a:	bf58      	it	pl
 800d48c:	6963      	ldrpl	r3, [r4, #20]
 800d48e:	60a3      	str	r3, [r4, #8]
 800d490:	e7f4      	b.n	800d47c <__swsetup_r+0xb0>
 800d492:	2000      	movs	r0, #0
 800d494:	e7f7      	b.n	800d486 <__swsetup_r+0xba>
 800d496:	bf00      	nop
 800d498:	2000018c 	.word	0x2000018c
 800d49c:	0800dbd0 	.word	0x0800dbd0
 800d4a0:	0800dbf0 	.word	0x0800dbf0
 800d4a4:	0800dbb0 	.word	0x0800dbb0

0800d4a8 <_close_r>:
 800d4a8:	b538      	push	{r3, r4, r5, lr}
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	4d05      	ldr	r5, [pc, #20]	; (800d4c4 <_close_r+0x1c>)
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	4608      	mov	r0, r1
 800d4b2:	602b      	str	r3, [r5, #0]
 800d4b4:	f7f6 f897 	bl	80035e6 <_close>
 800d4b8:	1c43      	adds	r3, r0, #1
 800d4ba:	d102      	bne.n	800d4c2 <_close_r+0x1a>
 800d4bc:	682b      	ldr	r3, [r5, #0]
 800d4be:	b103      	cbz	r3, 800d4c2 <_close_r+0x1a>
 800d4c0:	6023      	str	r3, [r4, #0]
 800d4c2:	bd38      	pop	{r3, r4, r5, pc}
 800d4c4:	200015b4 	.word	0x200015b4

0800d4c8 <__sflush_r>:
 800d4c8:	898a      	ldrh	r2, [r1, #12]
 800d4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	0710      	lsls	r0, r2, #28
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	d458      	bmi.n	800d588 <__sflush_r+0xc0>
 800d4d6:	684b      	ldr	r3, [r1, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	dc05      	bgt.n	800d4e8 <__sflush_r+0x20>
 800d4dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	dc02      	bgt.n	800d4e8 <__sflush_r+0x20>
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4ea:	2e00      	cmp	r6, #0
 800d4ec:	d0f9      	beq.n	800d4e2 <__sflush_r+0x1a>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d4f4:	682f      	ldr	r7, [r5, #0]
 800d4f6:	602b      	str	r3, [r5, #0]
 800d4f8:	d032      	beq.n	800d560 <__sflush_r+0x98>
 800d4fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d4fc:	89a3      	ldrh	r3, [r4, #12]
 800d4fe:	075a      	lsls	r2, r3, #29
 800d500:	d505      	bpl.n	800d50e <__sflush_r+0x46>
 800d502:	6863      	ldr	r3, [r4, #4]
 800d504:	1ac0      	subs	r0, r0, r3
 800d506:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d508:	b10b      	cbz	r3, 800d50e <__sflush_r+0x46>
 800d50a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d50c:	1ac0      	subs	r0, r0, r3
 800d50e:	2300      	movs	r3, #0
 800d510:	4602      	mov	r2, r0
 800d512:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d514:	4628      	mov	r0, r5
 800d516:	6a21      	ldr	r1, [r4, #32]
 800d518:	47b0      	blx	r6
 800d51a:	1c43      	adds	r3, r0, #1
 800d51c:	89a3      	ldrh	r3, [r4, #12]
 800d51e:	d106      	bne.n	800d52e <__sflush_r+0x66>
 800d520:	6829      	ldr	r1, [r5, #0]
 800d522:	291d      	cmp	r1, #29
 800d524:	d82c      	bhi.n	800d580 <__sflush_r+0xb8>
 800d526:	4a2a      	ldr	r2, [pc, #168]	; (800d5d0 <__sflush_r+0x108>)
 800d528:	40ca      	lsrs	r2, r1
 800d52a:	07d6      	lsls	r6, r2, #31
 800d52c:	d528      	bpl.n	800d580 <__sflush_r+0xb8>
 800d52e:	2200      	movs	r2, #0
 800d530:	6062      	str	r2, [r4, #4]
 800d532:	6922      	ldr	r2, [r4, #16]
 800d534:	04d9      	lsls	r1, r3, #19
 800d536:	6022      	str	r2, [r4, #0]
 800d538:	d504      	bpl.n	800d544 <__sflush_r+0x7c>
 800d53a:	1c42      	adds	r2, r0, #1
 800d53c:	d101      	bne.n	800d542 <__sflush_r+0x7a>
 800d53e:	682b      	ldr	r3, [r5, #0]
 800d540:	b903      	cbnz	r3, 800d544 <__sflush_r+0x7c>
 800d542:	6560      	str	r0, [r4, #84]	; 0x54
 800d544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d546:	602f      	str	r7, [r5, #0]
 800d548:	2900      	cmp	r1, #0
 800d54a:	d0ca      	beq.n	800d4e2 <__sflush_r+0x1a>
 800d54c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d550:	4299      	cmp	r1, r3
 800d552:	d002      	beq.n	800d55a <__sflush_r+0x92>
 800d554:	4628      	mov	r0, r5
 800d556:	f000 f923 	bl	800d7a0 <_free_r>
 800d55a:	2000      	movs	r0, #0
 800d55c:	6360      	str	r0, [r4, #52]	; 0x34
 800d55e:	e7c1      	b.n	800d4e4 <__sflush_r+0x1c>
 800d560:	6a21      	ldr	r1, [r4, #32]
 800d562:	2301      	movs	r3, #1
 800d564:	4628      	mov	r0, r5
 800d566:	47b0      	blx	r6
 800d568:	1c41      	adds	r1, r0, #1
 800d56a:	d1c7      	bne.n	800d4fc <__sflush_r+0x34>
 800d56c:	682b      	ldr	r3, [r5, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d0c4      	beq.n	800d4fc <__sflush_r+0x34>
 800d572:	2b1d      	cmp	r3, #29
 800d574:	d001      	beq.n	800d57a <__sflush_r+0xb2>
 800d576:	2b16      	cmp	r3, #22
 800d578:	d101      	bne.n	800d57e <__sflush_r+0xb6>
 800d57a:	602f      	str	r7, [r5, #0]
 800d57c:	e7b1      	b.n	800d4e2 <__sflush_r+0x1a>
 800d57e:	89a3      	ldrh	r3, [r4, #12]
 800d580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d584:	81a3      	strh	r3, [r4, #12]
 800d586:	e7ad      	b.n	800d4e4 <__sflush_r+0x1c>
 800d588:	690f      	ldr	r7, [r1, #16]
 800d58a:	2f00      	cmp	r7, #0
 800d58c:	d0a9      	beq.n	800d4e2 <__sflush_r+0x1a>
 800d58e:	0793      	lsls	r3, r2, #30
 800d590:	bf18      	it	ne
 800d592:	2300      	movne	r3, #0
 800d594:	680e      	ldr	r6, [r1, #0]
 800d596:	bf08      	it	eq
 800d598:	694b      	ldreq	r3, [r1, #20]
 800d59a:	eba6 0807 	sub.w	r8, r6, r7
 800d59e:	600f      	str	r7, [r1, #0]
 800d5a0:	608b      	str	r3, [r1, #8]
 800d5a2:	f1b8 0f00 	cmp.w	r8, #0
 800d5a6:	dd9c      	ble.n	800d4e2 <__sflush_r+0x1a>
 800d5a8:	4643      	mov	r3, r8
 800d5aa:	463a      	mov	r2, r7
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	6a21      	ldr	r1, [r4, #32]
 800d5b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d5b2:	47b0      	blx	r6
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	dc06      	bgt.n	800d5c6 <__sflush_r+0xfe>
 800d5b8:	89a3      	ldrh	r3, [r4, #12]
 800d5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5c2:	81a3      	strh	r3, [r4, #12]
 800d5c4:	e78e      	b.n	800d4e4 <__sflush_r+0x1c>
 800d5c6:	4407      	add	r7, r0
 800d5c8:	eba8 0800 	sub.w	r8, r8, r0
 800d5cc:	e7e9      	b.n	800d5a2 <__sflush_r+0xda>
 800d5ce:	bf00      	nop
 800d5d0:	20400001 	.word	0x20400001

0800d5d4 <_fflush_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	690b      	ldr	r3, [r1, #16]
 800d5d8:	4605      	mov	r5, r0
 800d5da:	460c      	mov	r4, r1
 800d5dc:	b913      	cbnz	r3, 800d5e4 <_fflush_r+0x10>
 800d5de:	2500      	movs	r5, #0
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	bd38      	pop	{r3, r4, r5, pc}
 800d5e4:	b118      	cbz	r0, 800d5ee <_fflush_r+0x1a>
 800d5e6:	6983      	ldr	r3, [r0, #24]
 800d5e8:	b90b      	cbnz	r3, 800d5ee <_fflush_r+0x1a>
 800d5ea:	f7ff f8f3 	bl	800c7d4 <__sinit>
 800d5ee:	4b14      	ldr	r3, [pc, #80]	; (800d640 <_fflush_r+0x6c>)
 800d5f0:	429c      	cmp	r4, r3
 800d5f2:	d11b      	bne.n	800d62c <_fflush_r+0x58>
 800d5f4:	686c      	ldr	r4, [r5, #4]
 800d5f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d0ef      	beq.n	800d5de <_fflush_r+0xa>
 800d5fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d600:	07d0      	lsls	r0, r2, #31
 800d602:	d404      	bmi.n	800d60e <_fflush_r+0x3a>
 800d604:	0599      	lsls	r1, r3, #22
 800d606:	d402      	bmi.n	800d60e <_fflush_r+0x3a>
 800d608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d60a:	f7ff f981 	bl	800c910 <__retarget_lock_acquire_recursive>
 800d60e:	4628      	mov	r0, r5
 800d610:	4621      	mov	r1, r4
 800d612:	f7ff ff59 	bl	800d4c8 <__sflush_r>
 800d616:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d618:	4605      	mov	r5, r0
 800d61a:	07da      	lsls	r2, r3, #31
 800d61c:	d4e0      	bmi.n	800d5e0 <_fflush_r+0xc>
 800d61e:	89a3      	ldrh	r3, [r4, #12]
 800d620:	059b      	lsls	r3, r3, #22
 800d622:	d4dd      	bmi.n	800d5e0 <_fflush_r+0xc>
 800d624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d626:	f7ff f974 	bl	800c912 <__retarget_lock_release_recursive>
 800d62a:	e7d9      	b.n	800d5e0 <_fflush_r+0xc>
 800d62c:	4b05      	ldr	r3, [pc, #20]	; (800d644 <_fflush_r+0x70>)
 800d62e:	429c      	cmp	r4, r3
 800d630:	d101      	bne.n	800d636 <_fflush_r+0x62>
 800d632:	68ac      	ldr	r4, [r5, #8]
 800d634:	e7df      	b.n	800d5f6 <_fflush_r+0x22>
 800d636:	4b04      	ldr	r3, [pc, #16]	; (800d648 <_fflush_r+0x74>)
 800d638:	429c      	cmp	r4, r3
 800d63a:	bf08      	it	eq
 800d63c:	68ec      	ldreq	r4, [r5, #12]
 800d63e:	e7da      	b.n	800d5f6 <_fflush_r+0x22>
 800d640:	0800dbd0 	.word	0x0800dbd0
 800d644:	0800dbf0 	.word	0x0800dbf0
 800d648:	0800dbb0 	.word	0x0800dbb0

0800d64c <_lseek_r>:
 800d64c:	b538      	push	{r3, r4, r5, lr}
 800d64e:	4604      	mov	r4, r0
 800d650:	4608      	mov	r0, r1
 800d652:	4611      	mov	r1, r2
 800d654:	2200      	movs	r2, #0
 800d656:	4d05      	ldr	r5, [pc, #20]	; (800d66c <_lseek_r+0x20>)
 800d658:	602a      	str	r2, [r5, #0]
 800d65a:	461a      	mov	r2, r3
 800d65c:	f7f5 ffe7 	bl	800362e <_lseek>
 800d660:	1c43      	adds	r3, r0, #1
 800d662:	d102      	bne.n	800d66a <_lseek_r+0x1e>
 800d664:	682b      	ldr	r3, [r5, #0]
 800d666:	b103      	cbz	r3, 800d66a <_lseek_r+0x1e>
 800d668:	6023      	str	r3, [r4, #0]
 800d66a:	bd38      	pop	{r3, r4, r5, pc}
 800d66c:	200015b4 	.word	0x200015b4

0800d670 <__swhatbuf_r>:
 800d670:	b570      	push	{r4, r5, r6, lr}
 800d672:	460e      	mov	r6, r1
 800d674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d678:	4614      	mov	r4, r2
 800d67a:	2900      	cmp	r1, #0
 800d67c:	461d      	mov	r5, r3
 800d67e:	b096      	sub	sp, #88	; 0x58
 800d680:	da07      	bge.n	800d692 <__swhatbuf_r+0x22>
 800d682:	2300      	movs	r3, #0
 800d684:	602b      	str	r3, [r5, #0]
 800d686:	89b3      	ldrh	r3, [r6, #12]
 800d688:	061a      	lsls	r2, r3, #24
 800d68a:	d410      	bmi.n	800d6ae <__swhatbuf_r+0x3e>
 800d68c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d690:	e00e      	b.n	800d6b0 <__swhatbuf_r+0x40>
 800d692:	466a      	mov	r2, sp
 800d694:	f000 f908 	bl	800d8a8 <_fstat_r>
 800d698:	2800      	cmp	r0, #0
 800d69a:	dbf2      	blt.n	800d682 <__swhatbuf_r+0x12>
 800d69c:	9a01      	ldr	r2, [sp, #4]
 800d69e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d6a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d6a6:	425a      	negs	r2, r3
 800d6a8:	415a      	adcs	r2, r3
 800d6aa:	602a      	str	r2, [r5, #0]
 800d6ac:	e7ee      	b.n	800d68c <__swhatbuf_r+0x1c>
 800d6ae:	2340      	movs	r3, #64	; 0x40
 800d6b0:	2000      	movs	r0, #0
 800d6b2:	6023      	str	r3, [r4, #0]
 800d6b4:	b016      	add	sp, #88	; 0x58
 800d6b6:	bd70      	pop	{r4, r5, r6, pc}

0800d6b8 <__smakebuf_r>:
 800d6b8:	898b      	ldrh	r3, [r1, #12]
 800d6ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6bc:	079d      	lsls	r5, r3, #30
 800d6be:	4606      	mov	r6, r0
 800d6c0:	460c      	mov	r4, r1
 800d6c2:	d507      	bpl.n	800d6d4 <__smakebuf_r+0x1c>
 800d6c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6c8:	6023      	str	r3, [r4, #0]
 800d6ca:	6123      	str	r3, [r4, #16]
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	6163      	str	r3, [r4, #20]
 800d6d0:	b002      	add	sp, #8
 800d6d2:	bd70      	pop	{r4, r5, r6, pc}
 800d6d4:	466a      	mov	r2, sp
 800d6d6:	ab01      	add	r3, sp, #4
 800d6d8:	f7ff ffca 	bl	800d670 <__swhatbuf_r>
 800d6dc:	9900      	ldr	r1, [sp, #0]
 800d6de:	4605      	mov	r5, r0
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	f7ff f917 	bl	800c914 <_malloc_r>
 800d6e6:	b948      	cbnz	r0, 800d6fc <__smakebuf_r+0x44>
 800d6e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ec:	059a      	lsls	r2, r3, #22
 800d6ee:	d4ef      	bmi.n	800d6d0 <__smakebuf_r+0x18>
 800d6f0:	f023 0303 	bic.w	r3, r3, #3
 800d6f4:	f043 0302 	orr.w	r3, r3, #2
 800d6f8:	81a3      	strh	r3, [r4, #12]
 800d6fa:	e7e3      	b.n	800d6c4 <__smakebuf_r+0xc>
 800d6fc:	4b0d      	ldr	r3, [pc, #52]	; (800d734 <__smakebuf_r+0x7c>)
 800d6fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	6020      	str	r0, [r4, #0]
 800d704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d708:	81a3      	strh	r3, [r4, #12]
 800d70a:	9b00      	ldr	r3, [sp, #0]
 800d70c:	6120      	str	r0, [r4, #16]
 800d70e:	6163      	str	r3, [r4, #20]
 800d710:	9b01      	ldr	r3, [sp, #4]
 800d712:	b15b      	cbz	r3, 800d72c <__smakebuf_r+0x74>
 800d714:	4630      	mov	r0, r6
 800d716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d71a:	f000 f8d7 	bl	800d8cc <_isatty_r>
 800d71e:	b128      	cbz	r0, 800d72c <__smakebuf_r+0x74>
 800d720:	89a3      	ldrh	r3, [r4, #12]
 800d722:	f023 0303 	bic.w	r3, r3, #3
 800d726:	f043 0301 	orr.w	r3, r3, #1
 800d72a:	81a3      	strh	r3, [r4, #12]
 800d72c:	89a0      	ldrh	r0, [r4, #12]
 800d72e:	4305      	orrs	r5, r0
 800d730:	81a5      	strh	r5, [r4, #12]
 800d732:	e7cd      	b.n	800d6d0 <__smakebuf_r+0x18>
 800d734:	0800c76d 	.word	0x0800c76d

0800d738 <memchr>:
 800d738:	4603      	mov	r3, r0
 800d73a:	b510      	push	{r4, lr}
 800d73c:	b2c9      	uxtb	r1, r1
 800d73e:	4402      	add	r2, r0
 800d740:	4293      	cmp	r3, r2
 800d742:	4618      	mov	r0, r3
 800d744:	d101      	bne.n	800d74a <memchr+0x12>
 800d746:	2000      	movs	r0, #0
 800d748:	e003      	b.n	800d752 <memchr+0x1a>
 800d74a:	7804      	ldrb	r4, [r0, #0]
 800d74c:	3301      	adds	r3, #1
 800d74e:	428c      	cmp	r4, r1
 800d750:	d1f6      	bne.n	800d740 <memchr+0x8>
 800d752:	bd10      	pop	{r4, pc}

0800d754 <memmove>:
 800d754:	4288      	cmp	r0, r1
 800d756:	b510      	push	{r4, lr}
 800d758:	eb01 0402 	add.w	r4, r1, r2
 800d75c:	d902      	bls.n	800d764 <memmove+0x10>
 800d75e:	4284      	cmp	r4, r0
 800d760:	4623      	mov	r3, r4
 800d762:	d807      	bhi.n	800d774 <memmove+0x20>
 800d764:	1e43      	subs	r3, r0, #1
 800d766:	42a1      	cmp	r1, r4
 800d768:	d008      	beq.n	800d77c <memmove+0x28>
 800d76a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d76e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d772:	e7f8      	b.n	800d766 <memmove+0x12>
 800d774:	4601      	mov	r1, r0
 800d776:	4402      	add	r2, r0
 800d778:	428a      	cmp	r2, r1
 800d77a:	d100      	bne.n	800d77e <memmove+0x2a>
 800d77c:	bd10      	pop	{r4, pc}
 800d77e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d786:	e7f7      	b.n	800d778 <memmove+0x24>

0800d788 <__malloc_lock>:
 800d788:	4801      	ldr	r0, [pc, #4]	; (800d790 <__malloc_lock+0x8>)
 800d78a:	f7ff b8c1 	b.w	800c910 <__retarget_lock_acquire_recursive>
 800d78e:	bf00      	nop
 800d790:	200015ac 	.word	0x200015ac

0800d794 <__malloc_unlock>:
 800d794:	4801      	ldr	r0, [pc, #4]	; (800d79c <__malloc_unlock+0x8>)
 800d796:	f7ff b8bc 	b.w	800c912 <__retarget_lock_release_recursive>
 800d79a:	bf00      	nop
 800d79c:	200015ac 	.word	0x200015ac

0800d7a0 <_free_r>:
 800d7a0:	b538      	push	{r3, r4, r5, lr}
 800d7a2:	4605      	mov	r5, r0
 800d7a4:	2900      	cmp	r1, #0
 800d7a6:	d043      	beq.n	800d830 <_free_r+0x90>
 800d7a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7ac:	1f0c      	subs	r4, r1, #4
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	bfb8      	it	lt
 800d7b2:	18e4      	addlt	r4, r4, r3
 800d7b4:	f7ff ffe8 	bl	800d788 <__malloc_lock>
 800d7b8:	4a1e      	ldr	r2, [pc, #120]	; (800d834 <_free_r+0x94>)
 800d7ba:	6813      	ldr	r3, [r2, #0]
 800d7bc:	4610      	mov	r0, r2
 800d7be:	b933      	cbnz	r3, 800d7ce <_free_r+0x2e>
 800d7c0:	6063      	str	r3, [r4, #4]
 800d7c2:	6014      	str	r4, [r2, #0]
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7ca:	f7ff bfe3 	b.w	800d794 <__malloc_unlock>
 800d7ce:	42a3      	cmp	r3, r4
 800d7d0:	d90a      	bls.n	800d7e8 <_free_r+0x48>
 800d7d2:	6821      	ldr	r1, [r4, #0]
 800d7d4:	1862      	adds	r2, r4, r1
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	bf01      	itttt	eq
 800d7da:	681a      	ldreq	r2, [r3, #0]
 800d7dc:	685b      	ldreq	r3, [r3, #4]
 800d7de:	1852      	addeq	r2, r2, r1
 800d7e0:	6022      	streq	r2, [r4, #0]
 800d7e2:	6063      	str	r3, [r4, #4]
 800d7e4:	6004      	str	r4, [r0, #0]
 800d7e6:	e7ed      	b.n	800d7c4 <_free_r+0x24>
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	b10b      	cbz	r3, 800d7f2 <_free_r+0x52>
 800d7ee:	42a3      	cmp	r3, r4
 800d7f0:	d9fa      	bls.n	800d7e8 <_free_r+0x48>
 800d7f2:	6811      	ldr	r1, [r2, #0]
 800d7f4:	1850      	adds	r0, r2, r1
 800d7f6:	42a0      	cmp	r0, r4
 800d7f8:	d10b      	bne.n	800d812 <_free_r+0x72>
 800d7fa:	6820      	ldr	r0, [r4, #0]
 800d7fc:	4401      	add	r1, r0
 800d7fe:	1850      	adds	r0, r2, r1
 800d800:	4283      	cmp	r3, r0
 800d802:	6011      	str	r1, [r2, #0]
 800d804:	d1de      	bne.n	800d7c4 <_free_r+0x24>
 800d806:	6818      	ldr	r0, [r3, #0]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	4401      	add	r1, r0
 800d80c:	6011      	str	r1, [r2, #0]
 800d80e:	6053      	str	r3, [r2, #4]
 800d810:	e7d8      	b.n	800d7c4 <_free_r+0x24>
 800d812:	d902      	bls.n	800d81a <_free_r+0x7a>
 800d814:	230c      	movs	r3, #12
 800d816:	602b      	str	r3, [r5, #0]
 800d818:	e7d4      	b.n	800d7c4 <_free_r+0x24>
 800d81a:	6820      	ldr	r0, [r4, #0]
 800d81c:	1821      	adds	r1, r4, r0
 800d81e:	428b      	cmp	r3, r1
 800d820:	bf01      	itttt	eq
 800d822:	6819      	ldreq	r1, [r3, #0]
 800d824:	685b      	ldreq	r3, [r3, #4]
 800d826:	1809      	addeq	r1, r1, r0
 800d828:	6021      	streq	r1, [r4, #0]
 800d82a:	6063      	str	r3, [r4, #4]
 800d82c:	6054      	str	r4, [r2, #4]
 800d82e:	e7c9      	b.n	800d7c4 <_free_r+0x24>
 800d830:	bd38      	pop	{r3, r4, r5, pc}
 800d832:	bf00      	nop
 800d834:	200004ac 	.word	0x200004ac

0800d838 <_realloc_r>:
 800d838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83a:	4607      	mov	r7, r0
 800d83c:	4614      	mov	r4, r2
 800d83e:	460e      	mov	r6, r1
 800d840:	b921      	cbnz	r1, 800d84c <_realloc_r+0x14>
 800d842:	4611      	mov	r1, r2
 800d844:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d848:	f7ff b864 	b.w	800c914 <_malloc_r>
 800d84c:	b922      	cbnz	r2, 800d858 <_realloc_r+0x20>
 800d84e:	f7ff ffa7 	bl	800d7a0 <_free_r>
 800d852:	4625      	mov	r5, r4
 800d854:	4628      	mov	r0, r5
 800d856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d858:	f000 f848 	bl	800d8ec <_malloc_usable_size_r>
 800d85c:	42a0      	cmp	r0, r4
 800d85e:	d20f      	bcs.n	800d880 <_realloc_r+0x48>
 800d860:	4621      	mov	r1, r4
 800d862:	4638      	mov	r0, r7
 800d864:	f7ff f856 	bl	800c914 <_malloc_r>
 800d868:	4605      	mov	r5, r0
 800d86a:	2800      	cmp	r0, #0
 800d86c:	d0f2      	beq.n	800d854 <_realloc_r+0x1c>
 800d86e:	4631      	mov	r1, r6
 800d870:	4622      	mov	r2, r4
 800d872:	f7fe fec7 	bl	800c604 <memcpy>
 800d876:	4631      	mov	r1, r6
 800d878:	4638      	mov	r0, r7
 800d87a:	f7ff ff91 	bl	800d7a0 <_free_r>
 800d87e:	e7e9      	b.n	800d854 <_realloc_r+0x1c>
 800d880:	4635      	mov	r5, r6
 800d882:	e7e7      	b.n	800d854 <_realloc_r+0x1c>

0800d884 <_read_r>:
 800d884:	b538      	push	{r3, r4, r5, lr}
 800d886:	4604      	mov	r4, r0
 800d888:	4608      	mov	r0, r1
 800d88a:	4611      	mov	r1, r2
 800d88c:	2200      	movs	r2, #0
 800d88e:	4d05      	ldr	r5, [pc, #20]	; (800d8a4 <_read_r+0x20>)
 800d890:	602a      	str	r2, [r5, #0]
 800d892:	461a      	mov	r2, r3
 800d894:	f7f5 fe8a 	bl	80035ac <_read>
 800d898:	1c43      	adds	r3, r0, #1
 800d89a:	d102      	bne.n	800d8a2 <_read_r+0x1e>
 800d89c:	682b      	ldr	r3, [r5, #0]
 800d89e:	b103      	cbz	r3, 800d8a2 <_read_r+0x1e>
 800d8a0:	6023      	str	r3, [r4, #0]
 800d8a2:	bd38      	pop	{r3, r4, r5, pc}
 800d8a4:	200015b4 	.word	0x200015b4

0800d8a8 <_fstat_r>:
 800d8a8:	b538      	push	{r3, r4, r5, lr}
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	4d06      	ldr	r5, [pc, #24]	; (800d8c8 <_fstat_r+0x20>)
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	4608      	mov	r0, r1
 800d8b2:	4611      	mov	r1, r2
 800d8b4:	602b      	str	r3, [r5, #0]
 800d8b6:	f7f5 fea1 	bl	80035fc <_fstat>
 800d8ba:	1c43      	adds	r3, r0, #1
 800d8bc:	d102      	bne.n	800d8c4 <_fstat_r+0x1c>
 800d8be:	682b      	ldr	r3, [r5, #0]
 800d8c0:	b103      	cbz	r3, 800d8c4 <_fstat_r+0x1c>
 800d8c2:	6023      	str	r3, [r4, #0]
 800d8c4:	bd38      	pop	{r3, r4, r5, pc}
 800d8c6:	bf00      	nop
 800d8c8:	200015b4 	.word	0x200015b4

0800d8cc <_isatty_r>:
 800d8cc:	b538      	push	{r3, r4, r5, lr}
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	4d05      	ldr	r5, [pc, #20]	; (800d8e8 <_isatty_r+0x1c>)
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	4608      	mov	r0, r1
 800d8d6:	602b      	str	r3, [r5, #0]
 800d8d8:	f7f5 fe9f 	bl	800361a <_isatty>
 800d8dc:	1c43      	adds	r3, r0, #1
 800d8de:	d102      	bne.n	800d8e6 <_isatty_r+0x1a>
 800d8e0:	682b      	ldr	r3, [r5, #0]
 800d8e2:	b103      	cbz	r3, 800d8e6 <_isatty_r+0x1a>
 800d8e4:	6023      	str	r3, [r4, #0]
 800d8e6:	bd38      	pop	{r3, r4, r5, pc}
 800d8e8:	200015b4 	.word	0x200015b4

0800d8ec <_malloc_usable_size_r>:
 800d8ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8f0:	1f18      	subs	r0, r3, #4
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	bfbc      	itt	lt
 800d8f6:	580b      	ldrlt	r3, [r1, r0]
 800d8f8:	18c0      	addlt	r0, r0, r3
 800d8fa:	4770      	bx	lr
 800d8fc:	0000      	movs	r0, r0
	...

0800d900 <floor>:
 800d900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d904:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d908:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d90c:	2e13      	cmp	r6, #19
 800d90e:	4602      	mov	r2, r0
 800d910:	460b      	mov	r3, r1
 800d912:	4607      	mov	r7, r0
 800d914:	460c      	mov	r4, r1
 800d916:	4605      	mov	r5, r0
 800d918:	dc34      	bgt.n	800d984 <floor+0x84>
 800d91a:	2e00      	cmp	r6, #0
 800d91c:	da15      	bge.n	800d94a <floor+0x4a>
 800d91e:	a334      	add	r3, pc, #208	; (adr r3, 800d9f0 <floor+0xf0>)
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	f7f2 fc22 	bl	800016c <__adddf3>
 800d928:	2200      	movs	r2, #0
 800d92a:	2300      	movs	r3, #0
 800d92c:	f7f2 fe52 	bl	80005d4 <__aeabi_dcmpgt>
 800d930:	b140      	cbz	r0, 800d944 <floor+0x44>
 800d932:	2c00      	cmp	r4, #0
 800d934:	da59      	bge.n	800d9ea <floor+0xea>
 800d936:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d93a:	ea57 0503 	orrs.w	r5, r7, r3
 800d93e:	d001      	beq.n	800d944 <floor+0x44>
 800d940:	2500      	movs	r5, #0
 800d942:	4c2d      	ldr	r4, [pc, #180]	; (800d9f8 <floor+0xf8>)
 800d944:	4623      	mov	r3, r4
 800d946:	462f      	mov	r7, r5
 800d948:	e025      	b.n	800d996 <floor+0x96>
 800d94a:	4a2c      	ldr	r2, [pc, #176]	; (800d9fc <floor+0xfc>)
 800d94c:	fa42 f806 	asr.w	r8, r2, r6
 800d950:	ea01 0208 	and.w	r2, r1, r8
 800d954:	4302      	orrs	r2, r0
 800d956:	d01e      	beq.n	800d996 <floor+0x96>
 800d958:	a325      	add	r3, pc, #148	; (adr r3, 800d9f0 <floor+0xf0>)
 800d95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95e:	f7f2 fc05 	bl	800016c <__adddf3>
 800d962:	2200      	movs	r2, #0
 800d964:	2300      	movs	r3, #0
 800d966:	f7f2 fe35 	bl	80005d4 <__aeabi_dcmpgt>
 800d96a:	2800      	cmp	r0, #0
 800d96c:	d0ea      	beq.n	800d944 <floor+0x44>
 800d96e:	2c00      	cmp	r4, #0
 800d970:	bfbe      	ittt	lt
 800d972:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d976:	fa43 f606 	asrlt.w	r6, r3, r6
 800d97a:	19a4      	addlt	r4, r4, r6
 800d97c:	2500      	movs	r5, #0
 800d97e:	ea24 0408 	bic.w	r4, r4, r8
 800d982:	e7df      	b.n	800d944 <floor+0x44>
 800d984:	2e33      	cmp	r6, #51	; 0x33
 800d986:	dd0a      	ble.n	800d99e <floor+0x9e>
 800d988:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d98c:	d103      	bne.n	800d996 <floor+0x96>
 800d98e:	f7f2 fbed 	bl	800016c <__adddf3>
 800d992:	4607      	mov	r7, r0
 800d994:	460b      	mov	r3, r1
 800d996:	4638      	mov	r0, r7
 800d998:	4619      	mov	r1, r3
 800d99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d99e:	f04f 32ff 	mov.w	r2, #4294967295
 800d9a2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800d9a6:	fa22 f808 	lsr.w	r8, r2, r8
 800d9aa:	ea18 0f00 	tst.w	r8, r0
 800d9ae:	d0f2      	beq.n	800d996 <floor+0x96>
 800d9b0:	a30f      	add	r3, pc, #60	; (adr r3, 800d9f0 <floor+0xf0>)
 800d9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b6:	f7f2 fbd9 	bl	800016c <__adddf3>
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	2300      	movs	r3, #0
 800d9be:	f7f2 fe09 	bl	80005d4 <__aeabi_dcmpgt>
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	d0be      	beq.n	800d944 <floor+0x44>
 800d9c6:	2c00      	cmp	r4, #0
 800d9c8:	da02      	bge.n	800d9d0 <floor+0xd0>
 800d9ca:	2e14      	cmp	r6, #20
 800d9cc:	d103      	bne.n	800d9d6 <floor+0xd6>
 800d9ce:	3401      	adds	r4, #1
 800d9d0:	ea25 0508 	bic.w	r5, r5, r8
 800d9d4:	e7b6      	b.n	800d944 <floor+0x44>
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d9dc:	fa03 f606 	lsl.w	r6, r3, r6
 800d9e0:	4435      	add	r5, r6
 800d9e2:	42bd      	cmp	r5, r7
 800d9e4:	bf38      	it	cc
 800d9e6:	18e4      	addcc	r4, r4, r3
 800d9e8:	e7f2      	b.n	800d9d0 <floor+0xd0>
 800d9ea:	2500      	movs	r5, #0
 800d9ec:	462c      	mov	r4, r5
 800d9ee:	e7a9      	b.n	800d944 <floor+0x44>
 800d9f0:	8800759c 	.word	0x8800759c
 800d9f4:	7e37e43c 	.word	0x7e37e43c
 800d9f8:	bff00000 	.word	0xbff00000
 800d9fc:	000fffff 	.word	0x000fffff

0800da00 <_init>:
 800da00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da02:	bf00      	nop
 800da04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da06:	bc08      	pop	{r3}
 800da08:	469e      	mov	lr, r3
 800da0a:	4770      	bx	lr

0800da0c <_fini>:
 800da0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0e:	bf00      	nop
 800da10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da12:	bc08      	pop	{r3}
 800da14:	469e      	mov	lr, r3
 800da16:	4770      	bx	lr
